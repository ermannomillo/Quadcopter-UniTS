
Lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a8  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008354  08008354  00009354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800838c  0800838c  0000938c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008394  08008394  00009394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008398  08008398  00009398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800839c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000248  24000010  080083ac  0000a010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000258  080083ac  0000a258  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014c66  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000023ee  00000000  00000000  0001eca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001030  00000000  00000000  00021098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cbb  00000000  00000000  000220c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ff89  00000000  00000000  00022d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013d00  00000000  00000000  00052d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ecce  00000000  00000000  00066a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a56da  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004538  00000000  00000000  001a5720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001a9c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800833c 	.word	0x0800833c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800833c 	.word	0x0800833c

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 f8eb 	bl	80017bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f847 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fc41 	bl	8000e70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ee:	f000 fbeb 	bl	8000dc8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80005f2:	f000 fc35 	bl	8000e60 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 80005f6:	f000 f8b7 	bl	8000768 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005fa:	f000 f963 	bl	80008c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005fe:	f000 fa01 	bl	8000a04 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000602:	f000 fa9f 	bl	8000b44 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000606:	f000 fb3d 	bl	8000c84 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	4816      	ldr	r0, [pc, #88]	@ (8000668 <main+0x8c>)
 800060e:	f004 fb15 	bl	8004c3c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (count < 600) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800061c:	da03      	bge.n	8000626 <main+0x4a>
			  count += 10;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	330a      	adds	r3, #10
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	e001      	b.n	800062a <main+0x4e>

		}else {
			  count = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]

		}
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800062a:	2100      	movs	r1, #0
 800062c:	480e      	ldr	r0, [pc, #56]	@ (8000668 <main+0x8c>)
 800062e:	f004 fc13 	bl	8004e58 <HAL_TIM_PWM_Stop>
		  TIM1->CCR1 =  count;
 8000632:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <main+0x90>)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	6353      	str	r3, [r2, #52]	@ 0x34
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000638:	2100      	movs	r1, #0
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <main+0x8c>)
 800063c:	f004 fafe 	bl	8004c3c <HAL_TIM_PWM_Start>

		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000640:	2104      	movs	r1, #4
 8000642:	480b      	ldr	r0, [pc, #44]	@ (8000670 <main+0x94>)
 8000644:	f004 fd00 	bl	8005048 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000648:	2100      	movs	r1, #0
 800064a:	4809      	ldr	r0, [pc, #36]	@ (8000670 <main+0x94>)
 800064c:	f004 fe72 	bl	8005334 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8000650:	2104      	movs	r1, #4
 8000652:	4808      	ldr	r0, [pc, #32]	@ (8000674 <main+0x98>)
 8000654:	f004 fcf8 	bl	8005048 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000658:	2100      	movs	r1, #0
 800065a:	4806      	ldr	r0, [pc, #24]	@ (8000674 <main+0x98>)
 800065c:	f004 fe6a 	bl	8005334 <HAL_TIM_IC_Start_IT>
		  HAL_Delay(200);
 8000660:	20c8      	movs	r0, #200	@ 0xc8
 8000662:	f001 f93d 	bl	80018e0 <HAL_Delay>
	  if (count < 600) {
 8000666:	e7d6      	b.n	8000616 <main+0x3a>
 8000668:	2400002c 	.word	0x2400002c
 800066c:	40010000 	.word	0x40010000
 8000670:	24000078 	.word	0x24000078
 8000674:	24000110 	.word	0x24000110

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09c      	sub	sp, #112	@ 0x70
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000682:	224c      	movs	r2, #76	@ 0x4c
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f007 fe2c 	bl	80082e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	2220      	movs	r2, #32
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fe26 	bl	80082e4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000698:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <SystemClock_Config+0xe8>)
 800069a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800069e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006a2:	2004      	movs	r0, #4
 80006a4:	f001 fc1a 	bl	8001edc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <SystemClock_Config+0xec>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000764 <SystemClock_Config+0xec>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <SystemClock_Config+0xec>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c4:	bf00      	nop
 80006c6:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <SystemClock_Config+0xec>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006d2:	d1f8      	bne.n	80006c6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006d4:	2321      	movs	r3, #33	@ 0x21
 80006d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006de:	2301      	movs	r3, #1
 80006e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 80006ee:	2325      	movs	r3, #37	@ 0x25
 80006f0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006fe:	230c      	movs	r3, #12
 8000700:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000702:	2300      	movs	r3, #0
 8000704:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fc3d 	bl	8001f90 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800071c:	f000 fd68 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	233f      	movs	r3, #63	@ 0x3f
 8000722:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000730:	2340      	movs	r3, #64	@ 0x40
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000734:	2340      	movs	r3, #64	@ 0x40
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000738:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073e:	2340      	movs	r3, #64	@ 0x40
 8000740:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2103      	movs	r1, #3
 8000746:	4618      	mov	r0, r3
 8000748:	f002 f854 	bl	80027f4 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000752:	f000 fd4d 	bl	80011f0 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3770      	adds	r7, #112	@ 0x70
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	58024400 	.word	0x58024400
 8000764:	58024800 	.word	0x58024800

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b09c      	sub	sp, #112	@ 0x70
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000788:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]
 800079a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2234      	movs	r2, #52	@ 0x34
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 fd9e 	bl	80082e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a8:	4b44      	ldr	r3, [pc, #272]	@ (80008bc <MX_TIM1_Init+0x154>)
 80007aa:	4a45      	ldr	r2, [pc, #276]	@ (80008c0 <MX_TIM1_Init+0x158>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 80007ae:	4b43      	ldr	r3, [pc, #268]	@ (80008bc <MX_TIM1_Init+0x154>)
 80007b0:	f240 227f 	movw	r2, #639	@ 0x27f
 80007b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b6:	4b41      	ldr	r3, [pc, #260]	@ (80008bc <MX_TIM1_Init+0x154>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80007bc:	4b3f      	ldr	r3, [pc, #252]	@ (80008bc <MX_TIM1_Init+0x154>)
 80007be:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80007c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b3d      	ldr	r3, [pc, #244]	@ (80008bc <MX_TIM1_Init+0x154>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ca:	4b3c      	ldr	r3, [pc, #240]	@ (80008bc <MX_TIM1_Init+0x154>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b3a      	ldr	r3, [pc, #232]	@ (80008bc <MX_TIM1_Init+0x154>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d6:	4839      	ldr	r0, [pc, #228]	@ (80008bc <MX_TIM1_Init+0x154>)
 80007d8:	f004 f978 	bl	8004acc <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80007e2:	f000 fd05 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ea:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ec:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007f0:	4619      	mov	r1, r3
 80007f2:	4832      	ldr	r0, [pc, #200]	@ (80008bc <MX_TIM1_Init+0x154>)
 80007f4:	f005 fa64 	bl	8005cc0 <HAL_TIM_ConfigClockSource>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80007fe:	f000 fcf7 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000802:	482e      	ldr	r0, [pc, #184]	@ (80008bc <MX_TIM1_Init+0x154>)
 8000804:	f004 f9b9 	bl	8004b7a <HAL_TIM_PWM_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800080e:	f000 fcef 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000822:	4619      	mov	r1, r3
 8000824:	4825      	ldr	r0, [pc, #148]	@ (80008bc <MX_TIM1_Init+0x154>)
 8000826:	f006 fa45 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000830:	f000 fcde 	bl	80011f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000834:	2360      	movs	r3, #96	@ 0x60
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000850:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	4818      	ldr	r0, [pc, #96]	@ (80008bc <MX_TIM1_Init+0x154>)
 800085a:	f005 f91d 	bl	8005a98 <HAL_TIM_PWM_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000864:	f000 fcc4 	bl	80011f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800088a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4619      	mov	r1, r3
 800089c:	4807      	ldr	r0, [pc, #28]	@ (80008bc <MX_TIM1_Init+0x154>)
 800089e:	f006 fa97 	bl	8006dd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008a8:	f000 fca2 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ac:	4803      	ldr	r0, [pc, #12]	@ (80008bc <MX_TIM1_Init+0x154>)
 80008ae:	f000 fde5 	bl	800147c <HAL_TIM_MspPostInit>

}
 80008b2:	bf00      	nop
 80008b4:	3770      	adds	r7, #112	@ 0x70
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2400002c 	.word	0x2400002c
 80008c0:	40010000 	.word	0x40010000

080008c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b090      	sub	sp, #64	@ 0x40
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000900:	4b3e      	ldr	r3, [pc, #248]	@ (80009fc <MX_TIM3_Init+0x138>)
 8000902:	4a3f      	ldr	r2, [pc, #252]	@ (8000a00 <MX_TIM3_Init+0x13c>)
 8000904:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 8000906:	4b3d      	ldr	r3, [pc, #244]	@ (80009fc <MX_TIM3_Init+0x138>)
 8000908:	f240 227f 	movw	r2, #639	@ 0x27f
 800090c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b3b      	ldr	r3, [pc, #236]	@ (80009fc <MX_TIM3_Init+0x138>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000914:	4b39      	ldr	r3, [pc, #228]	@ (80009fc <MX_TIM3_Init+0x138>)
 8000916:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800091a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <MX_TIM3_Init+0x138>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b36      	ldr	r3, [pc, #216]	@ (80009fc <MX_TIM3_Init+0x138>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000928:	4834      	ldr	r0, [pc, #208]	@ (80009fc <MX_TIM3_Init+0x138>)
 800092a:	f004 f8cf 	bl	8004acc <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000934:	f000 fc5c 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000942:	4619      	mov	r1, r3
 8000944:	482d      	ldr	r0, [pc, #180]	@ (80009fc <MX_TIM3_Init+0x138>)
 8000946:	f005 f9bb 	bl	8005cc0 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000950:	f000 fc4e 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000954:	4829      	ldr	r0, [pc, #164]	@ (80009fc <MX_TIM3_Init+0x138>)
 8000956:	f004 fb15 	bl	8004f84 <HAL_TIM_IC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000960:	f000 fc46 	bl	80011f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000964:	2304      	movs	r3, #4
 8000966:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000968:	2350      	movs	r3, #80	@ 0x50
 800096a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	481f      	ldr	r0, [pc, #124]	@ (80009fc <MX_TIM3_Init+0x138>)
 8000980:	f005 fa96 	bl	8005eb0 <HAL_TIM_SlaveConfigSynchro>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800098a:	f000 fc31 	bl	80011f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000992:	2301      	movs	r3, #1
 8000994:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	2200      	movs	r2, #0
 80009a4:	4619      	mov	r1, r3
 80009a6:	4815      	ldr	r0, [pc, #84]	@ (80009fc <MX_TIM3_Init+0x138>)
 80009a8:	f004 ffd9 	bl	800595e <HAL_TIM_IC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80009b2:	f000 fc1d 	bl	80011f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009b6:	2302      	movs	r3, #2
 80009b8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009ba:	2302      	movs	r3, #2
 80009bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2204      	movs	r2, #4
 80009c4:	4619      	mov	r1, r3
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <MX_TIM3_Init+0x138>)
 80009c8:	f004 ffc9 	bl	800595e <HAL_TIM_IC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 80009d2:	f000 fc0d 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	@ (80009fc <MX_TIM3_Init+0x138>)
 80009e4:	f006 f966 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 80009ee:	f000 fbff 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3740      	adds	r7, #64	@ 0x40
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000078 	.word	0x24000078
 8000a00:	40000400 	.word	0x40000400

08000a04 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b090      	sub	sp, #64	@ 0x40
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a40:	4b3e      	ldr	r3, [pc, #248]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000a42:	4a3f      	ldr	r2, [pc, #252]	@ (8000b40 <MX_TIM4_Init+0x13c>)
 8000a44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8000a46:	4b3d      	ldr	r3, [pc, #244]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000a48:	f240 227f 	movw	r2, #639	@ 0x27f
 8000a4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a54:	4b39      	ldr	r3, [pc, #228]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000a56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b37      	ldr	r3, [pc, #220]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b36      	ldr	r3, [pc, #216]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a68:	4834      	ldr	r0, [pc, #208]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000a6a:	f004 f82f 	bl	8004acc <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000a74:	f000 fbbc 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a82:	4619      	mov	r1, r3
 8000a84:	482d      	ldr	r0, [pc, #180]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000a86:	f005 f91b 	bl	8005cc0 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000a90:	f000 fbae 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000a94:	4829      	ldr	r0, [pc, #164]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000a96:	f004 fa75 	bl	8004f84 <HAL_TIM_IC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000aa0:	f000 fba6 	bl	80011f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000aa8:	2350      	movs	r3, #80	@ 0x50
 8000aaa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	481f      	ldr	r0, [pc, #124]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000ac0:	f005 f9f6 	bl	8005eb0 <HAL_TIM_SlaveConfigSynchro>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000aca:	f000 fb91 	bl	80011f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4815      	ldr	r0, [pc, #84]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000ae8:	f004 ff39 	bl	800595e <HAL_TIM_IC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8000af2:	f000 fb7d 	bl	80011f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000afa:	2302      	movs	r3, #2
 8000afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	2204      	movs	r2, #4
 8000b04:	4619      	mov	r1, r3
 8000b06:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000b08:	f004 ff29 	bl	800595e <HAL_TIM_IC_ConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8000b12:	f000 fb6d 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b1e:	463b      	mov	r3, r7
 8000b20:	4619      	mov	r1, r3
 8000b22:	4806      	ldr	r0, [pc, #24]	@ (8000b3c <MX_TIM4_Init+0x138>)
 8000b24:	f006 f8c6 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 8000b2e:	f000 fb5f 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	3740      	adds	r7, #64	@ 0x40
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	240000c4 	.word	0x240000c4
 8000b40:	40000800 	.word	0x40000800

08000b44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b090      	sub	sp, #64	@ 0x40
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b76:	463b      	mov	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b80:	4b3e      	ldr	r3, [pc, #248]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000b82:	4a3f      	ldr	r2, [pc, #252]	@ (8000c80 <MX_TIM5_Init+0x13c>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 639;
 8000b86:	4b3d      	ldr	r3, [pc, #244]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000b88:	f240 227f 	movw	r2, #639	@ 0x27f
 8000b8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000b94:	4b39      	ldr	r3, [pc, #228]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b36      	ldr	r3, [pc, #216]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ba8:	4834      	ldr	r0, [pc, #208]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000baa:	f003 ff8f 	bl	8004acc <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000bb4:	f000 fb1c 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bbe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	482d      	ldr	r0, [pc, #180]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000bc6:	f005 f87b 	bl	8005cc0 <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000bd0:	f000 fb0e 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000bd4:	4829      	ldr	r0, [pc, #164]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000bd6:	f004 f9d5 	bl	8004f84 <HAL_TIM_IC_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000be0:	f000 fb06 	bl	80011f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000be4:	2304      	movs	r3, #4
 8000be6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000be8:	2350      	movs	r3, #80	@ 0x50
 8000bea:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481f      	ldr	r0, [pc, #124]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000c00:	f005 f956 	bl	8005eb0 <HAL_TIM_SlaveConfigSynchro>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8000c0a:	f000 faf1 	bl	80011f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c12:	2301      	movs	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2200      	movs	r2, #0
 8000c24:	4619      	mov	r1, r3
 8000c26:	4815      	ldr	r0, [pc, #84]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000c28:	f004 fe99 	bl	800595e <HAL_TIM_IC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8000c32:	f000 fadd 	bl	80011f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c36:	2302      	movs	r3, #2
 8000c38:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2204      	movs	r2, #4
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000c48:	f004 fe89 	bl	800595e <HAL_TIM_IC_ConfigChannel>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 8000c52:	f000 facd 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <MX_TIM5_Init+0x138>)
 8000c64:	f006 f826 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM5_Init+0x12e>
  {
    Error_Handler();
 8000c6e:	f000 fabf 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3740      	adds	r7, #64	@ 0x40
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000110 	.word	0x24000110
 8000c80:	40000c00 	.word	0x40000c00

08000c84 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b090      	sub	sp, #64	@ 0x40
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000cc2:	4a40      	ldr	r2, [pc, #256]	@ (8000dc4 <MX_TIM15_Init+0x140>)
 8000cc4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 8000cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000cc8:	f240 227f 	movw	r2, #639	@ 0x27f
 8000ccc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000cd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cda:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b38      	ldr	r3, [pc, #224]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000ce2:	4b37      	ldr	r3, [pc, #220]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b35      	ldr	r3, [pc, #212]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000cee:	4834      	ldr	r0, [pc, #208]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000cf0:	f003 feec 	bl	8004acc <HAL_TIM_Base_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8000cfa:	f000 fa79 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d08:	4619      	mov	r1, r3
 8000d0a:	482d      	ldr	r0, [pc, #180]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000d0c:	f004 ffd8 	bl	8005cc0 <HAL_TIM_ConfigClockSource>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 8000d16:	f000 fa6b 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000d1a:	4829      	ldr	r0, [pc, #164]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000d1c:	f004 f932 	bl	8004f84 <HAL_TIM_IC_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8000d26:	f000 fa63 	bl	80011f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d2e:	2350      	movs	r3, #80	@ 0x50
 8000d30:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	481e      	ldr	r0, [pc, #120]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000d46:	f005 f8b3 	bl	8005eb0 <HAL_TIM_SlaveConfigSynchro>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000d50:	f000 fa4e 	bl	80011f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4814      	ldr	r0, [pc, #80]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000d6e:	f004 fdf6 	bl	800595e <HAL_TIM_IC_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8000d78:	f000 fa3a 	bl	80011f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d80:	2302      	movs	r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2204      	movs	r2, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000d8e:	f004 fde6 	bl	800595e <HAL_TIM_IC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 8000d98:	f000 fa2a 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_TIM15_Init+0x13c>)
 8000daa:	f005 ff83 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 8000db4:	f000 fa1c 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3740      	adds	r7, #64	@ 0x40
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2400015c 	.word	0x2400015c
 8000dc4:	40014000 	.word	0x40014000

08000dc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dce:	4a23      	ldr	r2, [pc, #140]	@ (8000e5c <MX_USART3_UART_Init+0x94>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e10:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e12:	f006 f887 	bl	8006f24 <HAL_UART_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e1c:	f000 f9e8 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	480d      	ldr	r0, [pc, #52]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e24:	f007 f993 	bl	800814e <HAL_UARTEx_SetTxFifoThreshold>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e2e:	f000 f9df 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e36:	f007 f9c8 	bl	80081ca <HAL_UARTEx_SetRxFifoThreshold>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f000 f9d6 	bl	80011f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_USART3_UART_Init+0x90>)
 8000e46:	f007 f949 	bl	80080dc <HAL_UARTEx_DisableFifoMode>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e50:	f000 f9ce 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	240001a8 	.word	0x240001a8
 8000e5c:	40004800 	.word	0x40004800

08000e60 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08e      	sub	sp, #56	@ 0x38
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e86:	4b80      	ldr	r3, [pc, #512]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000e88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e8c:	4a7e      	ldr	r2, [pc, #504]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e96:	4b7c      	ldr	r3, [pc, #496]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000e98:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	623b      	str	r3, [r7, #32]
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea4:	4b78      	ldr	r3, [pc, #480]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000ea6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eaa:	4a77      	ldr	r2, [pc, #476]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000eb4:	4b74      	ldr	r3, [pc, #464]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000eb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec2:	4b71      	ldr	r3, [pc, #452]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000ec4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ec8:	4a6f      	ldr	r2, [pc, #444]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ed2:	4b6d      	ldr	r3, [pc, #436]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000ed4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed8:	f003 0320 	and.w	r3, r3, #32
 8000edc:	61bb      	str	r3, [r7, #24]
 8000ede:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee0:	4b69      	ldr	r3, [pc, #420]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000ee2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee6:	4a68      	ldr	r2, [pc, #416]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ef0:	4b65      	ldr	r3, [pc, #404]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000ef2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b62      	ldr	r3, [pc, #392]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f04:	4a60      	ldr	r2, [pc, #384]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f0e:	4b5e      	ldr	r3, [pc, #376]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f22:	4a59      	ldr	r2, [pc, #356]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f2c:	4b56      	ldr	r3, [pc, #344]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	4b53      	ldr	r3, [pc, #332]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f40:	4a51      	ldr	r2, [pc, #324]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f42:	f043 0308 	orr.w	r3, r3, #8
 8000f46:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f4a:	4b4f      	ldr	r3, [pc, #316]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f50:	f003 0308 	and.w	r3, r3, #8
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f58:	4b4b      	ldr	r3, [pc, #300]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f64:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f68:	4b47      	ldr	r3, [pc, #284]	@ (8001088 <MX_GPIO_Init+0x218>)
 8000f6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f7c:	4843      	ldr	r0, [pc, #268]	@ (800108c <MX_GPIO_Init+0x21c>)
 8000f7e:	f000 ff93 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000f88:	4841      	ldr	r0, [pc, #260]	@ (8001090 <MX_GPIO_Init+0x220>)
 8000f8a:	f000 ff8d 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2102      	movs	r1, #2
 8000f92:	4840      	ldr	r0, [pc, #256]	@ (8001094 <MX_GPIO_Init+0x224>)
 8000f94:	f000 ff88 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	483a      	ldr	r0, [pc, #232]	@ (8001098 <MX_GPIO_Init+0x228>)
 8000fae:	f000 fdcb 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4830      	ldr	r0, [pc, #192]	@ (800108c <MX_GPIO_Init+0x21c>)
 8000fcc:	f000 fdbc 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000fd0:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4829      	ldr	r0, [pc, #164]	@ (8001090 <MX_GPIO_Init+0x220>)
 8000fea:	f000 fdad 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000fee:	2380      	movs	r3, #128	@ 0x80
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4826      	ldr	r0, [pc, #152]	@ (800109c <MX_GPIO_Init+0x22c>)
 8001004:	f000 fda0 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101a:	4619      	mov	r1, r3
 800101c:	4820      	ldr	r0, [pc, #128]	@ (80010a0 <MX_GPIO_Init+0x230>)
 800101e:	f000 fd93 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001034:	230a      	movs	r3, #10
 8001036:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4818      	ldr	r0, [pc, #96]	@ (80010a0 <MX_GPIO_Init+0x230>)
 8001040:	f000 fd82 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001044:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	4810      	ldr	r0, [pc, #64]	@ (80010a0 <MX_GPIO_Init+0x230>)
 800105e:	f000 fd73 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001062:	2302      	movs	r3, #2
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4806      	ldr	r0, [pc, #24]	@ (8001094 <MX_GPIO_Init+0x224>)
 800107a:	f000 fd65 	bl	8001b48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800107e:	bf00      	nop
 8001080:	3738      	adds	r7, #56	@ 0x38
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	58024400 	.word	0x58024400
 800108c:	58021400 	.word	0x58021400
 8001090:	58020400 	.word	0x58020400
 8001094:	58021000 	.word	0x58021000
 8001098:	58020800 	.word	0x58020800
 800109c:	58021800 	.word	0x58021800
 80010a0:	58020000 	.word	0x58020000

080010a4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a47      	ldr	r2, [pc, #284]	@ (80011d0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d141      	bne.n	800113a <HAL_TIM_IC_CaptureCallback+0x96>
    {

        CycleTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f004 ff3b 	bl	8005f34 <HAL_TIM_ReadCapturedValue>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a44      	ldr	r2, [pc, #272]	@ (80011d4 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010c2:	6013      	str	r3, [r2, #0]
        Period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80010c4:	2104      	movs	r1, #4
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f004 ff34 	bl	8005f34 <HAL_TIM_ReadCapturedValue>
 80010cc:	4602      	mov	r2, r0
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b3f      	ldr	r3, [pc, #252]	@ (80011d8 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010da:	601a      	str	r2, [r3, #0]
    	if (CycleTime > 1990 && CycleTime < 2010 && Period > 0 && CycleTime >Period ) {
 80010dc:	4b3d      	ldr	r3, [pc, #244]	@ (80011d4 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d928      	bls.n	800113a <HAL_TIM_IC_CaptureCallback+0x96>
 80010e8:	4b3a      	ldr	r3, [pc, #232]	@ (80011d4 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d822      	bhi.n	800113a <HAL_TIM_IC_CaptureCallback+0x96>
 80010f4:	4b38      	ldr	r3, [pc, #224]	@ (80011d8 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01e      	beq.n	800113a <HAL_TIM_IC_CaptureCallback+0x96>
 80010fc:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b35      	ldr	r3, [pc, #212]	@ (80011d8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d918      	bls.n	800113a <HAL_TIM_IC_CaptureCallback+0x96>

    		Duty =  (float) Period/ (float) CycleTime;
 8001108:	4b33      	ldr	r3, [pc, #204]	@ (80011d8 <HAL_TIM_IC_CaptureCallback+0x134>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001114:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001124:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <HAL_TIM_IC_CaptureCallback+0x138>)
 8001126:	edc3 7a00 	vstr	s15, [r3]
    		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800112a:	2100      	movs	r1, #0
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f004 fa51 	bl	80055d4 <HAL_TIM_IC_Stop_IT>
    		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001132:	2104      	movs	r1, #4
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f004 f88b 	bl	8005250 <HAL_TIM_IC_Stop>

    	}
    }

    if (htim->Instance == TIM5)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a28      	ldr	r2, [pc, #160]	@ (80011e0 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d141      	bne.n	80011c8 <HAL_TIM_IC_CaptureCallback+0x124>
        {

            CycleTime2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001144:	2100      	movs	r1, #0
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f004 fef4 	bl	8005f34 <HAL_TIM_ReadCapturedValue>
 800114c:	4603      	mov	r3, r0
 800114e:	4a25      	ldr	r2, [pc, #148]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001150:	6013      	str	r3, [r2, #0]
            Period2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001152:	2104      	movs	r1, #4
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f004 feed 	bl	8005f34 <HAL_TIM_ReadCapturedValue>
 800115a:	4602      	mov	r2, r0
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	461a      	mov	r2, r3
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001168:	601a      	str	r2, [r3, #0]
        	if (CycleTime2 > 1990 && CycleTime2 < 2010 && Period2 > 0 && CycleTime2 > Period2) {
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0x140>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001172:	4293      	cmp	r3, r2
 8001174:	d928      	bls.n	80011c8 <HAL_TIM_IC_CaptureCallback+0x124>
 8001176:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 800117e:	4293      	cmp	r3, r2
 8001180:	d822      	bhi.n	80011c8 <HAL_TIM_IC_CaptureCallback+0x124>
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01e      	beq.n	80011c8 <HAL_TIM_IC_CaptureCallback+0x124>
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0x140>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d918      	bls.n	80011c8 <HAL_TIM_IC_CaptureCallback+0x124>

        		Duty2 =   (float) Period2 / (float) CycleTime2;
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0x140>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_TIM_IC_CaptureCallback+0x148>)
 80011b4:	edc3 7a00 	vstr	s15, [r3]
        		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80011b8:	2100      	movs	r1, #0
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f004 fa0a 	bl	80055d4 <HAL_TIM_IC_Stop_IT>
        		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80011c0:	2104      	movs	r1, #4
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f004 f844 	bl	8005250 <HAL_TIM_IC_Stop>

        	}
        }


}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40000400 	.word	0x40000400
 80011d4:	24000240 	.word	0x24000240
 80011d8:	24000244 	.word	0x24000244
 80011dc:	2400023c 	.word	0x2400023c
 80011e0:	40000c00 	.word	0x40000c00
 80011e4:	2400024c 	.word	0x2400024c
 80011e8:	24000250 	.word	0x24000250
 80011ec:	24000248 	.word	0x24000248

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <Error_Handler+0x8>

080011fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <HAL_MspInit+0x30>)
 8001204:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001208:	4a08      	ldr	r2, [pc, #32]	@ (800122c <HAL_MspInit+0x30>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_MspInit+0x30>)
 8001214:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	58024400 	.word	0x58024400

08001230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b090      	sub	sp, #64	@ 0x40
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a82      	ldr	r2, [pc, #520]	@ (8001458 <HAL_TIM_Base_MspInit+0x228>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10f      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001252:	4b82      	ldr	r3, [pc, #520]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 8001254:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001258:	4a80      	ldr	r2, [pc, #512]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001262:	4b7e      	ldr	r3, [pc, #504]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 8001264:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800126e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001270:	e0ee      	b.n	8001450 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM3)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a7a      	ldr	r2, [pc, #488]	@ (8001460 <HAL_TIM_Base_MspInit+0x230>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d136      	bne.n	80012ea <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800127c:	4b77      	ldr	r3, [pc, #476]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 800127e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001282:	4a76      	ldr	r2, [pc, #472]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800128c:	4b73      	ldr	r3, [pc, #460]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 800128e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b70      	ldr	r3, [pc, #448]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 800129c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012a0:	4a6e      	ldr	r2, [pc, #440]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80012aa:	4b6c      	ldr	r3, [pc, #432]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 80012ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	623b      	str	r3, [r7, #32]
 80012b6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012b8:	2310      	movs	r3, #16
 80012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c8:	2302      	movs	r3, #2
 80012ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d0:	4619      	mov	r1, r3
 80012d2:	4864      	ldr	r0, [pc, #400]	@ (8001464 <HAL_TIM_Base_MspInit+0x234>)
 80012d4:	f000 fc38 	bl	8001b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	201d      	movs	r0, #29
 80012de:	f000 fbfe 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012e2:	201d      	movs	r0, #29
 80012e4:	f000 fc15 	bl	8001b12 <HAL_NVIC_EnableIRQ>
}
 80012e8:	e0b2      	b.n	8001450 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM4)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001468 <HAL_TIM_Base_MspInit+0x238>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d136      	bne.n	8001362 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012f4:	4b59      	ldr	r3, [pc, #356]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 80012f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80012fa:	4a58      	ldr	r2, [pc, #352]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001304:	4b55      	ldr	r3, [pc, #340]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 8001306:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b52      	ldr	r3, [pc, #328]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 8001314:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001318:	4a50      	ldr	r2, [pc, #320]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001322:	4b4e      	ldr	r3, [pc, #312]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 8001324:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001330:	2340      	movs	r3, #64	@ 0x40
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001340:	2302      	movs	r3, #2
 8001342:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001348:	4619      	mov	r1, r3
 800134a:	4846      	ldr	r0, [pc, #280]	@ (8001464 <HAL_TIM_Base_MspInit+0x234>)
 800134c:	f000 fbfc 	bl	8001b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	201e      	movs	r0, #30
 8001356:	f000 fbc2 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800135a:	201e      	movs	r0, #30
 800135c:	f000 fbd9 	bl	8001b12 <HAL_NVIC_EnableIRQ>
}
 8001360:	e076      	b.n	8001450 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM5)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a41      	ldr	r2, [pc, #260]	@ (800146c <HAL_TIM_Base_MspInit+0x23c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d136      	bne.n	80013da <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800136c:	4b3b      	ldr	r3, [pc, #236]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 800136e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001372:	4a3a      	ldr	r2, [pc, #232]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800137c:	4b37      	ldr	r3, [pc, #220]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 800137e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b34      	ldr	r3, [pc, #208]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 800138c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001390:	4a32      	ldr	r2, [pc, #200]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800139a:	4b30      	ldr	r3, [pc, #192]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 800139c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013b8:	2302      	movs	r3, #2
 80013ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013c0:	4619      	mov	r1, r3
 80013c2:	482b      	ldr	r0, [pc, #172]	@ (8001470 <HAL_TIM_Base_MspInit+0x240>)
 80013c4:	f000 fbc0 	bl	8001b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2032      	movs	r0, #50	@ 0x32
 80013ce:	f000 fb86 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013d2:	2032      	movs	r0, #50	@ 0x32
 80013d4:	f000 fb9d 	bl	8001b12 <HAL_NVIC_EnableIRQ>
}
 80013d8:	e03a      	b.n	8001450 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM15)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a25      	ldr	r2, [pc, #148]	@ (8001474 <HAL_TIM_Base_MspInit+0x244>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d135      	bne.n	8001450 <HAL_TIM_Base_MspInit+0x220>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80013e4:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 80013e6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80013ea:	4a1c      	ldr	r2, [pc, #112]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 80013f6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80013fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 8001404:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001408:	4a14      	ldr	r2, [pc, #80]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_TIM_Base_MspInit+0x22c>)
 8001414:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001420:	2320      	movs	r3, #32
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001430:	2304      	movs	r3, #4
 8001432:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001434:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001438:	4619      	mov	r1, r3
 800143a:	480f      	ldr	r0, [pc, #60]	@ (8001478 <HAL_TIM_Base_MspInit+0x248>)
 800143c:	f000 fb84 	bl	8001b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	2074      	movs	r0, #116	@ 0x74
 8001446:	f000 fb4a 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800144a:	2074      	movs	r0, #116	@ 0x74
 800144c:	f000 fb61 	bl	8001b12 <HAL_NVIC_EnableIRQ>
}
 8001450:	bf00      	nop
 8001452:	3740      	adds	r7, #64	@ 0x40
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40010000 	.word	0x40010000
 800145c:	58024400 	.word	0x58024400
 8001460:	40000400 	.word	0x40000400
 8001464:	58020400 	.word	0x58020400
 8001468:	40000800 	.word	0x40000800
 800146c:	40000c00 	.word	0x40000c00
 8001470:	58020000 	.word	0x58020000
 8001474:	40014000 	.word	0x40014000
 8001478:	58021000 	.word	0x58021000

0800147c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <HAL_TIM_MspPostInit+0x6c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d11f      	bne.n	80014de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <HAL_TIM_MspPostInit+0x70>)
 80014a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014a4:	4a11      	ldr	r2, [pc, #68]	@ (80014ec <HAL_TIM_MspPostInit+0x70>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80014ae:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_TIM_MspPostInit+0x70>)
 80014b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <HAL_TIM_MspPostInit+0x74>)
 80014da:	f000 fb35 	bl	8001b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40010000 	.word	0x40010000
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58021000 	.word	0x58021000

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0ba      	sub	sp, #232	@ 0xe8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	22c0      	movs	r2, #192	@ 0xc0
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f006 fee5 	bl	80082e4 <memset>
  if(huart->Instance==USART3)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a27      	ldr	r2, [pc, #156]	@ (80015bc <HAL_UART_MspInit+0xc8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d146      	bne.n	80015b2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001524:	f04f 0202 	mov.w	r2, #2
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fce6 	bl	8002f0c <HAL_RCCEx_PeriphCLKConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001546:	f7ff fe53 	bl	80011f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800154a:	4b1d      	ldr	r3, [pc, #116]	@ (80015c0 <HAL_UART_MspInit+0xcc>)
 800154c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001550:	4a1b      	ldr	r2, [pc, #108]	@ (80015c0 <HAL_UART_MspInit+0xcc>)
 8001552:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001556:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_UART_MspInit+0xcc>)
 800155c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001568:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <HAL_UART_MspInit+0xcc>)
 800156a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800156e:	4a14      	ldr	r2, [pc, #80]	@ (80015c0 <HAL_UART_MspInit+0xcc>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_UART_MspInit+0xcc>)
 800157a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001586:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800158a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a0:	2307      	movs	r3, #7
 80015a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <HAL_UART_MspInit+0xd0>)
 80015ae:	f000 facb 	bl	8001b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	37e8      	adds	r7, #232	@ 0xe8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40004800 	.word	0x40004800
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58020c00 	.word	0x58020c00

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <NMI_Handler+0x4>

080015d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <MemManage_Handler+0x4>

080015e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <UsageFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800161e:	f000 f93f 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <TIM3_IRQHandler+0x10>)
 800162e:	f004 f88f 	bl	8005750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	24000078 	.word	0x24000078

0800163c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <TIM4_IRQHandler+0x10>)
 8001642:	f004 f885 	bl	8005750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	240000c4 	.word	0x240000c4

08001650 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <TIM5_IRQHandler+0x10>)
 8001656:	f004 f87b 	bl	8005750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	24000110 	.word	0x24000110

08001664 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <TIM15_IRQHandler+0x10>)
 800166a:	f004 f871 	bl	8005750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2400015c 	.word	0x2400015c

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800167c:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <SystemInit+0xd0>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001682:	4a31      	ldr	r2, [pc, #196]	@ (8001748 <SystemInit+0xd0>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800168c:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <SystemInit+0xd4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	2b02      	cmp	r3, #2
 8001696:	d807      	bhi.n	80016a8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001698:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <SystemInit+0xd4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 030f 	bic.w	r3, r3, #15
 80016a0:	4a2a      	ldr	r2, [pc, #168]	@ (800174c <SystemInit+0xd4>)
 80016a2:	f043 0303 	orr.w	r3, r3, #3
 80016a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016a8:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <SystemInit+0xd8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a28      	ldr	r2, [pc, #160]	@ (8001750 <SystemInit+0xd8>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016b4:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <SystemInit+0xd8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016ba:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <SystemInit+0xd8>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4924      	ldr	r1, [pc, #144]	@ (8001750 <SystemInit+0xd8>)
 80016c0:	4b24      	ldr	r3, [pc, #144]	@ (8001754 <SystemInit+0xdc>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016c6:	4b21      	ldr	r3, [pc, #132]	@ (800174c <SystemInit+0xd4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d007      	beq.n	80016e2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016d2:	4b1e      	ldr	r3, [pc, #120]	@ (800174c <SystemInit+0xd4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 030f 	bic.w	r3, r3, #15
 80016da:	4a1c      	ldr	r2, [pc, #112]	@ (800174c <SystemInit+0xd4>)
 80016dc:	f043 0303 	orr.w	r3, r3, #3
 80016e0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <SystemInit+0xd8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <SystemInit+0xd8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <SystemInit+0xd8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016f4:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <SystemInit+0xd8>)
 80016f6:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <SystemInit+0xe0>)
 80016f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <SystemInit+0xd8>)
 80016fc:	4a17      	ldr	r2, [pc, #92]	@ (800175c <SystemInit+0xe4>)
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001700:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <SystemInit+0xd8>)
 8001702:	4a17      	ldr	r2, [pc, #92]	@ (8001760 <SystemInit+0xe8>)
 8001704:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <SystemInit+0xd8>)
 8001708:	2200      	movs	r2, #0
 800170a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800170c:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <SystemInit+0xd8>)
 800170e:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <SystemInit+0xe8>)
 8001710:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001712:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <SystemInit+0xd8>)
 8001714:	2200      	movs	r2, #0
 8001716:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001718:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <SystemInit+0xd8>)
 800171a:	4a11      	ldr	r2, [pc, #68]	@ (8001760 <SystemInit+0xe8>)
 800171c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <SystemInit+0xd8>)
 8001720:	2200      	movs	r2, #0
 8001722:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001724:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <SystemInit+0xd8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <SystemInit+0xd8>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001730:	4b07      	ldr	r3, [pc, #28]	@ (8001750 <SystemInit+0xd8>)
 8001732:	2200      	movs	r2, #0
 8001734:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <SystemInit+0xec>)
 8001738:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800173c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00
 800174c:	52002000 	.word	0x52002000
 8001750:	58024400 	.word	0x58024400
 8001754:	eaf6ed7f 	.word	0xeaf6ed7f
 8001758:	02020200 	.word	0x02020200
 800175c:	01ff0000 	.word	0x01ff0000
 8001760:	01010280 	.word	0x01010280
 8001764:	52004000 	.word	0x52004000

08001768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800176c:	f7ff ff84 	bl	8001678 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001770:	480c      	ldr	r0, [pc, #48]	@ (80017a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001772:	490d      	ldr	r1, [pc, #52]	@ (80017a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001788:	4c0a      	ldr	r4, [pc, #40]	@ (80017b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001796:	f006 fdad 	bl	80082f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179a:	f7fe ff1f 	bl	80005dc <main>
  bx  lr
 800179e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017a0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80017a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017a8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80017ac:	0800839c 	.word	0x0800839c
  ldr r2, =_sbss
 80017b0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80017b4:	24000258 	.word	0x24000258

080017b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC_IRQHandler>
	...

080017bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c2:	2003      	movs	r0, #3
 80017c4:	f000 f980 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80017c8:	f001 f9ca 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_Init+0x68>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	4913      	ldr	r1, [pc, #76]	@ (8001828 <HAL_Init+0x6c>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_Init+0x68>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <HAL_Init+0x6c>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	fa22 f303 	lsr.w	r3, r2, r3
 80017fc:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <HAL_Init+0x70>)
 80017fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_Init+0x74>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f814 	bl	8001834 <HAL_InitTick>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e002      	b.n	800181c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001816:	f7ff fcf1 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	58024400 	.word	0x58024400
 8001828:	08008354 	.word	0x08008354
 800182c:	24000004 	.word	0x24000004
 8001830:	24000000 	.word	0x24000000

08001834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800183c:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_InitTick+0x60>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e021      	b.n	800188c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <HAL_InitTick+0x64>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <HAL_InitTick+0x60>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f965 	bl	8001b2e <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d80a      	bhi.n	800188a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800187c:	f000 f92f 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001880:	4a06      	ldr	r2, [pc, #24]	@ (800189c <HAL_InitTick+0x68>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2400000c 	.word	0x2400000c
 8001898:	24000000 	.word	0x24000000
 800189c:	24000008 	.word	0x24000008

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2400000c 	.word	0x2400000c
 80018c4:	24000254 	.word	0x24000254

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	24000254 	.word	0x24000254

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff ffee 	bl	80018c8 <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018f8:	d005      	beq.n	8001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <HAL_Delay+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001906:	bf00      	nop
 8001908:	f7ff ffde 	bl	80018c8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8f7      	bhi.n	8001908 <HAL_Delay+0x28>
  {
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2400000c 	.word	0x2400000c

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <__NVIC_SetPriorityGrouping+0x40>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	4313      	orrs	r3, r2
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <__NVIC_SetPriorityGrouping+0x40>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	05fa0000 	.word	0x05fa0000

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	@ (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff29 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff40 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff90 	bl	8001a1c <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5f 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff33 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffa4 	bl	8001a84 <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b56:	4b89      	ldr	r3, [pc, #548]	@ (8001d7c <HAL_GPIO_Init+0x234>)
 8001b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b5a:	e194      	b.n	8001e86 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2101      	movs	r1, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8186 	beq.w	8001e80 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d005      	beq.n	8001b8c <HAL_GPIO_Init+0x44>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d130      	bne.n	8001bee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 0201 	and.w	r2, r3, #1
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d017      	beq.n	8001c2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d123      	bne.n	8001c7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	69b9      	ldr	r1, [r7, #24]
 8001c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0203 	and.w	r2, r3, #3
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80e0 	beq.w	8001e80 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d80 <HAL_GPIO_Init+0x238>)
 8001cc2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8001d80 <HAL_GPIO_Init+0x238>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d80 <HAL_GPIO_Init+0x238>)
 8001cd2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cde:	4a29      	ldr	r2, [pc, #164]	@ (8001d84 <HAL_GPIO_Init+0x23c>)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a20      	ldr	r2, [pc, #128]	@ (8001d88 <HAL_GPIO_Init+0x240>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d052      	beq.n	8001db0 <HAL_GPIO_Init+0x268>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001d8c <HAL_GPIO_Init+0x244>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d031      	beq.n	8001d76 <HAL_GPIO_Init+0x22e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1e      	ldr	r2, [pc, #120]	@ (8001d90 <HAL_GPIO_Init+0x248>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d02b      	beq.n	8001d72 <HAL_GPIO_Init+0x22a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d94 <HAL_GPIO_Init+0x24c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d025      	beq.n	8001d6e <HAL_GPIO_Init+0x226>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1c      	ldr	r2, [pc, #112]	@ (8001d98 <HAL_GPIO_Init+0x250>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01f      	beq.n	8001d6a <HAL_GPIO_Init+0x222>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001d9c <HAL_GPIO_Init+0x254>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d019      	beq.n	8001d66 <HAL_GPIO_Init+0x21e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a1a      	ldr	r2, [pc, #104]	@ (8001da0 <HAL_GPIO_Init+0x258>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0x21a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <HAL_GPIO_Init+0x25c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d00d      	beq.n	8001d5e <HAL_GPIO_Init+0x216>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a18      	ldr	r2, [pc, #96]	@ (8001da8 <HAL_GPIO_Init+0x260>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d007      	beq.n	8001d5a <HAL_GPIO_Init+0x212>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a17      	ldr	r2, [pc, #92]	@ (8001dac <HAL_GPIO_Init+0x264>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_GPIO_Init+0x20e>
 8001d52:	2309      	movs	r3, #9
 8001d54:	e02d      	b.n	8001db2 <HAL_GPIO_Init+0x26a>
 8001d56:	230a      	movs	r3, #10
 8001d58:	e02b      	b.n	8001db2 <HAL_GPIO_Init+0x26a>
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	e029      	b.n	8001db2 <HAL_GPIO_Init+0x26a>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e027      	b.n	8001db2 <HAL_GPIO_Init+0x26a>
 8001d62:	2306      	movs	r3, #6
 8001d64:	e025      	b.n	8001db2 <HAL_GPIO_Init+0x26a>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e023      	b.n	8001db2 <HAL_GPIO_Init+0x26a>
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	e021      	b.n	8001db2 <HAL_GPIO_Init+0x26a>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e01f      	b.n	8001db2 <HAL_GPIO_Init+0x26a>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e01d      	b.n	8001db2 <HAL_GPIO_Init+0x26a>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e01b      	b.n	8001db2 <HAL_GPIO_Init+0x26a>
 8001d7a:	bf00      	nop
 8001d7c:	58000080 	.word	0x58000080
 8001d80:	58024400 	.word	0x58024400
 8001d84:	58000400 	.word	0x58000400
 8001d88:	58020000 	.word	0x58020000
 8001d8c:	58020400 	.word	0x58020400
 8001d90:	58020800 	.word	0x58020800
 8001d94:	58020c00 	.word	0x58020c00
 8001d98:	58021000 	.word	0x58021000
 8001d9c:	58021400 	.word	0x58021400
 8001da0:	58021800 	.word	0x58021800
 8001da4:	58021c00 	.word	0x58021c00
 8001da8:	58022000 	.word	0x58022000
 8001dac:	58022400 	.word	0x58022400
 8001db0:	2300      	movs	r3, #0
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	f002 0203 	and.w	r2, r2, #3
 8001db8:	0092      	lsls	r2, r2, #2
 8001dba:	4093      	lsls	r3, r2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc2:	4938      	ldr	r1, [pc, #224]	@ (8001ea4 <HAL_GPIO_Init+0x35c>)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001df6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	3301      	adds	r3, #1
 8001e84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f47f ae63 	bne.w	8001b5c <HAL_GPIO_Init+0x14>
  }
}
 8001e96:	bf00      	nop
 8001e98:	bf00      	nop
 8001e9a:	3724      	adds	r7, #36	@ 0x24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	58000400 	.word	0x58000400

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ec4:	e003      	b.n	8001ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	041a      	lsls	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ee4:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d00a      	beq.n	8001f06 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ef0:	4b26      	ldr	r3, [pc, #152]	@ (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e040      	b.n	8001f84 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e03e      	b.n	8001f84 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f06:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001f0e:	491f      	ldr	r1, [pc, #124]	@ (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001f16:	f7ff fcd7 	bl	80018c8 <HAL_GetTick>
 8001f1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f1c:	e009      	b.n	8001f32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f1e:	f7ff fcd3 	bl	80018c8 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f2c:	d901      	bls.n	8001f32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e028      	b.n	8001f84 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f3e:	d1ee      	bne.n	8001f1e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b1e      	cmp	r3, #30
 8001f44:	d008      	beq.n	8001f58 <HAL_PWREx_ConfigSupply+0x7c>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f4a:	d005      	beq.n	8001f58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b1d      	cmp	r3, #29
 8001f50:	d002      	beq.n	8001f58 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f56:	d114      	bne.n	8001f82 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001f58:	f7ff fcb6 	bl	80018c8 <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f5e:	e009      	b.n	8001f74 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f60:	f7ff fcb2 	bl	80018c8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f6e:	d901      	bls.n	8001f74 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e007      	b.n	8001f84 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_PWREx_ConfigSupply+0xb0>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f80:	d1ee      	bne.n	8001f60 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58024800 	.word	0x58024800

08001f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	@ 0x30
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f000 bc1f 	b.w	80027e2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80b3 	beq.w	8002118 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb2:	4b95      	ldr	r3, [pc, #596]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fbc:	4b92      	ldr	r3, [pc, #584]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d007      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x48>
 8001fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fca:	2b18      	cmp	r3, #24
 8001fcc:	d112      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x64>
 8001fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	4b8b      	ldr	r3, [pc, #556]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8098 	beq.w	8002116 <HAL_RCC_OscConfig+0x186>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 8093 	bne.w	8002116 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e3f6      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x7c>
 8001ffe:	4b82      	ldr	r3, [pc, #520]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a81      	ldr	r2, [pc, #516]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e058      	b.n	80020be <HAL_RCC_OscConfig+0x12e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d112      	bne.n	800203a <HAL_RCC_OscConfig+0xaa>
 8002014:	4b7c      	ldr	r3, [pc, #496]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a7b      	ldr	r2, [pc, #492]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b79      	ldr	r3, [pc, #484]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a78      	ldr	r2, [pc, #480]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002026:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b76      	ldr	r3, [pc, #472]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a75      	ldr	r2, [pc, #468]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e041      	b.n	80020be <HAL_RCC_OscConfig+0x12e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002042:	d112      	bne.n	800206a <HAL_RCC_OscConfig+0xda>
 8002044:	4b70      	ldr	r3, [pc, #448]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a6f      	ldr	r2, [pc, #444]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 800204a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b6d      	ldr	r3, [pc, #436]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6c      	ldr	r2, [pc, #432]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002056:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b6a      	ldr	r3, [pc, #424]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a69      	ldr	r2, [pc, #420]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	e029      	b.n	80020be <HAL_RCC_OscConfig+0x12e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002072:	d112      	bne.n	800209a <HAL_RCC_OscConfig+0x10a>
 8002074:	4b64      	ldr	r3, [pc, #400]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a63      	ldr	r2, [pc, #396]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 800207a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b61      	ldr	r3, [pc, #388]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a60      	ldr	r2, [pc, #384]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b5e      	ldr	r3, [pc, #376]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a5d      	ldr	r2, [pc, #372]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	e011      	b.n	80020be <HAL_RCC_OscConfig+0x12e>
 800209a:	4b5b      	ldr	r3, [pc, #364]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a5a      	ldr	r2, [pc, #360]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80020a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b58      	ldr	r3, [pc, #352]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a57      	ldr	r2, [pc, #348]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80020ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b55      	ldr	r3, [pc, #340]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a54      	ldr	r2, [pc, #336]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80020b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80020bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d013      	beq.n	80020ee <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7ff fbff 	bl	80018c8 <HAL_GetTick>
 80020ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ce:	f7ff fbfb 	bl	80018c8 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b64      	cmp	r3, #100	@ 0x64
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e380      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020e0:	4b49      	ldr	r3, [pc, #292]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f0      	beq.n	80020ce <HAL_RCC_OscConfig+0x13e>
 80020ec:	e014      	b.n	8002118 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7ff fbeb 	bl	80018c8 <HAL_GetTick>
 80020f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f6:	f7ff fbe7 	bl	80018c8 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	@ 0x64
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e36c      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002108:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x166>
 8002114:	e000      	b.n	8002118 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 808c 	beq.w	800223e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002126:	4b38      	ldr	r3, [pc, #224]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800212e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002130:	4b35      	ldr	r3, [pc, #212]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002134:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_RCC_OscConfig+0x1bc>
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	2b18      	cmp	r3, #24
 8002140:	d137      	bne.n	80021b2 <HAL_RCC_OscConfig+0x222>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d132      	bne.n	80021b2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800214c:	4b2e      	ldr	r3, [pc, #184]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_OscConfig+0x1d4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e33e      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002164:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 0219 	bic.w	r2, r3, #25
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4925      	ldr	r1, [pc, #148]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7ff fba7 	bl	80018c8 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217e:	f7ff fba3 	bl	80018c8 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e328      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	4917      	ldr	r1, [pc, #92]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b0:	e045      	b.n	800223e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d028      	beq.n	800220c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021ba:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0219 	bic.w	r2, r3, #25
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	4910      	ldr	r1, [pc, #64]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7ff fb7c 	bl	80018c8 <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7ff fb78 	bl	80018c8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e2fd      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e6:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	061b      	lsls	r3, r3, #24
 8002200:	4901      	ldr	r1, [pc, #4]	@ (8002208 <HAL_RCC_OscConfig+0x278>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
 8002206:	e01a      	b.n	800223e <HAL_RCC_OscConfig+0x2ae>
 8002208:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220c:	4b97      	ldr	r3, [pc, #604]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a96      	ldr	r2, [pc, #600]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff fb56 	bl	80018c8 <HAL_GetTick>
 800221c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7ff fb52 	bl	80018c8 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e2d7      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002232:	4b8e      	ldr	r3, [pc, #568]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d06a      	beq.n	8002320 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224a:	4b88      	ldr	r3, [pc, #544]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002252:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002254:	4b85      	ldr	r3, [pc, #532]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d007      	beq.n	8002270 <HAL_RCC_OscConfig+0x2e0>
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b18      	cmp	r3, #24
 8002264:	d11b      	bne.n	800229e <HAL_RCC_OscConfig+0x30e>
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b01      	cmp	r3, #1
 800226e:	d116      	bne.n	800229e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002270:	4b7e      	ldr	r3, [pc, #504]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_OscConfig+0x2f8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	2b80      	cmp	r3, #128	@ 0x80
 8002282:	d001      	beq.n	8002288 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e2ac      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002288:	4b78      	ldr	r3, [pc, #480]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	061b      	lsls	r3, r3, #24
 8002296:	4975      	ldr	r1, [pc, #468]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 8002298:	4313      	orrs	r3, r2
 800229a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800229c:	e040      	b.n	8002320 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d023      	beq.n	80022ee <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022a6:	4b71      	ldr	r3, [pc, #452]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a70      	ldr	r2, [pc, #448]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80022ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7ff fb09 	bl	80018c8 <HAL_GetTick>
 80022b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80022ba:	f7ff fb05 	bl	80018c8 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e28a      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022cc:	4b67      	ldr	r3, [pc, #412]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022d8:	4b64      	ldr	r3, [pc, #400]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	4961      	ldr	r1, [pc, #388]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60cb      	str	r3, [r1, #12]
 80022ec:	e018      	b.n	8002320 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022ee:	4b5f      	ldr	r3, [pc, #380]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a5e      	ldr	r2, [pc, #376]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80022f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7ff fae5 	bl	80018c8 <HAL_GetTick>
 80022fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002302:	f7ff fae1 	bl	80018c8 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e266      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002314:	4b55      	ldr	r3, [pc, #340]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d036      	beq.n	800239a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d019      	beq.n	8002368 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002334:	4b4d      	ldr	r3, [pc, #308]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 8002336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002338:	4a4c      	ldr	r2, [pc, #304]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7ff fac2 	bl	80018c8 <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002348:	f7ff fabe 	bl	80018c8 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e243      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800235a:	4b44      	ldr	r3, [pc, #272]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 800235c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x3b8>
 8002366:	e018      	b.n	800239a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002368:	4b40      	ldr	r3, [pc, #256]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 800236a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800236c:	4a3f      	ldr	r2, [pc, #252]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7ff faa8 	bl	80018c8 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff faa4 	bl	80018c8 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e229      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800238e:	4b37      	ldr	r3, [pc, #220]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d036      	beq.n	8002414 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d019      	beq.n	80023e2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023ae:	4b2f      	ldr	r3, [pc, #188]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a2e      	ldr	r2, [pc, #184]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80023b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023ba:	f7ff fa85 	bl	80018c8 <HAL_GetTick>
 80023be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023c2:	f7ff fa81 	bl	80018c8 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e206      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023d4:	4b25      	ldr	r3, [pc, #148]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x432>
 80023e0:	e018      	b.n	8002414 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023e2:	4b22      	ldr	r3, [pc, #136]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a21      	ldr	r2, [pc, #132]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 80023e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023ee:	f7ff fa6b 	bl	80018c8 <HAL_GetTick>
 80023f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f6:	f7ff fa67 	bl	80018c8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1ec      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002408:	4b18      	ldr	r3, [pc, #96]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80af 	beq.w	8002580 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002422:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <HAL_RCC_OscConfig+0x4e0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <HAL_RCC_OscConfig+0x4e0>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800242e:	f7ff fa4b 	bl	80018c8 <HAL_GetTick>
 8002432:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7ff fa47 	bl	80018c8 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b64      	cmp	r3, #100	@ 0x64
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e1cc      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <HAL_RCC_OscConfig+0x4e0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10b      	bne.n	8002474 <HAL_RCC_OscConfig+0x4e4>
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	4a02      	ldr	r2, [pc, #8]	@ (800246c <HAL_RCC_OscConfig+0x4dc>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	@ 0x70
 8002468:	e05b      	b.n	8002522 <HAL_RCC_OscConfig+0x592>
 800246a:	bf00      	nop
 800246c:	58024400 	.word	0x58024400
 8002470:	58024800 	.word	0x58024800
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d112      	bne.n	80024a2 <HAL_RCC_OscConfig+0x512>
 800247c:	4b9d      	ldr	r3, [pc, #628]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002480:	4a9c      	ldr	r2, [pc, #624]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002482:	f023 0301 	bic.w	r3, r3, #1
 8002486:	6713      	str	r3, [r2, #112]	@ 0x70
 8002488:	4b9a      	ldr	r3, [pc, #616]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248c:	4a99      	ldr	r2, [pc, #612]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800248e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002492:	6713      	str	r3, [r2, #112]	@ 0x70
 8002494:	4b97      	ldr	r3, [pc, #604]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002498:	4a96      	ldr	r2, [pc, #600]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800249a:	f023 0304 	bic.w	r3, r3, #4
 800249e:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a0:	e03f      	b.n	8002522 <HAL_RCC_OscConfig+0x592>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d112      	bne.n	80024d0 <HAL_RCC_OscConfig+0x540>
 80024aa:	4b92      	ldr	r3, [pc, #584]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ae:	4a91      	ldr	r2, [pc, #580]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b6:	4b8f      	ldr	r3, [pc, #572]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ba:	4a8e      	ldr	r2, [pc, #568]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024c2:	4b8c      	ldr	r3, [pc, #560]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c6:	4a8b      	ldr	r2, [pc, #556]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ce:	e028      	b.n	8002522 <HAL_RCC_OscConfig+0x592>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b85      	cmp	r3, #133	@ 0x85
 80024d6:	d112      	bne.n	80024fe <HAL_RCC_OscConfig+0x56e>
 80024d8:	4b86      	ldr	r3, [pc, #536]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024dc:	4a85      	ldr	r2, [pc, #532]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e4:	4b83      	ldr	r3, [pc, #524]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e8:	4a82      	ldr	r2, [pc, #520]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f0:	4b80      	ldr	r3, [pc, #512]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f4:	4a7f      	ldr	r2, [pc, #508]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80024fc:	e011      	b.n	8002522 <HAL_RCC_OscConfig+0x592>
 80024fe:	4b7d      	ldr	r3, [pc, #500]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002502:	4a7c      	ldr	r2, [pc, #496]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6713      	str	r3, [r2, #112]	@ 0x70
 800250a:	4b7a      	ldr	r3, [pc, #488]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250e:	4a79      	ldr	r2, [pc, #484]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	6713      	str	r3, [r2, #112]	@ 0x70
 8002516:	4b77      	ldr	r3, [pc, #476]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	4a76      	ldr	r2, [pc, #472]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800251c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002520:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d015      	beq.n	8002556 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252a:	f7ff f9cd 	bl	80018c8 <HAL_GetTick>
 800252e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7ff f9c9 	bl	80018c8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e14c      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002548:	4b6a      	ldr	r3, [pc, #424]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ee      	beq.n	8002532 <HAL_RCC_OscConfig+0x5a2>
 8002554:	e014      	b.n	8002580 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7ff f9b7 	bl	80018c8 <HAL_GetTick>
 800255a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff f9b3 	bl	80018c8 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e136      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002574:	4b5f      	ldr	r3, [pc, #380]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ee      	bne.n	800255e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 812b 	beq.w	80027e0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800258a:	4b5a      	ldr	r3, [pc, #360]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002592:	2b18      	cmp	r3, #24
 8002594:	f000 80bb 	beq.w	800270e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	2b02      	cmp	r3, #2
 800259e:	f040 8095 	bne.w	80026cc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b54      	ldr	r3, [pc, #336]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a53      	ldr	r2, [pc, #332]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80025a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7ff f98b 	bl	80018c8 <HAL_GetTick>
 80025b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b6:	f7ff f987 	bl	80018c8 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e10c      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025c8:	4b4a      	ldr	r3, [pc, #296]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025d4:	4b47      	ldr	r3, [pc, #284]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80025d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025d8:	4b47      	ldr	r3, [pc, #284]	@ (80026f8 <HAL_RCC_OscConfig+0x768>)
 80025da:	4013      	ands	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	430a      	orrs	r2, r1
 80025e8:	4942      	ldr	r1, [pc, #264]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	628b      	str	r3, [r1, #40]	@ 0x28
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	3b01      	subs	r3, #1
 80025f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025fc:	3b01      	subs	r3, #1
 80025fe:	025b      	lsls	r3, r3, #9
 8002600:	b29b      	uxth	r3, r3
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002608:	3b01      	subs	r3, #1
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002616:	3b01      	subs	r3, #1
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800261e:	4935      	ldr	r1, [pc, #212]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002620:	4313      	orrs	r3, r2
 8002622:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002624:	4b33      	ldr	r3, [pc, #204]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	4a32      	ldr	r2, [pc, #200]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002630:	4b30      	ldr	r3, [pc, #192]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002634:	4b31      	ldr	r3, [pc, #196]	@ (80026fc <HAL_RCC_OscConfig+0x76c>)
 8002636:	4013      	ands	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800263c:	00d2      	lsls	r2, r2, #3
 800263e:	492d      	ldr	r1, [pc, #180]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002640:	4313      	orrs	r3, r2
 8002642:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002644:	4b2b      	ldr	r3, [pc, #172]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	f023 020c 	bic.w	r2, r3, #12
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	4928      	ldr	r1, [pc, #160]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002652:	4313      	orrs	r3, r2
 8002654:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002656:	4b27      	ldr	r3, [pc, #156]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	f023 0202 	bic.w	r2, r3, #2
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	4924      	ldr	r1, [pc, #144]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002664:	4313      	orrs	r3, r2
 8002666:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002668:	4b22      	ldr	r3, [pc, #136]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	4a21      	ldr	r2, [pc, #132]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800266e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002674:	4b1f      	ldr	r3, [pc, #124]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	4a1e      	ldr	r2, [pc, #120]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800267a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800267e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002680:	4b1c      	ldr	r3, [pc, #112]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	4a1b      	ldr	r2, [pc, #108]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002686:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800268a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800268c:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	4a18      	ldr	r2, [pc, #96]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002698:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a15      	ldr	r2, [pc, #84]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7ff f910 	bl	80018c8 <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7ff f90c 	bl	80018c8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e091      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026be:	4b0d      	ldr	r3, [pc, #52]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x71c>
 80026ca:	e089      	b.n	80027e0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a08      	ldr	r2, [pc, #32]	@ (80026f4 <HAL_RCC_OscConfig+0x764>)
 80026d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff f8f6 	bl	80018c8 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026de:	e00f      	b.n	8002700 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff f8f2 	bl	80018c8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d908      	bls.n	8002700 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e077      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
 80026f2:	bf00      	nop
 80026f4:	58024400 	.word	0x58024400
 80026f8:	fffffc0c 	.word	0xfffffc0c
 80026fc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002700:	4b3a      	ldr	r3, [pc, #232]	@ (80027ec <HAL_RCC_OscConfig+0x85c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1e9      	bne.n	80026e0 <HAL_RCC_OscConfig+0x750>
 800270c:	e068      	b.n	80027e0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800270e:	4b37      	ldr	r3, [pc, #220]	@ (80027ec <HAL_RCC_OscConfig+0x85c>)
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002714:	4b35      	ldr	r3, [pc, #212]	@ (80027ec <HAL_RCC_OscConfig+0x85c>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	2b01      	cmp	r3, #1
 8002720:	d031      	beq.n	8002786 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d12a      	bne.n	8002786 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d122      	bne.n	8002786 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d11a      	bne.n	8002786 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	0a5b      	lsrs	r3, r3, #9
 8002754:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d111      	bne.n	8002786 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d108      	bne.n	8002786 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	0e1b      	lsrs	r3, r3, #24
 8002778:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e02b      	b.n	80027e2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800278a:	4b18      	ldr	r3, [pc, #96]	@ (80027ec <HAL_RCC_OscConfig+0x85c>)
 800278c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278e:	08db      	lsrs	r3, r3, #3
 8002790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002794:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d01f      	beq.n	80027e0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80027a0:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <HAL_RCC_OscConfig+0x85c>)
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	4a11      	ldr	r2, [pc, #68]	@ (80027ec <HAL_RCC_OscConfig+0x85c>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ac:	f7ff f88c 	bl	80018c8 <HAL_GetTick>
 80027b0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80027b2:	bf00      	nop
 80027b4:	f7ff f888 	bl	80018c8 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	4293      	cmp	r3, r2
 80027be:	d0f9      	beq.n	80027b4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027c0:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <HAL_RCC_OscConfig+0x85c>)
 80027c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027c4:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <HAL_RCC_OscConfig+0x860>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027cc:	00d2      	lsls	r2, r2, #3
 80027ce:	4907      	ldr	r1, [pc, #28]	@ (80027ec <HAL_RCC_OscConfig+0x85c>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80027d4:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_RCC_OscConfig+0x85c>)
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <HAL_RCC_OscConfig+0x85c>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3730      	adds	r7, #48	@ 0x30
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	58024400 	.word	0x58024400
 80027f0:	ffff0007 	.word	0xffff0007

080027f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e19c      	b.n	8002b42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002808:	4b8a      	ldr	r3, [pc, #552]	@ (8002a34 <HAL_RCC_ClockConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 030f 	and.w	r3, r3, #15
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d910      	bls.n	8002838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b87      	ldr	r3, [pc, #540]	@ (8002a34 <HAL_RCC_ClockConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 020f 	bic.w	r2, r3, #15
 800281e:	4985      	ldr	r1, [pc, #532]	@ (8002a34 <HAL_RCC_ClockConfig+0x240>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b83      	ldr	r3, [pc, #524]	@ (8002a34 <HAL_RCC_ClockConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e184      	b.n	8002b42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	4b7b      	ldr	r3, [pc, #492]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002850:	429a      	cmp	r2, r3
 8002852:	d908      	bls.n	8002866 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002854:	4b78      	ldr	r3, [pc, #480]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	4975      	ldr	r1, [pc, #468]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002862:	4313      	orrs	r3, r2
 8002864:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d010      	beq.n	8002894 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	4b70      	ldr	r3, [pc, #448]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800287e:	429a      	cmp	r2, r3
 8002880:	d908      	bls.n	8002894 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002882:	4b6d      	ldr	r3, [pc, #436]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	496a      	ldr	r1, [pc, #424]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002890:	4313      	orrs	r3, r2
 8002892:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d010      	beq.n	80028c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699a      	ldr	r2, [r3, #24]
 80028a4:	4b64      	ldr	r3, [pc, #400]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d908      	bls.n	80028c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028b0:	4b61      	ldr	r3, [pc, #388]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	495e      	ldr	r1, [pc, #376]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d010      	beq.n	80028f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69da      	ldr	r2, [r3, #28]
 80028d2:	4b59      	ldr	r3, [pc, #356]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028da:	429a      	cmp	r2, r3
 80028dc:	d908      	bls.n	80028f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80028de:	4b56      	ldr	r3, [pc, #344]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4953      	ldr	r1, [pc, #332]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d010      	beq.n	800291e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	4b4d      	ldr	r3, [pc, #308]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	429a      	cmp	r2, r3
 800290a:	d908      	bls.n	800291e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	f023 020f 	bic.w	r2, r3, #15
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4947      	ldr	r1, [pc, #284]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 800291a:	4313      	orrs	r3, r2
 800291c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d055      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800292a:	4b43      	ldr	r3, [pc, #268]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4940      	ldr	r1, [pc, #256]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002938:	4313      	orrs	r3, r2
 800293a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d107      	bne.n	8002954 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002944:	4b3c      	ldr	r3, [pc, #240]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d121      	bne.n	8002994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0f6      	b.n	8002b42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d107      	bne.n	800296c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800295c:	4b36      	ldr	r3, [pc, #216]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d115      	bne.n	8002994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0ea      	b.n	8002b42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d107      	bne.n	8002984 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002974:	4b30      	ldr	r3, [pc, #192]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d109      	bne.n	8002994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0de      	b.n	8002b42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002984:	4b2c      	ldr	r3, [pc, #176]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0d6      	b.n	8002b42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002994:	4b28      	ldr	r3, [pc, #160]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f023 0207 	bic.w	r2, r3, #7
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4925      	ldr	r1, [pc, #148]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a6:	f7fe ff8f 	bl	80018c8 <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ae:	f7fe ff8b 	bl	80018c8 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e0be      	b.n	8002b42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d1eb      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d010      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d208      	bcs.n	8002a04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f2:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f023 020f 	bic.w	r2, r3, #15
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	490e      	ldr	r1, [pc, #56]	@ (8002a38 <HAL_RCC_ClockConfig+0x244>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_RCC_ClockConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d214      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <HAL_RCC_ClockConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 020f 	bic.w	r2, r3, #15
 8002a1a:	4906      	ldr	r1, [pc, #24]	@ (8002a34 <HAL_RCC_ClockConfig+0x240>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b04      	ldr	r3, [pc, #16]	@ (8002a34 <HAL_RCC_ClockConfig+0x240>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e086      	b.n	8002b42 <HAL_RCC_ClockConfig+0x34e>
 8002a34:	52002000 	.word	0x52002000
 8002a38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d010      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d208      	bcs.n	8002a6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a58:	4b3c      	ldr	r3, [pc, #240]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	4939      	ldr	r1, [pc, #228]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d010      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	4b34      	ldr	r3, [pc, #208]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d208      	bcs.n	8002a98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a86:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	492e      	ldr	r1, [pc, #184]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d010      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699a      	ldr	r2, [r3, #24]
 8002aa8:	4b28      	ldr	r3, [pc, #160]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d208      	bcs.n	8002ac6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ab4:	4b25      	ldr	r3, [pc, #148]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4922      	ldr	r1, [pc, #136]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d010      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d208      	bcs.n	8002af4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	4917      	ldr	r1, [pc, #92]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002af4:	f000 f834 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	4912      	ldr	r1, [pc, #72]	@ (8002b50 <HAL_RCC_ClockConfig+0x35c>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002b12:	4b0e      	ldr	r3, [pc, #56]	@ (8002b4c <HAL_RCC_ClockConfig+0x358>)
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b50 <HAL_RCC_ClockConfig+0x35c>)
 8002b1c:	5cd3      	ldrb	r3, [r2, r3]
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <HAL_RCC_ClockConfig+0x360>)
 8002b2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <HAL_RCC_ClockConfig+0x364>)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <HAL_RCC_ClockConfig+0x368>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fe7c 	bl	8001834 <HAL_InitTick>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	58024400 	.word	0x58024400
 8002b50:	08008354 	.word	0x08008354
 8002b54:	24000004 	.word	0x24000004
 8002b58:	24000000 	.word	0x24000000
 8002b5c:	24000008 	.word	0x24000008

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	@ 0x24
 8002b64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b66:	4bb3      	ldr	r3, [pc, #716]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b6e:	2b18      	cmp	r3, #24
 8002b70:	f200 8155 	bhi.w	8002e1e <HAL_RCC_GetSysClockFreq+0x2be>
 8002b74:	a201      	add	r2, pc, #4	@ (adr r2, 8002b7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002be1 	.word	0x08002be1
 8002b80:	08002e1f 	.word	0x08002e1f
 8002b84:	08002e1f 	.word	0x08002e1f
 8002b88:	08002e1f 	.word	0x08002e1f
 8002b8c:	08002e1f 	.word	0x08002e1f
 8002b90:	08002e1f 	.word	0x08002e1f
 8002b94:	08002e1f 	.word	0x08002e1f
 8002b98:	08002e1f 	.word	0x08002e1f
 8002b9c:	08002c07 	.word	0x08002c07
 8002ba0:	08002e1f 	.word	0x08002e1f
 8002ba4:	08002e1f 	.word	0x08002e1f
 8002ba8:	08002e1f 	.word	0x08002e1f
 8002bac:	08002e1f 	.word	0x08002e1f
 8002bb0:	08002e1f 	.word	0x08002e1f
 8002bb4:	08002e1f 	.word	0x08002e1f
 8002bb8:	08002e1f 	.word	0x08002e1f
 8002bbc:	08002c0d 	.word	0x08002c0d
 8002bc0:	08002e1f 	.word	0x08002e1f
 8002bc4:	08002e1f 	.word	0x08002e1f
 8002bc8:	08002e1f 	.word	0x08002e1f
 8002bcc:	08002e1f 	.word	0x08002e1f
 8002bd0:	08002e1f 	.word	0x08002e1f
 8002bd4:	08002e1f 	.word	0x08002e1f
 8002bd8:	08002e1f 	.word	0x08002e1f
 8002bdc:	08002c13 	.word	0x08002c13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002be0:	4b94      	ldr	r3, [pc, #592]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d009      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002bec:	4b91      	ldr	r3, [pc, #580]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	08db      	lsrs	r3, r3, #3
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	4a90      	ldr	r2, [pc, #576]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002bfe:	e111      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c00:	4b8d      	ldr	r3, [pc, #564]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c02:	61bb      	str	r3, [r7, #24]
      break;
 8002c04:	e10e      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c06:	4b8d      	ldr	r3, [pc, #564]	@ (8002e3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c08:	61bb      	str	r3, [r7, #24]
      break;
 8002c0a:	e10b      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c0e:	61bb      	str	r3, [r7, #24]
      break;
 8002c10:	e108      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c12:	4b88      	ldr	r3, [pc, #544]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c1c:	4b85      	ldr	r3, [pc, #532]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c28:	4b82      	ldr	r3, [pc, #520]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002c32:	4b80      	ldr	r3, [pc, #512]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c36:	08db      	lsrs	r3, r3, #3
 8002c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80e1 	beq.w	8002e18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	f000 8083 	beq.w	8002d64 <HAL_RCC_GetSysClockFreq+0x204>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	f200 80a1 	bhi.w	8002da8 <HAL_RCC_GetSysClockFreq+0x248>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x114>
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d056      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002c72:	e099      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c74:	4b6f      	ldr	r3, [pc, #444]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0320 	and.w	r3, r3, #32
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02d      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c80:	4b6c      	ldr	r3, [pc, #432]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	4a6b      	ldr	r2, [pc, #428]	@ (8002e38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002caa:	4b62      	ldr	r3, [pc, #392]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb2:	ee07 3a90 	vmov	s15, r3
 8002cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cbe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002cda:	e087      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002e48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cee:	4b51      	ldr	r3, [pc, #324]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d1e:	e065      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002e4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d32:	4b40      	ldr	r3, [pc, #256]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3a:	ee07 3a90 	vmov	s15, r3
 8002d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d62:	e043      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002e50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d76:	4b2f      	ldr	r3, [pc, #188]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002da6:	e021      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002e4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dba:	4b1e      	ldr	r3, [pc, #120]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002e44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	0a5b      	lsrs	r3, r3, #9
 8002df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df6:	3301      	adds	r3, #1
 8002df8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e10:	ee17 3a90 	vmov	r3, s15
 8002e14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e16:	e005      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
      break;
 8002e1c:	e002      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e20:	61bb      	str	r3, [r7, #24]
      break;
 8002e22:	bf00      	nop
  }

  return sysclockfreq;
 8002e24:	69bb      	ldr	r3, [r7, #24]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3724      	adds	r7, #36	@ 0x24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	58024400 	.word	0x58024400
 8002e38:	03d09000 	.word	0x03d09000
 8002e3c:	003d0900 	.word	0x003d0900
 8002e40:	007a1200 	.word	0x007a1200
 8002e44:	46000000 	.word	0x46000000
 8002e48:	4c742400 	.word	0x4c742400
 8002e4c:	4a742400 	.word	0x4a742400
 8002e50:	4af42400 	.word	0x4af42400

08002e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002e5a:	f7ff fe81 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	490f      	ldr	r1, [pc, #60]	@ (8002ea8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e6c:	5ccb      	ldrb	r3, [r1, r3]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	fa22 f303 	lsr.w	r3, r2, r3
 8002e76:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002e78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8e:	4a07      	ldr	r2, [pc, #28]	@ (8002eac <HAL_RCC_GetHCLKFreq+0x58>)
 8002e90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e92:	4a07      	ldr	r2, [pc, #28]	@ (8002eb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002e98:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <HAL_RCC_GetHCLKFreq+0x58>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	58024400 	.word	0x58024400
 8002ea8:	08008354 	.word	0x08008354
 8002eac:	24000004 	.word	0x24000004
 8002eb0:	24000000 	.word	0x24000000

08002eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002eb8:	f7ff ffcc 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4904      	ldr	r1, [pc, #16]	@ (8002edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	58024400 	.word	0x58024400
 8002edc:	08008354 	.word	0x08008354

08002ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002ee4:	f7ff ffb6 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4904      	ldr	r1, [pc, #16]	@ (8002f08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	58024400 	.word	0x58024400
 8002f08:	08008354 	.word	0x08008354

08002f0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f10:	b0c8      	sub	sp, #288	@ 0x120
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002f30:	2500      	movs	r5, #0
 8002f32:	ea54 0305 	orrs.w	r3, r4, r5
 8002f36:	d049      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f42:	d02f      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002f44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f48:	d828      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f4e:	d01a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f54:	d822      	bhi.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f5e:	d007      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f60:	e01c      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f62:	4ba7      	ldr	r3, [pc, #668]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f66:	4aa6      	ldr	r2, [pc, #664]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f6e:	e01a      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f74:	3308      	adds	r3, #8
 8002f76:	2102      	movs	r1, #2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 fc43 	bl	8004804 <RCCEx_PLL2_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f84:	e00f      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f8a:	3328      	adds	r3, #40	@ 0x28
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 fcea 	bl	8004968 <RCCEx_PLL3_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002fae:	4b94      	ldr	r3, [pc, #592]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fbc:	4a90      	ldr	r2, [pc, #576]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fc2:	e003      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8002fc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002fd8:	f04f 0900 	mov.w	r9, #0
 8002fdc:	ea58 0309 	orrs.w	r3, r8, r9
 8002fe0:	d047      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002fe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d82a      	bhi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002fec:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003009 	.word	0x08003009
 8002ff8:	08003017 	.word	0x08003017
 8002ffc:	0800302d 	.word	0x0800302d
 8003000:	0800304b 	.word	0x0800304b
 8003004:	0800304b 	.word	0x0800304b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003008:	4b7d      	ldr	r3, [pc, #500]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	4a7c      	ldr	r2, [pc, #496]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800300e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003014:	e01a      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800301a:	3308      	adds	r3, #8
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f001 fbf0 	bl	8004804 <RCCEx_PLL2_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800302a:	e00f      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800302c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003030:	3328      	adds	r3, #40	@ 0x28
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f001 fc97 	bl	8004968 <RCCEx_PLL3_Config>
 800303a:	4603      	mov	r3, r0
 800303c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003040:	e004      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003048:	e000      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800304a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800304c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003054:	4b6a      	ldr	r3, [pc, #424]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003058:	f023 0107 	bic.w	r1, r3, #7
 800305c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003062:	4a67      	ldr	r2, [pc, #412]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003064:	430b      	orrs	r3, r1
 8003066:	6513      	str	r3, [r2, #80]	@ 0x50
 8003068:	e003      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800306e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800307e:	f04f 0b00 	mov.w	fp, #0
 8003082:	ea5a 030b 	orrs.w	r3, sl, fp
 8003086:	d054      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003092:	d036      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003094:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003098:	d82f      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800309a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800309e:	d032      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80030a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030a4:	d829      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80030a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80030a8:	d02f      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80030aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80030ac:	d825      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80030ae:	2b80      	cmp	r3, #128	@ 0x80
 80030b0:	d018      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80030b2:	2b80      	cmp	r3, #128	@ 0x80
 80030b4:	d821      	bhi.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	d007      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80030be:	e01c      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80030cc:	e01e      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030d2:	3308      	adds	r3, #8
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 fb94 	bl	8004804 <RCCEx_PLL2_Config>
 80030dc:	4603      	mov	r3, r0
 80030de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80030e2:	e013      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030e8:	3328      	adds	r3, #40	@ 0x28
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 fc3b 	bl	8004968 <RCCEx_PLL3_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80030f8:	e008      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003100:	e004      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003102:	bf00      	nop
 8003104:	e002      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800310a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003114:	4b3a      	ldr	r3, [pc, #232]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003118:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800311c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003122:	4a37      	ldr	r2, [pc, #220]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003124:	430b      	orrs	r3, r1
 8003126:	6513      	str	r3, [r2, #80]	@ 0x50
 8003128:	e003      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800312e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800313e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003148:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800314c:	460b      	mov	r3, r1
 800314e:	4313      	orrs	r3, r2
 8003150:	d05c      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003158:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800315c:	d03b      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800315e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003162:	d834      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003168:	d037      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800316a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800316e:	d82e      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003170:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003174:	d033      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003176:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800317a:	d828      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003180:	d01a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003186:	d822      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800318c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003190:	d007      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003192:	e01c      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003194:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	4a19      	ldr	r2, [pc, #100]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800319a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800319e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80031a0:	e01e      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031a6:	3308      	adds	r3, #8
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 fb2a 	bl	8004804 <RCCEx_PLL2_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80031b6:	e013      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031bc:	3328      	adds	r3, #40	@ 0x28
 80031be:	2100      	movs	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f001 fbd1 	bl	8004968 <RCCEx_PLL3_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80031cc:	e008      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80031d4:	e004      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80031d6:	bf00      	nop
 80031d8:	e002      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80031de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10d      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80031e8:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ec:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80031f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f6:	4a02      	ldr	r2, [pc, #8]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80031fc:	e006      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x300>
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003204:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003208:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800320c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003218:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003222:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003226:	460b      	mov	r3, r1
 8003228:	4313      	orrs	r3, r2
 800322a:	d03a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800322c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003232:	2b30      	cmp	r3, #48	@ 0x30
 8003234:	d01f      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003236:	2b30      	cmp	r3, #48	@ 0x30
 8003238:	d819      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800323a:	2b20      	cmp	r3, #32
 800323c:	d00c      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800323e:	2b20      	cmp	r3, #32
 8003240:	d815      	bhi.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d019      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003246:	2b10      	cmp	r3, #16
 8003248:	d111      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800324a:	4bae      	ldr	r3, [pc, #696]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	4aad      	ldr	r2, [pc, #692]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003254:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003256:	e011      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800325c:	3308      	adds	r3, #8
 800325e:	2102      	movs	r1, #2
 8003260:	4618      	mov	r0, r3
 8003262:	f001 facf 	bl	8004804 <RCCEx_PLL2_Config>
 8003266:	4603      	mov	r3, r0
 8003268:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800326c:	e006      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003274:	e002      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003276:	bf00      	nop
 8003278:	e000      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800327a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003284:	4b9f      	ldr	r3, [pc, #636]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003288:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800328c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003292:	4a9c      	ldr	r2, [pc, #624]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003294:	430b      	orrs	r3, r1
 8003296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800329e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80032a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80032ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80032b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80032bc:	460b      	mov	r3, r1
 80032be:	4313      	orrs	r3, r2
 80032c0:	d051      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80032c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80032c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032cc:	d035      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80032ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032d2:	d82e      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80032d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032d8:	d031      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x432>
 80032da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032de:	d828      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80032e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e4:	d01a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80032e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032ea:	d822      	bhi.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80032f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f4:	d007      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80032f6:	e01c      	b.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f8:	4b82      	ldr	r3, [pc, #520]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	4a81      	ldr	r2, [pc, #516]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003304:	e01c      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800330a:	3308      	adds	r3, #8
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fa78 	bl	8004804 <RCCEx_PLL2_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800331a:	e011      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800331c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003320:	3328      	adds	r3, #40	@ 0x28
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f001 fb1f 	bl	8004968 <RCCEx_PLL3_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003330:	e006      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003338:	e002      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800333a:	bf00      	nop
 800333c:	e000      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800333e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003340:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003348:	4b6e      	ldr	r3, [pc, #440]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800334a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800334c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003356:	4a6b      	ldr	r2, [pc, #428]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003358:	430b      	orrs	r3, r1
 800335a:	6513      	str	r3, [r2, #80]	@ 0x50
 800335c:	e003      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003362:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003376:	2300      	movs	r3, #0
 8003378:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800337c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003380:	460b      	mov	r3, r1
 8003382:	4313      	orrs	r3, r2
 8003384:	d053      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003386:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800338a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800338c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003390:	d033      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003392:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003396:	d82c      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003398:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800339c:	d02f      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800339e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033a2:	d826      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80033a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033a8:	d02b      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80033aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033ae:	d820      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80033b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033b4:	d012      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80033b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033ba:	d81a      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d022      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c4:	d115      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033ca:	3308      	adds	r3, #8
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 fa18 	bl	8004804 <RCCEx_PLL2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80033da:	e015      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033e0:	3328      	adds	r3, #40	@ 0x28
 80033e2:	2101      	movs	r1, #1
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 fabf 	bl	8004968 <RCCEx_PLL3_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80033f0:	e00a      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80033f8:	e006      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80033fa:	bf00      	nop
 80033fc:	e004      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80033fe:	bf00      	nop
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003408:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10a      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003410:	4b3c      	ldr	r3, [pc, #240]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003414:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800341c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800341e:	4a39      	ldr	r2, [pc, #228]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003420:	430b      	orrs	r3, r1
 8003422:	6513      	str	r3, [r2, #80]	@ 0x50
 8003424:	e003      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003426:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800342a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800342e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003436:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800343a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003444:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003448:	460b      	mov	r3, r1
 800344a:	4313      	orrs	r3, r2
 800344c:	d060      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800344e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003452:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003456:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800345a:	d039      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800345c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003460:	d832      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003462:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003466:	d035      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800346c:	d82c      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003472:	d031      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003478:	d826      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800347a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800347e:	d02d      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003480:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003484:	d820      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800348a:	d012      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800348c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003490:	d81a      	bhi.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d024      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800349a:	d115      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800349c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034a0:	3308      	adds	r3, #8
 80034a2:	2101      	movs	r1, #1
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 f9ad 	bl	8004804 <RCCEx_PLL2_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80034b0:	e017      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034b6:	3328      	adds	r3, #40	@ 0x28
 80034b8:	2101      	movs	r1, #1
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fa54 	bl	8004968 <RCCEx_PLL3_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80034c6:	e00c      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80034ce:	e008      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80034d0:	bf00      	nop
 80034d2:	e006      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80034d4:	bf00      	nop
 80034d6:	e004      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80034d8:	bf00      	nop
 80034da:	e002      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80034dc:	bf00      	nop
 80034de:	e000      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80034e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10e      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80034ea:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80034f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80034fa:	4a02      	ldr	r2, [pc, #8]	@ (8003504 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003502:	bf00      	nop
 8003504:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003508:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800350c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800351c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800352a:	460b      	mov	r3, r1
 800352c:	4313      	orrs	r3, r2
 800352e:	d037      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800353a:	d00e      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800353c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003540:	d816      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d018      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003546:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800354a:	d111      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354c:	4bc4      	ldr	r3, [pc, #784]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	4ac3      	ldr	r2, [pc, #780]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003558:	e00f      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800355a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800355e:	3308      	adds	r3, #8
 8003560:	2101      	movs	r1, #1
 8003562:	4618      	mov	r0, r3
 8003564:	f001 f94e 	bl	8004804 <RCCEx_PLL2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800356e:	e004      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003576:	e000      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003582:	4bb7      	ldr	r3, [pc, #732]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003586:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800358a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800358e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003590:	4ab3      	ldr	r2, [pc, #716]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003592:	430b      	orrs	r3, r1
 8003594:	6513      	str	r3, [r2, #80]	@ 0x50
 8003596:	e003      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003598:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800359c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80035a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80035ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80035b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4313      	orrs	r3, r2
 80035be:	d039      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80035c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d81c      	bhi.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80035ca:	a201      	add	r2, pc, #4	@ (adr r2, 80035d0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80035cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d0:	0800360d 	.word	0x0800360d
 80035d4:	080035e1 	.word	0x080035e1
 80035d8:	080035ef 	.word	0x080035ef
 80035dc:	0800360d 	.word	0x0800360d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e0:	4b9f      	ldr	r3, [pc, #636]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	4a9e      	ldr	r2, [pc, #632]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80035ec:	e00f      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035f2:	3308      	adds	r3, #8
 80035f4:	2102      	movs	r1, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 f904 	bl	8004804 <RCCEx_PLL2_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003602:	e004      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800360a:	e000      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800360c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003616:	4b92      	ldr	r3, [pc, #584]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361a:	f023 0103 	bic.w	r1, r3, #3
 800361e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003624:	4a8e      	ldr	r2, [pc, #568]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003626:	430b      	orrs	r3, r1
 8003628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800362a:	e003      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003630:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003640:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003644:	2300      	movs	r3, #0
 8003646:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800364a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800364e:	460b      	mov	r3, r1
 8003650:	4313      	orrs	r3, r2
 8003652:	f000 8099 	beq.w	8003788 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003656:	4b83      	ldr	r3, [pc, #524]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a82      	ldr	r2, [pc, #520]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003660:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003662:	f7fe f931 	bl	80018c8 <HAL_GetTick>
 8003666:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800366a:	e00b      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366c:	f7fe f92c 	bl	80018c8 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b64      	cmp	r3, #100	@ 0x64
 800367a:	d903      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003682:	e005      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003684:	4b77      	ldr	r3, [pc, #476]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ed      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003690:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003694:	2b00      	cmp	r3, #0
 8003696:	d173      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003698:	4b71      	ldr	r3, [pc, #452]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800369a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800369c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036a4:	4053      	eors	r3, r2
 80036a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d015      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036ba:	4b69      	ldr	r3, [pc, #420]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	4a68      	ldr	r2, [pc, #416]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036c6:	4b66      	ldr	r3, [pc, #408]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ca:	4a65      	ldr	r2, [pc, #404]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80036d2:	4a63      	ldr	r2, [pc, #396]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80036da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80036e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e6:	d118      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fe f8ee 	bl	80018c8 <HAL_GetTick>
 80036ec:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036f0:	e00d      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe f8e9 	bl	80018c8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80036fc:	1ad2      	subs	r2, r2, r3
 80036fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003702:	429a      	cmp	r2, r3
 8003704:	d903      	bls.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800370c:	e005      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800370e:	4b54      	ldr	r3, [pc, #336]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0eb      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800371a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800371e:	2b00      	cmp	r3, #0
 8003720:	d129      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003726:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800372a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800372e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003732:	d10e      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003734:	4b4a      	ldr	r3, [pc, #296]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800373c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003740:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003744:	091a      	lsrs	r2, r3, #4
 8003746:	4b48      	ldr	r3, [pc, #288]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003748:	4013      	ands	r3, r2
 800374a:	4a45      	ldr	r2, [pc, #276]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800374c:	430b      	orrs	r3, r1
 800374e:	6113      	str	r3, [r2, #16]
 8003750:	e005      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003752:	4b43      	ldr	r3, [pc, #268]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	4a42      	ldr	r2, [pc, #264]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003758:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800375c:	6113      	str	r3, [r2, #16]
 800375e:	4b40      	ldr	r3, [pc, #256]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003760:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003766:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800376a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376e:	4a3c      	ldr	r2, [pc, #240]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003770:	430b      	orrs	r3, r1
 8003772:	6713      	str	r3, [r2, #112]	@ 0x70
 8003774:	e008      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003776:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800377a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800377e:	e003      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003784:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003788:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f002 0301 	and.w	r3, r2, #1
 8003794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800379e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f000 8090 	beq.w	80038ca <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80037aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b2:	2b28      	cmp	r3, #40	@ 0x28
 80037b4:	d870      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80037b6:	a201      	add	r2, pc, #4	@ (adr r2, 80037bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080038a1 	.word	0x080038a1
 80037c0:	08003899 	.word	0x08003899
 80037c4:	08003899 	.word	0x08003899
 80037c8:	08003899 	.word	0x08003899
 80037cc:	08003899 	.word	0x08003899
 80037d0:	08003899 	.word	0x08003899
 80037d4:	08003899 	.word	0x08003899
 80037d8:	08003899 	.word	0x08003899
 80037dc:	0800386d 	.word	0x0800386d
 80037e0:	08003899 	.word	0x08003899
 80037e4:	08003899 	.word	0x08003899
 80037e8:	08003899 	.word	0x08003899
 80037ec:	08003899 	.word	0x08003899
 80037f0:	08003899 	.word	0x08003899
 80037f4:	08003899 	.word	0x08003899
 80037f8:	08003899 	.word	0x08003899
 80037fc:	08003883 	.word	0x08003883
 8003800:	08003899 	.word	0x08003899
 8003804:	08003899 	.word	0x08003899
 8003808:	08003899 	.word	0x08003899
 800380c:	08003899 	.word	0x08003899
 8003810:	08003899 	.word	0x08003899
 8003814:	08003899 	.word	0x08003899
 8003818:	08003899 	.word	0x08003899
 800381c:	080038a1 	.word	0x080038a1
 8003820:	08003899 	.word	0x08003899
 8003824:	08003899 	.word	0x08003899
 8003828:	08003899 	.word	0x08003899
 800382c:	08003899 	.word	0x08003899
 8003830:	08003899 	.word	0x08003899
 8003834:	08003899 	.word	0x08003899
 8003838:	08003899 	.word	0x08003899
 800383c:	080038a1 	.word	0x080038a1
 8003840:	08003899 	.word	0x08003899
 8003844:	08003899 	.word	0x08003899
 8003848:	08003899 	.word	0x08003899
 800384c:	08003899 	.word	0x08003899
 8003850:	08003899 	.word	0x08003899
 8003854:	08003899 	.word	0x08003899
 8003858:	08003899 	.word	0x08003899
 800385c:	080038a1 	.word	0x080038a1
 8003860:	58024400 	.word	0x58024400
 8003864:	58024800 	.word	0x58024800
 8003868:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800386c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003870:	3308      	adds	r3, #8
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f000 ffc5 	bl	8004804 <RCCEx_PLL2_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003880:	e00f      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003882:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003886:	3328      	adds	r3, #40	@ 0x28
 8003888:	2101      	movs	r1, #1
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f86c 	bl	8004968 <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003896:	e004      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80038a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80038aa:	4bc0      	ldr	r3, [pc, #768]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80038b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ba:	4abc      	ldr	r2, [pc, #752]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	6553      	str	r3, [r2, #84]	@ 0x54
 80038c0:	e003      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80038ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f002 0302 	and.w	r3, r2, #2
 80038d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038da:	2300      	movs	r3, #0
 80038dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80038e0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80038e4:	460b      	mov	r3, r1
 80038e6:	4313      	orrs	r3, r2
 80038e8:	d043      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80038ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d824      	bhi.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80038f6:	a201      	add	r2, pc, #4	@ (adr r2, 80038fc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003949 	.word	0x08003949
 8003900:	08003915 	.word	0x08003915
 8003904:	0800392b 	.word	0x0800392b
 8003908:	08003949 	.word	0x08003949
 800390c:	08003949 	.word	0x08003949
 8003910:	08003949 	.word	0x08003949
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003918:	3308      	adds	r3, #8
 800391a:	2101      	movs	r1, #1
 800391c:	4618      	mov	r0, r3
 800391e:	f000 ff71 	bl	8004804 <RCCEx_PLL2_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003928:	e00f      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800392a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800392e:	3328      	adds	r3, #40	@ 0x28
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f001 f818 	bl	8004968 <RCCEx_PLL3_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800393e:	e004      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10b      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003952:	4b96      	ldr	r3, [pc, #600]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003956:	f023 0107 	bic.w	r1, r3, #7
 800395a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800395e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003962:	4a92      	ldr	r2, [pc, #584]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003964:	430b      	orrs	r3, r1
 8003966:	6553      	str	r3, [r2, #84]	@ 0x54
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800396e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f002 0304 	and.w	r3, r2, #4
 800397e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003988:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800398c:	460b      	mov	r3, r1
 800398e:	4313      	orrs	r3, r2
 8003990:	d043      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003996:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800399a:	2b05      	cmp	r3, #5
 800399c:	d824      	bhi.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800399e:	a201      	add	r2, pc, #4	@ (adr r2, 80039a4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80039a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a4:	080039f1 	.word	0x080039f1
 80039a8:	080039bd 	.word	0x080039bd
 80039ac:	080039d3 	.word	0x080039d3
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039f1 	.word	0x080039f1
 80039b8:	080039f1 	.word	0x080039f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039c0:	3308      	adds	r3, #8
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 ff1d 	bl	8004804 <RCCEx_PLL2_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80039d0:	e00f      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039d6:	3328      	adds	r3, #40	@ 0x28
 80039d8:	2101      	movs	r1, #1
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 ffc4 	bl	8004968 <RCCEx_PLL3_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80039e6:	e004      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039fa:	4b6c      	ldr	r3, [pc, #432]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fe:	f023 0107 	bic.w	r1, r3, #7
 8003a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a0a:	4a68      	ldr	r2, [pc, #416]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a10:	e003      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f002 0320 	and.w	r3, r2, #32
 8003a26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a34:	460b      	mov	r3, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	d055      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a46:	d033      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a4c:	d82c      	bhi.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a52:	d02f      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a58:	d826      	bhi.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003a5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a5e:	d02b      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003a60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a64:	d820      	bhi.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a6a:	d012      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a70:	d81a      	bhi.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d022      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a7a:	d115      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a80:	3308      	adds	r3, #8
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 febd 	bl	8004804 <RCCEx_PLL2_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a90:	e015      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a96:	3328      	adds	r3, #40	@ 0x28
 8003a98:	2102      	movs	r1, #2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 ff64 	bl	8004968 <RCCEx_PLL3_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003aa6:	e00a      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003aae:	e006      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003ab0:	bf00      	nop
 8003ab2:	e004      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003ab4:	bf00      	nop
 8003ab6:	e002      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003ab8:	bf00      	nop
 8003aba:	e000      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003abe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ac6:	4b39      	ldr	r3, [pc, #228]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ad6:	4a35      	ldr	r2, [pc, #212]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6553      	str	r3, [r2, #84]	@ 0x54
 8003adc:	e003      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ade:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ae2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003afc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4313      	orrs	r3, r2
 8003b04:	d058      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b12:	d033      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003b14:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003b18:	d82c      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b1e:	d02f      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003b20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b24:	d826      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b2a:	d02b      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003b2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b30:	d820      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b36:	d012      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b3c:	d81a      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d022      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b46:	d115      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fe57 	bl	8004804 <RCCEx_PLL2_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b5c:	e015      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b62:	3328      	adds	r3, #40	@ 0x28
 8003b64:	2102      	movs	r1, #2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fefe 	bl	8004968 <RCCEx_PLL3_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003b72:	e00a      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b7a:	e006      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003b7c:	bf00      	nop
 8003b7e:	e004      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003b80:	bf00      	nop
 8003b82:	e002      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003b84:	bf00      	nop
 8003b86:	e000      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10e      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b92:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b96:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ba2:	4a02      	ldr	r2, [pc, #8]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ba8:	e006      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003baa:	bf00      	nop
 8003bac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003bc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	d055      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003be0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003be4:	d033      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003be6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003bea:	d82c      	bhi.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bf0:	d02f      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bf6:	d826      	bhi.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003bf8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003bfc:	d02b      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003bfe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003c02:	d820      	bhi.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c08:	d012      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c0e:	d81a      	bhi.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d022      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c18:	d115      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c1e:	3308      	adds	r3, #8
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fdee 	bl	8004804 <RCCEx_PLL2_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c2e:	e015      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c34:	3328      	adds	r3, #40	@ 0x28
 8003c36:	2102      	movs	r1, #2
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fe95 	bl	8004968 <RCCEx_PLL3_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003c44:	e00a      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c4c:	e006      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003c4e:	bf00      	nop
 8003c50:	e004      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003c52:	bf00      	nop
 8003c54:	e002      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003c56:	bf00      	nop
 8003c58:	e000      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c64:	4ba1      	ldr	r3, [pc, #644]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c74:	4a9d      	ldr	r2, [pc, #628]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003c76:	430b      	orrs	r3, r1
 8003c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c7a:	e003      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f002 0308 	and.w	r3, r2, #8
 8003c90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c94:	2300      	movs	r3, #0
 8003c96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	d01e      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cb6:	3328      	adds	r3, #40	@ 0x28
 8003cb8:	2102      	movs	r1, #2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fe54 	bl	8004968 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ccc:	4b87      	ldr	r3, [pc, #540]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cdc:	4a83      	ldr	r2, [pc, #524]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f002 0310 	and.w	r3, r2, #16
 8003cee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003cf8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	d01e      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d0e:	d10c      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d14:	3328      	adds	r3, #40	@ 0x28
 8003d16:	2102      	movs	r1, #2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fe25 	bl	8004968 <RCCEx_PLL3_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d2a:	4b70      	ldr	r3, [pc, #448]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d3a:	4a6c      	ldr	r2, [pc, #432]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003d4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	d03e      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d6c:	d022      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d72:	d81b      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d7c:	d00b      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003d7e:	e015      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d84:	3308      	adds	r3, #8
 8003d86:	2100      	movs	r1, #0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fd3b 	bl	8004804 <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d94:	e00f      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d9a:	3328      	adds	r3, #40	@ 0x28
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fde2 	bl	8004968 <RCCEx_PLL3_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003daa:	e004      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003dce:	4a47      	ldr	r2, [pc, #284]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd4:	e003      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dda:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003dea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dec:	2300      	movs	r3, #0
 8003dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003df0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003df4:	460b      	mov	r3, r1
 8003df6:	4313      	orrs	r3, r2
 8003df8:	d03b      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e06:	d01f      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003e08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e0c:	d818      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e12:	d003      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003e14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e18:	d007      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003e1a:	e011      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e1c:	4b33      	ldr	r3, [pc, #204]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	4a32      	ldr	r2, [pc, #200]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e28:	e00f      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e2e:	3328      	adds	r3, #40	@ 0x28
 8003e30:	2101      	movs	r1, #1
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fd98 	bl	8004968 <RCCEx_PLL3_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e3e:	e004      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e46:	e000      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10b      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e52:	4b26      	ldr	r3, [pc, #152]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e62:	4a22      	ldr	r2, [pc, #136]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e68:	e003      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003e7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e80:	2300      	movs	r3, #0
 8003e82:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	d034      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9c:	d007      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003e9e:	e011      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea0:	4b12      	ldr	r3, [pc, #72]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	4a11      	ldr	r2, [pc, #68]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ea6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003eac:	e00e      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fca4 	bl	8004804 <RCCEx_PLL2_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ec2:	e003      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ecc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10d      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ed4:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee2:	4a02      	ldr	r2, [pc, #8]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ee8:	e006      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003eea:	bf00      	nop
 8003eec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ef4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003f04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f06:	2300      	movs	r3, #0
 8003f08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	d00c      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f18:	3328      	adds	r3, #40	@ 0x28
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fd23 	bl	8004968 <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003f3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003f44:	460b      	mov	r3, r1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d038      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f56:	d018      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f5c:	d811      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f62:	d014      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f68:	d80b      	bhi.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d011      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f72:	d106      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f74:	4bc3      	ldr	r3, [pc, #780]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	4ac2      	ldr	r2, [pc, #776]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003f80:	e008      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f88:	e004      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003f8a:	bf00      	nop
 8003f8c:	e002      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003f8e:	bf00      	nop
 8003f90:	e000      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f9c:	4bb9      	ldr	r3, [pc, #740]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fac:	4ab5      	ldr	r2, [pc, #724]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fae:	430b      	orrs	r3, r1
 8003fb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fb2:	e003      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fca:	2300      	movs	r3, #0
 8003fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	d009      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fd8:	4baa      	ldr	r3, [pc, #680]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fdc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fe6:	4aa7      	ldr	r2, [pc, #668]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003ff8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ffe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004008:	4b9e      	ldr	r3, [pc, #632]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800400a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004016:	4a9b      	ldr	r2, [pc, #620]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800401c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800402a:	2300      	movs	r3, #0
 800402c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800402e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004032:	460b      	mov	r3, r1
 8004034:	4313      	orrs	r3, r2
 8004036:	d009      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004038:	4b92      	ldr	r3, [pc, #584]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004046:	4a8f      	ldr	r2, [pc, #572]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004048:	430b      	orrs	r3, r1
 800404a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800404c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004058:	643b      	str	r3, [r7, #64]	@ 0x40
 800405a:	2300      	movs	r3, #0
 800405c:	647b      	str	r3, [r7, #68]	@ 0x44
 800405e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004062:	460b      	mov	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	d00e      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004068:	4b86      	ldr	r3, [pc, #536]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	4a85      	ldr	r2, [pc, #532]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800406e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004072:	6113      	str	r3, [r2, #16]
 8004074:	4b83      	ldr	r3, [pc, #524]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004076:	6919      	ldr	r1, [r3, #16]
 8004078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004080:	4a80      	ldr	r2, [pc, #512]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004082:	430b      	orrs	r3, r1
 8004084:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004092:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004094:	2300      	movs	r3, #0
 8004096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004098:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800409c:	460b      	mov	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	d009      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040a2:	4b78      	ldr	r3, [pc, #480]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80040aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b0:	4a74      	ldr	r2, [pc, #464]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040b2:	430b      	orrs	r3, r1
 80040b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80040c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c4:	2300      	movs	r3, #0
 80040c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80040cc:	460b      	mov	r3, r1
 80040ce:	4313      	orrs	r3, r2
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040d2:	4b6c      	ldr	r3, [pc, #432]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80040da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040e2:	4a68      	ldr	r2, [pc, #416]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80040e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	2100      	movs	r1, #0
 80040f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80040fe:	460b      	mov	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	d011      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004108:	3308      	adds	r3, #8
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fb79 	bl	8004804 <RCCEx_PLL2_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004118:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004124:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	2100      	movs	r1, #0
 8004132:	6239      	str	r1, [r7, #32]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
 800413a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d011      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004148:	3308      	adds	r3, #8
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fb59 	bl	8004804 <RCCEx_PLL2_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004158:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004164:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	2100      	movs	r1, #0
 8004172:	61b9      	str	r1, [r7, #24]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	61fb      	str	r3, [r7, #28]
 800417a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d011      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004188:	3308      	adds	r3, #8
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fb39 	bl	8004804 <RCCEx_PLL2_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004198:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80041a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	2100      	movs	r1, #0
 80041b2:	6139      	str	r1, [r7, #16]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80041be:	460b      	mov	r3, r1
 80041c0:	4313      	orrs	r3, r2
 80041c2:	d011      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041c8:	3328      	adds	r3, #40	@ 0x28
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fbcb 	bl	8004968 <RCCEx_PLL3_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80041d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80041e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	2100      	movs	r1, #0
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80041fe:	460b      	mov	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	d011      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004208:	3328      	adds	r3, #40	@ 0x28
 800420a:	2101      	movs	r1, #1
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fbab 	bl	8004968 <RCCEx_PLL3_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004218:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004224:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	2100      	movs	r1, #0
 8004232:	6039      	str	r1, [r7, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	607b      	str	r3, [r7, #4]
 800423a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800423e:	460b      	mov	r3, r1
 8004240:	4313      	orrs	r3, r2
 8004242:	d011      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004244:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004248:	3328      	adds	r3, #40	@ 0x28
 800424a:	2102      	movs	r1, #2
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fb8b 	bl	8004968 <RCCEx_PLL3_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004258:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004264:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004268:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
}
 8004276:	4618      	mov	r0, r3
 8004278:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800427c:	46bd      	mov	sp, r7
 800427e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400

08004288 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800428c:	f7fe fde2 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	4904      	ldr	r1, [pc, #16]	@ (80042b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	58024400 	.word	0x58024400
 80042b0:	08008354 	.word	0x08008354

080042b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	@ 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80042c6:	4b9f      	ldr	r3, [pc, #636]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ca:	0b1b      	lsrs	r3, r3, #12
 80042cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042d2:	4b9c      	ldr	r3, [pc, #624]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80042de:	4b99      	ldr	r3, [pc, #612]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e2:	08db      	lsrs	r3, r3, #3
 80042e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8111 	beq.w	8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b02      	cmp	r3, #2
 8004306:	f000 8083 	beq.w	8004410 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b02      	cmp	r3, #2
 800430e:	f200 80a1 	bhi.w	8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d056      	beq.n	80043cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800431e:	e099      	b.n	8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004320:	4b88      	ldr	r3, [pc, #544]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d02d      	beq.n	8004388 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800432c:	4b85      	ldr	r3, [pc, #532]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	08db      	lsrs	r3, r3, #3
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	4a84      	ldr	r2, [pc, #528]	@ (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
 800433c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004356:	4b7b      	ldr	r3, [pc, #492]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004366:	ed97 6a03 	vldr	s12, [r7, #12]
 800436a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800436e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800437a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004382:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004386:	e087      	b.n	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004392:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439a:	4b6a      	ldr	r3, [pc, #424]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ca:	e065      	b.n	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004554 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043de:	4b59      	ldr	r3, [pc, #356]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80043f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800440e:	e043      	b.n	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004558 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800441e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004422:	4b48      	ldr	r3, [pc, #288]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004432:	ed97 6a03 	vldr	s12, [r7, #12]
 8004436:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800443a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004452:	e021      	b.n	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004554 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004466:	4b37      	ldr	r3, [pc, #220]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004476:	ed97 6a03 	vldr	s12, [r7, #12]
 800447a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800447e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800448a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004496:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004498:	4b2a      	ldr	r3, [pc, #168]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	0a5b      	lsrs	r3, r3, #9
 800449e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80044b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044be:	ee17 2a90 	vmov	r2, s15
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80044c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044d0:	ee07 3a90 	vmov	s15, r3
 80044d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ec:	ee17 2a90 	vmov	r2, s15
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80044f4:	4b13      	ldr	r3, [pc, #76]	@ (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f8:	0e1b      	lsrs	r3, r3, #24
 80044fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800450a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800450e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800451a:	ee17 2a90 	vmov	r2, s15
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004522:	e008      	b.n	8004536 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
}
 8004536:	bf00      	nop
 8004538:	3724      	adds	r7, #36	@ 0x24
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	58024400 	.word	0x58024400
 8004548:	03d09000 	.word	0x03d09000
 800454c:	46000000 	.word	0x46000000
 8004550:	4c742400 	.word	0x4c742400
 8004554:	4a742400 	.word	0x4a742400
 8004558:	4af42400 	.word	0x4af42400

0800455c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800455c:	b480      	push	{r7}
 800455e:	b089      	sub	sp, #36	@ 0x24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004564:	4ba1      	ldr	r3, [pc, #644]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800456e:	4b9f      	ldr	r3, [pc, #636]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	0d1b      	lsrs	r3, r3, #20
 8004574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004578:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800457a:	4b9c      	ldr	r3, [pc, #624]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800457c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004586:	4b99      	ldr	r3, [pc, #612]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	08db      	lsrs	r3, r3, #3
 800458c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8111 	beq.w	80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	f000 8083 	beq.w	80046b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	f200 80a1 	bhi.w	80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d056      	beq.n	8004674 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80045c6:	e099      	b.n	80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045c8:	4b88      	ldr	r3, [pc, #544]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d02d      	beq.n	8004630 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045d4:	4b85      	ldr	r3, [pc, #532]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	08db      	lsrs	r3, r3, #3
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	4a84      	ldr	r2, [pc, #528]	@ (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
 80045e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fe:	4b7b      	ldr	r3, [pc, #492]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004612:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800462e:	e087      	b.n	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800463e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004642:	4b6a      	ldr	r3, [pc, #424]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004652:	ed97 6a03 	vldr	s12, [r7, #12]
 8004656:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800465a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004672:	e065      	b.n	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004686:	4b59      	ldr	r3, [pc, #356]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004696:	ed97 6a03 	vldr	s12, [r7, #12]
 800469a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800469e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046b6:	e043      	b.n	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80046c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ca:	4b48      	ldr	r3, [pc, #288]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046da:	ed97 6a03 	vldr	s12, [r7, #12]
 80046de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046fa:	e021      	b.n	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004706:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800470a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470e:	4b37      	ldr	r3, [pc, #220]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004722:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800473e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004740:	4b2a      	ldr	r3, [pc, #168]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004744:	0a5b      	lsrs	r3, r3, #9
 8004746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004752:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800475a:	edd7 6a07 	vldr	s13, [r7, #28]
 800475e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004766:	ee17 2a90 	vmov	r2, s15
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800476e:	4b1f      	ldr	r3, [pc, #124]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	0c1b      	lsrs	r3, r3, #16
 8004774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004778:	ee07 3a90 	vmov	s15, r3
 800477c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004780:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004784:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004788:	edd7 6a07 	vldr	s13, [r7, #28]
 800478c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004794:	ee17 2a90 	vmov	r2, s15
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800479c:	4b13      	ldr	r3, [pc, #76]	@ (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800479e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a0:	0e1b      	lsrs	r3, r3, #24
 80047a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c2:	ee17 2a90 	vmov	r2, s15
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80047ca:	e008      	b.n	80047de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	609a      	str	r2, [r3, #8]
}
 80047de:	bf00      	nop
 80047e0:	3724      	adds	r7, #36	@ 0x24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	58024400 	.word	0x58024400
 80047f0:	03d09000 	.word	0x03d09000
 80047f4:	46000000 	.word	0x46000000
 80047f8:	4c742400 	.word	0x4c742400
 80047fc:	4a742400 	.word	0x4a742400
 8004800:	4af42400 	.word	0x4af42400

08004804 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004812:	4b53      	ldr	r3, [pc, #332]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b03      	cmp	r3, #3
 800481c:	d101      	bne.n	8004822 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e099      	b.n	8004956 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004822:	4b4f      	ldr	r3, [pc, #316]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a4e      	ldr	r2, [pc, #312]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004828:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800482c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482e:	f7fd f84b 	bl	80018c8 <HAL_GetTick>
 8004832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004834:	e008      	b.n	8004848 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004836:	f7fd f847 	bl	80018c8 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e086      	b.n	8004956 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004848:	4b45      	ldr	r3, [pc, #276]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004854:	4b42      	ldr	r3, [pc, #264]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	031b      	lsls	r3, r3, #12
 8004862:	493f      	ldr	r1, [pc, #252]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004864:	4313      	orrs	r3, r2
 8004866:	628b      	str	r3, [r1, #40]	@ 0x28
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	3b01      	subs	r3, #1
 8004878:	025b      	lsls	r3, r3, #9
 800487a:	b29b      	uxth	r3, r3
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	3b01      	subs	r3, #1
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	3b01      	subs	r3, #1
 8004892:	061b      	lsls	r3, r3, #24
 8004894:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004898:	4931      	ldr	r1, [pc, #196]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 800489a:	4313      	orrs	r3, r2
 800489c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800489e:	4b30      	ldr	r3, [pc, #192]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	492d      	ldr	r1, [pc, #180]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	f023 0220 	bic.w	r2, r3, #32
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4928      	ldr	r1, [pc, #160]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048c2:	4b27      	ldr	r3, [pc, #156]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	4a26      	ldr	r2, [pc, #152]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048c8:	f023 0310 	bic.w	r3, r3, #16
 80048cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048ce:	4b24      	ldr	r3, [pc, #144]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048d2:	4b24      	ldr	r3, [pc, #144]	@ (8004964 <RCCEx_PLL2_Config+0x160>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	69d2      	ldr	r2, [r2, #28]
 80048da:	00d2      	lsls	r2, r2, #3
 80048dc:	4920      	ldr	r1, [pc, #128]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80048e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	f043 0310 	orr.w	r3, r3, #16
 80048ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	4a19      	ldr	r2, [pc, #100]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004900:	e00f      	b.n	8004922 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d106      	bne.n	8004916 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004908:	4b15      	ldr	r3, [pc, #84]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	4a14      	ldr	r2, [pc, #80]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 800490e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004912:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004914:	e005      	b.n	8004922 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004916:	4b12      	ldr	r3, [pc, #72]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	4a11      	ldr	r2, [pc, #68]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 800491c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004920:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004922:	4b0f      	ldr	r3, [pc, #60]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a0e      	ldr	r2, [pc, #56]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004928:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800492c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492e:	f7fc ffcb 	bl	80018c8 <HAL_GetTick>
 8004932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004934:	e008      	b.n	8004948 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004936:	f7fc ffc7 	bl	80018c8 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e006      	b.n	8004956 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004948:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <RCCEx_PLL2_Config+0x15c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	58024400 	.word	0x58024400
 8004964:	ffff0007 	.word	0xffff0007

08004968 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004976:	4b53      	ldr	r3, [pc, #332]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b03      	cmp	r3, #3
 8004980:	d101      	bne.n	8004986 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e099      	b.n	8004aba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004986:	4b4f      	ldr	r3, [pc, #316]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a4e      	ldr	r2, [pc, #312]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 800498c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004992:	f7fc ff99 	bl	80018c8 <HAL_GetTick>
 8004996:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004998:	e008      	b.n	80049ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800499a:	f7fc ff95 	bl	80018c8 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e086      	b.n	8004aba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049ac:	4b45      	ldr	r3, [pc, #276]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f0      	bne.n	800499a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049b8:	4b42      	ldr	r3, [pc, #264]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 80049ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	051b      	lsls	r3, r3, #20
 80049c6:	493f      	ldr	r1, [pc, #252]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	3b01      	subs	r3, #1
 80049dc:	025b      	lsls	r3, r3, #9
 80049de:	b29b      	uxth	r3, r3
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80049fc:	4931      	ldr	r1, [pc, #196]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a02:	4b30      	ldr	r3, [pc, #192]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	492d      	ldr	r1, [pc, #180]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a14:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	4928      	ldr	r1, [pc, #160]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a26:	4b27      	ldr	r3, [pc, #156]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	4a26      	ldr	r2, [pc, #152]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a32:	4b24      	ldr	r3, [pc, #144]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a36:	4b24      	ldr	r3, [pc, #144]	@ (8004ac8 <RCCEx_PLL3_Config+0x160>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	69d2      	ldr	r2, [r2, #28]
 8004a3e:	00d2      	lsls	r2, r2, #3
 8004a40:	4920      	ldr	r1, [pc, #128]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a46:	4b1f      	ldr	r3, [pc, #124]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a58:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5c:	4a19      	ldr	r2, [pc, #100]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a64:	e00f      	b.n	8004a86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d106      	bne.n	8004a7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a6c:	4b15      	ldr	r3, [pc, #84]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a70:	4a14      	ldr	r2, [pc, #80]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a78:	e005      	b.n	8004a86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a7a:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7e:	4a11      	ldr	r2, [pc, #68]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a86:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a92:	f7fc ff19 	bl	80018c8 <HAL_GetTick>
 8004a96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a98:	e008      	b.n	8004aac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a9a:	f7fc ff15 	bl	80018c8 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e006      	b.n	8004aba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004aac:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	ffff0007 	.word	0xffff0007

08004acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e049      	b.n	8004b72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fc fb9c 	bl	8001230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f001 fa7e 	bl	800600c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e049      	b.n	8004c20 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f841 	bl	8004c28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f001 fa27 	bl	800600c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_TIM_PWM_Start+0x24>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	e03c      	b.n	8004cda <HAL_TIM_PWM_Start+0x9e>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d109      	bne.n	8004c7a <HAL_TIM_PWM_Start+0x3e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	e02f      	b.n	8004cda <HAL_TIM_PWM_Start+0x9e>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d109      	bne.n	8004c94 <HAL_TIM_PWM_Start+0x58>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e022      	b.n	8004cda <HAL_TIM_PWM_Start+0x9e>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d109      	bne.n	8004cae <HAL_TIM_PWM_Start+0x72>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	bf14      	ite	ne
 8004ca6:	2301      	movne	r3, #1
 8004ca8:	2300      	moveq	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	e015      	b.n	8004cda <HAL_TIM_PWM_Start+0x9e>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d109      	bne.n	8004cc8 <HAL_TIM_PWM_Start+0x8c>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	bf14      	ite	ne
 8004cc0:	2301      	movne	r3, #1
 8004cc2:	2300      	moveq	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	e008      	b.n	8004cda <HAL_TIM_PWM_Start+0x9e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	bf14      	ite	ne
 8004cd4:	2301      	movne	r3, #1
 8004cd6:	2300      	moveq	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0a1      	b.n	8004e26 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <HAL_TIM_PWM_Start+0xb6>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cf0:	e023      	b.n	8004d3a <HAL_TIM_PWM_Start+0xfe>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d104      	bne.n	8004d02 <HAL_TIM_PWM_Start+0xc6>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d00:	e01b      	b.n	8004d3a <HAL_TIM_PWM_Start+0xfe>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d104      	bne.n	8004d12 <HAL_TIM_PWM_Start+0xd6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d10:	e013      	b.n	8004d3a <HAL_TIM_PWM_Start+0xfe>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b0c      	cmp	r3, #12
 8004d16:	d104      	bne.n	8004d22 <HAL_TIM_PWM_Start+0xe6>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d20:	e00b      	b.n	8004d3a <HAL_TIM_PWM_Start+0xfe>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d104      	bne.n	8004d32 <HAL_TIM_PWM_Start+0xf6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d30:	e003      	b.n	8004d3a <HAL_TIM_PWM_Start+0xfe>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f001 ff90 	bl	8006c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a38      	ldr	r2, [pc, #224]	@ (8004e30 <HAL_TIM_PWM_Start+0x1f4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_TIM_PWM_Start+0x13e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a37      	ldr	r2, [pc, #220]	@ (8004e34 <HAL_TIM_PWM_Start+0x1f8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00e      	beq.n	8004d7a <HAL_TIM_PWM_Start+0x13e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a35      	ldr	r2, [pc, #212]	@ (8004e38 <HAL_TIM_PWM_Start+0x1fc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d009      	beq.n	8004d7a <HAL_TIM_PWM_Start+0x13e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a34      	ldr	r2, [pc, #208]	@ (8004e3c <HAL_TIM_PWM_Start+0x200>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d004      	beq.n	8004d7a <HAL_TIM_PWM_Start+0x13e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a32      	ldr	r2, [pc, #200]	@ (8004e40 <HAL_TIM_PWM_Start+0x204>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d101      	bne.n	8004d7e <HAL_TIM_PWM_Start+0x142>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <HAL_TIM_PWM_Start+0x144>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d92:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a25      	ldr	r2, [pc, #148]	@ (8004e30 <HAL_TIM_PWM_Start+0x1f4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d022      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x1a8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da6:	d01d      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x1a8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a25      	ldr	r2, [pc, #148]	@ (8004e44 <HAL_TIM_PWM_Start+0x208>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d018      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x1a8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a24      	ldr	r2, [pc, #144]	@ (8004e48 <HAL_TIM_PWM_Start+0x20c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x1a8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a22      	ldr	r2, [pc, #136]	@ (8004e4c <HAL_TIM_PWM_Start+0x210>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x1a8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1a      	ldr	r2, [pc, #104]	@ (8004e34 <HAL_TIM_PWM_Start+0x1f8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x1a8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e50 <HAL_TIM_PWM_Start+0x214>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_TIM_PWM_Start+0x1a8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a16      	ldr	r2, [pc, #88]	@ (8004e38 <HAL_TIM_PWM_Start+0x1fc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d115      	bne.n	8004e10 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	4b1a      	ldr	r3, [pc, #104]	@ (8004e54 <HAL_TIM_PWM_Start+0x218>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b06      	cmp	r3, #6
 8004df4:	d015      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x1e6>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfc:	d011      	beq.n	8004e22 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	e008      	b.n	8004e22 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	e000      	b.n	8004e24 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40001800 	.word	0x40001800
 8004e54:	00010007 	.word	0x00010007

08004e58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2200      	movs	r2, #0
 8004e68:	6839      	ldr	r1, [r7, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 fefc 	bl	8006c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a3e      	ldr	r2, [pc, #248]	@ (8004f70 <HAL_TIM_PWM_Stop+0x118>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <HAL_TIM_PWM_Stop+0x4a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f74 <HAL_TIM_PWM_Stop+0x11c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00e      	beq.n	8004ea2 <HAL_TIM_PWM_Stop+0x4a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a3b      	ldr	r2, [pc, #236]	@ (8004f78 <HAL_TIM_PWM_Stop+0x120>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d009      	beq.n	8004ea2 <HAL_TIM_PWM_Stop+0x4a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a3a      	ldr	r2, [pc, #232]	@ (8004f7c <HAL_TIM_PWM_Stop+0x124>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <HAL_TIM_PWM_Stop+0x4a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a38      	ldr	r2, [pc, #224]	@ (8004f80 <HAL_TIM_PWM_Stop+0x128>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_PWM_Stop+0x4e>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_TIM_PWM_Stop+0x50>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d017      	beq.n	8004edc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10f      	bne.n	8004edc <HAL_TIM_PWM_Stop+0x84>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6a1a      	ldr	r2, [r3, #32]
 8004ec2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <HAL_TIM_PWM_Stop+0x84>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eda:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a1a      	ldr	r2, [r3, #32]
 8004ee2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10f      	bne.n	8004f0c <HAL_TIM_PWM_Stop+0xb4>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6a1a      	ldr	r2, [r3, #32]
 8004ef2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d107      	bne.n	8004f0c <HAL_TIM_PWM_Stop+0xb4>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d104      	bne.n	8004f1c <HAL_TIM_PWM_Stop+0xc4>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f1a:	e023      	b.n	8004f64 <HAL_TIM_PWM_Stop+0x10c>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d104      	bne.n	8004f2c <HAL_TIM_PWM_Stop+0xd4>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f2a:	e01b      	b.n	8004f64 <HAL_TIM_PWM_Stop+0x10c>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d104      	bne.n	8004f3c <HAL_TIM_PWM_Stop+0xe4>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f3a:	e013      	b.n	8004f64 <HAL_TIM_PWM_Stop+0x10c>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d104      	bne.n	8004f4c <HAL_TIM_PWM_Stop+0xf4>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f4a:	e00b      	b.n	8004f64 <HAL_TIM_PWM_Stop+0x10c>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d104      	bne.n	8004f5c <HAL_TIM_PWM_Stop+0x104>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f5a:	e003      	b.n	8004f64 <HAL_TIM_PWM_Stop+0x10c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800

08004f84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e049      	b.n	800502a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f841 	bl	8005032 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f001 f822 	bl	800600c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d104      	bne.n	8005062 <HAL_TIM_IC_Start+0x1a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800505e:	b2db      	uxtb	r3, r3
 8005060:	e023      	b.n	80050aa <HAL_TIM_IC_Start+0x62>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b04      	cmp	r3, #4
 8005066:	d104      	bne.n	8005072 <HAL_TIM_IC_Start+0x2a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800506e:	b2db      	uxtb	r3, r3
 8005070:	e01b      	b.n	80050aa <HAL_TIM_IC_Start+0x62>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d104      	bne.n	8005082 <HAL_TIM_IC_Start+0x3a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800507e:	b2db      	uxtb	r3, r3
 8005080:	e013      	b.n	80050aa <HAL_TIM_IC_Start+0x62>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b0c      	cmp	r3, #12
 8005086:	d104      	bne.n	8005092 <HAL_TIM_IC_Start+0x4a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508e:	b2db      	uxtb	r3, r3
 8005090:	e00b      	b.n	80050aa <HAL_TIM_IC_Start+0x62>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b10      	cmp	r3, #16
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_IC_Start+0x5a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	e003      	b.n	80050aa <HAL_TIM_IC_Start+0x62>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <HAL_TIM_IC_Start+0x74>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e013      	b.n	80050e4 <HAL_TIM_IC_Start+0x9c>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d104      	bne.n	80050cc <HAL_TIM_IC_Start+0x84>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	e00b      	b.n	80050e4 <HAL_TIM_IC_Start+0x9c>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d104      	bne.n	80050dc <HAL_TIM_IC_Start+0x94>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	e003      	b.n	80050e4 <HAL_TIM_IC_Start+0x9c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d102      	bne.n	80050f2 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050ec:	7bbb      	ldrb	r3, [r7, #14]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d001      	beq.n	80050f6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e097      	b.n	8005226 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_IC_Start+0xbe>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005104:	e023      	b.n	800514e <HAL_TIM_IC_Start+0x106>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d104      	bne.n	8005116 <HAL_TIM_IC_Start+0xce>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005114:	e01b      	b.n	800514e <HAL_TIM_IC_Start+0x106>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d104      	bne.n	8005126 <HAL_TIM_IC_Start+0xde>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005124:	e013      	b.n	800514e <HAL_TIM_IC_Start+0x106>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d104      	bne.n	8005136 <HAL_TIM_IC_Start+0xee>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005134:	e00b      	b.n	800514e <HAL_TIM_IC_Start+0x106>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b10      	cmp	r3, #16
 800513a:	d104      	bne.n	8005146 <HAL_TIM_IC_Start+0xfe>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005144:	e003      	b.n	800514e <HAL_TIM_IC_Start+0x106>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <HAL_TIM_IC_Start+0x116>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800515c:	e013      	b.n	8005186 <HAL_TIM_IC_Start+0x13e>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b04      	cmp	r3, #4
 8005162:	d104      	bne.n	800516e <HAL_TIM_IC_Start+0x126>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800516c:	e00b      	b.n	8005186 <HAL_TIM_IC_Start+0x13e>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d104      	bne.n	800517e <HAL_TIM_IC_Start+0x136>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800517c:	e003      	b.n	8005186 <HAL_TIM_IC_Start+0x13e>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2201      	movs	r2, #1
 800518c:	6839      	ldr	r1, [r7, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f001 fd6a 	bl	8006c68 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a25      	ldr	r2, [pc, #148]	@ (8005230 <HAL_TIM_IC_Start+0x1e8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d022      	beq.n	80051e4 <HAL_TIM_IC_Start+0x19c>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a6:	d01d      	beq.n	80051e4 <HAL_TIM_IC_Start+0x19c>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a21      	ldr	r2, [pc, #132]	@ (8005234 <HAL_TIM_IC_Start+0x1ec>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d018      	beq.n	80051e4 <HAL_TIM_IC_Start+0x19c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a20      	ldr	r2, [pc, #128]	@ (8005238 <HAL_TIM_IC_Start+0x1f0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <HAL_TIM_IC_Start+0x19c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a1e      	ldr	r2, [pc, #120]	@ (800523c <HAL_TIM_IC_Start+0x1f4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <HAL_TIM_IC_Start+0x19c>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005240 <HAL_TIM_IC_Start+0x1f8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d009      	beq.n	80051e4 <HAL_TIM_IC_Start+0x19c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005244 <HAL_TIM_IC_Start+0x1fc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_TIM_IC_Start+0x19c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1a      	ldr	r2, [pc, #104]	@ (8005248 <HAL_TIM_IC_Start+0x200>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d115      	bne.n	8005210 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	4b18      	ldr	r3, [pc, #96]	@ (800524c <HAL_TIM_IC_Start+0x204>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d015      	beq.n	8005222 <HAL_TIM_IC_Start+0x1da>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051fc:	d011      	beq.n	8005222 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0201 	orr.w	r2, r2, #1
 800520c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520e:	e008      	b.n	8005222 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e000      	b.n	8005224 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005222:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40010400 	.word	0x40010400
 8005244:	40001800 	.word	0x40001800
 8005248:	40014000 	.word	0x40014000
 800524c:	00010007 	.word	0x00010007

08005250 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2200      	movs	r2, #0
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f001 fd00 	bl	8006c68 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a1a      	ldr	r2, [r3, #32]
 800526e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005272:	4013      	ands	r3, r2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10f      	bne.n	8005298 <HAL_TIM_IC_Stop+0x48>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d107      	bne.n	8005298 <HAL_TIM_IC_Stop+0x48>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <HAL_TIM_IC_Stop+0x58>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052a6:	e023      	b.n	80052f0 <HAL_TIM_IC_Stop+0xa0>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d104      	bne.n	80052b8 <HAL_TIM_IC_Stop+0x68>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052b6:	e01b      	b.n	80052f0 <HAL_TIM_IC_Stop+0xa0>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d104      	bne.n	80052c8 <HAL_TIM_IC_Stop+0x78>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052c6:	e013      	b.n	80052f0 <HAL_TIM_IC_Stop+0xa0>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b0c      	cmp	r3, #12
 80052cc:	d104      	bne.n	80052d8 <HAL_TIM_IC_Stop+0x88>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052d6:	e00b      	b.n	80052f0 <HAL_TIM_IC_Stop+0xa0>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d104      	bne.n	80052e8 <HAL_TIM_IC_Stop+0x98>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052e6:	e003      	b.n	80052f0 <HAL_TIM_IC_Stop+0xa0>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d104      	bne.n	8005300 <HAL_TIM_IC_Stop+0xb0>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052fe:	e013      	b.n	8005328 <HAL_TIM_IC_Stop+0xd8>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b04      	cmp	r3, #4
 8005304:	d104      	bne.n	8005310 <HAL_TIM_IC_Stop+0xc0>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800530e:	e00b      	b.n	8005328 <HAL_TIM_IC_Stop+0xd8>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b08      	cmp	r3, #8
 8005314:	d104      	bne.n	8005320 <HAL_TIM_IC_Stop+0xd0>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800531e:	e003      	b.n	8005328 <HAL_TIM_IC_Stop+0xd8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d104      	bne.n	8005352 <HAL_TIM_IC_Start_IT+0x1e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800534e:	b2db      	uxtb	r3, r3
 8005350:	e023      	b.n	800539a <HAL_TIM_IC_Start_IT+0x66>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b04      	cmp	r3, #4
 8005356:	d104      	bne.n	8005362 <HAL_TIM_IC_Start_IT+0x2e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800535e:	b2db      	uxtb	r3, r3
 8005360:	e01b      	b.n	800539a <HAL_TIM_IC_Start_IT+0x66>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d104      	bne.n	8005372 <HAL_TIM_IC_Start_IT+0x3e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e013      	b.n	800539a <HAL_TIM_IC_Start_IT+0x66>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b0c      	cmp	r3, #12
 8005376:	d104      	bne.n	8005382 <HAL_TIM_IC_Start_IT+0x4e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e00b      	b.n	800539a <HAL_TIM_IC_Start_IT+0x66>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b10      	cmp	r3, #16
 8005386:	d104      	bne.n	8005392 <HAL_TIM_IC_Start_IT+0x5e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800538e:	b2db      	uxtb	r3, r3
 8005390:	e003      	b.n	800539a <HAL_TIM_IC_Start_IT+0x66>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005398:	b2db      	uxtb	r3, r3
 800539a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d104      	bne.n	80053ac <HAL_TIM_IC_Start_IT+0x78>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e013      	b.n	80053d4 <HAL_TIM_IC_Start_IT+0xa0>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d104      	bne.n	80053bc <HAL_TIM_IC_Start_IT+0x88>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e00b      	b.n	80053d4 <HAL_TIM_IC_Start_IT+0xa0>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d104      	bne.n	80053cc <HAL_TIM_IC_Start_IT+0x98>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	e003      	b.n	80053d4 <HAL_TIM_IC_Start_IT+0xa0>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053d6:	7bbb      	ldrb	r3, [r7, #14]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d102      	bne.n	80053e2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80053dc:	7b7b      	ldrb	r3, [r7, #13]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d001      	beq.n	80053e6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e0e2      	b.n	80055ac <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_IC_Start_IT+0xc2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f4:	e023      	b.n	800543e <HAL_TIM_IC_Start_IT+0x10a>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_IC_Start_IT+0xd2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005404:	e01b      	b.n	800543e <HAL_TIM_IC_Start_IT+0x10a>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d104      	bne.n	8005416 <HAL_TIM_IC_Start_IT+0xe2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005414:	e013      	b.n	800543e <HAL_TIM_IC_Start_IT+0x10a>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b0c      	cmp	r3, #12
 800541a:	d104      	bne.n	8005426 <HAL_TIM_IC_Start_IT+0xf2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005424:	e00b      	b.n	800543e <HAL_TIM_IC_Start_IT+0x10a>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b10      	cmp	r3, #16
 800542a:	d104      	bne.n	8005436 <HAL_TIM_IC_Start_IT+0x102>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005434:	e003      	b.n	800543e <HAL_TIM_IC_Start_IT+0x10a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2202      	movs	r2, #2
 800543a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d104      	bne.n	800544e <HAL_TIM_IC_Start_IT+0x11a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800544c:	e013      	b.n	8005476 <HAL_TIM_IC_Start_IT+0x142>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b04      	cmp	r3, #4
 8005452:	d104      	bne.n	800545e <HAL_TIM_IC_Start_IT+0x12a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800545c:	e00b      	b.n	8005476 <HAL_TIM_IC_Start_IT+0x142>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b08      	cmp	r3, #8
 8005462:	d104      	bne.n	800546e <HAL_TIM_IC_Start_IT+0x13a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800546c:	e003      	b.n	8005476 <HAL_TIM_IC_Start_IT+0x142>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b0c      	cmp	r3, #12
 800547a:	d841      	bhi.n	8005500 <HAL_TIM_IC_Start_IT+0x1cc>
 800547c:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <HAL_TIM_IC_Start_IT+0x150>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	080054b9 	.word	0x080054b9
 8005488:	08005501 	.word	0x08005501
 800548c:	08005501 	.word	0x08005501
 8005490:	08005501 	.word	0x08005501
 8005494:	080054cb 	.word	0x080054cb
 8005498:	08005501 	.word	0x08005501
 800549c:	08005501 	.word	0x08005501
 80054a0:	08005501 	.word	0x08005501
 80054a4:	080054dd 	.word	0x080054dd
 80054a8:	08005501 	.word	0x08005501
 80054ac:	08005501 	.word	0x08005501
 80054b0:	08005501 	.word	0x08005501
 80054b4:	080054ef 	.word	0x080054ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0202 	orr.w	r2, r2, #2
 80054c6:	60da      	str	r2, [r3, #12]
      break;
 80054c8:	e01d      	b.n	8005506 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0204 	orr.w	r2, r2, #4
 80054d8:	60da      	str	r2, [r3, #12]
      break;
 80054da:	e014      	b.n	8005506 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0208 	orr.w	r2, r2, #8
 80054ea:	60da      	str	r2, [r3, #12]
      break;
 80054ec:	e00b      	b.n	8005506 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0210 	orr.w	r2, r2, #16
 80054fc:	60da      	str	r2, [r3, #12]
      break;
 80054fe:	e002      	b.n	8005506 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      break;
 8005504:	bf00      	nop
  }

  if (status == HAL_OK)
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d14e      	bne.n	80055aa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2201      	movs	r2, #1
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fba7 	bl	8006c68 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a25      	ldr	r2, [pc, #148]	@ (80055b4 <HAL_TIM_IC_Start_IT+0x280>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d022      	beq.n	800556a <HAL_TIM_IC_Start_IT+0x236>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552c:	d01d      	beq.n	800556a <HAL_TIM_IC_Start_IT+0x236>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a21      	ldr	r2, [pc, #132]	@ (80055b8 <HAL_TIM_IC_Start_IT+0x284>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d018      	beq.n	800556a <HAL_TIM_IC_Start_IT+0x236>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1f      	ldr	r2, [pc, #124]	@ (80055bc <HAL_TIM_IC_Start_IT+0x288>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_TIM_IC_Start_IT+0x236>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1e      	ldr	r2, [pc, #120]	@ (80055c0 <HAL_TIM_IC_Start_IT+0x28c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00e      	beq.n	800556a <HAL_TIM_IC_Start_IT+0x236>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a1c      	ldr	r2, [pc, #112]	@ (80055c4 <HAL_TIM_IC_Start_IT+0x290>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_TIM_IC_Start_IT+0x236>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a1b      	ldr	r2, [pc, #108]	@ (80055c8 <HAL_TIM_IC_Start_IT+0x294>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIM_IC_Start_IT+0x236>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a19      	ldr	r2, [pc, #100]	@ (80055cc <HAL_TIM_IC_Start_IT+0x298>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d115      	bne.n	8005596 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	4b17      	ldr	r3, [pc, #92]	@ (80055d0 <HAL_TIM_IC_Start_IT+0x29c>)
 8005572:	4013      	ands	r3, r2
 8005574:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b06      	cmp	r3, #6
 800557a:	d015      	beq.n	80055a8 <HAL_TIM_IC_Start_IT+0x274>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005582:	d011      	beq.n	80055a8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005594:	e008      	b.n	80055a8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e000      	b.n	80055aa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800
 80055c0:	40000c00 	.word	0x40000c00
 80055c4:	40010400 	.word	0x40010400
 80055c8:	40001800 	.word	0x40001800
 80055cc:	40014000 	.word	0x40014000
 80055d0:	00010007 	.word	0x00010007

080055d4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b0c      	cmp	r3, #12
 80055e6:	d841      	bhi.n	800566c <HAL_TIM_IC_Stop_IT+0x98>
 80055e8:	a201      	add	r2, pc, #4	@ (adr r2, 80055f0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005625 	.word	0x08005625
 80055f4:	0800566d 	.word	0x0800566d
 80055f8:	0800566d 	.word	0x0800566d
 80055fc:	0800566d 	.word	0x0800566d
 8005600:	08005637 	.word	0x08005637
 8005604:	0800566d 	.word	0x0800566d
 8005608:	0800566d 	.word	0x0800566d
 800560c:	0800566d 	.word	0x0800566d
 8005610:	08005649 	.word	0x08005649
 8005614:	0800566d 	.word	0x0800566d
 8005618:	0800566d 	.word	0x0800566d
 800561c:	0800566d 	.word	0x0800566d
 8005620:	0800565b 	.word	0x0800565b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0202 	bic.w	r2, r2, #2
 8005632:	60da      	str	r2, [r3, #12]
      break;
 8005634:	e01d      	b.n	8005672 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0204 	bic.w	r2, r2, #4
 8005644:	60da      	str	r2, [r3, #12]
      break;
 8005646:	e014      	b.n	8005672 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0208 	bic.w	r2, r2, #8
 8005656:	60da      	str	r2, [r3, #12]
      break;
 8005658:	e00b      	b.n	8005672 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0210 	bic.w	r2, r2, #16
 8005668:	60da      	str	r2, [r3, #12]
      break;
 800566a:	e002      	b.n	8005672 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
      break;
 8005670:	bf00      	nop
  }

  if (status == HAL_OK)
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d166      	bne.n	8005746 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2200      	movs	r2, #0
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f001 faf1 	bl	8006c68 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <HAL_TIM_IC_Stop_IT+0xe2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a1a      	ldr	r2, [r3, #32]
 800569c:	f240 4344 	movw	r3, #1092	@ 0x444
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <HAL_TIM_IC_Stop_IT+0xe2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0201 	bic.w	r2, r2, #1
 80056b4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <HAL_TIM_IC_Stop_IT+0xf2>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056c4:	e023      	b.n	800570e <HAL_TIM_IC_Stop_IT+0x13a>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d104      	bne.n	80056d6 <HAL_TIM_IC_Stop_IT+0x102>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d4:	e01b      	b.n	800570e <HAL_TIM_IC_Stop_IT+0x13a>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_IC_Stop_IT+0x112>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056e4:	e013      	b.n	800570e <HAL_TIM_IC_Stop_IT+0x13a>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b0c      	cmp	r3, #12
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_IC_Stop_IT+0x122>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056f4:	e00b      	b.n	800570e <HAL_TIM_IC_Stop_IT+0x13a>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_IC_Stop_IT+0x132>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005704:	e003      	b.n	800570e <HAL_TIM_IC_Stop_IT+0x13a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <HAL_TIM_IC_Stop_IT+0x14a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800571c:	e013      	b.n	8005746 <HAL_TIM_IC_Stop_IT+0x172>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b04      	cmp	r3, #4
 8005722:	d104      	bne.n	800572e <HAL_TIM_IC_Stop_IT+0x15a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800572c:	e00b      	b.n	8005746 <HAL_TIM_IC_Stop_IT+0x172>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d104      	bne.n	800573e <HAL_TIM_IC_Stop_IT+0x16a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800573c:	e003      	b.n	8005746 <HAL_TIM_IC_Stop_IT+0x172>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d020      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01b      	beq.n	80057b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0202 	mvn.w	r2, #2
 8005784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fb fc82 	bl	80010a4 <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fc14 	bl	8005fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fc1b 	bl	8005fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d020      	beq.n	8005800 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01b      	beq.n	8005800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0204 	mvn.w	r2, #4
 80057d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fb fc5c 	bl	80010a4 <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fbee 	bl	8005fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fbf5 	bl	8005fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d020      	beq.n	800584c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01b      	beq.n	800584c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0208 	mvn.w	r2, #8
 800581c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2204      	movs	r2, #4
 8005822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fb fc36 	bl	80010a4 <HAL_TIM_IC_CaptureCallback>
 8005838:	e005      	b.n	8005846 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fbc8 	bl	8005fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fbcf 	bl	8005fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b00      	cmp	r3, #0
 8005854:	d020      	beq.n	8005898 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01b      	beq.n	8005898 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0210 	mvn.w	r2, #16
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2208      	movs	r2, #8
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fc10 	bl	80010a4 <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fba2 	bl	8005fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fba9 	bl	8005fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00c      	beq.n	80058bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0201 	mvn.w	r2, #1
 80058b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fb80 	bl	8005fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00c      	beq.n	80058ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80058e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 fb09 	bl	8006efc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00c      	beq.n	800590e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 fb01 	bl	8006f10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00c      	beq.n	8005932 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800592a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fb63 	bl	8005ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00c      	beq.n	8005956 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f06f 0220 	mvn.w	r2, #32
 800594e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f001 fac9 	bl	8006ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005978:	2302      	movs	r3, #2
 800597a:	e088      	b.n	8005a8e <HAL_TIM_IC_ConfigChannel+0x130>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d11b      	bne.n	80059c2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800599a:	f000 ff9d 	bl	80068d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 020c 	bic.w	r2, r2, #12
 80059ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6999      	ldr	r1, [r3, #24]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	619a      	str	r2, [r3, #24]
 80059c0:	e060      	b.n	8005a84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d11c      	bne.n	8005a02 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80059d8:	f001 f821 	bl	8006a1e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6999      	ldr	r1, [r3, #24]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	619a      	str	r2, [r3, #24]
 8005a00:	e040      	b.n	8005a84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d11b      	bne.n	8005a40 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005a18:	f001 f86e 	bl	8006af8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69da      	ldr	r2, [r3, #28]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 020c 	bic.w	r2, r2, #12
 8005a2a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69d9      	ldr	r1, [r3, #28]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	61da      	str	r2, [r3, #28]
 8005a3e:	e021      	b.n	8005a84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b0c      	cmp	r3, #12
 8005a44:	d11c      	bne.n	8005a80 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a56:	f001 f88b 	bl	8006b70 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a68:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69d9      	ldr	r1, [r3, #28]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	021a      	lsls	r2, r3, #8
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	61da      	str	r2, [r3, #28]
 8005a7e:	e001      	b.n	8005a84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e0ff      	b.n	8005cb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b14      	cmp	r3, #20
 8005ac2:	f200 80f0 	bhi.w	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8005acc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005acc:	08005b21 	.word	0x08005b21
 8005ad0:	08005ca7 	.word	0x08005ca7
 8005ad4:	08005ca7 	.word	0x08005ca7
 8005ad8:	08005ca7 	.word	0x08005ca7
 8005adc:	08005b61 	.word	0x08005b61
 8005ae0:	08005ca7 	.word	0x08005ca7
 8005ae4:	08005ca7 	.word	0x08005ca7
 8005ae8:	08005ca7 	.word	0x08005ca7
 8005aec:	08005ba3 	.word	0x08005ba3
 8005af0:	08005ca7 	.word	0x08005ca7
 8005af4:	08005ca7 	.word	0x08005ca7
 8005af8:	08005ca7 	.word	0x08005ca7
 8005afc:	08005be3 	.word	0x08005be3
 8005b00:	08005ca7 	.word	0x08005ca7
 8005b04:	08005ca7 	.word	0x08005ca7
 8005b08:	08005ca7 	.word	0x08005ca7
 8005b0c:	08005c25 	.word	0x08005c25
 8005b10:	08005ca7 	.word	0x08005ca7
 8005b14:	08005ca7 	.word	0x08005ca7
 8005b18:	08005ca7 	.word	0x08005ca7
 8005b1c:	08005c65 	.word	0x08005c65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fb16 	bl	8006158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0208 	orr.w	r2, r2, #8
 8005b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0204 	bic.w	r2, r2, #4
 8005b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6999      	ldr	r1, [r3, #24]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	619a      	str	r2, [r3, #24]
      break;
 8005b5e:	e0a5      	b.n	8005cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fb86 	bl	8006278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	021a      	lsls	r2, r3, #8
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	619a      	str	r2, [r3, #24]
      break;
 8005ba0:	e084      	b.n	8005cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fbef 	bl	800638c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0208 	orr.w	r2, r2, #8
 8005bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69da      	ldr	r2, [r3, #28]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0204 	bic.w	r2, r2, #4
 8005bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69d9      	ldr	r1, [r3, #28]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	61da      	str	r2, [r3, #28]
      break;
 8005be0:	e064      	b.n	8005cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fc57 	bl	800649c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69d9      	ldr	r1, [r3, #28]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	021a      	lsls	r2, r3, #8
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	61da      	str	r2, [r3, #28]
      break;
 8005c22:	e043      	b.n	8005cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fca0 	bl	8006570 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0208 	orr.w	r2, r2, #8
 8005c3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0204 	bic.w	r2, r2, #4
 8005c4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c62:	e023      	b.n	8005cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fce4 	bl	8006638 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	021a      	lsls	r2, r3, #8
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ca4:	e002      	b.n	8005cac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8005caa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop

08005cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_ConfigClockSource+0x1c>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e0dc      	b.n	8005e96 <HAL_TIM_ConfigClockSource+0x1d6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8005ea0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a64      	ldr	r2, [pc, #400]	@ (8005ea4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	f000 80a9 	beq.w	8005e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8005d18:	4a62      	ldr	r2, [pc, #392]	@ (8005ea4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	f200 80ae 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d20:	4a61      	ldr	r2, [pc, #388]	@ (8005ea8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	f000 80a1 	beq.w	8005e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8005d28:	4a5f      	ldr	r2, [pc, #380]	@ (8005ea8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	f200 80a6 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d30:	4a5e      	ldr	r2, [pc, #376]	@ (8005eac <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	f000 8099 	beq.w	8005e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8005d38:	4a5c      	ldr	r2, [pc, #368]	@ (8005eac <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	f200 809e 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d44:	f000 8091 	beq.w	8005e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8005d48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d4c:	f200 8096 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d54:	f000 8089 	beq.w	8005e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8005d58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d5c:	f200 808e 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d64:	d03e      	beq.n	8005de4 <HAL_TIM_ConfigClockSource+0x124>
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6a:	f200 8087 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d72:	f000 8086 	beq.w	8005e82 <HAL_TIM_ConfigClockSource+0x1c2>
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7a:	d87f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d7c:	2b70      	cmp	r3, #112	@ 0x70
 8005d7e:	d01a      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0xf6>
 8005d80:	2b70      	cmp	r3, #112	@ 0x70
 8005d82:	d87b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d84:	2b60      	cmp	r3, #96	@ 0x60
 8005d86:	d050      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0x16a>
 8005d88:	2b60      	cmp	r3, #96	@ 0x60
 8005d8a:	d877      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d8c:	2b50      	cmp	r3, #80	@ 0x50
 8005d8e:	d03c      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x14a>
 8005d90:	2b50      	cmp	r3, #80	@ 0x50
 8005d92:	d873      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d94:	2b40      	cmp	r3, #64	@ 0x40
 8005d96:	d058      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x18a>
 8005d98:	2b40      	cmp	r3, #64	@ 0x40
 8005d9a:	d86f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005d9c:	2b30      	cmp	r3, #48	@ 0x30
 8005d9e:	d064      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8005da0:	2b30      	cmp	r3, #48	@ 0x30
 8005da2:	d86b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d060      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d867      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d05c      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d05a      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8005db4:	e062      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dc6:	f000 ff2f 	bl	8006c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	609a      	str	r2, [r3, #8]
      break;
 8005de2:	e04f      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005df4:	f000 ff18 	bl	8006c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e06:	609a      	str	r2, [r3, #8]
      break;
 8005e08:	e03c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e16:	461a      	mov	r2, r3
 8005e18:	f000 fdd2 	bl	80069c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2150      	movs	r1, #80	@ 0x50
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fee2 	bl	8006bec <TIM_ITRx_SetConfig>
      break;
 8005e28:	e02c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e36:	461a      	mov	r2, r3
 8005e38:	f000 fe2e 	bl	8006a98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2160      	movs	r1, #96	@ 0x60
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fed2 	bl	8006bec <TIM_ITRx_SetConfig>
      break;
 8005e48:	e01c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e56:	461a      	mov	r2, r3
 8005e58:	f000 fdb2 	bl	80069c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2140      	movs	r1, #64	@ 0x40
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fec2 	bl	8006bec <TIM_ITRx_SetConfig>
      break;
 8005e68:	e00c      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f000 feb9 	bl	8006bec <TIM_ITRx_SetConfig>
      break;
 8005e7a:	e003      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	e000      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	ffceff88 	.word	0xffceff88
 8005ea4:	00100040 	.word	0x00100040
 8005ea8:	00100030 	.word	0x00100030
 8005eac:	00100020 	.word	0x00100020

08005eb0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e031      	b.n	8005f2c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fc12 	bl	8006704 <TIM_SlaveTimer_SetConfig>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e018      	b.n	8005f2c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f08:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f18:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b0c      	cmp	r3, #12
 8005f46:	d831      	bhi.n	8005fac <HAL_TIM_ReadCapturedValue+0x78>
 8005f48:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f85 	.word	0x08005f85
 8005f54:	08005fad 	.word	0x08005fad
 8005f58:	08005fad 	.word	0x08005fad
 8005f5c:	08005fad 	.word	0x08005fad
 8005f60:	08005f8f 	.word	0x08005f8f
 8005f64:	08005fad 	.word	0x08005fad
 8005f68:	08005fad 	.word	0x08005fad
 8005f6c:	08005fad 	.word	0x08005fad
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005fad 	.word	0x08005fad
 8005f78:	08005fad 	.word	0x08005fad
 8005f7c:	08005fad 	.word	0x08005fad
 8005f80:	08005fa3 	.word	0x08005fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f8a:	60fb      	str	r3, [r7, #12]

      break;
 8005f8c:	e00f      	b.n	8005fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f94:	60fb      	str	r3, [r7, #12]

      break;
 8005f96:	e00a      	b.n	8005fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9e:	60fb      	str	r3, [r7, #12]

      break;
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa8:	60fb      	str	r3, [r7, #12]

      break;
 8005faa:	e000      	b.n	8005fae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005fac:	bf00      	nop
  }

  return tmpreg;
 8005fae:	68fb      	ldr	r3, [r7, #12]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a46      	ldr	r2, [pc, #280]	@ (8006138 <TIM_Base_SetConfig+0x12c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800602a:	d00f      	beq.n	800604c <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a43      	ldr	r2, [pc, #268]	@ (800613c <TIM_Base_SetConfig+0x130>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_Base_SetConfig+0x40>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a42      	ldr	r2, [pc, #264]	@ (8006140 <TIM_Base_SetConfig+0x134>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_Base_SetConfig+0x40>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a41      	ldr	r2, [pc, #260]	@ (8006144 <TIM_Base_SetConfig+0x138>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_Base_SetConfig+0x40>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a40      	ldr	r2, [pc, #256]	@ (8006148 <TIM_Base_SetConfig+0x13c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d108      	bne.n	800605e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a35      	ldr	r2, [pc, #212]	@ (8006138 <TIM_Base_SetConfig+0x12c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01f      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606c:	d01b      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a32      	ldr	r2, [pc, #200]	@ (800613c <TIM_Base_SetConfig+0x130>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d017      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a31      	ldr	r2, [pc, #196]	@ (8006140 <TIM_Base_SetConfig+0x134>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a30      	ldr	r2, [pc, #192]	@ (8006144 <TIM_Base_SetConfig+0x138>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00f      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2f      	ldr	r2, [pc, #188]	@ (8006148 <TIM_Base_SetConfig+0x13c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2e      	ldr	r2, [pc, #184]	@ (800614c <TIM_Base_SetConfig+0x140>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a2d      	ldr	r2, [pc, #180]	@ (8006150 <TIM_Base_SetConfig+0x144>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0x9a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006154 <TIM_Base_SetConfig+0x148>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a16      	ldr	r2, [pc, #88]	@ (8006138 <TIM_Base_SetConfig+0x12c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00f      	beq.n	8006104 <TIM_Base_SetConfig+0xf8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a18      	ldr	r2, [pc, #96]	@ (8006148 <TIM_Base_SetConfig+0x13c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00b      	beq.n	8006104 <TIM_Base_SetConfig+0xf8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a17      	ldr	r2, [pc, #92]	@ (800614c <TIM_Base_SetConfig+0x140>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d007      	beq.n	8006104 <TIM_Base_SetConfig+0xf8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <TIM_Base_SetConfig+0x144>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d003      	beq.n	8006104 <TIM_Base_SetConfig+0xf8>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a15      	ldr	r2, [pc, #84]	@ (8006154 <TIM_Base_SetConfig+0x148>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d103      	bne.n	800610c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b01      	cmp	r3, #1
 800611c:	d105      	bne.n	800612a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f023 0201 	bic.w	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	611a      	str	r2, [r3, #16]
  }
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40000400 	.word	0x40000400
 8006140:	40000800 	.word	0x40000800
 8006144:	40000c00 	.word	0x40000c00
 8006148:	40010400 	.word	0x40010400
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400
 8006154:	40014800 	.word	0x40014800

08006158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	f023 0201 	bic.w	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4b37      	ldr	r3, [pc, #220]	@ (8006260 <TIM_OC1_SetConfig+0x108>)
 8006184:	4013      	ands	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f023 0302 	bic.w	r3, r3, #2
 80061a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a2d      	ldr	r2, [pc, #180]	@ (8006264 <TIM_OC1_SetConfig+0x10c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00f      	beq.n	80061d4 <TIM_OC1_SetConfig+0x7c>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006268 <TIM_OC1_SetConfig+0x110>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00b      	beq.n	80061d4 <TIM_OC1_SetConfig+0x7c>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a2b      	ldr	r2, [pc, #172]	@ (800626c <TIM_OC1_SetConfig+0x114>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <TIM_OC1_SetConfig+0x7c>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006270 <TIM_OC1_SetConfig+0x118>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC1_SetConfig+0x7c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a29      	ldr	r2, [pc, #164]	@ (8006274 <TIM_OC1_SetConfig+0x11c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d10c      	bne.n	80061ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f023 0308 	bic.w	r3, r3, #8
 80061da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f023 0304 	bic.w	r3, r3, #4
 80061ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006264 <TIM_OC1_SetConfig+0x10c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00f      	beq.n	8006216 <TIM_OC1_SetConfig+0xbe>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006268 <TIM_OC1_SetConfig+0x110>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00b      	beq.n	8006216 <TIM_OC1_SetConfig+0xbe>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a1a      	ldr	r2, [pc, #104]	@ (800626c <TIM_OC1_SetConfig+0x114>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d007      	beq.n	8006216 <TIM_OC1_SetConfig+0xbe>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a19      	ldr	r2, [pc, #100]	@ (8006270 <TIM_OC1_SetConfig+0x118>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC1_SetConfig+0xbe>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a18      	ldr	r2, [pc, #96]	@ (8006274 <TIM_OC1_SetConfig+0x11c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d111      	bne.n	800623a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800621c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	621a      	str	r2, [r3, #32]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	fffeff8f 	.word	0xfffeff8f
 8006264:	40010000 	.word	0x40010000
 8006268:	40010400 	.word	0x40010400
 800626c:	40014000 	.word	0x40014000
 8006270:	40014400 	.word	0x40014400
 8006274:	40014800 	.word	0x40014800

08006278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f023 0210 	bic.w	r2, r3, #16
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4b34      	ldr	r3, [pc, #208]	@ (8006374 <TIM_OC2_SetConfig+0xfc>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	021b      	lsls	r3, r3, #8
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f023 0320 	bic.w	r3, r3, #32
 80062c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a29      	ldr	r2, [pc, #164]	@ (8006378 <TIM_OC2_SetConfig+0x100>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_OC2_SetConfig+0x68>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a28      	ldr	r2, [pc, #160]	@ (800637c <TIM_OC2_SetConfig+0x104>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d10d      	bne.n	80062fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006378 <TIM_OC2_SetConfig+0x100>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00f      	beq.n	8006324 <TIM_OC2_SetConfig+0xac>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a1d      	ldr	r2, [pc, #116]	@ (800637c <TIM_OC2_SetConfig+0x104>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_OC2_SetConfig+0xac>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a1c      	ldr	r2, [pc, #112]	@ (8006380 <TIM_OC2_SetConfig+0x108>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_OC2_SetConfig+0xac>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a1b      	ldr	r2, [pc, #108]	@ (8006384 <TIM_OC2_SetConfig+0x10c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_OC2_SetConfig+0xac>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a1a      	ldr	r2, [pc, #104]	@ (8006388 <TIM_OC2_SetConfig+0x110>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d113      	bne.n	800634c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800632a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	621a      	str	r2, [r3, #32]
}
 8006366:	bf00      	nop
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	feff8fff 	.word	0xfeff8fff
 8006378:	40010000 	.word	0x40010000
 800637c:	40010400 	.word	0x40010400
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400
 8006388:	40014800 	.word	0x40014800

0800638c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4b33      	ldr	r3, [pc, #204]	@ (8006484 <TIM_OC3_SetConfig+0xf8>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0303 	bic.w	r3, r3, #3
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	021b      	lsls	r3, r3, #8
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a28      	ldr	r2, [pc, #160]	@ (8006488 <TIM_OC3_SetConfig+0xfc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_OC3_SetConfig+0x66>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a27      	ldr	r2, [pc, #156]	@ (800648c <TIM_OC3_SetConfig+0x100>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d10d      	bne.n	800640e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800640c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a1d      	ldr	r2, [pc, #116]	@ (8006488 <TIM_OC3_SetConfig+0xfc>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00f      	beq.n	8006436 <TIM_OC3_SetConfig+0xaa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a1c      	ldr	r2, [pc, #112]	@ (800648c <TIM_OC3_SetConfig+0x100>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00b      	beq.n	8006436 <TIM_OC3_SetConfig+0xaa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a1b      	ldr	r2, [pc, #108]	@ (8006490 <TIM_OC3_SetConfig+0x104>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d007      	beq.n	8006436 <TIM_OC3_SetConfig+0xaa>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a1a      	ldr	r2, [pc, #104]	@ (8006494 <TIM_OC3_SetConfig+0x108>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_OC3_SetConfig+0xaa>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a19      	ldr	r2, [pc, #100]	@ (8006498 <TIM_OC3_SetConfig+0x10c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d113      	bne.n	800645e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800643c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	011b      	lsls	r3, r3, #4
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	621a      	str	r2, [r3, #32]
}
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	fffeff8f 	.word	0xfffeff8f
 8006488:	40010000 	.word	0x40010000
 800648c:	40010400 	.word	0x40010400
 8006490:	40014000 	.word	0x40014000
 8006494:	40014400 	.word	0x40014400
 8006498:	40014800 	.word	0x40014800

0800649c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4b24      	ldr	r3, [pc, #144]	@ (8006558 <TIM_OC4_SetConfig+0xbc>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	031b      	lsls	r3, r3, #12
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a19      	ldr	r2, [pc, #100]	@ (800655c <TIM_OC4_SetConfig+0xc0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00f      	beq.n	800651c <TIM_OC4_SetConfig+0x80>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a18      	ldr	r2, [pc, #96]	@ (8006560 <TIM_OC4_SetConfig+0xc4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00b      	beq.n	800651c <TIM_OC4_SetConfig+0x80>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a17      	ldr	r2, [pc, #92]	@ (8006564 <TIM_OC4_SetConfig+0xc8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d007      	beq.n	800651c <TIM_OC4_SetConfig+0x80>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a16      	ldr	r2, [pc, #88]	@ (8006568 <TIM_OC4_SetConfig+0xcc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC4_SetConfig+0x80>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a15      	ldr	r2, [pc, #84]	@ (800656c <TIM_OC4_SetConfig+0xd0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d109      	bne.n	8006530 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	019b      	lsls	r3, r3, #6
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	feff8fff 	.word	0xfeff8fff
 800655c:	40010000 	.word	0x40010000
 8006560:	40010400 	.word	0x40010400
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800

08006570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4b21      	ldr	r3, [pc, #132]	@ (8006620 <TIM_OC5_SetConfig+0xb0>)
 800659c:	4013      	ands	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80065b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a18      	ldr	r2, [pc, #96]	@ (8006624 <TIM_OC5_SetConfig+0xb4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00f      	beq.n	80065e6 <TIM_OC5_SetConfig+0x76>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a17      	ldr	r2, [pc, #92]	@ (8006628 <TIM_OC5_SetConfig+0xb8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00b      	beq.n	80065e6 <TIM_OC5_SetConfig+0x76>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a16      	ldr	r2, [pc, #88]	@ (800662c <TIM_OC5_SetConfig+0xbc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d007      	beq.n	80065e6 <TIM_OC5_SetConfig+0x76>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a15      	ldr	r2, [pc, #84]	@ (8006630 <TIM_OC5_SetConfig+0xc0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_OC5_SetConfig+0x76>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a14      	ldr	r2, [pc, #80]	@ (8006634 <TIM_OC5_SetConfig+0xc4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d109      	bne.n	80065fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	621a      	str	r2, [r3, #32]
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	fffeff8f 	.word	0xfffeff8f
 8006624:	40010000 	.word	0x40010000
 8006628:	40010400 	.word	0x40010400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800

08006638 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4b22      	ldr	r3, [pc, #136]	@ (80066ec <TIM_OC6_SetConfig+0xb4>)
 8006664:	4013      	ands	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800667a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	051b      	lsls	r3, r3, #20
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a19      	ldr	r2, [pc, #100]	@ (80066f0 <TIM_OC6_SetConfig+0xb8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00f      	beq.n	80066b0 <TIM_OC6_SetConfig+0x78>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a18      	ldr	r2, [pc, #96]	@ (80066f4 <TIM_OC6_SetConfig+0xbc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00b      	beq.n	80066b0 <TIM_OC6_SetConfig+0x78>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a17      	ldr	r2, [pc, #92]	@ (80066f8 <TIM_OC6_SetConfig+0xc0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d007      	beq.n	80066b0 <TIM_OC6_SetConfig+0x78>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a16      	ldr	r2, [pc, #88]	@ (80066fc <TIM_OC6_SetConfig+0xc4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_OC6_SetConfig+0x78>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a15      	ldr	r2, [pc, #84]	@ (8006700 <TIM_OC6_SetConfig+0xc8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d109      	bne.n	80066c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	029b      	lsls	r3, r3, #10
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	feff8fff 	.word	0xfeff8fff
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40010400 	.word	0x40010400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800

08006704 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4b65      	ldr	r3, [pc, #404]	@ (80068b4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800671e:	4013      	ands	r3, r2
 8006720:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4b62      	ldr	r3, [pc, #392]	@ (80068b8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006730:	4013      	ands	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4a5c      	ldr	r2, [pc, #368]	@ (80068bc <TIM_SlaveTimer_SetConfig+0x1b8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	f000 80ab 	beq.w	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006752:	4a5a      	ldr	r2, [pc, #360]	@ (80068bc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	f200 80a4 	bhi.w	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 800675a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800675e:	f000 80a3 	beq.w	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006766:	f200 809c 	bhi.w	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 800676a:	4a55      	ldr	r2, [pc, #340]	@ (80068c0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	f000 809b 	beq.w	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006772:	4a53      	ldr	r2, [pc, #332]	@ (80068c0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	f200 8094 	bhi.w	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 800677a:	4a52      	ldr	r2, [pc, #328]	@ (80068c4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	f000 8093 	beq.w	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006782:	4a50      	ldr	r2, [pc, #320]	@ (80068c4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006784:	4293      	cmp	r3, r2
 8006786:	f200 808c 	bhi.w	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 800678a:	4a4f      	ldr	r2, [pc, #316]	@ (80068c8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800678c:	4293      	cmp	r3, r2
 800678e:	f000 808b 	beq.w	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006792:	4a4d      	ldr	r2, [pc, #308]	@ (80068c8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	f200 8084 	bhi.w	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 800679a:	4a4c      	ldr	r2, [pc, #304]	@ (80068cc <TIM_SlaveTimer_SetConfig+0x1c8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	f000 8083 	beq.w	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80067a2:	4a4a      	ldr	r2, [pc, #296]	@ (80068cc <TIM_SlaveTimer_SetConfig+0x1c8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d87c      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80067a8:	4a49      	ldr	r2, [pc, #292]	@ (80068d0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d07c      	beq.n	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80067ae:	4a48      	ldr	r2, [pc, #288]	@ (80068d0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d876      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80067b4:	4a47      	ldr	r2, [pc, #284]	@ (80068d4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d076      	beq.n	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80067ba:	4a46      	ldr	r2, [pc, #280]	@ (80068d4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d870      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80067c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80067c4:	d070      	beq.n	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80067c6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80067ca:	d86a      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80067cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067d0:	d06a      	beq.n	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80067d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067d6:	d864      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80067d8:	2b70      	cmp	r3, #112	@ 0x70
 80067da:	d01a      	beq.n	8006812 <TIM_SlaveTimer_SetConfig+0x10e>
 80067dc:	2b70      	cmp	r3, #112	@ 0x70
 80067de:	d860      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80067e0:	2b60      	cmp	r3, #96	@ 0x60
 80067e2:	d054      	beq.n	800688e <TIM_SlaveTimer_SetConfig+0x18a>
 80067e4:	2b60      	cmp	r3, #96	@ 0x60
 80067e6:	d85c      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80067e8:	2b50      	cmp	r3, #80	@ 0x50
 80067ea:	d046      	beq.n	800687a <TIM_SlaveTimer_SetConfig+0x176>
 80067ec:	2b50      	cmp	r3, #80	@ 0x50
 80067ee:	d858      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80067f0:	2b40      	cmp	r3, #64	@ 0x40
 80067f2:	d019      	beq.n	8006828 <TIM_SlaveTimer_SetConfig+0x124>
 80067f4:	2b40      	cmp	r3, #64	@ 0x40
 80067f6:	d854      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80067f8:	2b30      	cmp	r3, #48	@ 0x30
 80067fa:	d055      	beq.n	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80067fc:	2b30      	cmp	r3, #48	@ 0x30
 80067fe:	d850      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 8006800:	2b20      	cmp	r3, #32
 8006802:	d051      	beq.n	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d84c      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d04d      	beq.n	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800680c:	2b10      	cmp	r3, #16
 800680e:	d04b      	beq.n	80068a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006810:	e047      	b.n	80068a2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006822:	f000 fa01 	bl	8006c28 <TIM_ETR_SetConfig>
      break;
 8006826:	e040      	b.n	80068aa <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b05      	cmp	r3, #5
 800682e:	d101      	bne.n	8006834 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e03b      	b.n	80068ac <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6a1a      	ldr	r2, [r3, #32]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0201 	bic.w	r2, r2, #1
 800684a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800685a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	4313      	orrs	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	621a      	str	r2, [r3, #32]
      break;
 8006878:	e017      	b.n	80068aa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006886:	461a      	mov	r2, r3
 8006888:	f000 f89a 	bl	80069c0 <TIM_TI1_ConfigInputStage>
      break;
 800688c:	e00d      	b.n	80068aa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800689a:	461a      	mov	r2, r3
 800689c:	f000 f8fc 	bl	8006a98 <TIM_TI2_ConfigInputStage>
      break;
 80068a0:	e003      	b.n	80068aa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	75fb      	strb	r3, [r7, #23]
      break;
 80068a6:	e000      	b.n	80068aa <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80068a8:	bf00      	nop
  }

  return status;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	ffcfff8f 	.word	0xffcfff8f
 80068b8:	fffefff8 	.word	0xfffefff8
 80068bc:	00200010 	.word	0x00200010
 80068c0:	00100070 	.word	0x00100070
 80068c4:	00100060 	.word	0x00100060
 80068c8:	00100050 	.word	0x00100050
 80068cc:	00100040 	.word	0x00100040
 80068d0:	00100030 	.word	0x00100030
 80068d4:	00100020 	.word	0x00100020

080068d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	f023 0201 	bic.w	r2, r3, #1
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4a28      	ldr	r2, [pc, #160]	@ (80069a4 <TIM_TI1_SetConfig+0xcc>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01b      	beq.n	800693e <TIM_TI1_SetConfig+0x66>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800690c:	d017      	beq.n	800693e <TIM_TI1_SetConfig+0x66>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a25      	ldr	r2, [pc, #148]	@ (80069a8 <TIM_TI1_SetConfig+0xd0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <TIM_TI1_SetConfig+0x66>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a24      	ldr	r2, [pc, #144]	@ (80069ac <TIM_TI1_SetConfig+0xd4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00f      	beq.n	800693e <TIM_TI1_SetConfig+0x66>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4a23      	ldr	r2, [pc, #140]	@ (80069b0 <TIM_TI1_SetConfig+0xd8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00b      	beq.n	800693e <TIM_TI1_SetConfig+0x66>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a22      	ldr	r2, [pc, #136]	@ (80069b4 <TIM_TI1_SetConfig+0xdc>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d007      	beq.n	800693e <TIM_TI1_SetConfig+0x66>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a21      	ldr	r2, [pc, #132]	@ (80069b8 <TIM_TI1_SetConfig+0xe0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <TIM_TI1_SetConfig+0x66>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a20      	ldr	r2, [pc, #128]	@ (80069bc <TIM_TI1_SetConfig+0xe4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d101      	bne.n	8006942 <TIM_TI1_SetConfig+0x6a>
 800693e:	2301      	movs	r3, #1
 8006940:	e000      	b.n	8006944 <TIM_TI1_SetConfig+0x6c>
 8006942:	2300      	movs	r3, #0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d008      	beq.n	800695a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f023 0303 	bic.w	r3, r3, #3
 800694e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e003      	b.n	8006962 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f043 0301 	orr.w	r3, r3, #1
 8006960:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	b2db      	uxtb	r3, r3
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	4313      	orrs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f023 030a 	bic.w	r3, r3, #10
 800697c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f003 030a 	and.w	r3, r3, #10
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	621a      	str	r2, [r3, #32]
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800
 80069b0:	40000c00 	.word	0x40000c00
 80069b4:	40010400 	.word	0x40010400
 80069b8:	40001800 	.word	0x40001800
 80069bc:	40014000 	.word	0x40014000

080069c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f023 0201 	bic.w	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	011b      	lsls	r3, r3, #4
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f023 030a 	bic.w	r3, r3, #10
 80069fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	621a      	str	r2, [r3, #32]
}
 8006a12:	bf00      	nop
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b087      	sub	sp, #28
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f023 0210 	bic.w	r2, r3, #16
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	031b      	lsls	r3, r3, #12
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a70:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	621a      	str	r2, [r3, #32]
}
 8006a8c:	bf00      	nop
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	f023 0210 	bic.w	r2, r3, #16
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	031b      	lsls	r3, r3, #12
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	621a      	str	r2, [r3, #32]
}
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f023 0303 	bic.w	r3, r3, #3
 8006b24:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b34:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006b48:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	621a      	str	r2, [r3, #32]
}
 8006b64:	bf00      	nop
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	031b      	lsls	r3, r3, #12
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006bc2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	031b      	lsls	r3, r3, #12
 8006bc8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	621a      	str	r2, [r3, #32]
}
 8006bde:	bf00      	nop
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4b09      	ldr	r3, [pc, #36]	@ (8006c24 <TIM_ITRx_SetConfig+0x38>)
 8006c00:	4013      	ands	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	f043 0307 	orr.w	r3, r3, #7
 8006c0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	609a      	str	r2, [r3, #8]
}
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	ffcfff8f 	.word	0xffcfff8f

08006c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	021a      	lsls	r2, r3, #8
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	609a      	str	r2, [r3, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1a      	ldr	r2, [r3, #32]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	401a      	ands	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1a      	ldr	r2, [r3, #32]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
	...

08006cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e06d      	b.n	8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a30      	ldr	r2, [pc, #192]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d108      	bne.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a20      	ldr	r2, [pc, #128]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d022      	beq.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3e:	d01d      	beq.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1d      	ldr	r2, [pc, #116]	@ (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d018      	beq.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00e      	beq.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a15      	ldr	r2, [pc, #84]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d009      	beq.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a16      	ldr	r2, [pc, #88]	@ (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a15      	ldr	r2, [pc, #84]	@ (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d10c      	bne.n	8006d96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40010400 	.word	0x40010400
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	40000800 	.word	0x40000800
 8006dc4:	40000c00 	.word	0x40000c00
 8006dc8:	40001800 	.word	0x40001800
 8006dcc:	40014000 	.word	0x40014000

08006dd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e073      	b.n	8006ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	041b      	lsls	r3, r3, #16
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a19      	ldr	r2, [pc, #100]	@ (8006ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d004      	beq.n	8006e88 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a18      	ldr	r2, [pc, #96]	@ (8006ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d11c      	bne.n	8006ec2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e92:	051b      	lsls	r3, r3, #20
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	40010400 	.word	0x40010400

08006ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e042      	b.n	8006fbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7fa fad3 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2224      	movs	r2, #36	@ 0x24
 8006f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0201 	bic.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fe94 	bl	8007c9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f825 	bl	8006fc4 <UART_SetConfig>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e01b      	b.n	8006fbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 ff13 	bl	8007de0 <UART_CheckIdleState>
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc8:	b092      	sub	sp, #72	@ 0x48
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	4bbe      	ldr	r3, [pc, #760]	@ (80072ec <UART_SetConfig+0x328>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	6812      	ldr	r2, [r2, #0]
 8006ffa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ffc:	430b      	orrs	r3, r1
 8006ffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4ab3      	ldr	r2, [pc, #716]	@ (80072f0 <UART_SetConfig+0x32c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d004      	beq.n	8007030 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800702c:	4313      	orrs	r3, r2
 800702e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	4baf      	ldr	r3, [pc, #700]	@ (80072f4 <UART_SetConfig+0x330>)
 8007038:	4013      	ands	r3, r2
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007040:	430b      	orrs	r3, r1
 8007042:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704a:	f023 010f 	bic.w	r1, r3, #15
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4aa6      	ldr	r2, [pc, #664]	@ (80072f8 <UART_SetConfig+0x334>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d177      	bne.n	8007154 <UART_SetConfig+0x190>
 8007064:	4ba5      	ldr	r3, [pc, #660]	@ (80072fc <UART_SetConfig+0x338>)
 8007066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007068:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800706c:	2b28      	cmp	r3, #40	@ 0x28
 800706e:	d86d      	bhi.n	800714c <UART_SetConfig+0x188>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <UART_SetConfig+0xb4>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	0800711d 	.word	0x0800711d
 800707c:	0800714d 	.word	0x0800714d
 8007080:	0800714d 	.word	0x0800714d
 8007084:	0800714d 	.word	0x0800714d
 8007088:	0800714d 	.word	0x0800714d
 800708c:	0800714d 	.word	0x0800714d
 8007090:	0800714d 	.word	0x0800714d
 8007094:	0800714d 	.word	0x0800714d
 8007098:	08007125 	.word	0x08007125
 800709c:	0800714d 	.word	0x0800714d
 80070a0:	0800714d 	.word	0x0800714d
 80070a4:	0800714d 	.word	0x0800714d
 80070a8:	0800714d 	.word	0x0800714d
 80070ac:	0800714d 	.word	0x0800714d
 80070b0:	0800714d 	.word	0x0800714d
 80070b4:	0800714d 	.word	0x0800714d
 80070b8:	0800712d 	.word	0x0800712d
 80070bc:	0800714d 	.word	0x0800714d
 80070c0:	0800714d 	.word	0x0800714d
 80070c4:	0800714d 	.word	0x0800714d
 80070c8:	0800714d 	.word	0x0800714d
 80070cc:	0800714d 	.word	0x0800714d
 80070d0:	0800714d 	.word	0x0800714d
 80070d4:	0800714d 	.word	0x0800714d
 80070d8:	08007135 	.word	0x08007135
 80070dc:	0800714d 	.word	0x0800714d
 80070e0:	0800714d 	.word	0x0800714d
 80070e4:	0800714d 	.word	0x0800714d
 80070e8:	0800714d 	.word	0x0800714d
 80070ec:	0800714d 	.word	0x0800714d
 80070f0:	0800714d 	.word	0x0800714d
 80070f4:	0800714d 	.word	0x0800714d
 80070f8:	0800713d 	.word	0x0800713d
 80070fc:	0800714d 	.word	0x0800714d
 8007100:	0800714d 	.word	0x0800714d
 8007104:	0800714d 	.word	0x0800714d
 8007108:	0800714d 	.word	0x0800714d
 800710c:	0800714d 	.word	0x0800714d
 8007110:	0800714d 	.word	0x0800714d
 8007114:	0800714d 	.word	0x0800714d
 8007118:	08007145 	.word	0x08007145
 800711c:	2301      	movs	r3, #1
 800711e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007122:	e326      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007124:	2304      	movs	r3, #4
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712a:	e322      	b.n	8007772 <UART_SetConfig+0x7ae>
 800712c:	2308      	movs	r3, #8
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007132:	e31e      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007134:	2310      	movs	r3, #16
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713a:	e31a      	b.n	8007772 <UART_SetConfig+0x7ae>
 800713c:	2320      	movs	r3, #32
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007142:	e316      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007144:	2340      	movs	r3, #64	@ 0x40
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714a:	e312      	b.n	8007772 <UART_SetConfig+0x7ae>
 800714c:	2380      	movs	r3, #128	@ 0x80
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007152:	e30e      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a69      	ldr	r2, [pc, #420]	@ (8007300 <UART_SetConfig+0x33c>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d130      	bne.n	80071c0 <UART_SetConfig+0x1fc>
 800715e:	4b67      	ldr	r3, [pc, #412]	@ (80072fc <UART_SetConfig+0x338>)
 8007160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	2b05      	cmp	r3, #5
 8007168:	d826      	bhi.n	80071b8 <UART_SetConfig+0x1f4>
 800716a:	a201      	add	r2, pc, #4	@ (adr r2, 8007170 <UART_SetConfig+0x1ac>)
 800716c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007170:	08007189 	.word	0x08007189
 8007174:	08007191 	.word	0x08007191
 8007178:	08007199 	.word	0x08007199
 800717c:	080071a1 	.word	0x080071a1
 8007180:	080071a9 	.word	0x080071a9
 8007184:	080071b1 	.word	0x080071b1
 8007188:	2300      	movs	r3, #0
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718e:	e2f0      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007190:	2304      	movs	r3, #4
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007196:	e2ec      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007198:	2308      	movs	r3, #8
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719e:	e2e8      	b.n	8007772 <UART_SetConfig+0x7ae>
 80071a0:	2310      	movs	r3, #16
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a6:	e2e4      	b.n	8007772 <UART_SetConfig+0x7ae>
 80071a8:	2320      	movs	r3, #32
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ae:	e2e0      	b.n	8007772 <UART_SetConfig+0x7ae>
 80071b0:	2340      	movs	r3, #64	@ 0x40
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071b6:	e2dc      	b.n	8007772 <UART_SetConfig+0x7ae>
 80071b8:	2380      	movs	r3, #128	@ 0x80
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071be:	e2d8      	b.n	8007772 <UART_SetConfig+0x7ae>
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a4f      	ldr	r2, [pc, #316]	@ (8007304 <UART_SetConfig+0x340>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d130      	bne.n	800722c <UART_SetConfig+0x268>
 80071ca:	4b4c      	ldr	r3, [pc, #304]	@ (80072fc <UART_SetConfig+0x338>)
 80071cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	2b05      	cmp	r3, #5
 80071d4:	d826      	bhi.n	8007224 <UART_SetConfig+0x260>
 80071d6:	a201      	add	r2, pc, #4	@ (adr r2, 80071dc <UART_SetConfig+0x218>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	080071f5 	.word	0x080071f5
 80071e0:	080071fd 	.word	0x080071fd
 80071e4:	08007205 	.word	0x08007205
 80071e8:	0800720d 	.word	0x0800720d
 80071ec:	08007215 	.word	0x08007215
 80071f0:	0800721d 	.word	0x0800721d
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fa:	e2ba      	b.n	8007772 <UART_SetConfig+0x7ae>
 80071fc:	2304      	movs	r3, #4
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007202:	e2b6      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007204:	2308      	movs	r3, #8
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720a:	e2b2      	b.n	8007772 <UART_SetConfig+0x7ae>
 800720c:	2310      	movs	r3, #16
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007212:	e2ae      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007214:	2320      	movs	r3, #32
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721a:	e2aa      	b.n	8007772 <UART_SetConfig+0x7ae>
 800721c:	2340      	movs	r3, #64	@ 0x40
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007222:	e2a6      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007224:	2380      	movs	r3, #128	@ 0x80
 8007226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800722a:	e2a2      	b.n	8007772 <UART_SetConfig+0x7ae>
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a35      	ldr	r2, [pc, #212]	@ (8007308 <UART_SetConfig+0x344>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d130      	bne.n	8007298 <UART_SetConfig+0x2d4>
 8007236:	4b31      	ldr	r3, [pc, #196]	@ (80072fc <UART_SetConfig+0x338>)
 8007238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	2b05      	cmp	r3, #5
 8007240:	d826      	bhi.n	8007290 <UART_SetConfig+0x2cc>
 8007242:	a201      	add	r2, pc, #4	@ (adr r2, 8007248 <UART_SetConfig+0x284>)
 8007244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007248:	08007261 	.word	0x08007261
 800724c:	08007269 	.word	0x08007269
 8007250:	08007271 	.word	0x08007271
 8007254:	08007279 	.word	0x08007279
 8007258:	08007281 	.word	0x08007281
 800725c:	08007289 	.word	0x08007289
 8007260:	2300      	movs	r3, #0
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007266:	e284      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007268:	2304      	movs	r3, #4
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726e:	e280      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007270:	2308      	movs	r3, #8
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007276:	e27c      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007278:	2310      	movs	r3, #16
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727e:	e278      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007280:	2320      	movs	r3, #32
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007286:	e274      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007288:	2340      	movs	r3, #64	@ 0x40
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728e:	e270      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007290:	2380      	movs	r3, #128	@ 0x80
 8007292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007296:	e26c      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1b      	ldr	r2, [pc, #108]	@ (800730c <UART_SetConfig+0x348>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d142      	bne.n	8007328 <UART_SetConfig+0x364>
 80072a2:	4b16      	ldr	r3, [pc, #88]	@ (80072fc <UART_SetConfig+0x338>)
 80072a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	2b05      	cmp	r3, #5
 80072ac:	d838      	bhi.n	8007320 <UART_SetConfig+0x35c>
 80072ae:	a201      	add	r2, pc, #4	@ (adr r2, 80072b4 <UART_SetConfig+0x2f0>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	080072cd 	.word	0x080072cd
 80072b8:	080072d5 	.word	0x080072d5
 80072bc:	080072dd 	.word	0x080072dd
 80072c0:	080072e5 	.word	0x080072e5
 80072c4:	08007311 	.word	0x08007311
 80072c8:	08007319 	.word	0x08007319
 80072cc:	2300      	movs	r3, #0
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d2:	e24e      	b.n	8007772 <UART_SetConfig+0x7ae>
 80072d4:	2304      	movs	r3, #4
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072da:	e24a      	b.n	8007772 <UART_SetConfig+0x7ae>
 80072dc:	2308      	movs	r3, #8
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e2:	e246      	b.n	8007772 <UART_SetConfig+0x7ae>
 80072e4:	2310      	movs	r3, #16
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ea:	e242      	b.n	8007772 <UART_SetConfig+0x7ae>
 80072ec:	cfff69f3 	.word	0xcfff69f3
 80072f0:	58000c00 	.word	0x58000c00
 80072f4:	11fff4ff 	.word	0x11fff4ff
 80072f8:	40011000 	.word	0x40011000
 80072fc:	58024400 	.word	0x58024400
 8007300:	40004400 	.word	0x40004400
 8007304:	40004800 	.word	0x40004800
 8007308:	40004c00 	.word	0x40004c00
 800730c:	40005000 	.word	0x40005000
 8007310:	2320      	movs	r3, #32
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007316:	e22c      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007318:	2340      	movs	r3, #64	@ 0x40
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800731e:	e228      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007320:	2380      	movs	r3, #128	@ 0x80
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007326:	e224      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4ab1      	ldr	r2, [pc, #708]	@ (80075f4 <UART_SetConfig+0x630>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d176      	bne.n	8007420 <UART_SetConfig+0x45c>
 8007332:	4bb1      	ldr	r3, [pc, #708]	@ (80075f8 <UART_SetConfig+0x634>)
 8007334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007336:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800733a:	2b28      	cmp	r3, #40	@ 0x28
 800733c:	d86c      	bhi.n	8007418 <UART_SetConfig+0x454>
 800733e:	a201      	add	r2, pc, #4	@ (adr r2, 8007344 <UART_SetConfig+0x380>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	080073e9 	.word	0x080073e9
 8007348:	08007419 	.word	0x08007419
 800734c:	08007419 	.word	0x08007419
 8007350:	08007419 	.word	0x08007419
 8007354:	08007419 	.word	0x08007419
 8007358:	08007419 	.word	0x08007419
 800735c:	08007419 	.word	0x08007419
 8007360:	08007419 	.word	0x08007419
 8007364:	080073f1 	.word	0x080073f1
 8007368:	08007419 	.word	0x08007419
 800736c:	08007419 	.word	0x08007419
 8007370:	08007419 	.word	0x08007419
 8007374:	08007419 	.word	0x08007419
 8007378:	08007419 	.word	0x08007419
 800737c:	08007419 	.word	0x08007419
 8007380:	08007419 	.word	0x08007419
 8007384:	080073f9 	.word	0x080073f9
 8007388:	08007419 	.word	0x08007419
 800738c:	08007419 	.word	0x08007419
 8007390:	08007419 	.word	0x08007419
 8007394:	08007419 	.word	0x08007419
 8007398:	08007419 	.word	0x08007419
 800739c:	08007419 	.word	0x08007419
 80073a0:	08007419 	.word	0x08007419
 80073a4:	08007401 	.word	0x08007401
 80073a8:	08007419 	.word	0x08007419
 80073ac:	08007419 	.word	0x08007419
 80073b0:	08007419 	.word	0x08007419
 80073b4:	08007419 	.word	0x08007419
 80073b8:	08007419 	.word	0x08007419
 80073bc:	08007419 	.word	0x08007419
 80073c0:	08007419 	.word	0x08007419
 80073c4:	08007409 	.word	0x08007409
 80073c8:	08007419 	.word	0x08007419
 80073cc:	08007419 	.word	0x08007419
 80073d0:	08007419 	.word	0x08007419
 80073d4:	08007419 	.word	0x08007419
 80073d8:	08007419 	.word	0x08007419
 80073dc:	08007419 	.word	0x08007419
 80073e0:	08007419 	.word	0x08007419
 80073e4:	08007411 	.word	0x08007411
 80073e8:	2301      	movs	r3, #1
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ee:	e1c0      	b.n	8007772 <UART_SetConfig+0x7ae>
 80073f0:	2304      	movs	r3, #4
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f6:	e1bc      	b.n	8007772 <UART_SetConfig+0x7ae>
 80073f8:	2308      	movs	r3, #8
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fe:	e1b8      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007400:	2310      	movs	r3, #16
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007406:	e1b4      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007408:	2320      	movs	r3, #32
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740e:	e1b0      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007410:	2340      	movs	r3, #64	@ 0x40
 8007412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007416:	e1ac      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007418:	2380      	movs	r3, #128	@ 0x80
 800741a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741e:	e1a8      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a75      	ldr	r2, [pc, #468]	@ (80075fc <UART_SetConfig+0x638>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d130      	bne.n	800748c <UART_SetConfig+0x4c8>
 800742a:	4b73      	ldr	r3, [pc, #460]	@ (80075f8 <UART_SetConfig+0x634>)
 800742c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	2b05      	cmp	r3, #5
 8007434:	d826      	bhi.n	8007484 <UART_SetConfig+0x4c0>
 8007436:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <UART_SetConfig+0x478>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007455 	.word	0x08007455
 8007440:	0800745d 	.word	0x0800745d
 8007444:	08007465 	.word	0x08007465
 8007448:	0800746d 	.word	0x0800746d
 800744c:	08007475 	.word	0x08007475
 8007450:	0800747d 	.word	0x0800747d
 8007454:	2300      	movs	r3, #0
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745a:	e18a      	b.n	8007772 <UART_SetConfig+0x7ae>
 800745c:	2304      	movs	r3, #4
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007462:	e186      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007464:	2308      	movs	r3, #8
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746a:	e182      	b.n	8007772 <UART_SetConfig+0x7ae>
 800746c:	2310      	movs	r3, #16
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007472:	e17e      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007474:	2320      	movs	r3, #32
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747a:	e17a      	b.n	8007772 <UART_SetConfig+0x7ae>
 800747c:	2340      	movs	r3, #64	@ 0x40
 800747e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007482:	e176      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007484:	2380      	movs	r3, #128	@ 0x80
 8007486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748a:	e172      	b.n	8007772 <UART_SetConfig+0x7ae>
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a5b      	ldr	r2, [pc, #364]	@ (8007600 <UART_SetConfig+0x63c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d130      	bne.n	80074f8 <UART_SetConfig+0x534>
 8007496:	4b58      	ldr	r3, [pc, #352]	@ (80075f8 <UART_SetConfig+0x634>)
 8007498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d826      	bhi.n	80074f0 <UART_SetConfig+0x52c>
 80074a2:	a201      	add	r2, pc, #4	@ (adr r2, 80074a8 <UART_SetConfig+0x4e4>)
 80074a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a8:	080074c1 	.word	0x080074c1
 80074ac:	080074c9 	.word	0x080074c9
 80074b0:	080074d1 	.word	0x080074d1
 80074b4:	080074d9 	.word	0x080074d9
 80074b8:	080074e1 	.word	0x080074e1
 80074bc:	080074e9 	.word	0x080074e9
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e154      	b.n	8007772 <UART_SetConfig+0x7ae>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e150      	b.n	8007772 <UART_SetConfig+0x7ae>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e14c      	b.n	8007772 <UART_SetConfig+0x7ae>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e148      	b.n	8007772 <UART_SetConfig+0x7ae>
 80074e0:	2320      	movs	r3, #32
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e6:	e144      	b.n	8007772 <UART_SetConfig+0x7ae>
 80074e8:	2340      	movs	r3, #64	@ 0x40
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ee:	e140      	b.n	8007772 <UART_SetConfig+0x7ae>
 80074f0:	2380      	movs	r3, #128	@ 0x80
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f6:	e13c      	b.n	8007772 <UART_SetConfig+0x7ae>
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a41      	ldr	r2, [pc, #260]	@ (8007604 <UART_SetConfig+0x640>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	f040 8082 	bne.w	8007608 <UART_SetConfig+0x644>
 8007504:	4b3c      	ldr	r3, [pc, #240]	@ (80075f8 <UART_SetConfig+0x634>)
 8007506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007508:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800750c:	2b28      	cmp	r3, #40	@ 0x28
 800750e:	d86d      	bhi.n	80075ec <UART_SetConfig+0x628>
 8007510:	a201      	add	r2, pc, #4	@ (adr r2, 8007518 <UART_SetConfig+0x554>)
 8007512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007516:	bf00      	nop
 8007518:	080075bd 	.word	0x080075bd
 800751c:	080075ed 	.word	0x080075ed
 8007520:	080075ed 	.word	0x080075ed
 8007524:	080075ed 	.word	0x080075ed
 8007528:	080075ed 	.word	0x080075ed
 800752c:	080075ed 	.word	0x080075ed
 8007530:	080075ed 	.word	0x080075ed
 8007534:	080075ed 	.word	0x080075ed
 8007538:	080075c5 	.word	0x080075c5
 800753c:	080075ed 	.word	0x080075ed
 8007540:	080075ed 	.word	0x080075ed
 8007544:	080075ed 	.word	0x080075ed
 8007548:	080075ed 	.word	0x080075ed
 800754c:	080075ed 	.word	0x080075ed
 8007550:	080075ed 	.word	0x080075ed
 8007554:	080075ed 	.word	0x080075ed
 8007558:	080075cd 	.word	0x080075cd
 800755c:	080075ed 	.word	0x080075ed
 8007560:	080075ed 	.word	0x080075ed
 8007564:	080075ed 	.word	0x080075ed
 8007568:	080075ed 	.word	0x080075ed
 800756c:	080075ed 	.word	0x080075ed
 8007570:	080075ed 	.word	0x080075ed
 8007574:	080075ed 	.word	0x080075ed
 8007578:	080075d5 	.word	0x080075d5
 800757c:	080075ed 	.word	0x080075ed
 8007580:	080075ed 	.word	0x080075ed
 8007584:	080075ed 	.word	0x080075ed
 8007588:	080075ed 	.word	0x080075ed
 800758c:	080075ed 	.word	0x080075ed
 8007590:	080075ed 	.word	0x080075ed
 8007594:	080075ed 	.word	0x080075ed
 8007598:	080075dd 	.word	0x080075dd
 800759c:	080075ed 	.word	0x080075ed
 80075a0:	080075ed 	.word	0x080075ed
 80075a4:	080075ed 	.word	0x080075ed
 80075a8:	080075ed 	.word	0x080075ed
 80075ac:	080075ed 	.word	0x080075ed
 80075b0:	080075ed 	.word	0x080075ed
 80075b4:	080075ed 	.word	0x080075ed
 80075b8:	080075e5 	.word	0x080075e5
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c2:	e0d6      	b.n	8007772 <UART_SetConfig+0x7ae>
 80075c4:	2304      	movs	r3, #4
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ca:	e0d2      	b.n	8007772 <UART_SetConfig+0x7ae>
 80075cc:	2308      	movs	r3, #8
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d2:	e0ce      	b.n	8007772 <UART_SetConfig+0x7ae>
 80075d4:	2310      	movs	r3, #16
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e0ca      	b.n	8007772 <UART_SetConfig+0x7ae>
 80075dc:	2320      	movs	r3, #32
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e0c6      	b.n	8007772 <UART_SetConfig+0x7ae>
 80075e4:	2340      	movs	r3, #64	@ 0x40
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ea:	e0c2      	b.n	8007772 <UART_SetConfig+0x7ae>
 80075ec:	2380      	movs	r3, #128	@ 0x80
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e0be      	b.n	8007772 <UART_SetConfig+0x7ae>
 80075f4:	40011400 	.word	0x40011400
 80075f8:	58024400 	.word	0x58024400
 80075fc:	40007800 	.word	0x40007800
 8007600:	40007c00 	.word	0x40007c00
 8007604:	40011800 	.word	0x40011800
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4aad      	ldr	r2, [pc, #692]	@ (80078c4 <UART_SetConfig+0x900>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d176      	bne.n	8007700 <UART_SetConfig+0x73c>
 8007612:	4bad      	ldr	r3, [pc, #692]	@ (80078c8 <UART_SetConfig+0x904>)
 8007614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007616:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800761a:	2b28      	cmp	r3, #40	@ 0x28
 800761c:	d86c      	bhi.n	80076f8 <UART_SetConfig+0x734>
 800761e:	a201      	add	r2, pc, #4	@ (adr r2, 8007624 <UART_SetConfig+0x660>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	080076c9 	.word	0x080076c9
 8007628:	080076f9 	.word	0x080076f9
 800762c:	080076f9 	.word	0x080076f9
 8007630:	080076f9 	.word	0x080076f9
 8007634:	080076f9 	.word	0x080076f9
 8007638:	080076f9 	.word	0x080076f9
 800763c:	080076f9 	.word	0x080076f9
 8007640:	080076f9 	.word	0x080076f9
 8007644:	080076d1 	.word	0x080076d1
 8007648:	080076f9 	.word	0x080076f9
 800764c:	080076f9 	.word	0x080076f9
 8007650:	080076f9 	.word	0x080076f9
 8007654:	080076f9 	.word	0x080076f9
 8007658:	080076f9 	.word	0x080076f9
 800765c:	080076f9 	.word	0x080076f9
 8007660:	080076f9 	.word	0x080076f9
 8007664:	080076d9 	.word	0x080076d9
 8007668:	080076f9 	.word	0x080076f9
 800766c:	080076f9 	.word	0x080076f9
 8007670:	080076f9 	.word	0x080076f9
 8007674:	080076f9 	.word	0x080076f9
 8007678:	080076f9 	.word	0x080076f9
 800767c:	080076f9 	.word	0x080076f9
 8007680:	080076f9 	.word	0x080076f9
 8007684:	080076e1 	.word	0x080076e1
 8007688:	080076f9 	.word	0x080076f9
 800768c:	080076f9 	.word	0x080076f9
 8007690:	080076f9 	.word	0x080076f9
 8007694:	080076f9 	.word	0x080076f9
 8007698:	080076f9 	.word	0x080076f9
 800769c:	080076f9 	.word	0x080076f9
 80076a0:	080076f9 	.word	0x080076f9
 80076a4:	080076e9 	.word	0x080076e9
 80076a8:	080076f9 	.word	0x080076f9
 80076ac:	080076f9 	.word	0x080076f9
 80076b0:	080076f9 	.word	0x080076f9
 80076b4:	080076f9 	.word	0x080076f9
 80076b8:	080076f9 	.word	0x080076f9
 80076bc:	080076f9 	.word	0x080076f9
 80076c0:	080076f9 	.word	0x080076f9
 80076c4:	080076f1 	.word	0x080076f1
 80076c8:	2301      	movs	r3, #1
 80076ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ce:	e050      	b.n	8007772 <UART_SetConfig+0x7ae>
 80076d0:	2304      	movs	r3, #4
 80076d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d6:	e04c      	b.n	8007772 <UART_SetConfig+0x7ae>
 80076d8:	2308      	movs	r3, #8
 80076da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076de:	e048      	b.n	8007772 <UART_SetConfig+0x7ae>
 80076e0:	2310      	movs	r3, #16
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e6:	e044      	b.n	8007772 <UART_SetConfig+0x7ae>
 80076e8:	2320      	movs	r3, #32
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ee:	e040      	b.n	8007772 <UART_SetConfig+0x7ae>
 80076f0:	2340      	movs	r3, #64	@ 0x40
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f6:	e03c      	b.n	8007772 <UART_SetConfig+0x7ae>
 80076f8:	2380      	movs	r3, #128	@ 0x80
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fe:	e038      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a71      	ldr	r2, [pc, #452]	@ (80078cc <UART_SetConfig+0x908>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d130      	bne.n	800776c <UART_SetConfig+0x7a8>
 800770a:	4b6f      	ldr	r3, [pc, #444]	@ (80078c8 <UART_SetConfig+0x904>)
 800770c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800770e:	f003 0307 	and.w	r3, r3, #7
 8007712:	2b05      	cmp	r3, #5
 8007714:	d826      	bhi.n	8007764 <UART_SetConfig+0x7a0>
 8007716:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <UART_SetConfig+0x758>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	08007735 	.word	0x08007735
 8007720:	0800773d 	.word	0x0800773d
 8007724:	08007745 	.word	0x08007745
 8007728:	0800774d 	.word	0x0800774d
 800772c:	08007755 	.word	0x08007755
 8007730:	0800775d 	.word	0x0800775d
 8007734:	2302      	movs	r3, #2
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773a:	e01a      	b.n	8007772 <UART_SetConfig+0x7ae>
 800773c:	2304      	movs	r3, #4
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007742:	e016      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007744:	2308      	movs	r3, #8
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774a:	e012      	b.n	8007772 <UART_SetConfig+0x7ae>
 800774c:	2310      	movs	r3, #16
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007752:	e00e      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007754:	2320      	movs	r3, #32
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775a:	e00a      	b.n	8007772 <UART_SetConfig+0x7ae>
 800775c:	2340      	movs	r3, #64	@ 0x40
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007762:	e006      	b.n	8007772 <UART_SetConfig+0x7ae>
 8007764:	2380      	movs	r3, #128	@ 0x80
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776a:	e002      	b.n	8007772 <UART_SetConfig+0x7ae>
 800776c:	2380      	movs	r3, #128	@ 0x80
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a55      	ldr	r2, [pc, #340]	@ (80078cc <UART_SetConfig+0x908>)
 8007778:	4293      	cmp	r3, r2
 800777a:	f040 80f8 	bne.w	800796e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800777e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007782:	2b20      	cmp	r3, #32
 8007784:	dc46      	bgt.n	8007814 <UART_SetConfig+0x850>
 8007786:	2b02      	cmp	r3, #2
 8007788:	db75      	blt.n	8007876 <UART_SetConfig+0x8b2>
 800778a:	3b02      	subs	r3, #2
 800778c:	2b1e      	cmp	r3, #30
 800778e:	d872      	bhi.n	8007876 <UART_SetConfig+0x8b2>
 8007790:	a201      	add	r2, pc, #4	@ (adr r2, 8007798 <UART_SetConfig+0x7d4>)
 8007792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007796:	bf00      	nop
 8007798:	0800781b 	.word	0x0800781b
 800779c:	08007877 	.word	0x08007877
 80077a0:	08007823 	.word	0x08007823
 80077a4:	08007877 	.word	0x08007877
 80077a8:	08007877 	.word	0x08007877
 80077ac:	08007877 	.word	0x08007877
 80077b0:	08007833 	.word	0x08007833
 80077b4:	08007877 	.word	0x08007877
 80077b8:	08007877 	.word	0x08007877
 80077bc:	08007877 	.word	0x08007877
 80077c0:	08007877 	.word	0x08007877
 80077c4:	08007877 	.word	0x08007877
 80077c8:	08007877 	.word	0x08007877
 80077cc:	08007877 	.word	0x08007877
 80077d0:	08007843 	.word	0x08007843
 80077d4:	08007877 	.word	0x08007877
 80077d8:	08007877 	.word	0x08007877
 80077dc:	08007877 	.word	0x08007877
 80077e0:	08007877 	.word	0x08007877
 80077e4:	08007877 	.word	0x08007877
 80077e8:	08007877 	.word	0x08007877
 80077ec:	08007877 	.word	0x08007877
 80077f0:	08007877 	.word	0x08007877
 80077f4:	08007877 	.word	0x08007877
 80077f8:	08007877 	.word	0x08007877
 80077fc:	08007877 	.word	0x08007877
 8007800:	08007877 	.word	0x08007877
 8007804:	08007877 	.word	0x08007877
 8007808:	08007877 	.word	0x08007877
 800780c:	08007877 	.word	0x08007877
 8007810:	08007869 	.word	0x08007869
 8007814:	2b40      	cmp	r3, #64	@ 0x40
 8007816:	d02a      	beq.n	800786e <UART_SetConfig+0x8aa>
 8007818:	e02d      	b.n	8007876 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800781a:	f7fc fd35 	bl	8004288 <HAL_RCCEx_GetD3PCLK1Freq>
 800781e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007820:	e02f      	b.n	8007882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007826:	4618      	mov	r0, r3
 8007828:	f7fc fd44 	bl	80042b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800782c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007830:	e027      	b.n	8007882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007832:	f107 0318 	add.w	r3, r7, #24
 8007836:	4618      	mov	r0, r3
 8007838:	f7fc fe90 	bl	800455c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007840:	e01f      	b.n	8007882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007842:	4b21      	ldr	r3, [pc, #132]	@ (80078c8 <UART_SetConfig+0x904>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800784e:	4b1e      	ldr	r3, [pc, #120]	@ (80078c8 <UART_SetConfig+0x904>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	08db      	lsrs	r3, r3, #3
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	4a1d      	ldr	r2, [pc, #116]	@ (80078d0 <UART_SetConfig+0x90c>)
 800785a:	fa22 f303 	lsr.w	r3, r2, r3
 800785e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007860:	e00f      	b.n	8007882 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007862:	4b1b      	ldr	r3, [pc, #108]	@ (80078d0 <UART_SetConfig+0x90c>)
 8007864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007866:	e00c      	b.n	8007882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007868:	4b1a      	ldr	r3, [pc, #104]	@ (80078d4 <UART_SetConfig+0x910>)
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800786c:	e009      	b.n	8007882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800786e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007874:	e005      	b.n	8007882 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007880:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 81ee 	beq.w	8007c66 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788e:	4a12      	ldr	r2, [pc, #72]	@ (80078d8 <UART_SetConfig+0x914>)
 8007890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007894:	461a      	mov	r2, r3
 8007896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007898:	fbb3 f3f2 	udiv	r3, r3, r2
 800789c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	4613      	mov	r3, r2
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	4413      	add	r3, r2
 80078a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d305      	bcc.n	80078ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d910      	bls.n	80078dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80078c0:	e1d1      	b.n	8007c66 <UART_SetConfig+0xca2>
 80078c2:	bf00      	nop
 80078c4:	40011c00 	.word	0x40011c00
 80078c8:	58024400 	.word	0x58024400
 80078cc:	58000c00 	.word	0x58000c00
 80078d0:	03d09000 	.word	0x03d09000
 80078d4:	003d0900 	.word	0x003d0900
 80078d8:	08008364 	.word	0x08008364
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078de:	2200      	movs	r2, #0
 80078e0:	60bb      	str	r3, [r7, #8]
 80078e2:	60fa      	str	r2, [r7, #12]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e8:	4ac0      	ldr	r2, [pc, #768]	@ (8007bec <UART_SetConfig+0xc28>)
 80078ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2200      	movs	r2, #0
 80078f2:	603b      	str	r3, [r7, #0]
 80078f4:	607a      	str	r2, [r7, #4]
 80078f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078fe:	f7f8 fcf5 	bl	80002ec <__aeabi_uldivmod>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	f04f 0200 	mov.w	r2, #0
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	020b      	lsls	r3, r1, #8
 8007914:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007918:	0202      	lsls	r2, r0, #8
 800791a:	6979      	ldr	r1, [r7, #20]
 800791c:	6849      	ldr	r1, [r1, #4]
 800791e:	0849      	lsrs	r1, r1, #1
 8007920:	2000      	movs	r0, #0
 8007922:	460c      	mov	r4, r1
 8007924:	4605      	mov	r5, r0
 8007926:	eb12 0804 	adds.w	r8, r2, r4
 800792a:	eb43 0905 	adc.w	r9, r3, r5
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	469a      	mov	sl, r3
 8007936:	4693      	mov	fp, r2
 8007938:	4652      	mov	r2, sl
 800793a:	465b      	mov	r3, fp
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f8 fcd4 	bl	80002ec <__aeabi_uldivmod>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4613      	mov	r3, r2
 800794a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800794c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007952:	d308      	bcc.n	8007966 <UART_SetConfig+0x9a2>
 8007954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800795a:	d204      	bcs.n	8007966 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007962:	60da      	str	r2, [r3, #12]
 8007964:	e17f      	b.n	8007c66 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800796c:	e17b      	b.n	8007c66 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007976:	f040 80bd 	bne.w	8007af4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800797a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800797e:	2b20      	cmp	r3, #32
 8007980:	dc48      	bgt.n	8007a14 <UART_SetConfig+0xa50>
 8007982:	2b00      	cmp	r3, #0
 8007984:	db7b      	blt.n	8007a7e <UART_SetConfig+0xaba>
 8007986:	2b20      	cmp	r3, #32
 8007988:	d879      	bhi.n	8007a7e <UART_SetConfig+0xaba>
 800798a:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <UART_SetConfig+0x9cc>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	08007a1b 	.word	0x08007a1b
 8007994:	08007a23 	.word	0x08007a23
 8007998:	08007a7f 	.word	0x08007a7f
 800799c:	08007a7f 	.word	0x08007a7f
 80079a0:	08007a2b 	.word	0x08007a2b
 80079a4:	08007a7f 	.word	0x08007a7f
 80079a8:	08007a7f 	.word	0x08007a7f
 80079ac:	08007a7f 	.word	0x08007a7f
 80079b0:	08007a3b 	.word	0x08007a3b
 80079b4:	08007a7f 	.word	0x08007a7f
 80079b8:	08007a7f 	.word	0x08007a7f
 80079bc:	08007a7f 	.word	0x08007a7f
 80079c0:	08007a7f 	.word	0x08007a7f
 80079c4:	08007a7f 	.word	0x08007a7f
 80079c8:	08007a7f 	.word	0x08007a7f
 80079cc:	08007a7f 	.word	0x08007a7f
 80079d0:	08007a4b 	.word	0x08007a4b
 80079d4:	08007a7f 	.word	0x08007a7f
 80079d8:	08007a7f 	.word	0x08007a7f
 80079dc:	08007a7f 	.word	0x08007a7f
 80079e0:	08007a7f 	.word	0x08007a7f
 80079e4:	08007a7f 	.word	0x08007a7f
 80079e8:	08007a7f 	.word	0x08007a7f
 80079ec:	08007a7f 	.word	0x08007a7f
 80079f0:	08007a7f 	.word	0x08007a7f
 80079f4:	08007a7f 	.word	0x08007a7f
 80079f8:	08007a7f 	.word	0x08007a7f
 80079fc:	08007a7f 	.word	0x08007a7f
 8007a00:	08007a7f 	.word	0x08007a7f
 8007a04:	08007a7f 	.word	0x08007a7f
 8007a08:	08007a7f 	.word	0x08007a7f
 8007a0c:	08007a7f 	.word	0x08007a7f
 8007a10:	08007a71 	.word	0x08007a71
 8007a14:	2b40      	cmp	r3, #64	@ 0x40
 8007a16:	d02e      	beq.n	8007a76 <UART_SetConfig+0xab2>
 8007a18:	e031      	b.n	8007a7e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a1a:	f7fb fa4b 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8007a1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a20:	e033      	b.n	8007a8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a22:	f7fb fa5d 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 8007a26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a28:	e02f      	b.n	8007a8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fc fc40 	bl	80042b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a38:	e027      	b.n	8007a8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a3a:	f107 0318 	add.w	r3, r7, #24
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fc fd8c 	bl	800455c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a48:	e01f      	b.n	8007a8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a4a:	4b69      	ldr	r3, [pc, #420]	@ (8007bf0 <UART_SetConfig+0xc2c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a56:	4b66      	ldr	r3, [pc, #408]	@ (8007bf0 <UART_SetConfig+0xc2c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	08db      	lsrs	r3, r3, #3
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	4a64      	ldr	r2, [pc, #400]	@ (8007bf4 <UART_SetConfig+0xc30>)
 8007a62:	fa22 f303 	lsr.w	r3, r2, r3
 8007a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a68:	e00f      	b.n	8007a8a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007a6a:	4b62      	ldr	r3, [pc, #392]	@ (8007bf4 <UART_SetConfig+0xc30>)
 8007a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a6e:	e00c      	b.n	8007a8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a70:	4b61      	ldr	r3, [pc, #388]	@ (8007bf8 <UART_SetConfig+0xc34>)
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a74:	e009      	b.n	8007a8a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a7c:	e005      	b.n	8007a8a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007a88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 80ea 	beq.w	8007c66 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a96:	4a55      	ldr	r2, [pc, #340]	@ (8007bec <UART_SetConfig+0xc28>)
 8007a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007aa4:	005a      	lsls	r2, r3, #1
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	085b      	lsrs	r3, r3, #1
 8007aac:	441a      	add	r2, r3
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	2b0f      	cmp	r3, #15
 8007abc:	d916      	bls.n	8007aec <UART_SetConfig+0xb28>
 8007abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ac4:	d212      	bcs.n	8007aec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f023 030f 	bic.w	r3, r3, #15
 8007ace:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	085b      	lsrs	r3, r3, #1
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ae8:	60da      	str	r2, [r3, #12]
 8007aea:	e0bc      	b.n	8007c66 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007af2:	e0b8      	b.n	8007c66 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007af4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	dc4b      	bgt.n	8007b94 <UART_SetConfig+0xbd0>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f2c0 8087 	blt.w	8007c10 <UART_SetConfig+0xc4c>
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	f200 8084 	bhi.w	8007c10 <UART_SetConfig+0xc4c>
 8007b08:	a201      	add	r2, pc, #4	@ (adr r2, 8007b10 <UART_SetConfig+0xb4c>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b9b 	.word	0x08007b9b
 8007b14:	08007ba3 	.word	0x08007ba3
 8007b18:	08007c11 	.word	0x08007c11
 8007b1c:	08007c11 	.word	0x08007c11
 8007b20:	08007bab 	.word	0x08007bab
 8007b24:	08007c11 	.word	0x08007c11
 8007b28:	08007c11 	.word	0x08007c11
 8007b2c:	08007c11 	.word	0x08007c11
 8007b30:	08007bbb 	.word	0x08007bbb
 8007b34:	08007c11 	.word	0x08007c11
 8007b38:	08007c11 	.word	0x08007c11
 8007b3c:	08007c11 	.word	0x08007c11
 8007b40:	08007c11 	.word	0x08007c11
 8007b44:	08007c11 	.word	0x08007c11
 8007b48:	08007c11 	.word	0x08007c11
 8007b4c:	08007c11 	.word	0x08007c11
 8007b50:	08007bcb 	.word	0x08007bcb
 8007b54:	08007c11 	.word	0x08007c11
 8007b58:	08007c11 	.word	0x08007c11
 8007b5c:	08007c11 	.word	0x08007c11
 8007b60:	08007c11 	.word	0x08007c11
 8007b64:	08007c11 	.word	0x08007c11
 8007b68:	08007c11 	.word	0x08007c11
 8007b6c:	08007c11 	.word	0x08007c11
 8007b70:	08007c11 	.word	0x08007c11
 8007b74:	08007c11 	.word	0x08007c11
 8007b78:	08007c11 	.word	0x08007c11
 8007b7c:	08007c11 	.word	0x08007c11
 8007b80:	08007c11 	.word	0x08007c11
 8007b84:	08007c11 	.word	0x08007c11
 8007b88:	08007c11 	.word	0x08007c11
 8007b8c:	08007c11 	.word	0x08007c11
 8007b90:	08007c03 	.word	0x08007c03
 8007b94:	2b40      	cmp	r3, #64	@ 0x40
 8007b96:	d037      	beq.n	8007c08 <UART_SetConfig+0xc44>
 8007b98:	e03a      	b.n	8007c10 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b9a:	f7fb f98b 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8007b9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ba0:	e03c      	b.n	8007c1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ba2:	f7fb f99d 	bl	8002ee0 <HAL_RCC_GetPCLK2Freq>
 8007ba6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ba8:	e038      	b.n	8007c1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fc fb80 	bl	80042b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bb8:	e030      	b.n	8007c1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bba:	f107 0318 	add.w	r3, r7, #24
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fc fccc 	bl	800455c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc8:	e028      	b.n	8007c1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bca:	4b09      	ldr	r3, [pc, #36]	@ (8007bf0 <UART_SetConfig+0xc2c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d012      	beq.n	8007bfc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bd6:	4b06      	ldr	r3, [pc, #24]	@ (8007bf0 <UART_SetConfig+0xc2c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	08db      	lsrs	r3, r3, #3
 8007bdc:	f003 0303 	and.w	r3, r3, #3
 8007be0:	4a04      	ldr	r2, [pc, #16]	@ (8007bf4 <UART_SetConfig+0xc30>)
 8007be2:	fa22 f303 	lsr.w	r3, r2, r3
 8007be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007be8:	e018      	b.n	8007c1c <UART_SetConfig+0xc58>
 8007bea:	bf00      	nop
 8007bec:	08008364 	.word	0x08008364
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	03d09000 	.word	0x03d09000
 8007bf8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007bfc:	4b24      	ldr	r3, [pc, #144]	@ (8007c90 <UART_SetConfig+0xccc>)
 8007bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c00:	e00c      	b.n	8007c1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c02:	4b24      	ldr	r3, [pc, #144]	@ (8007c94 <UART_SetConfig+0xcd0>)
 8007c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c06:	e009      	b.n	8007c1c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c0e:	e005      	b.n	8007c1c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c1a:	bf00      	nop
    }

    if (pclk != 0U)
 8007c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d021      	beq.n	8007c66 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c26:	4a1c      	ldr	r2, [pc, #112]	@ (8007c98 <UART_SetConfig+0xcd4>)
 8007c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c30:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	085b      	lsrs	r3, r3, #1
 8007c3a:	441a      	add	r2, r3
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c44:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c48:	2b0f      	cmp	r3, #15
 8007c4a:	d909      	bls.n	8007c60 <UART_SetConfig+0xc9c>
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c52:	d205      	bcs.n	8007c60 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60da      	str	r2, [r3, #12]
 8007c5e:	e002      	b.n	8007c66 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c82:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3748      	adds	r7, #72	@ 0x48
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c90:	03d09000 	.word	0x03d09000
 8007c94:	003d0900 	.word	0x003d0900
 8007c98:	08008364 	.word	0x08008364

08007c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00a      	beq.n	8007cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0e:	f003 0304 	and.w	r3, r3, #4
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01a      	beq.n	8007db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d9a:	d10a      	bne.n	8007db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	605a      	str	r2, [r3, #4]
  }
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b098      	sub	sp, #96	@ 0x60
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007df0:	f7f9 fd6a 	bl	80018c8 <HAL_GetTick>
 8007df4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0308 	and.w	r3, r3, #8
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d12f      	bne.n	8007e64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f88e 	bl	8007f34 <UART_WaitOnFlagUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d022      	beq.n	8007e64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e32:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e6      	bne.n	8007e1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e063      	b.n	8007f2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0304 	and.w	r3, r3, #4
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d149      	bne.n	8007f06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f857 	bl	8007f34 <UART_WaitOnFlagUntilTimeout>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d03c      	beq.n	8007f06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	e853 3f00 	ldrex	r3, [r3]
 8007e98:	623b      	str	r3, [r7, #32]
   return(result);
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8007eac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e6      	bne.n	8007e8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	e853 3f00 	ldrex	r3, [r3]
 8007ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f023 0301 	bic.w	r3, r3, #1
 8007ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3308      	adds	r3, #8
 8007edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ede:	61fa      	str	r2, [r7, #28]
 8007ee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	69b9      	ldr	r1, [r7, #24]
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	617b      	str	r3, [r7, #20]
   return(result);
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e5      	bne.n	8007ebe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e012      	b.n	8007f2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3758      	adds	r7, #88	@ 0x58
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	603b      	str	r3, [r7, #0]
 8007f40:	4613      	mov	r3, r2
 8007f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f44:	e04f      	b.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f4c:	d04b      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f4e:	f7f9 fcbb 	bl	80018c8 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d302      	bcc.n	8007f64 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e04e      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d037      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b80      	cmp	r3, #128	@ 0x80
 8007f7a:	d034      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b40      	cmp	r3, #64	@ 0x40
 8007f80:	d031      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d110      	bne.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2208      	movs	r2, #8
 8007f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 f839 	bl	8008010 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e029      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fc0:	d111      	bne.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f81f 	bl	8008010 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e00f      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69da      	ldr	r2, [r3, #28]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	bf0c      	ite	eq
 8007ff6:	2301      	moveq	r3, #1
 8007ff8:	2300      	movne	r3, #0
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	79fb      	ldrb	r3, [r7, #7]
 8008000:	429a      	cmp	r2, r3
 8008002:	d0a0      	beq.n	8007f46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008010:	b480      	push	{r7}
 8008012:	b095      	sub	sp, #84	@ 0x54
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800802c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008036:	643b      	str	r3, [r7, #64]	@ 0x40
 8008038:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800803c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e6      	bne.n	8008018 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3308      	adds	r3, #8
 8008050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	e853 3f00 	ldrex	r3, [r3]
 8008058:	61fb      	str	r3, [r7, #28]
   return(result);
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	4b1e      	ldr	r3, [pc, #120]	@ (80080d8 <UART_EndRxTransfer+0xc8>)
 800805e:	4013      	ands	r3, r2
 8008060:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800806a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800806c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1e5      	bne.n	800804a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008082:	2b01      	cmp	r3, #1
 8008084:	d118      	bne.n	80080b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	60bb      	str	r3, [r7, #8]
   return(result);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f023 0310 	bic.w	r3, r3, #16
 800809a:	647b      	str	r3, [r7, #68]	@ 0x44
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6979      	ldr	r1, [r7, #20]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	613b      	str	r3, [r7, #16]
   return(result);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e6      	bne.n	8008086 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80080cc:	bf00      	nop
 80080ce:	3754      	adds	r7, #84	@ 0x54
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	effffffe 	.word	0xeffffffe

080080dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d101      	bne.n	80080f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80080ee:	2302      	movs	r3, #2
 80080f0:	e027      	b.n	8008142 <HAL_UARTEx_DisableFifoMode+0x66>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2224      	movs	r2, #36	@ 0x24
 80080fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0201 	bic.w	r2, r2, #1
 8008118:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008120:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2220      	movs	r2, #32
 8008134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800815e:	2b01      	cmp	r3, #1
 8008160:	d101      	bne.n	8008166 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008162:	2302      	movs	r3, #2
 8008164:	e02d      	b.n	80081c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2224      	movs	r2, #36	@ 0x24
 8008172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0201 	bic.w	r2, r2, #1
 800818c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	430a      	orrs	r2, r1
 80081a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f850 	bl	8008248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b084      	sub	sp, #16
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80081de:	2302      	movs	r3, #2
 80081e0:	e02d      	b.n	800823e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2224      	movs	r2, #36	@ 0x24
 80081ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0201 	bic.w	r2, r2, #1
 8008208:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f812 	bl	8008248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
	...

08008248 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008254:	2b00      	cmp	r3, #0
 8008256:	d108      	bne.n	800826a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008268:	e031      	b.n	80082ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800826a:	2310      	movs	r3, #16
 800826c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800826e:	2310      	movs	r3, #16
 8008270:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	0e5b      	lsrs	r3, r3, #25
 800827a:	b2db      	uxtb	r3, r3
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	0f5b      	lsrs	r3, r3, #29
 800828a:	b2db      	uxtb	r3, r3
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	7b3a      	ldrb	r2, [r7, #12]
 8008296:	4911      	ldr	r1, [pc, #68]	@ (80082dc <UARTEx_SetNbDataToProcess+0x94>)
 8008298:	5c8a      	ldrb	r2, [r1, r2]
 800829a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800829e:	7b3a      	ldrb	r2, [r7, #12]
 80082a0:	490f      	ldr	r1, [pc, #60]	@ (80082e0 <UARTEx_SetNbDataToProcess+0x98>)
 80082a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	7b7a      	ldrb	r2, [r7, #13]
 80082b4:	4909      	ldr	r1, [pc, #36]	@ (80082dc <UARTEx_SetNbDataToProcess+0x94>)
 80082b6:	5c8a      	ldrb	r2, [r1, r2]
 80082b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082bc:	7b7a      	ldrb	r2, [r7, #13]
 80082be:	4908      	ldr	r1, [pc, #32]	@ (80082e0 <UARTEx_SetNbDataToProcess+0x98>)
 80082c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	0800837c 	.word	0x0800837c
 80082e0:	08008384 	.word	0x08008384

080082e4 <memset>:
 80082e4:	4402      	add	r2, r0
 80082e6:	4603      	mov	r3, r0
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d100      	bne.n	80082ee <memset+0xa>
 80082ec:	4770      	bx	lr
 80082ee:	f803 1b01 	strb.w	r1, [r3], #1
 80082f2:	e7f9      	b.n	80082e8 <memset+0x4>

080082f4 <__libc_init_array>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	4d0d      	ldr	r5, [pc, #52]	@ (800832c <__libc_init_array+0x38>)
 80082f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008330 <__libc_init_array+0x3c>)
 80082fa:	1b64      	subs	r4, r4, r5
 80082fc:	10a4      	asrs	r4, r4, #2
 80082fe:	2600      	movs	r6, #0
 8008300:	42a6      	cmp	r6, r4
 8008302:	d109      	bne.n	8008318 <__libc_init_array+0x24>
 8008304:	4d0b      	ldr	r5, [pc, #44]	@ (8008334 <__libc_init_array+0x40>)
 8008306:	4c0c      	ldr	r4, [pc, #48]	@ (8008338 <__libc_init_array+0x44>)
 8008308:	f000 f818 	bl	800833c <_init>
 800830c:	1b64      	subs	r4, r4, r5
 800830e:	10a4      	asrs	r4, r4, #2
 8008310:	2600      	movs	r6, #0
 8008312:	42a6      	cmp	r6, r4
 8008314:	d105      	bne.n	8008322 <__libc_init_array+0x2e>
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	f855 3b04 	ldr.w	r3, [r5], #4
 800831c:	4798      	blx	r3
 800831e:	3601      	adds	r6, #1
 8008320:	e7ee      	b.n	8008300 <__libc_init_array+0xc>
 8008322:	f855 3b04 	ldr.w	r3, [r5], #4
 8008326:	4798      	blx	r3
 8008328:	3601      	adds	r6, #1
 800832a:	e7f2      	b.n	8008312 <__libc_init_array+0x1e>
 800832c:	08008394 	.word	0x08008394
 8008330:	08008394 	.word	0x08008394
 8008334:	08008394 	.word	0x08008394
 8008338:	08008398 	.word	0x08008398

0800833c <_init>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr

08008348 <_fini>:
 8008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834a:	bf00      	nop
 800834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834e:	bc08      	pop	{r3}
 8008350:	469e      	mov	lr, r3
 8008352:	4770      	bx	lr
