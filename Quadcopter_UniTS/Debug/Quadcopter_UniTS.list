
Quadcopter_UniTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008430  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080086e0  080086e0  000096e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008718  08008718  00009718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008720  08008720  00009720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008724  08008724  00009724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08008728  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000290  24000010  08008738  0000a010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002a0  08008738  0000a2a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000155a5  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025f7  00000000  00000000  0001f5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001078  00000000  00000000  00021be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ce9  00000000  00000000  00022c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000302cc  00000000  00000000  00023941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000147be  00000000  00000000  00053c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013eeca  00000000  00000000  000683cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a7295  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045d0  00000000  00000000  001a72d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001ab8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080086c8 	.word	0x080086c8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	080086c8 	.word	0x080086c8

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	rc_ref_euler[0] =  0;
 80005e4:	4b35      	ldr	r3, [pc, #212]	@ (80006bc <main+0xdc>)
 80005e6:	f04f 0200 	mov.w	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
	rc_ref_euler[1] =  0;
 80005ec:	4b33      	ldr	r3, [pc, #204]	@ (80006bc <main+0xdc>)
 80005ee:	f04f 0200 	mov.w	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
	rc_ref_euler[3] =  0;
 80005f4:	4b31      	ldr	r3, [pc, #196]	@ (80006bc <main+0xdc>)
 80005f6:	f04f 0200 	mov.w	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]

	rc_comm_temp[0] = 0;
 80005fc:	4b30      	ldr	r3, [pc, #192]	@ (80006c0 <main+0xe0>)
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	rc_comm_temp[1] = 0;
 8000604:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <main+0xe0>)
 8000606:	f04f 0200 	mov.w	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
	rc_comm_temp[2] = 0;
 800060c:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <main+0xe0>)
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	rc_comm_temp[3] = 0;
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <main+0xe0>)
 8000616:	f04f 0200 	mov.w	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f001 fb4e 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f85c 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 fc56 	bl	8000ed4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000628:	f000 fc00 	bl	8000e2c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800062c:	f000 fc4a 	bl	8000ec4 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000630:	f000 f8cc 	bl	80007cc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000634:	f000 f978 	bl	8000928 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000638:	f000 fa16 	bl	8000a68 <MX_TIM4_Init>
  MX_TIM5_Init();
 800063c:	f000 fab4 	bl	8000ba8 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000640:	f000 fb52 	bl	8000ce8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000644:	2100      	movs	r1, #0
 8000646:	481f      	ldr	r0, [pc, #124]	@ (80006c4 <main+0xe4>)
 8000648:	f004 fd54 	bl	80050f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800064c:	2104      	movs	r1, #4
 800064e:	481d      	ldr	r0, [pc, #116]	@ (80006c4 <main+0xe4>)
 8000650:	f004 fd50 	bl	80050f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000654:	2108      	movs	r1, #8
 8000656:	481b      	ldr	r0, [pc, #108]	@ (80006c4 <main+0xe4>)
 8000658:	f004 fd4c 	bl	80050f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800065c:	210c      	movs	r1, #12
 800065e:	4819      	ldr	r0, [pc, #100]	@ (80006c4 <main+0xe4>)
 8000660:	f004 fd48 	bl	80050f4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int count = 0;


  set_motor_pwm_zero(motor_pwm);
 8000664:	4818      	ldr	r0, [pc, #96]	@ (80006c8 <main+0xe8>)
 8000666:	f000 ff5f 	bl	8001528 <set_motor_pwm_zero>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
		  }
	*/


		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 800066a:	2104      	movs	r1, #4
 800066c:	4817      	ldr	r0, [pc, #92]	@ (80006cc <main+0xec>)
 800066e:	f004 feb1 	bl	80053d4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000672:	2100      	movs	r1, #0
 8000674:	4815      	ldr	r0, [pc, #84]	@ (80006cc <main+0xec>)
 8000676:	f005 f823 	bl	80056c0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 800067a:	2104      	movs	r1, #4
 800067c:	4814      	ldr	r0, [pc, #80]	@ (80006d0 <main+0xf0>)
 800067e:	f004 fea9 	bl	80053d4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000682:	2100      	movs	r1, #0
 8000684:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <main+0xf0>)
 8000686:	f005 f81b 	bl	80056c0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 800068a:	2104      	movs	r1, #4
 800068c:	4811      	ldr	r0, [pc, #68]	@ (80006d4 <main+0xf4>)
 800068e:	f004 fea1 	bl	80053d4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000692:	2100      	movs	r1, #0
 8000694:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <main+0xf4>)
 8000696:	f005 f813 	bl	80056c0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 800069a:	2104      	movs	r1, #4
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <main+0xf8>)
 800069e:	f004 fe99 	bl	80053d4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80006a2:	2100      	movs	r1, #0
 80006a4:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <main+0xf8>)
 80006a6:	f005 f80b 	bl	80056c0 <HAL_TIM_IC_Start_IT>

		  get_target_euler(rc_ref_euler, rc_comm_temp);
 80006aa:	4905      	ldr	r1, [pc, #20]	@ (80006c0 <main+0xe0>)
 80006ac:	4803      	ldr	r0, [pc, #12]	@ (80006bc <main+0xdc>)
 80006ae:	f000 ff55 	bl	800155c <get_target_euler>
		   * ---------------
		   * PID
		   * ---------------
		   */

		  set_motor_pwm(motor_pwm);
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <main+0xe8>)
 80006b4:	f000 fec2 	bl	800143c <set_motor_pwm>
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80006b8:	bf00      	nop
 80006ba:	e7d6      	b.n	800066a <main+0x8a>
 80006bc:	2400024c 	.word	0x2400024c
 80006c0:	2400023c 	.word	0x2400023c
 80006c4:	2400002c 	.word	0x2400002c
 80006c8:	24000258 	.word	0x24000258
 80006cc:	24000078 	.word	0x24000078
 80006d0:	240000c4 	.word	0x240000c4
 80006d4:	24000110 	.word	0x24000110
 80006d8:	2400015c 	.word	0x2400015c

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09c      	sub	sp, #112	@ 0x70
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e6:	224c      	movs	r2, #76	@ 0x4c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f007 ffc0 	bl	8008670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2220      	movs	r2, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 ffba 	bl	8008670 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006fc:	4b31      	ldr	r3, [pc, #196]	@ (80007c4 <SystemClock_Config+0xe8>)
 80006fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000702:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000706:	2004      	movs	r0, #4
 8000708:	f001 fe44 	bl	8002394 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800070c:	2300      	movs	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4b2d      	ldr	r3, [pc, #180]	@ (80007c8 <SystemClock_Config+0xec>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a2c      	ldr	r2, [pc, #176]	@ (80007c8 <SystemClock_Config+0xec>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b2a      	ldr	r3, [pc, #168]	@ (80007c8 <SystemClock_Config+0xec>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000728:	bf00      	nop
 800072a:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <SystemClock_Config+0xec>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000736:	d1f8      	bne.n	800072a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000738:	2321      	movs	r3, #33	@ 0x21
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000742:	2301      	movs	r3, #1
 8000744:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	2302      	movs	r3, #2
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000752:	2325      	movs	r3, #37	@ 0x25
 8000754:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075a:	2304      	movs	r3, #4
 800075c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000762:	230c      	movs	r3, #12
 8000764:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000766:	2300      	movs	r3, #0
 8000768:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fe67 	bl	8002448 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000780:	f000 fe56 	bl	8001430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	233f      	movs	r3, #63	@ 0x3f
 8000786:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2303      	movs	r3, #3
 800078a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000794:	2340      	movs	r3, #64	@ 0x40
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000798:	2340      	movs	r3, #64	@ 0x40
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800079c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a2:	2340      	movs	r3, #64	@ 0x40
 80007a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2103      	movs	r1, #3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fa7e 	bl	8002cac <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xde>
  {
    Error_Handler();
 80007b6:	f000 fe3b 	bl	8001430 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3770      	adds	r7, #112	@ 0x70
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	58024400 	.word	0x58024400
 80007c8:	58024800 	.word	0x58024800

080007cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09c      	sub	sp, #112	@ 0x70
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2234      	movs	r2, #52	@ 0x34
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f007 ff32 	bl	8008670 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800080c:	4b44      	ldr	r3, [pc, #272]	@ (8000920 <MX_TIM1_Init+0x154>)
 800080e:	4a45      	ldr	r2, [pc, #276]	@ (8000924 <MX_TIM1_Init+0x158>)
 8000810:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 8000812:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <MX_TIM1_Init+0x154>)
 8000814:	f240 227f 	movw	r2, #639	@ 0x27f
 8000818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b41      	ldr	r3, [pc, #260]	@ (8000920 <MX_TIM1_Init+0x154>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000820:	4b3f      	ldr	r3, [pc, #252]	@ (8000920 <MX_TIM1_Init+0x154>)
 8000822:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000826:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b3d      	ldr	r3, [pc, #244]	@ (8000920 <MX_TIM1_Init+0x154>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800082e:	4b3c      	ldr	r3, [pc, #240]	@ (8000920 <MX_TIM1_Init+0x154>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000834:	4b3a      	ldr	r3, [pc, #232]	@ (8000920 <MX_TIM1_Init+0x154>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800083a:	4839      	ldr	r0, [pc, #228]	@ (8000920 <MX_TIM1_Init+0x154>)
 800083c:	f004 fba2 	bl	8004f84 <HAL_TIM_Base_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000846:	f000 fdf3 	bl	8001430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000850:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000854:	4619      	mov	r1, r3
 8000856:	4832      	ldr	r0, [pc, #200]	@ (8000920 <MX_TIM1_Init+0x154>)
 8000858:	f005 fbf8 	bl	800604c <HAL_TIM_ConfigClockSource>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000862:	f000 fde5 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000866:	482e      	ldr	r0, [pc, #184]	@ (8000920 <MX_TIM1_Init+0x154>)
 8000868:	f004 fbe3 	bl	8005032 <HAL_TIM_PWM_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000872:	f000 fddd 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000882:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000886:	4619      	mov	r1, r3
 8000888:	4825      	ldr	r0, [pc, #148]	@ (8000920 <MX_TIM1_Init+0x154>)
 800088a:	f006 fbd9 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000894:	f000 fdcc 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000898:	2360      	movs	r3, #96	@ 0x60
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008b8:	2200      	movs	r2, #0
 80008ba:	4619      	mov	r1, r3
 80008bc:	4818      	ldr	r0, [pc, #96]	@ (8000920 <MX_TIM1_Init+0x154>)
 80008be:	f005 fab1 	bl	8005e24 <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80008c8:	f000 fdb2 	bl	8001430 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	4619      	mov	r1, r3
 8000900:	4807      	ldr	r0, [pc, #28]	@ (8000920 <MX_TIM1_Init+0x154>)
 8000902:	f006 fc2b 	bl	800715c <HAL_TIMEx_ConfigBreakDeadTime>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800090c:	f000 fd90 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000910:	4803      	ldr	r0, [pc, #12]	@ (8000920 <MX_TIM1_Init+0x154>)
 8000912:	f001 f833 	bl	800197c <HAL_TIM_MspPostInit>

}
 8000916:	bf00      	nop
 8000918:	3770      	adds	r7, #112	@ 0x70
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2400002c 	.word	0x2400002c
 8000924:	40010000 	.word	0x40010000

08000928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b090      	sub	sp, #64	@ 0x40
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000964:	4b3e      	ldr	r3, [pc, #248]	@ (8000a60 <MX_TIM3_Init+0x138>)
 8000966:	4a3f      	ldr	r2, [pc, #252]	@ (8000a64 <MX_TIM3_Init+0x13c>)
 8000968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 800096a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a60 <MX_TIM3_Init+0x138>)
 800096c:	f240 227f 	movw	r2, #639	@ 0x27f
 8000970:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b3b      	ldr	r3, [pc, #236]	@ (8000a60 <MX_TIM3_Init+0x138>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000978:	4b39      	ldr	r3, [pc, #228]	@ (8000a60 <MX_TIM3_Init+0x138>)
 800097a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800097e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b37      	ldr	r3, [pc, #220]	@ (8000a60 <MX_TIM3_Init+0x138>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b36      	ldr	r3, [pc, #216]	@ (8000a60 <MX_TIM3_Init+0x138>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800098c:	4834      	ldr	r0, [pc, #208]	@ (8000a60 <MX_TIM3_Init+0x138>)
 800098e:	f004 faf9 	bl	8004f84 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000998:	f000 fd4a 	bl	8001430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009a6:	4619      	mov	r1, r3
 80009a8:	482d      	ldr	r0, [pc, #180]	@ (8000a60 <MX_TIM3_Init+0x138>)
 80009aa:	f005 fb4f 	bl	800604c <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80009b4:	f000 fd3c 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80009b8:	4829      	ldr	r0, [pc, #164]	@ (8000a60 <MX_TIM3_Init+0x138>)
 80009ba:	f004 fca9 	bl	8005310 <HAL_TIM_IC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80009c4:	f000 fd34 	bl	8001430 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80009c8:	2304      	movs	r3, #4
 80009ca:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80009cc:	2350      	movs	r3, #80	@ 0x50
 80009ce:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	481f      	ldr	r0, [pc, #124]	@ (8000a60 <MX_TIM3_Init+0x138>)
 80009e4:	f005 fc2a 	bl	800623c <HAL_TIM_SlaveConfigSynchro>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80009ee:	f000 fd1f 	bl	8001430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009f6:	2301      	movs	r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2200      	movs	r2, #0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4815      	ldr	r0, [pc, #84]	@ (8000a60 <MX_TIM3_Init+0x138>)
 8000a0c:	f005 f96d 	bl	8005cea <HAL_TIM_IC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8000a16:	f000 fd0b 	bl	8001430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2204      	movs	r2, #4
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <MX_TIM3_Init+0x138>)
 8000a2c:	f005 f95d 	bl	8005cea <HAL_TIM_IC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8000a36:	f000 fcfb 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <MX_TIM3_Init+0x138>)
 8000a48:	f006 fafa 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 8000a52:	f000 fced 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3740      	adds	r7, #64	@ 0x40
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	24000078 	.word	0x24000078
 8000a64:	40000400 	.word	0x40000400

08000a68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b090      	sub	sp, #64	@ 0x40
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ba4 <MX_TIM4_Init+0x13c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8000aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000aac:	f240 227f 	movw	r2, #639	@ 0x27f
 8000ab0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ab8:	4b39      	ldr	r3, [pc, #228]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000aba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000abe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b37      	ldr	r3, [pc, #220]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b36      	ldr	r3, [pc, #216]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000acc:	4834      	ldr	r0, [pc, #208]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000ace:	f004 fa59 	bl	8004f84 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000ad8:	f000 fcaa 	bl	8001430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	482d      	ldr	r0, [pc, #180]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000aea:	f005 faaf 	bl	800604c <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000af4:	f000 fc9c 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000af8:	4829      	ldr	r0, [pc, #164]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000afa:	f004 fc09 	bl	8005310 <HAL_TIM_IC_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000b04:	f000 fc94 	bl	8001430 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b0c:	2350      	movs	r3, #80	@ 0x50
 8000b0e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	481f      	ldr	r0, [pc, #124]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000b24:	f005 fb8a 	bl	800623c <HAL_TIM_SlaveConfigSynchro>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000b2e:	f000 fc7f 	bl	8001430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b36:	2301      	movs	r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4815      	ldr	r0, [pc, #84]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000b4c:	f005 f8cd 	bl	8005cea <HAL_TIM_IC_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8000b56:	f000 fc6b 	bl	8001430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2204      	movs	r2, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000b6c:	f005 f8bd 	bl	8005cea <HAL_TIM_IC_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8000b76:	f000 fc5b 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <MX_TIM4_Init+0x138>)
 8000b88:	f006 fa5a 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 8000b92:	f000 fc4d 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	3740      	adds	r7, #64	@ 0x40
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	240000c4 	.word	0x240000c4
 8000ba4:	40000800 	.word	0x40000800

08000ba8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b090      	sub	sp, #64	@ 0x40
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000be4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000be6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ce4 <MX_TIM5_Init+0x13c>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 639;
 8000bea:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000bec:	f240 227f 	movw	r2, #639	@ 0x27f
 8000bf0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000bf8:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000bfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bfe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b37      	ldr	r3, [pc, #220]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b36      	ldr	r3, [pc, #216]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c0c:	4834      	ldr	r0, [pc, #208]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000c0e:	f004 f9b9 	bl	8004f84 <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000c18:	f000 fc0a 	bl	8001430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c26:	4619      	mov	r1, r3
 8000c28:	482d      	ldr	r0, [pc, #180]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000c2a:	f005 fa0f 	bl	800604c <HAL_TIM_ConfigClockSource>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000c34:	f000 fbfc 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000c38:	4829      	ldr	r0, [pc, #164]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000c3a:	f004 fb69 	bl	8005310 <HAL_TIM_IC_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000c44:	f000 fbf4 	bl	8001430 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c4c:	2350      	movs	r3, #80	@ 0x50
 8000c4e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	481f      	ldr	r0, [pc, #124]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000c64:	f005 faea 	bl	800623c <HAL_TIM_SlaveConfigSynchro>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8000c6e:	f000 fbdf 	bl	8001430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c76:	2301      	movs	r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2200      	movs	r2, #0
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4815      	ldr	r0, [pc, #84]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000c8c:	f005 f82d 	bl	8005cea <HAL_TIM_IC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8000c96:	f000 fbcb 	bl	8001430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000cac:	f005 f81d 	bl	8005cea <HAL_TIM_IC_ConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 8000cb6:	f000 fbbb 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	@ (8000ce0 <MX_TIM5_Init+0x138>)
 8000cc8:	f006 f9ba 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM5_Init+0x12e>
  {
    Error_Handler();
 8000cd2:	f000 fbad 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3740      	adds	r7, #64	@ 0x40
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	24000110 	.word	0x24000110
 8000ce4:	40000c00 	.word	0x40000c00

08000ce8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b090      	sub	sp, #64	@ 0x40
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d24:	4b3f      	ldr	r3, [pc, #252]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000d26:	4a40      	ldr	r2, [pc, #256]	@ (8000e28 <MX_TIM15_Init+0x140>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000d2c:	f240 227f 	movw	r2, #639	@ 0x27f
 8000d30:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b3c      	ldr	r3, [pc, #240]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000d38:	4b3a      	ldr	r3, [pc, #232]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000d3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d3e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b38      	ldr	r3, [pc, #224]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d46:	4b37      	ldr	r3, [pc, #220]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d52:	4834      	ldr	r0, [pc, #208]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000d54:	f004 f916 	bl	8004f84 <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8000d5e:	f000 fb67 	bl	8001430 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d66:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	482d      	ldr	r0, [pc, #180]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000d70:	f005 f96c 	bl	800604c <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 8000d7a:	f000 fb59 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000d7e:	4829      	ldr	r0, [pc, #164]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000d80:	f004 fac6 	bl	8005310 <HAL_TIM_IC_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8000d8a:	f000 fb51 	bl	8001430 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d92:	2350      	movs	r3, #80	@ 0x50
 8000d94:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	481e      	ldr	r0, [pc, #120]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000daa:	f005 fa47 	bl	800623c <HAL_TIM_SlaveConfigSynchro>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000db4:	f000 fb3c 	bl	8001430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4814      	ldr	r0, [pc, #80]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000dd2:	f004 ff8a 	bl	8005cea <HAL_TIM_IC_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8000ddc:	f000 fb28 	bl	8001430 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000de0:	2302      	movs	r3, #2
 8000de2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000de4:	2302      	movs	r3, #2
 8000de6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2204      	movs	r2, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000df2:	f004 ff7a 	bl	8005cea <HAL_TIM_IC_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 8000dfc:	f000 fb18 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_TIM15_Init+0x13c>)
 8000e0e:	f006 f917 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 8000e18:	f000 fb0a 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3740      	adds	r7, #64	@ 0x40
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2400015c 	.word	0x2400015c
 8000e28:	40014000 	.word	0x40014000

08000e2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e32:	4a23      	ldr	r2, [pc, #140]	@ (8000ec0 <MX_USART3_UART_Init+0x94>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e36:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e68:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e74:	4811      	ldr	r0, [pc, #68]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e76:	f006 fa1b 	bl	80072b0 <HAL_UART_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e80:	f000 fad6 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e84:	2100      	movs	r1, #0
 8000e86:	480d      	ldr	r0, [pc, #52]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e88:	f007 fb27 	bl	80084da <HAL_UARTEx_SetTxFifoThreshold>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e92:	f000 facd 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	4808      	ldr	r0, [pc, #32]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000e9a:	f007 fb5c 	bl	8008556 <HAL_UARTEx_SetRxFifoThreshold>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ea4:	f000 fac4 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <MX_USART3_UART_Init+0x90>)
 8000eaa:	f007 fadd 	bl	8008468 <HAL_UARTEx_DisableFifoMode>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 fabc 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	240001a8 	.word	0x240001a8
 8000ec0:	40004800 	.word	0x40004800

08000ec4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08e      	sub	sp, #56	@ 0x38
 8000ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eea:	4b80      	ldr	r3, [pc, #512]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000eec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef0:	4a7e      	ldr	r2, [pc, #504]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000efa:	4b7c      	ldr	r3, [pc, #496]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000efc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	623b      	str	r3, [r7, #32]
 8000f06:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f08:	4b78      	ldr	r3, [pc, #480]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f0e:	4a77      	ldr	r2, [pc, #476]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f18:	4b74      	ldr	r3, [pc, #464]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f26:	4b71      	ldr	r3, [pc, #452]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f2c:	4a6f      	ldr	r2, [pc, #444]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f36:	4b6d      	ldr	r3, [pc, #436]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f44:	4b69      	ldr	r3, [pc, #420]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f4a:	4a68      	ldr	r2, [pc, #416]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f50:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f54:	4b65      	ldr	r3, [pc, #404]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f56:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b62      	ldr	r3, [pc, #392]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f68:	4a60      	ldr	r2, [pc, #384]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f72:	4b5e      	ldr	r3, [pc, #376]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b5a      	ldr	r3, [pc, #360]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f86:	4a59      	ldr	r2, [pc, #356]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f90:	4b56      	ldr	r3, [pc, #344]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000f92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9e:	4b53      	ldr	r3, [pc, #332]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000fa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa4:	4a51      	ldr	r2, [pc, #324]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fae:	4b4f      	ldr	r3, [pc, #316]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000fb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000fbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fcc:	4b47      	ldr	r3, [pc, #284]	@ (80010ec <MX_GPIO_Init+0x218>)
 8000fce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe0:	4843      	ldr	r0, [pc, #268]	@ (80010f0 <MX_GPIO_Init+0x21c>)
 8000fe2:	f001 f9bd 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000fec:	4841      	ldr	r0, [pc, #260]	@ (80010f4 <MX_GPIO_Init+0x220>)
 8000fee:	f001 f9b7 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4840      	ldr	r0, [pc, #256]	@ (80010f8 <MX_GPIO_Init+0x224>)
 8000ff8:	f001 f9b2 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100e:	4619      	mov	r1, r3
 8001010:	483a      	ldr	r0, [pc, #232]	@ (80010fc <MX_GPIO_Init+0x228>)
 8001012:	f000 fff5 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	4830      	ldr	r0, [pc, #192]	@ (80010f0 <MX_GPIO_Init+0x21c>)
 8001030:	f000 ffe6 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001034:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104a:	4619      	mov	r1, r3
 800104c:	4829      	ldr	r0, [pc, #164]	@ (80010f4 <MX_GPIO_Init+0x220>)
 800104e:	f000 ffd7 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001052:	2380      	movs	r3, #128	@ 0x80
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001056:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001064:	4619      	mov	r1, r3
 8001066:	4826      	ldr	r0, [pc, #152]	@ (8001100 <MX_GPIO_Init+0x22c>)
 8001068:	f000 ffca 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800106c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	4820      	ldr	r0, [pc, #128]	@ (8001104 <MX_GPIO_Init+0x230>)
 8001082:	f000 ffbd 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001098:	230a      	movs	r3, #10
 800109a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a0:	4619      	mov	r1, r3
 80010a2:	4818      	ldr	r0, [pc, #96]	@ (8001104 <MX_GPIO_Init+0x230>)
 80010a4:	f000 ffac 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80010a8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	4810      	ldr	r0, [pc, #64]	@ (8001104 <MX_GPIO_Init+0x230>)
 80010c2:	f000 ff9d 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c6:	2302      	movs	r3, #2
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	4806      	ldr	r0, [pc, #24]	@ (80010f8 <MX_GPIO_Init+0x224>)
 80010de:	f000 ff8f 	bl	8002000 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e2:	bf00      	nop
 80010e4:	3738      	adds	r7, #56	@ 0x38
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	58024400 	.word	0x58024400
 80010f0:	58021400 	.word	0x58021400
 80010f4:	58020400 	.word	0x58020400
 80010f8:	58021000 	.word	0x58021000
 80010fc:	58020800 	.word	0x58020800
 8001100:	58021800 	.word	0x58021800
 8001104:	58020000 	.word	0x58020000

08001108 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4ab2      	ldr	r2, [pc, #712]	@ (80013e0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d155      	bne.n	80011c6 <HAL_TIM_IC_CaptureCallback+0xbe>
    {

        cycle_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800111a:	2100      	movs	r1, #0
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f005 f8cf 	bl	80062c0 <HAL_TIM_ReadCapturedValue>
 8001122:	4603      	mov	r3, r0
 8001124:	4aaf      	ldr	r2, [pc, #700]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8001126:	6013      	str	r3, [r2, #0]
        period_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001128:	2104      	movs	r1, #4
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f005 f8c8 	bl	80062c0 <HAL_TIM_ReadCapturedValue>
 8001130:	4602      	mov	r2, r0
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	461a      	mov	r2, r3
 800113c:	4baa      	ldr	r3, [pc, #680]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800113e:	601a      	str	r2, [r3, #0]
    	if (cycle_rc_0 > 1990 && cycle_rc_0 < 2010 && period_rc_0 > 0 && cycle_rc_0 > period_rc_0 ) {
 8001140:	4ba8      	ldr	r3, [pc, #672]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001148:	4293      	cmp	r3, r2
 800114a:	d93c      	bls.n	80011c6 <HAL_TIM_IC_CaptureCallback+0xbe>
 800114c:	4ba5      	ldr	r3, [pc, #660]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001154:	4293      	cmp	r3, r2
 8001156:	d836      	bhi.n	80011c6 <HAL_TIM_IC_CaptureCallback+0xbe>
 8001158:	4ba3      	ldr	r3, [pc, #652]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d032      	beq.n	80011c6 <HAL_TIM_IC_CaptureCallback+0xbe>
 8001160:	4ba0      	ldr	r3, [pc, #640]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4ba0      	ldr	r3, [pc, #640]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d92c      	bls.n	80011c6 <HAL_TIM_IC_CaptureCallback+0xbe>
    		channel_mag_0 = (float) period_rc_0 / (float) cycle_rc_0;
 800116c:	4b9e      	ldr	r3, [pc, #632]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001178:	4b9a      	ldr	r3, [pc, #616]	@ (80013e4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001188:	4b98      	ldr	r3, [pc, #608]	@ (80013ec <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
    		rc_comm_temp[0] = (channel_mag_0 - 0.5) * 2 * RC_FULLSCALE;
 800118e:	4b97      	ldr	r3, [pc, #604]	@ (80013ec <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001198:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800119c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80011a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80011a4:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 80013d8 <HAL_TIM_IC_CaptureCallback+0x2d0>
 80011a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011b0:	4b8f      	ldr	r3, [pc, #572]	@ (80013f0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
    		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80011b6:	2100      	movs	r1, #0
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f004 fbd1 	bl	8005960 <HAL_TIM_IC_Stop_IT>
    		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80011be:	2104      	movs	r1, #4
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f004 fa0b 	bl	80055dc <HAL_TIM_IC_Stop>

    	}
    }

    if (htim->Instance == TIM4)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a8a      	ldr	r2, [pc, #552]	@ (80013f4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d155      	bne.n	800127c <HAL_TIM_IC_CaptureCallback+0x174>
    {

            cycle_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80011d0:	2100      	movs	r1, #0
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f005 f874 	bl	80062c0 <HAL_TIM_ReadCapturedValue>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a87      	ldr	r2, [pc, #540]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80011dc:	6013      	str	r3, [r2, #0]
            period_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80011de:	2104      	movs	r1, #4
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f005 f86d 	bl	80062c0 <HAL_TIM_ReadCapturedValue>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b82      	ldr	r3, [pc, #520]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80011f4:	601a      	str	r2, [r3, #0]
        	if (cycle_rc_1 > 1990 && cycle_rc_1 < 2010 && period_rc_1 > 0 && cycle_rc_1 > period_rc_1) {
 80011f6:	4b80      	ldr	r3, [pc, #512]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80011fe:	4293      	cmp	r3, r2
 8001200:	d93c      	bls.n	800127c <HAL_TIM_IC_CaptureCallback+0x174>
 8001202:	4b7d      	ldr	r3, [pc, #500]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 800120a:	4293      	cmp	r3, r2
 800120c:	d836      	bhi.n	800127c <HAL_TIM_IC_CaptureCallback+0x174>
 800120e:	4b7b      	ldr	r3, [pc, #492]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d032      	beq.n	800127c <HAL_TIM_IC_CaptureCallback+0x174>
 8001216:	4b78      	ldr	r3, [pc, #480]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b78      	ldr	r3, [pc, #480]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d92c      	bls.n	800127c <HAL_TIM_IC_CaptureCallback+0x174>
        		channel_mag_1 = (float) period_rc_1 / (float) cycle_rc_1;
 8001222:	4b76      	ldr	r3, [pc, #472]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800122e:	4b72      	ldr	r3, [pc, #456]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800123a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123e:	4b70      	ldr	r3, [pc, #448]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001240:	edc3 7a00 	vstr	s15, [r3]
        		rc_comm_temp[1] = (channel_mag_1 - 0.5) * 2 * RC_FULLSCALE;
 8001244:	4b6e      	ldr	r3, [pc, #440]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800124e:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001252:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001256:	ee37 7b07 	vadd.f64	d7, d7, d7
 800125a:	ed9f 6b5f 	vldr	d6, [pc, #380]	@ 80013d8 <HAL_TIM_IC_CaptureCallback+0x2d0>
 800125e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001262:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001266:	4b62      	ldr	r3, [pc, #392]	@ (80013f0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8001268:	edc3 7a01 	vstr	s15, [r3, #4]
        		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800126c:	2100      	movs	r1, #0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f004 fb76 	bl	8005960 <HAL_TIM_IC_Stop_IT>
        		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001274:	2104      	movs	r1, #4
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f004 f9b0 	bl	80055dc <HAL_TIM_IC_Stop>

        	}
    }

    if (htim->Instance == TIM5)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a60      	ldr	r2, [pc, #384]	@ (8001404 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d155      	bne.n	8001332 <HAL_TIM_IC_CaptureCallback+0x22a>
            {

                cycle_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001286:	2100      	movs	r1, #0
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f005 f819 	bl	80062c0 <HAL_TIM_ReadCapturedValue>
 800128e:	4603      	mov	r3, r0
 8001290:	4a5d      	ldr	r2, [pc, #372]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001292:	6013      	str	r3, [r2, #0]
                period_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001294:	2104      	movs	r1, #4
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f005 f812 	bl	80062c0 <HAL_TIM_ReadCapturedValue>
 800129c:	4602      	mov	r2, r0
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b58      	ldr	r3, [pc, #352]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x304>)
 80012aa:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_2 > 1990 && cycle_rc_2 < 2010 && period_rc_2 > 0 && cycle_rc_2 > period_rc_2) {
 80012ac:	4b56      	ldr	r3, [pc, #344]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x300>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d93c      	bls.n	8001332 <HAL_TIM_IC_CaptureCallback+0x22a>
 80012b8:	4b53      	ldr	r3, [pc, #332]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x300>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d836      	bhi.n	8001332 <HAL_TIM_IC_CaptureCallback+0x22a>
 80012c4:	4b51      	ldr	r3, [pc, #324]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x304>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d032      	beq.n	8001332 <HAL_TIM_IC_CaptureCallback+0x22a>
 80012cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x300>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b4e      	ldr	r3, [pc, #312]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x304>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d92c      	bls.n	8001332 <HAL_TIM_IC_CaptureCallback+0x22a>
            		channel_mag_2 = (float) period_rc_2 / (float) cycle_rc_2;
 80012d8:	4b4c      	ldr	r3, [pc, #304]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x304>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012e4:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x300>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f4:	4b46      	ldr	r3, [pc, #280]	@ (8001410 <HAL_TIM_IC_CaptureCallback+0x308>)
 80012f6:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp[2] = (channel_mag_2 - 0.5) * 2 * RC_FULLSCALE;
 80012fa:	4b45      	ldr	r3, [pc, #276]	@ (8001410 <HAL_TIM_IC_CaptureCallback+0x308>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001304:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001308:	ee37 7b46 	vsub.f64	d7, d7, d6
 800130c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001310:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80013d8 <HAL_TIM_IC_CaptureCallback+0x2d0>
 8001314:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001318:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800131c:	4b34      	ldr	r3, [pc, #208]	@ (80013f0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 800131e:	edc3 7a02 	vstr	s15, [r3, #8]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001322:	2100      	movs	r1, #0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f004 fb1b 	bl	8005960 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 800132a:	2104      	movs	r1, #4
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f004 f955 	bl	80055dc <HAL_TIM_IC_Stop>

            	}
            }
    if (htim->Instance == TIM15)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a37      	ldr	r2, [pc, #220]	@ (8001414 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d175      	bne.n	8001428 <HAL_TIM_IC_CaptureCallback+0x320>
            {

                cycle_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800133c:	2100      	movs	r1, #0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f004 ffbe 	bl	80062c0 <HAL_TIM_ReadCapturedValue>
 8001344:	4603      	mov	r3, r0
 8001346:	4a34      	ldr	r2, [pc, #208]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001348:	6013      	str	r3, [r2, #0]
                period_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 800134a:	2104      	movs	r1, #4
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f004 ffb7 	bl	80062c0 <HAL_TIM_ReadCapturedValue>
 8001352:	4602      	mov	r2, r0
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	461a      	mov	r2, r3
 800135e:	4b2f      	ldr	r3, [pc, #188]	@ (800141c <HAL_TIM_IC_CaptureCallback+0x314>)
 8001360:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_3 > 1990 && cycle_rc_3 < 2010 && period_rc_3 > 0 && cycle_rc_3 > period_rc_3) {
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800136a:	4293      	cmp	r3, r2
 800136c:	d95c      	bls.n	8001428 <HAL_TIM_IC_CaptureCallback+0x320>
 800136e:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001376:	4293      	cmp	r3, r2
 8001378:	d856      	bhi.n	8001428 <HAL_TIM_IC_CaptureCallback+0x320>
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <HAL_TIM_IC_CaptureCallback+0x314>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d052      	beq.n	8001428 <HAL_TIM_IC_CaptureCallback+0x320>
 8001382:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <HAL_TIM_IC_CaptureCallback+0x314>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d94c      	bls.n	8001428 <HAL_TIM_IC_CaptureCallback+0x320>
            		channel_mag_3 = (float) period_rc_3 / (float) cycle_rc_3;
 800138e:	4b23      	ldr	r3, [pc, #140]	@ (800141c <HAL_TIM_IC_CaptureCallback+0x314>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x310>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x318>)
 80013ac:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp[3] =  channel_mag_3 * RC_FULLSCALE;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x318>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001424 <HAL_TIM_IC_CaptureCallback+0x31c>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80013c0:	edc3 7a03 	vstr	s15, [r3, #12]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80013c4:	2100      	movs	r1, #0
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f004 faca 	bl	8005960 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80013cc:	2104      	movs	r1, #4
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f004 f904 	bl	80055dc <HAL_TIM_IC_Stop>
 80013d4:	e028      	b.n	8001428 <HAL_TIM_IC_CaptureCallback+0x320>
 80013d6:	bf00      	nop
 80013d8:	00000000 	.word	0x00000000
 80013dc:	408f4000 	.word	0x408f4000
 80013e0:	40000400 	.word	0x40000400
 80013e4:	24000268 	.word	0x24000268
 80013e8:	24000278 	.word	0x24000278
 80013ec:	24000288 	.word	0x24000288
 80013f0:	2400023c 	.word	0x2400023c
 80013f4:	40000800 	.word	0x40000800
 80013f8:	2400026c 	.word	0x2400026c
 80013fc:	2400027c 	.word	0x2400027c
 8001400:	2400028c 	.word	0x2400028c
 8001404:	40000c00 	.word	0x40000c00
 8001408:	24000270 	.word	0x24000270
 800140c:	24000280 	.word	0x24000280
 8001410:	24000290 	.word	0x24000290
 8001414:	40014000 	.word	0x40014000
 8001418:	24000274 	.word	0x24000274
 800141c:	24000284 	.word	0x24000284
 8001420:	24000294 	.word	0x24000294
 8001424:	447a0000 	.word	0x447a0000

            	}
            }


}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <Error_Handler+0x8>

0800143c <set_motor_pwm>:


extern TIM_HandleTypeDef htim1;

void set_motor_pwm(uint32_t motor_pwm[])
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if (motor_pwm[0] >= MOTOR_MAX_PWM_VALUE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800144c:	d305      	bcc.n	800145a <set_motor_pwm+0x1e>
	  htim1.Instance->CCR1 = MOTOR_MAX_PWM_VALUE;
 800144e:	4b35      	ldr	r3, [pc, #212]	@ (8001524 <set_motor_pwm+0xe8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001456:	635a      	str	r2, [r3, #52]	@ 0x34
 8001458:	e00d      	b.n	8001476 <set_motor_pwm+0x3a>
  else if (motor_pwm[0] <= MOTOR_MIN_PWM_VALUE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d104      	bne.n	800146c <set_motor_pwm+0x30>
	  htim1.Instance->CCR1 = MOTOR_MIN_PWM_VALUE;
 8001462:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <set_motor_pwm+0xe8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	@ 0x34
 800146a:	e004      	b.n	8001476 <set_motor_pwm+0x3a>
  else
	  htim1.Instance->CCR1 = motor_pwm[0] ;
 800146c:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <set_motor_pwm+0xe8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	635a      	str	r2, [r3, #52]	@ 0x34
  
  if (motor_pwm[1] >= MOTOR_MAX_PWM_VALUE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3304      	adds	r3, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001480:	d305      	bcc.n	800148e <set_motor_pwm+0x52>
	  htim1.Instance->CCR2 = MOTOR_MAX_PWM_VALUE;
 8001482:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <set_motor_pwm+0xe8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800148a:	639a      	str	r2, [r3, #56]	@ 0x38
 800148c:	e00e      	b.n	80014ac <set_motor_pwm+0x70>
  else if (motor_pwm[1] <= MOTOR_MIN_PWM_VALUE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3304      	adds	r3, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d104      	bne.n	80014a2 <set_motor_pwm+0x66>
	  htim1.Instance->CCR2 = MOTOR_MIN_PWM_VALUE;
 8001498:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <set_motor_pwm+0xe8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2200      	movs	r2, #0
 800149e:	639a      	str	r2, [r3, #56]	@ 0x38
 80014a0:	e004      	b.n	80014ac <set_motor_pwm+0x70>
  else
	  htim1.Instance->CCR2 =  motor_pwm[1] ;
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <set_motor_pwm+0xe8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6852      	ldr	r2, [r2, #4]
 80014aa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  if (motor_pwm[2] >= MOTOR_MAX_PWM_VALUE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3308      	adds	r3, #8
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80014b6:	d305      	bcc.n	80014c4 <set_motor_pwm+0x88>
	  htim1.Instance->CCR3 = MOTOR_MAX_PWM_VALUE;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <set_motor_pwm+0xe8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80014c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014c2:	e00e      	b.n	80014e2 <set_motor_pwm+0xa6>
  else if (motor_pwm[2] <= MOTOR_MIN_PWM_VALUE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3308      	adds	r3, #8
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d104      	bne.n	80014d8 <set_motor_pwm+0x9c>
	  htim1.Instance->CCR3 = MOTOR_MIN_PWM_VALUE;
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <set_motor_pwm+0xe8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2200      	movs	r2, #0
 80014d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014d6:	e004      	b.n	80014e2 <set_motor_pwm+0xa6>
  else
	  htim1.Instance->CCR3 =  motor_pwm[2] ;
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <set_motor_pwm+0xe8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6892      	ldr	r2, [r2, #8]
 80014e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  if (motor_pwm[3] >= MOTOR_MAX_PWM_VALUE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	330c      	adds	r3, #12
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80014ec:	d305      	bcc.n	80014fa <set_motor_pwm+0xbe>
	  htim1.Instance->CCR4 = MOTOR_MAX_PWM_VALUE;
 80014ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <set_motor_pwm+0xe8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80014f6:	641a      	str	r2, [r3, #64]	@ 0x40
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM_VALUE)
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
  else
	  htim1.Instance->CCR4 = motor_pwm[3] ;
}
 80014f8:	e00e      	b.n	8001518 <set_motor_pwm+0xdc>
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM_VALUE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	330c      	adds	r3, #12
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d104      	bne.n	800150e <set_motor_pwm+0xd2>
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <set_motor_pwm+0xe8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2200      	movs	r2, #0
 800150a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800150c:	e004      	b.n	8001518 <set_motor_pwm+0xdc>
	  htim1.Instance->CCR4 = motor_pwm[3] ;
 800150e:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <set_motor_pwm+0xe8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68d2      	ldr	r2, [r2, #12]
 8001516:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	2400002c 	.word	0x2400002c

08001528 <set_motor_pwm_zero>:


void set_motor_pwm_zero(uint32_t motor_pwm[])
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  motor_pwm[0] = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
  motor_pwm[1] = 0;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3304      	adds	r3, #4
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
  motor_pwm[2] = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3308      	adds	r3, #8
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
  motor_pwm[3] = 0;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	330c      	adds	r3, #12
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <get_target_euler>:
const float max_yaw_rad = PI*YAW_MAX_DEG/180.0f;
int t1;


void get_target_euler(float euler_rc[], float rc_comm[])
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    t1 = rc_comm[0];
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001570:	ee17 2a90 	vmov	r2, s15
 8001574:	4b4c      	ldr	r3, [pc, #304]	@ (80016a8 <get_target_euler+0x14c>)
 8001576:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8001578:	4b4b      	ldr	r3, [pc, #300]	@ (80016a8 <get_target_euler+0x14c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001580:	dd04      	ble.n	800158c <get_target_euler+0x30>
        t1 = RC_FULLSCALE;
 8001582:	4b49      	ldr	r3, [pc, #292]	@ (80016a8 <get_target_euler+0x14c>)
 8001584:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e007      	b.n	800159c <get_target_euler+0x40>
    else if (t1 < -RC_FULLSCALE)
 800158c:	4b46      	ldr	r3, [pc, #280]	@ (80016a8 <get_target_euler+0x14c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001594:	da02      	bge.n	800159c <get_target_euler+0x40>
        t1 = - RC_FULLSCALE;
 8001596:	4b44      	ldr	r3, [pc, #272]	@ (80016a8 <get_target_euler+0x14c>)
 8001598:	4a44      	ldr	r2, [pc, #272]	@ (80016ac <get_target_euler+0x150>)
 800159a:	601a      	str	r2, [r3, #0]
    euler_rc[0] = -t1 * max_pitch_rad / RC_FULLSCALE;
 800159c:	4b42      	ldr	r3, [pc, #264]	@ (80016a8 <get_target_euler+0x14c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	425b      	negs	r3, r3
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015aa:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80016b0 <get_target_euler+0x154>
 80015ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015b2:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80016b4 <get_target_euler+0x158>
 80015b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm[1];
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3304      	adds	r3, #4
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015cc:	ee17 2a90 	vmov	r2, s15
 80015d0:	4b35      	ldr	r3, [pc, #212]	@ (80016a8 <get_target_euler+0x14c>)
 80015d2:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 80015d4:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <get_target_euler+0x14c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015dc:	dd04      	ble.n	80015e8 <get_target_euler+0x8c>
        t1 = RC_FULLSCALE;
 80015de:	4b32      	ldr	r3, [pc, #200]	@ (80016a8 <get_target_euler+0x14c>)
 80015e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e007      	b.n	80015f8 <get_target_euler+0x9c>
    else if (t1 < -RC_FULLSCALE)
 80015e8:	4b2f      	ldr	r3, [pc, #188]	@ (80016a8 <get_target_euler+0x14c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80015f0:	da02      	bge.n	80015f8 <get_target_euler+0x9c>
        t1 = - RC_FULLSCALE;
 80015f2:	4b2d      	ldr	r3, [pc, #180]	@ (80016a8 <get_target_euler+0x14c>)
 80015f4:	4a2d      	ldr	r2, [pc, #180]	@ (80016ac <get_target_euler+0x150>)
 80015f6:	601a      	str	r2, [r3, #0]
    euler_rc[1] = -t1 * max_roll_rad / RC_FULLSCALE;
 80015f8:	4b2b      	ldr	r3, [pc, #172]	@ (80016a8 <get_target_euler+0x14c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	425b      	negs	r3, r3
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001606:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80016b0 <get_target_euler+0x154>
 800160a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3304      	adds	r3, #4
 8001612:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80016b4 <get_target_euler+0x158>
 8001616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161a:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm[2];
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	3308      	adds	r3, #8
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162a:	ee17 2a90 	vmov	r2, s15
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <get_target_euler+0x14c>)
 8001630:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8001632:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <get_target_euler+0x14c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800163a:	dd04      	ble.n	8001646 <get_target_euler+0xea>
        t1 = RC_FULLSCALE;
 800163c:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <get_target_euler+0x14c>)
 800163e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	e007      	b.n	8001656 <get_target_euler+0xfa>
    else if (t1 < -RC_FULLSCALE)
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <get_target_euler+0x14c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800164e:	da02      	bge.n	8001656 <get_target_euler+0xfa>
        t1 = - RC_FULLSCALE;
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <get_target_euler+0x14c>)
 8001652:	4a16      	ldr	r2, [pc, #88]	@ (80016ac <get_target_euler+0x150>)
 8001654:	601a      	str	r2, [r3, #0]

    if(t1 > YAW_DEAD_THR)
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <get_target_euler+0x14c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800165e:	dd0c      	ble.n	800167a <get_target_euler+0x11e>
    {
        euler_rc[3] = euler_rc[3] + max_yaw_rad;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	330c      	adds	r3, #12
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80016b8 <get_target_euler+0x15c>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	330c      	adds	r3, #12
 8001670:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001674:	edc3 7a00 	vstr	s15, [r3]
    }
    else if(t1 < -YAW_DEAD_THR)
    {
        euler_rc[3] = euler_rc[3] - max_yaw_rad;
    }
}
 8001678:	e010      	b.n	800169c <get_target_euler+0x140>
    else if(t1 < -YAW_DEAD_THR)
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <get_target_euler+0x14c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8001682:	da0b      	bge.n	800169c <get_target_euler+0x140>
        euler_rc[3] = euler_rc[3] - max_yaw_rad;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	330c      	adds	r3, #12
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80016b8 <get_target_euler+0x15c>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	330c      	adds	r3, #12
 8001694:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001698:	edc3 7a00 	vstr	s15, [r3]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	24000298 	.word	0x24000298
 80016ac:	fffffc18 	.word	0xfffffc18
 80016b0:	3f060a92 	.word	0x3f060a92
 80016b4:	447a0000 	.word	0x447a0000
 80016b8:	3cab92a6 	.word	0x3cab92a6

080016bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_MspInit+0x30>)
 80016c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80016c8:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <HAL_MspInit+0x30>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_MspInit+0x30>)
 80016d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	58024400 	.word	0x58024400

080016f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b092      	sub	sp, #72	@ 0x48
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a92      	ldr	r2, [pc, #584]	@ (8001958 <HAL_TIM_Base_MspInit+0x268>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12f      	bne.n	8001772 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001712:	4b92      	ldr	r3, [pc, #584]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001714:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001718:	4a90      	ldr	r2, [pc, #576]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001722:	4b8e      	ldr	r3, [pc, #568]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001724:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	633b      	str	r3, [r7, #48]	@ 0x30
 800172e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001730:	4b8a      	ldr	r3, [pc, #552]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001732:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001736:	4a89      	ldr	r2, [pc, #548]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001740:	4b86      	ldr	r3, [pc, #536]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001742:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800174c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800174e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001760:	2301      	movs	r3, #1
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001764:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001768:	4619      	mov	r1, r3
 800176a:	487d      	ldr	r0, [pc, #500]	@ (8001960 <HAL_TIM_Base_MspInit+0x270>)
 800176c:	f000 fc48 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001770:	e0ee      	b.n	8001950 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM3)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a7b      	ldr	r2, [pc, #492]	@ (8001964 <HAL_TIM_Base_MspInit+0x274>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d136      	bne.n	80017ea <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177c:	4b77      	ldr	r3, [pc, #476]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 800177e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001782:	4a76      	ldr	r2, [pc, #472]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800178c:	4b73      	ldr	r3, [pc, #460]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 800178e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	4b70      	ldr	r3, [pc, #448]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 800179c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017a0:	4a6e      	ldr	r2, [pc, #440]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017aa:	4b6c      	ldr	r3, [pc, #432]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 80017ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017b8:	2310      	movs	r3, #16
 80017ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017c8:	2302      	movs	r3, #2
 80017ca:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017d0:	4619      	mov	r1, r3
 80017d2:	4865      	ldr	r0, [pc, #404]	@ (8001968 <HAL_TIM_Base_MspInit+0x278>)
 80017d4:	f000 fc14 	bl	8002000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	201d      	movs	r0, #29
 80017de:	f000 fbda 	bl	8001f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017e2:	201d      	movs	r0, #29
 80017e4:	f000 fbf1 	bl	8001fca <HAL_NVIC_EnableIRQ>
}
 80017e8:	e0b2      	b.n	8001950 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM4)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a5f      	ldr	r2, [pc, #380]	@ (800196c <HAL_TIM_Base_MspInit+0x27c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d136      	bne.n	8001862 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017f4:	4b59      	ldr	r3, [pc, #356]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 80017f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80017fa:	4a58      	ldr	r2, [pc, #352]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001804:	4b55      	ldr	r3, [pc, #340]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001806:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	623b      	str	r3, [r7, #32]
 8001810:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b52      	ldr	r3, [pc, #328]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001814:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001818:	4a50      	ldr	r2, [pc, #320]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001822:	4b4e      	ldr	r3, [pc, #312]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001824:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001830:	2340      	movs	r3, #64	@ 0x40
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001840:	2302      	movs	r3, #2
 8001842:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001848:	4619      	mov	r1, r3
 800184a:	4847      	ldr	r0, [pc, #284]	@ (8001968 <HAL_TIM_Base_MspInit+0x278>)
 800184c:	f000 fbd8 	bl	8002000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	201e      	movs	r0, #30
 8001856:	f000 fb9e 	bl	8001f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800185a:	201e      	movs	r0, #30
 800185c:	f000 fbb5 	bl	8001fca <HAL_NVIC_EnableIRQ>
}
 8001860:	e076      	b.n	8001950 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM5)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a42      	ldr	r2, [pc, #264]	@ (8001970 <HAL_TIM_Base_MspInit+0x280>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d136      	bne.n	80018da <HAL_TIM_Base_MspInit+0x1ea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800186c:	4b3b      	ldr	r3, [pc, #236]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 800186e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001872:	4a3a      	ldr	r2, [pc, #232]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800187c:	4b37      	ldr	r3, [pc, #220]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 800187e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b34      	ldr	r3, [pc, #208]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 800188c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001890:	4a32      	ldr	r2, [pc, #200]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800189a:	4b30      	ldr	r3, [pc, #192]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 800189c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018a8:	2301      	movs	r3, #1
 80018aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018b8:	2302      	movs	r3, #2
 80018ba:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018c0:	4619      	mov	r1, r3
 80018c2:	482c      	ldr	r0, [pc, #176]	@ (8001974 <HAL_TIM_Base_MspInit+0x284>)
 80018c4:	f000 fb9c 	bl	8002000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	2032      	movs	r0, #50	@ 0x32
 80018ce:	f000 fb62 	bl	8001f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80018d2:	2032      	movs	r0, #50	@ 0x32
 80018d4:	f000 fb79 	bl	8001fca <HAL_NVIC_EnableIRQ>
}
 80018d8:	e03a      	b.n	8001950 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM15)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a26      	ldr	r2, [pc, #152]	@ (8001978 <HAL_TIM_Base_MspInit+0x288>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d135      	bne.n	8001950 <HAL_TIM_Base_MspInit+0x260>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80018e4:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 80018e6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80018ea:	4a1c      	ldr	r2, [pc, #112]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 80018f6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80018fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001904:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001908:	4a14      	ldr	r2, [pc, #80]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001912:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_TIM_Base_MspInit+0x26c>)
 8001914:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001920:	2320      	movs	r3, #32
 8001922:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001930:	2304      	movs	r3, #4
 8001932:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001934:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001938:	4619      	mov	r1, r3
 800193a:	4809      	ldr	r0, [pc, #36]	@ (8001960 <HAL_TIM_Base_MspInit+0x270>)
 800193c:	f000 fb60 	bl	8002000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2074      	movs	r0, #116	@ 0x74
 8001946:	f000 fb26 	bl	8001f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800194a:	2074      	movs	r0, #116	@ 0x74
 800194c:	f000 fb3d 	bl	8001fca <HAL_NVIC_EnableIRQ>
}
 8001950:	bf00      	nop
 8001952:	3748      	adds	r7, #72	@ 0x48
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40010000 	.word	0x40010000
 800195c:	58024400 	.word	0x58024400
 8001960:	58021000 	.word	0x58021000
 8001964:	40000400 	.word	0x40000400
 8001968:	58020400 	.word	0x58020400
 800196c:	40000800 	.word	0x40000800
 8001970:	40000c00 	.word	0x40000c00
 8001974:	58020000 	.word	0x58020000
 8001978:	40014000 	.word	0x40014000

0800197c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a13      	ldr	r2, [pc, #76]	@ (80019e8 <HAL_TIM_MspPostInit+0x6c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d11f      	bne.n	80019de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <HAL_TIM_MspPostInit+0x70>)
 80019a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019a4:	4a11      	ldr	r2, [pc, #68]	@ (80019ec <HAL_TIM_MspPostInit+0x70>)
 80019a6:	f043 0310 	orr.w	r3, r3, #16
 80019aa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_TIM_MspPostInit+0x70>)
 80019b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <HAL_TIM_MspPostInit+0x74>)
 80019da:	f000 fb11 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40010000 	.word	0x40010000
 80019ec:	58024400 	.word	0x58024400
 80019f0:	58021000 	.word	0x58021000

080019f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b0ba      	sub	sp, #232	@ 0xe8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	22c0      	movs	r2, #192	@ 0xc0
 8001a12:	2100      	movs	r1, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f006 fe2b 	bl	8008670 <memset>
  if(huart->Instance==USART3)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a27      	ldr	r2, [pc, #156]	@ (8001abc <HAL_UART_MspInit+0xc8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d146      	bne.n	8001ab2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a24:	f04f 0202 	mov.w	r2, #2
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 fcc2 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a46:	f7ff fcf3 	bl	8001430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <HAL_UART_MspInit+0xcc>)
 8001a4c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a50:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac0 <HAL_UART_MspInit+0xcc>)
 8001a52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a56:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001a5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_UART_MspInit+0xcc>)
 8001a5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a68:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <HAL_UART_MspInit+0xcc>)
 8001a6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ac0 <HAL_UART_MspInit+0xcc>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <HAL_UART_MspInit+0xcc>)
 8001a7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <HAL_UART_MspInit+0xd0>)
 8001aae:	f000 faa7 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	37e8      	adds	r7, #232	@ 0xe8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40004800 	.word	0x40004800
 8001ac0:	58024400 	.word	0x58024400
 8001ac4:	58020c00 	.word	0x58020c00

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <NMI_Handler+0x4>

08001ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <HardFault_Handler+0x4>

08001ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <MemManage_Handler+0x4>

08001ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <UsageFault_Handler+0x4>

08001af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1e:	f000 f93f 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <TIM3_IRQHandler+0x10>)
 8001b2e:	f003 ffd5 	bl	8005adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	24000078 	.word	0x24000078

08001b3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <TIM4_IRQHandler+0x10>)
 8001b42:	f003 ffcb 	bl	8005adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	240000c4 	.word	0x240000c4

08001b50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <TIM5_IRQHandler+0x10>)
 8001b56:	f003 ffc1 	bl	8005adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	24000110 	.word	0x24000110

08001b64 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <TIM15_IRQHandler+0x10>)
 8001b6a:	f003 ffb7 	bl	8005adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	2400015c 	.word	0x2400015c

08001b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b7c:	4b32      	ldr	r3, [pc, #200]	@ (8001c48 <SystemInit+0xd0>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b82:	4a31      	ldr	r2, [pc, #196]	@ (8001c48 <SystemInit+0xd0>)
 8001b84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c4c <SystemInit+0xd4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d807      	bhi.n	8001ba8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b98:	4b2c      	ldr	r3, [pc, #176]	@ (8001c4c <SystemInit+0xd4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 030f 	bic.w	r3, r3, #15
 8001ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c4c <SystemInit+0xd4>)
 8001ba2:	f043 0303 	orr.w	r3, r3, #3
 8001ba6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ba8:	4b29      	ldr	r3, [pc, #164]	@ (8001c50 <SystemInit+0xd8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a28      	ldr	r2, [pc, #160]	@ (8001c50 <SystemInit+0xd8>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bb4:	4b26      	ldr	r3, [pc, #152]	@ (8001c50 <SystemInit+0xd8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bba:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <SystemInit+0xd8>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4924      	ldr	r1, [pc, #144]	@ (8001c50 <SystemInit+0xd8>)
 8001bc0:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <SystemInit+0xdc>)
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bc6:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <SystemInit+0xd4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <SystemInit+0xd4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 030f 	bic.w	r3, r3, #15
 8001bda:	4a1c      	ldr	r2, [pc, #112]	@ (8001c4c <SystemInit+0xd4>)
 8001bdc:	f043 0303 	orr.w	r3, r3, #3
 8001be0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001be2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <SystemInit+0xd8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001be8:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <SystemInit+0xd8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001bee:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <SystemInit+0xd8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <SystemInit+0xd8>)
 8001bf6:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <SystemInit+0xe0>)
 8001bf8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <SystemInit+0xd8>)
 8001bfc:	4a17      	ldr	r2, [pc, #92]	@ (8001c5c <SystemInit+0xe4>)
 8001bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c00:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <SystemInit+0xd8>)
 8001c02:	4a17      	ldr	r2, [pc, #92]	@ (8001c60 <SystemInit+0xe8>)
 8001c04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <SystemInit+0xd8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <SystemInit+0xd8>)
 8001c0e:	4a14      	ldr	r2, [pc, #80]	@ (8001c60 <SystemInit+0xe8>)
 8001c10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c12:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <SystemInit+0xd8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c18:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <SystemInit+0xd8>)
 8001c1a:	4a11      	ldr	r2, [pc, #68]	@ (8001c60 <SystemInit+0xe8>)
 8001c1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <SystemInit+0xd8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <SystemInit+0xd8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a09      	ldr	r2, [pc, #36]	@ (8001c50 <SystemInit+0xd8>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c30:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <SystemInit+0xd8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <SystemInit+0xec>)
 8001c38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00
 8001c4c:	52002000 	.word	0x52002000
 8001c50:	58024400 	.word	0x58024400
 8001c54:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c58:	02020200 	.word	0x02020200
 8001c5c:	01ff0000 	.word	0x01ff0000
 8001c60:	01010280 	.word	0x01010280
 8001c64:	52004000 	.word	0x52004000

08001c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c6c:	f7ff ff84 	bl	8001b78 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c72:	490d      	ldr	r1, [pc, #52]	@ (8001ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c88:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c96:	f006 fcf3 	bl	8008680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9a:	f7fe fca1 	bl	80005e0 <main>
  bx  lr
 8001c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001ca4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ca8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001cac:	08008728 	.word	0x08008728
  ldr r2, =_sbss
 8001cb0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001cb4:	240002a0 	.word	0x240002a0

08001cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc2:	2003      	movs	r0, #3
 8001cc4:	f000 f95c 	bl	8001f80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001cc8:	f001 f9a6 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <HAL_Init+0x68>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	4913      	ldr	r1, [pc, #76]	@ (8001d28 <HAL_Init+0x6c>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <HAL_Init+0x68>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	4a0e      	ldr	r2, [pc, #56]	@ (8001d28 <HAL_Init+0x6c>)
 8001cf0:	5cd3      	ldrb	r3, [r2, r3]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <HAL_Init+0x70>)
 8001cfe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d00:	4a0b      	ldr	r2, [pc, #44]	@ (8001d30 <HAL_Init+0x74>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d06:	2000      	movs	r0, #0
 8001d08:	f000 f814 	bl	8001d34 <HAL_InitTick>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e002      	b.n	8001d1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d16:	f7ff fcd1 	bl	80016bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	58024400 	.word	0x58024400
 8001d28:	080086e0 	.word	0x080086e0
 8001d2c:	24000004 	.word	0x24000004
 8001d30:	24000000 	.word	0x24000000

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d3c:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <HAL_InitTick+0x60>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e021      	b.n	8001d8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_InitTick+0x64>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <HAL_InitTick+0x60>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f941 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00e      	b.n	8001d8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d80a      	bhi.n	8001d8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d7c:	f000 f90b 	bl	8001f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d80:	4a06      	ldr	r2, [pc, #24]	@ (8001d9c <HAL_InitTick+0x68>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	2400000c 	.word	0x2400000c
 8001d98:	24000000 	.word	0x24000000
 8001d9c:	24000008 	.word	0x24000008

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	2400000c 	.word	0x2400000c
 8001dc4:	2400029c 	.word	0x2400029c

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	2400029c 	.word	0x2400029c

08001de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <__NVIC_SetPriorityGrouping+0x40>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e08:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <__NVIC_SetPriorityGrouping+0x40>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00
 8001e24:	05fa0000 	.word	0x05fa0000

08001e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <__NVIC_GetPriorityGrouping+0x18>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0307 	and.w	r3, r3, #7
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db0b      	blt.n	8001e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	4907      	ldr	r1, [pc, #28]	@ (8001e7c <__NVIC_EnableIRQ+0x38>)
 8001e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2001      	movs	r0, #1
 8001e66:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000e100 	.word	0xe000e100

08001e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	db0a      	blt.n	8001eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	490c      	ldr	r1, [pc, #48]	@ (8001ecc <__NVIC_SetPriority+0x4c>)
 8001e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9e:	0112      	lsls	r2, r2, #4
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea8:	e00a      	b.n	8001ec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4908      	ldr	r1, [pc, #32]	@ (8001ed0 <__NVIC_SetPriority+0x50>)
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3b04      	subs	r3, #4
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	761a      	strb	r2, [r3, #24]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000e100 	.word	0xe000e100
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	@ 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f1c3 0307 	rsb	r3, r3, #7
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	bf28      	it	cs
 8001ef2:	2304      	movcs	r3, #4
 8001ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d902      	bls.n	8001f04 <NVIC_EncodePriority+0x30>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3b03      	subs	r3, #3
 8001f02:	e000      	b.n	8001f06 <NVIC_EncodePriority+0x32>
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	43d9      	mvns	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	4313      	orrs	r3, r2
         );
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3724      	adds	r7, #36	@ 0x24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f4c:	d301      	bcc.n	8001f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <SysTick_Config+0x40>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f60:	f7ff ff8e 	bl	8001e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <SysTick_Config+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6a:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <SysTick_Config+0x40>)
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff29 	bl	8001de0 <__NVIC_SetPriorityGrouping>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff40 	bl	8001e28 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff90 	bl	8001ed4 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5f 	bl	8001e80 <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff33 	bl	8001e44 <__NVIC_EnableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffa4 	bl	8001f3c <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800200e:	4b89      	ldr	r3, [pc, #548]	@ (8002234 <HAL_GPIO_Init+0x234>)
 8002010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002012:	e194      	b.n	800233e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8186 	beq.w	8002338 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d005      	beq.n	8002044 <HAL_GPIO_Init+0x44>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d130      	bne.n	80020a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800207a:	2201      	movs	r2, #1
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	091b      	lsrs	r3, r3, #4
 8002090:	f003 0201 	and.w	r2, r3, #1
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d017      	beq.n	80020e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d123      	bne.n	8002136 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	08da      	lsrs	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3208      	adds	r2, #8
 80020f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	69b9      	ldr	r1, [r7, #24]
 8002132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0203 	and.w	r2, r3, #3
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80e0 	beq.w	8002338 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002178:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_GPIO_Init+0x238>)
 800217a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800217e:	4a2e      	ldr	r2, [pc, #184]	@ (8002238 <HAL_GPIO_Init+0x238>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002188:	4b2b      	ldr	r3, [pc, #172]	@ (8002238 <HAL_GPIO_Init+0x238>)
 800218a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002196:	4a29      	ldr	r2, [pc, #164]	@ (800223c <HAL_GPIO_Init+0x23c>)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	220f      	movs	r2, #15
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a20      	ldr	r2, [pc, #128]	@ (8002240 <HAL_GPIO_Init+0x240>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d052      	beq.n	8002268 <HAL_GPIO_Init+0x268>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002244 <HAL_GPIO_Init+0x244>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d031      	beq.n	800222e <HAL_GPIO_Init+0x22e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002248 <HAL_GPIO_Init+0x248>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d02b      	beq.n	800222a <HAL_GPIO_Init+0x22a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1d      	ldr	r2, [pc, #116]	@ (800224c <HAL_GPIO_Init+0x24c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d025      	beq.n	8002226 <HAL_GPIO_Init+0x226>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002250 <HAL_GPIO_Init+0x250>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d01f      	beq.n	8002222 <HAL_GPIO_Init+0x222>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002254 <HAL_GPIO_Init+0x254>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d019      	beq.n	800221e <HAL_GPIO_Init+0x21e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1a      	ldr	r2, [pc, #104]	@ (8002258 <HAL_GPIO_Init+0x258>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d013      	beq.n	800221a <HAL_GPIO_Init+0x21a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a19      	ldr	r2, [pc, #100]	@ (800225c <HAL_GPIO_Init+0x25c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00d      	beq.n	8002216 <HAL_GPIO_Init+0x216>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a18      	ldr	r2, [pc, #96]	@ (8002260 <HAL_GPIO_Init+0x260>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d007      	beq.n	8002212 <HAL_GPIO_Init+0x212>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <HAL_GPIO_Init+0x264>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d101      	bne.n	800220e <HAL_GPIO_Init+0x20e>
 800220a:	2309      	movs	r3, #9
 800220c:	e02d      	b.n	800226a <HAL_GPIO_Init+0x26a>
 800220e:	230a      	movs	r3, #10
 8002210:	e02b      	b.n	800226a <HAL_GPIO_Init+0x26a>
 8002212:	2308      	movs	r3, #8
 8002214:	e029      	b.n	800226a <HAL_GPIO_Init+0x26a>
 8002216:	2307      	movs	r3, #7
 8002218:	e027      	b.n	800226a <HAL_GPIO_Init+0x26a>
 800221a:	2306      	movs	r3, #6
 800221c:	e025      	b.n	800226a <HAL_GPIO_Init+0x26a>
 800221e:	2305      	movs	r3, #5
 8002220:	e023      	b.n	800226a <HAL_GPIO_Init+0x26a>
 8002222:	2304      	movs	r3, #4
 8002224:	e021      	b.n	800226a <HAL_GPIO_Init+0x26a>
 8002226:	2303      	movs	r3, #3
 8002228:	e01f      	b.n	800226a <HAL_GPIO_Init+0x26a>
 800222a:	2302      	movs	r3, #2
 800222c:	e01d      	b.n	800226a <HAL_GPIO_Init+0x26a>
 800222e:	2301      	movs	r3, #1
 8002230:	e01b      	b.n	800226a <HAL_GPIO_Init+0x26a>
 8002232:	bf00      	nop
 8002234:	58000080 	.word	0x58000080
 8002238:	58024400 	.word	0x58024400
 800223c:	58000400 	.word	0x58000400
 8002240:	58020000 	.word	0x58020000
 8002244:	58020400 	.word	0x58020400
 8002248:	58020800 	.word	0x58020800
 800224c:	58020c00 	.word	0x58020c00
 8002250:	58021000 	.word	0x58021000
 8002254:	58021400 	.word	0x58021400
 8002258:	58021800 	.word	0x58021800
 800225c:	58021c00 	.word	0x58021c00
 8002260:	58022000 	.word	0x58022000
 8002264:	58022400 	.word	0x58022400
 8002268:	2300      	movs	r3, #0
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	f002 0203 	and.w	r2, r2, #3
 8002270:	0092      	lsls	r2, r2, #2
 8002272:	4093      	lsls	r3, r2
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227a:	4938      	ldr	r1, [pc, #224]	@ (800235c <HAL_GPIO_Init+0x35c>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	3301      	adds	r3, #1
 800233c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	f47f ae63 	bne.w	8002014 <HAL_GPIO_Init+0x14>
  }
}
 800234e:	bf00      	nop
 8002350:	bf00      	nop
 8002352:	3724      	adds	r7, #36	@ 0x24
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	58000400 	.word	0x58000400

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800239c:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <HAL_PWREx_ConfigSupply+0xb0>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	2b06      	cmp	r3, #6
 80023a6:	d00a      	beq.n	80023be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023a8:	4b26      	ldr	r3, [pc, #152]	@ (8002444 <HAL_PWREx_ConfigSupply+0xb0>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e040      	b.n	800243c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e03e      	b.n	800243c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023be:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <HAL_PWREx_ConfigSupply+0xb0>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80023c6:	491f      	ldr	r1, [pc, #124]	@ (8002444 <HAL_PWREx_ConfigSupply+0xb0>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023ce:	f7ff fcfb 	bl	8001dc8 <HAL_GetTick>
 80023d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023d4:	e009      	b.n	80023ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023d6:	f7ff fcf7 	bl	8001dc8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023e4:	d901      	bls.n	80023ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e028      	b.n	800243c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023ea:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023f6:	d1ee      	bne.n	80023d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b1e      	cmp	r3, #30
 80023fc:	d008      	beq.n	8002410 <HAL_PWREx_ConfigSupply+0x7c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b2e      	cmp	r3, #46	@ 0x2e
 8002402:	d005      	beq.n	8002410 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b1d      	cmp	r3, #29
 8002408:	d002      	beq.n	8002410 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b2d      	cmp	r3, #45	@ 0x2d
 800240e:	d114      	bne.n	800243a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002410:	f7ff fcda 	bl	8001dc8 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002416:	e009      	b.n	800242c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002418:	f7ff fcd6 	bl	8001dc8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002426:	d901      	bls.n	800242c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e007      	b.n	800243c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <HAL_PWREx_ConfigSupply+0xb0>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002438:	d1ee      	bne.n	8002418 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	58024800 	.word	0x58024800

08002448 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	@ 0x30
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	f000 bc1f 	b.w	8002c9a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80b3 	beq.w	80025d0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246a:	4b95      	ldr	r3, [pc, #596]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002472:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002474:	4b92      	ldr	r3, [pc, #584]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800247a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247c:	2b10      	cmp	r3, #16
 800247e:	d007      	beq.n	8002490 <HAL_RCC_OscConfig+0x48>
 8002480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002482:	2b18      	cmp	r3, #24
 8002484:	d112      	bne.n	80024ac <HAL_RCC_OscConfig+0x64>
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d10d      	bne.n	80024ac <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	4b8b      	ldr	r3, [pc, #556]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8098 	beq.w	80025ce <HAL_RCC_OscConfig+0x186>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 8093 	bne.w	80025ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e3f6      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b4:	d106      	bne.n	80024c4 <HAL_RCC_OscConfig+0x7c>
 80024b6:	4b82      	ldr	r3, [pc, #520]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a81      	ldr	r2, [pc, #516]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e058      	b.n	8002576 <HAL_RCC_OscConfig+0x12e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d112      	bne.n	80024f2 <HAL_RCC_OscConfig+0xaa>
 80024cc:	4b7c      	ldr	r3, [pc, #496]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a7b      	ldr	r2, [pc, #492]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b79      	ldr	r3, [pc, #484]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a78      	ldr	r2, [pc, #480]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80024de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b76      	ldr	r3, [pc, #472]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a75      	ldr	r2, [pc, #468]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e041      	b.n	8002576 <HAL_RCC_OscConfig+0x12e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024fa:	d112      	bne.n	8002522 <HAL_RCC_OscConfig+0xda>
 80024fc:	4b70      	ldr	r3, [pc, #448]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6f      	ldr	r2, [pc, #444]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002502:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b6d      	ldr	r3, [pc, #436]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6c      	ldr	r2, [pc, #432]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800250e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b6a      	ldr	r3, [pc, #424]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a69      	ldr	r2, [pc, #420]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e029      	b.n	8002576 <HAL_RCC_OscConfig+0x12e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800252a:	d112      	bne.n	8002552 <HAL_RCC_OscConfig+0x10a>
 800252c:	4b64      	ldr	r3, [pc, #400]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a63      	ldr	r2, [pc, #396]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002532:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b61      	ldr	r3, [pc, #388]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a60      	ldr	r2, [pc, #384]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800253e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b5e      	ldr	r3, [pc, #376]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a5d      	ldr	r2, [pc, #372]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e011      	b.n	8002576 <HAL_RCC_OscConfig+0x12e>
 8002552:	4b5b      	ldr	r3, [pc, #364]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a5a      	ldr	r2, [pc, #360]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b58      	ldr	r3, [pc, #352]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a57      	ldr	r2, [pc, #348]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002564:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b55      	ldr	r3, [pc, #340]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a54      	ldr	r2, [pc, #336]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002570:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002574:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d013      	beq.n	80025a6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7ff fc23 	bl	8001dc8 <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002586:	f7ff fc1f 	bl	8001dc8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	@ 0x64
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e380      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002598:	4b49      	ldr	r3, [pc, #292]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x13e>
 80025a4:	e014      	b.n	80025d0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7ff fc0f 	bl	8001dc8 <HAL_GetTick>
 80025aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ae:	f7ff fc0b 	bl	8001dc8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b64      	cmp	r3, #100	@ 0x64
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e36c      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025c0:	4b3f      	ldr	r3, [pc, #252]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x166>
 80025cc:	e000      	b.n	80025d0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 808c 	beq.w	80026f6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025de:	4b38      	ldr	r3, [pc, #224]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025e6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025e8:	4b35      	ldr	r3, [pc, #212]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_RCC_OscConfig+0x1bc>
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2b18      	cmp	r3, #24
 80025f8:	d137      	bne.n	800266a <HAL_RCC_OscConfig+0x222>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d132      	bne.n	800266a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002604:	4b2e      	ldr	r3, [pc, #184]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_OscConfig+0x1d4>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e33e      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800261c:	4b28      	ldr	r3, [pc, #160]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 0219 	bic.w	r2, r3, #25
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4925      	ldr	r1, [pc, #148]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7ff fbcb 	bl	8001dc8 <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002636:	f7ff fbc7 	bl	8001dc8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e328      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002648:	4b1d      	ldr	r3, [pc, #116]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002654:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	061b      	lsls	r3, r3, #24
 8002662:	4917      	ldr	r1, [pc, #92]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002668:	e045      	b.n	80026f6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d028      	beq.n	80026c4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002672:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0219 	bic.w	r2, r3, #25
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4910      	ldr	r1, [pc, #64]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002680:	4313      	orrs	r3, r2
 8002682:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff fba0 	bl	8001dc8 <HAL_GetTick>
 8002688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268c:	f7ff fb9c 	bl	8001dc8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e2fd      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800269e:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	061b      	lsls	r3, r3, #24
 80026b8:	4901      	ldr	r1, [pc, #4]	@ (80026c0 <HAL_RCC_OscConfig+0x278>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
 80026be:	e01a      	b.n	80026f6 <HAL_RCC_OscConfig+0x2ae>
 80026c0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c4:	4b97      	ldr	r3, [pc, #604]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a96      	ldr	r2, [pc, #600]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7ff fb7a 	bl	8001dc8 <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d8:	f7ff fb76 	bl	8001dc8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e2d7      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d06a      	beq.n	80027d8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002702:	4b88      	ldr	r3, [pc, #544]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800270a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800270c:	4b85      	ldr	r3, [pc, #532]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d007      	beq.n	8002728 <HAL_RCC_OscConfig+0x2e0>
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b18      	cmp	r3, #24
 800271c:	d11b      	bne.n	8002756 <HAL_RCC_OscConfig+0x30e>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d116      	bne.n	8002756 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002728:	4b7e      	ldr	r3, [pc, #504]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_OscConfig+0x2f8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b80      	cmp	r3, #128	@ 0x80
 800273a:	d001      	beq.n	8002740 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e2ac      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002740:	4b78      	ldr	r3, [pc, #480]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	4975      	ldr	r1, [pc, #468]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002750:	4313      	orrs	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002754:	e040      	b.n	80027d8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d023      	beq.n	80027a6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800275e:	4b71      	ldr	r3, [pc, #452]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a70      	ldr	r2, [pc, #448]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7ff fb2d 	bl	8001dc8 <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002772:	f7ff fb29 	bl	8001dc8 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e28a      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002784:	4b67      	ldr	r3, [pc, #412]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002790:	4b64      	ldr	r3, [pc, #400]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4961      	ldr	r1, [pc, #388]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60cb      	str	r3, [r1, #12]
 80027a4:	e018      	b.n	80027d8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80027ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7ff fb09 	bl	8001dc8 <HAL_GetTick>
 80027b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027ba:	f7ff fb05 	bl	8001dc8 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e266      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027cc:	4b55      	ldr	r3, [pc, #340]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d036      	beq.n	8002852 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d019      	beq.n	8002820 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7ff fae6 	bl	8001dc8 <HAL_GetTick>
 80027fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff fae2 	bl	8001dc8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e243      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002812:	4b44      	ldr	r3, [pc, #272]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x3b8>
 800281e:	e018      	b.n	8002852 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002820:	4b40      	ldr	r3, [pc, #256]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002824:	4a3f      	ldr	r2, [pc, #252]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7ff facc 	bl	8001dc8 <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002834:	f7ff fac8 	bl	8001dc8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e229      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002846:	4b37      	ldr	r3, [pc, #220]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b00      	cmp	r3, #0
 800285c:	d036      	beq.n	80028cc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d019      	beq.n	800289a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002866:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2e      	ldr	r2, [pc, #184]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 800286c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002870:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002872:	f7ff faa9 	bl	8001dc8 <HAL_GetTick>
 8002876:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800287a:	f7ff faa5 	bl	8001dc8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e206      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800288c:	4b25      	ldr	r3, [pc, #148]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x432>
 8002898:	e018      	b.n	80028cc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800289a:	4b22      	ldr	r3, [pc, #136]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80028a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028a6:	f7ff fa8f 	bl	8001dc8 <HAL_GetTick>
 80028aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ae:	f7ff fa8b 	bl	8001dc8 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1ec      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c0:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80af 	beq.w	8002a38 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028da:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <HAL_RCC_OscConfig+0x4e0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a12      	ldr	r2, [pc, #72]	@ (8002928 <HAL_RCC_OscConfig+0x4e0>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e6:	f7ff fa6f 	bl	8001dc8 <HAL_GetTick>
 80028ea:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ee:	f7ff fa6b 	bl	8001dc8 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	@ 0x64
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1cc      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002900:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_RCC_OscConfig+0x4e0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d10b      	bne.n	800292c <HAL_RCC_OscConfig+0x4e4>
 8002914:	4b03      	ldr	r3, [pc, #12]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002918:	4a02      	ldr	r2, [pc, #8]	@ (8002924 <HAL_RCC_OscConfig+0x4dc>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002920:	e05b      	b.n	80029da <HAL_RCC_OscConfig+0x592>
 8002922:	bf00      	nop
 8002924:	58024400 	.word	0x58024400
 8002928:	58024800 	.word	0x58024800
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d112      	bne.n	800295a <HAL_RCC_OscConfig+0x512>
 8002934:	4b9d      	ldr	r3, [pc, #628]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002938:	4a9c      	ldr	r2, [pc, #624]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002940:	4b9a      	ldr	r3, [pc, #616]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002944:	4a99      	ldr	r2, [pc, #612]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800294a:	6713      	str	r3, [r2, #112]	@ 0x70
 800294c:	4b97      	ldr	r3, [pc, #604]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	4a96      	ldr	r2, [pc, #600]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002952:	f023 0304 	bic.w	r3, r3, #4
 8002956:	6713      	str	r3, [r2, #112]	@ 0x70
 8002958:	e03f      	b.n	80029da <HAL_RCC_OscConfig+0x592>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b05      	cmp	r3, #5
 8002960:	d112      	bne.n	8002988 <HAL_RCC_OscConfig+0x540>
 8002962:	4b92      	ldr	r3, [pc, #584]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002966:	4a91      	ldr	r2, [pc, #580]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6713      	str	r3, [r2, #112]	@ 0x70
 800296e:	4b8f      	ldr	r3, [pc, #572]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	4a8e      	ldr	r2, [pc, #568]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002978:	6713      	str	r3, [r2, #112]	@ 0x70
 800297a:	4b8c      	ldr	r3, [pc, #560]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	4a8b      	ldr	r2, [pc, #556]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6713      	str	r3, [r2, #112]	@ 0x70
 8002986:	e028      	b.n	80029da <HAL_RCC_OscConfig+0x592>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b85      	cmp	r3, #133	@ 0x85
 800298e:	d112      	bne.n	80029b6 <HAL_RCC_OscConfig+0x56e>
 8002990:	4b86      	ldr	r3, [pc, #536]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002994:	4a85      	ldr	r2, [pc, #532]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6713      	str	r3, [r2, #112]	@ 0x70
 800299c:	4b83      	ldr	r3, [pc, #524]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a0:	4a82      	ldr	r2, [pc, #520]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 80029a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a8:	4b80      	ldr	r3, [pc, #512]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ac:	4a7f      	ldr	r2, [pc, #508]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b4:	e011      	b.n	80029da <HAL_RCC_OscConfig+0x592>
 80029b6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	4a7c      	ldr	r2, [pc, #496]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c2:	4b7a      	ldr	r3, [pc, #488]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	4a79      	ldr	r2, [pc, #484]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 80029c8:	f023 0304 	bic.w	r3, r3, #4
 80029cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ce:	4b77      	ldr	r3, [pc, #476]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d2:	4a76      	ldr	r2, [pc, #472]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 80029d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d015      	beq.n	8002a0e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7ff f9f1 	bl	8001dc8 <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7ff f9ed 	bl	8001dc8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e14c      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a00:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ee      	beq.n	80029ea <HAL_RCC_OscConfig+0x5a2>
 8002a0c:	e014      	b.n	8002a38 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7ff f9db 	bl	8001dc8 <HAL_GetTick>
 8002a12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7ff f9d7 	bl	8001dc8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e136      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a2c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ee      	bne.n	8002a16 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 812b 	beq.w	8002c98 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a42:	4b5a      	ldr	r3, [pc, #360]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a4a:	2b18      	cmp	r3, #24
 8002a4c:	f000 80bb 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	f040 8095 	bne.w	8002b84 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b54      	ldr	r3, [pc, #336]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a53      	ldr	r2, [pc, #332]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002a60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a66:	f7ff f9af 	bl	8001dc8 <HAL_GetTick>
 8002a6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7ff f9ab 	bl	8001dc8 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e10c      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a80:	4b4a      	ldr	r3, [pc, #296]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f0      	bne.n	8002a6e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8c:	4b47      	ldr	r3, [pc, #284]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002a8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a90:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <HAL_RCC_OscConfig+0x768>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a9c:	0112      	lsls	r2, r2, #4
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	4942      	ldr	r1, [pc, #264]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	628b      	str	r3, [r1, #40]	@ 0x28
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	025b      	lsls	r3, r3, #9
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ad6:	4935      	ldr	r1, [pc, #212]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002adc:	4b33      	ldr	r3, [pc, #204]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	4a32      	ldr	r2, [pc, #200]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ae8:	4b30      	ldr	r3, [pc, #192]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aec:	4b31      	ldr	r3, [pc, #196]	@ (8002bb4 <HAL_RCC_OscConfig+0x76c>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002af4:	00d2      	lsls	r2, r2, #3
 8002af6:	492d      	ldr	r1, [pc, #180]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002afc:	4b2b      	ldr	r3, [pc, #172]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	f023 020c 	bic.w	r2, r3, #12
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	4928      	ldr	r1, [pc, #160]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b0e:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	f023 0202 	bic.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	4924      	ldr	r1, [pc, #144]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b20:	4b22      	ldr	r3, [pc, #136]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	4a21      	ldr	r2, [pc, #132]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	4a1e      	ldr	r2, [pc, #120]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b38:	4b1c      	ldr	r3, [pc, #112]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b44:	4b19      	ldr	r3, [pc, #100]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	4a18      	ldr	r2, [pc, #96]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b50:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a15      	ldr	r2, [pc, #84]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff f934 	bl	8001dc8 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7ff f930 	bl	8001dc8 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e091      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x71c>
 8002b82:	e089      	b.n	8002c98 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b84:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <HAL_RCC_OscConfig+0x764>)
 8002b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7ff f91a 	bl	8001dc8 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b96:	e00f      	b.n	8002bb8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7ff f916 	bl	8001dc8 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d908      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e077      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
 8002baa:	bf00      	nop
 8002bac:	58024400 	.word	0x58024400
 8002bb0:	fffffc0c 	.word	0xfffffc0c
 8002bb4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca4 <HAL_RCC_OscConfig+0x85c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e9      	bne.n	8002b98 <HAL_RCC_OscConfig+0x750>
 8002bc4:	e068      	b.n	8002c98 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bc6:	4b37      	ldr	r3, [pc, #220]	@ (8002ca4 <HAL_RCC_OscConfig+0x85c>)
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bcc:	4b35      	ldr	r3, [pc, #212]	@ (8002ca4 <HAL_RCC_OscConfig+0x85c>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d031      	beq.n	8002c3e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f003 0203 	and.w	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d12a      	bne.n	8002c3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d122      	bne.n	8002c3e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d11a      	bne.n	8002c3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	0a5b      	lsrs	r3, r3, #9
 8002c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c14:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d111      	bne.n	8002c3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c26:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d108      	bne.n	8002c3e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	0e1b      	lsrs	r3, r3, #24
 8002c30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e02b      	b.n	8002c9a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c42:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <HAL_RCC_OscConfig+0x85c>)
 8002c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c46:	08db      	lsrs	r3, r3, #3
 8002c48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c4c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d01f      	beq.n	8002c98 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_RCC_OscConfig+0x85c>)
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_RCC_OscConfig+0x85c>)
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c64:	f7ff f8b0 	bl	8001dc8 <HAL_GetTick>
 8002c68:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c6a:	bf00      	nop
 8002c6c:	f7ff f8ac 	bl	8001dc8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d0f9      	beq.n	8002c6c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <HAL_RCC_OscConfig+0x85c>)
 8002c7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <HAL_RCC_OscConfig+0x860>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c84:	00d2      	lsls	r2, r2, #3
 8002c86:	4907      	ldr	r1, [pc, #28]	@ (8002ca4 <HAL_RCC_OscConfig+0x85c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ca4 <HAL_RCC_OscConfig+0x85c>)
 8002c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <HAL_RCC_OscConfig+0x85c>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3730      	adds	r7, #48	@ 0x30
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	58024400 	.word	0x58024400
 8002ca8:	ffff0007 	.word	0xffff0007

08002cac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e19c      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b8a      	ldr	r3, [pc, #552]	@ (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d910      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b87      	ldr	r3, [pc, #540]	@ (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 020f 	bic.w	r2, r3, #15
 8002cd6:	4985      	ldr	r1, [pc, #532]	@ (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b83      	ldr	r3, [pc, #524]	@ (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e184      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d908      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d0c:	4b78      	ldr	r3, [pc, #480]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	4975      	ldr	r1, [pc, #468]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	4b70      	ldr	r3, [pc, #448]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d908      	bls.n	8002d4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	496a      	ldr	r1, [pc, #424]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	4b64      	ldr	r3, [pc, #400]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d908      	bls.n	8002d7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d68:	4b61      	ldr	r3, [pc, #388]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	495e      	ldr	r1, [pc, #376]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	4b59      	ldr	r3, [pc, #356]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d908      	bls.n	8002da8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d96:	4b56      	ldr	r3, [pc, #344]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	4953      	ldr	r1, [pc, #332]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d010      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d908      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f023 020f 	bic.w	r2, r3, #15
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4947      	ldr	r1, [pc, #284]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d055      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002de2:	4b43      	ldr	r3, [pc, #268]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	4940      	ldr	r1, [pc, #256]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dfc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d121      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0f6      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d107      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e14:	4b36      	ldr	r3, [pc, #216]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d115      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0ea      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0de      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0d6      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f023 0207 	bic.w	r2, r3, #7
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4925      	ldr	r1, [pc, #148]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5e:	f7fe ffb3 	bl	8001dc8 <HAL_GetTick>
 8002e62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e66:	f7fe ffaf 	bl	8001dc8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0be      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d1eb      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d010      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d208      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eaa:	4b11      	ldr	r3, [pc, #68]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f023 020f 	bic.w	r2, r3, #15
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	490e      	ldr	r1, [pc, #56]	@ (8002ef0 <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d214      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b08      	ldr	r3, [pc, #32]	@ (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 020f 	bic.w	r2, r3, #15
 8002ed2:	4906      	ldr	r1, [pc, #24]	@ (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b04      	ldr	r3, [pc, #16]	@ (8002eec <HAL_RCC_ClockConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e086      	b.n	8002ffa <HAL_RCC_ClockConfig+0x34e>
 8002eec:	52002000 	.word	0x52002000
 8002ef0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d010      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	4b3f      	ldr	r3, [pc, #252]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d208      	bcs.n	8002f22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f10:	4b3c      	ldr	r3, [pc, #240]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	4939      	ldr	r1, [pc, #228]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	4b34      	ldr	r3, [pc, #208]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d208      	bcs.n	8002f50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f3e:	4b31      	ldr	r3, [pc, #196]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	492e      	ldr	r1, [pc, #184]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	4b28      	ldr	r3, [pc, #160]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d208      	bcs.n	8002f7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f6c:	4b25      	ldr	r3, [pc, #148]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	4922      	ldr	r1, [pc, #136]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d010      	beq.n	8002fac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d208      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	4917      	ldr	r1, [pc, #92]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002fac:	f000 f834 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	4912      	ldr	r1, [pc, #72]	@ (8003008 <HAL_RCC_ClockConfig+0x35c>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002fca:	4b0e      	ldr	r3, [pc, #56]	@ (8003004 <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8003008 <HAL_RCC_ClockConfig+0x35c>)
 8002fd4:	5cd3      	ldrb	r3, [r2, r3]
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <HAL_RCC_ClockConfig+0x360>)
 8002fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <HAL_RCC_ClockConfig+0x364>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <HAL_RCC_ClockConfig+0x368>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fea0 	bl	8001d34 <HAL_InitTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	58024400 	.word	0x58024400
 8003008:	080086e0 	.word	0x080086e0
 800300c:	24000004 	.word	0x24000004
 8003010:	24000000 	.word	0x24000000
 8003014:	24000008 	.word	0x24000008

08003018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	@ 0x24
 800301c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800301e:	4bb3      	ldr	r3, [pc, #716]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003026:	2b18      	cmp	r3, #24
 8003028:	f200 8155 	bhi.w	80032d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800302c:	a201      	add	r2, pc, #4	@ (adr r2, 8003034 <HAL_RCC_GetSysClockFreq+0x1c>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	08003099 	.word	0x08003099
 8003038:	080032d7 	.word	0x080032d7
 800303c:	080032d7 	.word	0x080032d7
 8003040:	080032d7 	.word	0x080032d7
 8003044:	080032d7 	.word	0x080032d7
 8003048:	080032d7 	.word	0x080032d7
 800304c:	080032d7 	.word	0x080032d7
 8003050:	080032d7 	.word	0x080032d7
 8003054:	080030bf 	.word	0x080030bf
 8003058:	080032d7 	.word	0x080032d7
 800305c:	080032d7 	.word	0x080032d7
 8003060:	080032d7 	.word	0x080032d7
 8003064:	080032d7 	.word	0x080032d7
 8003068:	080032d7 	.word	0x080032d7
 800306c:	080032d7 	.word	0x080032d7
 8003070:	080032d7 	.word	0x080032d7
 8003074:	080030c5 	.word	0x080030c5
 8003078:	080032d7 	.word	0x080032d7
 800307c:	080032d7 	.word	0x080032d7
 8003080:	080032d7 	.word	0x080032d7
 8003084:	080032d7 	.word	0x080032d7
 8003088:	080032d7 	.word	0x080032d7
 800308c:	080032d7 	.word	0x080032d7
 8003090:	080032d7 	.word	0x080032d7
 8003094:	080030cb 	.word	0x080030cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003098:	4b94      	ldr	r3, [pc, #592]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d009      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030a4:	4b91      	ldr	r3, [pc, #580]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	4a90      	ldr	r2, [pc, #576]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
 80030b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030b6:	e111      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030b8:	4b8d      	ldr	r3, [pc, #564]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030ba:	61bb      	str	r3, [r7, #24]
      break;
 80030bc:	e10e      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030be:	4b8d      	ldr	r3, [pc, #564]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030c0:	61bb      	str	r3, [r7, #24]
      break;
 80030c2:	e10b      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030c4:	4b8c      	ldr	r3, [pc, #560]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030c6:	61bb      	str	r3, [r7, #24]
      break;
 80030c8:	e108      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030ca:	4b88      	ldr	r3, [pc, #544]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030d4:	4b85      	ldr	r3, [pc, #532]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030e0:	4b82      	ldr	r3, [pc, #520]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030ea:	4b80      	ldr	r3, [pc, #512]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ee:	08db      	lsrs	r3, r3, #3
 80030f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003102:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80e1 	beq.w	80032d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b02      	cmp	r3, #2
 8003112:	f000 8083 	beq.w	800321c <HAL_RCC_GetSysClockFreq+0x204>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b02      	cmp	r3, #2
 800311a:	f200 80a1 	bhi.w	8003260 <HAL_RCC_GetSysClockFreq+0x248>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x114>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d056      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800312a:	e099      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800312c:	4b6f      	ldr	r3, [pc, #444]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d02d      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003138:	4b6c      	ldr	r3, [pc, #432]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	08db      	lsrs	r3, r3, #3
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	4a6b      	ldr	r2, [pc, #428]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
 8003148:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	ee07 3a90 	vmov	s15, r3
 8003150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003162:	4b62      	ldr	r3, [pc, #392]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003172:	ed97 6a02 	vldr	s12, [r7, #8]
 8003176:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800317a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003192:	e087      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003300 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a6:	4b51      	ldr	r3, [pc, #324]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80031be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031d6:	e065      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ea:	4b40      	ldr	r3, [pc, #256]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80031fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800320e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003216:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800321a:	e043      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003226:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2f0>
 800322a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322e:	4b2f      	ldr	r3, [pc, #188]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003242:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800324a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800325e:	e021      	b.n	80032a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2ec>
 800326e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003272:	4b1e      	ldr	r3, [pc, #120]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003282:	ed97 6a02 	vldr	s12, [r7, #8]
 8003286:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800328a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800329a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032a4:	4b11      	ldr	r3, [pc, #68]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	0a5b      	lsrs	r3, r3, #9
 80032aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ae:	3301      	adds	r3, #1
 80032b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	ee07 3a90 	vmov	s15, r3
 80032b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80032c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c8:	ee17 3a90 	vmov	r3, s15
 80032cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032ce:	e005      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61bb      	str	r3, [r7, #24]
      break;
 80032d4:	e002      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032d6:	4b07      	ldr	r3, [pc, #28]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032d8:	61bb      	str	r3, [r7, #24]
      break;
 80032da:	bf00      	nop
  }

  return sysclockfreq;
 80032dc:	69bb      	ldr	r3, [r7, #24]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3724      	adds	r7, #36	@ 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	58024400 	.word	0x58024400
 80032f0:	03d09000 	.word	0x03d09000
 80032f4:	003d0900 	.word	0x003d0900
 80032f8:	007a1200 	.word	0x007a1200
 80032fc:	46000000 	.word	0x46000000
 8003300:	4c742400 	.word	0x4c742400
 8003304:	4a742400 	.word	0x4a742400
 8003308:	4af42400 	.word	0x4af42400

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003312:	f7ff fe81 	bl	8003018 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_RCC_GetHCLKFreq+0x50>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	490f      	ldr	r1, [pc, #60]	@ (8003360 <HAL_RCC_GetHCLKFreq+0x54>)
 8003324:	5ccb      	ldrb	r3, [r1, r3]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	fa22 f303 	lsr.w	r3, r2, r3
 800332e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003330:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <HAL_RCC_GetHCLKFreq+0x50>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 030f 	and.w	r3, r3, #15
 8003338:	4a09      	ldr	r2, [pc, #36]	@ (8003360 <HAL_RCC_GetHCLKFreq+0x54>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	4a07      	ldr	r2, [pc, #28]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x58>)
 8003348:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800334a:	4a07      	ldr	r2, [pc, #28]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x5c>)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003350:	4b04      	ldr	r3, [pc, #16]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x58>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	58024400 	.word	0x58024400
 8003360:	080086e0 	.word	0x080086e0
 8003364:	24000004 	.word	0x24000004
 8003368:	24000000 	.word	0x24000000

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003370:	f7ff ffcc 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4904      	ldr	r1, [pc, #16]	@ (8003394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	58024400 	.word	0x58024400
 8003394:	080086e0 	.word	0x080086e0

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800339c:	f7ff ffb6 	bl	800330c <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4904      	ldr	r1, [pc, #16]	@ (80033c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	58024400 	.word	0x58024400
 80033c0:	080086e0 	.word	0x080086e0

080033c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b0c8      	sub	sp, #288	@ 0x120
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033d0:	2300      	movs	r3, #0
 80033d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033d6:	2300      	movs	r3, #0
 80033d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033e8:	2500      	movs	r5, #0
 80033ea:	ea54 0305 	orrs.w	r3, r4, r5
 80033ee:	d049      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033fa:	d02f      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003400:	d828      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003402:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003406:	d01a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003408:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800340c:	d822      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003412:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003416:	d007      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003418:	e01c      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341a:	4ba7      	ldr	r3, [pc, #668]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800341c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341e:	4aa6      	ldr	r2, [pc, #664]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003424:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003426:	e01a      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800342c:	3308      	adds	r3, #8
 800342e:	2102      	movs	r1, #2
 8003430:	4618      	mov	r0, r3
 8003432:	f001 fc43 	bl	8004cbc <RCCEx_PLL2_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800343c:	e00f      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800343e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003442:	3328      	adds	r3, #40	@ 0x28
 8003444:	2102      	movs	r1, #2
 8003446:	4618      	mov	r0, r3
 8003448:	f001 fcea 	bl	8004e20 <RCCEx_PLL3_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003452:	e004      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800345a:	e000      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800345c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800345e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003466:	4b94      	ldr	r3, [pc, #592]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800346e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003474:	4a90      	ldr	r2, [pc, #576]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003476:	430b      	orrs	r3, r1
 8003478:	6513      	str	r3, [r2, #80]	@ 0x50
 800347a:	e003      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003480:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003490:	f04f 0900 	mov.w	r9, #0
 8003494:	ea58 0309 	orrs.w	r3, r8, r9
 8003498:	d047      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800349a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800349e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d82a      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034a4:	a201      	add	r2, pc, #4	@ (adr r2, 80034ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034aa:	bf00      	nop
 80034ac:	080034c1 	.word	0x080034c1
 80034b0:	080034cf 	.word	0x080034cf
 80034b4:	080034e5 	.word	0x080034e5
 80034b8:	08003503 	.word	0x08003503
 80034bc:	08003503 	.word	0x08003503
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c0:	4b7d      	ldr	r3, [pc, #500]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	4a7c      	ldr	r2, [pc, #496]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034cc:	e01a      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034d2:	3308      	adds	r3, #8
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 fbf0 	bl	8004cbc <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e2:	e00f      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034e8:	3328      	adds	r3, #40	@ 0x28
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 fc97 	bl	8004e20 <RCCEx_PLL3_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034f8:	e004      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003500:	e000      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003504:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800350c:	4b6a      	ldr	r3, [pc, #424]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800350e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003510:	f023 0107 	bic.w	r1, r3, #7
 8003514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	4a67      	ldr	r2, [pc, #412]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800351c:	430b      	orrs	r3, r1
 800351e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003526:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800352a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003536:	f04f 0b00 	mov.w	fp, #0
 800353a:	ea5a 030b 	orrs.w	r3, sl, fp
 800353e:	d054      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003546:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800354a:	d036      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800354c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003550:	d82f      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003556:	d032      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800355c:	d829      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800355e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003560:	d02f      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003562:	2bc0      	cmp	r3, #192	@ 0xc0
 8003564:	d825      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003566:	2b80      	cmp	r3, #128	@ 0x80
 8003568:	d018      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800356a:	2b80      	cmp	r3, #128	@ 0x80
 800356c:	d821      	bhi.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003572:	2b40      	cmp	r3, #64	@ 0x40
 8003574:	d007      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003576:	e01c      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003578:	4b4f      	ldr	r3, [pc, #316]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800357a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357c:	4a4e      	ldr	r2, [pc, #312]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003584:	e01e      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800358a:	3308      	adds	r3, #8
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f001 fb94 	bl	8004cbc <RCCEx_PLL2_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800359a:	e013      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800359c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035a0:	3328      	adds	r3, #40	@ 0x28
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 fc3b 	bl	8004e20 <RCCEx_PLL3_Config>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80035b0:	e008      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80035b8:	e004      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035ba:	bf00      	nop
 80035bc:	e002      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80035cc:	4b3a      	ldr	r3, [pc, #232]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80035d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035da:	4a37      	ldr	r2, [pc, #220]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035dc:	430b      	orrs	r3, r1
 80035de:	6513      	str	r3, [r2, #80]	@ 0x50
 80035e0:	e003      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80035ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80035f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003600:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003604:	460b      	mov	r3, r1
 8003606:	4313      	orrs	r3, r2
 8003608:	d05c      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800360a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003614:	d03b      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003616:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800361a:	d834      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800361c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003620:	d037      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003626:	d82e      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003628:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800362c:	d033      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800362e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003632:	d828      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003638:	d01a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363e:	d822      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003648:	d007      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800364a:	e01c      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800364c:	4b1a      	ldr	r3, [pc, #104]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	4a19      	ldr	r2, [pc, #100]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003658:	e01e      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800365a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800365e:	3308      	adds	r3, #8
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fb2a 	bl	8004cbc <RCCEx_PLL2_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800366e:	e013      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003674:	3328      	adds	r3, #40	@ 0x28
 8003676:	2100      	movs	r1, #0
 8003678:	4618      	mov	r0, r3
 800367a:	f001 fbd1 	bl	8004e20 <RCCEx_PLL3_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003684:	e008      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800368c:	e004      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800368e:	bf00      	nop
 8003690:	e002      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003692:	bf00      	nop
 8003694:	e000      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003698:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10d      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80036a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ae:	4a02      	ldr	r2, [pc, #8]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80036b4:	e006      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80036b6:	bf00      	nop
 80036b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80036de:	460b      	mov	r3, r1
 80036e0:	4313      	orrs	r3, r2
 80036e2:	d03a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80036e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ea:	2b30      	cmp	r3, #48	@ 0x30
 80036ec:	d01f      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80036ee:	2b30      	cmp	r3, #48	@ 0x30
 80036f0:	d819      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d00c      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d815      	bhi.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d019      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d111      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003702:	4bae      	ldr	r3, [pc, #696]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003706:	4aad      	ldr	r2, [pc, #692]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800370e:	e011      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003714:	3308      	adds	r3, #8
 8003716:	2102      	movs	r1, #2
 8003718:	4618      	mov	r0, r3
 800371a:	f001 facf 	bl	8004cbc <RCCEx_PLL2_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003724:	e006      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800372c:	e002      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003734:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800373c:	4b9f      	ldr	r3, [pc, #636]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800373e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003740:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374a:	4a9c      	ldr	r2, [pc, #624]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800374c:	430b      	orrs	r3, r1
 800374e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003750:	e003      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003752:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003756:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800375a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003766:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800376a:	2300      	movs	r3, #0
 800376c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003770:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003774:	460b      	mov	r3, r1
 8003776:	4313      	orrs	r3, r2
 8003778:	d051      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800377a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800377e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003780:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003784:	d035      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003786:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800378a:	d82e      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 800378c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003790:	d031      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003792:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003796:	d828      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800379c:	d01a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800379e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a2:	d822      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x426>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80037a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ac:	d007      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80037ae:	e01c      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b0:	4b82      	ldr	r3, [pc, #520]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b4:	4a81      	ldr	r2, [pc, #516]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037bc:	e01c      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037c2:	3308      	adds	r3, #8
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 fa78 	bl	8004cbc <RCCEx_PLL2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037d2:	e011      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037d8:	3328      	adds	r3, #40	@ 0x28
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 fb1f 	bl	8004e20 <RCCEx_PLL3_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037e8:	e006      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80037f0:	e002      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80037f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003800:	4b6e      	ldr	r3, [pc, #440]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003804:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003808:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800380c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800380e:	4a6b      	ldr	r2, [pc, #428]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003810:	430b      	orrs	r3, r1
 8003812:	6513      	str	r3, [r2, #80]	@ 0x50
 8003814:	e003      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003816:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800381a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800381e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800382a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800382e:	2300      	movs	r3, #0
 8003830:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003834:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003838:	460b      	mov	r3, r1
 800383a:	4313      	orrs	r3, r2
 800383c:	d053      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800383e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003842:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003848:	d033      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800384a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800384e:	d82c      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003850:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003854:	d02f      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003856:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800385a:	d826      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800385c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003860:	d02b      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003862:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003866:	d820      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800386c:	d012      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800386e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003872:	d81a      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d022      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387c:	d115      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800387e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003882:	3308      	adds	r3, #8
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f001 fa18 	bl	8004cbc <RCCEx_PLL2_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003892:	e015      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003898:	3328      	adds	r3, #40	@ 0x28
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f001 fabf 	bl	8004e20 <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038a8:	e00a      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038b0:	e006      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038b2:	bf00      	nop
 80038b4:	e004      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038c8:	4b3c      	ldr	r3, [pc, #240]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d6:	4a39      	ldr	r2, [pc, #228]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	6513      	str	r3, [r2, #80]	@ 0x50
 80038dc:	e003      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038f6:	2300      	movs	r3, #0
 80038f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003900:	460b      	mov	r3, r1
 8003902:	4313      	orrs	r3, r2
 8003904:	d060      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800390a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800390e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003912:	d039      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003914:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003918:	d832      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800391a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800391e:	d035      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003920:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003924:	d82c      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392a:	d031      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003930:	d826      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003932:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003936:	d02d      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003938:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800393c:	d820      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800393e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003942:	d012      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003948:	d81a      	bhi.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d024      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800394e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003952:	d115      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003958:	3308      	adds	r3, #8
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f001 f9ad 	bl	8004cbc <RCCEx_PLL2_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003968:	e017      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800396a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800396e:	3328      	adds	r3, #40	@ 0x28
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f001 fa54 	bl	8004e20 <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800397e:	e00c      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003986:	e008      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003988:	bf00      	nop
 800398a:	e006      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800398c:	bf00      	nop
 800398e:	e004      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003990:	bf00      	nop
 8003992:	e002      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003994:	bf00      	nop
 8003996:	e000      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10e      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039b2:	4a02      	ldr	r2, [pc, #8]	@ (80039bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039b8:	e006      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80039ba:	bf00      	nop
 80039bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80039de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039e2:	460b      	mov	r3, r1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	d037      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f2:	d00e      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80039f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f8:	d816      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d018      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80039fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a02:	d111      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a04:	4bc4      	ldr	r3, [pc, #784]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	4ac3      	ldr	r2, [pc, #780]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a10:	e00f      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a16:	3308      	adds	r3, #8
 8003a18:	2101      	movs	r1, #1
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f001 f94e 	bl	8004cbc <RCCEx_PLL2_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a26:	e004      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a3a:	4bb7      	ldr	r3, [pc, #732]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a48:	4ab3      	ldr	r2, [pc, #716]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a4e:	e003      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a54:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	d039      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d81c      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a82:	a201      	add	r2, pc, #4	@ (adr r2, 8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003ac5 	.word	0x08003ac5
 8003a8c:	08003a99 	.word	0x08003a99
 8003a90:	08003aa7 	.word	0x08003aa7
 8003a94:	08003ac5 	.word	0x08003ac5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a98:	4b9f      	ldr	r3, [pc, #636]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	4a9e      	ldr	r2, [pc, #632]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003aa4:	e00f      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aaa:	3308      	adds	r3, #8
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 f904 	bl	8004cbc <RCCEx_PLL2_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003aba:	e004      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ace:	4b92      	ldr	r3, [pc, #584]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad2:	f023 0103 	bic.w	r1, r3, #3
 8003ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003adc:	4a8e      	ldr	r2, [pc, #568]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ae2:	e003      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ae8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003af8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b06:	460b      	mov	r3, r1
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f000 8099 	beq.w	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b0e:	4b83      	ldr	r3, [pc, #524]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a82      	ldr	r2, [pc, #520]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b1a:	f7fe f955 	bl	8001dc8 <HAL_GetTick>
 8003b1e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b22:	e00b      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b24:	f7fe f950 	bl	8001dc8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b64      	cmp	r3, #100	@ 0x64
 8003b32:	d903      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b3a:	e005      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b3c:	4b77      	ldr	r3, [pc, #476]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ed      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b48:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d173      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b50:	4b71      	ldr	r3, [pc, #452]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b5c:	4053      	eors	r3, r2
 8003b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d015      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b66:	4b6c      	ldr	r3, [pc, #432]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b72:	4b69      	ldr	r3, [pc, #420]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	4a68      	ldr	r2, [pc, #416]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b7e:	4b66      	ldr	r3, [pc, #408]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	4a65      	ldr	r2, [pc, #404]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b8a:	4a63      	ldr	r2, [pc, #396]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b9e:	d118      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba0:	f7fe f912 	bl	8001dc8 <HAL_GetTick>
 8003ba4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ba8:	e00d      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fe f90d 	bl	8001dc8 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003bb4:	1ad2      	subs	r2, r2, r3
 8003bb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d903      	bls.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003bc4:	e005      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bc6:	4b54      	ldr	r3, [pc, #336]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0eb      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003bd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d129      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bea:	d10e      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003bec:	4b4a      	ldr	r3, [pc, #296]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bfc:	091a      	lsrs	r2, r3, #4
 8003bfe:	4b48      	ldr	r3, [pc, #288]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	4a45      	ldr	r2, [pc, #276]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6113      	str	r3, [r2, #16]
 8003c08:	e005      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003c0a:	4b43      	ldr	r3, [pc, #268]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	4a42      	ldr	r2, [pc, #264]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c14:	6113      	str	r3, [r2, #16]
 8003c16:	4b40      	ldr	r3, [pc, #256]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c26:	4a3c      	ldr	r2, [pc, #240]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c2c:	e008      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003c36:	e003      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c3c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f002 0301 	and.w	r3, r2, #1
 8003c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f000 8090 	beq.w	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c6a:	2b28      	cmp	r3, #40	@ 0x28
 8003c6c:	d870      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003d59 	.word	0x08003d59
 8003c78:	08003d51 	.word	0x08003d51
 8003c7c:	08003d51 	.word	0x08003d51
 8003c80:	08003d51 	.word	0x08003d51
 8003c84:	08003d51 	.word	0x08003d51
 8003c88:	08003d51 	.word	0x08003d51
 8003c8c:	08003d51 	.word	0x08003d51
 8003c90:	08003d51 	.word	0x08003d51
 8003c94:	08003d25 	.word	0x08003d25
 8003c98:	08003d51 	.word	0x08003d51
 8003c9c:	08003d51 	.word	0x08003d51
 8003ca0:	08003d51 	.word	0x08003d51
 8003ca4:	08003d51 	.word	0x08003d51
 8003ca8:	08003d51 	.word	0x08003d51
 8003cac:	08003d51 	.word	0x08003d51
 8003cb0:	08003d51 	.word	0x08003d51
 8003cb4:	08003d3b 	.word	0x08003d3b
 8003cb8:	08003d51 	.word	0x08003d51
 8003cbc:	08003d51 	.word	0x08003d51
 8003cc0:	08003d51 	.word	0x08003d51
 8003cc4:	08003d51 	.word	0x08003d51
 8003cc8:	08003d51 	.word	0x08003d51
 8003ccc:	08003d51 	.word	0x08003d51
 8003cd0:	08003d51 	.word	0x08003d51
 8003cd4:	08003d59 	.word	0x08003d59
 8003cd8:	08003d51 	.word	0x08003d51
 8003cdc:	08003d51 	.word	0x08003d51
 8003ce0:	08003d51 	.word	0x08003d51
 8003ce4:	08003d51 	.word	0x08003d51
 8003ce8:	08003d51 	.word	0x08003d51
 8003cec:	08003d51 	.word	0x08003d51
 8003cf0:	08003d51 	.word	0x08003d51
 8003cf4:	08003d59 	.word	0x08003d59
 8003cf8:	08003d51 	.word	0x08003d51
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	08003d51 	.word	0x08003d51
 8003d08:	08003d51 	.word	0x08003d51
 8003d0c:	08003d51 	.word	0x08003d51
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d59 	.word	0x08003d59
 8003d18:	58024400 	.word	0x58024400
 8003d1c:	58024800 	.word	0x58024800
 8003d20:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d28:	3308      	adds	r3, #8
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 ffc5 	bl	8004cbc <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d38:	e00f      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d3e:	3328      	adds	r3, #40	@ 0x28
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f001 f86c 	bl	8004e20 <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d4e:	e004      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d62:	4bc0      	ldr	r3, [pc, #768]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d72:	4abc      	ldr	r2, [pc, #752]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d78:	e003      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d7e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	f002 0302 	and.w	r3, r2, #2
 8003d8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d92:	2300      	movs	r3, #0
 8003d94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d98:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	d043      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d824      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003dae:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003e01 	.word	0x08003e01
 8003db8:	08003dcd 	.word	0x08003dcd
 8003dbc:	08003de3 	.word	0x08003de3
 8003dc0:	08003e01 	.word	0x08003e01
 8003dc4:	08003e01 	.word	0x08003e01
 8003dc8:	08003e01 	.word	0x08003e01
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 ff71 	bl	8004cbc <RCCEx_PLL2_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003de0:	e00f      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de6:	3328      	adds	r3, #40	@ 0x28
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 f818 	bl	8004e20 <RCCEx_PLL3_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003df6:	e004      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e0a:	4b96      	ldr	r3, [pc, #600]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0e:	f023 0107 	bic.w	r1, r3, #7
 8003e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e1a:	4a92      	ldr	r2, [pc, #584]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e20:	e003      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f002 0304 	and.w	r3, r2, #4
 8003e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e40:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4313      	orrs	r3, r2
 8003e48:	d043      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	d824      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003e56:	a201      	add	r2, pc, #4	@ (adr r2, 8003e5c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003ea9 	.word	0x08003ea9
 8003e60:	08003e75 	.word	0x08003e75
 8003e64:	08003e8b 	.word	0x08003e8b
 8003e68:	08003ea9 	.word	0x08003ea9
 8003e6c:	08003ea9 	.word	0x08003ea9
 8003e70:	08003ea9 	.word	0x08003ea9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e78:	3308      	adds	r3, #8
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 ff1d 	bl	8004cbc <RCCEx_PLL2_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e88:	e00f      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e8e:	3328      	adds	r3, #40	@ 0x28
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 ffc4 	bl	8004e20 <RCCEx_PLL3_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e9e:	e004      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ea6:	e000      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb2:	4b6c      	ldr	r3, [pc, #432]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	f023 0107 	bic.w	r1, r3, #7
 8003eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ec2:	4a68      	ldr	r2, [pc, #416]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ec4:	430b      	orrs	r3, r1
 8003ec6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ec8:	e003      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ece:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f002 0320 	and.w	r3, r2, #32
 8003ede:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ee8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003eec:	460b      	mov	r3, r1
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	d055      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003efe:	d033      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f04:	d82c      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0a:	d02f      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f10:	d826      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f16:	d02b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f1c:	d820      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f22:	d012      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003f24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f28:	d81a      	bhi.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d022      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003f2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f32:	d115      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f38:	3308      	adds	r3, #8
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 febd 	bl	8004cbc <RCCEx_PLL2_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f48:	e015      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f4e:	3328      	adds	r3, #40	@ 0x28
 8003f50:	2102      	movs	r1, #2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 ff64 	bl	8004e20 <RCCEx_PLL3_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f66:	e006      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f68:	bf00      	nop
 8003f6a:	e004      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f6c:	bf00      	nop
 8003f6e:	e002      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f70:	bf00      	nop
 8003f72:	e000      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10b      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7e:	4b39      	ldr	r3, [pc, #228]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f8e:	4a35      	ldr	r2, [pc, #212]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f94:	e003      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003fb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	d058      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fc6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fca:	d033      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003fcc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fd0:	d82c      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd6:	d02f      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fdc:	d826      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003fde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe2:	d02b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003fe4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe8:	d820      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003fea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fee:	d012      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff4:	d81a      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d022      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffe:	d115      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004004:	3308      	adds	r3, #8
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fe57 	bl	8004cbc <RCCEx_PLL2_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004014:	e015      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800401a:	3328      	adds	r3, #40	@ 0x28
 800401c:	2102      	movs	r1, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fefe 	bl	8004e20 <RCCEx_PLL3_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800402a:	e00a      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004032:	e006      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004034:	bf00      	nop
 8004036:	e004      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004038:	bf00      	nop
 800403a:	e002      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004042:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10e      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800404a:	4b06      	ldr	r3, [pc, #24]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800404c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004056:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800405a:	4a02      	ldr	r2, [pc, #8]	@ (8004064 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800405c:	430b      	orrs	r3, r1
 800405e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004062:	bf00      	nop
 8004064:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800406c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800407c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004080:	2300      	movs	r3, #0
 8004082:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004086:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800408a:	460b      	mov	r3, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	d055      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004090:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004094:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004098:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800409c:	d033      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800409e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040a2:	d82c      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a8:	d02f      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80040aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ae:	d826      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040b4:	d02b      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80040b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040ba:	d820      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040c0:	d012      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80040c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040c6:	d81a      	bhi.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d022      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80040cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d0:	d115      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040d6:	3308      	adds	r3, #8
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fdee 	bl	8004cbc <RCCEx_PLL2_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040e6:	e015      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fe95 	bl	8004e20 <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040fc:	e00a      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004104:	e006      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004106:	bf00      	nop
 8004108:	e004      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800410a:	bf00      	nop
 800410c:	e002      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004114:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800411c:	4ba1      	ldr	r3, [pc, #644]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004120:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004124:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004128:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800412c:	4a9d      	ldr	r2, [pc, #628]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800412e:	430b      	orrs	r3, r1
 8004130:	6593      	str	r3, [r2, #88]	@ 0x58
 8004132:	e003      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004138:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800413c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	f002 0308 	and.w	r3, r2, #8
 8004148:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004152:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004156:	460b      	mov	r3, r1
 8004158:	4313      	orrs	r3, r2
 800415a:	d01e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800415c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004168:	d10c      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800416a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800416e:	3328      	adds	r3, #40	@ 0x28
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fe54 	bl	8004e20 <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004184:	4b87      	ldr	r3, [pc, #540]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004188:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800418c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004194:	4a83      	ldr	r2, [pc, #524]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004196:	430b      	orrs	r3, r1
 8004198:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f002 0310 	and.w	r3, r2, #16
 80041a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041aa:	2300      	movs	r3, #0
 80041ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80041b4:	460b      	mov	r3, r1
 80041b6:	4313      	orrs	r3, r2
 80041b8:	d01e      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c6:	d10c      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041cc:	3328      	adds	r3, #40	@ 0x28
 80041ce:	2102      	movs	r1, #2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fe25 	bl	8004e20 <RCCEx_PLL3_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041e2:	4b70      	ldr	r3, [pc, #448]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041f2:	4a6c      	ldr	r2, [pc, #432]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004200:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800420e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004212:	460b      	mov	r3, r1
 8004214:	4313      	orrs	r3, r2
 8004216:	d03e      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800421c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004220:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004224:	d022      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004226:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800422a:	d81b      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d00b      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004236:	e015      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800423c:	3308      	adds	r3, #8
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fd3b 	bl	8004cbc <RCCEx_PLL2_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800424c:	e00f      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800424e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004252:	3328      	adds	r3, #40	@ 0x28
 8004254:	2102      	movs	r1, #2
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fde2 	bl	8004e20 <RCCEx_PLL3_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004262:	e004      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800426a:	e000      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800426c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004276:	4b4b      	ldr	r3, [pc, #300]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800427e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004282:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004286:	4a47      	ldr	r2, [pc, #284]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004288:	430b      	orrs	r3, r1
 800428a:	6593      	str	r3, [r2, #88]	@ 0x58
 800428c:	e003      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004292:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042a4:	2300      	movs	r3, #0
 80042a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042ac:	460b      	mov	r3, r1
 80042ae:	4313      	orrs	r3, r2
 80042b0:	d03b      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042be:	d01f      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80042c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042c4:	d818      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80042c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ca:	d003      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80042cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042d0:	d007      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80042d2:	e011      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d4:	4b33      	ldr	r3, [pc, #204]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	4a32      	ldr	r2, [pc, #200]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042e0:	e00f      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042e6:	3328      	adds	r3, #40	@ 0x28
 80042e8:	2101      	movs	r1, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fd98 	bl	8004e20 <RCCEx_PLL3_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80042f6:	e004      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042fe:	e000      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004302:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10b      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800430a:	4b26      	ldr	r3, [pc, #152]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800430c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431a:	4a22      	ldr	r2, [pc, #136]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800431c:	430b      	orrs	r3, r1
 800431e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004320:	e003      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004322:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004326:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800432a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004336:	673b      	str	r3, [r7, #112]	@ 0x70
 8004338:	2300      	movs	r3, #0
 800433a:	677b      	str	r3, [r7, #116]	@ 0x74
 800433c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004340:	460b      	mov	r3, r1
 8004342:	4313      	orrs	r3, r2
 8004344:	d034      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800434a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004354:	d007      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004356:	e011      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004358:	4b12      	ldr	r3, [pc, #72]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435c:	4a11      	ldr	r2, [pc, #68]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800435e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004364:	e00e      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800436a:	3308      	adds	r3, #8
 800436c:	2102      	movs	r1, #2
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fca4 	bl	8004cbc <RCCEx_PLL2_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800437a:	e003      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004384:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800438e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004390:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439a:	4a02      	ldr	r2, [pc, #8]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800439c:	430b      	orrs	r3, r1
 800439e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043a0:	e006      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80043a2:	bf00      	nop
 80043a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80043bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043be:	2300      	movs	r3, #0
 80043c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d00c      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d0:	3328      	adds	r3, #40	@ 0x28
 80043d2:	2102      	movs	r1, #2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fd23 	bl	8004e20 <RCCEx_PLL3_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80043f4:	2300      	movs	r3, #0
 80043f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80043f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80043fc:	460b      	mov	r3, r1
 80043fe:	4313      	orrs	r3, r2
 8004400:	d038      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800440e:	d018      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004410:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004414:	d811      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800441a:	d014      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800441c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004420:	d80b      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d011      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442a:	d106      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442c:	4bc3      	ldr	r3, [pc, #780]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	4ac2      	ldr	r2, [pc, #776]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004438:	e008      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004440:	e004      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004442:	bf00      	nop
 8004444:	e002      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004446:	bf00      	nop
 8004448:	e000      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800444a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004454:	4bb9      	ldr	r3, [pc, #740]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004458:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004464:	4ab5      	ldr	r2, [pc, #724]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004466:	430b      	orrs	r3, r1
 8004468:	6553      	str	r3, [r2, #84]	@ 0x54
 800446a:	e003      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004470:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004480:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004482:	2300      	movs	r3, #0
 8004484:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004486:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800448a:	460b      	mov	r3, r1
 800448c:	4313      	orrs	r3, r2
 800448e:	d009      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004490:	4baa      	ldr	r3, [pc, #680]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004494:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800449c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800449e:	4aa7      	ldr	r2, [pc, #668]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044a0:	430b      	orrs	r3, r1
 80044a2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80044b2:	2300      	movs	r3, #0
 80044b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80044b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80044ba:	460b      	mov	r3, r1
 80044bc:	4313      	orrs	r3, r2
 80044be:	d009      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044c0:	4b9e      	ldr	r3, [pc, #632]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	4a9b      	ldr	r2, [pc, #620]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80044d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80044e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e2:	2300      	movs	r3, #0
 80044e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044ea:	460b      	mov	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80044f0:	4b92      	ldr	r3, [pc, #584]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80044f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fe:	4a8f      	ldr	r2, [pc, #572]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004500:	430b      	orrs	r3, r1
 8004502:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004510:	643b      	str	r3, [r7, #64]	@ 0x40
 8004512:	2300      	movs	r3, #0
 8004514:	647b      	str	r3, [r7, #68]	@ 0x44
 8004516:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800451a:	460b      	mov	r3, r1
 800451c:	4313      	orrs	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004520:	4b86      	ldr	r3, [pc, #536]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	4a85      	ldr	r2, [pc, #532]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004526:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800452a:	6113      	str	r3, [r2, #16]
 800452c:	4b83      	ldr	r3, [pc, #524]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800452e:	6919      	ldr	r1, [r3, #16]
 8004530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004534:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004538:	4a80      	ldr	r2, [pc, #512]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800453a:	430b      	orrs	r3, r1
 800453c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800453e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800454a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800454c:	2300      	movs	r3, #0
 800454e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004550:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d009      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800455a:	4b78      	ldr	r3, [pc, #480]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800455c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004568:	4a74      	ldr	r2, [pc, #464]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800456a:	430b      	orrs	r3, r1
 800456c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800456e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800457a:	633b      	str	r3, [r7, #48]	@ 0x30
 800457c:	2300      	movs	r3, #0
 800457e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004580:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800458a:	4b6c      	ldr	r3, [pc, #432]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800459a:	4a68      	ldr	r2, [pc, #416]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800459c:	430b      	orrs	r3, r1
 800459e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	2100      	movs	r1, #0
 80045aa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045b6:	460b      	mov	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	d011      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045c0:	3308      	adds	r3, #8
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fb79 	bl	8004cbc <RCCEx_PLL2_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	2100      	movs	r1, #0
 80045ea:	6239      	str	r1, [r7, #32]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045f6:	460b      	mov	r3, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	d011      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004600:	3308      	adds	r3, #8
 8004602:	2101      	movs	r1, #1
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fb59 	bl	8004cbc <RCCEx_PLL2_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004610:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800461c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	2100      	movs	r1, #0
 800462a:	61b9      	str	r1, [r7, #24]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004636:	460b      	mov	r3, r1
 8004638:	4313      	orrs	r3, r2
 800463a:	d011      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800463c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004640:	3308      	adds	r3, #8
 8004642:	2102      	movs	r1, #2
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fb39 	bl	8004cbc <RCCEx_PLL2_Config>
 800464a:	4603      	mov	r3, r0
 800464c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004650:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800465c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	2100      	movs	r1, #0
 800466a:	6139      	str	r1, [r7, #16]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004676:	460b      	mov	r3, r1
 8004678:	4313      	orrs	r3, r2
 800467a:	d011      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800467c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004680:	3328      	adds	r3, #40	@ 0x28
 8004682:	2100      	movs	r1, #0
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fbcb 	bl	8004e20 <RCCEx_PLL3_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004690:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800469c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	2100      	movs	r1, #0
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046b6:	460b      	mov	r3, r1
 80046b8:	4313      	orrs	r3, r2
 80046ba:	d011      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046c0:	3328      	adds	r3, #40	@ 0x28
 80046c2:	2101      	movs	r1, #1
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fbab 	bl	8004e20 <RCCEx_PLL3_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80046d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	2100      	movs	r1, #0
 80046ea:	6039      	str	r1, [r7, #0]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046f6:	460b      	mov	r3, r1
 80046f8:	4313      	orrs	r3, r2
 80046fa:	d011      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004700:	3328      	adds	r3, #40	@ 0x28
 8004702:	2102      	movs	r1, #2
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fb8b 	bl	8004e20 <RCCEx_PLL3_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004710:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004718:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800471c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004720:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e000      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
}
 800472e:	4618      	mov	r0, r3
 8004730:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004734:	46bd      	mov	sp, r7
 8004736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800473a:	bf00      	nop
 800473c:	58024400 	.word	0x58024400

08004740 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004744:	f7fe fde2 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4904      	ldr	r1, [pc, #16]	@ (8004768 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	58024400 	.word	0x58024400
 8004768:	080086e0 	.word	0x080086e0

0800476c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	@ 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004774:	4ba1      	ldr	r3, [pc, #644]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800477e:	4b9f      	ldr	r3, [pc, #636]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	0b1b      	lsrs	r3, r3, #12
 8004784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004788:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800478a:	4b9c      	ldr	r3, [pc, #624]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004796:	4b99      	ldr	r3, [pc, #612]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8111 	beq.w	80049dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	f000 8083 	beq.w	80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	f200 80a1 	bhi.w	800490c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d056      	beq.n	8004884 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047d6:	e099      	b.n	800490c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047d8:	4b88      	ldr	r3, [pc, #544]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d02d      	beq.n	8004840 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047e4:	4b85      	ldr	r3, [pc, #532]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	08db      	lsrs	r3, r3, #3
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	4a84      	ldr	r2, [pc, #528]	@ (8004a00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800480e:	4b7b      	ldr	r3, [pc, #492]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800481e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004822:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800482e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800483e:	e087      	b.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800484e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004852:	4b6a      	ldr	r3, [pc, #424]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004862:	ed97 6a03 	vldr	s12, [r7, #12]
 8004866:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800486a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004872:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004882:	e065      	b.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b59      	ldr	r3, [pc, #356]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048c6:	e043      	b.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b48      	ldr	r3, [pc, #288]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800490a:	e021      	b.n	8004950 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b37      	ldr	r3, [pc, #220]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004932:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800494e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004950:	4b2a      	ldr	r3, [pc, #168]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	0a5b      	lsrs	r3, r3, #9
 8004956:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004966:	ee37 7a87 	vadd.f32	s14, s15, s14
 800496a:	edd7 6a07 	vldr	s13, [r7, #28]
 800496e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004976:	ee17 2a90 	vmov	r2, s15
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800497e:	4b1f      	ldr	r3, [pc, #124]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004982:	0c1b      	lsrs	r3, r3, #16
 8004984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004990:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004994:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004998:	edd7 6a07 	vldr	s13, [r7, #28]
 800499c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a4:	ee17 2a90 	vmov	r2, s15
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049ac:	4b13      	ldr	r3, [pc, #76]	@ (80049fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b0:	0e1b      	lsrs	r3, r3, #24
 80049b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d2:	ee17 2a90 	vmov	r2, s15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049da:	e008      	b.n	80049ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
}
 80049ee:	bf00      	nop
 80049f0:	3724      	adds	r7, #36	@ 0x24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	58024400 	.word	0x58024400
 8004a00:	03d09000 	.word	0x03d09000
 8004a04:	46000000 	.word	0x46000000
 8004a08:	4c742400 	.word	0x4c742400
 8004a0c:	4a742400 	.word	0x4a742400
 8004a10:	4af42400 	.word	0x4af42400

08004a14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b089      	sub	sp, #36	@ 0x24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a1c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a26:	4b9f      	ldr	r3, [pc, #636]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2a:	0d1b      	lsrs	r3, r3, #20
 8004a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a32:	4b9c      	ldr	r3, [pc, #624]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a3e:	4b99      	ldr	r3, [pc, #612]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	08db      	lsrs	r3, r3, #3
 8004a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8111 	beq.w	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	f000 8083 	beq.w	8004b70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	f200 80a1 	bhi.w	8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d056      	beq.n	8004b2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a7e:	e099      	b.n	8004bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a80:	4b88      	ldr	r3, [pc, #544]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d02d      	beq.n	8004ae8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a8c:	4b85      	ldr	r3, [pc, #532]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	08db      	lsrs	r3, r3, #3
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	4a84      	ldr	r2, [pc, #528]	@ (8004ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	ee07 3a90 	vmov	s15, r3
 8004aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ae6:	e087      	b.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afa:	4b6a      	ldr	r3, [pc, #424]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2a:	e065      	b.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3e:	4b59      	ldr	r3, [pc, #356]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b6e:	e043      	b.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b82:	4b48      	ldr	r3, [pc, #288]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb2:	e021      	b.n	8004bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bc6:	4b37      	ldr	r3, [pc, #220]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfc:	0a5b      	lsrs	r3, r3, #9
 8004bfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1e:	ee17 2a90 	vmov	r2, s15
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c26:	4b1f      	ldr	r3, [pc, #124]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4c:	ee17 2a90 	vmov	r2, s15
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c54:	4b13      	ldr	r3, [pc, #76]	@ (8004ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	0e1b      	lsrs	r3, r3, #24
 8004c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7a:	ee17 2a90 	vmov	r2, s15
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c82:	e008      	b.n	8004c96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
}
 8004c96:	bf00      	nop
 8004c98:	3724      	adds	r7, #36	@ 0x24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	03d09000 	.word	0x03d09000
 8004cac:	46000000 	.word	0x46000000
 8004cb0:	4c742400 	.word	0x4c742400
 8004cb4:	4a742400 	.word	0x4a742400
 8004cb8:	4af42400 	.word	0x4af42400

08004cbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cca:	4b53      	ldr	r3, [pc, #332]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d101      	bne.n	8004cda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e099      	b.n	8004e0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cda:	4b4f      	ldr	r3, [pc, #316]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a4e      	ldr	r2, [pc, #312]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004ce0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce6:	f7fd f86f 	bl	8001dc8 <HAL_GetTick>
 8004cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cec:	e008      	b.n	8004d00 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cee:	f7fd f86b 	bl	8001dc8 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e086      	b.n	8004e0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d00:	4b45      	ldr	r3, [pc, #276]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d0c:	4b42      	ldr	r3, [pc, #264]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	031b      	lsls	r3, r3, #12
 8004d1a:	493f      	ldr	r1, [pc, #252]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	025b      	lsls	r3, r3, #9
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	041b      	lsls	r3, r3, #16
 8004d3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	061b      	lsls	r3, r3, #24
 8004d4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d50:	4931      	ldr	r1, [pc, #196]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d56:	4b30      	ldr	r3, [pc, #192]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	492d      	ldr	r1, [pc, #180]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d68:	4b2b      	ldr	r3, [pc, #172]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	f023 0220 	bic.w	r2, r3, #32
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	4928      	ldr	r1, [pc, #160]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d7a:	4b27      	ldr	r3, [pc, #156]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	4a26      	ldr	r2, [pc, #152]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	f023 0310 	bic.w	r3, r3, #16
 8004d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d86:	4b24      	ldr	r3, [pc, #144]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d8a:	4b24      	ldr	r3, [pc, #144]	@ (8004e1c <RCCEx_PLL2_Config+0x160>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	69d2      	ldr	r2, [r2, #28]
 8004d92:	00d2      	lsls	r2, r2, #3
 8004d94:	4920      	ldr	r1, [pc, #128]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004da0:	f043 0310 	orr.w	r3, r3, #16
 8004da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dac:	4b1a      	ldr	r3, [pc, #104]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	4a19      	ldr	r2, [pc, #100]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004db2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004db6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004db8:	e00f      	b.n	8004dda <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d106      	bne.n	8004dce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dc0:	4b15      	ldr	r3, [pc, #84]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	4a14      	ldr	r2, [pc, #80]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dcc:	e005      	b.n	8004dda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dce:	4b12      	ldr	r3, [pc, #72]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd2:	4a11      	ldr	r2, [pc, #68]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004dd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004dda:	4b0f      	ldr	r3, [pc, #60]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a0e      	ldr	r2, [pc, #56]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004de0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de6:	f7fc ffef 	bl	8001dc8 <HAL_GetTick>
 8004dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dec:	e008      	b.n	8004e00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dee:	f7fc ffeb 	bl	8001dc8 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e006      	b.n	8004e0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e00:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	ffff0007 	.word	0xffff0007

08004e20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e2e:	4b53      	ldr	r3, [pc, #332]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d101      	bne.n	8004e3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e099      	b.n	8004f72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e3e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a4e      	ldr	r2, [pc, #312]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4a:	f7fc ffbd 	bl	8001dc8 <HAL_GetTick>
 8004e4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e50:	e008      	b.n	8004e64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e52:	f7fc ffb9 	bl	8001dc8 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e086      	b.n	8004f72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e64:	4b45      	ldr	r3, [pc, #276]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e70:	4b42      	ldr	r3, [pc, #264]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	051b      	lsls	r3, r3, #20
 8004e7e:	493f      	ldr	r1, [pc, #252]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	025b      	lsls	r3, r3, #9
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	041b      	lsls	r3, r3, #16
 8004ea2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	061b      	lsls	r3, r3, #24
 8004eb0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004eb4:	4931      	ldr	r1, [pc, #196]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004eba:	4b30      	ldr	r3, [pc, #192]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	492d      	ldr	r1, [pc, #180]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	4928      	ldr	r1, [pc, #160]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ede:	4b27      	ldr	r3, [pc, #156]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	4a26      	ldr	r2, [pc, #152]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004eea:	4b24      	ldr	r3, [pc, #144]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eee:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <RCCEx_PLL3_Config+0x160>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	69d2      	ldr	r2, [r2, #28]
 8004ef6:	00d2      	lsls	r2, r2, #3
 8004ef8:	4920      	ldr	r1, [pc, #128]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004efe:	4b1f      	ldr	r3, [pc, #124]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f02:	4a1e      	ldr	r2, [pc, #120]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d106      	bne.n	8004f1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f10:	4b1a      	ldr	r3, [pc, #104]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	4a19      	ldr	r2, [pc, #100]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f1c:	e00f      	b.n	8004f3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d106      	bne.n	8004f32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f24:	4b15      	ldr	r3, [pc, #84]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f28:	4a14      	ldr	r2, [pc, #80]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f30:	e005      	b.n	8004f3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f32:	4b12      	ldr	r3, [pc, #72]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	4a11      	ldr	r2, [pc, #68]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a0e      	ldr	r2, [pc, #56]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f4a:	f7fc ff3d 	bl	8001dc8 <HAL_GetTick>
 8004f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f50:	e008      	b.n	8004f64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f52:	f7fc ff39 	bl	8001dc8 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e006      	b.n	8004f72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f64:	4b05      	ldr	r3, [pc, #20]	@ (8004f7c <RCCEx_PLL3_Config+0x15c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f0      	beq.n	8004f52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	ffff0007 	.word	0xffff0007

08004f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e049      	b.n	800502a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d106      	bne.n	8004fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fc fba0 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f001 f9e8 	bl	8006398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e049      	b.n	80050d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f841 	bl	80050e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f001 f991 	bl	8006398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <HAL_TIM_PWM_Start+0x24>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e03c      	b.n	8005192 <HAL_TIM_PWM_Start+0x9e>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b04      	cmp	r3, #4
 800511c:	d109      	bne.n	8005132 <HAL_TIM_PWM_Start+0x3e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	bf14      	ite	ne
 800512a:	2301      	movne	r3, #1
 800512c:	2300      	moveq	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e02f      	b.n	8005192 <HAL_TIM_PWM_Start+0x9e>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b08      	cmp	r3, #8
 8005136:	d109      	bne.n	800514c <HAL_TIM_PWM_Start+0x58>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	e022      	b.n	8005192 <HAL_TIM_PWM_Start+0x9e>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d109      	bne.n	8005166 <HAL_TIM_PWM_Start+0x72>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	bf14      	ite	ne
 800515e:	2301      	movne	r3, #1
 8005160:	2300      	moveq	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	e015      	b.n	8005192 <HAL_TIM_PWM_Start+0x9e>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b10      	cmp	r3, #16
 800516a:	d109      	bne.n	8005180 <HAL_TIM_PWM_Start+0x8c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	e008      	b.n	8005192 <HAL_TIM_PWM_Start+0x9e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e0a1      	b.n	80052de <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <HAL_TIM_PWM_Start+0xb6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a8:	e023      	b.n	80051f2 <HAL_TIM_PWM_Start+0xfe>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_PWM_Start+0xc6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b8:	e01b      	b.n	80051f2 <HAL_TIM_PWM_Start+0xfe>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d104      	bne.n	80051ca <HAL_TIM_PWM_Start+0xd6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051c8:	e013      	b.n	80051f2 <HAL_TIM_PWM_Start+0xfe>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b0c      	cmp	r3, #12
 80051ce:	d104      	bne.n	80051da <HAL_TIM_PWM_Start+0xe6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051d8:	e00b      	b.n	80051f2 <HAL_TIM_PWM_Start+0xfe>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b10      	cmp	r3, #16
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0xf6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e8:	e003      	b.n	80051f2 <HAL_TIM_PWM_Start+0xfe>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2201      	movs	r2, #1
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 fefa 	bl	8006ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a38      	ldr	r2, [pc, #224]	@ (80052e8 <HAL_TIM_PWM_Start+0x1f4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <HAL_TIM_PWM_Start+0x13e>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a37      	ldr	r2, [pc, #220]	@ (80052ec <HAL_TIM_PWM_Start+0x1f8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00e      	beq.n	8005232 <HAL_TIM_PWM_Start+0x13e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a35      	ldr	r2, [pc, #212]	@ (80052f0 <HAL_TIM_PWM_Start+0x1fc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d009      	beq.n	8005232 <HAL_TIM_PWM_Start+0x13e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a34      	ldr	r2, [pc, #208]	@ (80052f4 <HAL_TIM_PWM_Start+0x200>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d004      	beq.n	8005232 <HAL_TIM_PWM_Start+0x13e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a32      	ldr	r2, [pc, #200]	@ (80052f8 <HAL_TIM_PWM_Start+0x204>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <HAL_TIM_PWM_Start+0x142>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_TIM_PWM_Start+0x144>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800524a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a25      	ldr	r2, [pc, #148]	@ (80052e8 <HAL_TIM_PWM_Start+0x1f4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d022      	beq.n	800529c <HAL_TIM_PWM_Start+0x1a8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525e:	d01d      	beq.n	800529c <HAL_TIM_PWM_Start+0x1a8>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a25      	ldr	r2, [pc, #148]	@ (80052fc <HAL_TIM_PWM_Start+0x208>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d018      	beq.n	800529c <HAL_TIM_PWM_Start+0x1a8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a24      	ldr	r2, [pc, #144]	@ (8005300 <HAL_TIM_PWM_Start+0x20c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d013      	beq.n	800529c <HAL_TIM_PWM_Start+0x1a8>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a22      	ldr	r2, [pc, #136]	@ (8005304 <HAL_TIM_PWM_Start+0x210>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <HAL_TIM_PWM_Start+0x1a8>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1a      	ldr	r2, [pc, #104]	@ (80052ec <HAL_TIM_PWM_Start+0x1f8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d009      	beq.n	800529c <HAL_TIM_PWM_Start+0x1a8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1e      	ldr	r2, [pc, #120]	@ (8005308 <HAL_TIM_PWM_Start+0x214>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_TIM_PWM_Start+0x1a8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a16      	ldr	r2, [pc, #88]	@ (80052f0 <HAL_TIM_PWM_Start+0x1fc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d115      	bne.n	80052c8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <HAL_TIM_PWM_Start+0x218>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b06      	cmp	r3, #6
 80052ac:	d015      	beq.n	80052da <HAL_TIM_PWM_Start+0x1e6>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b4:	d011      	beq.n	80052da <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c6:	e008      	b.n	80052da <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e000      	b.n	80052dc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40010400 	.word	0x40010400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40014400 	.word	0x40014400
 80052f8:	40014800 	.word	0x40014800
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00
 8005308:	40001800 	.word	0x40001800
 800530c:	00010007 	.word	0x00010007

08005310 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e049      	b.n	80053b6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f841 	bl	80053be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f001 f822 	bl	8006398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_IC_Start+0x1a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	e023      	b.n	8005436 <HAL_TIM_IC_Start+0x62>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_IC_Start+0x2a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	e01b      	b.n	8005436 <HAL_TIM_IC_Start+0x62>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b08      	cmp	r3, #8
 8005402:	d104      	bne.n	800540e <HAL_TIM_IC_Start+0x3a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800540a:	b2db      	uxtb	r3, r3
 800540c:	e013      	b.n	8005436 <HAL_TIM_IC_Start+0x62>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b0c      	cmp	r3, #12
 8005412:	d104      	bne.n	800541e <HAL_TIM_IC_Start+0x4a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e00b      	b.n	8005436 <HAL_TIM_IC_Start+0x62>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b10      	cmp	r3, #16
 8005422:	d104      	bne.n	800542e <HAL_TIM_IC_Start+0x5a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800542a:	b2db      	uxtb	r3, r3
 800542c:	e003      	b.n	8005436 <HAL_TIM_IC_Start+0x62>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005434:	b2db      	uxtb	r3, r3
 8005436:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <HAL_TIM_IC_Start+0x74>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005444:	b2db      	uxtb	r3, r3
 8005446:	e013      	b.n	8005470 <HAL_TIM_IC_Start+0x9c>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d104      	bne.n	8005458 <HAL_TIM_IC_Start+0x84>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e00b      	b.n	8005470 <HAL_TIM_IC_Start+0x9c>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b08      	cmp	r3, #8
 800545c:	d104      	bne.n	8005468 <HAL_TIM_IC_Start+0x94>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005464:	b2db      	uxtb	r3, r3
 8005466:	e003      	b.n	8005470 <HAL_TIM_IC_Start+0x9c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800546e:	b2db      	uxtb	r3, r3
 8005470:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d102      	bne.n	800547e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005478:	7bbb      	ldrb	r3, [r7, #14]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d001      	beq.n	8005482 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e097      	b.n	80055b2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <HAL_TIM_IC_Start+0xbe>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005490:	e023      	b.n	80054da <HAL_TIM_IC_Start+0x106>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b04      	cmp	r3, #4
 8005496:	d104      	bne.n	80054a2 <HAL_TIM_IC_Start+0xce>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054a0:	e01b      	b.n	80054da <HAL_TIM_IC_Start+0x106>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_IC_Start+0xde>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b0:	e013      	b.n	80054da <HAL_TIM_IC_Start+0x106>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b0c      	cmp	r3, #12
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_IC_Start+0xee>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054c0:	e00b      	b.n	80054da <HAL_TIM_IC_Start+0x106>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b10      	cmp	r3, #16
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_IC_Start+0xfe>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054d0:	e003      	b.n	80054da <HAL_TIM_IC_Start+0x106>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d104      	bne.n	80054ea <HAL_TIM_IC_Start+0x116>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054e8:	e013      	b.n	8005512 <HAL_TIM_IC_Start+0x13e>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_IC_Start+0x126>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054f8:	e00b      	b.n	8005512 <HAL_TIM_IC_Start+0x13e>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d104      	bne.n	800550a <HAL_TIM_IC_Start+0x136>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005508:	e003      	b.n	8005512 <HAL_TIM_IC_Start+0x13e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2201      	movs	r2, #1
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f001 fd6a 	bl	8006ff4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a25      	ldr	r2, [pc, #148]	@ (80055bc <HAL_TIM_IC_Start+0x1e8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d022      	beq.n	8005570 <HAL_TIM_IC_Start+0x19c>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005532:	d01d      	beq.n	8005570 <HAL_TIM_IC_Start+0x19c>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a21      	ldr	r2, [pc, #132]	@ (80055c0 <HAL_TIM_IC_Start+0x1ec>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d018      	beq.n	8005570 <HAL_TIM_IC_Start+0x19c>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a20      	ldr	r2, [pc, #128]	@ (80055c4 <HAL_TIM_IC_Start+0x1f0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d013      	beq.n	8005570 <HAL_TIM_IC_Start+0x19c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1e      	ldr	r2, [pc, #120]	@ (80055c8 <HAL_TIM_IC_Start+0x1f4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00e      	beq.n	8005570 <HAL_TIM_IC_Start+0x19c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1d      	ldr	r2, [pc, #116]	@ (80055cc <HAL_TIM_IC_Start+0x1f8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d009      	beq.n	8005570 <HAL_TIM_IC_Start+0x19c>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1b      	ldr	r2, [pc, #108]	@ (80055d0 <HAL_TIM_IC_Start+0x1fc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIM_IC_Start+0x19c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1a      	ldr	r2, [pc, #104]	@ (80055d4 <HAL_TIM_IC_Start+0x200>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d115      	bne.n	800559c <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	4b18      	ldr	r3, [pc, #96]	@ (80055d8 <HAL_TIM_IC_Start+0x204>)
 8005578:	4013      	ands	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d015      	beq.n	80055ae <HAL_TIM_IC_Start+0x1da>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005588:	d011      	beq.n	80055ae <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0201 	orr.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559a:	e008      	b.n	80055ae <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e000      	b.n	80055b0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40000400 	.word	0x40000400
 80055c4:	40000800 	.word	0x40000800
 80055c8:	40000c00 	.word	0x40000c00
 80055cc:	40010400 	.word	0x40010400
 80055d0:	40001800 	.word	0x40001800
 80055d4:	40014000 	.word	0x40014000
 80055d8:	00010007 	.word	0x00010007

080055dc <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2200      	movs	r2, #0
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 fd00 	bl	8006ff4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6a1a      	ldr	r2, [r3, #32]
 80055fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055fe:	4013      	ands	r3, r2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10f      	bne.n	8005624 <HAL_TIM_IC_Stop+0x48>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	f240 4344 	movw	r3, #1092	@ 0x444
 800560e:	4013      	ands	r3, r2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <HAL_TIM_IC_Stop+0x48>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0201 	bic.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_TIM_IC_Stop+0x58>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005632:	e023      	b.n	800567c <HAL_TIM_IC_Stop+0xa0>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	2b04      	cmp	r3, #4
 8005638:	d104      	bne.n	8005644 <HAL_TIM_IC_Stop+0x68>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005642:	e01b      	b.n	800567c <HAL_TIM_IC_Stop+0xa0>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b08      	cmp	r3, #8
 8005648:	d104      	bne.n	8005654 <HAL_TIM_IC_Stop+0x78>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005652:	e013      	b.n	800567c <HAL_TIM_IC_Stop+0xa0>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b0c      	cmp	r3, #12
 8005658:	d104      	bne.n	8005664 <HAL_TIM_IC_Stop+0x88>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005662:	e00b      	b.n	800567c <HAL_TIM_IC_Stop+0xa0>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b10      	cmp	r3, #16
 8005668:	d104      	bne.n	8005674 <HAL_TIM_IC_Stop+0x98>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005672:	e003      	b.n	800567c <HAL_TIM_IC_Stop+0xa0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d104      	bne.n	800568c <HAL_TIM_IC_Stop+0xb0>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800568a:	e013      	b.n	80056b4 <HAL_TIM_IC_Stop+0xd8>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b04      	cmp	r3, #4
 8005690:	d104      	bne.n	800569c <HAL_TIM_IC_Stop+0xc0>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800569a:	e00b      	b.n	80056b4 <HAL_TIM_IC_Stop+0xd8>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d104      	bne.n	80056ac <HAL_TIM_IC_Stop+0xd0>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056aa:	e003      	b.n	80056b4 <HAL_TIM_IC_Stop+0xd8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <HAL_TIM_IC_Start_IT+0x1e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	e023      	b.n	8005726 <HAL_TIM_IC_Start_IT+0x66>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_IC_Start_IT+0x2e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	e01b      	b.n	8005726 <HAL_TIM_IC_Start_IT+0x66>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_IC_Start_IT+0x3e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	e013      	b.n	8005726 <HAL_TIM_IC_Start_IT+0x66>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	d104      	bne.n	800570e <HAL_TIM_IC_Start_IT+0x4e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800570a:	b2db      	uxtb	r3, r3
 800570c:	e00b      	b.n	8005726 <HAL_TIM_IC_Start_IT+0x66>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b10      	cmp	r3, #16
 8005712:	d104      	bne.n	800571e <HAL_TIM_IC_Start_IT+0x5e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e003      	b.n	8005726 <HAL_TIM_IC_Start_IT+0x66>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005724:	b2db      	uxtb	r3, r3
 8005726:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <HAL_TIM_IC_Start_IT+0x78>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e013      	b.n	8005760 <HAL_TIM_IC_Start_IT+0xa0>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b04      	cmp	r3, #4
 800573c:	d104      	bne.n	8005748 <HAL_TIM_IC_Start_IT+0x88>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005744:	b2db      	uxtb	r3, r3
 8005746:	e00b      	b.n	8005760 <HAL_TIM_IC_Start_IT+0xa0>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b08      	cmp	r3, #8
 800574c:	d104      	bne.n	8005758 <HAL_TIM_IC_Start_IT+0x98>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e003      	b.n	8005760 <HAL_TIM_IC_Start_IT+0xa0>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800575e:	b2db      	uxtb	r3, r3
 8005760:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005762:	7bbb      	ldrb	r3, [r7, #14]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d102      	bne.n	800576e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005768:	7b7b      	ldrb	r3, [r7, #13]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e0e2      	b.n	8005938 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d104      	bne.n	8005782 <HAL_TIM_IC_Start_IT+0xc2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005780:	e023      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x10a>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b04      	cmp	r3, #4
 8005786:	d104      	bne.n	8005792 <HAL_TIM_IC_Start_IT+0xd2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005790:	e01b      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x10a>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b08      	cmp	r3, #8
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_IC_Start_IT+0xe2>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057a0:	e013      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x10a>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b0c      	cmp	r3, #12
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_IC_Start_IT+0xf2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057b0:	e00b      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x10a>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_IC_Start_IT+0x102>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057c0:	e003      	b.n	80057ca <HAL_TIM_IC_Start_IT+0x10a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <HAL_TIM_IC_Start_IT+0x11a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057d8:	e013      	b.n	8005802 <HAL_TIM_IC_Start_IT+0x142>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d104      	bne.n	80057ea <HAL_TIM_IC_Start_IT+0x12a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057e8:	e00b      	b.n	8005802 <HAL_TIM_IC_Start_IT+0x142>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d104      	bne.n	80057fa <HAL_TIM_IC_Start_IT+0x13a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057f8:	e003      	b.n	8005802 <HAL_TIM_IC_Start_IT+0x142>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d841      	bhi.n	800588c <HAL_TIM_IC_Start_IT+0x1cc>
 8005808:	a201      	add	r2, pc, #4	@ (adr r2, 8005810 <HAL_TIM_IC_Start_IT+0x150>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005845 	.word	0x08005845
 8005814:	0800588d 	.word	0x0800588d
 8005818:	0800588d 	.word	0x0800588d
 800581c:	0800588d 	.word	0x0800588d
 8005820:	08005857 	.word	0x08005857
 8005824:	0800588d 	.word	0x0800588d
 8005828:	0800588d 	.word	0x0800588d
 800582c:	0800588d 	.word	0x0800588d
 8005830:	08005869 	.word	0x08005869
 8005834:	0800588d 	.word	0x0800588d
 8005838:	0800588d 	.word	0x0800588d
 800583c:	0800588d 	.word	0x0800588d
 8005840:	0800587b 	.word	0x0800587b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0202 	orr.w	r2, r2, #2
 8005852:	60da      	str	r2, [r3, #12]
      break;
 8005854:	e01d      	b.n	8005892 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0204 	orr.w	r2, r2, #4
 8005864:	60da      	str	r2, [r3, #12]
      break;
 8005866:	e014      	b.n	8005892 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0208 	orr.w	r2, r2, #8
 8005876:	60da      	str	r2, [r3, #12]
      break;
 8005878:	e00b      	b.n	8005892 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0210 	orr.w	r2, r2, #16
 8005888:	60da      	str	r2, [r3, #12]
      break;
 800588a:	e002      	b.n	8005892 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
      break;
 8005890:	bf00      	nop
  }

  if (status == HAL_OK)
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d14e      	bne.n	8005936 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2201      	movs	r2, #1
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 fba7 	bl	8006ff4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a25      	ldr	r2, [pc, #148]	@ (8005940 <HAL_TIM_IC_Start_IT+0x280>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <HAL_TIM_IC_Start_IT+0x236>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b8:	d01d      	beq.n	80058f6 <HAL_TIM_IC_Start_IT+0x236>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a21      	ldr	r2, [pc, #132]	@ (8005944 <HAL_TIM_IC_Start_IT+0x284>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <HAL_TIM_IC_Start_IT+0x236>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005948 <HAL_TIM_IC_Start_IT+0x288>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_TIM_IC_Start_IT+0x236>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1e      	ldr	r2, [pc, #120]	@ (800594c <HAL_TIM_IC_Start_IT+0x28c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_TIM_IC_Start_IT+0x236>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005950 <HAL_TIM_IC_Start_IT+0x290>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_TIM_IC_Start_IT+0x236>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005954 <HAL_TIM_IC_Start_IT+0x294>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_TIM_IC_Start_IT+0x236>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a19      	ldr	r2, [pc, #100]	@ (8005958 <HAL_TIM_IC_Start_IT+0x298>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d115      	bne.n	8005922 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	4b17      	ldr	r3, [pc, #92]	@ (800595c <HAL_TIM_IC_Start_IT+0x29c>)
 80058fe:	4013      	ands	r3, r2
 8005900:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b06      	cmp	r3, #6
 8005906:	d015      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x274>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800590e:	d011      	beq.n	8005934 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005920:	e008      	b.n	8005934 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f042 0201 	orr.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e000      	b.n	8005936 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005934:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005936:	7bfb      	ldrb	r3, [r7, #15]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40010000 	.word	0x40010000
 8005944:	40000400 	.word	0x40000400
 8005948:	40000800 	.word	0x40000800
 800594c:	40000c00 	.word	0x40000c00
 8005950:	40010400 	.word	0x40010400
 8005954:	40001800 	.word	0x40001800
 8005958:	40014000 	.word	0x40014000
 800595c:	00010007 	.word	0x00010007

08005960 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b0c      	cmp	r3, #12
 8005972:	d841      	bhi.n	80059f8 <HAL_TIM_IC_Stop_IT+0x98>
 8005974:	a201      	add	r2, pc, #4	@ (adr r2, 800597c <HAL_TIM_IC_Stop_IT+0x1c>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	080059b1 	.word	0x080059b1
 8005980:	080059f9 	.word	0x080059f9
 8005984:	080059f9 	.word	0x080059f9
 8005988:	080059f9 	.word	0x080059f9
 800598c:	080059c3 	.word	0x080059c3
 8005990:	080059f9 	.word	0x080059f9
 8005994:	080059f9 	.word	0x080059f9
 8005998:	080059f9 	.word	0x080059f9
 800599c:	080059d5 	.word	0x080059d5
 80059a0:	080059f9 	.word	0x080059f9
 80059a4:	080059f9 	.word	0x080059f9
 80059a8:	080059f9 	.word	0x080059f9
 80059ac:	080059e7 	.word	0x080059e7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0202 	bic.w	r2, r2, #2
 80059be:	60da      	str	r2, [r3, #12]
      break;
 80059c0:	e01d      	b.n	80059fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0204 	bic.w	r2, r2, #4
 80059d0:	60da      	str	r2, [r3, #12]
      break;
 80059d2:	e014      	b.n	80059fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0208 	bic.w	r2, r2, #8
 80059e2:	60da      	str	r2, [r3, #12]
      break;
 80059e4:	e00b      	b.n	80059fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0210 	bic.w	r2, r2, #16
 80059f4:	60da      	str	r2, [r3, #12]
      break;
 80059f6:	e002      	b.n	80059fe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      break;
 80059fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d166      	bne.n	8005ad2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f001 faf1 	bl	8006ff4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10f      	bne.n	8005a42 <HAL_TIM_IC_Stop_IT+0xe2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <HAL_TIM_IC_Stop_IT+0xe2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_IC_Stop_IT+0xf2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a50:	e023      	b.n	8005a9a <HAL_TIM_IC_Stop_IT+0x13a>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_IC_Stop_IT+0x102>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a60:	e01b      	b.n	8005a9a <HAL_TIM_IC_Stop_IT+0x13a>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_IC_Stop_IT+0x112>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a70:	e013      	b.n	8005a9a <HAL_TIM_IC_Stop_IT+0x13a>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b0c      	cmp	r3, #12
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_IC_Stop_IT+0x122>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a80:	e00b      	b.n	8005a9a <HAL_TIM_IC_Stop_IT+0x13a>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b10      	cmp	r3, #16
 8005a86:	d104      	bne.n	8005a92 <HAL_TIM_IC_Stop_IT+0x132>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a90:	e003      	b.n	8005a9a <HAL_TIM_IC_Stop_IT+0x13a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIM_IC_Stop_IT+0x14a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aa8:	e013      	b.n	8005ad2 <HAL_TIM_IC_Stop_IT+0x172>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d104      	bne.n	8005aba <HAL_TIM_IC_Stop_IT+0x15a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ab8:	e00b      	b.n	8005ad2 <HAL_TIM_IC_Stop_IT+0x172>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_IC_Stop_IT+0x16a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ac8:	e003      	b.n	8005ad2 <HAL_TIM_IC_Stop_IT+0x172>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d020      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0202 	mvn.w	r2, #2
 8005b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fb faee 	bl	8001108 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fc14 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fc1b 	bl	8006370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d020      	beq.n	8005b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01b      	beq.n	8005b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0204 	mvn.w	r2, #4
 8005b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb fac8 	bl	8001108 <HAL_TIM_IC_CaptureCallback>
 8005b78:	e005      	b.n	8005b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fbee 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fbf5 	bl	8006370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d020      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01b      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0208 	mvn.w	r2, #8
 8005ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2204      	movs	r2, #4
 8005bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fb faa2 	bl	8001108 <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fbc8 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fbcf 	bl	8006370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d020      	beq.n	8005c24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0210 	mvn.w	r2, #16
 8005bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2208      	movs	r2, #8
 8005bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb fa7c 	bl	8001108 <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fba2 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fba9 	bl	8006370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0201 	mvn.w	r2, #1
 8005c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fb80 	bl	8006348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00c      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 fb09 	bl	8007288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00c      	beq.n	8005c9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 fb01 	bl	800729c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00c      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fb63 	bl	8006384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00c      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f06f 0220 	mvn.w	r2, #32
 8005cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 fac9 	bl	8007274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b086      	sub	sp, #24
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e088      	b.n	8005e1a <HAL_TIM_IC_ConfigChannel+0x130>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d11b      	bne.n	8005d4e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d26:	f000 ff9d 	bl	8006c64 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 020c 	bic.w	r2, r2, #12
 8005d38:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6999      	ldr	r1, [r3, #24]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	619a      	str	r2, [r3, #24]
 8005d4c:	e060      	b.n	8005e10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d11c      	bne.n	8005d8e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005d64:	f001 f821 	bl	8006daa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d76:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6999      	ldr	r1, [r3, #24]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	021a      	lsls	r2, r3, #8
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	619a      	str	r2, [r3, #24]
 8005d8c:	e040      	b.n	8005e10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d11b      	bne.n	8005dcc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005da4:	f001 f86e 	bl	8006e84 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 020c 	bic.w	r2, r2, #12
 8005db6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69d9      	ldr	r1, [r3, #28]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	61da      	str	r2, [r3, #28]
 8005dca:	e021      	b.n	8005e10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b0c      	cmp	r3, #12
 8005dd0:	d11c      	bne.n	8005e0c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005de2:	f001 f88b 	bl	8006efc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005df4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69d9      	ldr	r1, [r3, #28]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	021a      	lsls	r2, r3, #8
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	61da      	str	r2, [r3, #28]
 8005e0a:	e001      	b.n	8005e10 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e0ff      	b.n	8006042 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b14      	cmp	r3, #20
 8005e4e:	f200 80f0 	bhi.w	8006032 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e52:	a201      	add	r2, pc, #4	@ (adr r2, 8005e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e58:	08005ead 	.word	0x08005ead
 8005e5c:	08006033 	.word	0x08006033
 8005e60:	08006033 	.word	0x08006033
 8005e64:	08006033 	.word	0x08006033
 8005e68:	08005eed 	.word	0x08005eed
 8005e6c:	08006033 	.word	0x08006033
 8005e70:	08006033 	.word	0x08006033
 8005e74:	08006033 	.word	0x08006033
 8005e78:	08005f2f 	.word	0x08005f2f
 8005e7c:	08006033 	.word	0x08006033
 8005e80:	08006033 	.word	0x08006033
 8005e84:	08006033 	.word	0x08006033
 8005e88:	08005f6f 	.word	0x08005f6f
 8005e8c:	08006033 	.word	0x08006033
 8005e90:	08006033 	.word	0x08006033
 8005e94:	08006033 	.word	0x08006033
 8005e98:	08005fb1 	.word	0x08005fb1
 8005e9c:	08006033 	.word	0x08006033
 8005ea0:	08006033 	.word	0x08006033
 8005ea4:	08006033 	.word	0x08006033
 8005ea8:	08005ff1 	.word	0x08005ff1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fb16 	bl	80064e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0208 	orr.w	r2, r2, #8
 8005ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0204 	bic.w	r2, r2, #4
 8005ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6999      	ldr	r1, [r3, #24]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	619a      	str	r2, [r3, #24]
      break;
 8005eea:	e0a5      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fb86 	bl	8006604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	699a      	ldr	r2, [r3, #24]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6999      	ldr	r1, [r3, #24]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	021a      	lsls	r2, r3, #8
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	619a      	str	r2, [r3, #24]
      break;
 8005f2c:	e084      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 fbef 	bl	8006718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69da      	ldr	r2, [r3, #28]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0208 	orr.w	r2, r2, #8
 8005f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0204 	bic.w	r2, r2, #4
 8005f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69d9      	ldr	r1, [r3, #28]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	61da      	str	r2, [r3, #28]
      break;
 8005f6c:	e064      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fc57 	bl	8006828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69d9      	ldr	r1, [r3, #28]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	021a      	lsls	r2, r3, #8
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	61da      	str	r2, [r3, #28]
      break;
 8005fae:	e043      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fca0 	bl	80068fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0208 	orr.w	r2, r2, #8
 8005fca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0204 	bic.w	r2, r2, #4
 8005fda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005fee:	e023      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fce4 	bl	80069c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800600a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800601a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	021a      	lsls	r2, r3, #8
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006030:	e002      	b.n	8006038 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	75fb      	strb	r3, [r7, #23]
      break;
 8006036:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006040:	7dfb      	ldrb	r3, [r7, #23]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop

0800604c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_TIM_ConfigClockSource+0x1c>
 8006064:	2302      	movs	r3, #2
 8006066:	e0dc      	b.n	8006222 <HAL_TIM_ConfigClockSource+0x1d6>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	4b6a      	ldr	r3, [pc, #424]	@ (800622c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006084:	4013      	ands	r3, r2
 8006086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800608e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a64      	ldr	r2, [pc, #400]	@ (8006230 <HAL_TIM_ConfigClockSource+0x1e4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	f000 80a9 	beq.w	80061f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80060a4:	4a62      	ldr	r2, [pc, #392]	@ (8006230 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	f200 80ae 	bhi.w	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 80060ac:	4a61      	ldr	r2, [pc, #388]	@ (8006234 <HAL_TIM_ConfigClockSource+0x1e8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	f000 80a1 	beq.w	80061f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80060b4:	4a5f      	ldr	r2, [pc, #380]	@ (8006234 <HAL_TIM_ConfigClockSource+0x1e8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	f200 80a6 	bhi.w	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 80060bc:	4a5e      	ldr	r2, [pc, #376]	@ (8006238 <HAL_TIM_ConfigClockSource+0x1ec>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	f000 8099 	beq.w	80061f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80060c4:	4a5c      	ldr	r2, [pc, #368]	@ (8006238 <HAL_TIM_ConfigClockSource+0x1ec>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	f200 809e 	bhi.w	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 80060cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060d0:	f000 8091 	beq.w	80061f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80060d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060d8:	f200 8096 	bhi.w	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 80060dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e0:	f000 8089 	beq.w	80061f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80060e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e8:	f200 808e 	bhi.w	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 80060ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f0:	d03e      	beq.n	8006170 <HAL_TIM_ConfigClockSource+0x124>
 80060f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f6:	f200 8087 	bhi.w	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060fe:	f000 8086 	beq.w	800620e <HAL_TIM_ConfigClockSource+0x1c2>
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006106:	d87f      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 8006108:	2b70      	cmp	r3, #112	@ 0x70
 800610a:	d01a      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0xf6>
 800610c:	2b70      	cmp	r3, #112	@ 0x70
 800610e:	d87b      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 8006110:	2b60      	cmp	r3, #96	@ 0x60
 8006112:	d050      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0x16a>
 8006114:	2b60      	cmp	r3, #96	@ 0x60
 8006116:	d877      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 8006118:	2b50      	cmp	r3, #80	@ 0x50
 800611a:	d03c      	beq.n	8006196 <HAL_TIM_ConfigClockSource+0x14a>
 800611c:	2b50      	cmp	r3, #80	@ 0x50
 800611e:	d873      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 8006120:	2b40      	cmp	r3, #64	@ 0x40
 8006122:	d058      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x18a>
 8006124:	2b40      	cmp	r3, #64	@ 0x40
 8006126:	d86f      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 8006128:	2b30      	cmp	r3, #48	@ 0x30
 800612a:	d064      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800612c:	2b30      	cmp	r3, #48	@ 0x30
 800612e:	d86b      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 8006130:	2b20      	cmp	r3, #32
 8006132:	d060      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006134:	2b20      	cmp	r3, #32
 8006136:	d867      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d05c      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800613c:	2b10      	cmp	r3, #16
 800613e:	d05a      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006140:	e062      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006152:	f000 ff2f 	bl	8006fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	609a      	str	r2, [r3, #8]
      break;
 800616e:	e04f      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006180:	f000 ff18 	bl	8006fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006192:	609a      	str	r2, [r3, #8]
      break;
 8006194:	e03c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a2:	461a      	mov	r2, r3
 80061a4:	f000 fdd2 	bl	8006d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2150      	movs	r1, #80	@ 0x50
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fee2 	bl	8006f78 <TIM_ITRx_SetConfig>
      break;
 80061b4:	e02c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c2:	461a      	mov	r2, r3
 80061c4:	f000 fe2e 	bl	8006e24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2160      	movs	r1, #96	@ 0x60
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fed2 	bl	8006f78 <TIM_ITRx_SetConfig>
      break;
 80061d4:	e01c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e2:	461a      	mov	r2, r3
 80061e4:	f000 fdb2 	bl	8006d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2140      	movs	r1, #64	@ 0x40
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fec2 	bl	8006f78 <TIM_ITRx_SetConfig>
      break;
 80061f4:	e00c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f000 feb9 	bl	8006f78 <TIM_ITRx_SetConfig>
      break;
 8006206:	e003      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e000      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800620e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	ffceff88 	.word	0xffceff88
 8006230:	00100040 	.word	0x00100040
 8006234:	00100030 	.word	0x00100030
 8006238:	00100020 	.word	0x00100020

0800623c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006250:	2302      	movs	r3, #2
 8006252:	e031      	b.n	80062b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fc12 	bl	8006a90 <TIM_SlaveTimer_SetConfig>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e018      	b.n	80062b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006294:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062a4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b0c      	cmp	r3, #12
 80062d2:	d831      	bhi.n	8006338 <HAL_TIM_ReadCapturedValue+0x78>
 80062d4:	a201      	add	r2, pc, #4	@ (adr r2, 80062dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80062d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062da:	bf00      	nop
 80062dc:	08006311 	.word	0x08006311
 80062e0:	08006339 	.word	0x08006339
 80062e4:	08006339 	.word	0x08006339
 80062e8:	08006339 	.word	0x08006339
 80062ec:	0800631b 	.word	0x0800631b
 80062f0:	08006339 	.word	0x08006339
 80062f4:	08006339 	.word	0x08006339
 80062f8:	08006339 	.word	0x08006339
 80062fc:	08006325 	.word	0x08006325
 8006300:	08006339 	.word	0x08006339
 8006304:	08006339 	.word	0x08006339
 8006308:	08006339 	.word	0x08006339
 800630c:	0800632f 	.word	0x0800632f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006316:	60fb      	str	r3, [r7, #12]

      break;
 8006318:	e00f      	b.n	800633a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006320:	60fb      	str	r3, [r7, #12]

      break;
 8006322:	e00a      	b.n	800633a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632a:	60fb      	str	r3, [r7, #12]

      break;
 800632c:	e005      	b.n	800633a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006334:	60fb      	str	r3, [r7, #12]

      break;
 8006336:	e000      	b.n	800633a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006338:	bf00      	nop
  }

  return tmpreg;
 800633a:	68fb      	ldr	r3, [r7, #12]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a46      	ldr	r2, [pc, #280]	@ (80064c4 <TIM_Base_SetConfig+0x12c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b6:	d00f      	beq.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a43      	ldr	r2, [pc, #268]	@ (80064c8 <TIM_Base_SetConfig+0x130>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00b      	beq.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a42      	ldr	r2, [pc, #264]	@ (80064cc <TIM_Base_SetConfig+0x134>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d007      	beq.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a41      	ldr	r2, [pc, #260]	@ (80064d0 <TIM_Base_SetConfig+0x138>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a40      	ldr	r2, [pc, #256]	@ (80064d4 <TIM_Base_SetConfig+0x13c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d108      	bne.n	80063ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a35      	ldr	r2, [pc, #212]	@ (80064c4 <TIM_Base_SetConfig+0x12c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d01f      	beq.n	8006432 <TIM_Base_SetConfig+0x9a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f8:	d01b      	beq.n	8006432 <TIM_Base_SetConfig+0x9a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a32      	ldr	r2, [pc, #200]	@ (80064c8 <TIM_Base_SetConfig+0x130>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d017      	beq.n	8006432 <TIM_Base_SetConfig+0x9a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a31      	ldr	r2, [pc, #196]	@ (80064cc <TIM_Base_SetConfig+0x134>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <TIM_Base_SetConfig+0x9a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a30      	ldr	r2, [pc, #192]	@ (80064d0 <TIM_Base_SetConfig+0x138>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00f      	beq.n	8006432 <TIM_Base_SetConfig+0x9a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2f      	ldr	r2, [pc, #188]	@ (80064d4 <TIM_Base_SetConfig+0x13c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00b      	beq.n	8006432 <TIM_Base_SetConfig+0x9a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a2e      	ldr	r2, [pc, #184]	@ (80064d8 <TIM_Base_SetConfig+0x140>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d007      	beq.n	8006432 <TIM_Base_SetConfig+0x9a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a2d      	ldr	r2, [pc, #180]	@ (80064dc <TIM_Base_SetConfig+0x144>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d003      	beq.n	8006432 <TIM_Base_SetConfig+0x9a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a2c      	ldr	r2, [pc, #176]	@ (80064e0 <TIM_Base_SetConfig+0x148>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d108      	bne.n	8006444 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a16      	ldr	r2, [pc, #88]	@ (80064c4 <TIM_Base_SetConfig+0x12c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00f      	beq.n	8006490 <TIM_Base_SetConfig+0xf8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a18      	ldr	r2, [pc, #96]	@ (80064d4 <TIM_Base_SetConfig+0x13c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00b      	beq.n	8006490 <TIM_Base_SetConfig+0xf8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a17      	ldr	r2, [pc, #92]	@ (80064d8 <TIM_Base_SetConfig+0x140>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d007      	beq.n	8006490 <TIM_Base_SetConfig+0xf8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a16      	ldr	r2, [pc, #88]	@ (80064dc <TIM_Base_SetConfig+0x144>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_Base_SetConfig+0xf8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a15      	ldr	r2, [pc, #84]	@ (80064e0 <TIM_Base_SetConfig+0x148>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d103      	bne.n	8006498 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d105      	bne.n	80064b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f023 0201 	bic.w	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	611a      	str	r2, [r3, #16]
  }
}
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	40010000 	.word	0x40010000
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40000800 	.word	0x40000800
 80064d0:	40000c00 	.word	0x40000c00
 80064d4:	40010400 	.word	0x40010400
 80064d8:	40014000 	.word	0x40014000
 80064dc:	40014400 	.word	0x40014400
 80064e0:	40014800 	.word	0x40014800

080064e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f023 0201 	bic.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4b37      	ldr	r3, [pc, #220]	@ (80065ec <TIM_OC1_SetConfig+0x108>)
 8006510:	4013      	ands	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f023 0302 	bic.w	r3, r3, #2
 800652c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a2d      	ldr	r2, [pc, #180]	@ (80065f0 <TIM_OC1_SetConfig+0x10c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00f      	beq.n	8006560 <TIM_OC1_SetConfig+0x7c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a2c      	ldr	r2, [pc, #176]	@ (80065f4 <TIM_OC1_SetConfig+0x110>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_OC1_SetConfig+0x7c>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a2b      	ldr	r2, [pc, #172]	@ (80065f8 <TIM_OC1_SetConfig+0x114>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_OC1_SetConfig+0x7c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a2a      	ldr	r2, [pc, #168]	@ (80065fc <TIM_OC1_SetConfig+0x118>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC1_SetConfig+0x7c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a29      	ldr	r2, [pc, #164]	@ (8006600 <TIM_OC1_SetConfig+0x11c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10c      	bne.n	800657a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0308 	bic.w	r3, r3, #8
 8006566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f023 0304 	bic.w	r3, r3, #4
 8006578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1c      	ldr	r2, [pc, #112]	@ (80065f0 <TIM_OC1_SetConfig+0x10c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d00f      	beq.n	80065a2 <TIM_OC1_SetConfig+0xbe>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a1b      	ldr	r2, [pc, #108]	@ (80065f4 <TIM_OC1_SetConfig+0x110>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00b      	beq.n	80065a2 <TIM_OC1_SetConfig+0xbe>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a1a      	ldr	r2, [pc, #104]	@ (80065f8 <TIM_OC1_SetConfig+0x114>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <TIM_OC1_SetConfig+0xbe>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a19      	ldr	r2, [pc, #100]	@ (80065fc <TIM_OC1_SetConfig+0x118>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_OC1_SetConfig+0xbe>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a18      	ldr	r2, [pc, #96]	@ (8006600 <TIM_OC1_SetConfig+0x11c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d111      	bne.n	80065c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	621a      	str	r2, [r3, #32]
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	fffeff8f 	.word	0xfffeff8f
 80065f0:	40010000 	.word	0x40010000
 80065f4:	40010400 	.word	0x40010400
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40014400 	.word	0x40014400
 8006600:	40014800 	.word	0x40014800

08006604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f023 0210 	bic.w	r2, r3, #16
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4b34      	ldr	r3, [pc, #208]	@ (8006700 <TIM_OC2_SetConfig+0xfc>)
 8006630:	4013      	ands	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800663a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0320 	bic.w	r3, r3, #32
 800664e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a29      	ldr	r2, [pc, #164]	@ (8006704 <TIM_OC2_SetConfig+0x100>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_OC2_SetConfig+0x68>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a28      	ldr	r2, [pc, #160]	@ (8006708 <TIM_OC2_SetConfig+0x104>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d10d      	bne.n	8006688 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a1e      	ldr	r2, [pc, #120]	@ (8006704 <TIM_OC2_SetConfig+0x100>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00f      	beq.n	80066b0 <TIM_OC2_SetConfig+0xac>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1d      	ldr	r2, [pc, #116]	@ (8006708 <TIM_OC2_SetConfig+0x104>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00b      	beq.n	80066b0 <TIM_OC2_SetConfig+0xac>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a1c      	ldr	r2, [pc, #112]	@ (800670c <TIM_OC2_SetConfig+0x108>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d007      	beq.n	80066b0 <TIM_OC2_SetConfig+0xac>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006710 <TIM_OC2_SetConfig+0x10c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_OC2_SetConfig+0xac>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006714 <TIM_OC2_SetConfig+0x110>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d113      	bne.n	80066d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	feff8fff 	.word	0xfeff8fff
 8006704:	40010000 	.word	0x40010000
 8006708:	40010400 	.word	0x40010400
 800670c:	40014000 	.word	0x40014000
 8006710:	40014400 	.word	0x40014400
 8006714:	40014800 	.word	0x40014800

08006718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4b33      	ldr	r3, [pc, #204]	@ (8006810 <TIM_OC3_SetConfig+0xf8>)
 8006744:	4013      	ands	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0303 	bic.w	r3, r3, #3
 800674e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a28      	ldr	r2, [pc, #160]	@ (8006814 <TIM_OC3_SetConfig+0xfc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_OC3_SetConfig+0x66>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a27      	ldr	r2, [pc, #156]	@ (8006818 <TIM_OC3_SetConfig+0x100>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d10d      	bne.n	800679a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a1d      	ldr	r2, [pc, #116]	@ (8006814 <TIM_OC3_SetConfig+0xfc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00f      	beq.n	80067c2 <TIM_OC3_SetConfig+0xaa>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006818 <TIM_OC3_SetConfig+0x100>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00b      	beq.n	80067c2 <TIM_OC3_SetConfig+0xaa>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1b      	ldr	r2, [pc, #108]	@ (800681c <TIM_OC3_SetConfig+0x104>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d007      	beq.n	80067c2 <TIM_OC3_SetConfig+0xaa>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006820 <TIM_OC3_SetConfig+0x108>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_OC3_SetConfig+0xaa>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a19      	ldr	r2, [pc, #100]	@ (8006824 <TIM_OC3_SetConfig+0x10c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d113      	bne.n	80067ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	011b      	lsls	r3, r3, #4
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	621a      	str	r2, [r3, #32]
}
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	fffeff8f 	.word	0xfffeff8f
 8006814:	40010000 	.word	0x40010000
 8006818:	40010400 	.word	0x40010400
 800681c:	40014000 	.word	0x40014000
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800

08006828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4b24      	ldr	r3, [pc, #144]	@ (80068e4 <TIM_OC4_SetConfig+0xbc>)
 8006854:	4013      	ands	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	031b      	lsls	r3, r3, #12
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a19      	ldr	r2, [pc, #100]	@ (80068e8 <TIM_OC4_SetConfig+0xc0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00f      	beq.n	80068a8 <TIM_OC4_SetConfig+0x80>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <TIM_OC4_SetConfig+0xc4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00b      	beq.n	80068a8 <TIM_OC4_SetConfig+0x80>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <TIM_OC4_SetConfig+0xc8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <TIM_OC4_SetConfig+0x80>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a16      	ldr	r2, [pc, #88]	@ (80068f4 <TIM_OC4_SetConfig+0xcc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_OC4_SetConfig+0x80>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a15      	ldr	r2, [pc, #84]	@ (80068f8 <TIM_OC4_SetConfig+0xd0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d109      	bne.n	80068bc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	621a      	str	r2, [r3, #32]
}
 80068d6:	bf00      	nop
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	feff8fff 	.word	0xfeff8fff
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40010400 	.word	0x40010400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40014400 	.word	0x40014400
 80068f8:	40014800 	.word	0x40014800

080068fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4b21      	ldr	r3, [pc, #132]	@ (80069ac <TIM_OC5_SetConfig+0xb0>)
 8006928:	4013      	ands	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800693c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	041b      	lsls	r3, r3, #16
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a18      	ldr	r2, [pc, #96]	@ (80069b0 <TIM_OC5_SetConfig+0xb4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00f      	beq.n	8006972 <TIM_OC5_SetConfig+0x76>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a17      	ldr	r2, [pc, #92]	@ (80069b4 <TIM_OC5_SetConfig+0xb8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00b      	beq.n	8006972 <TIM_OC5_SetConfig+0x76>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a16      	ldr	r2, [pc, #88]	@ (80069b8 <TIM_OC5_SetConfig+0xbc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d007      	beq.n	8006972 <TIM_OC5_SetConfig+0x76>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a15      	ldr	r2, [pc, #84]	@ (80069bc <TIM_OC5_SetConfig+0xc0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d003      	beq.n	8006972 <TIM_OC5_SetConfig+0x76>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a14      	ldr	r2, [pc, #80]	@ (80069c0 <TIM_OC5_SetConfig+0xc4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d109      	bne.n	8006986 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006978:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	021b      	lsls	r3, r3, #8
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685a      	ldr	r2, [r3, #4]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	621a      	str	r2, [r3, #32]
}
 80069a0:	bf00      	nop
 80069a2:	371c      	adds	r7, #28
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	fffeff8f 	.word	0xfffeff8f
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40010400 	.word	0x40010400
 80069b8:	40014000 	.word	0x40014000
 80069bc:	40014400 	.word	0x40014400
 80069c0:	40014800 	.word	0x40014800

080069c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4b22      	ldr	r3, [pc, #136]	@ (8006a78 <TIM_OC6_SetConfig+0xb4>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	051b      	lsls	r3, r3, #20
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a19      	ldr	r2, [pc, #100]	@ (8006a7c <TIM_OC6_SetConfig+0xb8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00f      	beq.n	8006a3c <TIM_OC6_SetConfig+0x78>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a18      	ldr	r2, [pc, #96]	@ (8006a80 <TIM_OC6_SetConfig+0xbc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00b      	beq.n	8006a3c <TIM_OC6_SetConfig+0x78>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a17      	ldr	r2, [pc, #92]	@ (8006a84 <TIM_OC6_SetConfig+0xc0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d007      	beq.n	8006a3c <TIM_OC6_SetConfig+0x78>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a16      	ldr	r2, [pc, #88]	@ (8006a88 <TIM_OC6_SetConfig+0xc4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_OC6_SetConfig+0x78>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a15      	ldr	r2, [pc, #84]	@ (8006a8c <TIM_OC6_SetConfig+0xc8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d109      	bne.n	8006a50 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	029b      	lsls	r3, r3, #10
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	feff8fff 	.word	0xfeff8fff
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40010400 	.word	0x40010400
 8006a84:	40014000 	.word	0x40014000
 8006a88:	40014400 	.word	0x40014400
 8006a8c:	40014800 	.word	0x40014800

08006a90 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4b65      	ldr	r3, [pc, #404]	@ (8006c40 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4b62      	ldr	r3, [pc, #392]	@ (8006c44 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	4a5c      	ldr	r2, [pc, #368]	@ (8006c48 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	f000 80ab 	beq.w	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006ade:	4a5a      	ldr	r2, [pc, #360]	@ (8006c48 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	f200 80a4 	bhi.w	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006ae6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006aea:	f000 80a3 	beq.w	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006aee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006af2:	f200 809c 	bhi.w	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006af6:	4a55      	ldr	r2, [pc, #340]	@ (8006c4c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	f000 809b 	beq.w	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006afe:	4a53      	ldr	r2, [pc, #332]	@ (8006c4c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	f200 8094 	bhi.w	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b06:	4a52      	ldr	r2, [pc, #328]	@ (8006c50 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	f000 8093 	beq.w	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b0e:	4a50      	ldr	r2, [pc, #320]	@ (8006c50 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	f200 808c 	bhi.w	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b16:	4a4f      	ldr	r2, [pc, #316]	@ (8006c54 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	f000 808b 	beq.w	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b1e:	4a4d      	ldr	r2, [pc, #308]	@ (8006c54 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	f200 8084 	bhi.w	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b26:	4a4c      	ldr	r2, [pc, #304]	@ (8006c58 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	f000 8083 	beq.w	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c58 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d87c      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b34:	4a49      	ldr	r2, [pc, #292]	@ (8006c5c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d07c      	beq.n	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b3a:	4a48      	ldr	r2, [pc, #288]	@ (8006c5c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d876      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b40:	4a47      	ldr	r2, [pc, #284]	@ (8006c60 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d076      	beq.n	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b46:	4a46      	ldr	r2, [pc, #280]	@ (8006c60 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d870      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006b50:	d070      	beq.n	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b52:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006b56:	d86a      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b5c:	d06a      	beq.n	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b62:	d864      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b64:	2b70      	cmp	r3, #112	@ 0x70
 8006b66:	d01a      	beq.n	8006b9e <TIM_SlaveTimer_SetConfig+0x10e>
 8006b68:	2b70      	cmp	r3, #112	@ 0x70
 8006b6a:	d860      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b6c:	2b60      	cmp	r3, #96	@ 0x60
 8006b6e:	d054      	beq.n	8006c1a <TIM_SlaveTimer_SetConfig+0x18a>
 8006b70:	2b60      	cmp	r3, #96	@ 0x60
 8006b72:	d85c      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b74:	2b50      	cmp	r3, #80	@ 0x50
 8006b76:	d046      	beq.n	8006c06 <TIM_SlaveTimer_SetConfig+0x176>
 8006b78:	2b50      	cmp	r3, #80	@ 0x50
 8006b7a:	d858      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b7c:	2b40      	cmp	r3, #64	@ 0x40
 8006b7e:	d019      	beq.n	8006bb4 <TIM_SlaveTimer_SetConfig+0x124>
 8006b80:	2b40      	cmp	r3, #64	@ 0x40
 8006b82:	d854      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b84:	2b30      	cmp	r3, #48	@ 0x30
 8006b86:	d055      	beq.n	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b88:	2b30      	cmp	r3, #48	@ 0x30
 8006b8a:	d850      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d051      	beq.n	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d84c      	bhi.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d04d      	beq.n	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d04b      	beq.n	8006c34 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b9c:	e047      	b.n	8006c2e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006bae:	f000 fa01 	bl	8006fb4 <TIM_ETR_SetConfig>
      break;
 8006bb2:	e040      	b.n	8006c36 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b05      	cmp	r3, #5
 8006bba:	d101      	bne.n	8006bc0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e03b      	b.n	8006c38 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6a1a      	ldr	r2, [r3, #32]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0201 	bic.w	r2, r2, #1
 8006bd6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006be6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	011b      	lsls	r3, r3, #4
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	621a      	str	r2, [r3, #32]
      break;
 8006c04:	e017      	b.n	8006c36 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c12:	461a      	mov	r2, r3
 8006c14:	f000 f89a 	bl	8006d4c <TIM_TI1_ConfigInputStage>
      break;
 8006c18:	e00d      	b.n	8006c36 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c26:	461a      	mov	r2, r3
 8006c28:	f000 f8fc 	bl	8006e24 <TIM_TI2_ConfigInputStage>
      break;
 8006c2c:	e003      	b.n	8006c36 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	75fb      	strb	r3, [r7, #23]
      break;
 8006c32:	e000      	b.n	8006c36 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8006c34:	bf00      	nop
  }

  return status;
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	ffcfff8f 	.word	0xffcfff8f
 8006c44:	fffefff8 	.word	0xfffefff8
 8006c48:	00200010 	.word	0x00200010
 8006c4c:	00100070 	.word	0x00100070
 8006c50:	00100060 	.word	0x00100060
 8006c54:	00100050 	.word	0x00100050
 8006c58:	00100040 	.word	0x00100040
 8006c5c:	00100030 	.word	0x00100030
 8006c60:	00100020 	.word	0x00100020

08006c64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	f023 0201 	bic.w	r2, r3, #1
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4a28      	ldr	r2, [pc, #160]	@ (8006d30 <TIM_TI1_SetConfig+0xcc>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d01b      	beq.n	8006cca <TIM_TI1_SetConfig+0x66>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c98:	d017      	beq.n	8006cca <TIM_TI1_SetConfig+0x66>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4a25      	ldr	r2, [pc, #148]	@ (8006d34 <TIM_TI1_SetConfig+0xd0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d013      	beq.n	8006cca <TIM_TI1_SetConfig+0x66>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a24      	ldr	r2, [pc, #144]	@ (8006d38 <TIM_TI1_SetConfig+0xd4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d00f      	beq.n	8006cca <TIM_TI1_SetConfig+0x66>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4a23      	ldr	r2, [pc, #140]	@ (8006d3c <TIM_TI1_SetConfig+0xd8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00b      	beq.n	8006cca <TIM_TI1_SetConfig+0x66>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4a22      	ldr	r2, [pc, #136]	@ (8006d40 <TIM_TI1_SetConfig+0xdc>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d007      	beq.n	8006cca <TIM_TI1_SetConfig+0x66>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a21      	ldr	r2, [pc, #132]	@ (8006d44 <TIM_TI1_SetConfig+0xe0>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d003      	beq.n	8006cca <TIM_TI1_SetConfig+0x66>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4a20      	ldr	r2, [pc, #128]	@ (8006d48 <TIM_TI1_SetConfig+0xe4>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d101      	bne.n	8006cce <TIM_TI1_SetConfig+0x6a>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <TIM_TI1_SetConfig+0x6c>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f023 0303 	bic.w	r3, r3, #3
 8006cda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e003      	b.n	8006cee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f023 030a 	bic.w	r3, r3, #10
 8006d08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f003 030a 	and.w	r3, r3, #10
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	621a      	str	r2, [r3, #32]
}
 8006d22:	bf00      	nop
 8006d24:	371c      	adds	r7, #28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	40010000 	.word	0x40010000
 8006d34:	40000400 	.word	0x40000400
 8006d38:	40000800 	.word	0x40000800
 8006d3c:	40000c00 	.word	0x40000c00
 8006d40:	40010400 	.word	0x40010400
 8006d44:	40001800 	.word	0x40001800
 8006d48:	40014000 	.word	0x40014000

08006d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f023 0201 	bic.w	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f023 030a 	bic.w	r3, r3, #10
 8006d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b087      	sub	sp, #28
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
 8006db6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f023 0210 	bic.w	r2, r3, #16
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	031b      	lsls	r3, r3, #12
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	621a      	str	r2, [r3, #32]
}
 8006e18:	bf00      	nop
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f023 0210 	bic.w	r2, r3, #16
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	031b      	lsls	r3, r3, #12
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	621a      	str	r2, [r3, #32]
}
 8006e78:	bf00      	nop
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f023 0303 	bic.w	r3, r3, #3
 8006eb0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ec0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	621a      	str	r2, [r3, #32]
}
 8006ef0:	bf00      	nop
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f3a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	031b      	lsls	r3, r3, #12
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006f4e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	031b      	lsls	r3, r3, #12
 8006f54:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <TIM_ITRx_SetConfig+0x38>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	f043 0307 	orr.w	r3, r3, #7
 8006f9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	609a      	str	r2, [r3, #8]
}
 8006fa2:	bf00      	nop
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	ffcfff8f 	.word	0xffcfff8f

08006fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	021a      	lsls	r2, r3, #8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 031f 	and.w	r3, r3, #31
 8007006:	2201      	movs	r2, #1
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1a      	ldr	r2, [r3, #32]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	43db      	mvns	r3, r3
 8007016:	401a      	ands	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f003 031f 	and.w	r3, r3, #31
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	fa01 f303 	lsl.w	r3, r1, r3
 800702c:	431a      	orrs	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007054:	2302      	movs	r3, #2
 8007056:	e06d      	b.n	8007134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a30      	ldr	r2, [pc, #192]	@ (8007140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d004      	beq.n	800708c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a2f      	ldr	r2, [pc, #188]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d108      	bne.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007092:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a20      	ldr	r2, [pc, #128]	@ (8007140 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d022      	beq.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ca:	d01d      	beq.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d018      	beq.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1c      	ldr	r2, [pc, #112]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d013      	beq.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a1a      	ldr	r2, [pc, #104]	@ (8007150 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d00e      	beq.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a15      	ldr	r2, [pc, #84]	@ (8007144 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d009      	beq.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a16      	ldr	r2, [pc, #88]	@ (8007154 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d004      	beq.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a15      	ldr	r2, [pc, #84]	@ (8007158 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d10c      	bne.n	8007122 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800710e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	4313      	orrs	r3, r2
 8007118:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	40010000 	.word	0x40010000
 8007144:	40010400 	.word	0x40010400
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40001800 	.word	0x40001800
 8007158:	40014000 	.word	0x40014000

0800715c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007174:	2302      	movs	r3, #2
 8007176:	e073      	b.n	8007260 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	041b      	lsls	r3, r3, #16
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a19      	ldr	r2, [pc, #100]	@ (800726c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d004      	beq.n	8007214 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a18      	ldr	r2, [pc, #96]	@ (8007270 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d11c      	bne.n	800724e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721e:	051b      	lsls	r3, r3, #20
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724a:	4313      	orrs	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	40010000 	.word	0x40010000
 8007270:	40010400 	.word	0x40010400

08007274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e042      	b.n	8007348 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d106      	bne.n	80072da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7fa fb8d 	bl	80019f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2224      	movs	r2, #36	@ 0x24
 80072de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fe94 	bl	8008028 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f825 	bl	8007350 <UART_SetConfig>
 8007306:	4603      	mov	r3, r0
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e01b      	b.n	8007348 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800731e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800732e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0201 	orr.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 ff13 	bl	800816c <UART_CheckIdleState>
 8007346:	4603      	mov	r3, r0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007354:	b092      	sub	sp, #72	@ 0x48
 8007356:	af00      	add	r7, sp, #0
 8007358:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	431a      	orrs	r2, r3
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	431a      	orrs	r2, r3
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	4313      	orrs	r3, r2
 8007376:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4bbe      	ldr	r3, [pc, #760]	@ (8007678 <UART_SetConfig+0x328>)
 8007380:	4013      	ands	r3, r2
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007388:	430b      	orrs	r3, r1
 800738a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4ab3      	ldr	r2, [pc, #716]	@ (800767c <UART_SetConfig+0x32c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d004      	beq.n	80073bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073b8:	4313      	orrs	r3, r2
 80073ba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	4baf      	ldr	r3, [pc, #700]	@ (8007680 <UART_SetConfig+0x330>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073cc:	430b      	orrs	r3, r1
 80073ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d6:	f023 010f 	bic.w	r1, r3, #15
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4aa6      	ldr	r2, [pc, #664]	@ (8007684 <UART_SetConfig+0x334>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d177      	bne.n	80074e0 <UART_SetConfig+0x190>
 80073f0:	4ba5      	ldr	r3, [pc, #660]	@ (8007688 <UART_SetConfig+0x338>)
 80073f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073f8:	2b28      	cmp	r3, #40	@ 0x28
 80073fa:	d86d      	bhi.n	80074d8 <UART_SetConfig+0x188>
 80073fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0xb4>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	080074a9 	.word	0x080074a9
 8007408:	080074d9 	.word	0x080074d9
 800740c:	080074d9 	.word	0x080074d9
 8007410:	080074d9 	.word	0x080074d9
 8007414:	080074d9 	.word	0x080074d9
 8007418:	080074d9 	.word	0x080074d9
 800741c:	080074d9 	.word	0x080074d9
 8007420:	080074d9 	.word	0x080074d9
 8007424:	080074b1 	.word	0x080074b1
 8007428:	080074d9 	.word	0x080074d9
 800742c:	080074d9 	.word	0x080074d9
 8007430:	080074d9 	.word	0x080074d9
 8007434:	080074d9 	.word	0x080074d9
 8007438:	080074d9 	.word	0x080074d9
 800743c:	080074d9 	.word	0x080074d9
 8007440:	080074d9 	.word	0x080074d9
 8007444:	080074b9 	.word	0x080074b9
 8007448:	080074d9 	.word	0x080074d9
 800744c:	080074d9 	.word	0x080074d9
 8007450:	080074d9 	.word	0x080074d9
 8007454:	080074d9 	.word	0x080074d9
 8007458:	080074d9 	.word	0x080074d9
 800745c:	080074d9 	.word	0x080074d9
 8007460:	080074d9 	.word	0x080074d9
 8007464:	080074c1 	.word	0x080074c1
 8007468:	080074d9 	.word	0x080074d9
 800746c:	080074d9 	.word	0x080074d9
 8007470:	080074d9 	.word	0x080074d9
 8007474:	080074d9 	.word	0x080074d9
 8007478:	080074d9 	.word	0x080074d9
 800747c:	080074d9 	.word	0x080074d9
 8007480:	080074d9 	.word	0x080074d9
 8007484:	080074c9 	.word	0x080074c9
 8007488:	080074d9 	.word	0x080074d9
 800748c:	080074d9 	.word	0x080074d9
 8007490:	080074d9 	.word	0x080074d9
 8007494:	080074d9 	.word	0x080074d9
 8007498:	080074d9 	.word	0x080074d9
 800749c:	080074d9 	.word	0x080074d9
 80074a0:	080074d9 	.word	0x080074d9
 80074a4:	080074d1 	.word	0x080074d1
 80074a8:	2301      	movs	r3, #1
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ae:	e326      	b.n	8007afe <UART_SetConfig+0x7ae>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e322      	b.n	8007afe <UART_SetConfig+0x7ae>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e31e      	b.n	8007afe <UART_SetConfig+0x7ae>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e31a      	b.n	8007afe <UART_SetConfig+0x7ae>
 80074c8:	2320      	movs	r3, #32
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e316      	b.n	8007afe <UART_SetConfig+0x7ae>
 80074d0:	2340      	movs	r3, #64	@ 0x40
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e312      	b.n	8007afe <UART_SetConfig+0x7ae>
 80074d8:	2380      	movs	r3, #128	@ 0x80
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e30e      	b.n	8007afe <UART_SetConfig+0x7ae>
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a69      	ldr	r2, [pc, #420]	@ (800768c <UART_SetConfig+0x33c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d130      	bne.n	800754c <UART_SetConfig+0x1fc>
 80074ea:	4b67      	ldr	r3, [pc, #412]	@ (8007688 <UART_SetConfig+0x338>)
 80074ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ee:	f003 0307 	and.w	r3, r3, #7
 80074f2:	2b05      	cmp	r3, #5
 80074f4:	d826      	bhi.n	8007544 <UART_SetConfig+0x1f4>
 80074f6:	a201      	add	r2, pc, #4	@ (adr r2, 80074fc <UART_SetConfig+0x1ac>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	08007515 	.word	0x08007515
 8007500:	0800751d 	.word	0x0800751d
 8007504:	08007525 	.word	0x08007525
 8007508:	0800752d 	.word	0x0800752d
 800750c:	08007535 	.word	0x08007535
 8007510:	0800753d 	.word	0x0800753d
 8007514:	2300      	movs	r3, #0
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751a:	e2f0      	b.n	8007afe <UART_SetConfig+0x7ae>
 800751c:	2304      	movs	r3, #4
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e2ec      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007524:	2308      	movs	r3, #8
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e2e8      	b.n	8007afe <UART_SetConfig+0x7ae>
 800752c:	2310      	movs	r3, #16
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e2e4      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007534:	2320      	movs	r3, #32
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e2e0      	b.n	8007afe <UART_SetConfig+0x7ae>
 800753c:	2340      	movs	r3, #64	@ 0x40
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e2dc      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007544:	2380      	movs	r3, #128	@ 0x80
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e2d8      	b.n	8007afe <UART_SetConfig+0x7ae>
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a4f      	ldr	r2, [pc, #316]	@ (8007690 <UART_SetConfig+0x340>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d130      	bne.n	80075b8 <UART_SetConfig+0x268>
 8007556:	4b4c      	ldr	r3, [pc, #304]	@ (8007688 <UART_SetConfig+0x338>)
 8007558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	2b05      	cmp	r3, #5
 8007560:	d826      	bhi.n	80075b0 <UART_SetConfig+0x260>
 8007562:	a201      	add	r2, pc, #4	@ (adr r2, 8007568 <UART_SetConfig+0x218>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	08007581 	.word	0x08007581
 800756c:	08007589 	.word	0x08007589
 8007570:	08007591 	.word	0x08007591
 8007574:	08007599 	.word	0x08007599
 8007578:	080075a1 	.word	0x080075a1
 800757c:	080075a9 	.word	0x080075a9
 8007580:	2300      	movs	r3, #0
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007586:	e2ba      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007588:	2304      	movs	r3, #4
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e2b6      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007590:	2308      	movs	r3, #8
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e2b2      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007598:	2310      	movs	r3, #16
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e2ae      	b.n	8007afe <UART_SetConfig+0x7ae>
 80075a0:	2320      	movs	r3, #32
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e2aa      	b.n	8007afe <UART_SetConfig+0x7ae>
 80075a8:	2340      	movs	r3, #64	@ 0x40
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e2a6      	b.n	8007afe <UART_SetConfig+0x7ae>
 80075b0:	2380      	movs	r3, #128	@ 0x80
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e2a2      	b.n	8007afe <UART_SetConfig+0x7ae>
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a35      	ldr	r2, [pc, #212]	@ (8007694 <UART_SetConfig+0x344>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d130      	bne.n	8007624 <UART_SetConfig+0x2d4>
 80075c2:	4b31      	ldr	r3, [pc, #196]	@ (8007688 <UART_SetConfig+0x338>)
 80075c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b05      	cmp	r3, #5
 80075cc:	d826      	bhi.n	800761c <UART_SetConfig+0x2cc>
 80075ce:	a201      	add	r2, pc, #4	@ (adr r2, 80075d4 <UART_SetConfig+0x284>)
 80075d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d4:	080075ed 	.word	0x080075ed
 80075d8:	080075f5 	.word	0x080075f5
 80075dc:	080075fd 	.word	0x080075fd
 80075e0:	08007605 	.word	0x08007605
 80075e4:	0800760d 	.word	0x0800760d
 80075e8:	08007615 	.word	0x08007615
 80075ec:	2300      	movs	r3, #0
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075f2:	e284      	b.n	8007afe <UART_SetConfig+0x7ae>
 80075f4:	2304      	movs	r3, #4
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e280      	b.n	8007afe <UART_SetConfig+0x7ae>
 80075fc:	2308      	movs	r3, #8
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e27c      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007604:	2310      	movs	r3, #16
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e278      	b.n	8007afe <UART_SetConfig+0x7ae>
 800760c:	2320      	movs	r3, #32
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e274      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007614:	2340      	movs	r3, #64	@ 0x40
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e270      	b.n	8007afe <UART_SetConfig+0x7ae>
 800761c:	2380      	movs	r3, #128	@ 0x80
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e26c      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a1b      	ldr	r2, [pc, #108]	@ (8007698 <UART_SetConfig+0x348>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d142      	bne.n	80076b4 <UART_SetConfig+0x364>
 800762e:	4b16      	ldr	r3, [pc, #88]	@ (8007688 <UART_SetConfig+0x338>)
 8007630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	2b05      	cmp	r3, #5
 8007638:	d838      	bhi.n	80076ac <UART_SetConfig+0x35c>
 800763a:	a201      	add	r2, pc, #4	@ (adr r2, 8007640 <UART_SetConfig+0x2f0>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007659 	.word	0x08007659
 8007644:	08007661 	.word	0x08007661
 8007648:	08007669 	.word	0x08007669
 800764c:	08007671 	.word	0x08007671
 8007650:	0800769d 	.word	0x0800769d
 8007654:	080076a5 	.word	0x080076a5
 8007658:	2300      	movs	r3, #0
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765e:	e24e      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007660:	2304      	movs	r3, #4
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007666:	e24a      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007668:	2308      	movs	r3, #8
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766e:	e246      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007670:	2310      	movs	r3, #16
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e242      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007678:	cfff69f3 	.word	0xcfff69f3
 800767c:	58000c00 	.word	0x58000c00
 8007680:	11fff4ff 	.word	0x11fff4ff
 8007684:	40011000 	.word	0x40011000
 8007688:	58024400 	.word	0x58024400
 800768c:	40004400 	.word	0x40004400
 8007690:	40004800 	.word	0x40004800
 8007694:	40004c00 	.word	0x40004c00
 8007698:	40005000 	.word	0x40005000
 800769c:	2320      	movs	r3, #32
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a2:	e22c      	b.n	8007afe <UART_SetConfig+0x7ae>
 80076a4:	2340      	movs	r3, #64	@ 0x40
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076aa:	e228      	b.n	8007afe <UART_SetConfig+0x7ae>
 80076ac:	2380      	movs	r3, #128	@ 0x80
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e224      	b.n	8007afe <UART_SetConfig+0x7ae>
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4ab1      	ldr	r2, [pc, #708]	@ (8007980 <UART_SetConfig+0x630>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d176      	bne.n	80077ac <UART_SetConfig+0x45c>
 80076be:	4bb1      	ldr	r3, [pc, #708]	@ (8007984 <UART_SetConfig+0x634>)
 80076c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076c6:	2b28      	cmp	r3, #40	@ 0x28
 80076c8:	d86c      	bhi.n	80077a4 <UART_SetConfig+0x454>
 80076ca:	a201      	add	r2, pc, #4	@ (adr r2, 80076d0 <UART_SetConfig+0x380>)
 80076cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d0:	08007775 	.word	0x08007775
 80076d4:	080077a5 	.word	0x080077a5
 80076d8:	080077a5 	.word	0x080077a5
 80076dc:	080077a5 	.word	0x080077a5
 80076e0:	080077a5 	.word	0x080077a5
 80076e4:	080077a5 	.word	0x080077a5
 80076e8:	080077a5 	.word	0x080077a5
 80076ec:	080077a5 	.word	0x080077a5
 80076f0:	0800777d 	.word	0x0800777d
 80076f4:	080077a5 	.word	0x080077a5
 80076f8:	080077a5 	.word	0x080077a5
 80076fc:	080077a5 	.word	0x080077a5
 8007700:	080077a5 	.word	0x080077a5
 8007704:	080077a5 	.word	0x080077a5
 8007708:	080077a5 	.word	0x080077a5
 800770c:	080077a5 	.word	0x080077a5
 8007710:	08007785 	.word	0x08007785
 8007714:	080077a5 	.word	0x080077a5
 8007718:	080077a5 	.word	0x080077a5
 800771c:	080077a5 	.word	0x080077a5
 8007720:	080077a5 	.word	0x080077a5
 8007724:	080077a5 	.word	0x080077a5
 8007728:	080077a5 	.word	0x080077a5
 800772c:	080077a5 	.word	0x080077a5
 8007730:	0800778d 	.word	0x0800778d
 8007734:	080077a5 	.word	0x080077a5
 8007738:	080077a5 	.word	0x080077a5
 800773c:	080077a5 	.word	0x080077a5
 8007740:	080077a5 	.word	0x080077a5
 8007744:	080077a5 	.word	0x080077a5
 8007748:	080077a5 	.word	0x080077a5
 800774c:	080077a5 	.word	0x080077a5
 8007750:	08007795 	.word	0x08007795
 8007754:	080077a5 	.word	0x080077a5
 8007758:	080077a5 	.word	0x080077a5
 800775c:	080077a5 	.word	0x080077a5
 8007760:	080077a5 	.word	0x080077a5
 8007764:	080077a5 	.word	0x080077a5
 8007768:	080077a5 	.word	0x080077a5
 800776c:	080077a5 	.word	0x080077a5
 8007770:	0800779d 	.word	0x0800779d
 8007774:	2301      	movs	r3, #1
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777a:	e1c0      	b.n	8007afe <UART_SetConfig+0x7ae>
 800777c:	2304      	movs	r3, #4
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e1bc      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007784:	2308      	movs	r3, #8
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e1b8      	b.n	8007afe <UART_SetConfig+0x7ae>
 800778c:	2310      	movs	r3, #16
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e1b4      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007794:	2320      	movs	r3, #32
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e1b0      	b.n	8007afe <UART_SetConfig+0x7ae>
 800779c:	2340      	movs	r3, #64	@ 0x40
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e1ac      	b.n	8007afe <UART_SetConfig+0x7ae>
 80077a4:	2380      	movs	r3, #128	@ 0x80
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077aa:	e1a8      	b.n	8007afe <UART_SetConfig+0x7ae>
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a75      	ldr	r2, [pc, #468]	@ (8007988 <UART_SetConfig+0x638>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d130      	bne.n	8007818 <UART_SetConfig+0x4c8>
 80077b6:	4b73      	ldr	r3, [pc, #460]	@ (8007984 <UART_SetConfig+0x634>)
 80077b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	2b05      	cmp	r3, #5
 80077c0:	d826      	bhi.n	8007810 <UART_SetConfig+0x4c0>
 80077c2:	a201      	add	r2, pc, #4	@ (adr r2, 80077c8 <UART_SetConfig+0x478>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077e1 	.word	0x080077e1
 80077cc:	080077e9 	.word	0x080077e9
 80077d0:	080077f1 	.word	0x080077f1
 80077d4:	080077f9 	.word	0x080077f9
 80077d8:	08007801 	.word	0x08007801
 80077dc:	08007809 	.word	0x08007809
 80077e0:	2300      	movs	r3, #0
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e6:	e18a      	b.n	8007afe <UART_SetConfig+0x7ae>
 80077e8:	2304      	movs	r3, #4
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e186      	b.n	8007afe <UART_SetConfig+0x7ae>
 80077f0:	2308      	movs	r3, #8
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e182      	b.n	8007afe <UART_SetConfig+0x7ae>
 80077f8:	2310      	movs	r3, #16
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e17e      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007800:	2320      	movs	r3, #32
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007806:	e17a      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007808:	2340      	movs	r3, #64	@ 0x40
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e176      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007810:	2380      	movs	r3, #128	@ 0x80
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e172      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a5b      	ldr	r2, [pc, #364]	@ (800798c <UART_SetConfig+0x63c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d130      	bne.n	8007884 <UART_SetConfig+0x534>
 8007822:	4b58      	ldr	r3, [pc, #352]	@ (8007984 <UART_SetConfig+0x634>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b05      	cmp	r3, #5
 800782c:	d826      	bhi.n	800787c <UART_SetConfig+0x52c>
 800782e:	a201      	add	r2, pc, #4	@ (adr r2, 8007834 <UART_SetConfig+0x4e4>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	0800784d 	.word	0x0800784d
 8007838:	08007855 	.word	0x08007855
 800783c:	0800785d 	.word	0x0800785d
 8007840:	08007865 	.word	0x08007865
 8007844:	0800786d 	.word	0x0800786d
 8007848:	08007875 	.word	0x08007875
 800784c:	2300      	movs	r3, #0
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007852:	e154      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007854:	2304      	movs	r3, #4
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e150      	b.n	8007afe <UART_SetConfig+0x7ae>
 800785c:	2308      	movs	r3, #8
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007862:	e14c      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007864:	2310      	movs	r3, #16
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e148      	b.n	8007afe <UART_SetConfig+0x7ae>
 800786c:	2320      	movs	r3, #32
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e144      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007874:	2340      	movs	r3, #64	@ 0x40
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e140      	b.n	8007afe <UART_SetConfig+0x7ae>
 800787c:	2380      	movs	r3, #128	@ 0x80
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e13c      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a41      	ldr	r2, [pc, #260]	@ (8007990 <UART_SetConfig+0x640>)
 800788a:	4293      	cmp	r3, r2
 800788c:	f040 8082 	bne.w	8007994 <UART_SetConfig+0x644>
 8007890:	4b3c      	ldr	r3, [pc, #240]	@ (8007984 <UART_SetConfig+0x634>)
 8007892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007894:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007898:	2b28      	cmp	r3, #40	@ 0x28
 800789a:	d86d      	bhi.n	8007978 <UART_SetConfig+0x628>
 800789c:	a201      	add	r2, pc, #4	@ (adr r2, 80078a4 <UART_SetConfig+0x554>)
 800789e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a2:	bf00      	nop
 80078a4:	08007949 	.word	0x08007949
 80078a8:	08007979 	.word	0x08007979
 80078ac:	08007979 	.word	0x08007979
 80078b0:	08007979 	.word	0x08007979
 80078b4:	08007979 	.word	0x08007979
 80078b8:	08007979 	.word	0x08007979
 80078bc:	08007979 	.word	0x08007979
 80078c0:	08007979 	.word	0x08007979
 80078c4:	08007951 	.word	0x08007951
 80078c8:	08007979 	.word	0x08007979
 80078cc:	08007979 	.word	0x08007979
 80078d0:	08007979 	.word	0x08007979
 80078d4:	08007979 	.word	0x08007979
 80078d8:	08007979 	.word	0x08007979
 80078dc:	08007979 	.word	0x08007979
 80078e0:	08007979 	.word	0x08007979
 80078e4:	08007959 	.word	0x08007959
 80078e8:	08007979 	.word	0x08007979
 80078ec:	08007979 	.word	0x08007979
 80078f0:	08007979 	.word	0x08007979
 80078f4:	08007979 	.word	0x08007979
 80078f8:	08007979 	.word	0x08007979
 80078fc:	08007979 	.word	0x08007979
 8007900:	08007979 	.word	0x08007979
 8007904:	08007961 	.word	0x08007961
 8007908:	08007979 	.word	0x08007979
 800790c:	08007979 	.word	0x08007979
 8007910:	08007979 	.word	0x08007979
 8007914:	08007979 	.word	0x08007979
 8007918:	08007979 	.word	0x08007979
 800791c:	08007979 	.word	0x08007979
 8007920:	08007979 	.word	0x08007979
 8007924:	08007969 	.word	0x08007969
 8007928:	08007979 	.word	0x08007979
 800792c:	08007979 	.word	0x08007979
 8007930:	08007979 	.word	0x08007979
 8007934:	08007979 	.word	0x08007979
 8007938:	08007979 	.word	0x08007979
 800793c:	08007979 	.word	0x08007979
 8007940:	08007979 	.word	0x08007979
 8007944:	08007971 	.word	0x08007971
 8007948:	2301      	movs	r3, #1
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e0d6      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007950:	2304      	movs	r3, #4
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e0d2      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007958:	2308      	movs	r3, #8
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e0ce      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007960:	2310      	movs	r3, #16
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e0ca      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007968:	2320      	movs	r3, #32
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e0c6      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007970:	2340      	movs	r3, #64	@ 0x40
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e0c2      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007978:	2380      	movs	r3, #128	@ 0x80
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797e:	e0be      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007980:	40011400 	.word	0x40011400
 8007984:	58024400 	.word	0x58024400
 8007988:	40007800 	.word	0x40007800
 800798c:	40007c00 	.word	0x40007c00
 8007990:	40011800 	.word	0x40011800
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4aad      	ldr	r2, [pc, #692]	@ (8007c50 <UART_SetConfig+0x900>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d176      	bne.n	8007a8c <UART_SetConfig+0x73c>
 800799e:	4bad      	ldr	r3, [pc, #692]	@ (8007c54 <UART_SetConfig+0x904>)
 80079a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079a6:	2b28      	cmp	r3, #40	@ 0x28
 80079a8:	d86c      	bhi.n	8007a84 <UART_SetConfig+0x734>
 80079aa:	a201      	add	r2, pc, #4	@ (adr r2, 80079b0 <UART_SetConfig+0x660>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	08007a55 	.word	0x08007a55
 80079b4:	08007a85 	.word	0x08007a85
 80079b8:	08007a85 	.word	0x08007a85
 80079bc:	08007a85 	.word	0x08007a85
 80079c0:	08007a85 	.word	0x08007a85
 80079c4:	08007a85 	.word	0x08007a85
 80079c8:	08007a85 	.word	0x08007a85
 80079cc:	08007a85 	.word	0x08007a85
 80079d0:	08007a5d 	.word	0x08007a5d
 80079d4:	08007a85 	.word	0x08007a85
 80079d8:	08007a85 	.word	0x08007a85
 80079dc:	08007a85 	.word	0x08007a85
 80079e0:	08007a85 	.word	0x08007a85
 80079e4:	08007a85 	.word	0x08007a85
 80079e8:	08007a85 	.word	0x08007a85
 80079ec:	08007a85 	.word	0x08007a85
 80079f0:	08007a65 	.word	0x08007a65
 80079f4:	08007a85 	.word	0x08007a85
 80079f8:	08007a85 	.word	0x08007a85
 80079fc:	08007a85 	.word	0x08007a85
 8007a00:	08007a85 	.word	0x08007a85
 8007a04:	08007a85 	.word	0x08007a85
 8007a08:	08007a85 	.word	0x08007a85
 8007a0c:	08007a85 	.word	0x08007a85
 8007a10:	08007a6d 	.word	0x08007a6d
 8007a14:	08007a85 	.word	0x08007a85
 8007a18:	08007a85 	.word	0x08007a85
 8007a1c:	08007a85 	.word	0x08007a85
 8007a20:	08007a85 	.word	0x08007a85
 8007a24:	08007a85 	.word	0x08007a85
 8007a28:	08007a85 	.word	0x08007a85
 8007a2c:	08007a85 	.word	0x08007a85
 8007a30:	08007a75 	.word	0x08007a75
 8007a34:	08007a85 	.word	0x08007a85
 8007a38:	08007a85 	.word	0x08007a85
 8007a3c:	08007a85 	.word	0x08007a85
 8007a40:	08007a85 	.word	0x08007a85
 8007a44:	08007a85 	.word	0x08007a85
 8007a48:	08007a85 	.word	0x08007a85
 8007a4c:	08007a85 	.word	0x08007a85
 8007a50:	08007a7d 	.word	0x08007a7d
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5a:	e050      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007a5c:	2304      	movs	r3, #4
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a62:	e04c      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007a64:	2308      	movs	r3, #8
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6a:	e048      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e044      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007a74:	2320      	movs	r3, #32
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e040      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007a7c:	2340      	movs	r3, #64	@ 0x40
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e03c      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007a84:	2380      	movs	r3, #128	@ 0x80
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e038      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a71      	ldr	r2, [pc, #452]	@ (8007c58 <UART_SetConfig+0x908>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d130      	bne.n	8007af8 <UART_SetConfig+0x7a8>
 8007a96:	4b6f      	ldr	r3, [pc, #444]	@ (8007c54 <UART_SetConfig+0x904>)
 8007a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d826      	bhi.n	8007af0 <UART_SetConfig+0x7a0>
 8007aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa8 <UART_SetConfig+0x758>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ac1 	.word	0x08007ac1
 8007aac:	08007ac9 	.word	0x08007ac9
 8007ab0:	08007ad1 	.word	0x08007ad1
 8007ab4:	08007ad9 	.word	0x08007ad9
 8007ab8:	08007ae1 	.word	0x08007ae1
 8007abc:	08007ae9 	.word	0x08007ae9
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e01a      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007ac8:	2304      	movs	r3, #4
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e016      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007ad0:	2308      	movs	r3, #8
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e012      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007ad8:	2310      	movs	r3, #16
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e00e      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007ae0:	2320      	movs	r3, #32
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e00a      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007ae8:	2340      	movs	r3, #64	@ 0x40
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e006      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007af0:	2380      	movs	r3, #128	@ 0x80
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e002      	b.n	8007afe <UART_SetConfig+0x7ae>
 8007af8:	2380      	movs	r3, #128	@ 0x80
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a55      	ldr	r2, [pc, #340]	@ (8007c58 <UART_SetConfig+0x908>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	f040 80f8 	bne.w	8007cfa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	dc46      	bgt.n	8007ba0 <UART_SetConfig+0x850>
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	db75      	blt.n	8007c02 <UART_SetConfig+0x8b2>
 8007b16:	3b02      	subs	r3, #2
 8007b18:	2b1e      	cmp	r3, #30
 8007b1a:	d872      	bhi.n	8007c02 <UART_SetConfig+0x8b2>
 8007b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <UART_SetConfig+0x7d4>)
 8007b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b22:	bf00      	nop
 8007b24:	08007ba7 	.word	0x08007ba7
 8007b28:	08007c03 	.word	0x08007c03
 8007b2c:	08007baf 	.word	0x08007baf
 8007b30:	08007c03 	.word	0x08007c03
 8007b34:	08007c03 	.word	0x08007c03
 8007b38:	08007c03 	.word	0x08007c03
 8007b3c:	08007bbf 	.word	0x08007bbf
 8007b40:	08007c03 	.word	0x08007c03
 8007b44:	08007c03 	.word	0x08007c03
 8007b48:	08007c03 	.word	0x08007c03
 8007b4c:	08007c03 	.word	0x08007c03
 8007b50:	08007c03 	.word	0x08007c03
 8007b54:	08007c03 	.word	0x08007c03
 8007b58:	08007c03 	.word	0x08007c03
 8007b5c:	08007bcf 	.word	0x08007bcf
 8007b60:	08007c03 	.word	0x08007c03
 8007b64:	08007c03 	.word	0x08007c03
 8007b68:	08007c03 	.word	0x08007c03
 8007b6c:	08007c03 	.word	0x08007c03
 8007b70:	08007c03 	.word	0x08007c03
 8007b74:	08007c03 	.word	0x08007c03
 8007b78:	08007c03 	.word	0x08007c03
 8007b7c:	08007c03 	.word	0x08007c03
 8007b80:	08007c03 	.word	0x08007c03
 8007b84:	08007c03 	.word	0x08007c03
 8007b88:	08007c03 	.word	0x08007c03
 8007b8c:	08007c03 	.word	0x08007c03
 8007b90:	08007c03 	.word	0x08007c03
 8007b94:	08007c03 	.word	0x08007c03
 8007b98:	08007c03 	.word	0x08007c03
 8007b9c:	08007bf5 	.word	0x08007bf5
 8007ba0:	2b40      	cmp	r3, #64	@ 0x40
 8007ba2:	d02a      	beq.n	8007bfa <UART_SetConfig+0x8aa>
 8007ba4:	e02d      	b.n	8007c02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ba6:	f7fc fdcb 	bl	8004740 <HAL_RCCEx_GetD3PCLK1Freq>
 8007baa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007bac:	e02f      	b.n	8007c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fc fdda 	bl	800476c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bbc:	e027      	b.n	8007c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bbe:	f107 0318 	add.w	r3, r7, #24
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fc ff26 	bl	8004a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bcc:	e01f      	b.n	8007c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bce:	4b21      	ldr	r3, [pc, #132]	@ (8007c54 <UART_SetConfig+0x904>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bda:	4b1e      	ldr	r3, [pc, #120]	@ (8007c54 <UART_SetConfig+0x904>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	08db      	lsrs	r3, r3, #3
 8007be0:	f003 0303 	and.w	r3, r3, #3
 8007be4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c5c <UART_SetConfig+0x90c>)
 8007be6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bec:	e00f      	b.n	8007c0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007bee:	4b1b      	ldr	r3, [pc, #108]	@ (8007c5c <UART_SetConfig+0x90c>)
 8007bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bf2:	e00c      	b.n	8007c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c60 <UART_SetConfig+0x910>)
 8007bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bf8:	e009      	b.n	8007c0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c00:	e005      	b.n	8007c0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 81ee 	beq.w	8007ff2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1a:	4a12      	ldr	r2, [pc, #72]	@ (8007c64 <UART_SetConfig+0x914>)
 8007c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c20:	461a      	mov	r2, r3
 8007c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c28:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	4413      	add	r3, r2
 8007c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d305      	bcc.n	8007c46 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d910      	bls.n	8007c68 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c4c:	e1d1      	b.n	8007ff2 <UART_SetConfig+0xca2>
 8007c4e:	bf00      	nop
 8007c50:	40011c00 	.word	0x40011c00
 8007c54:	58024400 	.word	0x58024400
 8007c58:	58000c00 	.word	0x58000c00
 8007c5c:	03d09000 	.word	0x03d09000
 8007c60:	003d0900 	.word	0x003d0900
 8007c64:	080086f0 	.word	0x080086f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	60bb      	str	r3, [r7, #8]
 8007c6e:	60fa      	str	r2, [r7, #12]
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c74:	4ac0      	ldr	r2, [pc, #768]	@ (8007f78 <UART_SetConfig+0xc28>)
 8007c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	603b      	str	r3, [r7, #0]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c8a:	f7f8 fb31 	bl	80002f0 <__aeabi_uldivmod>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4610      	mov	r0, r2
 8007c94:	4619      	mov	r1, r3
 8007c96:	f04f 0200 	mov.w	r2, #0
 8007c9a:	f04f 0300 	mov.w	r3, #0
 8007c9e:	020b      	lsls	r3, r1, #8
 8007ca0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ca4:	0202      	lsls	r2, r0, #8
 8007ca6:	6979      	ldr	r1, [r7, #20]
 8007ca8:	6849      	ldr	r1, [r1, #4]
 8007caa:	0849      	lsrs	r1, r1, #1
 8007cac:	2000      	movs	r0, #0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	eb12 0804 	adds.w	r8, r2, r4
 8007cb6:	eb43 0905 	adc.w	r9, r3, r5
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	469a      	mov	sl, r3
 8007cc2:	4693      	mov	fp, r2
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	465b      	mov	r3, fp
 8007cc8:	4640      	mov	r0, r8
 8007cca:	4649      	mov	r1, r9
 8007ccc:	f7f8 fb10 	bl	80002f0 <__aeabi_uldivmod>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cde:	d308      	bcc.n	8007cf2 <UART_SetConfig+0x9a2>
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ce6:	d204      	bcs.n	8007cf2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cee:	60da      	str	r2, [r3, #12]
 8007cf0:	e17f      	b.n	8007ff2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007cf8:	e17b      	b.n	8007ff2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d02:	f040 80bd 	bne.w	8007e80 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007d06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	dc48      	bgt.n	8007da0 <UART_SetConfig+0xa50>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	db7b      	blt.n	8007e0a <UART_SetConfig+0xaba>
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d879      	bhi.n	8007e0a <UART_SetConfig+0xaba>
 8007d16:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <UART_SetConfig+0x9cc>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007da7 	.word	0x08007da7
 8007d20:	08007daf 	.word	0x08007daf
 8007d24:	08007e0b 	.word	0x08007e0b
 8007d28:	08007e0b 	.word	0x08007e0b
 8007d2c:	08007db7 	.word	0x08007db7
 8007d30:	08007e0b 	.word	0x08007e0b
 8007d34:	08007e0b 	.word	0x08007e0b
 8007d38:	08007e0b 	.word	0x08007e0b
 8007d3c:	08007dc7 	.word	0x08007dc7
 8007d40:	08007e0b 	.word	0x08007e0b
 8007d44:	08007e0b 	.word	0x08007e0b
 8007d48:	08007e0b 	.word	0x08007e0b
 8007d4c:	08007e0b 	.word	0x08007e0b
 8007d50:	08007e0b 	.word	0x08007e0b
 8007d54:	08007e0b 	.word	0x08007e0b
 8007d58:	08007e0b 	.word	0x08007e0b
 8007d5c:	08007dd7 	.word	0x08007dd7
 8007d60:	08007e0b 	.word	0x08007e0b
 8007d64:	08007e0b 	.word	0x08007e0b
 8007d68:	08007e0b 	.word	0x08007e0b
 8007d6c:	08007e0b 	.word	0x08007e0b
 8007d70:	08007e0b 	.word	0x08007e0b
 8007d74:	08007e0b 	.word	0x08007e0b
 8007d78:	08007e0b 	.word	0x08007e0b
 8007d7c:	08007e0b 	.word	0x08007e0b
 8007d80:	08007e0b 	.word	0x08007e0b
 8007d84:	08007e0b 	.word	0x08007e0b
 8007d88:	08007e0b 	.word	0x08007e0b
 8007d8c:	08007e0b 	.word	0x08007e0b
 8007d90:	08007e0b 	.word	0x08007e0b
 8007d94:	08007e0b 	.word	0x08007e0b
 8007d98:	08007e0b 	.word	0x08007e0b
 8007d9c:	08007dfd 	.word	0x08007dfd
 8007da0:	2b40      	cmp	r3, #64	@ 0x40
 8007da2:	d02e      	beq.n	8007e02 <UART_SetConfig+0xab2>
 8007da4:	e031      	b.n	8007e0a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da6:	f7fb fae1 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8007daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dac:	e033      	b.n	8007e16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dae:	f7fb faf3 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 8007db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007db4:	e02f      	b.n	8007e16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fc fcd6 	bl	800476c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dc4:	e027      	b.n	8007e16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc6:	f107 0318 	add.w	r3, r7, #24
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fc fe22 	bl	8004a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dd4:	e01f      	b.n	8007e16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dd6:	4b69      	ldr	r3, [pc, #420]	@ (8007f7c <UART_SetConfig+0xc2c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d009      	beq.n	8007df6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007de2:	4b66      	ldr	r3, [pc, #408]	@ (8007f7c <UART_SetConfig+0xc2c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	f003 0303 	and.w	r3, r3, #3
 8007dec:	4a64      	ldr	r2, [pc, #400]	@ (8007f80 <UART_SetConfig+0xc30>)
 8007dee:	fa22 f303 	lsr.w	r3, r2, r3
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007df4:	e00f      	b.n	8007e16 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007df6:	4b62      	ldr	r3, [pc, #392]	@ (8007f80 <UART_SetConfig+0xc30>)
 8007df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfa:	e00c      	b.n	8007e16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007dfc:	4b61      	ldr	r3, [pc, #388]	@ (8007f84 <UART_SetConfig+0xc34>)
 8007dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e00:	e009      	b.n	8007e16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e08:	e005      	b.n	8007e16 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 80ea 	beq.w	8007ff2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	4a55      	ldr	r2, [pc, #340]	@ (8007f78 <UART_SetConfig+0xc28>)
 8007e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e30:	005a      	lsls	r2, r3, #1
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	085b      	lsrs	r3, r3, #1
 8007e38:	441a      	add	r2, r3
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e46:	2b0f      	cmp	r3, #15
 8007e48:	d916      	bls.n	8007e78 <UART_SetConfig+0xb28>
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e50:	d212      	bcs.n	8007e78 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f023 030f 	bic.w	r3, r3, #15
 8007e5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5e:	085b      	lsrs	r3, r3, #1
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007e74:	60da      	str	r2, [r3, #12]
 8007e76:	e0bc      	b.n	8007ff2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007e7e:	e0b8      	b.n	8007ff2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	dc4b      	bgt.n	8007f20 <UART_SetConfig+0xbd0>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f2c0 8087 	blt.w	8007f9c <UART_SetConfig+0xc4c>
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	f200 8084 	bhi.w	8007f9c <UART_SetConfig+0xc4c>
 8007e94:	a201      	add	r2, pc, #4	@ (adr r2, 8007e9c <UART_SetConfig+0xb4c>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007f27 	.word	0x08007f27
 8007ea0:	08007f2f 	.word	0x08007f2f
 8007ea4:	08007f9d 	.word	0x08007f9d
 8007ea8:	08007f9d 	.word	0x08007f9d
 8007eac:	08007f37 	.word	0x08007f37
 8007eb0:	08007f9d 	.word	0x08007f9d
 8007eb4:	08007f9d 	.word	0x08007f9d
 8007eb8:	08007f9d 	.word	0x08007f9d
 8007ebc:	08007f47 	.word	0x08007f47
 8007ec0:	08007f9d 	.word	0x08007f9d
 8007ec4:	08007f9d 	.word	0x08007f9d
 8007ec8:	08007f9d 	.word	0x08007f9d
 8007ecc:	08007f9d 	.word	0x08007f9d
 8007ed0:	08007f9d 	.word	0x08007f9d
 8007ed4:	08007f9d 	.word	0x08007f9d
 8007ed8:	08007f9d 	.word	0x08007f9d
 8007edc:	08007f57 	.word	0x08007f57
 8007ee0:	08007f9d 	.word	0x08007f9d
 8007ee4:	08007f9d 	.word	0x08007f9d
 8007ee8:	08007f9d 	.word	0x08007f9d
 8007eec:	08007f9d 	.word	0x08007f9d
 8007ef0:	08007f9d 	.word	0x08007f9d
 8007ef4:	08007f9d 	.word	0x08007f9d
 8007ef8:	08007f9d 	.word	0x08007f9d
 8007efc:	08007f9d 	.word	0x08007f9d
 8007f00:	08007f9d 	.word	0x08007f9d
 8007f04:	08007f9d 	.word	0x08007f9d
 8007f08:	08007f9d 	.word	0x08007f9d
 8007f0c:	08007f9d 	.word	0x08007f9d
 8007f10:	08007f9d 	.word	0x08007f9d
 8007f14:	08007f9d 	.word	0x08007f9d
 8007f18:	08007f9d 	.word	0x08007f9d
 8007f1c:	08007f8f 	.word	0x08007f8f
 8007f20:	2b40      	cmp	r3, #64	@ 0x40
 8007f22:	d037      	beq.n	8007f94 <UART_SetConfig+0xc44>
 8007f24:	e03a      	b.n	8007f9c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f26:	f7fb fa21 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8007f2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f2c:	e03c      	b.n	8007fa8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f2e:	f7fb fa33 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 8007f32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f34:	e038      	b.n	8007fa8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fc fc16 	bl	800476c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f44:	e030      	b.n	8007fa8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f46:	f107 0318 	add.w	r3, r7, #24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7fc fd62 	bl	8004a14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f54:	e028      	b.n	8007fa8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f56:	4b09      	ldr	r3, [pc, #36]	@ (8007f7c <UART_SetConfig+0xc2c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d012      	beq.n	8007f88 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f62:	4b06      	ldr	r3, [pc, #24]	@ (8007f7c <UART_SetConfig+0xc2c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	08db      	lsrs	r3, r3, #3
 8007f68:	f003 0303 	and.w	r3, r3, #3
 8007f6c:	4a04      	ldr	r2, [pc, #16]	@ (8007f80 <UART_SetConfig+0xc30>)
 8007f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f74:	e018      	b.n	8007fa8 <UART_SetConfig+0xc58>
 8007f76:	bf00      	nop
 8007f78:	080086f0 	.word	0x080086f0
 8007f7c:	58024400 	.word	0x58024400
 8007f80:	03d09000 	.word	0x03d09000
 8007f84:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007f88:	4b24      	ldr	r3, [pc, #144]	@ (800801c <UART_SetConfig+0xccc>)
 8007f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f8c:	e00c      	b.n	8007fa8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f8e:	4b24      	ldr	r3, [pc, #144]	@ (8008020 <UART_SetConfig+0xcd0>)
 8007f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f92:	e009      	b.n	8007fa8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9a:	e005      	b.n	8007fa8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007fa6:	bf00      	nop
    }

    if (pclk != 0U)
 8007fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d021      	beq.n	8007ff2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8008024 <UART_SetConfig+0xcd4>)
 8007fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fbc:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	085b      	lsrs	r3, r3, #1
 8007fc6:	441a      	add	r2, r3
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	2b0f      	cmp	r3, #15
 8007fd6:	d909      	bls.n	8007fec <UART_SetConfig+0xc9c>
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fde:	d205      	bcs.n	8007fec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	60da      	str	r2, [r3, #12]
 8007fea:	e002      	b.n	8007ff2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2200      	movs	r2, #0
 8008006:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2200      	movs	r2, #0
 800800c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800800e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008012:	4618      	mov	r0, r3
 8008014:	3748      	adds	r7, #72	@ 0x48
 8008016:	46bd      	mov	sp, r7
 8008018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800801c:	03d09000 	.word	0x03d09000
 8008020:	003d0900 	.word	0x003d0900
 8008024:	080086f0 	.word	0x080086f0

08008028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00a      	beq.n	80080da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01a      	beq.n	800813e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008126:	d10a      	bne.n	800813e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	605a      	str	r2, [r3, #4]
  }
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b098      	sub	sp, #96	@ 0x60
 8008170:	af02      	add	r7, sp, #8
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800817c:	f7f9 fe24 	bl	8001dc8 <HAL_GetTick>
 8008180:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0308 	and.w	r3, r3, #8
 800818c:	2b08      	cmp	r3, #8
 800818e:	d12f      	bne.n	80081f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008190:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008198:	2200      	movs	r2, #0
 800819a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f88e 	bl	80082c0 <UART_WaitOnFlagUntilTimeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d022      	beq.n	80081f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b2:	e853 3f00 	ldrex	r3, [r3]
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081be:	653b      	str	r3, [r7, #80]	@ 0x50
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80081ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e6      	bne.n	80081aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2220      	movs	r2, #32
 80081e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e063      	b.n	80082b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d149      	bne.n	8008292 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008206:	2200      	movs	r2, #0
 8008208:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f857 	bl	80082c0 <UART_WaitOnFlagUntilTimeout>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d03c      	beq.n	8008292 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	623b      	str	r3, [r7, #32]
   return(result);
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800822c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008236:	633b      	str	r3, [r7, #48]	@ 0x30
 8008238:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800823c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e6      	bne.n	8008218 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3308      	adds	r3, #8
 8008250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	60fb      	str	r3, [r7, #12]
   return(result);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f023 0301 	bic.w	r3, r3, #1
 8008260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3308      	adds	r3, #8
 8008268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800826a:	61fa      	str	r2, [r7, #28]
 800826c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	69b9      	ldr	r1, [r7, #24]
 8008270:	69fa      	ldr	r2, [r7, #28]
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	617b      	str	r3, [r7, #20]
   return(result);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e5      	bne.n	800824a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e012      	b.n	80082b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2220      	movs	r2, #32
 8008296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3758      	adds	r7, #88	@ 0x58
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	4613      	mov	r3, r2
 80082ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082d0:	e04f      	b.n	8008372 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082d8:	d04b      	beq.n	8008372 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082da:	f7f9 fd75 	bl	8001dc8 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d302      	bcc.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e04e      	b.n	8008392 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0304 	and.w	r3, r3, #4
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d037      	beq.n	8008372 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b80      	cmp	r3, #128	@ 0x80
 8008306:	d034      	beq.n	8008372 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b40      	cmp	r3, #64	@ 0x40
 800830c:	d031      	beq.n	8008372 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	f003 0308 	and.w	r3, r3, #8
 8008318:	2b08      	cmp	r3, #8
 800831a:	d110      	bne.n	800833e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2208      	movs	r2, #8
 8008322:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f839 	bl	800839c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2208      	movs	r2, #8
 800832e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e029      	b.n	8008392 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800834c:	d111      	bne.n	8008372 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f81f 	bl	800839c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2220      	movs	r2, #32
 8008362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e00f      	b.n	8008392 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69da      	ldr	r2, [r3, #28]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4013      	ands	r3, r2
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	429a      	cmp	r2, r3
 8008380:	bf0c      	ite	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	2300      	movne	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	429a      	cmp	r2, r3
 800838e:	d0a0      	beq.n	80082d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
	...

0800839c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800839c:	b480      	push	{r7}
 800839e:	b095      	sub	sp, #84	@ 0x54
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80083c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e6      	bne.n	80083a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3308      	adds	r3, #8
 80083dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	4b1e      	ldr	r3, [pc, #120]	@ (8008464 <UART_EndRxTransfer+0xc8>)
 80083ea:	4013      	ands	r3, r2
 80083ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3308      	adds	r3, #8
 80083f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e5      	bne.n	80083d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800840e:	2b01      	cmp	r3, #1
 8008410:	d118      	bne.n	8008444 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f023 0310 	bic.w	r3, r3, #16
 8008426:	647b      	str	r3, [r7, #68]	@ 0x44
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008430:	61bb      	str	r3, [r7, #24]
 8008432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	6979      	ldr	r1, [r7, #20]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	613b      	str	r3, [r7, #16]
   return(result);
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e6      	bne.n	8008412 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2220      	movs	r2, #32
 8008448:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008458:	bf00      	nop
 800845a:	3754      	adds	r7, #84	@ 0x54
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr
 8008464:	effffffe 	.word	0xeffffffe

08008468 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008476:	2b01      	cmp	r3, #1
 8008478:	d101      	bne.n	800847e <HAL_UARTEx_DisableFifoMode+0x16>
 800847a:	2302      	movs	r3, #2
 800847c:	e027      	b.n	80084ce <HAL_UARTEx_DisableFifoMode+0x66>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2224      	movs	r2, #36	@ 0x24
 800848a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80084ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d101      	bne.n	80084f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084ee:	2302      	movs	r3, #2
 80084f0:	e02d      	b.n	800854e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2224      	movs	r2, #36	@ 0x24
 80084fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0201 	bic.w	r2, r2, #1
 8008518:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f850 	bl	80085d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800856a:	2302      	movs	r3, #2
 800856c:	e02d      	b.n	80085ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2224      	movs	r2, #36	@ 0x24
 800857a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0201 	bic.w	r2, r2, #1
 8008594:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f812 	bl	80085d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d108      	bne.n	80085f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085f4:	e031      	b.n	800865a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085f6:	2310      	movs	r3, #16
 80085f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085fa:	2310      	movs	r3, #16
 80085fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	0e5b      	lsrs	r3, r3, #25
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	0f5b      	lsrs	r3, r3, #29
 8008616:	b2db      	uxtb	r3, r3
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	7b3a      	ldrb	r2, [r7, #12]
 8008622:	4911      	ldr	r1, [pc, #68]	@ (8008668 <UARTEx_SetNbDataToProcess+0x94>)
 8008624:	5c8a      	ldrb	r2, [r1, r2]
 8008626:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800862a:	7b3a      	ldrb	r2, [r7, #12]
 800862c:	490f      	ldr	r1, [pc, #60]	@ (800866c <UARTEx_SetNbDataToProcess+0x98>)
 800862e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008630:	fb93 f3f2 	sdiv	r3, r3, r2
 8008634:	b29a      	uxth	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	7b7a      	ldrb	r2, [r7, #13]
 8008640:	4909      	ldr	r1, [pc, #36]	@ (8008668 <UARTEx_SetNbDataToProcess+0x94>)
 8008642:	5c8a      	ldrb	r2, [r1, r2]
 8008644:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008648:	7b7a      	ldrb	r2, [r7, #13]
 800864a:	4908      	ldr	r1, [pc, #32]	@ (800866c <UARTEx_SetNbDataToProcess+0x98>)
 800864c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800864e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008652:	b29a      	uxth	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800865a:	bf00      	nop
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	08008708 	.word	0x08008708
 800866c:	08008710 	.word	0x08008710

08008670 <memset>:
 8008670:	4402      	add	r2, r0
 8008672:	4603      	mov	r3, r0
 8008674:	4293      	cmp	r3, r2
 8008676:	d100      	bne.n	800867a <memset+0xa>
 8008678:	4770      	bx	lr
 800867a:	f803 1b01 	strb.w	r1, [r3], #1
 800867e:	e7f9      	b.n	8008674 <memset+0x4>

08008680 <__libc_init_array>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	4d0d      	ldr	r5, [pc, #52]	@ (80086b8 <__libc_init_array+0x38>)
 8008684:	4c0d      	ldr	r4, [pc, #52]	@ (80086bc <__libc_init_array+0x3c>)
 8008686:	1b64      	subs	r4, r4, r5
 8008688:	10a4      	asrs	r4, r4, #2
 800868a:	2600      	movs	r6, #0
 800868c:	42a6      	cmp	r6, r4
 800868e:	d109      	bne.n	80086a4 <__libc_init_array+0x24>
 8008690:	4d0b      	ldr	r5, [pc, #44]	@ (80086c0 <__libc_init_array+0x40>)
 8008692:	4c0c      	ldr	r4, [pc, #48]	@ (80086c4 <__libc_init_array+0x44>)
 8008694:	f000 f818 	bl	80086c8 <_init>
 8008698:	1b64      	subs	r4, r4, r5
 800869a:	10a4      	asrs	r4, r4, #2
 800869c:	2600      	movs	r6, #0
 800869e:	42a6      	cmp	r6, r4
 80086a0:	d105      	bne.n	80086ae <__libc_init_array+0x2e>
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a8:	4798      	blx	r3
 80086aa:	3601      	adds	r6, #1
 80086ac:	e7ee      	b.n	800868c <__libc_init_array+0xc>
 80086ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b2:	4798      	blx	r3
 80086b4:	3601      	adds	r6, #1
 80086b6:	e7f2      	b.n	800869e <__libc_init_array+0x1e>
 80086b8:	08008720 	.word	0x08008720
 80086bc:	08008720 	.word	0x08008720
 80086c0:	08008720 	.word	0x08008720
 80086c4:	08008724 	.word	0x08008724

080086c8 <_init>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	bf00      	nop
 80086cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ce:	bc08      	pop	{r3}
 80086d0:	469e      	mov	lr, r3
 80086d2:	4770      	bx	lr

080086d4 <_fini>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr
