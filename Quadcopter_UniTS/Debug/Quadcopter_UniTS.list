
Quadcopter_UniTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a05c  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800a310  0800a310  0000b310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a3c0  0800a3c0  0000b3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a3c8  0800a3c8  0000b3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a3cc  0800a3cc  0000b3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a3d0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000520  24000064  0800a434  0000c064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000584  0800a434  0000c584  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019f84  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e51  00000000  00000000  00026016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001430  00000000  00000000  00028e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fda  00000000  00000000  0002a298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031690  00000000  00000000  0002b272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ba97  00000000  00000000  0005c902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001408ab  00000000  00000000  00078399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b8c44  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005860  00000000  00000000  001b8c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001be4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a2f4 	.word	0x0800a2f4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	0800a2f4 	.word	0x0800a2f4

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <attitude_fusion>:
int ahrs_init_flag = 0;
int acc_over = 0;
float ahrs_kp;

void attitude_fusion(Axes_float *acc, Axes_float *gyro, Attitude *ahrs, Radio *rc_comm )
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09a      	sub	sp, #104	@ 0x68
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	603b      	str	r3, [r7, #0]
  float ex, ey, ez;
  float q0q0, q0q1, q0q2, /*q0q3,*/ q1q1, /*q1q2,*/ q1q3, q2q2, q2q3, q3q3;
  float halfT;
 
  
  if(rc_comm->THR < MIN_THR)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80005f4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80005f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000600:	d508      	bpl.n	8000614 <attitude_fusion+0x34>
  {
    ahrs_kp = AHRS_KP_BIG;
 8000602:	4b02      	ldr	r3, [pc, #8]	@ (800060c <attitude_fusion+0x2c>)
 8000604:	4a02      	ldr	r2, [pc, #8]	@ (8000610 <attitude_fusion+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	e007      	b.n	800061a <attitude_fusion+0x3a>
 800060a:	bf00      	nop
 800060c:	24000098 	.word	0x24000098
 8000610:	41200000 	.word	0x41200000
  }
  else
  {
    ahrs_kp = AHRS_KP_NORM;
 8000614:	4be1      	ldr	r3, [pc, #900]	@ (800099c <attitude_fusion+0x3bc>)
 8000616:	4ae2      	ldr	r2, [pc, #904]	@ (80009a0 <attitude_fusion+0x3c0>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  axf = acc->AXIS_X;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	667b      	str	r3, [r7, #100]	@ 0x64
  ayf = acc->AXIS_Y;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	663b      	str	r3, [r7, #96]	@ 0x60
  azf = acc->AXIS_Z;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  // mdps convert to rad/s
  gxf = ((float)gyro->AXIS_X) * ((float)COE_MDPS_TO_RADPS);  
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	edd3 7a00 	vldr	s15, [r3]
 8000632:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 80009a4 <attitude_fusion+0x3c4>
 8000636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
  gyf = ((float)gyro->AXIS_Y) * ((float)COE_MDPS_TO_RADPS);  
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	edd3 7a01 	vldr	s15, [r3, #4]
 8000644:	ed9f 7ad7 	vldr	s14, [pc, #860]	@ 80009a4 <attitude_fusion+0x3c4>
 8000648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800064c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  gzf = ((float)gyro->AXIS_Z) * ((float)COE_MDPS_TO_RADPS); 
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	edd3 7a02 	vldr	s15, [r3, #8]
 8000656:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 80009a4 <attitude_fusion+0x3c4>
 800065a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800065e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50


  // auxiliary variables to reduce number of repeated operations
  q0q0 = q0*q0;
 8000662:	4bd1      	ldr	r3, [pc, #836]	@ (80009a8 <attitude_fusion+0x3c8>)
 8000664:	ed93 7a00 	vldr	s14, [r3]
 8000668:	4bcf      	ldr	r3, [pc, #828]	@ (80009a8 <attitude_fusion+0x3c8>)
 800066a:	edd3 7a00 	vldr	s15, [r3]
 800066e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000672:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  q0q1 = q0*q1;
 8000676:	4bcc      	ldr	r3, [pc, #816]	@ (80009a8 <attitude_fusion+0x3c8>)
 8000678:	ed93 7a00 	vldr	s14, [r3]
 800067c:	4bcb      	ldr	r3, [pc, #812]	@ (80009ac <attitude_fusion+0x3cc>)
 800067e:	edd3 7a00 	vldr	s15, [r3]
 8000682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000686:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  q0q2 = q0*q2;
 800068a:	4bc7      	ldr	r3, [pc, #796]	@ (80009a8 <attitude_fusion+0x3c8>)
 800068c:	ed93 7a00 	vldr	s14, [r3]
 8000690:	4bc7      	ldr	r3, [pc, #796]	@ (80009b0 <attitude_fusion+0x3d0>)
 8000692:	edd3 7a00 	vldr	s15, [r3]
 8000696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800069a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  //q0q3 = q0*q3;
  q1q1 = q1*q1;
 800069e:	4bc3      	ldr	r3, [pc, #780]	@ (80009ac <attitude_fusion+0x3cc>)
 80006a0:	ed93 7a00 	vldr	s14, [r3]
 80006a4:	4bc1      	ldr	r3, [pc, #772]	@ (80009ac <attitude_fusion+0x3cc>)
 80006a6:	edd3 7a00 	vldr	s15, [r3]
 80006aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ae:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  //q1q2 = q1*q2;
  q1q3 = q1*q3;
 80006b2:	4bbe      	ldr	r3, [pc, #760]	@ (80009ac <attitude_fusion+0x3cc>)
 80006b4:	ed93 7a00 	vldr	s14, [r3]
 80006b8:	4bbe      	ldr	r3, [pc, #760]	@ (80009b4 <attitude_fusion+0x3d4>)
 80006ba:	edd3 7a00 	vldr	s15, [r3]
 80006be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  q2q2 = q2*q2;
 80006c6:	4bba      	ldr	r3, [pc, #744]	@ (80009b0 <attitude_fusion+0x3d0>)
 80006c8:	ed93 7a00 	vldr	s14, [r3]
 80006cc:	4bb8      	ldr	r3, [pc, #736]	@ (80009b0 <attitude_fusion+0x3d0>)
 80006ce:	edd3 7a00 	vldr	s15, [r3]
 80006d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
  q2q3 = q2*q3;
 80006da:	4bb5      	ldr	r3, [pc, #724]	@ (80009b0 <attitude_fusion+0x3d0>)
 80006dc:	ed93 7a00 	vldr	s14, [r3]
 80006e0:	4bb4      	ldr	r3, [pc, #720]	@ (80009b4 <attitude_fusion+0x3d4>)
 80006e2:	edd3 7a00 	vldr	s15, [r3]
 80006e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ea:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  q3q3 = q3*q3;
 80006ee:	4bb1      	ldr	r3, [pc, #708]	@ (80009b4 <attitude_fusion+0x3d4>)
 80006f0:	ed93 7a00 	vldr	s14, [r3]
 80006f4:	4baf      	ldr	r3, [pc, #700]	@ (80009b4 <attitude_fusion+0x3d4>)
 80006f6:	edd3 7a00 	vldr	s15, [r3]
 80006fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006fe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

  // normalise the accelerometer measurement
  norm = fast_inv_sqrt(axf*axf+ayf*ayf+azf*azf);
 8000702:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000706:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800070a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800070e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000716:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800071a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800071e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000722:	eeb0 0a67 	vmov.f32	s0, s15
 8000726:	f001 ff13 	bl	8002550 <fast_inv_sqrt>
 800072a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

  axf = axf * norm;
 800072e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000732:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
  ayf = ayf * norm;
 800073e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8000742:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
  azf = azf * norm;
 800074e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8000752:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800075a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

  // estimated direction of gravity and flux (v and w)
  vx = 2*(q1q3 - q0q2);
 800075e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000762:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800076a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800076e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  vy = 2*(q0q1 + q2q3);
 8000772:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000776:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800077a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800077e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000782:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  vz = q0q0 - q1q1 - q2q2 + q3q3;
 8000786:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800078a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800078e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000792:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800079a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800079e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a2:	edc7 7a08 	vstr	s15, [r7, #32]

  ex = (ayf*vz - azf*vy);
 80007a6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80007aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80007ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007b2:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80007b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80007ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007c2:	edc7 7a07 	vstr	s15, [r7, #28]
  ey = (azf*vx - axf*vz);
 80007c6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80007ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80007ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007d2:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 80007d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80007da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007e2:	edc7 7a06 	vstr	s15, [r7, #24]
  ez = (axf*vy - ayf*vx);
 80007e6:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80007ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80007ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007f2:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80007f6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80007fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000802:	edc7 7a05 	vstr	s15, [r7, #20]

  // integral error scaled integral gain
  exInt = exInt + ex*AHRS_KI*SENSOR_SAMPLING_TIME;
 8000806:	edd7 7a07 	vldr	s15, [r7, #28]
 800080a:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80009b8 <attitude_fusion+0x3d8>
 800080e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000812:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80009bc <attitude_fusion+0x3dc>
 8000816:	ee27 7a87 	vmul.f32	s14, s15, s14
 800081a:	4b69      	ldr	r3, [pc, #420]	@ (80009c0 <attitude_fusion+0x3e0>)
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000824:	4b66      	ldr	r3, [pc, #408]	@ (80009c0 <attitude_fusion+0x3e0>)
 8000826:	edc3 7a00 	vstr	s15, [r3]
  eyInt = eyInt + ey*AHRS_KI*SENSOR_SAMPLING_TIME;
 800082a:	edd7 7a06 	vldr	s15, [r7, #24]
 800082e:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80009b8 <attitude_fusion+0x3d8>
 8000832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000836:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80009bc <attitude_fusion+0x3dc>
 800083a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800083e:	4b61      	ldr	r3, [pc, #388]	@ (80009c4 <attitude_fusion+0x3e4>)
 8000840:	edd3 7a00 	vldr	s15, [r3]
 8000844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000848:	4b5e      	ldr	r3, [pc, #376]	@ (80009c4 <attitude_fusion+0x3e4>)
 800084a:	edc3 7a00 	vstr	s15, [r3]
  ezInt = ezInt + ez*AHRS_KI*SENSOR_SAMPLING_TIME;
 800084e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000852:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80009b8 <attitude_fusion+0x3d8>
 8000856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800085a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80009bc <attitude_fusion+0x3dc>
 800085e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000862:	4b59      	ldr	r3, [pc, #356]	@ (80009c8 <attitude_fusion+0x3e8>)
 8000864:	edd3 7a00 	vldr	s15, [r3]
 8000868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800086c:	4b56      	ldr	r3, [pc, #344]	@ (80009c8 <attitude_fusion+0x3e8>)
 800086e:	edc3 7a00 	vstr	s15, [r3]

  // adjusted gyroscope measurements
  gxf = gxf + ahrs_kp*ex + exInt;
 8000872:	4b4a      	ldr	r3, [pc, #296]	@ (800099c <attitude_fusion+0x3bc>)
 8000874:	ed93 7a00 	vldr	s14, [r3]
 8000878:	edd7 7a07 	vldr	s15, [r7, #28]
 800087c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000880:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000888:	4b4d      	ldr	r3, [pc, #308]	@ (80009c0 <attitude_fusion+0x3e0>)
 800088a:	edd3 7a00 	vldr	s15, [r3]
 800088e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000892:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
  gyf = gyf + ahrs_kp*ey + eyInt;
 8000896:	4b41      	ldr	r3, [pc, #260]	@ (800099c <attitude_fusion+0x3bc>)
 8000898:	ed93 7a00 	vldr	s14, [r3]
 800089c:	edd7 7a06 	vldr	s15, [r7, #24]
 80008a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80008a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008ac:	4b45      	ldr	r3, [pc, #276]	@ (80009c4 <attitude_fusion+0x3e4>)
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  gzf = gzf + ahrs_kp*ez + ezInt;
 80008ba:	4b38      	ldr	r3, [pc, #224]	@ (800099c <attitude_fusion+0x3bc>)
 80008bc:	ed93 7a00 	vldr	s14, [r3]
 80008c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80008c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008c8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80008cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008d0:	4b3d      	ldr	r3, [pc, #244]	@ (80009c8 <attitude_fusion+0x3e8>)
 80008d2:	edd3 7a00 	vldr	s15, [r3]
 80008d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008da:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

  // integrate quaternion rate and normalise
  halfT = 0.5f*SENSOR_SAMPLING_TIME;
 80008de:	4b3b      	ldr	r3, [pc, #236]	@ (80009cc <attitude_fusion+0x3ec>)
 80008e0:	613b      	str	r3, [r7, #16]
  q0 = q0 + (-q1*gxf - q2*gyf - q3*gzf)*halfT;
 80008e2:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <attitude_fusion+0x3cc>)
 80008e4:	edd3 7a00 	vldr	s15, [r3]
 80008e8:	eeb1 7a67 	vneg.f32	s14, s15
 80008ec:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80008f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008f4:	4b2e      	ldr	r3, [pc, #184]	@ (80009b0 <attitude_fusion+0x3d0>)
 80008f6:	edd3 6a00 	vldr	s13, [r3]
 80008fa:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80008fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000902:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000906:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <attitude_fusion+0x3d4>)
 8000908:	edd3 6a00 	vldr	s13, [r3]
 800090c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000918:	edd7 7a04 	vldr	s15, [r7, #16]
 800091c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000920:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <attitude_fusion+0x3c8>)
 8000922:	edd3 7a00 	vldr	s15, [r3]
 8000926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800092a:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <attitude_fusion+0x3c8>)
 800092c:	edc3 7a00 	vstr	s15, [r3]
  q1 = q1 + (q0*gxf + q2*gzf - q3*gyf)*halfT;
 8000930:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <attitude_fusion+0x3c8>)
 8000932:	ed93 7a00 	vldr	s14, [r3]
 8000936:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800093a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <attitude_fusion+0x3d0>)
 8000940:	edd3 6a00 	vldr	s13, [r3]
 8000944:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800094c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000950:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <attitude_fusion+0x3d4>)
 8000952:	edd3 6a00 	vldr	s13, [r3]
 8000956:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800095a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800095e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000962:	edd7 7a04 	vldr	s15, [r7, #16]
 8000966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <attitude_fusion+0x3cc>)
 800096c:	edd3 7a00 	vldr	s15, [r3]
 8000970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000974:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <attitude_fusion+0x3cc>)
 8000976:	edc3 7a00 	vstr	s15, [r3]
  q2 = q2 + (q0*gyf - q1*gzf + q3*gxf)*halfT;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <attitude_fusion+0x3c8>)
 800097c:	ed93 7a00 	vldr	s14, [r3]
 8000980:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <attitude_fusion+0x3cc>)
 800098a:	edd3 6a00 	vldr	s13, [r3]
 800098e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000996:	ee37 7a67 	vsub.f32	s14, s14, s15
 800099a:	e019      	b.n	80009d0 <attitude_fusion+0x3f0>
 800099c:	24000098 	.word	0x24000098
 80009a0:	3ecccccd 	.word	0x3ecccccd
 80009a4:	379268a9 	.word	0x379268a9
 80009a8:	24000000 	.word	0x24000000
 80009ac:	24000080 	.word	0x24000080
 80009b0:	24000084 	.word	0x24000084
 80009b4:	24000088 	.word	0x24000088
 80009b8:	3dcccccd 	.word	0x3dcccccd
 80009bc:	3bcccccd 	.word	0x3bcccccd
 80009c0:	2400008c 	.word	0x2400008c
 80009c4:	24000090 	.word	0x24000090
 80009c8:	24000094 	.word	0x24000094
 80009cc:	3b4ccccd 	.word	0x3b4ccccd
 80009d0:	4b44      	ldr	r3, [pc, #272]	@ (8000ae4 <attitude_fusion+0x504>)
 80009d2:	edd3 6a00 	vldr	s13, [r3]
 80009d6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80009da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80009e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae8 <attitude_fusion+0x508>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae8 <attitude_fusion+0x508>)
 80009f6:	edc3 7a00 	vstr	s15, [r3]
  q3 = q3 + (q0*gzf + q1*gyf - q2*gxf)*halfT;
 80009fa:	4b3c      	ldr	r3, [pc, #240]	@ (8000aec <attitude_fusion+0x50c>)
 80009fc:	ed93 7a00 	vldr	s14, [r3]
 8000a00:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a08:	4b39      	ldr	r3, [pc, #228]	@ (8000af0 <attitude_fusion+0x510>)
 8000a0a:	edd3 6a00 	vldr	s13, [r3]
 8000a0e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ae8 <attitude_fusion+0x508>)
 8000a1c:	edd3 6a00 	vldr	s13, [r3]
 8000a20:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <attitude_fusion+0x504>)
 8000a36:	edd3 7a00 	vldr	s15, [r3]
 8000a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <attitude_fusion+0x504>)
 8000a40:	edc3 7a00 	vstr	s15, [r3]

  // normalise quaternion
  norm = fast_inv_sqrt(q0q0 + q1q1 + q2q2 + q3q3);
 8000a44:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000a48:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a50:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a58:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	f001 fd74 	bl	8002550 <fast_inv_sqrt>
 8000a68:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
  q0 *= norm;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <attitude_fusion+0x50c>)
 8000a6e:	ed93 7a00 	vldr	s14, [r3]
 8000a72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <attitude_fusion+0x50c>)
 8000a7c:	edc3 7a00 	vstr	s15, [r3]
  q1 *= norm;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <attitude_fusion+0x510>)
 8000a82:	ed93 7a00 	vldr	s14, [r3]
 8000a86:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <attitude_fusion+0x510>)
 8000a90:	edc3 7a00 	vstr	s15, [r3]
  q2 *= norm;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <attitude_fusion+0x508>)
 8000a96:	ed93 7a00 	vldr	s14, [r3]
 8000a9a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <attitude_fusion+0x508>)
 8000aa4:	edc3 7a00 	vstr	s15, [r3]
  q3 *= norm;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <attitude_fusion+0x504>)
 8000aaa:	ed93 7a00 	vldr	s14, [r3]
 8000aae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <attitude_fusion+0x504>)
 8000ab8:	edc3 7a00 	vstr	s15, [r3]

  ahrs->q.q0 = q0;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <attitude_fusion+0x50c>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]
  ahrs->q.q1 = q1;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <attitude_fusion+0x510>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	605a      	str	r2, [r3, #4]
  ahrs->q.q2 = q2;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <attitude_fusion+0x508>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
  ahrs->q.q3 = q3;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <attitude_fusion+0x504>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60da      	str	r2, [r3, #12]

}
 8000adc:	bf00      	nop
 8000ade:	3768      	adds	r7, #104	@ 0x68
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	24000088 	.word	0x24000088
 8000ae8:	24000084 	.word	0x24000084
 8000aec:	24000000 	.word	0x24000000
 8000af0:	24000080 	.word	0x24000080

08000af4 <PID_init>:

int16_t motor_thr;
float dt_recip;

void PID_init(Dual_PID_Control *pid)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  pid->ts = PID_SAMPLING_TIME;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a33      	ldr	r2, [pc, #204]	@ (8000bcc <PID_init+0xd8>)
 8000b00:	601a      	str	r2, [r3, #0]

  pid->x_kp1 = PITCH_PID_KP1;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a32      	ldr	r2, [pc, #200]	@ (8000bd0 <PID_init+0xdc>)
 8000b06:	605a      	str	r2, [r3, #4]
  pid->x_ki1 = PITCH_PID_KI1;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f04f 0200 	mov.w	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  pid->x_i1_limit = PITCH_PID_I1_LIMIT;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b16:	641a      	str	r2, [r3, #64]	@ 0x40
  pid->x_kp2 = PITCH_PID_KP2;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000bd4 <PID_init+0xe0>)
 8000b1c:	60da      	str	r2, [r3, #12]
  pid->x_ki2 = PITCH_PID_KI2;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd4 <PID_init+0xe0>)
 8000b22:	611a      	str	r2, [r3, #16]
  pid->x_kd2 = PITCH_PID_KD2;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd8 <PID_init+0xe4>)
 8000b28:	615a      	str	r2, [r3, #20]
  pid->x_i2_limit = PITCH_PID_I2_LIMIT;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8000bdc <PID_init+0xe8>)
 8000b2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  pid->x_s1 = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f04f 0200 	mov.w	r2, #0
 8000b36:	659a      	str	r2, [r3, #88]	@ 0x58
  pid->x_s2 = 0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  pid->y_kp1 = ROLL_PID_KP1;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a23      	ldr	r2, [pc, #140]	@ (8000bd0 <PID_init+0xdc>)
 8000b44:	619a      	str	r2, [r3, #24]
  pid->y_ki1 = ROLL_PID_KI1;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f04f 0200 	mov.w	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  pid->y_i1_limit = ROLL_PID_I1_LIMIT;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b54:	645a      	str	r2, [r3, #68]	@ 0x44
  pid->y_kp2 = ROLL_PID_KP2;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd4 <PID_init+0xe0>)
 8000b5a:	621a      	str	r2, [r3, #32]
  pid->y_ki2 = ROLL_PID_KI2;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <PID_init+0xe0>)
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  pid->y_kd2 = ROLL_PID_KD2;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <PID_init+0xe4>)
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  pid->y_i2_limit = ROLL_PID_I2_LIMIT;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bdc <PID_init+0xe8>)
 8000b6c:	651a      	str	r2, [r3, #80]	@ 0x50
  pid->y_s1 = 0;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	661a      	str	r2, [r3, #96]	@ 0x60
  pid->y_s2 = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	665a      	str	r2, [r3, #100]	@ 0x64

  pid->z_kp1 = YAW_PID_KP1;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8000b84:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid->z_ki1 = YAW_PID_KI1;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	631a      	str	r2, [r3, #48]	@ 0x30
  pid->z_i1_limit = YAW_PID_I1_LIMIT;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b94:	649a      	str	r2, [r3, #72]	@ 0x48
  pid->z_kp2 = YAW_PID_KP2;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a11      	ldr	r2, [pc, #68]	@ (8000be0 <PID_init+0xec>)
 8000b9a:	635a      	str	r2, [r3, #52]	@ 0x34
  pid->z_ki2 = YAW_PID_KI2;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd0 <PID_init+0xdc>)
 8000ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  pid->z_kd2 = YAW_PID_KD2;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <PID_init+0xdc>)
 8000ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
  pid->z_i2_limit = YAW_PID_I2_LIMIT;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bae:	655a      	str	r2, [r3, #84]	@ 0x54
  pid->z_s1 = 0;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	669a      	str	r2, [r3, #104]	@ 0x68
  pid->z_s2 = 0;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	3aa3d70a 	.word	0x3aa3d70a
 8000bd0:	40400000 	.word	0x40400000
 8000bd4:	42a00000 	.word	0x42a00000
 8000bd8:	41200000 	.word	0x41200000
 8000bdc:	41a00000 	.word	0x41a00000
 8000be0:	44610000 	.word	0x44610000

08000be4 <PID_outer>:


void PID_outer(Euler *euler_rc, Euler *euler_ahrs, Attitude *ahrs, Dual_PID_Control *pid, Radio *rc_comm)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	603b      	str	r3, [r7, #0]
  float error;

  if(rc_comm->THR<MIN_THR)
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bf8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c04:	d50b      	bpl.n	8000c1e <PID_outer+0x3a>
  {
    pid_x_integ1 = 0;
 8000c06:	4b84      	ldr	r3, [pc, #528]	@ (8000e18 <PID_outer+0x234>)
 8000c08:	f04f 0200 	mov.w	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
    pid_y_integ1 = 0;
 8000c0e:	4b83      	ldr	r3, [pc, #524]	@ (8000e1c <PID_outer+0x238>)
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
    pid_z_integ1 = 0;
 8000c16:	4b82      	ldr	r3, [pc, #520]	@ (8000e20 <PID_outer+0x23c>)
 8000c18:	f04f 0200 	mov.w	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  // x-axis PID
  error = euler_rc->thx - euler_ahrs->thx;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	ed93 7a00 	vldr	s14, [r3]
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c2e:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_x_integ1 += error*pid->ts;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	ed93 7a00 	vldr	s14, [r3]
 8000c38:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c40:	4b75      	ldr	r3, [pc, #468]	@ (8000e18 <PID_outer+0x234>)
 8000c42:	edd3 7a00 	vldr	s15, [r3]
 8000c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c4a:	4b73      	ldr	r3, [pc, #460]	@ (8000e18 <PID_outer+0x234>)
 8000c4c:	edc3 7a00 	vstr	s15, [r3]
  if(pid_x_integ1 > pid->x_i1_limit)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8000c56:	4b70      	ldr	r3, [pc, #448]	@ (8000e18 <PID_outer+0x234>)
 8000c58:	edd3 7a00 	vldr	s15, [r3]
 8000c5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c64:	d504      	bpl.n	8000c70 <PID_outer+0x8c>
    pid_x_integ1 = pid->x_i1_limit;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a6b      	ldr	r2, [pc, #428]	@ (8000e18 <PID_outer+0x234>)
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e014      	b.n	8000c9a <PID_outer+0xb6>
  else if(pid_x_integ1 < -pid->x_i1_limit)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000c76:	eeb1 7a67 	vneg.f32	s14, s15
 8000c7a:	4b67      	ldr	r3, [pc, #412]	@ (8000e18 <PID_outer+0x234>)
 8000c7c:	edd3 7a00 	vldr	s15, [r3]
 8000c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c88:	dd07      	ble.n	8000c9a <PID_outer+0xb6>
    pid_x_integ1 = -pid->x_i1_limit;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000c90:	eef1 7a67 	vneg.f32	s15, s15
 8000c94:	4b60      	ldr	r3, [pc, #384]	@ (8000e18 <PID_outer+0x234>)
 8000c96:	edc3 7a00 	vstr	s15, [r3]
  pid->x_s1 =  pid->x_kp1*error + pid->x_ki1*pid_x_integ1;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ca0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	edd3 6a02 	vldr	s13, [r3, #8]
 8000cae:	4b5a      	ldr	r3, [pc, #360]	@ (8000e18 <PID_outer+0x234>)
 8000cb0:	edd3 7a00 	vldr	s15, [r3]
 8000cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

  // y-axis PID
  error = euler_rc->thy - euler_ahrs->thy;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd2:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_y_integ1 += error*pid->ts;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	ed93 7a00 	vldr	s14, [r3]
 8000cdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8000e1c <PID_outer+0x238>)
 8000ce6:	edd3 7a00 	vldr	s15, [r3]
 8000cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cee:	4b4b      	ldr	r3, [pc, #300]	@ (8000e1c <PID_outer+0x238>)
 8000cf0:	edc3 7a00 	vstr	s15, [r3]
  if(pid_y_integ1 > pid->y_i1_limit)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8000cfa:	4b48      	ldr	r3, [pc, #288]	@ (8000e1c <PID_outer+0x238>)
 8000cfc:	edd3 7a00 	vldr	s15, [r3]
 8000d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d08:	d504      	bpl.n	8000d14 <PID_outer+0x130>
    pid_y_integ1 = pid->y_i1_limit;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	4a43      	ldr	r2, [pc, #268]	@ (8000e1c <PID_outer+0x238>)
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e014      	b.n	8000d3e <PID_outer+0x15a>
  else if(pid_y_integ1 < -pid->y_i1_limit)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000d1a:	eeb1 7a67 	vneg.f32	s14, s15
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e1c <PID_outer+0x238>)
 8000d20:	edd3 7a00 	vldr	s15, [r3]
 8000d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	dd07      	ble.n	8000d3e <PID_outer+0x15a>
    pid_y_integ1 = -pid->y_i1_limit;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000d34:	eef1 7a67 	vneg.f32	s15, s15
 8000d38:	4b38      	ldr	r3, [pc, #224]	@ (8000e1c <PID_outer+0x238>)
 8000d3a:	edc3 7a00 	vstr	s15, [r3]
  pid->y_s1 =  pid->y_kp1*error + pid->y_ki1*pid_y_integ1;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	ed93 7a06 	vldr	s14, [r3, #24]
 8000d44:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	edd3 6a07 	vldr	s13, [r3, #28]
 8000d52:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <PID_outer+0x238>)
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

  // z-axis PID
  error = euler_rc->thz - euler_ahrs->thz;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d76:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_z_integ1 += error*pid->ts;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	ed93 7a00 	vldr	s14, [r3]
 8000d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d88:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <PID_outer+0x23c>)
 8000d8a:	edd3 7a00 	vldr	s15, [r3]
 8000d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d92:	4b23      	ldr	r3, [pc, #140]	@ (8000e20 <PID_outer+0x23c>)
 8000d94:	edc3 7a00 	vstr	s15, [r3]
  if(pid_z_integ1 > pid->z_i1_limit)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <PID_outer+0x23c>)
 8000da0:	edd3 7a00 	vldr	s15, [r3]
 8000da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dac:	d504      	bpl.n	8000db8 <PID_outer+0x1d4>
    pid_z_integ1 = pid->z_i1_limit;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e20 <PID_outer+0x23c>)
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e014      	b.n	8000de2 <PID_outer+0x1fe>
  else if(pid_z_integ1 < -pid->z_i1_limit)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8000dbe:	eeb1 7a67 	vneg.f32	s14, s15
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <PID_outer+0x23c>)
 8000dc4:	edd3 7a00 	vldr	s15, [r3]
 8000dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd0:	dd07      	ble.n	8000de2 <PID_outer+0x1fe>
    pid_z_integ1 = -pid->z_i1_limit;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8000dd8:	eef1 7a67 	vneg.f32	s15, s15
 8000ddc:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <PID_outer+0x23c>)
 8000dde:	edc3 7a00 	vstr	s15, [r3]
  pid->z_s1 =  pid->z_kp1*error + pid->z_ki1*pid_z_integ1;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8000de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <PID_outer+0x23c>)
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2400009c 	.word	0x2400009c
 8000e1c:	240000a0 	.word	0x240000a0
 8000e20:	240000a4 	.word	0x240000a4

08000e24 <PID_inner>:

void PID_inner(Euler *euler_rc, Gyro *gyro_rad, Attitude *ahrs, Dual_PID_Control *pid, uint16_t motor_pwm[], Radio *rc_comm)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	603b      	str	r3, [r7, #0]
  float error, deriv;

  if(rc_comm->THR<MIN_THR)
 8000e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e34:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e38:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	d50b      	bpl.n	8000e5e <PID_inner+0x3a>
  {
    pid_x_integ2 = 0;
 8000e46:	4bba      	ldr	r3, [pc, #744]	@ (8001130 <PID_inner+0x30c>)
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
    pid_y_integ2 = 0;
 8000e4e:	4bb9      	ldr	r3, [pc, #740]	@ (8001134 <PID_inner+0x310>)
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
    pid_z_integ2 = 0;
 8000e56:	4bb8      	ldr	r3, [pc, #736]	@ (8001138 <PID_inner+0x314>)
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
  }
  
  dt_recip = 1/pid->ts;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	ed93 7a00 	vldr	s14, [r3]
 8000e64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e6c:	4bb3      	ldr	r3, [pc, #716]	@ (800113c <PID_inner+0x318>)
 8000e6e:	edc3 7a00 	vstr	s15, [r3]

  // X Axis
  error = pid->x_s1 - gyro_rad->gx;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e82:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_x_integ2 += error*pid->ts;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	ed93 7a00 	vldr	s14, [r3]
 8000e8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e94:	4ba6      	ldr	r3, [pc, #664]	@ (8001130 <PID_inner+0x30c>)
 8000e96:	edd3 7a00 	vldr	s15, [r3]
 8000e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9e:	4ba4      	ldr	r3, [pc, #656]	@ (8001130 <PID_inner+0x30c>)
 8000ea0:	edc3 7a00 	vstr	s15, [r3]
  if(pid_x_integ2 > pid->x_i2_limit)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000eaa:	4ba1      	ldr	r3, [pc, #644]	@ (8001130 <PID_inner+0x30c>)
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb8:	d504      	bpl.n	8000ec4 <PID_inner+0xa0>
    pid_x_integ2 = pid->x_i2_limit;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	4a9c      	ldr	r2, [pc, #624]	@ (8001130 <PID_inner+0x30c>)
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e014      	b.n	8000eee <PID_inner+0xca>
  else if(pid_x_integ2 < -pid->x_i2_limit)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000eca:	eeb1 7a67 	vneg.f32	s14, s15
 8000ece:	4b98      	ldr	r3, [pc, #608]	@ (8001130 <PID_inner+0x30c>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	dd07      	ble.n	8000eee <PID_inner+0xca>
    pid_x_integ2 = -pid->x_i2_limit;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000ee4:	eef1 7a67 	vneg.f32	s15, s15
 8000ee8:	4b91      	ldr	r3, [pc, #580]	@ (8001130 <PID_inner+0x30c>)
 8000eea:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_x_pre_error2)*dt_recip;
 8000eee:	4b94      	ldr	r3, [pc, #592]	@ (8001140 <PID_inner+0x31c>)
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ef8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000efc:	4b8f      	ldr	r3, [pc, #572]	@ (800113c <PID_inner+0x318>)
 8000efe:	edd3 7a00 	vldr	s15, [r3]
 8000f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f06:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_x_pre_error2 = error;
 8000f0a:	4a8d      	ldr	r2, [pc, #564]	@ (8001140 <PID_inner+0x31c>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	6013      	str	r3, [r2, #0]
  deriv = pid_x_pre_deriv + (deriv - pid_x_pre_deriv)*D_FILTER_COFF;
 8000f10:	4b8c      	ldr	r3, [pc, #560]	@ (8001144 <PID_inner+0x320>)
 8000f12:	edd3 7a00 	vldr	s15, [r3]
 8000f16:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1e:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001148 <PID_inner+0x324>
 8000f22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f26:	4b87      	ldr	r3, [pc, #540]	@ (8001144 <PID_inner+0x320>)
 8000f28:	edd3 7a00 	vldr	s15, [r3]
 8000f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f30:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_x_pre_deriv = deriv;
 8000f34:	4a83      	ldr	r2, [pc, #524]	@ (8001144 <PID_inner+0x320>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6013      	str	r3, [r2, #0]
  pid->x_s2 = pid->x_kp2*error + pid->x_ki2*pid_x_integ2 + pid->x_kd2*deriv;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f4e:	4b78      	ldr	r3, [pc, #480]	@ (8001130 <PID_inner+0x30c>)
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f62:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
  
  if(pid->x_s2 > MAX_ADJ_AMOUNT)  pid->x_s2 = MAX_ADJ_AMOUNT;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8000f7a:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 800114c <PID_inner+0x328>
 8000f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	dd02      	ble.n	8000f8e <PID_inner+0x16a>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	4a71      	ldr	r2, [pc, #452]	@ (8001150 <PID_inner+0x32c>)
 8000f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  if(pid->x_s2 < -MAX_ADJ_AMOUNT)  pid->x_s2 = -MAX_ADJ_AMOUNT;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8000f94:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001154 <PID_inner+0x330>
 8000f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	d502      	bpl.n	8000fa8 <PID_inner+0x184>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	4a6c      	ldr	r2, [pc, #432]	@ (8001158 <PID_inner+0x334>)
 8000fa6:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Y Axis
  error = pid->y_s1 - gyro_rad->gy;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb8:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_y_integ2 += error*pid->ts;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fca:	4b5a      	ldr	r3, [pc, #360]	@ (8001134 <PID_inner+0x310>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd4:	4b57      	ldr	r3, [pc, #348]	@ (8001134 <PID_inner+0x310>)
 8000fd6:	edc3 7a00 	vstr	s15, [r3]
  if(pid_y_integ2 > pid->y_i2_limit)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000fe0:	4b54      	ldr	r3, [pc, #336]	@ (8001134 <PID_inner+0x310>)
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	d504      	bpl.n	8000ffa <PID_inner+0x1d6>
    pid_y_integ2 = pid->y_i2_limit;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8001134 <PID_inner+0x310>)
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e014      	b.n	8001024 <PID_inner+0x200>
  else if(pid_y_integ2 < -pid->y_i2_limit)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001000:	eeb1 7a67 	vneg.f32	s14, s15
 8001004:	4b4b      	ldr	r3, [pc, #300]	@ (8001134 <PID_inner+0x310>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	dd07      	ble.n	8001024 <PID_inner+0x200>
    pid_y_integ2 = -pid->y_i2_limit;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800101a:	eef1 7a67 	vneg.f32	s15, s15
 800101e:	4b45      	ldr	r3, [pc, #276]	@ (8001134 <PID_inner+0x310>)
 8001020:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_y_pre_error2)*dt_recip;
 8001024:	4b4d      	ldr	r3, [pc, #308]	@ (800115c <PID_inner+0x338>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ed97 7a05 	vldr	s14, [r7, #20]
 800102e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001032:	4b42      	ldr	r3, [pc, #264]	@ (800113c <PID_inner+0x318>)
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_y_pre_error2 = error;
 8001040:	4a46      	ldr	r2, [pc, #280]	@ (800115c <PID_inner+0x338>)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	6013      	str	r3, [r2, #0]
  deriv = pid_y_pre_deriv + (deriv - pid_y_pre_deriv)*D_FILTER_COFF;
 8001046:	4b46      	ldr	r3, [pc, #280]	@ (8001160 <PID_inner+0x33c>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001054:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001148 <PID_inner+0x324>
 8001058:	ee27 7a87 	vmul.f32	s14, s15, s14
 800105c:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <PID_inner+0x33c>)
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001066:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_y_pre_deriv = deriv;
 800106a:	4a3d      	ldr	r2, [pc, #244]	@ (8001160 <PID_inner+0x33c>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	6013      	str	r3, [r2, #0]
  pid->y_s2 = pid->y_kp2*error + pid->y_ki2*pid_y_integ2 + pid->y_kd2*deriv;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	ed93 7a08 	vldr	s14, [r3, #32]
 8001076:	edd7 7a05 	vldr	s15, [r7, #20]
 800107a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001084:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <PID_inner+0x310>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001098:	edd7 7a04 	vldr	s15, [r7, #16]
 800109c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

  if(pid->y_s2 > MAX_ADJ_AMOUNT)  pid->y_s2 = MAX_ADJ_AMOUNT;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80010b0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800114c <PID_inner+0x328>
 80010b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	dd02      	ble.n	80010c4 <PID_inner+0x2a0>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	4a23      	ldr	r2, [pc, #140]	@ (8001150 <PID_inner+0x32c>)
 80010c2:	665a      	str	r2, [r3, #100]	@ 0x64
  if(pid->y_s2 < -MAX_ADJ_AMOUNT)  pid->y_s2 = -MAX_ADJ_AMOUNT;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80010ca:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001154 <PID_inner+0x330>
 80010ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	d502      	bpl.n	80010de <PID_inner+0x2ba>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	4a1f      	ldr	r2, [pc, #124]	@ (8001158 <PID_inner+0x334>)
 80010dc:	665a      	str	r2, [r3, #100]	@ 0x64

  // Z Axis
  error = pid->z_s1 - gyro_rad->gz;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_z_integ2 += error*pid->ts;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	ed93 7a00 	vldr	s14, [r3]
 80010f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <PID_inner+0x314>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <PID_inner+0x314>)
 800110c:	edc3 7a00 	vstr	s15, [r3]
  if(pid_z_integ2 > pid->z_i2_limit)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <PID_inner+0x314>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	d51e      	bpl.n	8001164 <PID_inner+0x340>
    pid_z_integ2 = pid->z_i2_limit;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112a:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <PID_inner+0x314>)
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e02e      	b.n	800118e <PID_inner+0x36a>
 8001130:	240000a8 	.word	0x240000a8
 8001134:	240000ac 	.word	0x240000ac
 8001138:	240000b0 	.word	0x240000b0
 800113c:	240000cc 	.word	0x240000cc
 8001140:	240000b4 	.word	0x240000b4
 8001144:	240000c0 	.word	0x240000c0
 8001148:	3ccccccd 	.word	0x3ccccccd
 800114c:	44480000 	.word	0x44480000
 8001150:	44480000 	.word	0x44480000
 8001154:	c4480000 	.word	0xc4480000
 8001158:	c4480000 	.word	0xc4480000
 800115c:	240000b8 	.word	0x240000b8
 8001160:	240000c4 	.word	0x240000c4
  else if(pid_z_integ2 < -pid->z_i2_limit)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800116a:	eeb1 7a67 	vneg.f32	s14, s15
 800116e:	4b7b      	ldr	r3, [pc, #492]	@ (800135c <PID_inner+0x538>)
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	dd07      	ble.n	800118e <PID_inner+0x36a>
    pid_z_integ2 = -pid->z_i2_limit;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001184:	eef1 7a67 	vneg.f32	s15, s15
 8001188:	4b74      	ldr	r3, [pc, #464]	@ (800135c <PID_inner+0x538>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_z_pre_error2)*dt_recip;
 800118e:	4b74      	ldr	r3, [pc, #464]	@ (8001360 <PID_inner+0x53c>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ed97 7a05 	vldr	s14, [r7, #20]
 8001198:	ee37 7a67 	vsub.f32	s14, s14, s15
 800119c:	4b71      	ldr	r3, [pc, #452]	@ (8001364 <PID_inner+0x540>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a6:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_z_pre_error2 = error;
 80011aa:	4a6d      	ldr	r2, [pc, #436]	@ (8001360 <PID_inner+0x53c>)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	6013      	str	r3, [r2, #0]
  pid->z_s2 = pid->z_kp2*error + pid->z_ki2*pid_z_integ2 + pid->z_kd2*deriv;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80011b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80011c4:	4b65      	ldr	r3, [pc, #404]	@ (800135c <PID_inner+0x538>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80011d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c

  if(pid->z_s2 > MAX_ADJ_AMOUNT_YAW)  pid->z_s2 = MAX_ADJ_AMOUNT_YAW;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80011f0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001368 <PID_inner+0x544>
 80011f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	dd02      	ble.n	8001204 <PID_inner+0x3e0>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	4a5a      	ldr	r2, [pc, #360]	@ (800136c <PID_inner+0x548>)
 8001202:	66da      	str	r2, [r3, #108]	@ 0x6c
  if(pid->z_s2 < -MAX_ADJ_AMOUNT_YAW)  pid->z_s2 = -MAX_ADJ_AMOUNT_YAW;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 800120a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001370 <PID_inner+0x54c>
 800120e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001216:	d502      	bpl.n	800121e <PID_inner+0x3fa>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4a56      	ldr	r2, [pc, #344]	@ (8001374 <PID_inner+0x550>)
 800121c:	66da      	str	r2, [r3, #108]	@ 0x6c

  motor_thr = 0.28f*rc_comm->THR + 750.0f;
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	edd3 7a02 	vldr	s15, [r3, #8]
 8001224:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001378 <PID_inner+0x554>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800137c <PID_inner+0x558>
 8001230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001238:	ee17 3a90 	vmov	r3, s15
 800123c:	b21a      	sxth	r2, r3
 800123e:	4b50      	ldr	r3, [pc, #320]	@ (8001380 <PID_inner+0x55c>)
 8001240:	801a      	strh	r2, [r3, #0]

  motor_pwm[0] = motor_thr - pid->x_s2 - pid->y_s2 + pid->z_s2 + MOTOR_OFF1;
 8001242:	4b4f      	ldr	r3, [pc, #316]	@ (8001380 <PID_inner+0x55c>)
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001256:	ee37 7a67 	vsub.f32	s14, s14, s15
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001260:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 800126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001384 <PID_inner+0x560>
 8001272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127a:	ee17 3a90 	vmov	r3, s15
 800127e:	b29a      	uxth	r2, r3
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	801a      	strh	r2, [r3, #0]
  motor_pwm[1] = motor_thr + pid->x_s2 - pid->y_s2 - pid->z_s2 + MOTOR_OFF2;
 8001284:	4b3e      	ldr	r3, [pc, #248]	@ (8001380 <PID_inner+0x55c>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80012a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80012ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001384 <PID_inner+0x560>
 80012b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	3302      	adds	r3, #2
 80012bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c0:	ee17 2a90 	vmov	r2, s15
 80012c4:	b292      	uxth	r2, r2
 80012c6:	801a      	strh	r2, [r3, #0]
  motor_pwm[2] = motor_thr + pid->x_s2 + pid->y_s2 + pid->z_s2 + MOTOR_OFF3;
 80012c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <PID_inner+0x55c>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80012dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80012e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80012f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f4:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001384 <PID_inner+0x560>
 80012f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	3304      	adds	r3, #4
 8001300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001304:	ee17 2a90 	vmov	r2, s15
 8001308:	b292      	uxth	r2, r2
 800130a:	801a      	strh	r2, [r3, #0]
  motor_pwm[3] = motor_thr - pid->x_s2 + pid->y_s2 - pid->z_s2 + MOTOR_OFF4;
 800130c:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <PID_inner+0x55c>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001320:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800132a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001338:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001384 <PID_inner+0x560>
 800133c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	3306      	adds	r3, #6
 8001344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001348:	ee17 2a90 	vmov	r2, s15
 800134c:	b292      	uxth	r2, r2
 800134e:	801a      	strh	r2, [r3, #0]

}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	240000b0 	.word	0x240000b0
 8001360:	240000bc 	.word	0x240000bc
 8001364:	240000cc 	.word	0x240000cc
 8001368:	44480000 	.word	0x44480000
 800136c:	44480000 	.word	0x44480000
 8001370:	c4480000 	.word	0xc4480000
 8001374:	c4480000 	.word	0xc4480000
 8001378:	3e8f5c29 	.word	0x3e8f5c29
 800137c:	443b8000 	.word	0x443b8000
 8001380:	240000c8 	.word	0x240000c8
 8001384:	00000000 	.word	0x00000000

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	rc_ref_euler.thx =  0;
 800138e:	4bb0      	ldr	r3, [pc, #704]	@ (8001650 <main+0x2c8>)
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
	rc_ref_euler.thy =  0;
 8001396:	4bae      	ldr	r3, [pc, #696]	@ (8001650 <main+0x2c8>)
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
	rc_ref_euler.thz =  0;
 800139e:	4bac      	ldr	r3, [pc, #688]	@ (8001650 <main+0x2c8>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]

	rc_comm_temp.AIL = 0;
 80013a6:	4bab      	ldr	r3, [pc, #684]	@ (8001654 <main+0x2cc>)
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
	rc_comm_temp.ELE = 0;
 80013ae:	4ba9      	ldr	r3, [pc, #676]	@ (8001654 <main+0x2cc>)
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
	rc_comm_temp.RUD = 0;
 80013b6:	4ba7      	ldr	r3, [pc, #668]	@ (8001654 <main+0x2cc>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
	rc_comm_temp.THR = 0;
 80013be:	4ba5      	ldr	r3, [pc, #660]	@ (8001654 <main+0x2cc>)
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]

	rc_ref_euler.thz = attitude_euler.thz;
 80013c6:	4ba4      	ldr	r3, [pc, #656]	@ (8001658 <main+0x2d0>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	4aa1      	ldr	r2, [pc, #644]	@ (8001650 <main+0x2c8>)
 80013cc:	6093      	str	r3, [r2, #8]

	acc_attitude.AXIS_X = 0;
 80013ce:	4ba3      	ldr	r3, [pc, #652]	@ (800165c <main+0x2d4>)
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	acc_attitude.AXIS_Y = 0;
 80013d6:	4ba1      	ldr	r3, [pc, #644]	@ (800165c <main+0x2d4>)
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
	acc_attitude.AXIS_Z = 0;
 80013de:	4b9f      	ldr	r3, [pc, #636]	@ (800165c <main+0x2d4>)
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
	gyro_attitude.AXIS_X = 0;
 80013e6:	4b9e      	ldr	r3, [pc, #632]	@ (8001660 <main+0x2d8>)
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
	gyro_attitude.AXIS_Y = 0;
 80013ee:	4b9c      	ldr	r3, [pc, #624]	@ (8001660 <main+0x2d8>)
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
	gyro_attitude.AXIS_Z = 0;
 80013f6:	4b9a      	ldr	r3, [pc, #616]	@ (8001660 <main+0x2d8>)
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fe:	f001 fe05 	bl	800300c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001402:	f000 f945 	bl	8001690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001406:	f000 fda3 	bl	8001f50 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800140a:	f000 fd4d 	bl	8001ea8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800140e:	f000 fd97 	bl	8001f40 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8001412:	f000 f9f5 	bl	8001800 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001416:	f000 fac5 	bl	80019a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800141a:	f000 fb63 	bl	8001ae4 <MX_TIM4_Init>
  MX_TIM5_Init();
 800141e:	f000 fc01 	bl	8001c24 <MX_TIM5_Init>
  MX_TIM15_Init();
 8001422:	f000 fc9f 	bl	8001d64 <MX_TIM15_Init>
  MX_I2C1_Init();
 8001426:	f000 f9ab 	bl	8001780 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800142a:	2100      	movs	r1, #0
 800142c:	488d      	ldr	r0, [pc, #564]	@ (8001664 <main+0x2dc>)
 800142e:	f005 f961 	bl	80066f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001432:	2104      	movs	r1, #4
 8001434:	488b      	ldr	r0, [pc, #556]	@ (8001664 <main+0x2dc>)
 8001436:	f005 f95d 	bl	80066f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800143a:	2108      	movs	r1, #8
 800143c:	4889      	ldr	r0, [pc, #548]	@ (8001664 <main+0x2dc>)
 800143e:	f005 f959 	bl	80066f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001442:	210c      	movs	r1, #12
 8001444:	4887      	ldr	r0, [pc, #540]	@ (8001664 <main+0x2dc>)
 8001446:	f005 f955 	bl	80066f4 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 800144a:	2104      	movs	r1, #4
 800144c:	4886      	ldr	r0, [pc, #536]	@ (8001668 <main+0x2e0>)
 800144e:	f005 fac1 	bl	80069d4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001452:	2100      	movs	r1, #0
 8001454:	4884      	ldr	r0, [pc, #528]	@ (8001668 <main+0x2e0>)
 8001456:	f005 fc33 	bl	8006cc0 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 800145a:	2104      	movs	r1, #4
 800145c:	4883      	ldr	r0, [pc, #524]	@ (800166c <main+0x2e4>)
 800145e:	f005 fab9 	bl	80069d4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001462:	2100      	movs	r1, #0
 8001464:	4881      	ldr	r0, [pc, #516]	@ (800166c <main+0x2e4>)
 8001466:	f005 fc2b 	bl	8006cc0 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 800146a:	2104      	movs	r1, #4
 800146c:	4880      	ldr	r0, [pc, #512]	@ (8001670 <main+0x2e8>)
 800146e:	f005 fab1 	bl	80069d4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8001472:	2100      	movs	r1, #0
 8001474:	487e      	ldr	r0, [pc, #504]	@ (8001670 <main+0x2e8>)
 8001476:	f005 fc23 	bl	8006cc0 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 800147a:	2104      	movs	r1, #4
 800147c:	487d      	ldr	r0, [pc, #500]	@ (8001674 <main+0x2ec>)
 800147e:	f005 faa9 	bl	80069d4 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8001482:	2100      	movs	r1, #0
 8001484:	487b      	ldr	r0, [pc, #492]	@ (8001674 <main+0x2ec>)
 8001486:	f005 fc1b 	bl	8006cc0 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);  // 1ms if period is 2000 ticks
 800148a:	4b76      	ldr	r3, [pc, #472]	@ (8001664 <main+0x2dc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2264      	movs	r2, #100	@ 0x64
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8001492:	4b74      	ldr	r3, [pc, #464]	@ (8001664 <main+0x2dc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2264      	movs	r2, #100	@ 0x64
 8001498:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 800149a:	4b72      	ldr	r3, [pc, #456]	@ (8001664 <main+0x2dc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2264      	movs	r2, #100	@ 0x64
 80014a0:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 80014a2:	4b70      	ldr	r3, [pc, #448]	@ (8001664 <main+0x2dc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2264      	movs	r2, #100	@ 0x64
 80014a8:	641a      	str	r2, [r3, #64]	@ 0x40

     HAL_Delay(3000);  // Wait for ESC to initialize
 80014aa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014ae:	f001 fe3f 	bl	8003130 <HAL_Delay>

     // Optional: set mid-throttle (1.5 ms pulse width)
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 150);  // 1.5ms
 80014b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001664 <main+0x2dc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2296      	movs	r2, #150	@ 0x96
 80014b8:	635a      	str	r2, [r3, #52]	@ 0x34
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 150);
 80014ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <main+0x2dc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2296      	movs	r2, #150	@ 0x96
 80014c0:	639a      	str	r2, [r3, #56]	@ 0x38
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 150);
 80014c2:	4b68      	ldr	r3, [pc, #416]	@ (8001664 <main+0x2dc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2296      	movs	r2, #150	@ 0x96
 80014c8:	63da      	str	r2, [r3, #60]	@ 0x3c
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 150);
 80014ca:	4b66      	ldr	r3, [pc, #408]	@ (8001664 <main+0x2dc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2296      	movs	r2, #150	@ 0x96
 80014d0:	641a      	str	r2, [r3, #64]	@ 0x40


  set_motor_pwm_zero(motor_pwm);
 80014d2:	4869      	ldr	r0, [pc, #420]	@ (8001678 <main+0x2f0>)
 80014d4:	f001 f8ea 	bl	80026ac <set_motor_pwm_zero>
  set_motor_pwm(motor_pwm);
 80014d8:	4867      	ldr	r0, [pc, #412]	@ (8001678 <main+0x2f0>)
 80014da:	f001 f875 	bl	80025c8 <set_motor_pwm>
  PID_init(&pid);
 80014de:	4867      	ldr	r0, [pc, #412]	@ (800167c <main+0x2f4>)
 80014e0:	f7ff fb08 	bl	8000af4 <PID_init>

    /* USER CODE BEGIN 3 */


	  	  // Reactivate Radio interrupts
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80014e4:	2104      	movs	r1, #4
 80014e6:	4860      	ldr	r0, [pc, #384]	@ (8001668 <main+0x2e0>)
 80014e8:	f005 fa74 	bl	80069d4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80014ec:	2100      	movs	r1, #0
 80014ee:	485e      	ldr	r0, [pc, #376]	@ (8001668 <main+0x2e0>)
 80014f0:	f005 fbe6 	bl	8006cc0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 80014f4:	2104      	movs	r1, #4
 80014f6:	485d      	ldr	r0, [pc, #372]	@ (800166c <main+0x2e4>)
 80014f8:	f005 fa6c 	bl	80069d4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80014fc:	2100      	movs	r1, #0
 80014fe:	485b      	ldr	r0, [pc, #364]	@ (800166c <main+0x2e4>)
 8001500:	f005 fbde 	bl	8006cc0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001504:	2104      	movs	r1, #4
 8001506:	485a      	ldr	r0, [pc, #360]	@ (8001670 <main+0x2e8>)
 8001508:	f005 fa64 	bl	80069d4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800150c:	2100      	movs	r1, #0
 800150e:	4858      	ldr	r0, [pc, #352]	@ (8001670 <main+0x2e8>)
 8001510:	f005 fbd6 	bl	8006cc0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001514:	2104      	movs	r1, #4
 8001516:	4857      	ldr	r0, [pc, #348]	@ (8001674 <main+0x2ec>)
 8001518:	f005 fa5c 	bl	80069d4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800151c:	2100      	movs	r1, #0
 800151e:	4855      	ldr	r0, [pc, #340]	@ (8001674 <main+0x2ec>)
 8001520:	f005 fbce 	bl	8006cc0 <HAL_TIM_IC_Start_IT>

		  // Target euler angles: PID reference
		  get_target_euler(&rc_ref_euler, &rc_comm_temp);
 8001524:	494b      	ldr	r1, [pc, #300]	@ (8001654 <main+0x2cc>)
 8001526:	484a      	ldr	r0, [pc, #296]	@ (8001650 <main+0x2c8>)
 8001528:	f001 f97c 	bl	8002824 <get_target_euler>

		  /*
		   * Placeholder for Acc + Gyro :
		   */

		  acc_attitude.AXIS_X = 0;
 800152c:	4b4b      	ldr	r3, [pc, #300]	@ (800165c <main+0x2d4>)
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
		  acc_attitude.AXIS_Y = 0;
 8001534:	4b49      	ldr	r3, [pc, #292]	@ (800165c <main+0x2d4>)
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
		  acc_attitude.AXIS_Z = 0;
 800153c:	4b47      	ldr	r3, [pc, #284]	@ (800165c <main+0x2d4>)
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
		  gyro_attitude.AXIS_X = 0;
 8001544:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <main+0x2d8>)
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
		  gyro_attitude.AXIS_Y = 0;
 800154c:	4b44      	ldr	r3, [pc, #272]	@ (8001660 <main+0x2d8>)
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
		  gyro_attitude.AXIS_Z = 0;
 8001554:	4b42      	ldr	r3, [pc, #264]	@ (8001660 <main+0x2d8>)
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
		   * MOVING AVERAGE + FILTER
		   */


		  // Update attitude
		  attitude_fusion(&acc_attitude, &gyro_attitude, &attitude, &rc_comm_temp);
 800155c:	4b3d      	ldr	r3, [pc, #244]	@ (8001654 <main+0x2cc>)
 800155e:	4a48      	ldr	r2, [pc, #288]	@ (8001680 <main+0x2f8>)
 8001560:	493f      	ldr	r1, [pc, #252]	@ (8001660 <main+0x2d8>)
 8001562:	483e      	ldr	r0, [pc, #248]	@ (800165c <main+0x2d4>)
 8001564:	f7ff f83c 	bl	80005e0 <attitude_fusion>
		  quat_to_euler(&attitude.q, &attitude_euler);
 8001568:	493b      	ldr	r1, [pc, #236]	@ (8001658 <main+0x2d0>)
 800156a:	4845      	ldr	r0, [pc, #276]	@ (8001680 <main+0x2f8>)
 800156c:	f001 f8b7 	bl	80026de <quat_to_euler>

		  if(rc_comm_temp.THR < MIN_THR)
 8001570:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <main+0x2cc>)
 8001572:	edd3 7a02 	vldr	s15, [r3, #8]
 8001576:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800157a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d507      	bpl.n	8001594 <main+0x20c>
		  {
			rc_ref_euler.thz = 0;
 8001584:	4b32      	ldr	r3, [pc, #200]	@ (8001650 <main+0x2c8>)
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
			attitude_euler.thz = 0;
 800158c:	4b32      	ldr	r3, [pc, #200]	@ (8001658 <main+0x2d0>)
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
		  }


		  PID_outer(&rc_ref_euler, &attitude_euler, &attitude, &pid, &rc_comm_temp);
 8001594:	4b2f      	ldr	r3, [pc, #188]	@ (8001654 <main+0x2cc>)
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4b38      	ldr	r3, [pc, #224]	@ (800167c <main+0x2f4>)
 800159a:	4a39      	ldr	r2, [pc, #228]	@ (8001680 <main+0x2f8>)
 800159c:	492e      	ldr	r1, [pc, #184]	@ (8001658 <main+0x2d0>)
 800159e:	482c      	ldr	r0, [pc, #176]	@ (8001650 <main+0x2c8>)
 80015a0:	f7ff fb20 	bl	8000be4 <PID_outer>

		  gyro_rad.gx = ((float)gyro_attitude.AXIS_X)*((float)COE_MDPS_TO_RADPS);
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <main+0x2d8>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8001684 <main+0x2fc>
 80015ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b2:	4b35      	ldr	r3, [pc, #212]	@ (8001688 <main+0x300>)
 80015b4:	edc3 7a00 	vstr	s15, [r3]
		  gyro_rad.gy = ((float)gyro_attitude.AXIS_Y)*((float)COE_MDPS_TO_RADPS);
 80015b8:	4b29      	ldr	r3, [pc, #164]	@ (8001660 <main+0x2d8>)
 80015ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80015be:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001684 <main+0x2fc>
 80015c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c6:	4b30      	ldr	r3, [pc, #192]	@ (8001688 <main+0x300>)
 80015c8:	edc3 7a01 	vstr	s15, [r3, #4]
		  gyro_rad.gz = ((float)gyro_attitude.AXIS_Z)*((float)COE_MDPS_TO_RADPS);
 80015cc:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <main+0x2d8>)
 80015ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001684 <main+0x2fc>
 80015d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015da:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <main+0x300>)
 80015dc:	edc3 7a02 	vstr	s15, [r3, #8]

		  attitude_euler.thz += gyro_rad.gz*PID_SAMPLING_TIME;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <main+0x2d0>)
 80015e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80015e6:	4b28      	ldr	r3, [pc, #160]	@ (8001688 <main+0x300>)
 80015e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ec:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800168c <main+0x304>
 80015f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <main+0x2d0>)
 80015fa:	edc3 7a02 	vstr	s15, [r3, #8]
		  /**
		   * !! PID_SAMPLING_TIME -> Precise PID sampling time: computed or defined by interrupt
		   */

		  if(rc_comm_temp.THR < MIN_THR)
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <main+0x2cc>)
 8001600:	edd3 7a02 	vldr	s15, [r3, #8]
 8001604:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	d503      	bpl.n	800161a <main+0x292>
		  {
			  attitude_euler.thz = 0;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <main+0x2d0>)
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
		  }

		  PID_inner(&rc_ref_euler, &gyro_rad, &attitude, &pid, motor_pwm, &rc_comm_temp);
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <main+0x2cc>)
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	4b16      	ldr	r3, [pc, #88]	@ (8001678 <main+0x2f0>)
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <main+0x2f4>)
 8001624:	4a16      	ldr	r2, [pc, #88]	@ (8001680 <main+0x2f8>)
 8001626:	4918      	ldr	r1, [pc, #96]	@ (8001688 <main+0x300>)
 8001628:	4809      	ldr	r0, [pc, #36]	@ (8001650 <main+0x2c8>)
 800162a:	f7ff fbfb 	bl	8000e24 <PID_inner>

		  if(rc_comm_temp.THR < MIN_THR)
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <main+0x2cc>)
 8001630:	edd3 7a02 	vldr	s15, [r3, #8]
 8001634:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d502      	bpl.n	8001648 <main+0x2c0>
		  {
			  set_motor_pwm_zero(motor_pwm);
 8001642:	480d      	ldr	r0, [pc, #52]	@ (8001678 <main+0x2f0>)
 8001644:	f001 f832 	bl	80026ac <set_motor_pwm_zero>
		  }

		  set_motor_pwm(motor_pwm);
 8001648:	480b      	ldr	r0, [pc, #44]	@ (8001678 <main+0x2f0>)
 800164a:	f000 ffbd 	bl	80025c8 <set_motor_pwm>
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 800164e:	e749      	b.n	80014e4 <main+0x15c>
 8001650:	24000344 	.word	0x24000344
 8001654:	24000334 	.word	0x24000334
 8001658:	24000350 	.word	0x24000350
 800165c:	240003f0 	.word	0x240003f0
 8001660:	240003fc 	.word	0x240003fc
 8001664:	24000124 	.word	0x24000124
 8001668:	24000170 	.word	0x24000170
 800166c:	240001bc 	.word	0x240001bc
 8001670:	24000208 	.word	0x24000208
 8001674:	24000254 	.word	0x24000254
 8001678:	2400035c 	.word	0x2400035c
 800167c:	24000380 	.word	0x24000380
 8001680:	24000364 	.word	0x24000364
 8001684:	379268a9 	.word	0x379268a9
 8001688:	24000408 	.word	0x24000408
 800168c:	3aa3d70a 	.word	0x3aa3d70a

08001690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b09c      	sub	sp, #112	@ 0x70
 8001694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169a:	224c      	movs	r2, #76	@ 0x4c
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f008 fae6 	bl	8009c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2220      	movs	r2, #32
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f008 fae0 	bl	8009c70 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80016b0:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <SystemClock_Config+0xe8>)
 80016b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80016ba:	2004      	movs	r0, #4
 80016bc:	f002 f96a 	bl	8003994 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80016c0:	2300      	movs	r3, #0
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <SystemClock_Config+0xec>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a2c      	ldr	r2, [pc, #176]	@ (800177c <SystemClock_Config+0xec>)
 80016ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <SystemClock_Config+0xec>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016dc:	bf00      	nop
 80016de:	4b27      	ldr	r3, [pc, #156]	@ (800177c <SystemClock_Config+0xec>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016ea:	d1f8      	bne.n	80016de <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80016ec:	2321      	movs	r3, #33	@ 0x21
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016f6:	2301      	movs	r3, #1
 80016f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fa:	2302      	movs	r3, #2
 80016fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fe:	2302      	movs	r3, #2
 8001700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001702:	2301      	movs	r3, #1
 8001704:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8001706:	2325      	movs	r3, #37	@ 0x25
 8001708:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800170a:	2302      	movs	r3, #2
 800170c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800170e:	2304      	movs	r3, #4
 8001710:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001712:	2302      	movs	r3, #2
 8001714:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001716:	230c      	movs	r3, #12
 8001718:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800171a:	2300      	movs	r3, #0
 800171c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800171e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001722:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001728:	4618      	mov	r0, r3
 800172a:	f002 f98d 	bl	8003a48 <HAL_RCC_OscConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001734:	f000 ff06 	bl	8002544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001738:	233f      	movs	r3, #63	@ 0x3f
 800173a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173c:	2303      	movs	r3, #3
 800173e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001748:	2340      	movs	r3, #64	@ 0x40
 800174a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800174c:	2340      	movs	r3, #64	@ 0x40
 800174e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001754:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001756:	2340      	movs	r3, #64	@ 0x40
 8001758:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2103      	movs	r1, #3
 800175e:	4618      	mov	r0, r3
 8001760:	f002 fda4 	bl	80042ac <HAL_RCC_ClockConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800176a:	f000 feeb 	bl	8002544 <Error_Handler>
  }
}
 800176e:	bf00      	nop
 8001770:	3770      	adds	r7, #112	@ 0x70
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	58024400 	.word	0x58024400
 800177c:	58024800 	.word	0x58024800

08001780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001784:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <MX_I2C1_Init+0x74>)
 8001786:	4a1c      	ldr	r2, [pc, #112]	@ (80017f8 <MX_I2C1_Init+0x78>)
 8001788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702787;
 800178a:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <MX_I2C1_Init+0x74>)
 800178c:	4a1b      	ldr	r2, [pc, #108]	@ (80017fc <MX_I2C1_Init+0x7c>)
 800178e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001790:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <MX_I2C1_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001796:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <MX_I2C1_Init+0x74>)
 8001798:	2201      	movs	r2, #1
 800179a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800179c:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <MX_I2C1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <MX_I2C1_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <MX_I2C1_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_I2C1_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <MX_I2C1_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017ba:	480e      	ldr	r0, [pc, #56]	@ (80017f4 <MX_I2C1_Init+0x74>)
 80017bc:	f001 ffb6 	bl	800372c <HAL_I2C_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017c6:	f000 febd 	bl	8002544 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4809      	ldr	r0, [pc, #36]	@ (80017f4 <MX_I2C1_Init+0x74>)
 80017ce:	f002 f849 	bl	8003864 <HAL_I2CEx_ConfigAnalogFilter>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017d8:	f000 feb4 	bl	8002544 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017dc:	2100      	movs	r1, #0
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <MX_I2C1_Init+0x74>)
 80017e0:	f002 f88b 	bl	80038fa <HAL_I2CEx_ConfigDigitalFilter>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017ea:	f000 feab 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	240000d0 	.word	0x240000d0
 80017f8:	40005400 	.word	0x40005400
 80017fc:	00702787 	.word	0x00702787

08001800 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b09c      	sub	sp, #112	@ 0x70
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001806:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001820:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	615a      	str	r2, [r3, #20]
 8001832:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2234      	movs	r2, #52	@ 0x34
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f008 fa18 	bl	8009c70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001840:	4b56      	ldr	r3, [pc, #344]	@ (800199c <MX_TIM1_Init+0x19c>)
 8001842:	4a57      	ldr	r2, [pc, #348]	@ (80019a0 <MX_TIM1_Init+0x1a0>)
 8001844:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1499;
 8001846:	4b55      	ldr	r3, [pc, #340]	@ (800199c <MX_TIM1_Init+0x19c>)
 8001848:	f240 52db 	movw	r2, #1499	@ 0x5db
 800184c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b53      	ldr	r3, [pc, #332]	@ (800199c <MX_TIM1_Init+0x19c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8001854:	4b51      	ldr	r3, [pc, #324]	@ (800199c <MX_TIM1_Init+0x19c>)
 8001856:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800185a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185c:	4b4f      	ldr	r3, [pc, #316]	@ (800199c <MX_TIM1_Init+0x19c>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001862:	4b4e      	ldr	r3, [pc, #312]	@ (800199c <MX_TIM1_Init+0x19c>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b4c      	ldr	r3, [pc, #304]	@ (800199c <MX_TIM1_Init+0x19c>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800186e:	484b      	ldr	r0, [pc, #300]	@ (800199c <MX_TIM1_Init+0x19c>)
 8001870:	f004 fe88 	bl	8006584 <HAL_TIM_Base_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800187a:	f000 fe63 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001882:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001884:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001888:	4619      	mov	r1, r3
 800188a:	4844      	ldr	r0, [pc, #272]	@ (800199c <MX_TIM1_Init+0x19c>)
 800188c:	f005 fede 	bl	800764c <HAL_TIM_ConfigClockSource>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001896:	f000 fe55 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800189a:	4840      	ldr	r0, [pc, #256]	@ (800199c <MX_TIM1_Init+0x19c>)
 800189c:	f004 fec9 	bl	8006632 <HAL_TIM_PWM_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80018a6:	f000 fe4d 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018aa:	2300      	movs	r3, #0
 80018ac:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018ba:	4619      	mov	r1, r3
 80018bc:	4837      	ldr	r0, [pc, #220]	@ (800199c <MX_TIM1_Init+0x19c>)
 80018be:	f006 febf 	bl	8008640 <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80018c8:	f000 fe3c 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018cc:	2360      	movs	r3, #96	@ 0x60
 80018ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d4:	2300      	movs	r3, #0
 80018d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018d8:	2300      	movs	r3, #0
 80018da:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018ec:	2200      	movs	r2, #0
 80018ee:	4619      	mov	r1, r3
 80018f0:	482a      	ldr	r0, [pc, #168]	@ (800199c <MX_TIM1_Init+0x19c>)
 80018f2:	f005 fd97 	bl	8007424 <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018fc:	f000 fe22 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001900:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001904:	2204      	movs	r2, #4
 8001906:	4619      	mov	r1, r3
 8001908:	4824      	ldr	r0, [pc, #144]	@ (800199c <MX_TIM1_Init+0x19c>)
 800190a:	f005 fd8b 	bl	8007424 <HAL_TIM_PWM_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001914:	f000 fe16 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001918:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800191c:	2208      	movs	r2, #8
 800191e:	4619      	mov	r1, r3
 8001920:	481e      	ldr	r0, [pc, #120]	@ (800199c <MX_TIM1_Init+0x19c>)
 8001922:	f005 fd7f 	bl	8007424 <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800192c:	f000 fe0a 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001930:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001934:	220c      	movs	r2, #12
 8001936:	4619      	mov	r1, r3
 8001938:	4818      	ldr	r0, [pc, #96]	@ (800199c <MX_TIM1_Init+0x19c>)
 800193a:	f005 fd73 	bl	8007424 <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001944:	f000 fdfe 	bl	8002544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800195c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001960:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800196a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4807      	ldr	r0, [pc, #28]	@ (800199c <MX_TIM1_Init+0x19c>)
 800197e:	f006 feed 	bl	800875c <HAL_TIMEx_ConfigBreakDeadTime>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8001988:	f000 fddc 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <MX_TIM1_Init+0x19c>)
 800198e:	f001 f99d 	bl	8002ccc <HAL_TIM_MspPostInit>

}
 8001992:	bf00      	nop
 8001994:	3770      	adds	r7, #112	@ 0x70
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	24000124 	.word	0x24000124
 80019a0:	40010000 	.word	0x40010000

080019a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	@ 0x40
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d6:	463b      	mov	r3, r7
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e0:	4b3e      	ldr	r3, [pc, #248]	@ (8001adc <MX_TIM3_Init+0x138>)
 80019e2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ae0 <MX_TIM3_Init+0x13c>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 80019e6:	4b3d      	ldr	r3, [pc, #244]	@ (8001adc <MX_TIM3_Init+0x138>)
 80019e8:	f240 227f 	movw	r2, #639	@ 0x27f
 80019ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b3b      	ldr	r3, [pc, #236]	@ (8001adc <MX_TIM3_Init+0x138>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019f4:	4b39      	ldr	r3, [pc, #228]	@ (8001adc <MX_TIM3_Init+0x138>)
 80019f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <MX_TIM3_Init+0x138>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b36      	ldr	r3, [pc, #216]	@ (8001adc <MX_TIM3_Init+0x138>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a08:	4834      	ldr	r0, [pc, #208]	@ (8001adc <MX_TIM3_Init+0x138>)
 8001a0a:	f004 fdbb 	bl	8006584 <HAL_TIM_Base_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001a14:	f000 fd96 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a22:	4619      	mov	r1, r3
 8001a24:	482d      	ldr	r0, [pc, #180]	@ (8001adc <MX_TIM3_Init+0x138>)
 8001a26:	f005 fe11 	bl	800764c <HAL_TIM_ConfigClockSource>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001a30:	f000 fd88 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a34:	4829      	ldr	r0, [pc, #164]	@ (8001adc <MX_TIM3_Init+0x138>)
 8001a36:	f004 ff6b 	bl	8006910 <HAL_TIM_IC_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001a40:	f000 fd80 	bl	8002544 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a44:	2304      	movs	r3, #4
 8001a46:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a48:	2350      	movs	r3, #80	@ 0x50
 8001a4a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	481f      	ldr	r0, [pc, #124]	@ (8001adc <MX_TIM3_Init+0x138>)
 8001a60:	f005 feec 	bl	800783c <HAL_TIM_SlaveConfigSynchro>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001a6a:	f000 fd6b 	bl	8002544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a72:	2301      	movs	r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	2200      	movs	r2, #0
 8001a84:	4619      	mov	r1, r3
 8001a86:	4815      	ldr	r0, [pc, #84]	@ (8001adc <MX_TIM3_Init+0x138>)
 8001a88:	f005 fc2f 	bl	80072ea <HAL_TIM_IC_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8001a92:	f000 fd57 	bl	8002544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a96:	2302      	movs	r3, #2
 8001a98:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480d      	ldr	r0, [pc, #52]	@ (8001adc <MX_TIM3_Init+0x138>)
 8001aa8:	f005 fc1f 	bl	80072ea <HAL_TIM_IC_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8001ab2:	f000 fd47 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4806      	ldr	r0, [pc, #24]	@ (8001adc <MX_TIM3_Init+0x138>)
 8001ac4:	f006 fdbc 	bl	8008640 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 8001ace:	f000 fd39 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	3740      	adds	r7, #64	@ 0x40
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	24000170 	.word	0x24000170
 8001ae0:	40000400 	.word	0x40000400

08001ae4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b090      	sub	sp, #64	@ 0x40
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b16:	463b      	mov	r3, r7
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b20:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001b22:	4a3f      	ldr	r2, [pc, #252]	@ (8001c20 <MX_TIM4_Init+0x13c>)
 8001b24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8001b26:	4b3d      	ldr	r3, [pc, #244]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001b28:	f240 227f 	movw	r2, #639	@ 0x27f
 8001b2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b34:	4b39      	ldr	r3, [pc, #228]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001b36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3c:	4b37      	ldr	r3, [pc, #220]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b42:	4b36      	ldr	r3, [pc, #216]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b48:	4834      	ldr	r0, [pc, #208]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001b4a:	f004 fd1b 	bl	8006584 <HAL_TIM_Base_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001b54:	f000 fcf6 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b62:	4619      	mov	r1, r3
 8001b64:	482d      	ldr	r0, [pc, #180]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001b66:	f005 fd71 	bl	800764c <HAL_TIM_ConfigClockSource>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001b70:	f000 fce8 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b74:	4829      	ldr	r0, [pc, #164]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001b76:	f004 fecb 	bl	8006910 <HAL_TIM_IC_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001b80:	f000 fce0 	bl	8002544 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b84:	2304      	movs	r3, #4
 8001b86:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b88:	2350      	movs	r3, #80	@ 0x50
 8001b8a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	481f      	ldr	r0, [pc, #124]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001ba0:	f005 fe4c 	bl	800783c <HAL_TIM_SlaveConfigSynchro>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001baa:	f000 fccb 	bl	8002544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4815      	ldr	r0, [pc, #84]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001bc8:	f005 fb8f 	bl	80072ea <HAL_TIM_IC_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8001bd2:	f000 fcb7 	bl	8002544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2204      	movs	r2, #4
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001be8:	f005 fb7f 	bl	80072ea <HAL_TIM_IC_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8001bf2:	f000 fca7 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_TIM4_Init+0x138>)
 8001c04:	f006 fd1c 	bl	8008640 <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 8001c0e:	f000 fc99 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3740      	adds	r7, #64	@ 0x40
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	240001bc 	.word	0x240001bc
 8001c20:	40000800 	.word	0x40000800

08001c24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b090      	sub	sp, #64	@ 0x40
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c56:	463b      	mov	r3, r7
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c60:	4b3e      	ldr	r3, [pc, #248]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001c62:	4a3f      	ldr	r2, [pc, #252]	@ (8001d60 <MX_TIM5_Init+0x13c>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 639;
 8001c66:	4b3d      	ldr	r3, [pc, #244]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001c68:	f240 227f 	movw	r2, #639	@ 0x27f
 8001c6c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001c74:	4b39      	ldr	r3, [pc, #228]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001c76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b37      	ldr	r3, [pc, #220]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c88:	4834      	ldr	r0, [pc, #208]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001c8a:	f004 fc7b 	bl	8006584 <HAL_TIM_Base_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001c94:	f000 fc56 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	482d      	ldr	r0, [pc, #180]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001ca6:	f005 fcd1 	bl	800764c <HAL_TIM_ConfigClockSource>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001cb0:	f000 fc48 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001cb4:	4829      	ldr	r0, [pc, #164]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001cb6:	f004 fe2b 	bl	8006910 <HAL_TIM_IC_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8001cc0:	f000 fc40 	bl	8002544 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001cc8:	2350      	movs	r3, #80	@ 0x50
 8001cca:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481f      	ldr	r0, [pc, #124]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001ce0:	f005 fdac 	bl	800783c <HAL_TIM_SlaveConfigSynchro>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8001cea:	f000 fc2b 	bl	8002544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	4815      	ldr	r0, [pc, #84]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001d08:	f005 faef 	bl	80072ea <HAL_TIM_IC_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8001d12:	f000 fc17 	bl	8002544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d16:	2302      	movs	r3, #2
 8001d18:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d1e:	f107 030c 	add.w	r3, r7, #12
 8001d22:	2204      	movs	r2, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001d28:	f005 fadf 	bl	80072ea <HAL_TIM_IC_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 8001d32:	f000 fc07 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d3e:	463b      	mov	r3, r7
 8001d40:	4619      	mov	r1, r3
 8001d42:	4806      	ldr	r0, [pc, #24]	@ (8001d5c <MX_TIM5_Init+0x138>)
 8001d44:	f006 fc7c 	bl	8008640 <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM5_Init+0x12e>
  {
    Error_Handler();
 8001d4e:	f000 fbf9 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	3740      	adds	r7, #64	@ 0x40
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	24000208 	.word	0x24000208
 8001d60:	40000c00 	.word	0x40000c00

08001d64 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b090      	sub	sp, #64	@ 0x40
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d96:	463b      	mov	r3, r7
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001da0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001da2:	4a40      	ldr	r2, [pc, #256]	@ (8001ea4 <MX_TIM15_Init+0x140>)
 8001da4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 8001da6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001da8:	f240 227f 	movw	r2, #639	@ 0x27f
 8001dac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dae:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001db4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001db6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dba:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbc:	4b38      	ldr	r3, [pc, #224]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001dc2:	4b37      	ldr	r3, [pc, #220]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc8:	4b35      	ldr	r3, [pc, #212]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001dce:	4834      	ldr	r0, [pc, #208]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001dd0:	f004 fbd8 	bl	8006584 <HAL_TIM_Base_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8001dda:	f000 fbb3 	bl	8002544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001de4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001de8:	4619      	mov	r1, r3
 8001dea:	482d      	ldr	r0, [pc, #180]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001dec:	f005 fc2e 	bl	800764c <HAL_TIM_ConfigClockSource>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 8001df6:	f000 fba5 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001dfa:	4829      	ldr	r0, [pc, #164]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001dfc:	f004 fd88 	bl	8006910 <HAL_TIM_IC_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8001e06:	f000 fb9d 	bl	8002544 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001e0e:	2350      	movs	r3, #80	@ 0x50
 8001e10:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	481e      	ldr	r0, [pc, #120]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001e26:	f005 fd09 	bl	800783c <HAL_TIM_SlaveConfigSynchro>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001e30:	f000 fb88 	bl	8002544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4814      	ldr	r0, [pc, #80]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001e4e:	f005 fa4c 	bl	80072ea <HAL_TIM_IC_ConfigChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001e58:	f000 fb74 	bl	8002544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001e60:	2302      	movs	r3, #2
 8001e62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480c      	ldr	r0, [pc, #48]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001e6e:	f005 fa3c 	bl	80072ea <HAL_TIM_IC_ConfigChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 8001e78:	f000 fb64 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e84:	463b      	mov	r3, r7
 8001e86:	4619      	mov	r1, r3
 8001e88:	4805      	ldr	r0, [pc, #20]	@ (8001ea0 <MX_TIM15_Init+0x13c>)
 8001e8a:	f006 fbd9 	bl	8008640 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 8001e94:	f000 fb56 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001e98:	bf00      	nop
 8001e9a:	3740      	adds	r7, #64	@ 0x40
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	24000254 	.word	0x24000254
 8001ea4:	40014000 	.word	0x40014000

08001ea8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eac:	4b22      	ldr	r3, [pc, #136]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eae:	4a23      	ldr	r2, [pc, #140]	@ (8001f3c <MX_USART3_UART_Init+0x94>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b1f      	ldr	r3, [pc, #124]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eea:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ef0:	4811      	ldr	r0, [pc, #68]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ef2:	f006 fcdd 	bl	80088b0 <HAL_UART_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001efc:	f000 fb22 	bl	8002544 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f00:	2100      	movs	r1, #0
 8001f02:	480d      	ldr	r0, [pc, #52]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f04:	f007 fde9 	bl	8009ada <HAL_UARTEx_SetTxFifoThreshold>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f0e:	f000 fb19 	bl	8002544 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f12:	2100      	movs	r1, #0
 8001f14:	4808      	ldr	r0, [pc, #32]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f16:	f007 fe1e 	bl	8009b56 <HAL_UARTEx_SetRxFifoThreshold>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f20:	f000 fb10 	bl	8002544 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f26:	f007 fd9f 	bl	8009a68 <HAL_UARTEx_DisableFifoMode>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f30:	f000 fb08 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	240002a0 	.word	0x240002a0
 8001f3c:	40004800 	.word	0x40004800

08001f40 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	@ 0x38
 8001f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f66:	4b80      	ldr	r3, [pc, #512]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001f68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f6c:	4a7e      	ldr	r2, [pc, #504]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001f6e:	f043 0310 	orr.w	r3, r3, #16
 8001f72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f76:	4b7c      	ldr	r3, [pc, #496]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	623b      	str	r3, [r7, #32]
 8001f82:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	4b78      	ldr	r3, [pc, #480]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001f86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f8a:	4a77      	ldr	r2, [pc, #476]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f94:	4b74      	ldr	r3, [pc, #464]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001f96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa2:	4b71      	ldr	r3, [pc, #452]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001fa4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fa8:	4a6f      	ldr	r2, [pc, #444]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001fb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fb8:	f003 0320 	and.w	r3, r3, #32
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fc0:	4b69      	ldr	r3, [pc, #420]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001fc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fc6:	4a68      	ldr	r2, [pc, #416]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fcc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fd0:	4b65      	ldr	r3, [pc, #404]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001fd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b62      	ldr	r3, [pc, #392]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001fe0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fe4:	4a60      	ldr	r2, [pc, #384]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fee:	4b5e      	ldr	r3, [pc, #376]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001ff0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	4b5a      	ldr	r3, [pc, #360]	@ (8002168 <MX_GPIO_Init+0x218>)
 8001ffe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002002:	4a59      	ldr	r2, [pc, #356]	@ (8002168 <MX_GPIO_Init+0x218>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800200c:	4b56      	ldr	r3, [pc, #344]	@ (8002168 <MX_GPIO_Init+0x218>)
 800200e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800201a:	4b53      	ldr	r3, [pc, #332]	@ (8002168 <MX_GPIO_Init+0x218>)
 800201c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002020:	4a51      	ldr	r2, [pc, #324]	@ (8002168 <MX_GPIO_Init+0x218>)
 8002022:	f043 0308 	orr.w	r3, r3, #8
 8002026:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800202a:	4b4f      	ldr	r3, [pc, #316]	@ (8002168 <MX_GPIO_Init+0x218>)
 800202c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002038:	4b4b      	ldr	r3, [pc, #300]	@ (8002168 <MX_GPIO_Init+0x218>)
 800203a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800203e:	4a4a      	ldr	r2, [pc, #296]	@ (8002168 <MX_GPIO_Init+0x218>)
 8002040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002044:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002048:	4b47      	ldr	r3, [pc, #284]	@ (8002168 <MX_GPIO_Init+0x218>)
 800204a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800204e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800205c:	4843      	ldr	r0, [pc, #268]	@ (800216c <MX_GPIO_Init+0x21c>)
 800205e:	f001 fb4b 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8002062:	2200      	movs	r2, #0
 8002064:	f244 0101 	movw	r1, #16385	@ 0x4001
 8002068:	4841      	ldr	r0, [pc, #260]	@ (8002170 <MX_GPIO_Init+0x220>)
 800206a:	f001 fb45 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	2102      	movs	r1, #2
 8002072:	4840      	ldr	r0, [pc, #256]	@ (8002174 <MX_GPIO_Init+0x224>)
 8002074:	f001 fb40 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002078:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207e:	2300      	movs	r3, #0
 8002080:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208a:	4619      	mov	r1, r3
 800208c:	483a      	ldr	r0, [pc, #232]	@ (8002178 <MX_GPIO_Init+0x228>)
 800208e:	f001 f983 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8002092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	2301      	movs	r3, #1
 800209a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a8:	4619      	mov	r1, r3
 80020aa:	4830      	ldr	r0, [pc, #192]	@ (800216c <MX_GPIO_Init+0x21c>)
 80020ac:	f001 f974 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80020b0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b6:	2301      	movs	r3, #1
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c6:	4619      	mov	r1, r3
 80020c8:	4829      	ldr	r0, [pc, #164]	@ (8002170 <MX_GPIO_Init+0x220>)
 80020ca:	f001 f965 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80020ce:	2380      	movs	r3, #128	@ 0x80
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	4826      	ldr	r0, [pc, #152]	@ (800217c <MX_GPIO_Init+0x22c>)
 80020e4:	f001 f958 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80020e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020fa:	4619      	mov	r1, r3
 80020fc:	4820      	ldr	r0, [pc, #128]	@ (8002180 <MX_GPIO_Init+0x230>)
 80020fe:	f001 f94b 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8002102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8002114:	230a      	movs	r3, #10
 8002116:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800211c:	4619      	mov	r1, r3
 800211e:	4818      	ldr	r0, [pc, #96]	@ (8002180 <MX_GPIO_Init+0x230>)
 8002120:	f001 f93a 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8002124:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213a:	4619      	mov	r1, r3
 800213c:	4810      	ldr	r0, [pc, #64]	@ (8002180 <MX_GPIO_Init+0x230>)
 800213e:	f001 f92b 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002142:	2302      	movs	r3, #2
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002146:	2301      	movs	r3, #1
 8002148:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	2300      	movs	r3, #0
 8002150:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	4806      	ldr	r0, [pc, #24]	@ (8002174 <MX_GPIO_Init+0x224>)
 800215a:	f001 f91d 	bl	8003398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800215e:	bf00      	nop
 8002160:	3738      	adds	r7, #56	@ 0x38
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	58024400 	.word	0x58024400
 800216c:	58021400 	.word	0x58021400
 8002170:	58020400 	.word	0x58020400
 8002174:	58021000 	.word	0x58021000
 8002178:	58020800 	.word	0x58020800
 800217c:	58021800 	.word	0x58021800
 8002180:	58020000 	.word	0x58020000
 8002184:	00000000 	.word	0x00000000

08002188 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4ab8      	ldr	r2, [pc, #736]	@ (8002478 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d161      	bne.n	800225e <HAL_TIM_IC_CaptureCallback+0xd6>
    {

        cycle_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800219a:	2100      	movs	r1, #0
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f005 fb8f 	bl	80078c0 <HAL_TIM_ReadCapturedValue>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4ab5      	ldr	r2, [pc, #724]	@ (800247c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80021a6:	6013      	str	r3, [r2, #0]
        period_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80021a8:	2104      	movs	r1, #4
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f005 fb88 	bl	80078c0 <HAL_TIM_ReadCapturedValue>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	461a      	mov	r2, r3
 80021bc:	4bb0      	ldr	r3, [pc, #704]	@ (8002480 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80021be:	601a      	str	r2, [r3, #0]
    	if (cycle_rc_0 > 4300 && cycle_rc_0 < 4380 && period_rc_0 > 0 && cycle_rc_0 > period_rc_0 ) {
 80021c0:	4bae      	ldr	r3, [pc, #696]	@ (800247c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d948      	bls.n	800225e <HAL_TIM_IC_CaptureCallback+0xd6>
 80021cc:	4bab      	ldr	r3, [pc, #684]	@ (800247c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f241 121b 	movw	r2, #4379	@ 0x111b
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d842      	bhi.n	800225e <HAL_TIM_IC_CaptureCallback+0xd6>
 80021d8:	4ba9      	ldr	r3, [pc, #676]	@ (8002480 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d03e      	beq.n	800225e <HAL_TIM_IC_CaptureCallback+0xd6>
 80021e0:	4ba6      	ldr	r3, [pc, #664]	@ (800247c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4ba6      	ldr	r3, [pc, #664]	@ (8002480 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d938      	bls.n	800225e <HAL_TIM_IC_CaptureCallback+0xd6>
    		channel_mag_0 = ((float) period_rc_0 / (float) cycle_rc_0 - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 80021ec:	4ba4      	ldr	r3, [pc, #656]	@ (8002480 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021f8:	4ba0      	ldr	r3, [pc, #640]	@ (800247c <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800220c:	ed9f 6b94 	vldr	d6, [pc, #592]	@ 8002460 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8002210:	ee37 6b46 	vsub.f64	d6, d7, d6
 8002214:	ed9f 5b94 	vldr	d5, [pc, #592]	@ 8002468 <HAL_TIM_IC_CaptureCallback+0x2e0>
 8002218:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800221c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002220:	4b98      	ldr	r3, [pc, #608]	@ (8002484 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8002222:	edc3 7a00 	vstr	s15, [r3]
    		rc_comm_temp.AIL = (channel_mag_0 - 0.5) * 2 * RC_FULLSCALE;
 8002226:	4b97      	ldr	r3, [pc, #604]	@ (8002484 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002230:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8002234:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002238:	ee37 7b07 	vadd.f64	d7, d7, d7
 800223c:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 8002470 <HAL_TIM_IC_CaptureCallback+0x2e8>
 8002240:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002244:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002248:	4b8f      	ldr	r3, [pc, #572]	@ (8002488 <HAL_TIM_IC_CaptureCallback+0x300>)
 800224a:	edc3 7a00 	vstr	s15, [r3]
    		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800224e:	2100      	movs	r1, #0
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f004 fe85 	bl	8006f60 <HAL_TIM_IC_Stop_IT>
    		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8002256:	2104      	movs	r1, #4
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f004 fcbf 	bl	8006bdc <HAL_TIM_IC_Stop>

    	}
    }

    if (htim->Instance == TIM4)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a8a      	ldr	r2, [pc, #552]	@ (800248c <HAL_TIM_IC_CaptureCallback+0x304>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d161      	bne.n	800232c <HAL_TIM_IC_CaptureCallback+0x1a4>
    {

            cycle_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002268:	2100      	movs	r1, #0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f005 fb28 	bl	80078c0 <HAL_TIM_ReadCapturedValue>
 8002270:	4603      	mov	r3, r0
 8002272:	4a87      	ldr	r2, [pc, #540]	@ (8002490 <HAL_TIM_IC_CaptureCallback+0x308>)
 8002274:	6013      	str	r3, [r2, #0]
            period_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8002276:	2104      	movs	r1, #4
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f005 fb21 	bl	80078c0 <HAL_TIM_ReadCapturedValue>
 800227e:	4602      	mov	r2, r0
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	461a      	mov	r2, r3
 800228a:	4b82      	ldr	r3, [pc, #520]	@ (8002494 <HAL_TIM_IC_CaptureCallback+0x30c>)
 800228c:	601a      	str	r2, [r3, #0]
        	if (cycle_rc_1 > 4300 && cycle_rc_1 < 4380 && period_rc_1 > 0 && cycle_rc_1 > period_rc_1) {
 800228e:	4b80      	ldr	r3, [pc, #512]	@ (8002490 <HAL_TIM_IC_CaptureCallback+0x308>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8002296:	4293      	cmp	r3, r2
 8002298:	d948      	bls.n	800232c <HAL_TIM_IC_CaptureCallback+0x1a4>
 800229a:	4b7d      	ldr	r3, [pc, #500]	@ (8002490 <HAL_TIM_IC_CaptureCallback+0x308>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f241 121b 	movw	r2, #4379	@ 0x111b
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d842      	bhi.n	800232c <HAL_TIM_IC_CaptureCallback+0x1a4>
 80022a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002494 <HAL_TIM_IC_CaptureCallback+0x30c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d03e      	beq.n	800232c <HAL_TIM_IC_CaptureCallback+0x1a4>
 80022ae:	4b78      	ldr	r3, [pc, #480]	@ (8002490 <HAL_TIM_IC_CaptureCallback+0x308>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b78      	ldr	r3, [pc, #480]	@ (8002494 <HAL_TIM_IC_CaptureCallback+0x30c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d938      	bls.n	800232c <HAL_TIM_IC_CaptureCallback+0x1a4>
        		channel_mag_1 = ((float) period_rc_1 / (float) cycle_rc_1  - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 80022ba:	4b76      	ldr	r3, [pc, #472]	@ (8002494 <HAL_TIM_IC_CaptureCallback+0x30c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c6:	4b72      	ldr	r3, [pc, #456]	@ (8002490 <HAL_TIM_IC_CaptureCallback+0x308>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022da:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8002460 <HAL_TIM_IC_CaptureCallback+0x2d8>
 80022de:	ee37 6b46 	vsub.f64	d6, d7, d6
 80022e2:	ed9f 5b61 	vldr	d5, [pc, #388]	@ 8002468 <HAL_TIM_IC_CaptureCallback+0x2e0>
 80022e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002498 <HAL_TIM_IC_CaptureCallback+0x310>)
 80022f0:	edc3 7a00 	vstr	s15, [r3]
        		rc_comm_temp.ELE = (channel_mag_1 - 0.5) * 2 * RC_FULLSCALE;
 80022f4:	4b68      	ldr	r3, [pc, #416]	@ (8002498 <HAL_TIM_IC_CaptureCallback+0x310>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022fe:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8002302:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002306:	ee37 7b07 	vadd.f64	d7, d7, d7
 800230a:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8002470 <HAL_TIM_IC_CaptureCallback+0x2e8>
 800230e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002312:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002316:	4b5c      	ldr	r3, [pc, #368]	@ (8002488 <HAL_TIM_IC_CaptureCallback+0x300>)
 8002318:	edc3 7a01 	vstr	s15, [r3, #4]
        		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800231c:	2100      	movs	r1, #0
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f004 fe1e 	bl	8006f60 <HAL_TIM_IC_Stop_IT>
        		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8002324:	2104      	movs	r1, #4
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f004 fc58 	bl	8006bdc <HAL_TIM_IC_Stop>

        	}
    }

    if (htim->Instance == TIM5)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a5a      	ldr	r2, [pc, #360]	@ (800249c <HAL_TIM_IC_CaptureCallback+0x314>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d161      	bne.n	80023fa <HAL_TIM_IC_CaptureCallback+0x272>
            {

                cycle_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002336:	2100      	movs	r1, #0
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f005 fac1 	bl	80078c0 <HAL_TIM_ReadCapturedValue>
 800233e:	4603      	mov	r3, r0
 8002340:	4a57      	ldr	r2, [pc, #348]	@ (80024a0 <HAL_TIM_IC_CaptureCallback+0x318>)
 8002342:	6013      	str	r3, [r2, #0]
                period_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8002344:	2104      	movs	r1, #4
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f005 faba 	bl	80078c0 <HAL_TIM_ReadCapturedValue>
 800234c:	4602      	mov	r2, r0
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	461a      	mov	r2, r3
 8002358:	4b52      	ldr	r3, [pc, #328]	@ (80024a4 <HAL_TIM_IC_CaptureCallback+0x31c>)
 800235a:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_2 > 4300 && cycle_rc_2 < 4380 && period_rc_2 > 0 && cycle_rc_2 > period_rc_2) {
 800235c:	4b50      	ldr	r3, [pc, #320]	@ (80024a0 <HAL_TIM_IC_CaptureCallback+0x318>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8002364:	4293      	cmp	r3, r2
 8002366:	d948      	bls.n	80023fa <HAL_TIM_IC_CaptureCallback+0x272>
 8002368:	4b4d      	ldr	r3, [pc, #308]	@ (80024a0 <HAL_TIM_IC_CaptureCallback+0x318>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f241 121b 	movw	r2, #4379	@ 0x111b
 8002370:	4293      	cmp	r3, r2
 8002372:	d842      	bhi.n	80023fa <HAL_TIM_IC_CaptureCallback+0x272>
 8002374:	4b4b      	ldr	r3, [pc, #300]	@ (80024a4 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d03e      	beq.n	80023fa <HAL_TIM_IC_CaptureCallback+0x272>
 800237c:	4b48      	ldr	r3, [pc, #288]	@ (80024a0 <HAL_TIM_IC_CaptureCallback+0x318>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b48      	ldr	r3, [pc, #288]	@ (80024a4 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d938      	bls.n	80023fa <HAL_TIM_IC_CaptureCallback+0x272>
            		channel_mag_2 = ((float) period_rc_2 / (float) cycle_rc_2  - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 8002388:	4b46      	ldr	r3, [pc, #280]	@ (80024a4 <HAL_TIM_IC_CaptureCallback+0x31c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002394:	4b42      	ldr	r3, [pc, #264]	@ (80024a0 <HAL_TIM_IC_CaptureCallback+0x318>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023a8:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8002460 <HAL_TIM_IC_CaptureCallback+0x2d8>
 80023ac:	ee37 6b46 	vsub.f64	d6, d7, d6
 80023b0:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8002468 <HAL_TIM_IC_CaptureCallback+0x2e0>
 80023b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023bc:	4b3a      	ldr	r3, [pc, #232]	@ (80024a8 <HAL_TIM_IC_CaptureCallback+0x320>)
 80023be:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp.RUD = (channel_mag_2 - 0.5) * 2 * RC_FULLSCALE;
 80023c2:	4b39      	ldr	r3, [pc, #228]	@ (80024a8 <HAL_TIM_IC_CaptureCallback+0x320>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023cc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80023d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023d4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80023d8:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8002470 <HAL_TIM_IC_CaptureCallback+0x2e8>
 80023dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023e4:	4b28      	ldr	r3, [pc, #160]	@ (8002488 <HAL_TIM_IC_CaptureCallback+0x300>)
 80023e6:	edc3 7a03 	vstr	s15, [r3, #12]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80023ea:	2100      	movs	r1, #0
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f004 fdb7 	bl	8006f60 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80023f2:	2104      	movs	r1, #4
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f004 fbf1 	bl	8006bdc <HAL_TIM_IC_Stop>

            	}
            }
    if (htim->Instance == TIM15)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2b      	ldr	r2, [pc, #172]	@ (80024ac <HAL_TIM_IC_CaptureCallback+0x324>)
 8002400:	4293      	cmp	r3, r2
 8002402:	f040 8088 	bne.w	8002516 <HAL_TIM_IC_CaptureCallback+0x38e>
            {

                cycle_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002406:	2100      	movs	r1, #0
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f005 fa59 	bl	80078c0 <HAL_TIM_ReadCapturedValue>
 800240e:	4603      	mov	r3, r0
 8002410:	4a27      	ldr	r2, [pc, #156]	@ (80024b0 <HAL_TIM_IC_CaptureCallback+0x328>)
 8002412:	6013      	str	r3, [r2, #0]
                period_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8002414:	2104      	movs	r1, #4
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f005 fa52 	bl	80078c0 <HAL_TIM_ReadCapturedValue>
 800241c:	4602      	mov	r2, r0
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	461a      	mov	r2, r3
 8002428:	4b22      	ldr	r3, [pc, #136]	@ (80024b4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 800242a:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_3 > 4300 && cycle_rc_3 < 4380 && period_rc_3 > 0 && cycle_rc_3 > period_rc_3) {
 800242c:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <HAL_TIM_IC_CaptureCallback+0x328>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8002434:	4293      	cmp	r3, r2
 8002436:	d96e      	bls.n	8002516 <HAL_TIM_IC_CaptureCallback+0x38e>
 8002438:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <HAL_TIM_IC_CaptureCallback+0x328>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f241 121b 	movw	r2, #4379	@ 0x111b
 8002440:	4293      	cmp	r3, r2
 8002442:	d868      	bhi.n	8002516 <HAL_TIM_IC_CaptureCallback+0x38e>
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d064      	beq.n	8002516 <HAL_TIM_IC_CaptureCallback+0x38e>
 800244c:	4b18      	ldr	r3, [pc, #96]	@ (80024b0 <HAL_TIM_IC_CaptureCallback+0x328>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d95e      	bls.n	8002516 <HAL_TIM_IC_CaptureCallback+0x38e>
 8002458:	e02e      	b.n	80024b8 <HAL_TIM_IC_CaptureCallback+0x330>
 800245a:	bf00      	nop
 800245c:	f3af 8000 	nop.w
 8002460:	147ae148 	.word	0x147ae148
 8002464:	3fe147ae 	.word	0x3fe147ae
 8002468:	ae147ae0 	.word	0xae147ae0
 800246c:	3fdae147 	.word	0x3fdae147
 8002470:	00000000 	.word	0x00000000
 8002474:	408f4000 	.word	0x408f4000
 8002478:	40000400 	.word	0x40000400
 800247c:	24000414 	.word	0x24000414
 8002480:	24000424 	.word	0x24000424
 8002484:	24000434 	.word	0x24000434
 8002488:	24000334 	.word	0x24000334
 800248c:	40000800 	.word	0x40000800
 8002490:	24000418 	.word	0x24000418
 8002494:	24000428 	.word	0x24000428
 8002498:	24000438 	.word	0x24000438
 800249c:	40000c00 	.word	0x40000c00
 80024a0:	2400041c 	.word	0x2400041c
 80024a4:	2400042c 	.word	0x2400042c
 80024a8:	2400043c 	.word	0x2400043c
 80024ac:	40014000 	.word	0x40014000
 80024b0:	24000420 	.word	0x24000420
 80024b4:	24000430 	.word	0x24000430
            		channel_mag_3 = ((float) period_rc_3 / (float) cycle_rc_3  - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 80024b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024d8:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8002520 <HAL_TIM_IC_CaptureCallback+0x398>
 80024dc:	ee37 6b46 	vsub.f64	d6, d7, d6
 80024e0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8002528 <HAL_TIM_IC_CaptureCallback+0x3a0>
 80024e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 80024ee:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp.THR =  channel_mag_3 * RC_FULLSCALE;
 80024f2:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800253c <HAL_TIM_IC_CaptureCallback+0x3b4>
 80024fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002500:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <HAL_TIM_IC_CaptureCallback+0x3b8>)
 8002502:	edc3 7a02 	vstr	s15, [r3, #8]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8002506:	2100      	movs	r1, #0
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f004 fd29 	bl	8006f60 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 800250e:	2104      	movs	r1, #4
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f004 fb63 	bl	8006bdc <HAL_TIM_IC_Stop>

            	}
            }


}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	147ae148 	.word	0x147ae148
 8002524:	3fe147ae 	.word	0x3fe147ae
 8002528:	ae147ae0 	.word	0xae147ae0
 800252c:	3fdae147 	.word	0x3fdae147
 8002530:	24000430 	.word	0x24000430
 8002534:	24000420 	.word	0x24000420
 8002538:	24000440 	.word	0x24000440
 800253c:	447a0000 	.word	0x447a0000
 8002540:	24000334 	.word	0x24000334

08002544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <Error_Handler+0x8>

08002550 <fast_inv_sqrt>:
}

// Fast inverse square-root

float fast_inv_sqrt(float x) 
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800255a:	edd7 7a01 	vldr	s15, [r7, #4]
 800255e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002562:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002566:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800256e:	f107 0310 	add.w	r3, r7, #16
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	105a      	asrs	r2, r3, #1
 800257a:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <fast_inv_sqrt+0x74>)
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002588:	ed97 7a04 	vldr	s14, [r7, #16]
 800258c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002594:	edd7 7a04 	vldr	s15, [r7, #16]
 8002598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80025a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ac:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	ee07 3a90 	vmov	s15, r3
}
 80025b6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	5f3759df 	.word	0x5f3759df

080025c8 <set_motor_pwm>:


extern TIM_HandleTypeDef htim1;

void set_motor_pwm(uint16_t motor_pwm[])
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if (motor_pwm[0] >= MOTOR_MAX_PWM)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	2bdc      	cmp	r3, #220	@ 0xdc
 80025d6:	d904      	bls.n	80025e2 <set_motor_pwm+0x1a>
	  htim1.Instance->CCR1 = MOTOR_MAX_PWM;
 80025d8:	4b33      	ldr	r3, [pc, #204]	@ (80026a8 <set_motor_pwm+0xe0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	22dd      	movs	r2, #221	@ 0xdd
 80025de:	635a      	str	r2, [r3, #52]	@ 0x34
 80025e0:	e00d      	b.n	80025fe <set_motor_pwm+0x36>
  else if (motor_pwm[0] <= MOTOR_MIN_PWM)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	2b69      	cmp	r3, #105	@ 0x69
 80025e8:	d804      	bhi.n	80025f4 <set_motor_pwm+0x2c>
	  htim1.Instance->CCR1 = MOTOR_MIN_PWM;
 80025ea:	4b2f      	ldr	r3, [pc, #188]	@ (80026a8 <set_motor_pwm+0xe0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2269      	movs	r2, #105	@ 0x69
 80025f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025f2:	e004      	b.n	80025fe <set_motor_pwm+0x36>
  else
	  htim1.Instance->CCR1 = motor_pwm[0] ;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	881a      	ldrh	r2, [r3, #0]
 80025f8:	4b2b      	ldr	r3, [pc, #172]	@ (80026a8 <set_motor_pwm+0xe0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	635a      	str	r2, [r3, #52]	@ 0x34
  
  if (motor_pwm[1] >= MOTOR_MAX_PWM)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3302      	adds	r3, #2
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	2bdc      	cmp	r3, #220	@ 0xdc
 8002606:	d904      	bls.n	8002612 <set_motor_pwm+0x4a>
	  htim1.Instance->CCR2 = MOTOR_MAX_PWM;
 8002608:	4b27      	ldr	r3, [pc, #156]	@ (80026a8 <set_motor_pwm+0xe0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	22dd      	movs	r2, #221	@ 0xdd
 800260e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002610:	e00f      	b.n	8002632 <set_motor_pwm+0x6a>
  else if (motor_pwm[1] <= MOTOR_MIN_PWM)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3302      	adds	r3, #2
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	2b69      	cmp	r3, #105	@ 0x69
 800261a:	d804      	bhi.n	8002626 <set_motor_pwm+0x5e>
	  htim1.Instance->CCR2 = MOTOR_MIN_PWM;
 800261c:	4b22      	ldr	r3, [pc, #136]	@ (80026a8 <set_motor_pwm+0xe0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2269      	movs	r2, #105	@ 0x69
 8002622:	639a      	str	r2, [r3, #56]	@ 0x38
 8002624:	e005      	b.n	8002632 <set_motor_pwm+0x6a>
  else
	  htim1.Instance->CCR2 =  motor_pwm[1] ;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3302      	adds	r3, #2
 800262a:	881a      	ldrh	r2, [r3, #0]
 800262c:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <set_motor_pwm+0xe0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	639a      	str	r2, [r3, #56]	@ 0x38
  
  if (motor_pwm[2] >= MOTOR_MAX_PWM)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	2bdc      	cmp	r3, #220	@ 0xdc
 800263a:	d904      	bls.n	8002646 <set_motor_pwm+0x7e>
	  htim1.Instance->CCR3 = MOTOR_MAX_PWM;
 800263c:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <set_motor_pwm+0xe0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	22dd      	movs	r2, #221	@ 0xdd
 8002642:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002644:	e00f      	b.n	8002666 <set_motor_pwm+0x9e>
  else if (motor_pwm[2] <= MOTOR_MIN_PWM)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	2b69      	cmp	r3, #105	@ 0x69
 800264e:	d804      	bhi.n	800265a <set_motor_pwm+0x92>
	  htim1.Instance->CCR3 = MOTOR_MIN_PWM;
 8002650:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <set_motor_pwm+0xe0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2269      	movs	r2, #105	@ 0x69
 8002656:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002658:	e005      	b.n	8002666 <set_motor_pwm+0x9e>
  else
	  htim1.Instance->CCR3 =  motor_pwm[2] ;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <set_motor_pwm+0xe0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  if (motor_pwm[3] >= MOTOR_MAX_PWM)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3306      	adds	r3, #6
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	2bdc      	cmp	r3, #220	@ 0xdc
 800266e:	d904      	bls.n	800267a <set_motor_pwm+0xb2>
	  htim1.Instance->CCR4 = MOTOR_MAX_PWM;
 8002670:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <set_motor_pwm+0xe0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	22dd      	movs	r2, #221	@ 0xdd
 8002676:	641a      	str	r2, [r3, #64]	@ 0x40
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM)
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM;
  else
	  htim1.Instance->CCR4 = motor_pwm[3] ;
}
 8002678:	e00f      	b.n	800269a <set_motor_pwm+0xd2>
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3306      	adds	r3, #6
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	2b69      	cmp	r3, #105	@ 0x69
 8002682:	d804      	bhi.n	800268e <set_motor_pwm+0xc6>
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM;
 8002684:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <set_motor_pwm+0xe0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2269      	movs	r2, #105	@ 0x69
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800268c:	e005      	b.n	800269a <set_motor_pwm+0xd2>
	  htim1.Instance->CCR4 = motor_pwm[3] ;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3306      	adds	r3, #6
 8002692:	881a      	ldrh	r2, [r3, #0]
 8002694:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <set_motor_pwm+0xe0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	24000124 	.word	0x24000124

080026ac <set_motor_pwm_zero>:


void set_motor_pwm_zero(uint16_t motor_pwm[])
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  motor_pwm[0] = 0;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	801a      	strh	r2, [r3, #0]
  motor_pwm[1] = 0;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3302      	adds	r3, #2
 80026be:	2200      	movs	r2, #0
 80026c0:	801a      	strh	r2, [r3, #0]
  motor_pwm[2] = 0;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2200      	movs	r2, #0
 80026c8:	801a      	strh	r2, [r3, #0]
  motor_pwm[3] = 0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3306      	adds	r3, #6
 80026ce:	2200      	movs	r2, #0
 80026d0:	801a      	strh	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <quat_to_euler>:

/*
 * Convert Quaternion to Euler Angle
 */
void quat_to_euler(Quaternion *qr, Euler *ea)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b08e      	sub	sp, #56	@ 0x38
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
    float q0q0, q1q1, q2q2, q3q3;
    float dq0, dq1, dq2;
    float dq1q3, dq0q2/*, dq1q2*/;
    float dq0q1, dq2q3/*, dq0q3*/;

    q0q0 = qr->q0*qr->q0;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	ed93 7a00 	vldr	s14, [r3]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    q1q1 = qr->q1*qr->q1;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	edd3 7a01 	vldr	s15, [r3, #4]
 8002708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q2q2 = qr->q2*qr->q2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	ed93 7a02 	vldr	s14, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	edd3 7a02 	vldr	s15, [r3, #8]
 800271c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002720:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    q3q3 = qr->q3*qr->q3;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	ed93 7a03 	vldr	s14, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002734:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    dq0 = 2*qr->q0;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002742:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    dq1 = 2*qr->q1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	edd3 7a01 	vldr	s15, [r3, #4]
 800274c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002750:	edc7 7a08 	vstr	s15, [r7, #32]
    dq2 = 2*qr->q2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	edd3 7a02 	vldr	s15, [r3, #8]
 800275a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800275e:	edc7 7a07 	vstr	s15, [r7, #28]
    //dq1q2 = dq1 * qr->q2;
    dq1q3 = dq1 * qr->q3;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	edd3 7a03 	vldr	s15, [r3, #12]
 8002768:	ed97 7a08 	vldr	s14, [r7, #32]
 800276c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002770:	edc7 7a06 	vstr	s15, [r7, #24]
    dq0q2 = dq0 * qr->q2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	edd3 7a02 	vldr	s15, [r3, #8]
 800277a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	edc7 7a05 	vstr	s15, [r7, #20]
    //dq0q3 = dq0 * qr->q3;
    dq0q1 = dq0 * qr->q1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	edd3 7a01 	vldr	s15, [r3, #4]
 800278c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002794:	edc7 7a04 	vstr	s15, [r7, #16]
    dq2q3 = dq2 * qr->q3;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	edd3 7a03 	vldr	s15, [r3, #12]
 800279e:	ed97 7a07 	vldr	s14, [r7, #28]
 80027a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a6:	edc7 7a03 	vstr	s15, [r7, #12]

    ea->thx = atan2(dq0q1+dq2q3, q0q0+q3q3-q1q1-q2q2);
 80027aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80027ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80027b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027ba:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 80027be:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80027c2:	ee36 6a26 	vadd.f32	s12, s12, s13
 80027c6:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80027ca:	ee36 6a66 	vsub.f32	s12, s12, s13
 80027ce:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80027d2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80027d6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80027da:	eeb0 1b46 	vmov.f64	d1, d6
 80027de:	eeb0 0b47 	vmov.f64	d0, d7
 80027e2:	f007 faa3 	bl	8009d2c <atan2>
 80027e6:	eeb0 7b40 	vmov.f64	d7, d0
 80027ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	edc3 7a00 	vstr	s15, [r3]
    ea->thy = asin(dq0q2-dq1q3);
 80027f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80027f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80027fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002804:	eeb0 0b47 	vmov.f64	d0, d7
 8002808:	f007 fa64 	bl	8009cd4 <asin>
 800280c:	eeb0 7b40 	vmov.f64	d7, d0
 8002810:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	edc3 7a01 	vstr	s15, [r3, #4]
    
    

    //ea->thz = atan2(dq1q2+dq0q3, q0q0+q1q1-q2q2-q3q3);

}
 800281a:	bf00      	nop
 800281c:	3738      	adds	r7, #56	@ 0x38
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <get_target_euler>:
const float max_yaw_rad = PI*YAW_MAX_DEG/180.0f;
int t1;


void get_target_euler(Euler *euler_rc, Radio *rc_comm)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
    t1 = rc_comm->ELE;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	edd3 7a01 	vldr	s15, [r3, #4]
 8002834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002838:	ee17 2a90 	vmov	r2, s15
 800283c:	4b49      	ldr	r3, [pc, #292]	@ (8002964 <get_target_euler+0x140>)
 800283e:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8002840:	4b48      	ldr	r3, [pc, #288]	@ (8002964 <get_target_euler+0x140>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002848:	dd04      	ble.n	8002854 <get_target_euler+0x30>
        t1 = RC_FULLSCALE;
 800284a:	4b46      	ldr	r3, [pc, #280]	@ (8002964 <get_target_euler+0x140>)
 800284c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e007      	b.n	8002864 <get_target_euler+0x40>
    else if (t1 < -RC_FULLSCALE)
 8002854:	4b43      	ldr	r3, [pc, #268]	@ (8002964 <get_target_euler+0x140>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800285c:	da02      	bge.n	8002864 <get_target_euler+0x40>
        t1 = - RC_FULLSCALE;
 800285e:	4b41      	ldr	r3, [pc, #260]	@ (8002964 <get_target_euler+0x140>)
 8002860:	4a41      	ldr	r2, [pc, #260]	@ (8002968 <get_target_euler+0x144>)
 8002862:	601a      	str	r2, [r3, #0]
    euler_rc->thx = -t1 * max_pitch_rad / RC_FULLSCALE;
 8002864:	4b3f      	ldr	r3, [pc, #252]	@ (8002964 <get_target_euler+0x140>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	425b      	negs	r3, r3
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002872:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800296c <get_target_euler+0x148>
 8002876:	ee27 7a87 	vmul.f32	s14, s15, s14
 800287a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002970 <get_target_euler+0x14c>
 800287e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm->AIL;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	edd3 7a00 	vldr	s15, [r3]
 800288e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002892:	ee17 2a90 	vmov	r2, s15
 8002896:	4b33      	ldr	r3, [pc, #204]	@ (8002964 <get_target_euler+0x140>)
 8002898:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 800289a:	4b32      	ldr	r3, [pc, #200]	@ (8002964 <get_target_euler+0x140>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028a2:	dd04      	ble.n	80028ae <get_target_euler+0x8a>
        t1 = RC_FULLSCALE;
 80028a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002964 <get_target_euler+0x140>)
 80028a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e007      	b.n	80028be <get_target_euler+0x9a>
    else if (t1 < -RC_FULLSCALE)
 80028ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <get_target_euler+0x140>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80028b6:	da02      	bge.n	80028be <get_target_euler+0x9a>
        t1 = - RC_FULLSCALE;
 80028b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002964 <get_target_euler+0x140>)
 80028ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002968 <get_target_euler+0x144>)
 80028bc:	601a      	str	r2, [r3, #0]
    euler_rc->thy = -t1 * max_roll_rad / RC_FULLSCALE;
 80028be:	4b29      	ldr	r3, [pc, #164]	@ (8002964 <get_target_euler+0x140>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	425b      	negs	r3, r3
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028cc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800296c <get_target_euler+0x148>
 80028d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028d4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002970 <get_target_euler+0x14c>
 80028d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	edc3 7a01 	vstr	s15, [r3, #4]

    t1 = rc_comm->RUD;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80028e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ec:	ee17 2a90 	vmov	r2, s15
 80028f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <get_target_euler+0x140>)
 80028f2:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 80028f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <get_target_euler+0x140>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028fc:	dd04      	ble.n	8002908 <get_target_euler+0xe4>
        t1 = RC_FULLSCALE;
 80028fe:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <get_target_euler+0x140>)
 8002900:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e007      	b.n	8002918 <get_target_euler+0xf4>
    else if (t1 < -RC_FULLSCALE)
 8002908:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <get_target_euler+0x140>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8002910:	da02      	bge.n	8002918 <get_target_euler+0xf4>
        t1 = - RC_FULLSCALE;
 8002912:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <get_target_euler+0x140>)
 8002914:	4a14      	ldr	r2, [pc, #80]	@ (8002968 <get_target_euler+0x144>)
 8002916:	601a      	str	r2, [r3, #0]

    if(t1 > YAW_DEAD_THR)
 8002918:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <get_target_euler+0x140>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002920:	dd0a      	ble.n	8002938 <get_target_euler+0x114>
    {
        euler_rc->thz = euler_rc->thz + max_yaw_rad;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	edd3 7a02 	vldr	s15, [r3, #8]
 8002928:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002974 <get_target_euler+0x150>
 800292c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    else if(t1 < -YAW_DEAD_THR)
    {
        euler_rc->thz = euler_rc->thz - max_yaw_rad;
    }
}
 8002936:	e00e      	b.n	8002956 <get_target_euler+0x132>
    else if(t1 < -YAW_DEAD_THR)
 8002938:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <get_target_euler+0x140>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002940:	da09      	bge.n	8002956 <get_target_euler+0x132>
        euler_rc->thz = euler_rc->thz - max_yaw_rad;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	edd3 7a02 	vldr	s15, [r3, #8]
 8002948:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002974 <get_target_euler+0x150>
 800294c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	24000444 	.word	0x24000444
 8002968:	fffffc18 	.word	0xfffffc18
 800296c:	3f060a92 	.word	0x3f060a92
 8002970:	447a0000 	.word	0x447a0000
 8002974:	3cab92a6 	.word	0x3cab92a6

08002978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_MspInit+0x30>)
 8002980:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002984:	4a08      	ldr	r2, [pc, #32]	@ (80029a8 <HAL_MspInit+0x30>)
 8002986:	f043 0302 	orr.w	r3, r3, #2
 800298a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_MspInit+0x30>)
 8002990:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	58024400 	.word	0x58024400

080029ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b0ba      	sub	sp, #232	@ 0xe8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	22c0      	movs	r2, #192	@ 0xc0
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f007 f94f 	bl	8009c70 <memset>
  if(hi2c->Instance==I2C1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a27      	ldr	r2, [pc, #156]	@ (8002a74 <HAL_I2C_MspInit+0xc8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d146      	bne.n	8002a6a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029dc:	f04f 0208 	mov.w	r2, #8
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	4618      	mov	r0, r3
 80029f4:	f001 ffe6 	bl	80049c4 <HAL_RCCEx_PeriphCLKConfig>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80029fe:	f7ff fda1 	bl	8002544 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a02:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <HAL_I2C_MspInit+0xcc>)
 8002a04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a08:	4a1b      	ldr	r2, [pc, #108]	@ (8002a78 <HAL_I2C_MspInit+0xcc>)
 8002a0a:	f043 0302 	orr.w	r3, r3, #2
 8002a0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a12:	4b19      	ldr	r3, [pc, #100]	@ (8002a78 <HAL_I2C_MspInit+0xcc>)
 8002a14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002a20:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002a24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a28:	2312      	movs	r3, #18
 8002a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a3a:	2304      	movs	r3, #4
 8002a3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a44:	4619      	mov	r1, r3
 8002a46:	480d      	ldr	r0, [pc, #52]	@ (8002a7c <HAL_I2C_MspInit+0xd0>)
 8002a48:	f000 fca6 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a78 <HAL_I2C_MspInit+0xcc>)
 8002a4e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002a52:	4a09      	ldr	r2, [pc, #36]	@ (8002a78 <HAL_I2C_MspInit+0xcc>)
 8002a54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a58:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_I2C_MspInit+0xcc>)
 8002a5e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	37e8      	adds	r7, #232	@ 0xe8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40005400 	.word	0x40005400
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	58020400 	.word	0x58020400

08002a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b090      	sub	sp, #64	@ 0x40
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a82      	ldr	r2, [pc, #520]	@ (8002ca8 <HAL_TIM_Base_MspInit+0x228>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aa2:	4b82      	ldr	r3, [pc, #520]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002aa4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002aa8:	4a80      	ldr	r2, [pc, #512]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002ab2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002ab4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002ac0:	e0ee      	b.n	8002ca0 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM3)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7a      	ldr	r2, [pc, #488]	@ (8002cb0 <HAL_TIM_Base_MspInit+0x230>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d136      	bne.n	8002b3a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002acc:	4b77      	ldr	r3, [pc, #476]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002ace:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ad2:	4a76      	ldr	r2, [pc, #472]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002adc:	4b73      	ldr	r3, [pc, #460]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002ade:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4b70      	ldr	r3, [pc, #448]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002aec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002af0:	4a6e      	ldr	r2, [pc, #440]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002afa:	4b6c      	ldr	r3, [pc, #432]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	623b      	str	r3, [r7, #32]
 8002b06:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b08:	2310      	movs	r3, #16
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b20:	4619      	mov	r1, r3
 8002b22:	4864      	ldr	r0, [pc, #400]	@ (8002cb4 <HAL_TIM_Base_MspInit+0x234>)
 8002b24:	f000 fc38 	bl	8003398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	201d      	movs	r0, #29
 8002b2e:	f000 fbfe 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b32:	201d      	movs	r0, #29
 8002b34:	f000 fc15 	bl	8003362 <HAL_NVIC_EnableIRQ>
}
 8002b38:	e0b2      	b.n	8002ca0 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM4)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cb8 <HAL_TIM_Base_MspInit+0x238>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d136      	bne.n	8002bb2 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b44:	4b59      	ldr	r3, [pc, #356]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002b46:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b4a:	4a58      	ldr	r2, [pc, #352]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002b54:	4b55      	ldr	r3, [pc, #340]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002b56:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	61fb      	str	r3, [r7, #28]
 8002b60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b62:	4b52      	ldr	r3, [pc, #328]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002b64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b68:	4a50      	ldr	r2, [pc, #320]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b72:	4b4e      	ldr	r3, [pc, #312]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002b74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b80:	2340      	movs	r3, #64	@ 0x40
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b90:	2302      	movs	r3, #2
 8002b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4846      	ldr	r0, [pc, #280]	@ (8002cb4 <HAL_TIM_Base_MspInit+0x234>)
 8002b9c:	f000 fbfc 	bl	8003398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	201e      	movs	r0, #30
 8002ba6:	f000 fbc2 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002baa:	201e      	movs	r0, #30
 8002bac:	f000 fbd9 	bl	8003362 <HAL_NVIC_EnableIRQ>
}
 8002bb0:	e076      	b.n	8002ca0 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM5)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a41      	ldr	r2, [pc, #260]	@ (8002cbc <HAL_TIM_Base_MspInit+0x23c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d136      	bne.n	8002c2a <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002bbe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bc2:	4a3a      	ldr	r2, [pc, #232]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002bcc:	4b37      	ldr	r3, [pc, #220]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002bce:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	4b34      	ldr	r3, [pc, #208]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002bdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002be0:	4a32      	ldr	r2, [pc, #200]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002bea:	4b30      	ldr	r3, [pc, #192]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002bec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c10:	4619      	mov	r1, r3
 8002c12:	482b      	ldr	r0, [pc, #172]	@ (8002cc0 <HAL_TIM_Base_MspInit+0x240>)
 8002c14:	f000 fbc0 	bl	8003398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	2032      	movs	r0, #50	@ 0x32
 8002c1e:	f000 fb86 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c22:	2032      	movs	r0, #50	@ 0x32
 8002c24:	f000 fb9d 	bl	8003362 <HAL_NVIC_EnableIRQ>
}
 8002c28:	e03a      	b.n	8002ca0 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM15)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a25      	ldr	r2, [pc, #148]	@ (8002cc4 <HAL_TIM_Base_MspInit+0x244>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d135      	bne.n	8002ca0 <HAL_TIM_Base_MspInit+0x220>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002c34:	4b1d      	ldr	r3, [pc, #116]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002c36:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c40:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002c44:	4b19      	ldr	r3, [pc, #100]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002c46:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c52:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002c54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002c5a:	f043 0310 	orr.w	r3, r3, #16
 8002c5e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002c62:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_TIM_Base_MspInit+0x22c>)
 8002c64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c70:	2320      	movs	r3, #32
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002c80:	2304      	movs	r3, #4
 8002c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c88:	4619      	mov	r1, r3
 8002c8a:	480f      	ldr	r0, [pc, #60]	@ (8002cc8 <HAL_TIM_Base_MspInit+0x248>)
 8002c8c:	f000 fb84 	bl	8003398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2100      	movs	r1, #0
 8002c94:	2074      	movs	r0, #116	@ 0x74
 8002c96:	f000 fb4a 	bl	800332e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002c9a:	2074      	movs	r0, #116	@ 0x74
 8002c9c:	f000 fb61 	bl	8003362 <HAL_NVIC_EnableIRQ>
}
 8002ca0:	bf00      	nop
 8002ca2:	3740      	adds	r7, #64	@ 0x40
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	40000400 	.word	0x40000400
 8002cb4:	58020400 	.word	0x58020400
 8002cb8:	40000800 	.word	0x40000800
 8002cbc:	40000c00 	.word	0x40000c00
 8002cc0:	58020000 	.word	0x58020000
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	58021000 	.word	0x58021000

08002ccc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 030c 	add.w	r3, r7, #12
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a13      	ldr	r2, [pc, #76]	@ (8002d38 <HAL_TIM_MspPostInit+0x6c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d11f      	bne.n	8002d2e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cee:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <HAL_TIM_MspPostInit+0x70>)
 8002cf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cf4:	4a11      	ldr	r2, [pc, #68]	@ (8002d3c <HAL_TIM_MspPostInit+0x70>)
 8002cf6:	f043 0310 	orr.w	r3, r3, #16
 8002cfa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002d3c <HAL_TIM_MspPostInit+0x70>)
 8002d00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002d0c:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002d10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	2302      	movs	r3, #2
 8002d14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	4619      	mov	r1, r3
 8002d28:	4805      	ldr	r0, [pc, #20]	@ (8002d40 <HAL_TIM_MspPostInit+0x74>)
 8002d2a:	f000 fb35 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d2e:	bf00      	nop
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	58024400 	.word	0x58024400
 8002d40:	58021000 	.word	0x58021000

08002d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b0ba      	sub	sp, #232	@ 0xe8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	22c0      	movs	r2, #192	@ 0xc0
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f006 ff83 	bl	8009c70 <memset>
  if(huart->Instance==USART3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a27      	ldr	r2, [pc, #156]	@ (8002e0c <HAL_UART_MspInit+0xc8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d146      	bne.n	8002e02 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002d74:	f04f 0202 	mov.w	r2, #2
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d86:	f107 0310 	add.w	r3, r7, #16
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 fe1a 	bl	80049c4 <HAL_RCCEx_PeriphCLKConfig>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002d96:	f7ff fbd5 	bl	8002544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <HAL_UART_MspInit+0xcc>)
 8002d9c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002da0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e10 <HAL_UART_MspInit+0xcc>)
 8002da2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002daa:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <HAL_UART_MspInit+0xcc>)
 8002dac:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002db0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db8:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <HAL_UART_MspInit+0xcc>)
 8002dba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002dbe:	4a14      	ldr	r2, [pc, #80]	@ (8002e10 <HAL_UART_MspInit+0xcc>)
 8002dc0:	f043 0308 	orr.w	r3, r3, #8
 8002dc4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002dc8:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <HAL_UART_MspInit+0xcc>)
 8002dca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002dd6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	2302      	movs	r3, #2
 8002de0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002df0:	2307      	movs	r3, #7
 8002df2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4805      	ldr	r0, [pc, #20]	@ (8002e14 <HAL_UART_MspInit+0xd0>)
 8002dfe:	f000 facb 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e02:	bf00      	nop
 8002e04:	37e8      	adds	r7, #232	@ 0xe8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40004800 	.word	0x40004800
 8002e10:	58024400 	.word	0x58024400
 8002e14:	58020c00 	.word	0x58020c00

08002e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e1c:	bf00      	nop
 8002e1e:	e7fd      	b.n	8002e1c <NMI_Handler+0x4>

08002e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <HardFault_Handler+0x4>

08002e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e2c:	bf00      	nop
 8002e2e:	e7fd      	b.n	8002e2c <MemManage_Handler+0x4>

08002e30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e34:	bf00      	nop
 8002e36:	e7fd      	b.n	8002e34 <BusFault_Handler+0x4>

08002e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <UsageFault_Handler+0x4>

08002e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e6e:	f000 f93f 	bl	80030f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <TIM3_IRQHandler+0x10>)
 8002e7e:	f004 f92d 	bl	80070dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	24000170 	.word	0x24000170

08002e8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e90:	4802      	ldr	r0, [pc, #8]	@ (8002e9c <TIM4_IRQHandler+0x10>)
 8002e92:	f004 f923 	bl	80070dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	240001bc 	.word	0x240001bc

08002ea0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ea4:	4802      	ldr	r0, [pc, #8]	@ (8002eb0 <TIM5_IRQHandler+0x10>)
 8002ea6:	f004 f919 	bl	80070dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	24000208 	.word	0x24000208

08002eb4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002eb8:	4802      	ldr	r0, [pc, #8]	@ (8002ec4 <TIM15_IRQHandler+0x10>)
 8002eba:	f004 f90f 	bl	80070dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	24000254 	.word	0x24000254

08002ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ecc:	4b32      	ldr	r3, [pc, #200]	@ (8002f98 <SystemInit+0xd0>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed2:	4a31      	ldr	r2, [pc, #196]	@ (8002f98 <SystemInit+0xd0>)
 8002ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002edc:	4b2f      	ldr	r3, [pc, #188]	@ (8002f9c <SystemInit+0xd4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d807      	bhi.n	8002ef8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8002f9c <SystemInit+0xd4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 030f 	bic.w	r3, r3, #15
 8002ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f9c <SystemInit+0xd4>)
 8002ef2:	f043 0303 	orr.w	r3, r3, #3
 8002ef6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ef8:	4b29      	ldr	r3, [pc, #164]	@ (8002fa0 <SystemInit+0xd8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a28      	ldr	r2, [pc, #160]	@ (8002fa0 <SystemInit+0xd8>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f04:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <SystemInit+0xd8>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f0a:	4b25      	ldr	r3, [pc, #148]	@ (8002fa0 <SystemInit+0xd8>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4924      	ldr	r1, [pc, #144]	@ (8002fa0 <SystemInit+0xd8>)
 8002f10:	4b24      	ldr	r3, [pc, #144]	@ (8002fa4 <SystemInit+0xdc>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f16:	4b21      	ldr	r3, [pc, #132]	@ (8002f9c <SystemInit+0xd4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f22:	4b1e      	ldr	r3, [pc, #120]	@ (8002f9c <SystemInit+0xd4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 030f 	bic.w	r3, r3, #15
 8002f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f9c <SystemInit+0xd4>)
 8002f2c:	f043 0303 	orr.w	r3, r3, #3
 8002f30:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002f32:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <SystemInit+0xd8>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <SystemInit+0xd8>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002f3e:	4b18      	ldr	r3, [pc, #96]	@ (8002fa0 <SystemInit+0xd8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f44:	4b16      	ldr	r3, [pc, #88]	@ (8002fa0 <SystemInit+0xd8>)
 8002f46:	4a18      	ldr	r2, [pc, #96]	@ (8002fa8 <SystemInit+0xe0>)
 8002f48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f4a:	4b15      	ldr	r3, [pc, #84]	@ (8002fa0 <SystemInit+0xd8>)
 8002f4c:	4a17      	ldr	r2, [pc, #92]	@ (8002fac <SystemInit+0xe4>)
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f50:	4b13      	ldr	r3, [pc, #76]	@ (8002fa0 <SystemInit+0xd8>)
 8002f52:	4a17      	ldr	r2, [pc, #92]	@ (8002fb0 <SystemInit+0xe8>)
 8002f54:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f56:	4b12      	ldr	r3, [pc, #72]	@ (8002fa0 <SystemInit+0xd8>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f5c:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <SystemInit+0xd8>)
 8002f5e:	4a14      	ldr	r2, [pc, #80]	@ (8002fb0 <SystemInit+0xe8>)
 8002f60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <SystemInit+0xd8>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f68:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <SystemInit+0xd8>)
 8002f6a:	4a11      	ldr	r2, [pc, #68]	@ (8002fb0 <SystemInit+0xe8>)
 8002f6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <SystemInit+0xd8>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa0 <SystemInit+0xd8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a09      	ldr	r2, [pc, #36]	@ (8002fa0 <SystemInit+0xd8>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f80:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <SystemInit+0xd8>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f86:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <SystemInit+0xec>)
 8002f88:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002f8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00
 8002f9c:	52002000 	.word	0x52002000
 8002fa0:	58024400 	.word	0x58024400
 8002fa4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002fa8:	02020200 	.word	0x02020200
 8002fac:	01ff0000 	.word	0x01ff0000
 8002fb0:	01010280 	.word	0x01010280
 8002fb4:	52004000 	.word	0x52004000

08002fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ff0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fbc:	f7ff ff84 	bl	8002ec8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fc0:	480c      	ldr	r0, [pc, #48]	@ (8002ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fc2:	490d      	ldr	r1, [pc, #52]	@ (8002ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc8:	e002      	b.n	8002fd0 <LoopCopyDataInit>

08002fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fce:	3304      	adds	r3, #4

08002fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd4:	d3f9      	bcc.n	8002fca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fd8:	4c0a      	ldr	r4, [pc, #40]	@ (8003004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fdc:	e001      	b.n	8002fe2 <LoopFillZerobss>

08002fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe0:	3204      	adds	r2, #4

08002fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe4:	d3fb      	bcc.n	8002fde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002fe6:	f006 fe51 	bl	8009c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fea:	f7fe f9cd 	bl	8001388 <main>
  bx  lr
 8002fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ff0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002ff4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ff8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002ffc:	0800a3d0 	.word	0x0800a3d0
  ldr r2, =_sbss
 8003000:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8003004:	24000584 	.word	0x24000584

08003008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <ADC_IRQHandler>
	...

0800300c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003012:	2003      	movs	r0, #3
 8003014:	f000 f980 	bl	8003318 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003018:	f001 fafe 	bl	8004618 <HAL_RCC_GetSysClockFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b15      	ldr	r3, [pc, #84]	@ (8003074 <HAL_Init+0x68>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	4913      	ldr	r1, [pc, #76]	@ (8003078 <HAL_Init+0x6c>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
 8003034:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003036:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <HAL_Init+0x68>)
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4a0e      	ldr	r2, [pc, #56]	@ (8003078 <HAL_Init+0x6c>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
 800304c:	4a0b      	ldr	r2, [pc, #44]	@ (800307c <HAL_Init+0x70>)
 800304e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003050:	4a0b      	ldr	r2, [pc, #44]	@ (8003080 <HAL_Init+0x74>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003056:	2000      	movs	r0, #0
 8003058:	f000 f814 	bl	8003084 <HAL_InitTick>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e002      	b.n	800306c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003066:	f7ff fc87 	bl	8002978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	58024400 	.word	0x58024400
 8003078:	0800a310 	.word	0x0800a310
 800307c:	24000008 	.word	0x24000008
 8003080:	24000004 	.word	0x24000004

08003084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800308c:	4b15      	ldr	r3, [pc, #84]	@ (80030e4 <HAL_InitTick+0x60>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e021      	b.n	80030dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003098:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <HAL_InitTick+0x64>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <HAL_InitTick+0x60>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	4619      	mov	r1, r3
 80030a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f965 	bl	800337e <HAL_SYSTICK_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00e      	b.n	80030dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b0f      	cmp	r3, #15
 80030c2:	d80a      	bhi.n	80030da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030c4:	2200      	movs	r2, #0
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030cc:	f000 f92f 	bl	800332e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030d0:	4a06      	ldr	r2, [pc, #24]	@ (80030ec <HAL_InitTick+0x68>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e000      	b.n	80030dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	24000010 	.word	0x24000010
 80030e8:	24000004 	.word	0x24000004
 80030ec:	2400000c 	.word	0x2400000c

080030f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030f4:	4b06      	ldr	r3, [pc, #24]	@ (8003110 <HAL_IncTick+0x20>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <HAL_IncTick+0x24>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <HAL_IncTick+0x24>)
 8003102:	6013      	str	r3, [r2, #0]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	24000010 	.word	0x24000010
 8003114:	24000448 	.word	0x24000448

08003118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return uwTick;
 800311c:	4b03      	ldr	r3, [pc, #12]	@ (800312c <HAL_GetTick+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	24000448 	.word	0x24000448

08003130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003138:	f7ff ffee 	bl	8003118 <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003148:	d005      	beq.n	8003156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800314a:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <HAL_Delay+0x44>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003156:	bf00      	nop
 8003158:	f7ff ffde 	bl	8003118 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	429a      	cmp	r2, r3
 8003166:	d8f7      	bhi.n	8003158 <HAL_Delay+0x28>
  {
  }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	24000010 	.word	0x24000010

08003178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <__NVIC_SetPriorityGrouping+0x40>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003194:	4013      	ands	r3, r2
 8003196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <__NVIC_SetPriorityGrouping+0x44>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031a6:	4a04      	ldr	r2, [pc, #16]	@ (80031b8 <__NVIC_SetPriorityGrouping+0x40>)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	60d3      	str	r3, [r2, #12]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000ed00 	.word	0xe000ed00
 80031bc:	05fa0000 	.word	0x05fa0000

080031c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c4:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <__NVIC_GetPriorityGrouping+0x18>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f003 0307 	and.w	r3, r3, #7
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	db0b      	blt.n	8003206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	4907      	ldr	r1, [pc, #28]	@ (8003214 <__NVIC_EnableIRQ+0x38>)
 80031f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2001      	movs	r0, #1
 80031fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e100 	.word	0xe000e100

08003218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	6039      	str	r1, [r7, #0]
 8003222:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003224:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003228:	2b00      	cmp	r3, #0
 800322a:	db0a      	blt.n	8003242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	b2da      	uxtb	r2, r3
 8003230:	490c      	ldr	r1, [pc, #48]	@ (8003264 <__NVIC_SetPriority+0x4c>)
 8003232:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003236:	0112      	lsls	r2, r2, #4
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	440b      	add	r3, r1
 800323c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003240:	e00a      	b.n	8003258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	4908      	ldr	r1, [pc, #32]	@ (8003268 <__NVIC_SetPriority+0x50>)
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	3b04      	subs	r3, #4
 8003250:	0112      	lsls	r2, r2, #4
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	440b      	add	r3, r1
 8003256:	761a      	strb	r2, [r3, #24]
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000e100 	.word	0xe000e100
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	@ 0x24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f1c3 0307 	rsb	r3, r3, #7
 8003286:	2b04      	cmp	r3, #4
 8003288:	bf28      	it	cs
 800328a:	2304      	movcs	r3, #4
 800328c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3304      	adds	r3, #4
 8003292:	2b06      	cmp	r3, #6
 8003294:	d902      	bls.n	800329c <NVIC_EncodePriority+0x30>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3b03      	subs	r3, #3
 800329a:	e000      	b.n	800329e <NVIC_EncodePriority+0x32>
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	401a      	ands	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	fa01 f303 	lsl.w	r3, r1, r3
 80032be:	43d9      	mvns	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c4:	4313      	orrs	r3, r2
         );
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3724      	adds	r7, #36	@ 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032e4:	d301      	bcc.n	80032ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00f      	b.n	800330a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <SysTick_Config+0x40>)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f2:	210f      	movs	r1, #15
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032f8:	f7ff ff8e 	bl	8003218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032fc:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <SysTick_Config+0x40>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003302:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <SysTick_Config+0x40>)
 8003304:	2207      	movs	r2, #7
 8003306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	e000e010 	.word	0xe000e010

08003318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ff29 	bl	8003178 <__NVIC_SetPriorityGrouping>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800333c:	f7ff ff40 	bl	80031c0 <__NVIC_GetPriorityGrouping>
 8003340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	6978      	ldr	r0, [r7, #20]
 8003348:	f7ff ff90 	bl	800326c <NVIC_EncodePriority>
 800334c:	4602      	mov	r2, r0
 800334e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff5f 	bl	8003218 <__NVIC_SetPriority>
}
 800335a:	bf00      	nop
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800336c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ff33 	bl	80031dc <__NVIC_EnableIRQ>
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ffa4 	bl	80032d4 <SysTick_Config>
 800338c:	4603      	mov	r3, r0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	@ 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033a6:	4b89      	ldr	r3, [pc, #548]	@ (80035cc <HAL_GPIO_Init+0x234>)
 80033a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033aa:	e194      	b.n	80036d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8186 	beq.w	80036d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d005      	beq.n	80033dc <HAL_GPIO_Init+0x44>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d130      	bne.n	800343e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003412:	2201      	movs	r2, #1
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 0201 	and.w	r2, r3, #1
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b03      	cmp	r3, #3
 8003448:	d017      	beq.n	800347a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d123      	bne.n	80034ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	08da      	lsrs	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3208      	adds	r2, #8
 800348e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80e0 	beq.w	80036d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003510:	4b2f      	ldr	r3, [pc, #188]	@ (80035d0 <HAL_GPIO_Init+0x238>)
 8003512:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003516:	4a2e      	ldr	r2, [pc, #184]	@ (80035d0 <HAL_GPIO_Init+0x238>)
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8003520:	4b2b      	ldr	r3, [pc, #172]	@ (80035d0 <HAL_GPIO_Init+0x238>)
 8003522:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352e:	4a29      	ldr	r2, [pc, #164]	@ (80035d4 <HAL_GPIO_Init+0x23c>)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3302      	adds	r3, #2
 8003536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	220f      	movs	r2, #15
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a20      	ldr	r2, [pc, #128]	@ (80035d8 <HAL_GPIO_Init+0x240>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d052      	beq.n	8003600 <HAL_GPIO_Init+0x268>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1f      	ldr	r2, [pc, #124]	@ (80035dc <HAL_GPIO_Init+0x244>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d031      	beq.n	80035c6 <HAL_GPIO_Init+0x22e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1e      	ldr	r2, [pc, #120]	@ (80035e0 <HAL_GPIO_Init+0x248>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d02b      	beq.n	80035c2 <HAL_GPIO_Init+0x22a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <HAL_GPIO_Init+0x24c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d025      	beq.n	80035be <HAL_GPIO_Init+0x226>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1c      	ldr	r2, [pc, #112]	@ (80035e8 <HAL_GPIO_Init+0x250>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01f      	beq.n	80035ba <HAL_GPIO_Init+0x222>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1b      	ldr	r2, [pc, #108]	@ (80035ec <HAL_GPIO_Init+0x254>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d019      	beq.n	80035b6 <HAL_GPIO_Init+0x21e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1a      	ldr	r2, [pc, #104]	@ (80035f0 <HAL_GPIO_Init+0x258>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_GPIO_Init+0x21a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a19      	ldr	r2, [pc, #100]	@ (80035f4 <HAL_GPIO_Init+0x25c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00d      	beq.n	80035ae <HAL_GPIO_Init+0x216>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a18      	ldr	r2, [pc, #96]	@ (80035f8 <HAL_GPIO_Init+0x260>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d007      	beq.n	80035aa <HAL_GPIO_Init+0x212>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <HAL_GPIO_Init+0x264>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_GPIO_Init+0x20e>
 80035a2:	2309      	movs	r3, #9
 80035a4:	e02d      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035a6:	230a      	movs	r3, #10
 80035a8:	e02b      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035aa:	2308      	movs	r3, #8
 80035ac:	e029      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035ae:	2307      	movs	r3, #7
 80035b0:	e027      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035b2:	2306      	movs	r3, #6
 80035b4:	e025      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035b6:	2305      	movs	r3, #5
 80035b8:	e023      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035ba:	2304      	movs	r3, #4
 80035bc:	e021      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035be:	2303      	movs	r3, #3
 80035c0:	e01f      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e01d      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e01b      	b.n	8003602 <HAL_GPIO_Init+0x26a>
 80035ca:	bf00      	nop
 80035cc:	58000080 	.word	0x58000080
 80035d0:	58024400 	.word	0x58024400
 80035d4:	58000400 	.word	0x58000400
 80035d8:	58020000 	.word	0x58020000
 80035dc:	58020400 	.word	0x58020400
 80035e0:	58020800 	.word	0x58020800
 80035e4:	58020c00 	.word	0x58020c00
 80035e8:	58021000 	.word	0x58021000
 80035ec:	58021400 	.word	0x58021400
 80035f0:	58021800 	.word	0x58021800
 80035f4:	58021c00 	.word	0x58021c00
 80035f8:	58022000 	.word	0x58022000
 80035fc:	58022400 	.word	0x58022400
 8003600:	2300      	movs	r3, #0
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	f002 0203 	and.w	r2, r2, #3
 8003608:	0092      	lsls	r2, r2, #2
 800360a:	4093      	lsls	r3, r2
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003612:	4938      	ldr	r1, [pc, #224]	@ (80036f4 <HAL_GPIO_Init+0x35c>)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	3302      	adds	r3, #2
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003646:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	43db      	mvns	r3, r3
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	3301      	adds	r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f47f ae63 	bne.w	80033ac <HAL_GPIO_Init+0x14>
  }
}
 80036e6:	bf00      	nop
 80036e8:	bf00      	nop
 80036ea:	3724      	adds	r7, #36	@ 0x24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	58000400 	.word	0x58000400

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003714:	e003      	b.n	800371e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	041a      	lsls	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e08b      	b.n	8003856 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff f92a 	bl	80029ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	@ 0x24
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800377c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800378c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d107      	bne.n	80037a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	e006      	b.n	80037b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d108      	bne.n	80037ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	e007      	b.n	80037de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003860 <HAL_I2C_Init+0x134>)
 80037ea:	430b      	orrs	r3, r1
 80037ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69d9      	ldr	r1, [r3, #28]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	02008000 	.word	0x02008000

08003864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	d138      	bne.n	80038ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003884:	2302      	movs	r3, #2
 8003886:	e032      	b.n	80038ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	@ 0x24
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b20      	cmp	r3, #32
 800390e:	d139      	bne.n	8003984 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800391a:	2302      	movs	r3, #2
 800391c:	e033      	b.n	8003986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2224      	movs	r2, #36	@ 0x24
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800394c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800399c:	4b29      	ldr	r3, [pc, #164]	@ (8003a44 <HAL_PWREx_ConfigSupply+0xb0>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d00a      	beq.n	80039be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039a8:	4b26      	ldr	r3, [pc, #152]	@ (8003a44 <HAL_PWREx_ConfigSupply+0xb0>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d001      	beq.n	80039ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e040      	b.n	8003a3c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e03e      	b.n	8003a3c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039be:	4b21      	ldr	r3, [pc, #132]	@ (8003a44 <HAL_PWREx_ConfigSupply+0xb0>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80039c6:	491f      	ldr	r1, [pc, #124]	@ (8003a44 <HAL_PWREx_ConfigSupply+0xb0>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039ce:	f7ff fba3 	bl	8003118 <HAL_GetTick>
 80039d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039d4:	e009      	b.n	80039ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039d6:	f7ff fb9f 	bl	8003118 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039e4:	d901      	bls.n	80039ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e028      	b.n	8003a3c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039ea:	4b16      	ldr	r3, [pc, #88]	@ (8003a44 <HAL_PWREx_ConfigSupply+0xb0>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039f6:	d1ee      	bne.n	80039d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b1e      	cmp	r3, #30
 80039fc:	d008      	beq.n	8003a10 <HAL_PWREx_ConfigSupply+0x7c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a02:	d005      	beq.n	8003a10 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b1d      	cmp	r3, #29
 8003a08:	d002      	beq.n	8003a10 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b2d      	cmp	r3, #45	@ 0x2d
 8003a0e:	d114      	bne.n	8003a3a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a10:	f7ff fb82 	bl	8003118 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a16:	e009      	b.n	8003a2c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a18:	f7ff fb7e 	bl	8003118 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a26:	d901      	bls.n	8003a2c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e007      	b.n	8003a3c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a38:	d1ee      	bne.n	8003a18 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	58024800 	.word	0x58024800

08003a48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	@ 0x30
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f000 bc1f 	b.w	800429a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80b3 	beq.w	8003bd0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a6a:	4b95      	ldr	r3, [pc, #596]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a74:	4b92      	ldr	r3, [pc, #584]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d007      	beq.n	8003a90 <HAL_RCC_OscConfig+0x48>
 8003a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a82:	2b18      	cmp	r3, #24
 8003a84:	d112      	bne.n	8003aac <HAL_RCC_OscConfig+0x64>
 8003a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a88:	f003 0303 	and.w	r3, r3, #3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d10d      	bne.n	8003aac <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	4b8b      	ldr	r3, [pc, #556]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8098 	beq.w	8003bce <HAL_RCC_OscConfig+0x186>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 8093 	bne.w	8003bce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e3f6      	b.n	800429a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab4:	d106      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x7c>
 8003ab6:	4b82      	ldr	r3, [pc, #520]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a81      	ldr	r2, [pc, #516]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e058      	b.n	8003b76 <HAL_RCC_OscConfig+0x12e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d112      	bne.n	8003af2 <HAL_RCC_OscConfig+0xaa>
 8003acc:	4b7c      	ldr	r3, [pc, #496]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a7b      	ldr	r2, [pc, #492]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	4b79      	ldr	r3, [pc, #484]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a78      	ldr	r2, [pc, #480]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003ade:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	4b76      	ldr	r3, [pc, #472]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a75      	ldr	r2, [pc, #468]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	e041      	b.n	8003b76 <HAL_RCC_OscConfig+0x12e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003afa:	d112      	bne.n	8003b22 <HAL_RCC_OscConfig+0xda>
 8003afc:	4b70      	ldr	r3, [pc, #448]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6f      	ldr	r2, [pc, #444]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b6d      	ldr	r3, [pc, #436]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a6c      	ldr	r2, [pc, #432]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b0e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a69      	ldr	r2, [pc, #420]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]
 8003b20:	e029      	b.n	8003b76 <HAL_RCC_OscConfig+0x12e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003b2a:	d112      	bne.n	8003b52 <HAL_RCC_OscConfig+0x10a>
 8003b2c:	4b64      	ldr	r3, [pc, #400]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a63      	ldr	r2, [pc, #396]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b61      	ldr	r3, [pc, #388]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a60      	ldr	r2, [pc, #384]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b5e      	ldr	r3, [pc, #376]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a5d      	ldr	r2, [pc, #372]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	e011      	b.n	8003b76 <HAL_RCC_OscConfig+0x12e>
 8003b52:	4b5b      	ldr	r3, [pc, #364]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a5a      	ldr	r2, [pc, #360]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b58      	ldr	r3, [pc, #352]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a57      	ldr	r2, [pc, #348]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b55      	ldr	r3, [pc, #340]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a54      	ldr	r2, [pc, #336]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b70:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d013      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7ff facb 	bl	8003118 <HAL_GetTick>
 8003b82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b86:	f7ff fac7 	bl	8003118 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b64      	cmp	r3, #100	@ 0x64
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e380      	b.n	800429a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b98:	4b49      	ldr	r3, [pc, #292]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x13e>
 8003ba4:	e014      	b.n	8003bd0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7ff fab7 	bl	8003118 <HAL_GetTick>
 8003baa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bae:	f7ff fab3 	bl	8003118 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b64      	cmp	r3, #100	@ 0x64
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e36c      	b.n	800429a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f0      	bne.n	8003bae <HAL_RCC_OscConfig+0x166>
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 808c 	beq.w	8003cf6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bde:	4b38      	ldr	r3, [pc, #224]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003be6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003be8:	4b35      	ldr	r3, [pc, #212]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_RCC_OscConfig+0x1bc>
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2b18      	cmp	r3, #24
 8003bf8:	d137      	bne.n	8003c6a <HAL_RCC_OscConfig+0x222>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d132      	bne.n	8003c6a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c04:	4b2e      	ldr	r3, [pc, #184]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_RCC_OscConfig+0x1d4>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e33e      	b.n	800429a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c1c:	4b28      	ldr	r3, [pc, #160]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 0219 	bic.w	r2, r3, #25
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4925      	ldr	r1, [pc, #148]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7ff fa73 	bl	8003118 <HAL_GetTick>
 8003c32:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c36:	f7ff fa6f 	bl	8003118 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e328      	b.n	800429a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c48:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c54:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	061b      	lsls	r3, r3, #24
 8003c62:	4917      	ldr	r1, [pc, #92]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c68:	e045      	b.n	8003cf6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d028      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c72:	4b13      	ldr	r3, [pc, #76]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 0219 	bic.w	r2, r3, #25
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	4910      	ldr	r1, [pc, #64]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7ff fa48 	bl	8003118 <HAL_GetTick>
 8003c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8c:	f7ff fa44 	bl	8003118 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e2fd      	b.n	800429a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c9e:	4b08      	ldr	r3, [pc, #32]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003caa:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	4901      	ldr	r1, [pc, #4]	@ (8003cc0 <HAL_RCC_OscConfig+0x278>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	604b      	str	r3, [r1, #4]
 8003cbe:	e01a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x2ae>
 8003cc0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc4:	4b97      	ldr	r3, [pc, #604]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a96      	ldr	r2, [pc, #600]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7ff fa22 	bl	8003118 <HAL_GetTick>
 8003cd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd8:	f7ff fa1e 	bl	8003118 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e2d7      	b.n	800429a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003cea:	4b8e      	ldr	r3, [pc, #568]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0310 	and.w	r3, r3, #16
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d06a      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d02:	4b88      	ldr	r3, [pc, #544]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d0c:	4b85      	ldr	r3, [pc, #532]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d007      	beq.n	8003d28 <HAL_RCC_OscConfig+0x2e0>
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b18      	cmp	r3, #24
 8003d1c:	d11b      	bne.n	8003d56 <HAL_RCC_OscConfig+0x30e>
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d116      	bne.n	8003d56 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d28:	4b7e      	ldr	r3, [pc, #504]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_OscConfig+0x2f8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	2b80      	cmp	r3, #128	@ 0x80
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e2ac      	b.n	800429a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d40:	4b78      	ldr	r3, [pc, #480]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	061b      	lsls	r3, r3, #24
 8003d4e:	4975      	ldr	r1, [pc, #468]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d54:	e040      	b.n	8003dd8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d023      	beq.n	8003da6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003d5e:	4b71      	ldr	r3, [pc, #452]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a70      	ldr	r2, [pc, #448]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7ff f9d5 	bl	8003118 <HAL_GetTick>
 8003d6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d72:	f7ff f9d1 	bl	8003118 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e28a      	b.n	800429a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d84:	4b67      	ldr	r3, [pc, #412]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d90:	4b64      	ldr	r3, [pc, #400]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	061b      	lsls	r3, r3, #24
 8003d9e:	4961      	ldr	r1, [pc, #388]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60cb      	str	r3, [r1, #12]
 8003da4:	e018      	b.n	8003dd8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003da6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a5e      	ldr	r2, [pc, #376]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db2:	f7ff f9b1 	bl	8003118 <HAL_GetTick>
 8003db6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dba:	f7ff f9ad 	bl	8003118 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e266      	b.n	800429a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003dcc:	4b55      	ldr	r3, [pc, #340]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d036      	beq.n	8003e52 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d019      	beq.n	8003e20 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dec:	4b4d      	ldr	r3, [pc, #308]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df0:	4a4c      	ldr	r2, [pc, #304]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df8:	f7ff f98e 	bl	8003118 <HAL_GetTick>
 8003dfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e00:	f7ff f98a 	bl	8003118 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e243      	b.n	800429a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e12:	4b44      	ldr	r3, [pc, #272]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x3b8>
 8003e1e:	e018      	b.n	8003e52 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e20:	4b40      	ldr	r3, [pc, #256]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e24:	4a3f      	ldr	r2, [pc, #252]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2c:	f7ff f974 	bl	8003118 <HAL_GetTick>
 8003e30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e34:	f7ff f970 	bl	8003118 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e229      	b.n	800429a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e46:	4b37      	ldr	r3, [pc, #220]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d036      	beq.n	8003ecc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d019      	beq.n	8003e9a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e66:	4b2f      	ldr	r3, [pc, #188]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003e6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e72:	f7ff f951 	bl	8003118 <HAL_GetTick>
 8003e76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e7a:	f7ff f94d 	bl	8003118 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e206      	b.n	800429a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e8c:	4b25      	ldr	r3, [pc, #148]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x432>
 8003e98:	e018      	b.n	8003ecc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e9a:	4b22      	ldr	r3, [pc, #136]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003ea0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ea4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ea6:	f7ff f937 	bl	8003118 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eae:	f7ff f933 	bl	8003118 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1ec      	b.n	800429a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ec0:	4b18      	ldr	r3, [pc, #96]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80af 	beq.w	8004038 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003eda:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <HAL_RCC_OscConfig+0x4e0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a12      	ldr	r2, [pc, #72]	@ (8003f28 <HAL_RCC_OscConfig+0x4e0>)
 8003ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ee6:	f7ff f917 	bl	8003118 <HAL_GetTick>
 8003eea:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eee:	f7ff f913 	bl	8003118 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b64      	cmp	r3, #100	@ 0x64
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e1cc      	b.n	800429a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <HAL_RCC_OscConfig+0x4e0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10b      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4e4>
 8003f14:	4b03      	ldr	r3, [pc, #12]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f18:	4a02      	ldr	r2, [pc, #8]	@ (8003f24 <HAL_RCC_OscConfig+0x4dc>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f20:	e05b      	b.n	8003fda <HAL_RCC_OscConfig+0x592>
 8003f22:	bf00      	nop
 8003f24:	58024400 	.word	0x58024400
 8003f28:	58024800 	.word	0x58024800
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d112      	bne.n	8003f5a <HAL_RCC_OscConfig+0x512>
 8003f34:	4b9d      	ldr	r3, [pc, #628]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f38:	4a9c      	ldr	r2, [pc, #624]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f40:	4b9a      	ldr	r3, [pc, #616]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f44:	4a99      	ldr	r2, [pc, #612]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f4c:	4b97      	ldr	r3, [pc, #604]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f50:	4a96      	ldr	r2, [pc, #600]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f52:	f023 0304 	bic.w	r3, r3, #4
 8003f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f58:	e03f      	b.n	8003fda <HAL_RCC_OscConfig+0x592>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d112      	bne.n	8003f88 <HAL_RCC_OscConfig+0x540>
 8003f62:	4b92      	ldr	r3, [pc, #584]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f66:	4a91      	ldr	r2, [pc, #580]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f68:	f043 0304 	orr.w	r3, r3, #4
 8003f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6e:	4b8f      	ldr	r3, [pc, #572]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f72:	4a8e      	ldr	r2, [pc, #568]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7a:	4b8c      	ldr	r3, [pc, #560]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	4a8b      	ldr	r2, [pc, #556]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f86:	e028      	b.n	8003fda <HAL_RCC_OscConfig+0x592>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b85      	cmp	r3, #133	@ 0x85
 8003f8e:	d112      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x56e>
 8003f90:	4b86      	ldr	r3, [pc, #536]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f94:	4a85      	ldr	r2, [pc, #532]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f96:	f043 0304 	orr.w	r3, r3, #4
 8003f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9c:	4b83      	ldr	r3, [pc, #524]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4a82      	ldr	r2, [pc, #520]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa8:	4b80      	ldr	r3, [pc, #512]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fac:	4a7f      	ldr	r2, [pc, #508]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb4:	e011      	b.n	8003fda <HAL_RCC_OscConfig+0x592>
 8003fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	4a7c      	ldr	r2, [pc, #496]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	4a79      	ldr	r2, [pc, #484]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fce:	4b77      	ldr	r3, [pc, #476]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	4a76      	ldr	r2, [pc, #472]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8003fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fd8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d015      	beq.n	800400e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe2:	f7ff f899 	bl	8003118 <HAL_GetTick>
 8003fe6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7ff f895 	bl	8003118 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e14c      	b.n	800429a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004000:	4b6a      	ldr	r3, [pc, #424]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ee      	beq.n	8003fea <HAL_RCC_OscConfig+0x5a2>
 800400c:	e014      	b.n	8004038 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400e:	f7ff f883 	bl	8003118 <HAL_GetTick>
 8004012:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004014:	e00a      	b.n	800402c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004016:	f7ff f87f 	bl	8003118 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e136      	b.n	800429a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800402c:	4b5f      	ldr	r3, [pc, #380]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ee      	bne.n	8004016 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 812b 	beq.w	8004298 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004042:	4b5a      	ldr	r3, [pc, #360]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800404a:	2b18      	cmp	r3, #24
 800404c:	f000 80bb 	beq.w	80041c6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	2b02      	cmp	r3, #2
 8004056:	f040 8095 	bne.w	8004184 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405a:	4b54      	ldr	r3, [pc, #336]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a53      	ldr	r2, [pc, #332]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004060:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7ff f857 	bl	8003118 <HAL_GetTick>
 800406a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7ff f853 	bl	8003118 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e10c      	b.n	800429a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004080:	4b4a      	ldr	r3, [pc, #296]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800408c:	4b47      	ldr	r3, [pc, #284]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 800408e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004090:	4b47      	ldr	r3, [pc, #284]	@ (80041b0 <HAL_RCC_OscConfig+0x768>)
 8004092:	4013      	ands	r3, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800409c:	0112      	lsls	r2, r2, #4
 800409e:	430a      	orrs	r2, r1
 80040a0:	4942      	ldr	r1, [pc, #264]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	628b      	str	r3, [r1, #40]	@ 0x28
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	3b01      	subs	r3, #1
 80040ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b4:	3b01      	subs	r3, #1
 80040b6:	025b      	lsls	r3, r3, #9
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	3b01      	subs	r3, #1
 80040c2:	041b      	lsls	r3, r3, #16
 80040c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ce:	3b01      	subs	r3, #1
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040d6:	4935      	ldr	r1, [pc, #212]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80040dc:	4b33      	ldr	r3, [pc, #204]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	4a32      	ldr	r2, [pc, #200]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040e8:	4b30      	ldr	r3, [pc, #192]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 80040ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ec:	4b31      	ldr	r3, [pc, #196]	@ (80041b4 <HAL_RCC_OscConfig+0x76c>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040f4:	00d2      	lsls	r2, r2, #3
 80040f6:	492d      	ldr	r1, [pc, #180]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80040fc:	4b2b      	ldr	r3, [pc, #172]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	f023 020c 	bic.w	r2, r3, #12
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	4928      	ldr	r1, [pc, #160]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 800410a:	4313      	orrs	r3, r2
 800410c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800410e:	4b27      	ldr	r3, [pc, #156]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004112:	f023 0202 	bic.w	r2, r3, #2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411a:	4924      	ldr	r1, [pc, #144]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 800411c:	4313      	orrs	r3, r2
 800411e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004120:	4b22      	ldr	r3, [pc, #136]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004124:	4a21      	ldr	r2, [pc, #132]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800412a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800412c:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	4a1e      	ldr	r2, [pc, #120]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004138:	4b1c      	ldr	r3, [pc, #112]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 800413e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004144:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004148:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a15      	ldr	r2, [pc, #84]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800415a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fe ffdc 	bl	8003118 <HAL_GetTick>
 8004160:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004164:	f7fe ffd8 	bl	8003118 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e091      	b.n	800429a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004176:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x71c>
 8004182:	e089      	b.n	8004298 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004184:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a08      	ldr	r2, [pc, #32]	@ (80041ac <HAL_RCC_OscConfig+0x764>)
 800418a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800418e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fe ffc2 	bl	8003118 <HAL_GetTick>
 8004194:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004196:	e00f      	b.n	80041b8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fe ffbe 	bl	8003118 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d908      	bls.n	80041b8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e077      	b.n	800429a <HAL_RCC_OscConfig+0x852>
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
 80041b0:	fffffc0c 	.word	0xfffffc0c
 80041b4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041b8:	4b3a      	ldr	r3, [pc, #232]	@ (80042a4 <HAL_RCC_OscConfig+0x85c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e9      	bne.n	8004198 <HAL_RCC_OscConfig+0x750>
 80041c4:	e068      	b.n	8004298 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80041c6:	4b37      	ldr	r3, [pc, #220]	@ (80042a4 <HAL_RCC_OscConfig+0x85c>)
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041cc:	4b35      	ldr	r3, [pc, #212]	@ (80042a4 <HAL_RCC_OscConfig+0x85c>)
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d031      	beq.n	800423e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f003 0203 	and.w	r2, r3, #3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d12a      	bne.n	800423e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	091b      	lsrs	r3, r3, #4
 80041ec:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d122      	bne.n	800423e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d11a      	bne.n	800423e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	0a5b      	lsrs	r3, r3, #9
 800420c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004214:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d111      	bne.n	800423e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	0c1b      	lsrs	r3, r3, #16
 800421e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004228:	429a      	cmp	r2, r3
 800422a:	d108      	bne.n	800423e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	0e1b      	lsrs	r3, r3, #24
 8004230:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004238:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d001      	beq.n	8004242 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e02b      	b.n	800429a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004242:	4b18      	ldr	r3, [pc, #96]	@ (80042a4 <HAL_RCC_OscConfig+0x85c>)
 8004244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004246:	08db      	lsrs	r3, r3, #3
 8004248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800424c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	429a      	cmp	r2, r3
 8004256:	d01f      	beq.n	8004298 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004258:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <HAL_RCC_OscConfig+0x85c>)
 800425a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425c:	4a11      	ldr	r2, [pc, #68]	@ (80042a4 <HAL_RCC_OscConfig+0x85c>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004264:	f7fe ff58 	bl	8003118 <HAL_GetTick>
 8004268:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800426a:	bf00      	nop
 800426c:	f7fe ff54 	bl	8003118 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	4293      	cmp	r3, r2
 8004276:	d0f9      	beq.n	800426c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004278:	4b0a      	ldr	r3, [pc, #40]	@ (80042a4 <HAL_RCC_OscConfig+0x85c>)
 800427a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <HAL_RCC_OscConfig+0x860>)
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004284:	00d2      	lsls	r2, r2, #3
 8004286:	4907      	ldr	r1, [pc, #28]	@ (80042a4 <HAL_RCC_OscConfig+0x85c>)
 8004288:	4313      	orrs	r3, r2
 800428a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800428c:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <HAL_RCC_OscConfig+0x85c>)
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	4a04      	ldr	r2, [pc, #16]	@ (80042a4 <HAL_RCC_OscConfig+0x85c>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3730      	adds	r7, #48	@ 0x30
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	58024400 	.word	0x58024400
 80042a8:	ffff0007 	.word	0xffff0007

080042ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e19c      	b.n	80045fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042c0:	4b8a      	ldr	r3, [pc, #552]	@ (80044ec <HAL_RCC_ClockConfig+0x240>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d910      	bls.n	80042f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ce:	4b87      	ldr	r3, [pc, #540]	@ (80044ec <HAL_RCC_ClockConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 020f 	bic.w	r2, r3, #15
 80042d6:	4985      	ldr	r1, [pc, #532]	@ (80044ec <HAL_RCC_ClockConfig+0x240>)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	4313      	orrs	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	4b83      	ldr	r3, [pc, #524]	@ (80044ec <HAL_RCC_ClockConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e184      	b.n	80045fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	4b7b      	ldr	r3, [pc, #492]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004308:	429a      	cmp	r2, r3
 800430a:	d908      	bls.n	800431e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800430c:	4b78      	ldr	r3, [pc, #480]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	4975      	ldr	r1, [pc, #468]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800431a:	4313      	orrs	r3, r2
 800431c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d010      	beq.n	800434c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	4b70      	ldr	r3, [pc, #448]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004336:	429a      	cmp	r2, r3
 8004338:	d908      	bls.n	800434c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800433a:	4b6d      	ldr	r3, [pc, #436]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	496a      	ldr	r1, [pc, #424]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 8004348:	4313      	orrs	r3, r2
 800434a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d010      	beq.n	800437a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	4b64      	ldr	r3, [pc, #400]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004364:	429a      	cmp	r2, r3
 8004366:	d908      	bls.n	800437a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004368:	4b61      	ldr	r3, [pc, #388]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	495e      	ldr	r1, [pc, #376]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 8004376:	4313      	orrs	r3, r2
 8004378:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d010      	beq.n	80043a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	4b59      	ldr	r3, [pc, #356]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004392:	429a      	cmp	r2, r3
 8004394:	d908      	bls.n	80043a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004396:	4b56      	ldr	r3, [pc, #344]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	4953      	ldr	r1, [pc, #332]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d010      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	4b4d      	ldr	r3, [pc, #308]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d908      	bls.n	80043d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c4:	4b4a      	ldr	r3, [pc, #296]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f023 020f 	bic.w	r2, r3, #15
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4947      	ldr	r1, [pc, #284]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d055      	beq.n	800448e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043e2:	4b43      	ldr	r3, [pc, #268]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4940      	ldr	r1, [pc, #256]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d107      	bne.n	800440c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043fc:	4b3c      	ldr	r3, [pc, #240]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d121      	bne.n	800444c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0f6      	b.n	80045fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d107      	bne.n	8004424 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004414:	4b36      	ldr	r3, [pc, #216]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d115      	bne.n	800444c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0ea      	b.n	80045fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800442c:	4b30      	ldr	r3, [pc, #192]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e0de      	b.n	80045fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800443c:	4b2c      	ldr	r3, [pc, #176]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0d6      	b.n	80045fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800444c:	4b28      	ldr	r3, [pc, #160]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f023 0207 	bic.w	r2, r3, #7
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4925      	ldr	r1, [pc, #148]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800445a:	4313      	orrs	r3, r2
 800445c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800445e:	f7fe fe5b 	bl	8003118 <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004464:	e00a      	b.n	800447c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004466:	f7fe fe57 	bl	8003118 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e0be      	b.n	80045fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447c:	4b1c      	ldr	r3, [pc, #112]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	429a      	cmp	r2, r3
 800448c:	d1eb      	bne.n	8004466 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d010      	beq.n	80044bc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d208      	bcs.n	80044bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044aa:	4b11      	ldr	r3, [pc, #68]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f023 020f 	bic.w	r2, r3, #15
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	490e      	ldr	r1, [pc, #56]	@ (80044f0 <HAL_RCC_ClockConfig+0x244>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <HAL_RCC_ClockConfig+0x240>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d214      	bcs.n	80044f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b08      	ldr	r3, [pc, #32]	@ (80044ec <HAL_RCC_ClockConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 020f 	bic.w	r2, r3, #15
 80044d2:	4906      	ldr	r1, [pc, #24]	@ (80044ec <HAL_RCC_ClockConfig+0x240>)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044da:	4b04      	ldr	r3, [pc, #16]	@ (80044ec <HAL_RCC_ClockConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e086      	b.n	80045fa <HAL_RCC_ClockConfig+0x34e>
 80044ec:	52002000 	.word	0x52002000
 80044f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d010      	beq.n	8004522 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	4b3f      	ldr	r3, [pc, #252]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800450c:	429a      	cmp	r2, r3
 800450e:	d208      	bcs.n	8004522 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004510:	4b3c      	ldr	r3, [pc, #240]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	4939      	ldr	r1, [pc, #228]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 800451e:	4313      	orrs	r3, r2
 8004520:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d010      	beq.n	8004550 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	4b34      	ldr	r3, [pc, #208]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800453a:	429a      	cmp	r2, r3
 800453c:	d208      	bcs.n	8004550 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800453e:	4b31      	ldr	r3, [pc, #196]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	492e      	ldr	r1, [pc, #184]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 800454c:	4313      	orrs	r3, r2
 800454e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d010      	beq.n	800457e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	4b28      	ldr	r3, [pc, #160]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004568:	429a      	cmp	r2, r3
 800456a:	d208      	bcs.n	800457e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800456c:	4b25      	ldr	r3, [pc, #148]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	4922      	ldr	r1, [pc, #136]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 800457a:	4313      	orrs	r3, r2
 800457c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d010      	beq.n	80045ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	4b1d      	ldr	r3, [pc, #116]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004596:	429a      	cmp	r2, r3
 8004598:	d208      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800459a:	4b1a      	ldr	r3, [pc, #104]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4917      	ldr	r1, [pc, #92]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80045ac:	f000 f834 	bl	8004618 <HAL_RCC_GetSysClockFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b14      	ldr	r3, [pc, #80]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	4912      	ldr	r1, [pc, #72]	@ (8004608 <HAL_RCC_ClockConfig+0x35c>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
 80045c8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80045ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004604 <HAL_RCC_ClockConfig+0x358>)
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <HAL_RCC_ClockConfig+0x35c>)
 80045d4:	5cd3      	ldrb	r3, [r2, r3]
 80045d6:	f003 031f 	and.w	r3, r3, #31
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
 80045e0:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <HAL_RCC_ClockConfig+0x360>)
 80045e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004610 <HAL_RCC_ClockConfig+0x364>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80045ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <HAL_RCC_ClockConfig+0x368>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fd48 	bl	8003084 <HAL_InitTick>
 80045f4:	4603      	mov	r3, r0
 80045f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	58024400 	.word	0x58024400
 8004608:	0800a310 	.word	0x0800a310
 800460c:	24000008 	.word	0x24000008
 8004610:	24000004 	.word	0x24000004
 8004614:	2400000c 	.word	0x2400000c

08004618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004618:	b480      	push	{r7}
 800461a:	b089      	sub	sp, #36	@ 0x24
 800461c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800461e:	4bb3      	ldr	r3, [pc, #716]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004626:	2b18      	cmp	r3, #24
 8004628:	f200 8155 	bhi.w	80048d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800462c:	a201      	add	r2, pc, #4	@ (adr r2, 8004634 <HAL_RCC_GetSysClockFreq+0x1c>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004699 	.word	0x08004699
 8004638:	080048d7 	.word	0x080048d7
 800463c:	080048d7 	.word	0x080048d7
 8004640:	080048d7 	.word	0x080048d7
 8004644:	080048d7 	.word	0x080048d7
 8004648:	080048d7 	.word	0x080048d7
 800464c:	080048d7 	.word	0x080048d7
 8004650:	080048d7 	.word	0x080048d7
 8004654:	080046bf 	.word	0x080046bf
 8004658:	080048d7 	.word	0x080048d7
 800465c:	080048d7 	.word	0x080048d7
 8004660:	080048d7 	.word	0x080048d7
 8004664:	080048d7 	.word	0x080048d7
 8004668:	080048d7 	.word	0x080048d7
 800466c:	080048d7 	.word	0x080048d7
 8004670:	080048d7 	.word	0x080048d7
 8004674:	080046c5 	.word	0x080046c5
 8004678:	080048d7 	.word	0x080048d7
 800467c:	080048d7 	.word	0x080048d7
 8004680:	080048d7 	.word	0x080048d7
 8004684:	080048d7 	.word	0x080048d7
 8004688:	080048d7 	.word	0x080048d7
 800468c:	080048d7 	.word	0x080048d7
 8004690:	080048d7 	.word	0x080048d7
 8004694:	080046cb 	.word	0x080046cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004698:	4b94      	ldr	r3, [pc, #592]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d009      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046a4:	4b91      	ldr	r3, [pc, #580]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	08db      	lsrs	r3, r3, #3
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	4a90      	ldr	r2, [pc, #576]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
 80046b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80046b6:	e111      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046b8:	4b8d      	ldr	r3, [pc, #564]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046ba:	61bb      	str	r3, [r7, #24]
      break;
 80046bc:	e10e      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80046be:	4b8d      	ldr	r3, [pc, #564]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046c0:	61bb      	str	r3, [r7, #24]
      break;
 80046c2:	e10b      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80046c4:	4b8c      	ldr	r3, [pc, #560]	@ (80048f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80046c6:	61bb      	str	r3, [r7, #24]
      break;
 80046c8:	e108      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046ca:	4b88      	ldr	r3, [pc, #544]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80046d4:	4b85      	ldr	r3, [pc, #532]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046e0:	4b82      	ldr	r3, [pc, #520]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80046ea:	4b80      	ldr	r3, [pc, #512]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ee:	08db      	lsrs	r3, r3, #3
 80046f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80e1 	beq.w	80048d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b02      	cmp	r3, #2
 8004712:	f000 8083 	beq.w	800481c <HAL_RCC_GetSysClockFreq+0x204>
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b02      	cmp	r3, #2
 800471a:	f200 80a1 	bhi.w	8004860 <HAL_RCC_GetSysClockFreq+0x248>
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x114>
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d056      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800472a:	e099      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800472c:	4b6f      	ldr	r3, [pc, #444]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02d      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004738:	4b6c      	ldr	r3, [pc, #432]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	08db      	lsrs	r3, r3, #3
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	4a6b      	ldr	r2, [pc, #428]	@ (80048f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	4b62      	ldr	r3, [pc, #392]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004772:	ed97 6a02 	vldr	s12, [r7, #8]
 8004776:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80048fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800477a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004792:	e087      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004900 <HAL_RCC_GetSysClockFreq+0x2e8>
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b51      	ldr	r3, [pc, #324]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80048fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047d6:	e065      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004904 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b40      	ldr	r3, [pc, #256]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80048fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800481a:	e043      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004908 <HAL_RCC_GetSysClockFreq+0x2f0>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b2f      	ldr	r3, [pc, #188]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004842:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80048fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800485e:	e021      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004904 <HAL_RCC_GetSysClockFreq+0x2ec>
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b1e      	ldr	r3, [pc, #120]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a02 	vldr	s12, [r7, #8]
 8004886:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80048fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80048a4:	4b11      	ldr	r3, [pc, #68]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a8:	0a5b      	lsrs	r3, r3, #9
 80048aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ae:	3301      	adds	r3, #1
 80048b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	ee07 3a90 	vmov	s15, r3
 80048b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80048c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c8:	ee17 3a90 	vmov	r3, s15
 80048cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80048ce:	e005      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61bb      	str	r3, [r7, #24]
      break;
 80048d4:	e002      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80048d6:	4b07      	ldr	r3, [pc, #28]	@ (80048f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048d8:	61bb      	str	r3, [r7, #24]
      break;
 80048da:	bf00      	nop
  }

  return sysclockfreq;
 80048dc:	69bb      	ldr	r3, [r7, #24]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3724      	adds	r7, #36	@ 0x24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	58024400 	.word	0x58024400
 80048f0:	03d09000 	.word	0x03d09000
 80048f4:	003d0900 	.word	0x003d0900
 80048f8:	007a1200 	.word	0x007a1200
 80048fc:	46000000 	.word	0x46000000
 8004900:	4c742400 	.word	0x4c742400
 8004904:	4a742400 	.word	0x4a742400
 8004908:	4af42400 	.word	0x4af42400

0800490c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004912:	f7ff fe81 	bl	8004618 <HAL_RCC_GetSysClockFreq>
 8004916:	4602      	mov	r2, r0
 8004918:	4b10      	ldr	r3, [pc, #64]	@ (800495c <HAL_RCC_GetHCLKFreq+0x50>)
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	490f      	ldr	r1, [pc, #60]	@ (8004960 <HAL_RCC_GetHCLKFreq+0x54>)
 8004924:	5ccb      	ldrb	r3, [r1, r3]
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004930:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <HAL_RCC_GetHCLKFreq+0x50>)
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	4a09      	ldr	r2, [pc, #36]	@ (8004960 <HAL_RCC_GetHCLKFreq+0x54>)
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	fa22 f303 	lsr.w	r3, r2, r3
 8004946:	4a07      	ldr	r2, [pc, #28]	@ (8004964 <HAL_RCC_GetHCLKFreq+0x58>)
 8004948:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800494a:	4a07      	ldr	r2, [pc, #28]	@ (8004968 <HAL_RCC_GetHCLKFreq+0x5c>)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004950:	4b04      	ldr	r3, [pc, #16]	@ (8004964 <HAL_RCC_GetHCLKFreq+0x58>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	58024400 	.word	0x58024400
 8004960:	0800a310 	.word	0x0800a310
 8004964:	24000008 	.word	0x24000008
 8004968:	24000004 	.word	0x24000004

0800496c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004970:	f7ff ffcc 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4904      	ldr	r1, [pc, #16]	@ (8004994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd80      	pop	{r7, pc}
 8004990:	58024400 	.word	0x58024400
 8004994:	0800a310 	.word	0x0800a310

08004998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800499c:	f7ff ffb6 	bl	800490c <HAL_RCC_GetHCLKFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	0a1b      	lsrs	r3, r3, #8
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4904      	ldr	r1, [pc, #16]	@ (80049c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	58024400 	.word	0x58024400
 80049c0:	0800a310 	.word	0x0800a310

080049c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b0c8      	sub	sp, #288	@ 0x120
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049d0:	2300      	movs	r3, #0
 80049d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049d6:	2300      	movs	r3, #0
 80049d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80049e8:	2500      	movs	r5, #0
 80049ea:	ea54 0305 	orrs.w	r3, r4, r5
 80049ee:	d049      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80049f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049fa:	d02f      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80049fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a00:	d828      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a06:	d01a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a0c:	d822      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a16:	d007      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a18:	e01c      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a1a:	4ba7      	ldr	r3, [pc, #668]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	4aa6      	ldr	r2, [pc, #664]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a26:	e01a      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	2102      	movs	r1, #2
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 fc43 	bl	80062bc <RCCEx_PLL2_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a3c:	e00f      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a42:	3328      	adds	r3, #40	@ 0x28
 8004a44:	2102      	movs	r1, #2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 fcea 	bl	8006420 <RCCEx_PLL3_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a52:	e004      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a5a:	e000      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a66:	4b94      	ldr	r3, [pc, #592]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a74:	4a90      	ldr	r2, [pc, #576]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a76:	430b      	orrs	r3, r1
 8004a78:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a7a:	e003      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004a90:	f04f 0900 	mov.w	r9, #0
 8004a94:	ea58 0309 	orrs.w	r3, r8, r9
 8004a98:	d047      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d82a      	bhi.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8004aac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	08004ac1 	.word	0x08004ac1
 8004ab0:	08004acf 	.word	0x08004acf
 8004ab4:	08004ae5 	.word	0x08004ae5
 8004ab8:	08004b03 	.word	0x08004b03
 8004abc:	08004b03 	.word	0x08004b03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac0:	4b7d      	ldr	r3, [pc, #500]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac4:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004acc:	e01a      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 fbf0 	bl	80062bc <RCCEx_PLL2_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ae2:	e00f      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae8:	3328      	adds	r3, #40	@ 0x28
 8004aea:	2100      	movs	r1, #0
 8004aec:	4618      	mov	r0, r3
 8004aee:	f001 fc97 	bl	8006420 <RCCEx_PLL3_Config>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004af8:	e004      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b10:	f023 0107 	bic.w	r1, r3, #7
 8004b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1a:	4a67      	ldr	r2, [pc, #412]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b20:	e003      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004b36:	f04f 0b00 	mov.w	fp, #0
 8004b3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b3e:	d054      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b46:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b4a:	d036      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004b4c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b50:	d82f      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b56:	d032      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004b58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b5c:	d829      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b60:	d02f      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b64:	d825      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b66:	2b80      	cmp	r3, #128	@ 0x80
 8004b68:	d018      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004b6a:	2b80      	cmp	r3, #128	@ 0x80
 8004b6c:	d821      	bhi.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004b72:	2b40      	cmp	r3, #64	@ 0x40
 8004b74:	d007      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004b76:	e01c      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b78:	4b4f      	ldr	r3, [pc, #316]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004b84:	e01e      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 fb94 	bl	80062bc <RCCEx_PLL2_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004b9a:	e013      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ba0:	3328      	adds	r3, #40	@ 0x28
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 fc3b 	bl	8006420 <RCCEx_PLL3_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004bba:	bf00      	nop
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bda:	4a37      	ldr	r2, [pc, #220]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6513      	str	r3, [r2, #80]	@ 0x50
 8004be0:	e003      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004be6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004bf6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c00:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004c04:	460b      	mov	r3, r1
 8004c06:	4313      	orrs	r3, r2
 8004c08:	d05c      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c10:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c14:	d03b      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c16:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c1a:	d834      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c20:	d037      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004c22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c26:	d82e      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c28:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c2c:	d033      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c2e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c32:	d828      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c38:	d01a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3e:	d822      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c48:	d007      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004c4a:	e01c      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	4a19      	ldr	r2, [pc, #100]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004c58:	e01e      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c5e:	3308      	adds	r3, #8
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 fb2a 	bl	80062bc <RCCEx_PLL2_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004c6e:	e013      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c74:	3328      	adds	r3, #40	@ 0x28
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 fbd1 	bl	8006420 <RCCEx_PLL3_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004c84:	e008      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c8c:	e004      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e002      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10d      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004ca0:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cae:	4a02      	ldr	r2, [pc, #8]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cb4:	e006      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004cb6:	bf00      	nop
 8004cb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004cda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	d03a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cea:	2b30      	cmp	r3, #48	@ 0x30
 8004cec:	d01f      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004cee:	2b30      	cmp	r3, #48	@ 0x30
 8004cf0:	d819      	bhi.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d00c      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d815      	bhi.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d019      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d111      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d02:	4bae      	ldr	r3, [pc, #696]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	4aad      	ldr	r2, [pc, #692]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d0e:	e011      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d14:	3308      	adds	r3, #8
 8004d16:	2102      	movs	r1, #2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 facf 	bl	80062bc <RCCEx_PLL2_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d24:	e006      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d2c:	e002      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d3c:	4b9f      	ldr	r3, [pc, #636]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d40:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d4a:	4a9c      	ldr	r2, [pc, #624]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d50:	e003      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d051      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d84:	d035      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004d86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d8a:	d82e      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004d8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d90:	d031      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004d92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d96:	d828      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9c:	d01a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004da2:	d822      	bhi.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dac:	d007      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004dae:	e01c      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4b82      	ldr	r3, [pc, #520]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db4:	4a81      	ldr	r2, [pc, #516]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dbc:	e01c      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f001 fa78 	bl	80062bc <RCCEx_PLL2_Config>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dd2:	e011      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dd8:	3328      	adds	r3, #40	@ 0x28
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 fb1f 	bl	8006420 <RCCEx_PLL3_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004de8:	e006      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004df0:	e002      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e00:	4b6e      	ldr	r3, [pc, #440]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e0e:	4a6b      	ldr	r2, [pc, #428]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e14:	e003      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d053      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e48:	d033      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004e4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e4e:	d82c      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e54:	d02f      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004e56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e5a:	d826      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e60:	d02b      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004e62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e66:	d820      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e6c:	d012      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004e6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e72:	d81a      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d022      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7c:	d115      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e82:	3308      	adds	r3, #8
 8004e84:	2101      	movs	r1, #1
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 fa18 	bl	80062bc <RCCEx_PLL2_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e92:	e015      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e98:	3328      	adds	r3, #40	@ 0x28
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 fabf 	bl	8006420 <RCCEx_PLL3_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004eb0:	e006      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e004      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004eb6:	bf00      	nop
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004eba:	bf00      	nop
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ecc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ed4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ed6:	4a39      	ldr	r2, [pc, #228]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6513      	str	r3, [r2, #80]	@ 0x50
 8004edc:	e003      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ede:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ee2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004efc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4313      	orrs	r3, r2
 8004f04:	d060      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f0e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004f12:	d039      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004f14:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004f18:	d832      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1e:	d035      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f24:	d82c      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2a:	d031      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f30:	d826      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f36:	d02d      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004f38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f3c:	d820      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f42:	d012      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f48:	d81a      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d024      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004f4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f52:	d115      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f58:	3308      	adds	r3, #8
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 f9ad 	bl	80062bc <RCCEx_PLL2_Config>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f68:	e017      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f6e:	3328      	adds	r3, #40	@ 0x28
 8004f70:	2101      	movs	r1, #1
 8004f72:	4618      	mov	r0, r3
 8004f74:	f001 fa54 	bl	8006420 <RCCEx_PLL3_Config>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f7e:	e00c      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f86:	e008      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f88:	bf00      	nop
 8004f8a:	e006      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f8c:	bf00      	nop
 8004f8e:	e004      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f90:	bf00      	nop
 8004f92:	e002      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f94:	bf00      	nop
 8004f96:	e000      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004fa2:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fb2:	4a02      	ldr	r2, [pc, #8]	@ (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fb8:	e006      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fc4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	d037      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff2:	d00e      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff8:	d816      	bhi.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d018      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005002:	d111      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005004:	4bc4      	ldr	r3, [pc, #784]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005008:	4ac3      	ldr	r2, [pc, #780]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800500a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800500e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005010:	e00f      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005012:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005016:	3308      	adds	r3, #8
 8005018:	2101      	movs	r1, #1
 800501a:	4618      	mov	r0, r3
 800501c:	f001 f94e 	bl	80062bc <RCCEx_PLL2_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005026:	e004      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800502e:	e000      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005032:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10a      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800503a:	4bb7      	ldr	r3, [pc, #732]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800503c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800503e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005042:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005048:	4ab3      	ldr	r2, [pc, #716]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800504a:	430b      	orrs	r3, r1
 800504c:	6513      	str	r3, [r2, #80]	@ 0x50
 800504e:	e003      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005054:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005058:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005068:	2300      	movs	r3, #0
 800506a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800506e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005072:	460b      	mov	r3, r1
 8005074:	4313      	orrs	r3, r2
 8005076:	d039      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800507c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800507e:	2b03      	cmp	r3, #3
 8005080:	d81c      	bhi.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005082:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050c5 	.word	0x080050c5
 800508c:	08005099 	.word	0x08005099
 8005090:	080050a7 	.word	0x080050a7
 8005094:	080050c5 	.word	0x080050c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005098:	4b9f      	ldr	r3, [pc, #636]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509c:	4a9e      	ldr	r2, [pc, #632]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050a4:	e00f      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050aa:	3308      	adds	r3, #8
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 f904 	bl	80062bc <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050ba:	e004      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80050c2:	e000      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80050c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050ce:	4b92      	ldr	r3, [pc, #584]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d2:	f023 0103 	bic.w	r1, r3, #3
 80050d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050dc:	4a8e      	ldr	r2, [pc, #568]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050de:	430b      	orrs	r3, r1
 80050e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050e2:	e003      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80050f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050fc:	2300      	movs	r3, #0
 80050fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005102:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005106:	460b      	mov	r3, r1
 8005108:	4313      	orrs	r3, r2
 800510a:	f000 8099 	beq.w	8005240 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800510e:	4b83      	ldr	r3, [pc, #524]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a82      	ldr	r2, [pc, #520]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005118:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800511a:	f7fd fffd 	bl	8003118 <HAL_GetTick>
 800511e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005122:	e00b      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005124:	f7fd fff8 	bl	8003118 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b64      	cmp	r3, #100	@ 0x64
 8005132:	d903      	bls.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800513a:	e005      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800513c:	4b77      	ldr	r3, [pc, #476]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ed      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005148:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800514c:	2b00      	cmp	r3, #0
 800514e:	d173      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005150:	4b71      	ldr	r3, [pc, #452]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005152:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005158:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800515c:	4053      	eors	r3, r2
 800515e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005162:	2b00      	cmp	r3, #0
 8005164:	d015      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005166:	4b6c      	ldr	r3, [pc, #432]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005172:	4b69      	ldr	r3, [pc, #420]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005176:	4a68      	ldr	r2, [pc, #416]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800517c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800517e:	4b66      	ldr	r3, [pc, #408]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005182:	4a65      	ldr	r2, [pc, #404]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005188:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800518a:	4a63      	ldr	r2, [pc, #396]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005190:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005196:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800519a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519e:	d118      	bne.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fd ffba 	bl	8003118 <HAL_GetTick>
 80051a4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051a8:	e00d      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051aa:	f7fd ffb5 	bl	8003118 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80051b4:	1ad2      	subs	r2, r2, r3
 80051b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d903      	bls.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80051c4:	e005      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051c6:	4b54      	ldr	r3, [pc, #336]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0eb      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80051d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d129      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ea:	d10e      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80051ec:	4b4a      	ldr	r3, [pc, #296]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80051f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051fc:	091a      	lsrs	r2, r3, #4
 80051fe:	4b48      	ldr	r3, [pc, #288]	@ (8005320 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005200:	4013      	ands	r3, r2
 8005202:	4a45      	ldr	r2, [pc, #276]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005204:	430b      	orrs	r3, r1
 8005206:	6113      	str	r3, [r2, #16]
 8005208:	e005      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800520a:	4b43      	ldr	r3, [pc, #268]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	4a42      	ldr	r2, [pc, #264]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005210:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005214:	6113      	str	r3, [r2, #16]
 8005216:	4b40      	ldr	r3, [pc, #256]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005218:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800521a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800521e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005226:	4a3c      	ldr	r2, [pc, #240]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005228:	430b      	orrs	r3, r1
 800522a:	6713      	str	r3, [r2, #112]	@ 0x70
 800522c:	e008      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800522e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005232:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005236:	e003      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800523c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f002 0301 	and.w	r3, r2, #1
 800524c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005256:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	f000 8090 	beq.w	8005382 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800526a:	2b28      	cmp	r3, #40	@ 0x28
 800526c:	d870      	bhi.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800526e:	a201      	add	r2, pc, #4	@ (adr r2, 8005274 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	08005359 	.word	0x08005359
 8005278:	08005351 	.word	0x08005351
 800527c:	08005351 	.word	0x08005351
 8005280:	08005351 	.word	0x08005351
 8005284:	08005351 	.word	0x08005351
 8005288:	08005351 	.word	0x08005351
 800528c:	08005351 	.word	0x08005351
 8005290:	08005351 	.word	0x08005351
 8005294:	08005325 	.word	0x08005325
 8005298:	08005351 	.word	0x08005351
 800529c:	08005351 	.word	0x08005351
 80052a0:	08005351 	.word	0x08005351
 80052a4:	08005351 	.word	0x08005351
 80052a8:	08005351 	.word	0x08005351
 80052ac:	08005351 	.word	0x08005351
 80052b0:	08005351 	.word	0x08005351
 80052b4:	0800533b 	.word	0x0800533b
 80052b8:	08005351 	.word	0x08005351
 80052bc:	08005351 	.word	0x08005351
 80052c0:	08005351 	.word	0x08005351
 80052c4:	08005351 	.word	0x08005351
 80052c8:	08005351 	.word	0x08005351
 80052cc:	08005351 	.word	0x08005351
 80052d0:	08005351 	.word	0x08005351
 80052d4:	08005359 	.word	0x08005359
 80052d8:	08005351 	.word	0x08005351
 80052dc:	08005351 	.word	0x08005351
 80052e0:	08005351 	.word	0x08005351
 80052e4:	08005351 	.word	0x08005351
 80052e8:	08005351 	.word	0x08005351
 80052ec:	08005351 	.word	0x08005351
 80052f0:	08005351 	.word	0x08005351
 80052f4:	08005359 	.word	0x08005359
 80052f8:	08005351 	.word	0x08005351
 80052fc:	08005351 	.word	0x08005351
 8005300:	08005351 	.word	0x08005351
 8005304:	08005351 	.word	0x08005351
 8005308:	08005351 	.word	0x08005351
 800530c:	08005351 	.word	0x08005351
 8005310:	08005351 	.word	0x08005351
 8005314:	08005359 	.word	0x08005359
 8005318:	58024400 	.word	0x58024400
 800531c:	58024800 	.word	0x58024800
 8005320:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005328:	3308      	adds	r3, #8
 800532a:	2101      	movs	r1, #1
 800532c:	4618      	mov	r0, r3
 800532e:	f000 ffc5 	bl	80062bc <RCCEx_PLL2_Config>
 8005332:	4603      	mov	r3, r0
 8005334:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005338:	e00f      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800533a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800533e:	3328      	adds	r3, #40	@ 0x28
 8005340:	2101      	movs	r1, #1
 8005342:	4618      	mov	r0, r3
 8005344:	f001 f86c 	bl	8006420 <RCCEx_PLL3_Config>
 8005348:	4603      	mov	r3, r0
 800534a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800534e:	e004      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005356:	e000      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800535a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005362:	4bc0      	ldr	r3, [pc, #768]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800536a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800536e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005372:	4abc      	ldr	r2, [pc, #752]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005374:	430b      	orrs	r3, r1
 8005376:	6553      	str	r3, [r2, #84]	@ 0x54
 8005378:	e003      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800537e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	f002 0302 	and.w	r3, r2, #2
 800538e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005392:	2300      	movs	r3, #0
 8005394:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005398:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800539c:	460b      	mov	r3, r1
 800539e:	4313      	orrs	r3, r2
 80053a0:	d043      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80053a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d824      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	08005401 	.word	0x08005401
 80053b8:	080053cd 	.word	0x080053cd
 80053bc:	080053e3 	.word	0x080053e3
 80053c0:	08005401 	.word	0x08005401
 80053c4:	08005401 	.word	0x08005401
 80053c8:	08005401 	.word	0x08005401
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053d0:	3308      	adds	r3, #8
 80053d2:	2101      	movs	r1, #1
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 ff71 	bl	80062bc <RCCEx_PLL2_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053e0:	e00f      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e6:	3328      	adds	r3, #40	@ 0x28
 80053e8:	2101      	movs	r1, #1
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 f818 	bl	8006420 <RCCEx_PLL3_Config>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053f6:	e004      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053fe:	e000      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005402:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800540a:	4b96      	ldr	r3, [pc, #600]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800540c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540e:	f023 0107 	bic.w	r1, r3, #7
 8005412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800541a:	4a92      	ldr	r2, [pc, #584]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800541c:	430b      	orrs	r3, r1
 800541e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005420:	e003      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005422:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005426:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800542a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f002 0304 	and.w	r3, r2, #4
 8005436:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800543a:	2300      	movs	r3, #0
 800543c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005440:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005444:	460b      	mov	r3, r1
 8005446:	4313      	orrs	r3, r2
 8005448:	d043      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800544a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800544e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005452:	2b05      	cmp	r3, #5
 8005454:	d824      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005456:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545c:	080054a9 	.word	0x080054a9
 8005460:	08005475 	.word	0x08005475
 8005464:	0800548b 	.word	0x0800548b
 8005468:	080054a9 	.word	0x080054a9
 800546c:	080054a9 	.word	0x080054a9
 8005470:	080054a9 	.word	0x080054a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005478:	3308      	adds	r3, #8
 800547a:	2101      	movs	r1, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f000 ff1d 	bl	80062bc <RCCEx_PLL2_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005488:	e00f      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800548a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800548e:	3328      	adds	r3, #40	@ 0x28
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f000 ffc4 	bl	8006420 <RCCEx_PLL3_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800549e:	e004      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80054a6:	e000      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80054a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10b      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b6:	f023 0107 	bic.w	r1, r3, #7
 80054ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054c2:	4a68      	ldr	r2, [pc, #416]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054c8:	e003      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054ce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	f002 0320 	and.w	r3, r2, #32
 80054de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054e2:	2300      	movs	r3, #0
 80054e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054ec:	460b      	mov	r3, r1
 80054ee:	4313      	orrs	r3, r2
 80054f0:	d055      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80054f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054fe:	d033      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005504:	d82c      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550a:	d02f      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005510:	d826      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005512:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005516:	d02b      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005518:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800551c:	d820      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800551e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005522:	d012      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005528:	d81a      	bhi.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d022      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800552e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005532:	d115      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005538:	3308      	adds	r3, #8
 800553a:	2100      	movs	r1, #0
 800553c:	4618      	mov	r0, r3
 800553e:	f000 febd 	bl	80062bc <RCCEx_PLL2_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005548:	e015      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800554a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800554e:	3328      	adds	r3, #40	@ 0x28
 8005550:	2102      	movs	r1, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f000 ff64 	bl	8006420 <RCCEx_PLL3_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800555e:	e00a      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005566:	e006      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005568:	bf00      	nop
 800556a:	e004      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800556c:	bf00      	nop
 800556e:	e002      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005576:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10b      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800557e:	4b39      	ldr	r3, [pc, #228]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800558a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800558e:	4a35      	ldr	r2, [pc, #212]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005590:	430b      	orrs	r3, r1
 8005592:	6553      	str	r3, [r2, #84]	@ 0x54
 8005594:	e003      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005596:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800559a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800559e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80055aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055ae:	2300      	movs	r3, #0
 80055b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80055b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4313      	orrs	r3, r2
 80055bc:	d058      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80055be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055ca:	d033      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80055cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055d0:	d82c      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d6:	d02f      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80055d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055dc:	d826      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055e2:	d02b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80055e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055e8:	d820      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ee:	d012      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80055f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055f4:	d81a      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d022      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80055fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055fe:	d115      	bne.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005604:	3308      	adds	r3, #8
 8005606:	2100      	movs	r1, #0
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fe57 	bl	80062bc <RCCEx_PLL2_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005614:	e015      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800561a:	3328      	adds	r3, #40	@ 0x28
 800561c:	2102      	movs	r1, #2
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fefe 	bl	8006420 <RCCEx_PLL3_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800562a:	e00a      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005632:	e006      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005634:	bf00      	nop
 8005636:	e004      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005638:	bf00      	nop
 800563a:	e002      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800563c:	bf00      	nop
 800563e:	e000      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005642:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10e      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800564a:	4b06      	ldr	r3, [pc, #24]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800564c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005656:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800565a:	4a02      	ldr	r2, [pc, #8]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800565c:	430b      	orrs	r3, r1
 800565e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005660:	e006      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005662:	bf00      	nop
 8005664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005668:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800566c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800567c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005680:	2300      	movs	r3, #0
 8005682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005686:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800568a:	460b      	mov	r3, r1
 800568c:	4313      	orrs	r3, r2
 800568e:	d055      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005694:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005698:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800569c:	d033      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800569e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80056a2:	d82c      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a8:	d02f      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80056aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ae:	d826      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056b4:	d02b      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80056b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80056ba:	d820      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c0:	d012      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80056c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c6:	d81a      	bhi.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d022      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80056cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d0:	d115      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d6:	3308      	adds	r3, #8
 80056d8:	2100      	movs	r1, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fdee 	bl	80062bc <RCCEx_PLL2_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056e6:	e015      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ec:	3328      	adds	r3, #40	@ 0x28
 80056ee:	2102      	movs	r1, #2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fe95 	bl	8006420 <RCCEx_PLL3_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056fc:	e00a      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005704:	e006      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005706:	bf00      	nop
 8005708:	e004      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800570a:	bf00      	nop
 800570c:	e002      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800570e:	bf00      	nop
 8005710:	e000      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005714:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800571c:	4ba1      	ldr	r3, [pc, #644]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800571e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005720:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005728:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800572c:	4a9d      	ldr	r2, [pc, #628]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800572e:	430b      	orrs	r3, r1
 8005730:	6593      	str	r3, [r2, #88]	@ 0x58
 8005732:	e003      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005734:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005738:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800573c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f002 0308 	and.w	r3, r2, #8
 8005748:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800574c:	2300      	movs	r3, #0
 800574e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005752:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005756:	460b      	mov	r3, r1
 8005758:	4313      	orrs	r3, r2
 800575a:	d01e      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800575c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005768:	d10c      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800576a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800576e:	3328      	adds	r3, #40	@ 0x28
 8005770:	2102      	movs	r1, #2
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fe54 	bl	8006420 <RCCEx_PLL3_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005784:	4b87      	ldr	r3, [pc, #540]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005788:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800578c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005794:	4a83      	ldr	r2, [pc, #524]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005796:	430b      	orrs	r3, r1
 8005798:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800579a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f002 0310 	and.w	r3, r2, #16
 80057a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80057b4:	460b      	mov	r3, r1
 80057b6:	4313      	orrs	r3, r2
 80057b8:	d01e      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80057ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c6:	d10c      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057cc:	3328      	adds	r3, #40	@ 0x28
 80057ce:	2102      	movs	r1, #2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fe25 	bl	8006420 <RCCEx_PLL3_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057e2:	4b70      	ldr	r3, [pc, #448]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057f2:	4a6c      	ldr	r2, [pc, #432]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005804:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005808:	2300      	movs	r3, #0
 800580a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800580e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005812:	460b      	mov	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	d03e      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800581c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005820:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005824:	d022      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800582a:	d81b      	bhi.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8005830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005834:	d00b      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005836:	e015      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800583c:	3308      	adds	r3, #8
 800583e:	2100      	movs	r1, #0
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fd3b 	bl	80062bc <RCCEx_PLL2_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800584c:	e00f      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800584e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005852:	3328      	adds	r3, #40	@ 0x28
 8005854:	2102      	movs	r1, #2
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fde2 	bl	8006420 <RCCEx_PLL3_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005862:	e004      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800586a:	e000      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800586c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005876:	4b4b      	ldr	r3, [pc, #300]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800587e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005886:	4a47      	ldr	r2, [pc, #284]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005888:	430b      	orrs	r3, r1
 800588a:	6593      	str	r3, [r2, #88]	@ 0x58
 800588c:	e003      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005892:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80058a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058a4:	2300      	movs	r3, #0
 80058a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80058a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80058ac:	460b      	mov	r3, r1
 80058ae:	4313      	orrs	r3, r2
 80058b0:	d03b      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80058b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058be:	d01f      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80058c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058c4:	d818      	bhi.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80058c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ca:	d003      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80058cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058d0:	d007      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80058d2:	e011      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d4:	4b33      	ldr	r3, [pc, #204]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	4a32      	ldr	r2, [pc, #200]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80058e0:	e00f      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e6:	3328      	adds	r3, #40	@ 0x28
 80058e8:	2101      	movs	r1, #1
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fd98 	bl	8006420 <RCCEx_PLL3_Config>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80058f6:	e004      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058fe:	e000      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005902:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800590a:	4b26      	ldr	r3, [pc, #152]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800590c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591a:	4a22      	ldr	r2, [pc, #136]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800591c:	430b      	orrs	r3, r1
 800591e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005920:	e003      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005922:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005926:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800592a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005936:	673b      	str	r3, [r7, #112]	@ 0x70
 8005938:	2300      	movs	r3, #0
 800593a:	677b      	str	r3, [r7, #116]	@ 0x74
 800593c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005940:	460b      	mov	r3, r1
 8005942:	4313      	orrs	r3, r2
 8005944:	d034      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005946:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800594a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005954:	d007      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005956:	e011      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005958:	4b12      	ldr	r3, [pc, #72]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	4a11      	ldr	r2, [pc, #68]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800595e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005964:	e00e      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800596a:	3308      	adds	r3, #8
 800596c:	2102      	movs	r1, #2
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fca4 	bl	80062bc <RCCEx_PLL2_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800597a:	e003      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005984:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10d      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800598c:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800598e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005990:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800599a:	4a02      	ldr	r2, [pc, #8]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800599c:	430b      	orrs	r3, r1
 800599e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059a0:	e006      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80059a2:	bf00      	nop
 80059a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80059bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059be:	2300      	movs	r3, #0
 80059c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80059c6:	460b      	mov	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	d00c      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d0:	3328      	adds	r3, #40	@ 0x28
 80059d2:	2102      	movs	r1, #2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fd23 	bl	8006420 <RCCEx_PLL3_Config>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80059f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80059f4:	2300      	movs	r3, #0
 80059f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80059f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80059fc:	460b      	mov	r3, r1
 80059fe:	4313      	orrs	r3, r2
 8005a00:	d038      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005a02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a0e:	d018      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005a10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a14:	d811      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005a16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a1a:	d014      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a20:	d80b      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d011      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a2a:	d106      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2c:	4bc3      	ldr	r3, [pc, #780]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	4ac2      	ldr	r2, [pc, #776]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a38:	e008      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a40:	e004      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005a42:	bf00      	nop
 8005a44:	e002      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005a46:	bf00      	nop
 8005a48:	e000      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10b      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a54:	4bb9      	ldr	r3, [pc, #740]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a64:	4ab5      	ldr	r2, [pc, #724]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a66:	430b      	orrs	r3, r1
 8005a68:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a6a:	e003      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a70:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005a80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a82:	2300      	movs	r3, #0
 8005a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a90:	4baa      	ldr	r3, [pc, #680]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a9e:	4aa7      	ldr	r2, [pc, #668]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005ab0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ab6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005aba:	460b      	mov	r3, r1
 8005abc:	4313      	orrs	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ac0:	4b9e      	ldr	r3, [pc, #632]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ace:	4a9b      	ldr	r2, [pc, #620]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ae6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005af0:	4b92      	ldr	r3, [pc, #584]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005afe:	4a8f      	ldr	r2, [pc, #572]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005b10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b12:	2300      	movs	r3, #0
 8005b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b16:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b20:	4b86      	ldr	r3, [pc, #536]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	4a85      	ldr	r2, [pc, #532]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b2a:	6113      	str	r3, [r2, #16]
 8005b2c:	4b83      	ldr	r3, [pc, #524]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b2e:	6919      	ldr	r1, [r3, #16]
 8005b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b38:	4a80      	ldr	r2, [pc, #512]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b50:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b54:	460b      	mov	r3, r1
 8005b56:	4313      	orrs	r3, r2
 8005b58:	d009      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b5a:	4b78      	ldr	r3, [pc, #480]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b68:	4a74      	ldr	r2, [pc, #464]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b76:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005b7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b80:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005b84:	460b      	mov	r3, r1
 8005b86:	4313      	orrs	r3, r2
 8005b88:	d00a      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b8a:	4b6c      	ldr	r3, [pc, #432]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b9a:	4a68      	ldr	r2, [pc, #416]	@ (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	2100      	movs	r1, #0
 8005baa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bb2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	d011      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fb79 	bl	80062bc <RCCEx_PLL2_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005bd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	2100      	movs	r1, #0
 8005bea:	6239      	str	r1, [r7, #32]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	d011      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c00:	3308      	adds	r3, #8
 8005c02:	2101      	movs	r1, #1
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fb59 	bl	80062bc <RCCEx_PLL2_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005c10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c28:	2100      	movs	r1, #0
 8005c2a:	61b9      	str	r1, [r7, #24]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c36:	460b      	mov	r3, r1
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	d011      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c40:	3308      	adds	r3, #8
 8005c42:	2102      	movs	r1, #2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fb39 	bl	80062bc <RCCEx_PLL2_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005c50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	2100      	movs	r1, #0
 8005c6a:	6139      	str	r1, [r7, #16]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c76:	460b      	mov	r3, r1
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	d011      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c80:	3328      	adds	r3, #40	@ 0x28
 8005c82:	2100      	movs	r1, #0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fbcb 	bl	8006420 <RCCEx_PLL3_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005c90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	d011      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cc0:	3328      	adds	r3, #40	@ 0x28
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fbab 	bl	8006420 <RCCEx_PLL3_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6039      	str	r1, [r7, #0]
 8005cec:	f003 0320 	and.w	r3, r3, #32
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	d011      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d00:	3328      	adds	r3, #40	@ 0x28
 8005d02:	2102      	movs	r1, #2
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fb8b 	bl	8006420 <RCCEx_PLL3_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005d10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005d20:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e000      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005d34:	46bd      	mov	sp, r7
 8005d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d3a:	bf00      	nop
 8005d3c:	58024400 	.word	0x58024400

08005d40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005d44:	f7fe fde2 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	091b      	lsrs	r3, r3, #4
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	4904      	ldr	r1, [pc, #16]	@ (8005d68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d56:	5ccb      	ldrb	r3, [r1, r3]
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	58024400 	.word	0x58024400
 8005d68:	0800a310 	.word	0x0800a310

08005d6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b089      	sub	sp, #36	@ 0x24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d74:	4ba1      	ldr	r3, [pc, #644]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005d7e:	4b9f      	ldr	r3, [pc, #636]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d82:	0b1b      	lsrs	r3, r3, #12
 8005d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d8a:	4b9c      	ldr	r3, [pc, #624]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8e:	091b      	lsrs	r3, r3, #4
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d96:	4b99      	ldr	r3, [pc, #612]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9a:	08db      	lsrs	r3, r3, #3
 8005d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8111 	beq.w	8005fdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	f000 8083 	beq.w	8005ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	f200 80a1 	bhi.w	8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d056      	beq.n	8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005dd6:	e099      	b.n	8005f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd8:	4b88      	ldr	r3, [pc, #544]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02d      	beq.n	8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005de4:	4b85      	ldr	r3, [pc, #532]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	4a84      	ldr	r2, [pc, #528]	@ (8006000 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e3e:	e087      	b.n	8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006008 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e52:	4b6a      	ldr	r3, [pc, #424]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e82:	e065      	b.n	8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800600c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e96:	4b59      	ldr	r3, [pc, #356]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eaa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ec6:	e043      	b.n	8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006010 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eda:	4b48      	ldr	r3, [pc, #288]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f0a:	e021      	b.n	8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800600c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1e:	4b37      	ldr	r3, [pc, #220]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006004 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005f50:	4b2a      	ldr	r3, [pc, #168]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	0a5b      	lsrs	r3, r3, #9
 8005f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f76:	ee17 2a90 	vmov	r2, s15
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f82:	0c1b      	lsrs	r3, r3, #16
 8005f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa4:	ee17 2a90 	vmov	r2, s15
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005fac:	4b13      	ldr	r3, [pc, #76]	@ (8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb0:	0e1b      	lsrs	r3, r3, #24
 8005fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd2:	ee17 2a90 	vmov	r2, s15
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005fda:	e008      	b.n	8005fee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	609a      	str	r2, [r3, #8]
}
 8005fee:	bf00      	nop
 8005ff0:	3724      	adds	r7, #36	@ 0x24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	58024400 	.word	0x58024400
 8006000:	03d09000 	.word	0x03d09000
 8006004:	46000000 	.word	0x46000000
 8006008:	4c742400 	.word	0x4c742400
 800600c:	4a742400 	.word	0x4a742400
 8006010:	4af42400 	.word	0x4af42400

08006014 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006014:	b480      	push	{r7}
 8006016:	b089      	sub	sp, #36	@ 0x24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800601c:	4ba1      	ldr	r3, [pc, #644]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800601e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006026:	4b9f      	ldr	r3, [pc, #636]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602a:	0d1b      	lsrs	r3, r3, #20
 800602c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006030:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006032:	4b9c      	ldr	r3, [pc, #624]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800603e:	4b99      	ldr	r3, [pc, #612]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006042:	08db      	lsrs	r3, r3, #3
 8006044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8111 	beq.w	8006284 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	2b02      	cmp	r3, #2
 8006066:	f000 8083 	beq.w	8006170 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b02      	cmp	r3, #2
 800606e:	f200 80a1 	bhi.w	80061b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d056      	beq.n	800612c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800607e:	e099      	b.n	80061b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006080:	4b88      	ldr	r3, [pc, #544]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d02d      	beq.n	80060e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800608c:	4b85      	ldr	r3, [pc, #532]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	08db      	lsrs	r3, r3, #3
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	4a84      	ldr	r2, [pc, #528]	@ (80062a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
 800609c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b6:	4b7b      	ldr	r3, [pc, #492]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060be:	ee07 3a90 	vmov	s15, r3
 80060c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060e6:	e087      	b.n	80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80062b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80060f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fa:	4b6a      	ldr	r3, [pc, #424]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610a:	ed97 6a03 	vldr	s12, [r7, #12]
 800610e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800611e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800612a:	e065      	b.n	80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80062b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800613a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613e:	4b59      	ldr	r3, [pc, #356]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800614e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006152:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800615e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800616e:	e043      	b.n	80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80062b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800617e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006182:	4b48      	ldr	r3, [pc, #288]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006192:	ed97 6a03 	vldr	s12, [r7, #12]
 8006196:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800619a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800619e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061b2:	e021      	b.n	80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80062b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c6:	4b37      	ldr	r3, [pc, #220]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80061f8:	4b2a      	ldr	r3, [pc, #168]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fc:	0a5b      	lsrs	r3, r3, #9
 80061fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800620e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006212:	edd7 6a07 	vldr	s13, [r7, #28]
 8006216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800621a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800621e:	ee17 2a90 	vmov	r2, s15
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006226:	4b1f      	ldr	r3, [pc, #124]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622a:	0c1b      	lsrs	r3, r3, #16
 800622c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006230:	ee07 3a90 	vmov	s15, r3
 8006234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800623c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006240:	edd7 6a07 	vldr	s13, [r7, #28]
 8006244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800624c:	ee17 2a90 	vmov	r2, s15
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006254:	4b13      	ldr	r3, [pc, #76]	@ (80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006258:	0e1b      	lsrs	r3, r3, #24
 800625a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800626a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800626e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800627a:	ee17 2a90 	vmov	r2, s15
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006282:	e008      	b.n	8006296 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	609a      	str	r2, [r3, #8]
}
 8006296:	bf00      	nop
 8006298:	3724      	adds	r7, #36	@ 0x24
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	58024400 	.word	0x58024400
 80062a8:	03d09000 	.word	0x03d09000
 80062ac:	46000000 	.word	0x46000000
 80062b0:	4c742400 	.word	0x4c742400
 80062b4:	4a742400 	.word	0x4a742400
 80062b8:	4af42400 	.word	0x4af42400

080062bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062ca:	4b53      	ldr	r3, [pc, #332]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80062cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d101      	bne.n	80062da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e099      	b.n	800640e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80062da:	4b4f      	ldr	r3, [pc, #316]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a4e      	ldr	r2, [pc, #312]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80062e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e6:	f7fc ff17 	bl	8003118 <HAL_GetTick>
 80062ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062ec:	e008      	b.n	8006300 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062ee:	f7fc ff13 	bl	8003118 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d901      	bls.n	8006300 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e086      	b.n	800640e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006300:	4b45      	ldr	r3, [pc, #276]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1f0      	bne.n	80062ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800630c:	4b42      	ldr	r3, [pc, #264]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 800630e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006310:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	031b      	lsls	r3, r3, #12
 800631a:	493f      	ldr	r1, [pc, #252]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 800631c:	4313      	orrs	r3, r2
 800631e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	3b01      	subs	r3, #1
 8006326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	3b01      	subs	r3, #1
 8006330:	025b      	lsls	r3, r3, #9
 8006332:	b29b      	uxth	r3, r3
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	3b01      	subs	r3, #1
 800633c:	041b      	lsls	r3, r3, #16
 800633e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	3b01      	subs	r3, #1
 800634a:	061b      	lsls	r3, r3, #24
 800634c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006350:	4931      	ldr	r1, [pc, #196]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006352:	4313      	orrs	r3, r2
 8006354:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006356:	4b30      	ldr	r3, [pc, #192]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	492d      	ldr	r1, [pc, #180]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006364:	4313      	orrs	r3, r2
 8006366:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006368:	4b2b      	ldr	r3, [pc, #172]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	f023 0220 	bic.w	r2, r3, #32
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	4928      	ldr	r1, [pc, #160]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006376:	4313      	orrs	r3, r2
 8006378:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800637a:	4b27      	ldr	r3, [pc, #156]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 800637c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637e:	4a26      	ldr	r2, [pc, #152]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006380:	f023 0310 	bic.w	r3, r3, #16
 8006384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006386:	4b24      	ldr	r3, [pc, #144]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006388:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800638a:	4b24      	ldr	r3, [pc, #144]	@ (800641c <RCCEx_PLL2_Config+0x160>)
 800638c:	4013      	ands	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	69d2      	ldr	r2, [r2, #28]
 8006392:	00d2      	lsls	r2, r2, #3
 8006394:	4920      	ldr	r1, [pc, #128]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006396:	4313      	orrs	r3, r2
 8006398:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800639a:	4b1f      	ldr	r3, [pc, #124]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 800639c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639e:	4a1e      	ldr	r2, [pc, #120]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063a0:	f043 0310 	orr.w	r3, r3, #16
 80063a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80063ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b0:	4a19      	ldr	r2, [pc, #100]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063b8:	e00f      	b.n	80063da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d106      	bne.n	80063ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80063c0:	4b15      	ldr	r3, [pc, #84]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c4:	4a14      	ldr	r2, [pc, #80]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063cc:	e005      	b.n	80063da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80063ce:	4b12      	ldr	r3, [pc, #72]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d2:	4a11      	ldr	r2, [pc, #68]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80063da:	4b0f      	ldr	r3, [pc, #60]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a0e      	ldr	r2, [pc, #56]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 80063e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063e6:	f7fc fe97 	bl	8003118 <HAL_GetTick>
 80063ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063ec:	e008      	b.n	8006400 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063ee:	f7fc fe93 	bl	8003118 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d901      	bls.n	8006400 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e006      	b.n	800640e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006400:	4b05      	ldr	r3, [pc, #20]	@ (8006418 <RCCEx_PLL2_Config+0x15c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0f0      	beq.n	80063ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	58024400 	.word	0x58024400
 800641c:	ffff0007 	.word	0xffff0007

08006420 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800642e:	4b53      	ldr	r3, [pc, #332]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	2b03      	cmp	r3, #3
 8006438:	d101      	bne.n	800643e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e099      	b.n	8006572 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800643e:	4b4f      	ldr	r3, [pc, #316]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a4e      	ldr	r2, [pc, #312]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800644a:	f7fc fe65 	bl	8003118 <HAL_GetTick>
 800644e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006450:	e008      	b.n	8006464 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006452:	f7fc fe61 	bl	8003118 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e086      	b.n	8006572 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006464:	4b45      	ldr	r3, [pc, #276]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f0      	bne.n	8006452 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006470:	4b42      	ldr	r3, [pc, #264]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	051b      	lsls	r3, r3, #20
 800647e:	493f      	ldr	r1, [pc, #252]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006480:	4313      	orrs	r3, r2
 8006482:	628b      	str	r3, [r1, #40]	@ 0x28
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	3b01      	subs	r3, #1
 800648a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	3b01      	subs	r3, #1
 8006494:	025b      	lsls	r3, r3, #9
 8006496:	b29b      	uxth	r3, r3
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	3b01      	subs	r3, #1
 80064a0:	041b      	lsls	r3, r3, #16
 80064a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	061b      	lsls	r3, r3, #24
 80064b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80064b4:	4931      	ldr	r1, [pc, #196]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80064ba:	4b30      	ldr	r3, [pc, #192]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 80064bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	492d      	ldr	r1, [pc, #180]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80064cc:	4b2b      	ldr	r3, [pc, #172]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 80064ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	4928      	ldr	r1, [pc, #160]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80064de:	4b27      	ldr	r3, [pc, #156]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 80064e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e2:	4a26      	ldr	r2, [pc, #152]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 80064e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80064ea:	4b24      	ldr	r3, [pc, #144]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 80064ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064ee:	4b24      	ldr	r3, [pc, #144]	@ (8006580 <RCCEx_PLL3_Config+0x160>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	69d2      	ldr	r2, [r2, #28]
 80064f6:	00d2      	lsls	r2, r2, #3
 80064f8:	4920      	ldr	r1, [pc, #128]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80064fe:	4b1f      	ldr	r3, [pc, #124]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006502:	4a1e      	ldr	r2, [pc, #120]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006508:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006510:	4b1a      	ldr	r3, [pc, #104]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	4a19      	ldr	r2, [pc, #100]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006516:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800651a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800651c:	e00f      	b.n	800653e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d106      	bne.n	8006532 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006524:	4b15      	ldr	r3, [pc, #84]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	4a14      	ldr	r2, [pc, #80]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 800652a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800652e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006530:	e005      	b.n	800653e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006532:	4b12      	ldr	r3, [pc, #72]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006536:	4a11      	ldr	r2, [pc, #68]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006538:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800653c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800653e:	4b0f      	ldr	r3, [pc, #60]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a0e      	ldr	r2, [pc, #56]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800654a:	f7fc fde5 	bl	8003118 <HAL_GetTick>
 800654e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006550:	e008      	b.n	8006564 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006552:	f7fc fde1 	bl	8003118 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	2b02      	cmp	r3, #2
 800655e:	d901      	bls.n	8006564 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e006      	b.n	8006572 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006564:	4b05      	ldr	r3, [pc, #20]	@ (800657c <RCCEx_PLL3_Config+0x15c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0f0      	beq.n	8006552 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	58024400 	.word	0x58024400
 8006580:	ffff0007 	.word	0xffff0007

08006584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e049      	b.n	800662a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fc fa68 	bl	8002a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f001 f9e8 	bl	8007998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b082      	sub	sp, #8
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e049      	b.n	80066d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d106      	bne.n	800665e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f841 	bl	80066e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2202      	movs	r2, #2
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3304      	adds	r3, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f001 f991 	bl	8007998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <HAL_TIM_PWM_Start+0x24>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b01      	cmp	r3, #1
 800670e:	bf14      	ite	ne
 8006710:	2301      	movne	r3, #1
 8006712:	2300      	moveq	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	e03c      	b.n	8006792 <HAL_TIM_PWM_Start+0x9e>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b04      	cmp	r3, #4
 800671c:	d109      	bne.n	8006732 <HAL_TIM_PWM_Start+0x3e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b01      	cmp	r3, #1
 8006728:	bf14      	ite	ne
 800672a:	2301      	movne	r3, #1
 800672c:	2300      	moveq	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	e02f      	b.n	8006792 <HAL_TIM_PWM_Start+0x9e>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b08      	cmp	r3, #8
 8006736:	d109      	bne.n	800674c <HAL_TIM_PWM_Start+0x58>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b01      	cmp	r3, #1
 8006742:	bf14      	ite	ne
 8006744:	2301      	movne	r3, #1
 8006746:	2300      	moveq	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	e022      	b.n	8006792 <HAL_TIM_PWM_Start+0x9e>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b0c      	cmp	r3, #12
 8006750:	d109      	bne.n	8006766 <HAL_TIM_PWM_Start+0x72>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b01      	cmp	r3, #1
 800675c:	bf14      	ite	ne
 800675e:	2301      	movne	r3, #1
 8006760:	2300      	moveq	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	e015      	b.n	8006792 <HAL_TIM_PWM_Start+0x9e>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b10      	cmp	r3, #16
 800676a:	d109      	bne.n	8006780 <HAL_TIM_PWM_Start+0x8c>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	bf14      	ite	ne
 8006778:	2301      	movne	r3, #1
 800677a:	2300      	moveq	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	e008      	b.n	8006792 <HAL_TIM_PWM_Start+0x9e>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	bf14      	ite	ne
 800678c:	2301      	movne	r3, #1
 800678e:	2300      	moveq	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e0a1      	b.n	80068de <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <HAL_TIM_PWM_Start+0xb6>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067a8:	e023      	b.n	80067f2 <HAL_TIM_PWM_Start+0xfe>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d104      	bne.n	80067ba <HAL_TIM_PWM_Start+0xc6>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067b8:	e01b      	b.n	80067f2 <HAL_TIM_PWM_Start+0xfe>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d104      	bne.n	80067ca <HAL_TIM_PWM_Start+0xd6>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067c8:	e013      	b.n	80067f2 <HAL_TIM_PWM_Start+0xfe>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b0c      	cmp	r3, #12
 80067ce:	d104      	bne.n	80067da <HAL_TIM_PWM_Start+0xe6>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067d8:	e00b      	b.n	80067f2 <HAL_TIM_PWM_Start+0xfe>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b10      	cmp	r3, #16
 80067de:	d104      	bne.n	80067ea <HAL_TIM_PWM_Start+0xf6>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067e8:	e003      	b.n	80067f2 <HAL_TIM_PWM_Start+0xfe>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2201      	movs	r2, #1
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 fefa 	bl	80085f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a38      	ldr	r2, [pc, #224]	@ (80068e8 <HAL_TIM_PWM_Start+0x1f4>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <HAL_TIM_PWM_Start+0x13e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a37      	ldr	r2, [pc, #220]	@ (80068ec <HAL_TIM_PWM_Start+0x1f8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00e      	beq.n	8006832 <HAL_TIM_PWM_Start+0x13e>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a35      	ldr	r2, [pc, #212]	@ (80068f0 <HAL_TIM_PWM_Start+0x1fc>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d009      	beq.n	8006832 <HAL_TIM_PWM_Start+0x13e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a34      	ldr	r2, [pc, #208]	@ (80068f4 <HAL_TIM_PWM_Start+0x200>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d004      	beq.n	8006832 <HAL_TIM_PWM_Start+0x13e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a32      	ldr	r2, [pc, #200]	@ (80068f8 <HAL_TIM_PWM_Start+0x204>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d101      	bne.n	8006836 <HAL_TIM_PWM_Start+0x142>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <HAL_TIM_PWM_Start+0x144>
 8006836:	2300      	movs	r3, #0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800684a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a25      	ldr	r2, [pc, #148]	@ (80068e8 <HAL_TIM_PWM_Start+0x1f4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d022      	beq.n	800689c <HAL_TIM_PWM_Start+0x1a8>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685e:	d01d      	beq.n	800689c <HAL_TIM_PWM_Start+0x1a8>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a25      	ldr	r2, [pc, #148]	@ (80068fc <HAL_TIM_PWM_Start+0x208>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d018      	beq.n	800689c <HAL_TIM_PWM_Start+0x1a8>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a24      	ldr	r2, [pc, #144]	@ (8006900 <HAL_TIM_PWM_Start+0x20c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d013      	beq.n	800689c <HAL_TIM_PWM_Start+0x1a8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a22      	ldr	r2, [pc, #136]	@ (8006904 <HAL_TIM_PWM_Start+0x210>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00e      	beq.n	800689c <HAL_TIM_PWM_Start+0x1a8>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1a      	ldr	r2, [pc, #104]	@ (80068ec <HAL_TIM_PWM_Start+0x1f8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d009      	beq.n	800689c <HAL_TIM_PWM_Start+0x1a8>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1e      	ldr	r2, [pc, #120]	@ (8006908 <HAL_TIM_PWM_Start+0x214>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_TIM_PWM_Start+0x1a8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a16      	ldr	r2, [pc, #88]	@ (80068f0 <HAL_TIM_PWM_Start+0x1fc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d115      	bne.n	80068c8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	4b1a      	ldr	r3, [pc, #104]	@ (800690c <HAL_TIM_PWM_Start+0x218>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b06      	cmp	r3, #6
 80068ac:	d015      	beq.n	80068da <HAL_TIM_PWM_Start+0x1e6>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b4:	d011      	beq.n	80068da <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0201 	orr.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c6:	e008      	b.n	80068da <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	e000      	b.n	80068dc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40010400 	.word	0x40010400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40014400 	.word	0x40014400
 80068f8:	40014800 	.word	0x40014800
 80068fc:	40000400 	.word	0x40000400
 8006900:	40000800 	.word	0x40000800
 8006904:	40000c00 	.word	0x40000c00
 8006908:	40001800 	.word	0x40001800
 800690c:	00010007 	.word	0x00010007

08006910 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e049      	b.n	80069b6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f841 	bl	80069be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	4619      	mov	r1, r3
 800694e:	4610      	mov	r0, r2
 8006950:	f001 f822 	bl	8007998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <HAL_TIM_IC_Start+0x1a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	e023      	b.n	8006a36 <HAL_TIM_IC_Start+0x62>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d104      	bne.n	80069fe <HAL_TIM_IC_Start+0x2a>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	e01b      	b.n	8006a36 <HAL_TIM_IC_Start+0x62>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d104      	bne.n	8006a0e <HAL_TIM_IC_Start+0x3a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	e013      	b.n	8006a36 <HAL_TIM_IC_Start+0x62>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b0c      	cmp	r3, #12
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_IC_Start+0x4a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	e00b      	b.n	8006a36 <HAL_TIM_IC_Start+0x62>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_IC_Start+0x5a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	e003      	b.n	8006a36 <HAL_TIM_IC_Start+0x62>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <HAL_TIM_IC_Start+0x74>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	e013      	b.n	8006a70 <HAL_TIM_IC_Start+0x9c>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d104      	bne.n	8006a58 <HAL_TIM_IC_Start+0x84>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	e00b      	b.n	8006a70 <HAL_TIM_IC_Start+0x9c>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d104      	bne.n	8006a68 <HAL_TIM_IC_Start+0x94>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	e003      	b.n	8006a70 <HAL_TIM_IC_Start+0x9c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d102      	bne.n	8006a7e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d001      	beq.n	8006a82 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e097      	b.n	8006bb2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d104      	bne.n	8006a92 <HAL_TIM_IC_Start+0xbe>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a90:	e023      	b.n	8006ada <HAL_TIM_IC_Start+0x106>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d104      	bne.n	8006aa2 <HAL_TIM_IC_Start+0xce>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aa0:	e01b      	b.n	8006ada <HAL_TIM_IC_Start+0x106>
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d104      	bne.n	8006ab2 <HAL_TIM_IC_Start+0xde>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ab0:	e013      	b.n	8006ada <HAL_TIM_IC_Start+0x106>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b0c      	cmp	r3, #12
 8006ab6:	d104      	bne.n	8006ac2 <HAL_TIM_IC_Start+0xee>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ac0:	e00b      	b.n	8006ada <HAL_TIM_IC_Start+0x106>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b10      	cmp	r3, #16
 8006ac6:	d104      	bne.n	8006ad2 <HAL_TIM_IC_Start+0xfe>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ad0:	e003      	b.n	8006ada <HAL_TIM_IC_Start+0x106>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <HAL_TIM_IC_Start+0x116>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ae8:	e013      	b.n	8006b12 <HAL_TIM_IC_Start+0x13e>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d104      	bne.n	8006afa <HAL_TIM_IC_Start+0x126>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006af8:	e00b      	b.n	8006b12 <HAL_TIM_IC_Start+0x13e>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_IC_Start+0x136>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b08:	e003      	b.n	8006b12 <HAL_TIM_IC_Start+0x13e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2201      	movs	r2, #1
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 fd6a 	bl	80085f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a25      	ldr	r2, [pc, #148]	@ (8006bbc <HAL_TIM_IC_Start+0x1e8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d022      	beq.n	8006b70 <HAL_TIM_IC_Start+0x19c>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b32:	d01d      	beq.n	8006b70 <HAL_TIM_IC_Start+0x19c>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a21      	ldr	r2, [pc, #132]	@ (8006bc0 <HAL_TIM_IC_Start+0x1ec>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d018      	beq.n	8006b70 <HAL_TIM_IC_Start+0x19c>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a20      	ldr	r2, [pc, #128]	@ (8006bc4 <HAL_TIM_IC_Start+0x1f0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <HAL_TIM_IC_Start+0x19c>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8006bc8 <HAL_TIM_IC_Start+0x1f4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00e      	beq.n	8006b70 <HAL_TIM_IC_Start+0x19c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1d      	ldr	r2, [pc, #116]	@ (8006bcc <HAL_TIM_IC_Start+0x1f8>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d009      	beq.n	8006b70 <HAL_TIM_IC_Start+0x19c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd0 <HAL_TIM_IC_Start+0x1fc>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_TIM_IC_Start+0x19c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd4 <HAL_TIM_IC_Start+0x200>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d115      	bne.n	8006b9c <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	4b18      	ldr	r3, [pc, #96]	@ (8006bd8 <HAL_TIM_IC_Start+0x204>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b06      	cmp	r3, #6
 8006b80:	d015      	beq.n	8006bae <HAL_TIM_IC_Start+0x1da>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b88:	d011      	beq.n	8006bae <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0201 	orr.w	r2, r2, #1
 8006b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9a:	e008      	b.n	8006bae <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f042 0201 	orr.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	e000      	b.n	8006bb0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40010000 	.word	0x40010000
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40000800 	.word	0x40000800
 8006bc8:	40000c00 	.word	0x40000c00
 8006bcc:	40010400 	.word	0x40010400
 8006bd0:	40001800 	.word	0x40001800
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	00010007 	.word	0x00010007

08006bdc <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2200      	movs	r2, #0
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 fd00 	bl	80085f4 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6a1a      	ldr	r2, [r3, #32]
 8006bfa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10f      	bne.n	8006c24 <HAL_TIM_IC_Stop+0x48>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6a1a      	ldr	r2, [r3, #32]
 8006c0a:	f240 4344 	movw	r3, #1092	@ 0x444
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d107      	bne.n	8006c24 <HAL_TIM_IC_Stop+0x48>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0201 	bic.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <HAL_TIM_IC_Stop+0x58>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c32:	e023      	b.n	8006c7c <HAL_TIM_IC_Stop+0xa0>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d104      	bne.n	8006c44 <HAL_TIM_IC_Stop+0x68>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c42:	e01b      	b.n	8006c7c <HAL_TIM_IC_Stop+0xa0>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d104      	bne.n	8006c54 <HAL_TIM_IC_Stop+0x78>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c52:	e013      	b.n	8006c7c <HAL_TIM_IC_Stop+0xa0>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b0c      	cmp	r3, #12
 8006c58:	d104      	bne.n	8006c64 <HAL_TIM_IC_Stop+0x88>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c62:	e00b      	b.n	8006c7c <HAL_TIM_IC_Stop+0xa0>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b10      	cmp	r3, #16
 8006c68:	d104      	bne.n	8006c74 <HAL_TIM_IC_Stop+0x98>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c72:	e003      	b.n	8006c7c <HAL_TIM_IC_Stop+0xa0>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d104      	bne.n	8006c8c <HAL_TIM_IC_Stop+0xb0>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c8a:	e013      	b.n	8006cb4 <HAL_TIM_IC_Stop+0xd8>
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d104      	bne.n	8006c9c <HAL_TIM_IC_Stop+0xc0>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c9a:	e00b      	b.n	8006cb4 <HAL_TIM_IC_Stop+0xd8>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b08      	cmp	r3, #8
 8006ca0:	d104      	bne.n	8006cac <HAL_TIM_IC_Stop+0xd0>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006caa:	e003      	b.n	8006cb4 <HAL_TIM_IC_Stop+0xd8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <HAL_TIM_IC_Start_IT+0x1e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	e023      	b.n	8006d26 <HAL_TIM_IC_Start_IT+0x66>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d104      	bne.n	8006cee <HAL_TIM_IC_Start_IT+0x2e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	e01b      	b.n	8006d26 <HAL_TIM_IC_Start_IT+0x66>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_IC_Start_IT+0x3e>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	e013      	b.n	8006d26 <HAL_TIM_IC_Start_IT+0x66>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b0c      	cmp	r3, #12
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_IC_Start_IT+0x4e>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	e00b      	b.n	8006d26 <HAL_TIM_IC_Start_IT+0x66>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b10      	cmp	r3, #16
 8006d12:	d104      	bne.n	8006d1e <HAL_TIM_IC_Start_IT+0x5e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	e003      	b.n	8006d26 <HAL_TIM_IC_Start_IT+0x66>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d104      	bne.n	8006d38 <HAL_TIM_IC_Start_IT+0x78>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	e013      	b.n	8006d60 <HAL_TIM_IC_Start_IT+0xa0>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d104      	bne.n	8006d48 <HAL_TIM_IC_Start_IT+0x88>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	e00b      	b.n	8006d60 <HAL_TIM_IC_Start_IT+0xa0>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d104      	bne.n	8006d58 <HAL_TIM_IC_Start_IT+0x98>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	e003      	b.n	8006d60 <HAL_TIM_IC_Start_IT+0xa0>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d102      	bne.n	8006d6e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d68:	7b7b      	ldrb	r3, [r7, #13]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d001      	beq.n	8006d72 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e0e2      	b.n	8006f38 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <HAL_TIM_IC_Start_IT+0xc2>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d80:	e023      	b.n	8006dca <HAL_TIM_IC_Start_IT+0x10a>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d104      	bne.n	8006d92 <HAL_TIM_IC_Start_IT+0xd2>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d90:	e01b      	b.n	8006dca <HAL_TIM_IC_Start_IT+0x10a>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d104      	bne.n	8006da2 <HAL_TIM_IC_Start_IT+0xe2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006da0:	e013      	b.n	8006dca <HAL_TIM_IC_Start_IT+0x10a>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b0c      	cmp	r3, #12
 8006da6:	d104      	bne.n	8006db2 <HAL_TIM_IC_Start_IT+0xf2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006db0:	e00b      	b.n	8006dca <HAL_TIM_IC_Start_IT+0x10a>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b10      	cmp	r3, #16
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_IC_Start_IT+0x102>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dc0:	e003      	b.n	8006dca <HAL_TIM_IC_Start_IT+0x10a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d104      	bne.n	8006dda <HAL_TIM_IC_Start_IT+0x11a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dd8:	e013      	b.n	8006e02 <HAL_TIM_IC_Start_IT+0x142>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d104      	bne.n	8006dea <HAL_TIM_IC_Start_IT+0x12a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006de8:	e00b      	b.n	8006e02 <HAL_TIM_IC_Start_IT+0x142>
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d104      	bne.n	8006dfa <HAL_TIM_IC_Start_IT+0x13a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006df8:	e003      	b.n	8006e02 <HAL_TIM_IC_Start_IT+0x142>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b0c      	cmp	r3, #12
 8006e06:	d841      	bhi.n	8006e8c <HAL_TIM_IC_Start_IT+0x1cc>
 8006e08:	a201      	add	r2, pc, #4	@ (adr r2, 8006e10 <HAL_TIM_IC_Start_IT+0x150>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006e8d 	.word	0x08006e8d
 8006e18:	08006e8d 	.word	0x08006e8d
 8006e1c:	08006e8d 	.word	0x08006e8d
 8006e20:	08006e57 	.word	0x08006e57
 8006e24:	08006e8d 	.word	0x08006e8d
 8006e28:	08006e8d 	.word	0x08006e8d
 8006e2c:	08006e8d 	.word	0x08006e8d
 8006e30:	08006e69 	.word	0x08006e69
 8006e34:	08006e8d 	.word	0x08006e8d
 8006e38:	08006e8d 	.word	0x08006e8d
 8006e3c:	08006e8d 	.word	0x08006e8d
 8006e40:	08006e7b 	.word	0x08006e7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0202 	orr.w	r2, r2, #2
 8006e52:	60da      	str	r2, [r3, #12]
      break;
 8006e54:	e01d      	b.n	8006e92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0204 	orr.w	r2, r2, #4
 8006e64:	60da      	str	r2, [r3, #12]
      break;
 8006e66:	e014      	b.n	8006e92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0208 	orr.w	r2, r2, #8
 8006e76:	60da      	str	r2, [r3, #12]
      break;
 8006e78:	e00b      	b.n	8006e92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0210 	orr.w	r2, r2, #16
 8006e88:	60da      	str	r2, [r3, #12]
      break;
 8006e8a:	e002      	b.n	8006e92 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e90:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d14e      	bne.n	8006f36 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fba7 	bl	80085f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a25      	ldr	r2, [pc, #148]	@ (8006f40 <HAL_TIM_IC_Start_IT+0x280>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d022      	beq.n	8006ef6 <HAL_TIM_IC_Start_IT+0x236>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eb8:	d01d      	beq.n	8006ef6 <HAL_TIM_IC_Start_IT+0x236>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a21      	ldr	r2, [pc, #132]	@ (8006f44 <HAL_TIM_IC_Start_IT+0x284>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d018      	beq.n	8006ef6 <HAL_TIM_IC_Start_IT+0x236>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8006f48 <HAL_TIM_IC_Start_IT+0x288>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <HAL_TIM_IC_Start_IT+0x236>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8006f4c <HAL_TIM_IC_Start_IT+0x28c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_TIM_IC_Start_IT+0x236>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1c      	ldr	r2, [pc, #112]	@ (8006f50 <HAL_TIM_IC_Start_IT+0x290>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d009      	beq.n	8006ef6 <HAL_TIM_IC_Start_IT+0x236>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8006f54 <HAL_TIM_IC_Start_IT+0x294>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d004      	beq.n	8006ef6 <HAL_TIM_IC_Start_IT+0x236>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a19      	ldr	r2, [pc, #100]	@ (8006f58 <HAL_TIM_IC_Start_IT+0x298>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d115      	bne.n	8006f22 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	4b17      	ldr	r3, [pc, #92]	@ (8006f5c <HAL_TIM_IC_Start_IT+0x29c>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b06      	cmp	r3, #6
 8006f06:	d015      	beq.n	8006f34 <HAL_TIM_IC_Start_IT+0x274>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f0e:	d011      	beq.n	8006f34 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f20:	e008      	b.n	8006f34 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e000      	b.n	8006f36 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f34:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40000400 	.word	0x40000400
 8006f48:	40000800 	.word	0x40000800
 8006f4c:	40000c00 	.word	0x40000c00
 8006f50:	40010400 	.word	0x40010400
 8006f54:	40001800 	.word	0x40001800
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	00010007 	.word	0x00010007

08006f60 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b0c      	cmp	r3, #12
 8006f72:	d841      	bhi.n	8006ff8 <HAL_TIM_IC_Stop_IT+0x98>
 8006f74:	a201      	add	r2, pc, #4	@ (adr r2, 8006f7c <HAL_TIM_IC_Stop_IT+0x1c>)
 8006f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7a:	bf00      	nop
 8006f7c:	08006fb1 	.word	0x08006fb1
 8006f80:	08006ff9 	.word	0x08006ff9
 8006f84:	08006ff9 	.word	0x08006ff9
 8006f88:	08006ff9 	.word	0x08006ff9
 8006f8c:	08006fc3 	.word	0x08006fc3
 8006f90:	08006ff9 	.word	0x08006ff9
 8006f94:	08006ff9 	.word	0x08006ff9
 8006f98:	08006ff9 	.word	0x08006ff9
 8006f9c:	08006fd5 	.word	0x08006fd5
 8006fa0:	08006ff9 	.word	0x08006ff9
 8006fa4:	08006ff9 	.word	0x08006ff9
 8006fa8:	08006ff9 	.word	0x08006ff9
 8006fac:	08006fe7 	.word	0x08006fe7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0202 	bic.w	r2, r2, #2
 8006fbe:	60da      	str	r2, [r3, #12]
      break;
 8006fc0:	e01d      	b.n	8006ffe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68da      	ldr	r2, [r3, #12]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0204 	bic.w	r2, r2, #4
 8006fd0:	60da      	str	r2, [r3, #12]
      break;
 8006fd2:	e014      	b.n	8006ffe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68da      	ldr	r2, [r3, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0208 	bic.w	r2, r2, #8
 8006fe2:	60da      	str	r2, [r3, #12]
      break;
 8006fe4:	e00b      	b.n	8006ffe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0210 	bic.w	r2, r2, #16
 8006ff4:	60da      	str	r2, [r3, #12]
      break;
 8006ff6:	e002      	b.n	8006ffe <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffc:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d166      	bne.n	80070d2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2200      	movs	r2, #0
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f001 faf1 	bl	80085f4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6a1a      	ldr	r2, [r3, #32]
 8007018:	f241 1311 	movw	r3, #4369	@ 0x1111
 800701c:	4013      	ands	r3, r2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10f      	bne.n	8007042 <HAL_TIM_IC_Stop_IT+0xe2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	f240 4344 	movw	r3, #1092	@ 0x444
 800702c:	4013      	ands	r3, r2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d107      	bne.n	8007042 <HAL_TIM_IC_Stop_IT+0xe2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0201 	bic.w	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <HAL_TIM_IC_Stop_IT+0xf2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007050:	e023      	b.n	800709a <HAL_TIM_IC_Stop_IT+0x13a>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b04      	cmp	r3, #4
 8007056:	d104      	bne.n	8007062 <HAL_TIM_IC_Stop_IT+0x102>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007060:	e01b      	b.n	800709a <HAL_TIM_IC_Stop_IT+0x13a>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b08      	cmp	r3, #8
 8007066:	d104      	bne.n	8007072 <HAL_TIM_IC_Stop_IT+0x112>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007070:	e013      	b.n	800709a <HAL_TIM_IC_Stop_IT+0x13a>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b0c      	cmp	r3, #12
 8007076:	d104      	bne.n	8007082 <HAL_TIM_IC_Stop_IT+0x122>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007080:	e00b      	b.n	800709a <HAL_TIM_IC_Stop_IT+0x13a>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b10      	cmp	r3, #16
 8007086:	d104      	bne.n	8007092 <HAL_TIM_IC_Stop_IT+0x132>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007090:	e003      	b.n	800709a <HAL_TIM_IC_Stop_IT+0x13a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <HAL_TIM_IC_Stop_IT+0x14a>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070a8:	e013      	b.n	80070d2 <HAL_TIM_IC_Stop_IT+0x172>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d104      	bne.n	80070ba <HAL_TIM_IC_Stop_IT+0x15a>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070b8:	e00b      	b.n	80070d2 <HAL_TIM_IC_Stop_IT+0x172>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d104      	bne.n	80070ca <HAL_TIM_IC_Stop_IT+0x16a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070c8:	e003      	b.n	80070d2 <HAL_TIM_IC_Stop_IT+0x172>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d020      	beq.n	8007140 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01b      	beq.n	8007140 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0202 	mvn.w	r2, #2
 8007110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fb f82e 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 800712c:	e005      	b.n	800713a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fc14 	bl	800795c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fc1b 	bl	8007970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	d020      	beq.n	800718c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01b      	beq.n	800718c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0204 	mvn.w	r2, #4
 800715c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fb f808 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 8007178:	e005      	b.n	8007186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fbee 	bl	800795c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fbf5 	bl	8007970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f003 0308 	and.w	r3, r3, #8
 8007192:	2b00      	cmp	r3, #0
 8007194:	d020      	beq.n	80071d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01b      	beq.n	80071d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0208 	mvn.w	r2, #8
 80071a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2204      	movs	r2, #4
 80071ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	69db      	ldr	r3, [r3, #28]
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fa ffe2 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 80071c4:	e005      	b.n	80071d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fbc8 	bl	800795c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fbcf 	bl	8007970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f003 0310 	and.w	r3, r3, #16
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d020      	beq.n	8007224 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01b      	beq.n	8007224 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0210 	mvn.w	r2, #16
 80071f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2208      	movs	r2, #8
 80071fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7fa ffbc 	bl	8002188 <HAL_TIM_IC_CaptureCallback>
 8007210:	e005      	b.n	800721e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fba2 	bl	800795c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fba9 	bl	8007970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00c      	beq.n	8007248 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f06f 0201 	mvn.w	r2, #1
 8007240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fb80 	bl	8007948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00c      	beq.n	8007276 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007262:	2b00      	cmp	r3, #0
 8007264:	d007      	beq.n	8007276 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800726e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fb09 	bl	8008888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00c      	beq.n	800729a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007286:	2b00      	cmp	r3, #0
 8007288:	d007      	beq.n	800729a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 fb01 	bl	800889c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00c      	beq.n	80072be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80072b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fb63 	bl	8007984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f003 0320 	and.w	r3, r3, #32
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00c      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f003 0320 	and.w	r3, r3, #32
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f06f 0220 	mvn.w	r2, #32
 80072da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 fac9 	bl	8008874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007304:	2302      	movs	r3, #2
 8007306:	e088      	b.n	800741a <HAL_TIM_IC_ConfigChannel+0x130>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d11b      	bne.n	800734e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007326:	f000 ff9d 	bl	8008264 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	699a      	ldr	r2, [r3, #24]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 020c 	bic.w	r2, r2, #12
 8007338:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6999      	ldr	r1, [r3, #24]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	689a      	ldr	r2, [r3, #8]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	619a      	str	r2, [r3, #24]
 800734c:	e060      	b.n	8007410 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b04      	cmp	r3, #4
 8007352:	d11c      	bne.n	800738e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007364:	f001 f821 	bl	80083aa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007376:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6999      	ldr	r1, [r3, #24]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	021a      	lsls	r2, r3, #8
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	619a      	str	r2, [r3, #24]
 800738c:	e040      	b.n	8007410 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b08      	cmp	r3, #8
 8007392:	d11b      	bne.n	80073cc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80073a4:	f001 f86e 	bl	8008484 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69da      	ldr	r2, [r3, #28]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 020c 	bic.w	r2, r2, #12
 80073b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	69d9      	ldr	r1, [r3, #28]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	61da      	str	r2, [r3, #28]
 80073ca:	e021      	b.n	8007410 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b0c      	cmp	r3, #12
 80073d0:	d11c      	bne.n	800740c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80073e2:	f001 f88b 	bl	80084fc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80073f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69d9      	ldr	r1, [r3, #28]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	021a      	lsls	r2, r3, #8
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	61da      	str	r2, [r3, #28]
 800740a:	e001      	b.n	8007410 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007418:	7dfb      	ldrb	r3, [r7, #23]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800743e:	2302      	movs	r3, #2
 8007440:	e0ff      	b.n	8007642 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b14      	cmp	r3, #20
 800744e:	f200 80f0 	bhi.w	8007632 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007452:	a201      	add	r2, pc, #4	@ (adr r2, 8007458 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	080074ad 	.word	0x080074ad
 800745c:	08007633 	.word	0x08007633
 8007460:	08007633 	.word	0x08007633
 8007464:	08007633 	.word	0x08007633
 8007468:	080074ed 	.word	0x080074ed
 800746c:	08007633 	.word	0x08007633
 8007470:	08007633 	.word	0x08007633
 8007474:	08007633 	.word	0x08007633
 8007478:	0800752f 	.word	0x0800752f
 800747c:	08007633 	.word	0x08007633
 8007480:	08007633 	.word	0x08007633
 8007484:	08007633 	.word	0x08007633
 8007488:	0800756f 	.word	0x0800756f
 800748c:	08007633 	.word	0x08007633
 8007490:	08007633 	.word	0x08007633
 8007494:	08007633 	.word	0x08007633
 8007498:	080075b1 	.word	0x080075b1
 800749c:	08007633 	.word	0x08007633
 80074a0:	08007633 	.word	0x08007633
 80074a4:	08007633 	.word	0x08007633
 80074a8:	080075f1 	.word	0x080075f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fb16 	bl	8007ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699a      	ldr	r2, [r3, #24]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0208 	orr.w	r2, r2, #8
 80074c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699a      	ldr	r2, [r3, #24]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0204 	bic.w	r2, r2, #4
 80074d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6999      	ldr	r1, [r3, #24]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	691a      	ldr	r2, [r3, #16]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	619a      	str	r2, [r3, #24]
      break;
 80074ea:	e0a5      	b.n	8007638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fb86 	bl	8007c04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699a      	ldr	r2, [r3, #24]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699a      	ldr	r2, [r3, #24]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6999      	ldr	r1, [r3, #24]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	021a      	lsls	r2, r3, #8
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	619a      	str	r2, [r3, #24]
      break;
 800752c:	e084      	b.n	8007638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fbef 	bl	8007d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69da      	ldr	r2, [r3, #28]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0208 	orr.w	r2, r2, #8
 8007548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69da      	ldr	r2, [r3, #28]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0204 	bic.w	r2, r2, #4
 8007558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69d9      	ldr	r1, [r3, #28]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	61da      	str	r2, [r3, #28]
      break;
 800756c:	e064      	b.n	8007638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fc57 	bl	8007e28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69da      	ldr	r2, [r3, #28]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69da      	ldr	r2, [r3, #28]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69d9      	ldr	r1, [r3, #28]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	021a      	lsls	r2, r3, #8
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	61da      	str	r2, [r3, #28]
      break;
 80075ae:	e043      	b.n	8007638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fca0 	bl	8007efc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0208 	orr.w	r2, r2, #8
 80075ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0204 	bic.w	r2, r2, #4
 80075da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	691a      	ldr	r2, [r3, #16]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80075ee:	e023      	b.n	8007638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fce4 	bl	8007fc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800760a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800761a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	021a      	lsls	r2, r3, #8
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007630:	e002      	b.n	8007638 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	75fb      	strb	r3, [r7, #23]
      break;
 8007636:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007640:	7dfb      	ldrb	r3, [r7, #23]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop

0800764c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007660:	2b01      	cmp	r3, #1
 8007662:	d101      	bne.n	8007668 <HAL_TIM_ConfigClockSource+0x1c>
 8007664:	2302      	movs	r3, #2
 8007666:	e0dc      	b.n	8007822 <HAL_TIM_ConfigClockSource+0x1d6>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	4b6a      	ldr	r3, [pc, #424]	@ (800782c <HAL_TIM_ConfigClockSource+0x1e0>)
 8007684:	4013      	ands	r3, r2
 8007686:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800768e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a64      	ldr	r2, [pc, #400]	@ (8007830 <HAL_TIM_ConfigClockSource+0x1e4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	f000 80a9 	beq.w	80077f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80076a4:	4a62      	ldr	r2, [pc, #392]	@ (8007830 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	f200 80ae 	bhi.w	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 80076ac:	4a61      	ldr	r2, [pc, #388]	@ (8007834 <HAL_TIM_ConfigClockSource+0x1e8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	f000 80a1 	beq.w	80077f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80076b4:	4a5f      	ldr	r2, [pc, #380]	@ (8007834 <HAL_TIM_ConfigClockSource+0x1e8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	f200 80a6 	bhi.w	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 80076bc:	4a5e      	ldr	r2, [pc, #376]	@ (8007838 <HAL_TIM_ConfigClockSource+0x1ec>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	f000 8099 	beq.w	80077f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80076c4:	4a5c      	ldr	r2, [pc, #368]	@ (8007838 <HAL_TIM_ConfigClockSource+0x1ec>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	f200 809e 	bhi.w	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 80076cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076d0:	f000 8091 	beq.w	80077f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80076d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076d8:	f200 8096 	bhi.w	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 80076dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076e0:	f000 8089 	beq.w	80077f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80076e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076e8:	f200 808e 	bhi.w	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 80076ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f0:	d03e      	beq.n	8007770 <HAL_TIM_ConfigClockSource+0x124>
 80076f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f6:	f200 8087 	bhi.w	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 80076fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fe:	f000 8086 	beq.w	800780e <HAL_TIM_ConfigClockSource+0x1c2>
 8007702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007706:	d87f      	bhi.n	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 8007708:	2b70      	cmp	r3, #112	@ 0x70
 800770a:	d01a      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0xf6>
 800770c:	2b70      	cmp	r3, #112	@ 0x70
 800770e:	d87b      	bhi.n	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 8007710:	2b60      	cmp	r3, #96	@ 0x60
 8007712:	d050      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x16a>
 8007714:	2b60      	cmp	r3, #96	@ 0x60
 8007716:	d877      	bhi.n	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 8007718:	2b50      	cmp	r3, #80	@ 0x50
 800771a:	d03c      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x14a>
 800771c:	2b50      	cmp	r3, #80	@ 0x50
 800771e:	d873      	bhi.n	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 8007720:	2b40      	cmp	r3, #64	@ 0x40
 8007722:	d058      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x18a>
 8007724:	2b40      	cmp	r3, #64	@ 0x40
 8007726:	d86f      	bhi.n	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 8007728:	2b30      	cmp	r3, #48	@ 0x30
 800772a:	d064      	beq.n	80077f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800772c:	2b30      	cmp	r3, #48	@ 0x30
 800772e:	d86b      	bhi.n	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 8007730:	2b20      	cmp	r3, #32
 8007732:	d060      	beq.n	80077f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007734:	2b20      	cmp	r3, #32
 8007736:	d867      	bhi.n	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
 8007738:	2b00      	cmp	r3, #0
 800773a:	d05c      	beq.n	80077f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800773c:	2b10      	cmp	r3, #16
 800773e:	d05a      	beq.n	80077f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007740:	e062      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007752:	f000 ff2f 	bl	80085b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007764:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	609a      	str	r2, [r3, #8]
      break;
 800776e:	e04f      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007780:	f000 ff18 	bl	80085b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007792:	609a      	str	r2, [r3, #8]
      break;
 8007794:	e03c      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a2:	461a      	mov	r2, r3
 80077a4:	f000 fdd2 	bl	800834c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2150      	movs	r1, #80	@ 0x50
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fee2 	bl	8008578 <TIM_ITRx_SetConfig>
      break;
 80077b4:	e02c      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077c2:	461a      	mov	r2, r3
 80077c4:	f000 fe2e 	bl	8008424 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2160      	movs	r1, #96	@ 0x60
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fed2 	bl	8008578 <TIM_ITRx_SetConfig>
      break;
 80077d4:	e01c      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077e2:	461a      	mov	r2, r3
 80077e4:	f000 fdb2 	bl	800834c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2140      	movs	r1, #64	@ 0x40
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 fec2 	bl	8008578 <TIM_ITRx_SetConfig>
      break;
 80077f4:	e00c      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4619      	mov	r1, r3
 8007800:	4610      	mov	r0, r2
 8007802:	f000 feb9 	bl	8008578 <TIM_ITRx_SetConfig>
      break;
 8007806:	e003      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
      break;
 800780c:	e000      	b.n	8007810 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800780e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	ffceff88 	.word	0xffceff88
 8007830:	00100040 	.word	0x00100040
 8007834:	00100030 	.word	0x00100030
 8007838:	00100020 	.word	0x00100020

0800783c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800784c:	2b01      	cmp	r3, #1
 800784e:	d101      	bne.n	8007854 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007850:	2302      	movs	r3, #2
 8007852:	e031      	b.n	80078b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fc12 	bl	8008090 <TIM_SlaveTimer_SetConfig>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d009      	beq.n	8007886 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e018      	b.n	80078b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007894:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078a4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	d831      	bhi.n	8007938 <HAL_TIM_ReadCapturedValue+0x78>
 80078d4:	a201      	add	r2, pc, #4	@ (adr r2, 80078dc <HAL_TIM_ReadCapturedValue+0x1c>)
 80078d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078da:	bf00      	nop
 80078dc:	08007911 	.word	0x08007911
 80078e0:	08007939 	.word	0x08007939
 80078e4:	08007939 	.word	0x08007939
 80078e8:	08007939 	.word	0x08007939
 80078ec:	0800791b 	.word	0x0800791b
 80078f0:	08007939 	.word	0x08007939
 80078f4:	08007939 	.word	0x08007939
 80078f8:	08007939 	.word	0x08007939
 80078fc:	08007925 	.word	0x08007925
 8007900:	08007939 	.word	0x08007939
 8007904:	08007939 	.word	0x08007939
 8007908:	08007939 	.word	0x08007939
 800790c:	0800792f 	.word	0x0800792f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007916:	60fb      	str	r3, [r7, #12]

      break;
 8007918:	e00f      	b.n	800793a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007920:	60fb      	str	r3, [r7, #12]

      break;
 8007922:	e00a      	b.n	800793a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800792a:	60fb      	str	r3, [r7, #12]

      break;
 800792c:	e005      	b.n	800793a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007934:	60fb      	str	r3, [r7, #12]

      break;
 8007936:	e000      	b.n	800793a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007938:	bf00      	nop
  }

  return tmpreg;
 800793a:	68fb      	ldr	r3, [r7, #12]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a46      	ldr	r2, [pc, #280]	@ (8007ac4 <TIM_Base_SetConfig+0x12c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d013      	beq.n	80079d8 <TIM_Base_SetConfig+0x40>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b6:	d00f      	beq.n	80079d8 <TIM_Base_SetConfig+0x40>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a43      	ldr	r2, [pc, #268]	@ (8007ac8 <TIM_Base_SetConfig+0x130>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00b      	beq.n	80079d8 <TIM_Base_SetConfig+0x40>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a42      	ldr	r2, [pc, #264]	@ (8007acc <TIM_Base_SetConfig+0x134>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d007      	beq.n	80079d8 <TIM_Base_SetConfig+0x40>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a41      	ldr	r2, [pc, #260]	@ (8007ad0 <TIM_Base_SetConfig+0x138>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d003      	beq.n	80079d8 <TIM_Base_SetConfig+0x40>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a40      	ldr	r2, [pc, #256]	@ (8007ad4 <TIM_Base_SetConfig+0x13c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d108      	bne.n	80079ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a35      	ldr	r2, [pc, #212]	@ (8007ac4 <TIM_Base_SetConfig+0x12c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d01f      	beq.n	8007a32 <TIM_Base_SetConfig+0x9a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f8:	d01b      	beq.n	8007a32 <TIM_Base_SetConfig+0x9a>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a32      	ldr	r2, [pc, #200]	@ (8007ac8 <TIM_Base_SetConfig+0x130>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d017      	beq.n	8007a32 <TIM_Base_SetConfig+0x9a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a31      	ldr	r2, [pc, #196]	@ (8007acc <TIM_Base_SetConfig+0x134>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d013      	beq.n	8007a32 <TIM_Base_SetConfig+0x9a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a30      	ldr	r2, [pc, #192]	@ (8007ad0 <TIM_Base_SetConfig+0x138>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00f      	beq.n	8007a32 <TIM_Base_SetConfig+0x9a>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a2f      	ldr	r2, [pc, #188]	@ (8007ad4 <TIM_Base_SetConfig+0x13c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00b      	beq.n	8007a32 <TIM_Base_SetConfig+0x9a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8007ad8 <TIM_Base_SetConfig+0x140>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d007      	beq.n	8007a32 <TIM_Base_SetConfig+0x9a>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a2d      	ldr	r2, [pc, #180]	@ (8007adc <TIM_Base_SetConfig+0x144>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d003      	beq.n	8007a32 <TIM_Base_SetConfig+0x9a>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8007ae0 <TIM_Base_SetConfig+0x148>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d108      	bne.n	8007a44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a16      	ldr	r2, [pc, #88]	@ (8007ac4 <TIM_Base_SetConfig+0x12c>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00f      	beq.n	8007a90 <TIM_Base_SetConfig+0xf8>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a18      	ldr	r2, [pc, #96]	@ (8007ad4 <TIM_Base_SetConfig+0x13c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00b      	beq.n	8007a90 <TIM_Base_SetConfig+0xf8>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a17      	ldr	r2, [pc, #92]	@ (8007ad8 <TIM_Base_SetConfig+0x140>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d007      	beq.n	8007a90 <TIM_Base_SetConfig+0xf8>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a16      	ldr	r2, [pc, #88]	@ (8007adc <TIM_Base_SetConfig+0x144>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_Base_SetConfig+0xf8>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a15      	ldr	r2, [pc, #84]	@ (8007ae0 <TIM_Base_SetConfig+0x148>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d103      	bne.n	8007a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	691a      	ldr	r2, [r3, #16]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d105      	bne.n	8007ab6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f023 0201 	bic.w	r2, r3, #1
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	611a      	str	r2, [r3, #16]
  }
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40000400 	.word	0x40000400
 8007acc:	40000800 	.word	0x40000800
 8007ad0:	40000c00 	.word	0x40000c00
 8007ad4:	40010400 	.word	0x40010400
 8007ad8:	40014000 	.word	0x40014000
 8007adc:	40014400 	.word	0x40014400
 8007ae0:	40014800 	.word	0x40014800

08007ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	f023 0201 	bic.w	r2, r3, #1
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	4b37      	ldr	r3, [pc, #220]	@ (8007bec <TIM_OC1_SetConfig+0x108>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0303 	bic.w	r3, r3, #3
 8007b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f023 0302 	bic.w	r3, r3, #2
 8007b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a2d      	ldr	r2, [pc, #180]	@ (8007bf0 <TIM_OC1_SetConfig+0x10c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00f      	beq.n	8007b60 <TIM_OC1_SetConfig+0x7c>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a2c      	ldr	r2, [pc, #176]	@ (8007bf4 <TIM_OC1_SetConfig+0x110>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00b      	beq.n	8007b60 <TIM_OC1_SetConfig+0x7c>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8007bf8 <TIM_OC1_SetConfig+0x114>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d007      	beq.n	8007b60 <TIM_OC1_SetConfig+0x7c>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a2a      	ldr	r2, [pc, #168]	@ (8007bfc <TIM_OC1_SetConfig+0x118>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d003      	beq.n	8007b60 <TIM_OC1_SetConfig+0x7c>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a29      	ldr	r2, [pc, #164]	@ (8007c00 <TIM_OC1_SetConfig+0x11c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d10c      	bne.n	8007b7a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f023 0308 	bic.w	r3, r3, #8
 8007b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f023 0304 	bic.w	r3, r3, #4
 8007b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8007bf0 <TIM_OC1_SetConfig+0x10c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00f      	beq.n	8007ba2 <TIM_OC1_SetConfig+0xbe>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf4 <TIM_OC1_SetConfig+0x110>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d00b      	beq.n	8007ba2 <TIM_OC1_SetConfig+0xbe>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8007bf8 <TIM_OC1_SetConfig+0x114>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d007      	beq.n	8007ba2 <TIM_OC1_SetConfig+0xbe>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a19      	ldr	r2, [pc, #100]	@ (8007bfc <TIM_OC1_SetConfig+0x118>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d003      	beq.n	8007ba2 <TIM_OC1_SetConfig+0xbe>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a18      	ldr	r2, [pc, #96]	@ (8007c00 <TIM_OC1_SetConfig+0x11c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d111      	bne.n	8007bc6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	621a      	str	r2, [r3, #32]
}
 8007be0:	bf00      	nop
 8007be2:	371c      	adds	r7, #28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	fffeff8f 	.word	0xfffeff8f
 8007bf0:	40010000 	.word	0x40010000
 8007bf4:	40010400 	.word	0x40010400
 8007bf8:	40014000 	.word	0x40014000
 8007bfc:	40014400 	.word	0x40014400
 8007c00:	40014800 	.word	0x40014800

08007c04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	f023 0210 	bic.w	r2, r3, #16
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4b34      	ldr	r3, [pc, #208]	@ (8007d00 <TIM_OC2_SetConfig+0xfc>)
 8007c30:	4013      	ands	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	021b      	lsls	r3, r3, #8
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f023 0320 	bic.w	r3, r3, #32
 8007c4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a29      	ldr	r2, [pc, #164]	@ (8007d04 <TIM_OC2_SetConfig+0x100>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d003      	beq.n	8007c6c <TIM_OC2_SetConfig+0x68>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a28      	ldr	r2, [pc, #160]	@ (8007d08 <TIM_OC2_SetConfig+0x104>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d10d      	bne.n	8007c88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8007d04 <TIM_OC2_SetConfig+0x100>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00f      	beq.n	8007cb0 <TIM_OC2_SetConfig+0xac>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a1d      	ldr	r2, [pc, #116]	@ (8007d08 <TIM_OC2_SetConfig+0x104>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00b      	beq.n	8007cb0 <TIM_OC2_SetConfig+0xac>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8007d0c <TIM_OC2_SetConfig+0x108>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d007      	beq.n	8007cb0 <TIM_OC2_SetConfig+0xac>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d10 <TIM_OC2_SetConfig+0x10c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d003      	beq.n	8007cb0 <TIM_OC2_SetConfig+0xac>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a1a      	ldr	r2, [pc, #104]	@ (8007d14 <TIM_OC2_SetConfig+0x110>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d113      	bne.n	8007cd8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	621a      	str	r2, [r3, #32]
}
 8007cf2:	bf00      	nop
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	feff8fff 	.word	0xfeff8fff
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40010400 	.word	0x40010400
 8007d0c:	40014000 	.word	0x40014000
 8007d10:	40014400 	.word	0x40014400
 8007d14:	40014800 	.word	0x40014800

08007d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4b33      	ldr	r3, [pc, #204]	@ (8007e10 <TIM_OC3_SetConfig+0xf8>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 0303 	bic.w	r3, r3, #3
 8007d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	021b      	lsls	r3, r3, #8
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a28      	ldr	r2, [pc, #160]	@ (8007e14 <TIM_OC3_SetConfig+0xfc>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d003      	beq.n	8007d7e <TIM_OC3_SetConfig+0x66>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a27      	ldr	r2, [pc, #156]	@ (8007e18 <TIM_OC3_SetConfig+0x100>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d10d      	bne.n	8007d9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e14 <TIM_OC3_SetConfig+0xfc>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00f      	beq.n	8007dc2 <TIM_OC3_SetConfig+0xaa>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e18 <TIM_OC3_SetConfig+0x100>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00b      	beq.n	8007dc2 <TIM_OC3_SetConfig+0xaa>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a1b      	ldr	r2, [pc, #108]	@ (8007e1c <TIM_OC3_SetConfig+0x104>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d007      	beq.n	8007dc2 <TIM_OC3_SetConfig+0xaa>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a1a      	ldr	r2, [pc, #104]	@ (8007e20 <TIM_OC3_SetConfig+0x108>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_OC3_SetConfig+0xaa>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a19      	ldr	r2, [pc, #100]	@ (8007e24 <TIM_OC3_SetConfig+0x10c>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d113      	bne.n	8007dea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	621a      	str	r2, [r3, #32]
}
 8007e04:	bf00      	nop
 8007e06:	371c      	adds	r7, #28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	fffeff8f 	.word	0xfffeff8f
 8007e14:	40010000 	.word	0x40010000
 8007e18:	40010400 	.word	0x40010400
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40014400 	.word	0x40014400
 8007e24:	40014800 	.word	0x40014800

08007e28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4b24      	ldr	r3, [pc, #144]	@ (8007ee4 <TIM_OC4_SetConfig+0xbc>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	031b      	lsls	r3, r3, #12
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a19      	ldr	r2, [pc, #100]	@ (8007ee8 <TIM_OC4_SetConfig+0xc0>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00f      	beq.n	8007ea8 <TIM_OC4_SetConfig+0x80>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a18      	ldr	r2, [pc, #96]	@ (8007eec <TIM_OC4_SetConfig+0xc4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d00b      	beq.n	8007ea8 <TIM_OC4_SetConfig+0x80>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a17      	ldr	r2, [pc, #92]	@ (8007ef0 <TIM_OC4_SetConfig+0xc8>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d007      	beq.n	8007ea8 <TIM_OC4_SetConfig+0x80>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a16      	ldr	r2, [pc, #88]	@ (8007ef4 <TIM_OC4_SetConfig+0xcc>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d003      	beq.n	8007ea8 <TIM_OC4_SetConfig+0x80>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a15      	ldr	r2, [pc, #84]	@ (8007ef8 <TIM_OC4_SetConfig+0xd0>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d109      	bne.n	8007ebc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	019b      	lsls	r3, r3, #6
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	621a      	str	r2, [r3, #32]
}
 8007ed6:	bf00      	nop
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	feff8fff 	.word	0xfeff8fff
 8007ee8:	40010000 	.word	0x40010000
 8007eec:	40010400 	.word	0x40010400
 8007ef0:	40014000 	.word	0x40014000
 8007ef4:	40014400 	.word	0x40014400
 8007ef8:	40014800 	.word	0x40014800

08007efc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4b21      	ldr	r3, [pc, #132]	@ (8007fac <TIM_OC5_SetConfig+0xb0>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	041b      	lsls	r3, r3, #16
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a18      	ldr	r2, [pc, #96]	@ (8007fb0 <TIM_OC5_SetConfig+0xb4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00f      	beq.n	8007f72 <TIM_OC5_SetConfig+0x76>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a17      	ldr	r2, [pc, #92]	@ (8007fb4 <TIM_OC5_SetConfig+0xb8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00b      	beq.n	8007f72 <TIM_OC5_SetConfig+0x76>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a16      	ldr	r2, [pc, #88]	@ (8007fb8 <TIM_OC5_SetConfig+0xbc>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d007      	beq.n	8007f72 <TIM_OC5_SetConfig+0x76>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a15      	ldr	r2, [pc, #84]	@ (8007fbc <TIM_OC5_SetConfig+0xc0>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d003      	beq.n	8007f72 <TIM_OC5_SetConfig+0x76>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a14      	ldr	r2, [pc, #80]	@ (8007fc0 <TIM_OC5_SetConfig+0xc4>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d109      	bne.n	8007f86 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	021b      	lsls	r3, r3, #8
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	621a      	str	r2, [r3, #32]
}
 8007fa0:	bf00      	nop
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	fffeff8f 	.word	0xfffeff8f
 8007fb0:	40010000 	.word	0x40010000
 8007fb4:	40010400 	.word	0x40010400
 8007fb8:	40014000 	.word	0x40014000
 8007fbc:	40014400 	.word	0x40014400
 8007fc0:	40014800 	.word	0x40014800

08007fc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	4b22      	ldr	r3, [pc, #136]	@ (8008078 <TIM_OC6_SetConfig+0xb4>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	051b      	lsls	r3, r3, #20
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a19      	ldr	r2, [pc, #100]	@ (800807c <TIM_OC6_SetConfig+0xb8>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00f      	beq.n	800803c <TIM_OC6_SetConfig+0x78>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a18      	ldr	r2, [pc, #96]	@ (8008080 <TIM_OC6_SetConfig+0xbc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00b      	beq.n	800803c <TIM_OC6_SetConfig+0x78>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a17      	ldr	r2, [pc, #92]	@ (8008084 <TIM_OC6_SetConfig+0xc0>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d007      	beq.n	800803c <TIM_OC6_SetConfig+0x78>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a16      	ldr	r2, [pc, #88]	@ (8008088 <TIM_OC6_SetConfig+0xc4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d003      	beq.n	800803c <TIM_OC6_SetConfig+0x78>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a15      	ldr	r2, [pc, #84]	@ (800808c <TIM_OC6_SetConfig+0xc8>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d109      	bne.n	8008050 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008042:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	029b      	lsls	r3, r3, #10
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	621a      	str	r2, [r3, #32]
}
 800806a:	bf00      	nop
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	feff8fff 	.word	0xfeff8fff
 800807c:	40010000 	.word	0x40010000
 8008080:	40010400 	.word	0x40010400
 8008084:	40014000 	.word	0x40014000
 8008088:	40014400 	.word	0x40014400
 800808c:	40014800 	.word	0x40014800

08008090 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	4b65      	ldr	r3, [pc, #404]	@ (8008240 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80080aa:	4013      	ands	r3, r2
 80080ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	4b62      	ldr	r3, [pc, #392]	@ (8008244 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80080bc:	4013      	ands	r3, r2
 80080be:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	4a5c      	ldr	r2, [pc, #368]	@ (8008248 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	f000 80ab 	beq.w	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 80080de:	4a5a      	ldr	r2, [pc, #360]	@ (8008248 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	f200 80a4 	bhi.w	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 80080e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080ea:	f000 80a3 	beq.w	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 80080ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080f2:	f200 809c 	bhi.w	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 80080f6:	4a55      	ldr	r2, [pc, #340]	@ (800824c <TIM_SlaveTimer_SetConfig+0x1bc>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	f000 809b 	beq.w	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 80080fe:	4a53      	ldr	r2, [pc, #332]	@ (800824c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008100:	4293      	cmp	r3, r2
 8008102:	f200 8094 	bhi.w	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 8008106:	4a52      	ldr	r2, [pc, #328]	@ (8008250 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	f000 8093 	beq.w	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 800810e:	4a50      	ldr	r2, [pc, #320]	@ (8008250 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008110:	4293      	cmp	r3, r2
 8008112:	f200 808c 	bhi.w	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 8008116:	4a4f      	ldr	r2, [pc, #316]	@ (8008254 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8008118:	4293      	cmp	r3, r2
 800811a:	f000 808b 	beq.w	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 800811e:	4a4d      	ldr	r2, [pc, #308]	@ (8008254 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	f200 8084 	bhi.w	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 8008126:	4a4c      	ldr	r2, [pc, #304]	@ (8008258 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8008128:	4293      	cmp	r3, r2
 800812a:	f000 8083 	beq.w	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 800812e:	4a4a      	ldr	r2, [pc, #296]	@ (8008258 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d87c      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 8008134:	4a49      	ldr	r2, [pc, #292]	@ (800825c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d07c      	beq.n	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 800813a:	4a48      	ldr	r2, [pc, #288]	@ (800825c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d876      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 8008140:	4a47      	ldr	r2, [pc, #284]	@ (8008260 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d076      	beq.n	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008146:	4a46      	ldr	r2, [pc, #280]	@ (8008260 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d870      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 800814c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008150:	d070      	beq.n	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008152:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008156:	d86a      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 8008158:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800815c:	d06a      	beq.n	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 800815e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008162:	d864      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 8008164:	2b70      	cmp	r3, #112	@ 0x70
 8008166:	d01a      	beq.n	800819e <TIM_SlaveTimer_SetConfig+0x10e>
 8008168:	2b70      	cmp	r3, #112	@ 0x70
 800816a:	d860      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 800816c:	2b60      	cmp	r3, #96	@ 0x60
 800816e:	d054      	beq.n	800821a <TIM_SlaveTimer_SetConfig+0x18a>
 8008170:	2b60      	cmp	r3, #96	@ 0x60
 8008172:	d85c      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 8008174:	2b50      	cmp	r3, #80	@ 0x50
 8008176:	d046      	beq.n	8008206 <TIM_SlaveTimer_SetConfig+0x176>
 8008178:	2b50      	cmp	r3, #80	@ 0x50
 800817a:	d858      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 800817c:	2b40      	cmp	r3, #64	@ 0x40
 800817e:	d019      	beq.n	80081b4 <TIM_SlaveTimer_SetConfig+0x124>
 8008180:	2b40      	cmp	r3, #64	@ 0x40
 8008182:	d854      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 8008184:	2b30      	cmp	r3, #48	@ 0x30
 8008186:	d055      	beq.n	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008188:	2b30      	cmp	r3, #48	@ 0x30
 800818a:	d850      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 800818c:	2b20      	cmp	r3, #32
 800818e:	d051      	beq.n	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008190:	2b20      	cmp	r3, #32
 8008192:	d84c      	bhi.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
 8008194:	2b00      	cmp	r3, #0
 8008196:	d04d      	beq.n	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008198:	2b10      	cmp	r3, #16
 800819a:	d04b      	beq.n	8008234 <TIM_SlaveTimer_SetConfig+0x1a4>
 800819c:	e047      	b.n	800822e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80081ae:	f000 fa01 	bl	80085b4 <TIM_ETR_SetConfig>
      break;
 80081b2:	e040      	b.n	8008236 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b05      	cmp	r3, #5
 80081ba:	d101      	bne.n	80081c0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e03b      	b.n	8008238 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6a1a      	ldr	r2, [r3, #32]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0201 	bic.w	r2, r2, #1
 80081d6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081e6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	011b      	lsls	r3, r3, #4
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	621a      	str	r2, [r3, #32]
      break;
 8008204:	e017      	b.n	8008236 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008212:	461a      	mov	r2, r3
 8008214:	f000 f89a 	bl	800834c <TIM_TI1_ConfigInputStage>
      break;
 8008218:	e00d      	b.n	8008236 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008226:	461a      	mov	r2, r3
 8008228:	f000 f8fc 	bl	8008424 <TIM_TI2_ConfigInputStage>
      break;
 800822c:	e003      	b.n	8008236 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	75fb      	strb	r3, [r7, #23]
      break;
 8008232:	e000      	b.n	8008236 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8008234:	bf00      	nop
  }

  return status;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	ffcfff8f 	.word	0xffcfff8f
 8008244:	fffefff8 	.word	0xfffefff8
 8008248:	00200010 	.word	0x00200010
 800824c:	00100070 	.word	0x00100070
 8008250:	00100060 	.word	0x00100060
 8008254:	00100050 	.word	0x00100050
 8008258:	00100040 	.word	0x00100040
 800825c:	00100030 	.word	0x00100030
 8008260:	00100020 	.word	0x00100020

08008264 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	f023 0201 	bic.w	r2, r3, #1
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4a28      	ldr	r2, [pc, #160]	@ (8008330 <TIM_TI1_SetConfig+0xcc>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d01b      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008298:	d017      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4a25      	ldr	r2, [pc, #148]	@ (8008334 <TIM_TI1_SetConfig+0xd0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d013      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4a24      	ldr	r2, [pc, #144]	@ (8008338 <TIM_TI1_SetConfig+0xd4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d00f      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4a23      	ldr	r2, [pc, #140]	@ (800833c <TIM_TI1_SetConfig+0xd8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00b      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4a22      	ldr	r2, [pc, #136]	@ (8008340 <TIM_TI1_SetConfig+0xdc>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d007      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4a21      	ldr	r2, [pc, #132]	@ (8008344 <TIM_TI1_SetConfig+0xe0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_TI1_SetConfig+0x66>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4a20      	ldr	r2, [pc, #128]	@ (8008348 <TIM_TI1_SetConfig+0xe4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d101      	bne.n	80082ce <TIM_TI1_SetConfig+0x6a>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <TIM_TI1_SetConfig+0x6c>
 80082ce:	2300      	movs	r3, #0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d008      	beq.n	80082e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]
 80082e4:	e003      	b.n	80082ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f043 0301 	orr.w	r3, r3, #1
 80082ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f023 030a 	bic.w	r3, r3, #10
 8008308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f003 030a 	and.w	r3, r3, #10
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	621a      	str	r2, [r3, #32]
}
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40010000 	.word	0x40010000
 8008334:	40000400 	.word	0x40000400
 8008338:	40000800 	.word	0x40000800
 800833c:	40000c00 	.word	0x40000c00
 8008340:	40010400 	.word	0x40010400
 8008344:	40001800 	.word	0x40001800
 8008348:	40014000 	.word	0x40014000

0800834c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	f023 0201 	bic.w	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	011b      	lsls	r3, r3, #4
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f023 030a 	bic.w	r3, r3, #10
 8008388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4313      	orrs	r3, r2
 8008390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b087      	sub	sp, #28
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
 80083b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	f023 0210 	bic.w	r2, r3, #16
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4313      	orrs	r3, r2
 80083e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	031b      	lsls	r3, r3, #12
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80083fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	4313      	orrs	r3, r2
 800840a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	621a      	str	r2, [r3, #32]
}
 8008418:	bf00      	nop
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	f023 0210 	bic.w	r2, r3, #16
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800844e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	031b      	lsls	r3, r3, #12
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008460:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	621a      	str	r2, [r3, #32]
}
 8008478:	bf00      	nop
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f023 0303 	bic.w	r3, r3, #3
 80084b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80084d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	621a      	str	r2, [r3, #32]
}
 80084f0:	bf00      	nop
 80084f2:	371c      	adds	r7, #28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008528:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	4313      	orrs	r3, r2
 8008532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800853a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	031b      	lsls	r3, r3, #12
 8008540:	b29b      	uxth	r3, r3
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800854e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	031b      	lsls	r3, r3, #12
 8008554:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	621a      	str	r2, [r3, #32]
}
 800856a:	bf00      	nop
 800856c:	371c      	adds	r7, #28
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
	...

08008578 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4b09      	ldr	r3, [pc, #36]	@ (80085b0 <TIM_ITRx_SetConfig+0x38>)
 800858c:	4013      	ands	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	4313      	orrs	r3, r2
 8008596:	f043 0307 	orr.w	r3, r3, #7
 800859a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	609a      	str	r2, [r3, #8]
}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	ffcfff8f 	.word	0xffcfff8f

080085b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	021a      	lsls	r2, r3, #8
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	431a      	orrs	r2, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	4313      	orrs	r3, r2
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	4313      	orrs	r3, r2
 80085e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	609a      	str	r2, [r3, #8]
}
 80085e8:	bf00      	nop
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f003 031f 	and.w	r3, r3, #31
 8008606:	2201      	movs	r2, #1
 8008608:	fa02 f303 	lsl.w	r3, r2, r3
 800860c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a1a      	ldr	r2, [r3, #32]
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	43db      	mvns	r3, r3
 8008616:	401a      	ands	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a1a      	ldr	r2, [r3, #32]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f003 031f 	and.w	r3, r3, #31
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	fa01 f303 	lsl.w	r3, r1, r3
 800862c:	431a      	orrs	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]
}
 8008632:	bf00      	nop
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
	...

08008640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008650:	2b01      	cmp	r3, #1
 8008652:	d101      	bne.n	8008658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008654:	2302      	movs	r3, #2
 8008656:	e06d      	b.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a30      	ldr	r2, [pc, #192]	@ (8008740 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d004      	beq.n	800868c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a2f      	ldr	r2, [pc, #188]	@ (8008744 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d108      	bne.n	800869e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008692:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	4313      	orrs	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a20      	ldr	r2, [pc, #128]	@ (8008740 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d022      	beq.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ca:	d01d      	beq.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008748 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d018      	beq.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a1c      	ldr	r2, [pc, #112]	@ (800874c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d013      	beq.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008750 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d00e      	beq.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a15      	ldr	r2, [pc, #84]	@ (8008744 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d009      	beq.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a16      	ldr	r2, [pc, #88]	@ (8008754 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d004      	beq.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a15      	ldr	r2, [pc, #84]	@ (8008758 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d10c      	bne.n	8008722 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800870e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	4313      	orrs	r3, r2
 8008718:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr
 8008740:	40010000 	.word	0x40010000
 8008744:	40010400 	.word	0x40010400
 8008748:	40000400 	.word	0x40000400
 800874c:	40000800 	.word	0x40000800
 8008750:	40000c00 	.word	0x40000c00
 8008754:	40001800 	.word	0x40001800
 8008758:	40014000 	.word	0x40014000

0800875c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008770:	2b01      	cmp	r3, #1
 8008772:	d101      	bne.n	8008778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008774:	2302      	movs	r3, #2
 8008776:	e073      	b.n	8008860 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	695b      	ldr	r3, [r3, #20]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	041b      	lsls	r3, r3, #16
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a19      	ldr	r2, [pc, #100]	@ (800886c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d004      	beq.n	8008814 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a18      	ldr	r2, [pc, #96]	@ (8008870 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d11c      	bne.n	800884e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881e:	051b      	lsls	r3, r3, #20
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883c:	4313      	orrs	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	40010000 	.word	0x40010000
 8008870:	40010400 	.word	0x40010400

08008874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e042      	b.n	8008948 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7fa fa35 	bl	8002d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2224      	movs	r2, #36	@ 0x24
 80088de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f022 0201 	bic.w	r2, r2, #1
 80088f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fe94 	bl	8009628 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 f825 	bl	8008950 <UART_SetConfig>
 8008906:	4603      	mov	r3, r0
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e01b      	b.n	8008948 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800891e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800892e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f042 0201 	orr.w	r2, r2, #1
 800893e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 ff13 	bl	800976c <UART_CheckIdleState>
 8008946:	4603      	mov	r3, r0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008954:	b092      	sub	sp, #72	@ 0x48
 8008956:	af00      	add	r7, sp, #0
 8008958:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	431a      	orrs	r2, r3
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	431a      	orrs	r2, r3
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	4313      	orrs	r3, r2
 8008976:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4bbe      	ldr	r3, [pc, #760]	@ (8008c78 <UART_SetConfig+0x328>)
 8008980:	4013      	ands	r3, r2
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	6812      	ldr	r2, [r2, #0]
 8008986:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008988:	430b      	orrs	r3, r1
 800898a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4ab3      	ldr	r2, [pc, #716]	@ (8008c7c <UART_SetConfig+0x32c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d004      	beq.n	80089bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089b8:	4313      	orrs	r3, r2
 80089ba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	4baf      	ldr	r3, [pc, #700]	@ (8008c80 <UART_SetConfig+0x330>)
 80089c4:	4013      	ands	r3, r2
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089cc:	430b      	orrs	r3, r1
 80089ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	f023 010f 	bic.w	r1, r3, #15
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4aa6      	ldr	r2, [pc, #664]	@ (8008c84 <UART_SetConfig+0x334>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d177      	bne.n	8008ae0 <UART_SetConfig+0x190>
 80089f0:	4ba5      	ldr	r3, [pc, #660]	@ (8008c88 <UART_SetConfig+0x338>)
 80089f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089f8:	2b28      	cmp	r3, #40	@ 0x28
 80089fa:	d86d      	bhi.n	8008ad8 <UART_SetConfig+0x188>
 80089fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <UART_SetConfig+0xb4>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008aa9 	.word	0x08008aa9
 8008a08:	08008ad9 	.word	0x08008ad9
 8008a0c:	08008ad9 	.word	0x08008ad9
 8008a10:	08008ad9 	.word	0x08008ad9
 8008a14:	08008ad9 	.word	0x08008ad9
 8008a18:	08008ad9 	.word	0x08008ad9
 8008a1c:	08008ad9 	.word	0x08008ad9
 8008a20:	08008ad9 	.word	0x08008ad9
 8008a24:	08008ab1 	.word	0x08008ab1
 8008a28:	08008ad9 	.word	0x08008ad9
 8008a2c:	08008ad9 	.word	0x08008ad9
 8008a30:	08008ad9 	.word	0x08008ad9
 8008a34:	08008ad9 	.word	0x08008ad9
 8008a38:	08008ad9 	.word	0x08008ad9
 8008a3c:	08008ad9 	.word	0x08008ad9
 8008a40:	08008ad9 	.word	0x08008ad9
 8008a44:	08008ab9 	.word	0x08008ab9
 8008a48:	08008ad9 	.word	0x08008ad9
 8008a4c:	08008ad9 	.word	0x08008ad9
 8008a50:	08008ad9 	.word	0x08008ad9
 8008a54:	08008ad9 	.word	0x08008ad9
 8008a58:	08008ad9 	.word	0x08008ad9
 8008a5c:	08008ad9 	.word	0x08008ad9
 8008a60:	08008ad9 	.word	0x08008ad9
 8008a64:	08008ac1 	.word	0x08008ac1
 8008a68:	08008ad9 	.word	0x08008ad9
 8008a6c:	08008ad9 	.word	0x08008ad9
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008ad9 	.word	0x08008ad9
 8008a78:	08008ad9 	.word	0x08008ad9
 8008a7c:	08008ad9 	.word	0x08008ad9
 8008a80:	08008ad9 	.word	0x08008ad9
 8008a84:	08008ac9 	.word	0x08008ac9
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	08008ad9 	.word	0x08008ad9
 8008a90:	08008ad9 	.word	0x08008ad9
 8008a94:	08008ad9 	.word	0x08008ad9
 8008a98:	08008ad9 	.word	0x08008ad9
 8008a9c:	08008ad9 	.word	0x08008ad9
 8008aa0:	08008ad9 	.word	0x08008ad9
 8008aa4:	08008ad1 	.word	0x08008ad1
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aae:	e326      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab6:	e322      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ab8:	2308      	movs	r3, #8
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008abe:	e31e      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac6:	e31a      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ac8:	2320      	movs	r3, #32
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ace:	e316      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ad0:	2340      	movs	r3, #64	@ 0x40
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad6:	e312      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ad8:	2380      	movs	r3, #128	@ 0x80
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ade:	e30e      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a69      	ldr	r2, [pc, #420]	@ (8008c8c <UART_SetConfig+0x33c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d130      	bne.n	8008b4c <UART_SetConfig+0x1fc>
 8008aea:	4b67      	ldr	r3, [pc, #412]	@ (8008c88 <UART_SetConfig+0x338>)
 8008aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d826      	bhi.n	8008b44 <UART_SetConfig+0x1f4>
 8008af6:	a201      	add	r2, pc, #4	@ (adr r2, 8008afc <UART_SetConfig+0x1ac>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b15 	.word	0x08008b15
 8008b00:	08008b1d 	.word	0x08008b1d
 8008b04:	08008b25 	.word	0x08008b25
 8008b08:	08008b2d 	.word	0x08008b2d
 8008b0c:	08008b35 	.word	0x08008b35
 8008b10:	08008b3d 	.word	0x08008b3d
 8008b14:	2300      	movs	r3, #0
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1a:	e2f0      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b22:	e2ec      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b24:	2308      	movs	r3, #8
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b2a:	e2e8      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b32:	e2e4      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b34:	2320      	movs	r3, #32
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3a:	e2e0      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b3c:	2340      	movs	r3, #64	@ 0x40
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b42:	e2dc      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b44:	2380      	movs	r3, #128	@ 0x80
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4a:	e2d8      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a4f      	ldr	r2, [pc, #316]	@ (8008c90 <UART_SetConfig+0x340>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d130      	bne.n	8008bb8 <UART_SetConfig+0x268>
 8008b56:	4b4c      	ldr	r3, [pc, #304]	@ (8008c88 <UART_SetConfig+0x338>)
 8008b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	2b05      	cmp	r3, #5
 8008b60:	d826      	bhi.n	8008bb0 <UART_SetConfig+0x260>
 8008b62:	a201      	add	r2, pc, #4	@ (adr r2, 8008b68 <UART_SetConfig+0x218>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b81 	.word	0x08008b81
 8008b6c:	08008b89 	.word	0x08008b89
 8008b70:	08008b91 	.word	0x08008b91
 8008b74:	08008b99 	.word	0x08008b99
 8008b78:	08008ba1 	.word	0x08008ba1
 8008b7c:	08008ba9 	.word	0x08008ba9
 8008b80:	2300      	movs	r3, #0
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b86:	e2ba      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8e:	e2b6      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b90:	2308      	movs	r3, #8
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b96:	e2b2      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008b98:	2310      	movs	r3, #16
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9e:	e2ae      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba6:	e2aa      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ba8:	2340      	movs	r3, #64	@ 0x40
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bae:	e2a6      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008bb0:	2380      	movs	r3, #128	@ 0x80
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	e2a2      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a35      	ldr	r2, [pc, #212]	@ (8008c94 <UART_SetConfig+0x344>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d130      	bne.n	8008c24 <UART_SetConfig+0x2d4>
 8008bc2:	4b31      	ldr	r3, [pc, #196]	@ (8008c88 <UART_SetConfig+0x338>)
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d826      	bhi.n	8008c1c <UART_SetConfig+0x2cc>
 8008bce:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd4 <UART_SetConfig+0x284>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	08008bfd 	.word	0x08008bfd
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf2:	e284      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfa:	e280      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008bfc:	2308      	movs	r3, #8
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c02:	e27c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c04:	2310      	movs	r3, #16
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0a:	e278      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c0c:	2320      	movs	r3, #32
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c12:	e274      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c14:	2340      	movs	r3, #64	@ 0x40
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1a:	e270      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c1c:	2380      	movs	r3, #128	@ 0x80
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c22:	e26c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a1b      	ldr	r2, [pc, #108]	@ (8008c98 <UART_SetConfig+0x348>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d142      	bne.n	8008cb4 <UART_SetConfig+0x364>
 8008c2e:	4b16      	ldr	r3, [pc, #88]	@ (8008c88 <UART_SetConfig+0x338>)
 8008c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	2b05      	cmp	r3, #5
 8008c38:	d838      	bhi.n	8008cac <UART_SetConfig+0x35c>
 8008c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c40 <UART_SetConfig+0x2f0>)
 8008c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c40:	08008c59 	.word	0x08008c59
 8008c44:	08008c61 	.word	0x08008c61
 8008c48:	08008c69 	.word	0x08008c69
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c9d 	.word	0x08008c9d
 8008c54:	08008ca5 	.word	0x08008ca5
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e24e      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c60:	2304      	movs	r3, #4
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e24a      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c68:	2308      	movs	r3, #8
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e246      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c70:	2310      	movs	r3, #16
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e242      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008c78:	cfff69f3 	.word	0xcfff69f3
 8008c7c:	58000c00 	.word	0x58000c00
 8008c80:	11fff4ff 	.word	0x11fff4ff
 8008c84:	40011000 	.word	0x40011000
 8008c88:	58024400 	.word	0x58024400
 8008c8c:	40004400 	.word	0x40004400
 8008c90:	40004800 	.word	0x40004800
 8008c94:	40004c00 	.word	0x40004c00
 8008c98:	40005000 	.word	0x40005000
 8008c9c:	2320      	movs	r3, #32
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca2:	e22c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008ca4:	2340      	movs	r3, #64	@ 0x40
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008caa:	e228      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008cac:	2380      	movs	r3, #128	@ 0x80
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb2:	e224      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4ab1      	ldr	r2, [pc, #708]	@ (8008f80 <UART_SetConfig+0x630>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d176      	bne.n	8008dac <UART_SetConfig+0x45c>
 8008cbe:	4bb1      	ldr	r3, [pc, #708]	@ (8008f84 <UART_SetConfig+0x634>)
 8008cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cc6:	2b28      	cmp	r3, #40	@ 0x28
 8008cc8:	d86c      	bhi.n	8008da4 <UART_SetConfig+0x454>
 8008cca:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd0 <UART_SetConfig+0x380>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008d75 	.word	0x08008d75
 8008cd4:	08008da5 	.word	0x08008da5
 8008cd8:	08008da5 	.word	0x08008da5
 8008cdc:	08008da5 	.word	0x08008da5
 8008ce0:	08008da5 	.word	0x08008da5
 8008ce4:	08008da5 	.word	0x08008da5
 8008ce8:	08008da5 	.word	0x08008da5
 8008cec:	08008da5 	.word	0x08008da5
 8008cf0:	08008d7d 	.word	0x08008d7d
 8008cf4:	08008da5 	.word	0x08008da5
 8008cf8:	08008da5 	.word	0x08008da5
 8008cfc:	08008da5 	.word	0x08008da5
 8008d00:	08008da5 	.word	0x08008da5
 8008d04:	08008da5 	.word	0x08008da5
 8008d08:	08008da5 	.word	0x08008da5
 8008d0c:	08008da5 	.word	0x08008da5
 8008d10:	08008d85 	.word	0x08008d85
 8008d14:	08008da5 	.word	0x08008da5
 8008d18:	08008da5 	.word	0x08008da5
 8008d1c:	08008da5 	.word	0x08008da5
 8008d20:	08008da5 	.word	0x08008da5
 8008d24:	08008da5 	.word	0x08008da5
 8008d28:	08008da5 	.word	0x08008da5
 8008d2c:	08008da5 	.word	0x08008da5
 8008d30:	08008d8d 	.word	0x08008d8d
 8008d34:	08008da5 	.word	0x08008da5
 8008d38:	08008da5 	.word	0x08008da5
 8008d3c:	08008da5 	.word	0x08008da5
 8008d40:	08008da5 	.word	0x08008da5
 8008d44:	08008da5 	.word	0x08008da5
 8008d48:	08008da5 	.word	0x08008da5
 8008d4c:	08008da5 	.word	0x08008da5
 8008d50:	08008d95 	.word	0x08008d95
 8008d54:	08008da5 	.word	0x08008da5
 8008d58:	08008da5 	.word	0x08008da5
 8008d5c:	08008da5 	.word	0x08008da5
 8008d60:	08008da5 	.word	0x08008da5
 8008d64:	08008da5 	.word	0x08008da5
 8008d68:	08008da5 	.word	0x08008da5
 8008d6c:	08008da5 	.word	0x08008da5
 8008d70:	08008d9d 	.word	0x08008d9d
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7a:	e1c0      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008d7c:	2304      	movs	r3, #4
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d82:	e1bc      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008d84:	2308      	movs	r3, #8
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8a:	e1b8      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d92:	e1b4      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008d94:	2320      	movs	r3, #32
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9a:	e1b0      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008d9c:	2340      	movs	r3, #64	@ 0x40
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da2:	e1ac      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008da4:	2380      	movs	r3, #128	@ 0x80
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008daa:	e1a8      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a75      	ldr	r2, [pc, #468]	@ (8008f88 <UART_SetConfig+0x638>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d130      	bne.n	8008e18 <UART_SetConfig+0x4c8>
 8008db6:	4b73      	ldr	r3, [pc, #460]	@ (8008f84 <UART_SetConfig+0x634>)
 8008db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	2b05      	cmp	r3, #5
 8008dc0:	d826      	bhi.n	8008e10 <UART_SetConfig+0x4c0>
 8008dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc8 <UART_SetConfig+0x478>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008de1 	.word	0x08008de1
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008df1 	.word	0x08008df1
 8008dd4:	08008df9 	.word	0x08008df9
 8008dd8:	08008e01 	.word	0x08008e01
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	2300      	movs	r3, #0
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e18a      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008de8:	2304      	movs	r3, #4
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dee:	e186      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008df0:	2308      	movs	r3, #8
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df6:	e182      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008df8:	2310      	movs	r3, #16
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfe:	e17e      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e00:	2320      	movs	r3, #32
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e06:	e17a      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e08:	2340      	movs	r3, #64	@ 0x40
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0e:	e176      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e10:	2380      	movs	r3, #128	@ 0x80
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e16:	e172      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a5b      	ldr	r2, [pc, #364]	@ (8008f8c <UART_SetConfig+0x63c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d130      	bne.n	8008e84 <UART_SetConfig+0x534>
 8008e22:	4b58      	ldr	r3, [pc, #352]	@ (8008f84 <UART_SetConfig+0x634>)
 8008e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	d826      	bhi.n	8008e7c <UART_SetConfig+0x52c>
 8008e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <UART_SetConfig+0x4e4>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008e4d 	.word	0x08008e4d
 8008e38:	08008e55 	.word	0x08008e55
 8008e3c:	08008e5d 	.word	0x08008e5d
 8008e40:	08008e65 	.word	0x08008e65
 8008e44:	08008e6d 	.word	0x08008e6d
 8008e48:	08008e75 	.word	0x08008e75
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e154      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e54:	2304      	movs	r3, #4
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e150      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e14c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e64:	2310      	movs	r3, #16
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e148      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e144      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e74:	2340      	movs	r3, #64	@ 0x40
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e140      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e7c:	2380      	movs	r3, #128	@ 0x80
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e82:	e13c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a41      	ldr	r2, [pc, #260]	@ (8008f90 <UART_SetConfig+0x640>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	f040 8082 	bne.w	8008f94 <UART_SetConfig+0x644>
 8008e90:	4b3c      	ldr	r3, [pc, #240]	@ (8008f84 <UART_SetConfig+0x634>)
 8008e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e98:	2b28      	cmp	r3, #40	@ 0x28
 8008e9a:	d86d      	bhi.n	8008f78 <UART_SetConfig+0x628>
 8008e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea4 <UART_SetConfig+0x554>)
 8008e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea2:	bf00      	nop
 8008ea4:	08008f49 	.word	0x08008f49
 8008ea8:	08008f79 	.word	0x08008f79
 8008eac:	08008f79 	.word	0x08008f79
 8008eb0:	08008f79 	.word	0x08008f79
 8008eb4:	08008f79 	.word	0x08008f79
 8008eb8:	08008f79 	.word	0x08008f79
 8008ebc:	08008f79 	.word	0x08008f79
 8008ec0:	08008f79 	.word	0x08008f79
 8008ec4:	08008f51 	.word	0x08008f51
 8008ec8:	08008f79 	.word	0x08008f79
 8008ecc:	08008f79 	.word	0x08008f79
 8008ed0:	08008f79 	.word	0x08008f79
 8008ed4:	08008f79 	.word	0x08008f79
 8008ed8:	08008f79 	.word	0x08008f79
 8008edc:	08008f79 	.word	0x08008f79
 8008ee0:	08008f79 	.word	0x08008f79
 8008ee4:	08008f59 	.word	0x08008f59
 8008ee8:	08008f79 	.word	0x08008f79
 8008eec:	08008f79 	.word	0x08008f79
 8008ef0:	08008f79 	.word	0x08008f79
 8008ef4:	08008f79 	.word	0x08008f79
 8008ef8:	08008f79 	.word	0x08008f79
 8008efc:	08008f79 	.word	0x08008f79
 8008f00:	08008f79 	.word	0x08008f79
 8008f04:	08008f61 	.word	0x08008f61
 8008f08:	08008f79 	.word	0x08008f79
 8008f0c:	08008f79 	.word	0x08008f79
 8008f10:	08008f79 	.word	0x08008f79
 8008f14:	08008f79 	.word	0x08008f79
 8008f18:	08008f79 	.word	0x08008f79
 8008f1c:	08008f79 	.word	0x08008f79
 8008f20:	08008f79 	.word	0x08008f79
 8008f24:	08008f69 	.word	0x08008f69
 8008f28:	08008f79 	.word	0x08008f79
 8008f2c:	08008f79 	.word	0x08008f79
 8008f30:	08008f79 	.word	0x08008f79
 8008f34:	08008f79 	.word	0x08008f79
 8008f38:	08008f79 	.word	0x08008f79
 8008f3c:	08008f79 	.word	0x08008f79
 8008f40:	08008f79 	.word	0x08008f79
 8008f44:	08008f71 	.word	0x08008f71
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e0d6      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f50:	2304      	movs	r3, #4
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e0d2      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f58:	2308      	movs	r3, #8
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5e:	e0ce      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f60:	2310      	movs	r3, #16
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f66:	e0ca      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f68:	2320      	movs	r3, #32
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e0c6      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f70:	2340      	movs	r3, #64	@ 0x40
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f76:	e0c2      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f78:	2380      	movs	r3, #128	@ 0x80
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7e:	e0be      	b.n	80090fe <UART_SetConfig+0x7ae>
 8008f80:	40011400 	.word	0x40011400
 8008f84:	58024400 	.word	0x58024400
 8008f88:	40007800 	.word	0x40007800
 8008f8c:	40007c00 	.word	0x40007c00
 8008f90:	40011800 	.word	0x40011800
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4aad      	ldr	r2, [pc, #692]	@ (8009250 <UART_SetConfig+0x900>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d176      	bne.n	800908c <UART_SetConfig+0x73c>
 8008f9e:	4bad      	ldr	r3, [pc, #692]	@ (8009254 <UART_SetConfig+0x904>)
 8008fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fa6:	2b28      	cmp	r3, #40	@ 0x28
 8008fa8:	d86c      	bhi.n	8009084 <UART_SetConfig+0x734>
 8008faa:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb0 <UART_SetConfig+0x660>)
 8008fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb0:	08009055 	.word	0x08009055
 8008fb4:	08009085 	.word	0x08009085
 8008fb8:	08009085 	.word	0x08009085
 8008fbc:	08009085 	.word	0x08009085
 8008fc0:	08009085 	.word	0x08009085
 8008fc4:	08009085 	.word	0x08009085
 8008fc8:	08009085 	.word	0x08009085
 8008fcc:	08009085 	.word	0x08009085
 8008fd0:	0800905d 	.word	0x0800905d
 8008fd4:	08009085 	.word	0x08009085
 8008fd8:	08009085 	.word	0x08009085
 8008fdc:	08009085 	.word	0x08009085
 8008fe0:	08009085 	.word	0x08009085
 8008fe4:	08009085 	.word	0x08009085
 8008fe8:	08009085 	.word	0x08009085
 8008fec:	08009085 	.word	0x08009085
 8008ff0:	08009065 	.word	0x08009065
 8008ff4:	08009085 	.word	0x08009085
 8008ff8:	08009085 	.word	0x08009085
 8008ffc:	08009085 	.word	0x08009085
 8009000:	08009085 	.word	0x08009085
 8009004:	08009085 	.word	0x08009085
 8009008:	08009085 	.word	0x08009085
 800900c:	08009085 	.word	0x08009085
 8009010:	0800906d 	.word	0x0800906d
 8009014:	08009085 	.word	0x08009085
 8009018:	08009085 	.word	0x08009085
 800901c:	08009085 	.word	0x08009085
 8009020:	08009085 	.word	0x08009085
 8009024:	08009085 	.word	0x08009085
 8009028:	08009085 	.word	0x08009085
 800902c:	08009085 	.word	0x08009085
 8009030:	08009075 	.word	0x08009075
 8009034:	08009085 	.word	0x08009085
 8009038:	08009085 	.word	0x08009085
 800903c:	08009085 	.word	0x08009085
 8009040:	08009085 	.word	0x08009085
 8009044:	08009085 	.word	0x08009085
 8009048:	08009085 	.word	0x08009085
 800904c:	08009085 	.word	0x08009085
 8009050:	0800907d 	.word	0x0800907d
 8009054:	2301      	movs	r3, #1
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905a:	e050      	b.n	80090fe <UART_SetConfig+0x7ae>
 800905c:	2304      	movs	r3, #4
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009062:	e04c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8009064:	2308      	movs	r3, #8
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906a:	e048      	b.n	80090fe <UART_SetConfig+0x7ae>
 800906c:	2310      	movs	r3, #16
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009072:	e044      	b.n	80090fe <UART_SetConfig+0x7ae>
 8009074:	2320      	movs	r3, #32
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907a:	e040      	b.n	80090fe <UART_SetConfig+0x7ae>
 800907c:	2340      	movs	r3, #64	@ 0x40
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009082:	e03c      	b.n	80090fe <UART_SetConfig+0x7ae>
 8009084:	2380      	movs	r3, #128	@ 0x80
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908a:	e038      	b.n	80090fe <UART_SetConfig+0x7ae>
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a71      	ldr	r2, [pc, #452]	@ (8009258 <UART_SetConfig+0x908>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d130      	bne.n	80090f8 <UART_SetConfig+0x7a8>
 8009096:	4b6f      	ldr	r3, [pc, #444]	@ (8009254 <UART_SetConfig+0x904>)
 8009098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	2b05      	cmp	r3, #5
 80090a0:	d826      	bhi.n	80090f0 <UART_SetConfig+0x7a0>
 80090a2:	a201      	add	r2, pc, #4	@ (adr r2, 80090a8 <UART_SetConfig+0x758>)
 80090a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a8:	080090c1 	.word	0x080090c1
 80090ac:	080090c9 	.word	0x080090c9
 80090b0:	080090d1 	.word	0x080090d1
 80090b4:	080090d9 	.word	0x080090d9
 80090b8:	080090e1 	.word	0x080090e1
 80090bc:	080090e9 	.word	0x080090e9
 80090c0:	2302      	movs	r3, #2
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e01a      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090c8:	2304      	movs	r3, #4
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e016      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090d0:	2308      	movs	r3, #8
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e012      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090d8:	2310      	movs	r3, #16
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e00e      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090e0:	2320      	movs	r3, #32
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e00a      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090e8:	2340      	movs	r3, #64	@ 0x40
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e006      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090f0:	2380      	movs	r3, #128	@ 0x80
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e002      	b.n	80090fe <UART_SetConfig+0x7ae>
 80090f8:	2380      	movs	r3, #128	@ 0x80
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a55      	ldr	r2, [pc, #340]	@ (8009258 <UART_SetConfig+0x908>)
 8009104:	4293      	cmp	r3, r2
 8009106:	f040 80f8 	bne.w	80092fa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800910a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800910e:	2b20      	cmp	r3, #32
 8009110:	dc46      	bgt.n	80091a0 <UART_SetConfig+0x850>
 8009112:	2b02      	cmp	r3, #2
 8009114:	db75      	blt.n	8009202 <UART_SetConfig+0x8b2>
 8009116:	3b02      	subs	r3, #2
 8009118:	2b1e      	cmp	r3, #30
 800911a:	d872      	bhi.n	8009202 <UART_SetConfig+0x8b2>
 800911c:	a201      	add	r2, pc, #4	@ (adr r2, 8009124 <UART_SetConfig+0x7d4>)
 800911e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009122:	bf00      	nop
 8009124:	080091a7 	.word	0x080091a7
 8009128:	08009203 	.word	0x08009203
 800912c:	080091af 	.word	0x080091af
 8009130:	08009203 	.word	0x08009203
 8009134:	08009203 	.word	0x08009203
 8009138:	08009203 	.word	0x08009203
 800913c:	080091bf 	.word	0x080091bf
 8009140:	08009203 	.word	0x08009203
 8009144:	08009203 	.word	0x08009203
 8009148:	08009203 	.word	0x08009203
 800914c:	08009203 	.word	0x08009203
 8009150:	08009203 	.word	0x08009203
 8009154:	08009203 	.word	0x08009203
 8009158:	08009203 	.word	0x08009203
 800915c:	080091cf 	.word	0x080091cf
 8009160:	08009203 	.word	0x08009203
 8009164:	08009203 	.word	0x08009203
 8009168:	08009203 	.word	0x08009203
 800916c:	08009203 	.word	0x08009203
 8009170:	08009203 	.word	0x08009203
 8009174:	08009203 	.word	0x08009203
 8009178:	08009203 	.word	0x08009203
 800917c:	08009203 	.word	0x08009203
 8009180:	08009203 	.word	0x08009203
 8009184:	08009203 	.word	0x08009203
 8009188:	08009203 	.word	0x08009203
 800918c:	08009203 	.word	0x08009203
 8009190:	08009203 	.word	0x08009203
 8009194:	08009203 	.word	0x08009203
 8009198:	08009203 	.word	0x08009203
 800919c:	080091f5 	.word	0x080091f5
 80091a0:	2b40      	cmp	r3, #64	@ 0x40
 80091a2:	d02a      	beq.n	80091fa <UART_SetConfig+0x8aa>
 80091a4:	e02d      	b.n	8009202 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80091a6:	f7fc fdcb 	bl	8005d40 <HAL_RCCEx_GetD3PCLK1Freq>
 80091aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80091ac:	e02f      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fc fdda 	bl	8005d6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091bc:	e027      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091be:	f107 0318 	add.w	r3, r7, #24
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fc ff26 	bl	8006014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091cc:	e01f      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091ce:	4b21      	ldr	r3, [pc, #132]	@ (8009254 <UART_SetConfig+0x904>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d009      	beq.n	80091ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091da:	4b1e      	ldr	r3, [pc, #120]	@ (8009254 <UART_SetConfig+0x904>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	08db      	lsrs	r3, r3, #3
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	4a1d      	ldr	r2, [pc, #116]	@ (800925c <UART_SetConfig+0x90c>)
 80091e6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091ec:	e00f      	b.n	800920e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80091ee:	4b1b      	ldr	r3, [pc, #108]	@ (800925c <UART_SetConfig+0x90c>)
 80091f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f2:	e00c      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009260 <UART_SetConfig+0x910>)
 80091f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f8:	e009      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009200:	e005      	b.n	800920e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800920c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800920e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 81ee 	beq.w	80095f2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921a:	4a12      	ldr	r2, [pc, #72]	@ (8009264 <UART_SetConfig+0x914>)
 800921c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009220:	461a      	mov	r2, r3
 8009222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009224:	fbb3 f3f2 	udiv	r3, r3, r2
 8009228:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	4413      	add	r3, r2
 8009234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009236:	429a      	cmp	r2, r3
 8009238:	d305      	bcc.n	8009246 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009242:	429a      	cmp	r2, r3
 8009244:	d910      	bls.n	8009268 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800924c:	e1d1      	b.n	80095f2 <UART_SetConfig+0xca2>
 800924e:	bf00      	nop
 8009250:	40011c00 	.word	0x40011c00
 8009254:	58024400 	.word	0x58024400
 8009258:	58000c00 	.word	0x58000c00
 800925c:	03d09000 	.word	0x03d09000
 8009260:	003d0900 	.word	0x003d0900
 8009264:	0800a320 	.word	0x0800a320
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800926a:	2200      	movs	r2, #0
 800926c:	60bb      	str	r3, [r7, #8]
 800926e:	60fa      	str	r2, [r7, #12]
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009274:	4ac0      	ldr	r2, [pc, #768]	@ (8009578 <UART_SetConfig+0xc28>)
 8009276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800927a:	b29b      	uxth	r3, r3
 800927c:	2200      	movs	r2, #0
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009286:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800928a:	f7f7 f831 	bl	80002f0 <__aeabi_uldivmod>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4610      	mov	r0, r2
 8009294:	4619      	mov	r1, r3
 8009296:	f04f 0200 	mov.w	r2, #0
 800929a:	f04f 0300 	mov.w	r3, #0
 800929e:	020b      	lsls	r3, r1, #8
 80092a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092a4:	0202      	lsls	r2, r0, #8
 80092a6:	6979      	ldr	r1, [r7, #20]
 80092a8:	6849      	ldr	r1, [r1, #4]
 80092aa:	0849      	lsrs	r1, r1, #1
 80092ac:	2000      	movs	r0, #0
 80092ae:	460c      	mov	r4, r1
 80092b0:	4605      	mov	r5, r0
 80092b2:	eb12 0804 	adds.w	r8, r2, r4
 80092b6:	eb43 0905 	adc.w	r9, r3, r5
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	469a      	mov	sl, r3
 80092c2:	4693      	mov	fp, r2
 80092c4:	4652      	mov	r2, sl
 80092c6:	465b      	mov	r3, fp
 80092c8:	4640      	mov	r0, r8
 80092ca:	4649      	mov	r1, r9
 80092cc:	f7f7 f810 	bl	80002f0 <__aeabi_uldivmod>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4613      	mov	r3, r2
 80092d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092de:	d308      	bcc.n	80092f2 <UART_SetConfig+0x9a2>
 80092e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092e6:	d204      	bcs.n	80092f2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092ee:	60da      	str	r2, [r3, #12]
 80092f0:	e17f      	b.n	80095f2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092f8:	e17b      	b.n	80095f2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009302:	f040 80bd 	bne.w	8009480 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009306:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800930a:	2b20      	cmp	r3, #32
 800930c:	dc48      	bgt.n	80093a0 <UART_SetConfig+0xa50>
 800930e:	2b00      	cmp	r3, #0
 8009310:	db7b      	blt.n	800940a <UART_SetConfig+0xaba>
 8009312:	2b20      	cmp	r3, #32
 8009314:	d879      	bhi.n	800940a <UART_SetConfig+0xaba>
 8009316:	a201      	add	r2, pc, #4	@ (adr r2, 800931c <UART_SetConfig+0x9cc>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	080093a7 	.word	0x080093a7
 8009320:	080093af 	.word	0x080093af
 8009324:	0800940b 	.word	0x0800940b
 8009328:	0800940b 	.word	0x0800940b
 800932c:	080093b7 	.word	0x080093b7
 8009330:	0800940b 	.word	0x0800940b
 8009334:	0800940b 	.word	0x0800940b
 8009338:	0800940b 	.word	0x0800940b
 800933c:	080093c7 	.word	0x080093c7
 8009340:	0800940b 	.word	0x0800940b
 8009344:	0800940b 	.word	0x0800940b
 8009348:	0800940b 	.word	0x0800940b
 800934c:	0800940b 	.word	0x0800940b
 8009350:	0800940b 	.word	0x0800940b
 8009354:	0800940b 	.word	0x0800940b
 8009358:	0800940b 	.word	0x0800940b
 800935c:	080093d7 	.word	0x080093d7
 8009360:	0800940b 	.word	0x0800940b
 8009364:	0800940b 	.word	0x0800940b
 8009368:	0800940b 	.word	0x0800940b
 800936c:	0800940b 	.word	0x0800940b
 8009370:	0800940b 	.word	0x0800940b
 8009374:	0800940b 	.word	0x0800940b
 8009378:	0800940b 	.word	0x0800940b
 800937c:	0800940b 	.word	0x0800940b
 8009380:	0800940b 	.word	0x0800940b
 8009384:	0800940b 	.word	0x0800940b
 8009388:	0800940b 	.word	0x0800940b
 800938c:	0800940b 	.word	0x0800940b
 8009390:	0800940b 	.word	0x0800940b
 8009394:	0800940b 	.word	0x0800940b
 8009398:	0800940b 	.word	0x0800940b
 800939c:	080093fd 	.word	0x080093fd
 80093a0:	2b40      	cmp	r3, #64	@ 0x40
 80093a2:	d02e      	beq.n	8009402 <UART_SetConfig+0xab2>
 80093a4:	e031      	b.n	800940a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093a6:	f7fb fae1 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 80093aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093ac:	e033      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093ae:	f7fb faf3 	bl	8004998 <HAL_RCC_GetPCLK2Freq>
 80093b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093b4:	e02f      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fc fcd6 	bl	8005d6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c4:	e027      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c6:	f107 0318 	add.w	r3, r7, #24
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fc fe22 	bl	8006014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d4:	e01f      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093d6:	4b69      	ldr	r3, [pc, #420]	@ (800957c <UART_SetConfig+0xc2c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0320 	and.w	r3, r3, #32
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093e2:	4b66      	ldr	r3, [pc, #408]	@ (800957c <UART_SetConfig+0xc2c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	08db      	lsrs	r3, r3, #3
 80093e8:	f003 0303 	and.w	r3, r3, #3
 80093ec:	4a64      	ldr	r2, [pc, #400]	@ (8009580 <UART_SetConfig+0xc30>)
 80093ee:	fa22 f303 	lsr.w	r3, r2, r3
 80093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093f4:	e00f      	b.n	8009416 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80093f6:	4b62      	ldr	r3, [pc, #392]	@ (8009580 <UART_SetConfig+0xc30>)
 80093f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fa:	e00c      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093fc:	4b61      	ldr	r3, [pc, #388]	@ (8009584 <UART_SetConfig+0xc34>)
 80093fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009400:	e009      	b.n	8009416 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009408:	e005      	b.n	8009416 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 80ea 	beq.w	80095f2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009422:	4a55      	ldr	r2, [pc, #340]	@ (8009578 <UART_SetConfig+0xc28>)
 8009424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009428:	461a      	mov	r2, r3
 800942a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800942c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009430:	005a      	lsls	r2, r3, #1
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	441a      	add	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009442:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009446:	2b0f      	cmp	r3, #15
 8009448:	d916      	bls.n	8009478 <UART_SetConfig+0xb28>
 800944a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009450:	d212      	bcs.n	8009478 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009454:	b29b      	uxth	r3, r3
 8009456:	f023 030f 	bic.w	r3, r3, #15
 800945a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800945c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	b29b      	uxth	r3, r3
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	b29a      	uxth	r2, r3
 8009468:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800946a:	4313      	orrs	r3, r2
 800946c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009474:	60da      	str	r2, [r3, #12]
 8009476:	e0bc      	b.n	80095f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800947e:	e0b8      	b.n	80095f2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009480:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009484:	2b20      	cmp	r3, #32
 8009486:	dc4b      	bgt.n	8009520 <UART_SetConfig+0xbd0>
 8009488:	2b00      	cmp	r3, #0
 800948a:	f2c0 8087 	blt.w	800959c <UART_SetConfig+0xc4c>
 800948e:	2b20      	cmp	r3, #32
 8009490:	f200 8084 	bhi.w	800959c <UART_SetConfig+0xc4c>
 8009494:	a201      	add	r2, pc, #4	@ (adr r2, 800949c <UART_SetConfig+0xb4c>)
 8009496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949a:	bf00      	nop
 800949c:	08009527 	.word	0x08009527
 80094a0:	0800952f 	.word	0x0800952f
 80094a4:	0800959d 	.word	0x0800959d
 80094a8:	0800959d 	.word	0x0800959d
 80094ac:	08009537 	.word	0x08009537
 80094b0:	0800959d 	.word	0x0800959d
 80094b4:	0800959d 	.word	0x0800959d
 80094b8:	0800959d 	.word	0x0800959d
 80094bc:	08009547 	.word	0x08009547
 80094c0:	0800959d 	.word	0x0800959d
 80094c4:	0800959d 	.word	0x0800959d
 80094c8:	0800959d 	.word	0x0800959d
 80094cc:	0800959d 	.word	0x0800959d
 80094d0:	0800959d 	.word	0x0800959d
 80094d4:	0800959d 	.word	0x0800959d
 80094d8:	0800959d 	.word	0x0800959d
 80094dc:	08009557 	.word	0x08009557
 80094e0:	0800959d 	.word	0x0800959d
 80094e4:	0800959d 	.word	0x0800959d
 80094e8:	0800959d 	.word	0x0800959d
 80094ec:	0800959d 	.word	0x0800959d
 80094f0:	0800959d 	.word	0x0800959d
 80094f4:	0800959d 	.word	0x0800959d
 80094f8:	0800959d 	.word	0x0800959d
 80094fc:	0800959d 	.word	0x0800959d
 8009500:	0800959d 	.word	0x0800959d
 8009504:	0800959d 	.word	0x0800959d
 8009508:	0800959d 	.word	0x0800959d
 800950c:	0800959d 	.word	0x0800959d
 8009510:	0800959d 	.word	0x0800959d
 8009514:	0800959d 	.word	0x0800959d
 8009518:	0800959d 	.word	0x0800959d
 800951c:	0800958f 	.word	0x0800958f
 8009520:	2b40      	cmp	r3, #64	@ 0x40
 8009522:	d037      	beq.n	8009594 <UART_SetConfig+0xc44>
 8009524:	e03a      	b.n	800959c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009526:	f7fb fa21 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 800952a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800952c:	e03c      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800952e:	f7fb fa33 	bl	8004998 <HAL_RCC_GetPCLK2Freq>
 8009532:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009534:	e038      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800953a:	4618      	mov	r0, r3
 800953c:	f7fc fc16 	bl	8005d6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009544:	e030      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009546:	f107 0318 	add.w	r3, r7, #24
 800954a:	4618      	mov	r0, r3
 800954c:	f7fc fd62 	bl	8006014 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009554:	e028      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009556:	4b09      	ldr	r3, [pc, #36]	@ (800957c <UART_SetConfig+0xc2c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0320 	and.w	r3, r3, #32
 800955e:	2b00      	cmp	r3, #0
 8009560:	d012      	beq.n	8009588 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009562:	4b06      	ldr	r3, [pc, #24]	@ (800957c <UART_SetConfig+0xc2c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	08db      	lsrs	r3, r3, #3
 8009568:	f003 0303 	and.w	r3, r3, #3
 800956c:	4a04      	ldr	r2, [pc, #16]	@ (8009580 <UART_SetConfig+0xc30>)
 800956e:	fa22 f303 	lsr.w	r3, r2, r3
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009574:	e018      	b.n	80095a8 <UART_SetConfig+0xc58>
 8009576:	bf00      	nop
 8009578:	0800a320 	.word	0x0800a320
 800957c:	58024400 	.word	0x58024400
 8009580:	03d09000 	.word	0x03d09000
 8009584:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009588:	4b24      	ldr	r3, [pc, #144]	@ (800961c <UART_SetConfig+0xccc>)
 800958a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958c:	e00c      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800958e:	4b24      	ldr	r3, [pc, #144]	@ (8009620 <UART_SetConfig+0xcd0>)
 8009590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009592:	e009      	b.n	80095a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009594:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800959a:	e005      	b.n	80095a8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80095a6:	bf00      	nop
    }

    if (pclk != 0U)
 80095a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d021      	beq.n	80095f2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009624 <UART_SetConfig+0xcd4>)
 80095b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b8:	461a      	mov	r2, r3
 80095ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	085b      	lsrs	r3, r3, #1
 80095c6:	441a      	add	r2, r3
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d4:	2b0f      	cmp	r3, #15
 80095d6:	d909      	bls.n	80095ec <UART_SetConfig+0xc9c>
 80095d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095de:	d205      	bcs.n	80095ec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	e002      	b.n	80095f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2201      	movs	r2, #1
 80095fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2200      	movs	r2, #0
 8009606:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2200      	movs	r2, #0
 800960c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800960e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009612:	4618      	mov	r0, r3
 8009614:	3748      	adds	r7, #72	@ 0x48
 8009616:	46bd      	mov	sp, r7
 8009618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800961c:	03d09000 	.word	0x03d09000
 8009620:	003d0900 	.word	0x003d0900
 8009624:	0800a320 	.word	0x0800a320

08009628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00a      	beq.n	8009696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	f003 0310 	and.w	r3, r3, #16
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00a      	beq.n	80096da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01a      	beq.n	800973e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009726:	d10a      	bne.n	800973e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	605a      	str	r2, [r3, #4]
  }
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b098      	sub	sp, #96	@ 0x60
 8009770:	af02      	add	r7, sp, #8
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800977c:	f7f9 fccc 	bl	8003118 <HAL_GetTick>
 8009780:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b08      	cmp	r3, #8
 800978e:	d12f      	bne.n	80097f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009790:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009798:	2200      	movs	r2, #0
 800979a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f88e 	bl	80098c0 <UART_WaitOnFlagUntilTimeout>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d022      	beq.n	80097f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097be:	653b      	str	r3, [r7, #80]	@ 0x50
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80097ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e6      	bne.n	80097aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e063      	b.n	80098b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d149      	bne.n	8009892 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009806:	2200      	movs	r2, #0
 8009808:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f857 	bl	80098c0 <UART_WaitOnFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d03c      	beq.n	8009892 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	623b      	str	r3, [r7, #32]
   return(result);
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800982c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009836:	633b      	str	r3, [r7, #48]	@ 0x30
 8009838:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800983c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e6      	bne.n	8009818 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	60fb      	str	r3, [r7, #12]
   return(result);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f023 0301 	bic.w	r3, r3, #1
 8009860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3308      	adds	r3, #8
 8009868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800986a:	61fa      	str	r2, [r7, #28]
 800986c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	69b9      	ldr	r1, [r7, #24]
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	617b      	str	r3, [r7, #20]
   return(result);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e5      	bne.n	800984a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2220      	movs	r2, #32
 8009882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e012      	b.n	80098b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2220      	movs	r2, #32
 800989e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3758      	adds	r7, #88	@ 0x58
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	4613      	mov	r3, r2
 80098ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098d0:	e04f      	b.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098d8:	d04b      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098da:	f7f9 fc1d 	bl	8003118 <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d302      	bcc.n	80098f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e04e      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d037      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b80      	cmp	r3, #128	@ 0x80
 8009906:	d034      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b40      	cmp	r3, #64	@ 0x40
 800990c:	d031      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	f003 0308 	and.w	r3, r3, #8
 8009918:	2b08      	cmp	r3, #8
 800991a:	d110      	bne.n	800993e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2208      	movs	r2, #8
 8009922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 f839 	bl	800999c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2208      	movs	r2, #8
 800992e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e029      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800994c:	d111      	bne.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f81f 	bl	800999c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2220      	movs	r2, #32
 8009962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e00f      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69da      	ldr	r2, [r3, #28]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4013      	ands	r3, r2
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	429a      	cmp	r2, r3
 8009980:	bf0c      	ite	eq
 8009982:	2301      	moveq	r3, #1
 8009984:	2300      	movne	r3, #0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	429a      	cmp	r2, r3
 800998e:	d0a0      	beq.n	80098d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b095      	sub	sp, #84	@ 0x54
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ac:	e853 3f00 	ldrex	r3, [r3]
 80099b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80099c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1e6      	bne.n	80099a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3308      	adds	r3, #8
 80099dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	e853 3f00 	ldrex	r3, [r3]
 80099e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80099e6:	69fa      	ldr	r2, [r7, #28]
 80099e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009a64 <UART_EndRxTransfer+0xc8>)
 80099ea:	4013      	ands	r3, r2
 80099ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3308      	adds	r3, #8
 80099f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099fe:	e841 2300 	strex	r3, r2, [r1]
 8009a02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1e5      	bne.n	80099d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d118      	bne.n	8009a44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	e853 3f00 	ldrex	r3, [r3]
 8009a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	f023 0310 	bic.w	r3, r3, #16
 8009a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a30:	61bb      	str	r3, [r7, #24]
 8009a32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a34:	6979      	ldr	r1, [r7, #20]
 8009a36:	69ba      	ldr	r2, [r7, #24]
 8009a38:	e841 2300 	strex	r3, r2, [r1]
 8009a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e6      	bne.n	8009a12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2220      	movs	r2, #32
 8009a48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a58:	bf00      	nop
 8009a5a:	3754      	adds	r7, #84	@ 0x54
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	effffffe 	.word	0xeffffffe

08009a68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d101      	bne.n	8009a7e <HAL_UARTEx_DisableFifoMode+0x16>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	e027      	b.n	8009ace <HAL_UARTEx_DisableFifoMode+0x66>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2224      	movs	r2, #36	@ 0x24
 8009a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0201 	bic.w	r2, r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009aac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2220      	movs	r2, #32
 8009ac0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d101      	bne.n	8009af2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009aee:	2302      	movs	r3, #2
 8009af0:	e02d      	b.n	8009b4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2224      	movs	r2, #36	@ 0x24
 8009afe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 0201 	bic.w	r2, r2, #1
 8009b18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f850 	bl	8009bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d101      	bne.n	8009b6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	e02d      	b.n	8009bca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2224      	movs	r2, #36	@ 0x24
 8009b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f022 0201 	bic.w	r2, r2, #1
 8009b94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	683a      	ldr	r2, [r7, #0]
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f812 	bl	8009bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d108      	bne.n	8009bf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bf4:	e031      	b.n	8009c5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bf6:	2310      	movs	r3, #16
 8009bf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bfa:	2310      	movs	r3, #16
 8009bfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	0e5b      	lsrs	r3, r3, #25
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	f003 0307 	and.w	r3, r3, #7
 8009c0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	0f5b      	lsrs	r3, r3, #29
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	f003 0307 	and.w	r3, r3, #7
 8009c1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	7b3a      	ldrb	r2, [r7, #12]
 8009c22:	4911      	ldr	r1, [pc, #68]	@ (8009c68 <UARTEx_SetNbDataToProcess+0x94>)
 8009c24:	5c8a      	ldrb	r2, [r1, r2]
 8009c26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c2a:	7b3a      	ldrb	r2, [r7, #12]
 8009c2c:	490f      	ldr	r1, [pc, #60]	@ (8009c6c <UARTEx_SetNbDataToProcess+0x98>)
 8009c2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c3c:	7bfb      	ldrb	r3, [r7, #15]
 8009c3e:	7b7a      	ldrb	r2, [r7, #13]
 8009c40:	4909      	ldr	r1, [pc, #36]	@ (8009c68 <UARTEx_SetNbDataToProcess+0x94>)
 8009c42:	5c8a      	ldrb	r2, [r1, r2]
 8009c44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c48:	7b7a      	ldrb	r2, [r7, #13]
 8009c4a:	4908      	ldr	r1, [pc, #32]	@ (8009c6c <UARTEx_SetNbDataToProcess+0x98>)
 8009c4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009c5a:	bf00      	nop
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	0800a338 	.word	0x0800a338
 8009c6c:	0800a340 	.word	0x0800a340

08009c70 <memset>:
 8009c70:	4402      	add	r2, r0
 8009c72:	4603      	mov	r3, r0
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d100      	bne.n	8009c7a <memset+0xa>
 8009c78:	4770      	bx	lr
 8009c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c7e:	e7f9      	b.n	8009c74 <memset+0x4>

08009c80 <__errno>:
 8009c80:	4b01      	ldr	r3, [pc, #4]	@ (8009c88 <__errno+0x8>)
 8009c82:	6818      	ldr	r0, [r3, #0]
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	24000014 	.word	0x24000014

08009c8c <__libc_init_array>:
 8009c8c:	b570      	push	{r4, r5, r6, lr}
 8009c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8009cc4 <__libc_init_array+0x38>)
 8009c90:	4c0d      	ldr	r4, [pc, #52]	@ (8009cc8 <__libc_init_array+0x3c>)
 8009c92:	1b64      	subs	r4, r4, r5
 8009c94:	10a4      	asrs	r4, r4, #2
 8009c96:	2600      	movs	r6, #0
 8009c98:	42a6      	cmp	r6, r4
 8009c9a:	d109      	bne.n	8009cb0 <__libc_init_array+0x24>
 8009c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8009ccc <__libc_init_array+0x40>)
 8009c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8009cd0 <__libc_init_array+0x44>)
 8009ca0:	f000 fb28 	bl	800a2f4 <_init>
 8009ca4:	1b64      	subs	r4, r4, r5
 8009ca6:	10a4      	asrs	r4, r4, #2
 8009ca8:	2600      	movs	r6, #0
 8009caa:	42a6      	cmp	r6, r4
 8009cac:	d105      	bne.n	8009cba <__libc_init_array+0x2e>
 8009cae:	bd70      	pop	{r4, r5, r6, pc}
 8009cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb4:	4798      	blx	r3
 8009cb6:	3601      	adds	r6, #1
 8009cb8:	e7ee      	b.n	8009c98 <__libc_init_array+0xc>
 8009cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cbe:	4798      	blx	r3
 8009cc0:	3601      	adds	r6, #1
 8009cc2:	e7f2      	b.n	8009caa <__libc_init_array+0x1e>
 8009cc4:	0800a3c8 	.word	0x0800a3c8
 8009cc8:	0800a3c8 	.word	0x0800a3c8
 8009ccc:	0800a3c8 	.word	0x0800a3c8
 8009cd0:	0800a3cc 	.word	0x0800a3cc

08009cd4 <asin>:
 8009cd4:	b508      	push	{r3, lr}
 8009cd6:	ed2d 8b04 	vpush	{d8-d9}
 8009cda:	eeb0 8b40 	vmov.f64	d8, d0
 8009cde:	f000 f837 	bl	8009d50 <__ieee754_asin>
 8009ce2:	eeb4 8b48 	vcmp.f64	d8, d8
 8009ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cea:	eeb0 9b40 	vmov.f64	d9, d0
 8009cee:	d615      	bvs.n	8009d1c <asin+0x48>
 8009cf0:	eeb0 0b48 	vmov.f64	d0, d8
 8009cf4:	f000 f81c 	bl	8009d30 <fabs>
 8009cf8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8009cfc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d04:	dd0a      	ble.n	8009d1c <asin+0x48>
 8009d06:	f7ff ffbb 	bl	8009c80 <__errno>
 8009d0a:	ecbd 8b04 	vpop	{d8-d9}
 8009d0e:	2321      	movs	r3, #33	@ 0x21
 8009d10:	6003      	str	r3, [r0, #0]
 8009d12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009d16:	4804      	ldr	r0, [pc, #16]	@ (8009d28 <asin+0x54>)
 8009d18:	f000 b812 	b.w	8009d40 <nan>
 8009d1c:	eeb0 0b49 	vmov.f64	d0, d9
 8009d20:	ecbd 8b04 	vpop	{d8-d9}
 8009d24:	bd08      	pop	{r3, pc}
 8009d26:	bf00      	nop
 8009d28:	0800a348 	.word	0x0800a348

08009d2c <atan2>:
 8009d2c:	f000 b920 	b.w	8009f70 <__ieee754_atan2>

08009d30 <fabs>:
 8009d30:	ec51 0b10 	vmov	r0, r1, d0
 8009d34:	4602      	mov	r2, r0
 8009d36:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009d3a:	ec43 2b10 	vmov	d0, r2, r3
 8009d3e:	4770      	bx	lr

08009d40 <nan>:
 8009d40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009d48 <nan+0x8>
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	00000000 	.word	0x00000000
 8009d4c:	7ff80000 	.word	0x7ff80000

08009d50 <__ieee754_asin>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	ee10 5a90 	vmov	r5, s1
 8009d56:	4b82      	ldr	r3, [pc, #520]	@ (8009f60 <__ieee754_asin+0x210>)
 8009d58:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009d5c:	429c      	cmp	r4, r3
 8009d5e:	ed2d 8b06 	vpush	{d8-d10}
 8009d62:	d919      	bls.n	8009d98 <__ieee754_asin+0x48>
 8009d64:	ee10 3a10 	vmov	r3, s0
 8009d68:	f104 4440 	add.w	r4, r4, #3221225472	@ 0xc0000000
 8009d6c:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8009d70:	431c      	orrs	r4, r3
 8009d72:	d10c      	bne.n	8009d8e <__ieee754_asin+0x3e>
 8009d74:	ed9f 7b5c 	vldr	d7, [pc, #368]	@ 8009ee8 <__ieee754_asin+0x198>
 8009d78:	ed9f 6b5d 	vldr	d6, [pc, #372]	@ 8009ef0 <__ieee754_asin+0x1a0>
 8009d7c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009d80:	eea0 7b06 	vfma.f64	d7, d0, d6
 8009d84:	eeb0 0b47 	vmov.f64	d0, d7
 8009d88:	ecbd 8b06 	vpop	{d8-d10}
 8009d8c:	bd38      	pop	{r3, r4, r5, pc}
 8009d8e:	ee30 7b40 	vsub.f64	d7, d0, d0
 8009d92:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8009d96:	e7f7      	b.n	8009d88 <__ieee754_asin+0x38>
 8009d98:	4b72      	ldr	r3, [pc, #456]	@ (8009f64 <__ieee754_asin+0x214>)
 8009d9a:	eeb7 9b00 	vmov.f64	d9, #112	@ 0x3f800000  1.0
 8009d9e:	429c      	cmp	r4, r3
 8009da0:	d80b      	bhi.n	8009dba <__ieee754_asin+0x6a>
 8009da2:	f1b4 5f79 	cmp.w	r4, #1044381696	@ 0x3e400000
 8009da6:	d252      	bcs.n	8009e4e <__ieee754_asin+0xfe>
 8009da8:	ed9f 7b53 	vldr	d7, [pc, #332]	@ 8009ef8 <__ieee754_asin+0x1a8>
 8009dac:	ee30 7b07 	vadd.f64	d7, d0, d7
 8009db0:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8009db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db8:	dce6      	bgt.n	8009d88 <__ieee754_asin+0x38>
 8009dba:	f7ff ffb9 	bl	8009d30 <fabs>
 8009dbe:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8009dc2:	ee39 8b40 	vsub.f64	d8, d9, d0
 8009dc6:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8009f00 <__ieee754_asin+0x1b0>
 8009dca:	ee28 8b07 	vmul.f64	d8, d8, d7
 8009dce:	eeb0 0b48 	vmov.f64	d0, d8
 8009dd2:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8009f08 <__ieee754_asin+0x1b8>
 8009dd6:	eea8 6b07 	vfma.f64	d6, d8, d7
 8009dda:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8009f10 <__ieee754_asin+0x1c0>
 8009dde:	eea6 7b08 	vfma.f64	d7, d6, d8
 8009de2:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8009f18 <__ieee754_asin+0x1c8>
 8009de6:	ed9f ab4e 	vldr	d10, [pc, #312]	@ 8009f20 <__ieee754_asin+0x1d0>
 8009dea:	eea7 6b08 	vfma.f64	d6, d7, d8
 8009dee:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 8009f28 <__ieee754_asin+0x1d8>
 8009df2:	eea6 7b08 	vfma.f64	d7, d6, d8
 8009df6:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8009f30 <__ieee754_asin+0x1e0>
 8009dfa:	eea7 ab08 	vfma.f64	d10, d7, d8
 8009dfe:	ee2a ab08 	vmul.f64	d10, d10, d8
 8009e02:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8009f38 <__ieee754_asin+0x1e8>
 8009e06:	eea8 7b06 	vfma.f64	d7, d8, d6
 8009e0a:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8009f40 <__ieee754_asin+0x1f0>
 8009e0e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8009e12:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8009f48 <__ieee754_asin+0x1f8>
 8009e16:	eea6 7b08 	vfma.f64	d7, d6, d8
 8009e1a:	eea7 9b08 	vfma.f64	d9, d7, d8
 8009e1e:	f000 fa65 	bl	800a2ec <__ieee754_sqrt>
 8009e22:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8009e26:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 8009e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8009f68 <__ieee754_asin+0x218>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	d93d      	bls.n	8009eac <__ieee754_asin+0x15c>
 8009e30:	eea0 0b05 	vfma.f64	d0, d0, d5
 8009e34:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8009f50 <__ieee754_asin+0x200>
 8009e38:	eea0 7b04 	vfma.f64	d7, d0, d4
 8009e3c:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8009ef0 <__ieee754_asin+0x1a0>
 8009e40:	ee30 0b47 	vsub.f64	d0, d0, d7
 8009e44:	2d00      	cmp	r5, #0
 8009e46:	bfd8      	it	le
 8009e48:	eeb1 0b40 	vnegle.f64	d0, d0
 8009e4c:	e79c      	b.n	8009d88 <__ieee754_asin+0x38>
 8009e4e:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8009f08 <__ieee754_asin+0x1b8>
 8009e52:	ee20 7b00 	vmul.f64	d7, d0, d0
 8009e56:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8009f00 <__ieee754_asin+0x1b0>
 8009e5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009e5e:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8009f10 <__ieee754_asin+0x1c0>
 8009e62:	eea6 5b07 	vfma.f64	d5, d6, d7
 8009e66:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8009f18 <__ieee754_asin+0x1c8>
 8009e6a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009e6e:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8009f28 <__ieee754_asin+0x1d8>
 8009e72:	eea6 5b07 	vfma.f64	d5, d6, d7
 8009e76:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8009f20 <__ieee754_asin+0x1d0>
 8009e7a:	ed9f 4b2d 	vldr	d4, [pc, #180]	@ 8009f30 <__ieee754_asin+0x1e0>
 8009e7e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009e82:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009e86:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8009f38 <__ieee754_asin+0x1e8>
 8009e8a:	eea7 5b04 	vfma.f64	d5, d7, d4
 8009e8e:	ed9f 4b2c 	vldr	d4, [pc, #176]	@ 8009f40 <__ieee754_asin+0x1f0>
 8009e92:	eea5 4b07 	vfma.f64	d4, d5, d7
 8009e96:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8009f48 <__ieee754_asin+0x1f8>
 8009e9a:	eea4 5b07 	vfma.f64	d5, d4, d7
 8009e9e:	eea5 9b07 	vfma.f64	d9, d5, d7
 8009ea2:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8009ea6:	eea0 0b07 	vfma.f64	d0, d0, d7
 8009eaa:	e76d      	b.n	8009d88 <__ieee754_asin+0x38>
 8009eac:	ec53 2b10 	vmov	r2, r3, d0
 8009eb0:	ee30 3b00 	vadd.f64	d3, d0, d0
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	ec43 2b16 	vmov	d6, r2, r3
 8009eba:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8009ee8 <__ieee754_asin+0x198>
 8009ebe:	ee30 0b06 	vadd.f64	d0, d0, d6
 8009ec2:	eea6 8b46 	vfms.f64	d8, d6, d6
 8009ec6:	ee88 2b00 	vdiv.f64	d2, d8, d0
 8009eca:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8009f58 <__ieee754_asin+0x208>
 8009ece:	eea2 7b44 	vfms.f64	d7, d2, d4
 8009ed2:	ee93 7b05 	vfnms.f64	d7, d3, d5
 8009ed6:	eeb0 5b40 	vmov.f64	d5, d0
 8009eda:	eea6 5b44 	vfms.f64	d5, d6, d4
 8009ede:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009ee2:	e7ad      	b.n	8009e40 <__ieee754_asin+0xf0>
 8009ee4:	f3af 8000 	nop.w
 8009ee8:	33145c07 	.word	0x33145c07
 8009eec:	3c91a626 	.word	0x3c91a626
 8009ef0:	54442d18 	.word	0x54442d18
 8009ef4:	3ff921fb 	.word	0x3ff921fb
 8009ef8:	8800759c 	.word	0x8800759c
 8009efc:	7e37e43c 	.word	0x7e37e43c
 8009f00:	7501b288 	.word	0x7501b288
 8009f04:	3f49efe0 	.word	0x3f49efe0
 8009f08:	0dfdf709 	.word	0x0dfdf709
 8009f0c:	3f023de1 	.word	0x3f023de1
 8009f10:	b5688f3b 	.word	0xb5688f3b
 8009f14:	bfa48228 	.word	0xbfa48228
 8009f18:	0e884455 	.word	0x0e884455
 8009f1c:	3fc9c155 	.word	0x3fc9c155
 8009f20:	55555555 	.word	0x55555555
 8009f24:	3fc55555 	.word	0x3fc55555
 8009f28:	03eb6f7d 	.word	0x03eb6f7d
 8009f2c:	bfd4d612 	.word	0xbfd4d612
 8009f30:	b12e9282 	.word	0xb12e9282
 8009f34:	3fb3b8c5 	.word	0x3fb3b8c5
 8009f38:	1b8d0159 	.word	0x1b8d0159
 8009f3c:	bfe6066c 	.word	0xbfe6066c
 8009f40:	9c598ac8 	.word	0x9c598ac8
 8009f44:	40002ae5 	.word	0x40002ae5
 8009f48:	1c8a2d4b 	.word	0x1c8a2d4b
 8009f4c:	c0033a27 	.word	0xc0033a27
 8009f50:	33145c07 	.word	0x33145c07
 8009f54:	bc91a626 	.word	0xbc91a626
 8009f58:	54442d18 	.word	0x54442d18
 8009f5c:	3fe921fb 	.word	0x3fe921fb
 8009f60:	3fefffff 	.word	0x3fefffff
 8009f64:	3fdfffff 	.word	0x3fdfffff
 8009f68:	3fef3332 	.word	0x3fef3332
 8009f6c:	00000000 	.word	0x00000000

08009f70 <__ieee754_atan2>:
 8009f70:	ee11 1a10 	vmov	r1, s2
 8009f74:	eeb0 7b40 	vmov.f64	d7, d0
 8009f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7a:	ee11 5a90 	vmov	r5, s3
 8009f7e:	424b      	negs	r3, r1
 8009f80:	4f59      	ldr	r7, [pc, #356]	@ (800a0e8 <__ieee754_atan2+0x178>)
 8009f82:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009f86:	430b      	orrs	r3, r1
 8009f88:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009f8c:	42bb      	cmp	r3, r7
 8009f8e:	d80d      	bhi.n	8009fac <__ieee754_atan2+0x3c>
 8009f90:	ee10 ca10 	vmov	ip, s0
 8009f94:	ee17 6a90 	vmov	r6, s15
 8009f98:	f1cc 0000 	rsb	r0, ip, #0
 8009f9c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009fa0:	ea40 000c 	orr.w	r0, r0, ip
 8009fa4:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 8009fa8:	42b8      	cmp	r0, r7
 8009faa:	d904      	bls.n	8009fb6 <__ieee754_atan2+0x46>
 8009fac:	ee37 7b01 	vadd.f64	d7, d7, d1
 8009fb0:	eeb0 0b47 	vmov.f64	d0, d7
 8009fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb6:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 8009fba:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009fbe:	4308      	orrs	r0, r1
 8009fc0:	d103      	bne.n	8009fca <__ieee754_atan2+0x5a>
 8009fc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fc6:	f000 b897 	b.w	800a0f8 <atan>
 8009fca:	17ac      	asrs	r4, r5, #30
 8009fcc:	f004 0402 	and.w	r4, r4, #2
 8009fd0:	ea53 0c0c 	orrs.w	ip, r3, ip
 8009fd4:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 8009fd8:	d107      	bne.n	8009fea <__ieee754_atan2+0x7a>
 8009fda:	2c02      	cmp	r4, #2
 8009fdc:	d05c      	beq.n	800a098 <__ieee754_atan2+0x128>
 8009fde:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 800a0b0 <__ieee754_atan2+0x140>
 8009fe2:	2c03      	cmp	r4, #3
 8009fe4:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8009fe8:	e7e2      	b.n	8009fb0 <__ieee754_atan2+0x40>
 8009fea:	4311      	orrs	r1, r2
 8009fec:	d107      	bne.n	8009ffe <__ieee754_atan2+0x8e>
 8009fee:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 800a0b8 <__ieee754_atan2+0x148>
 8009ff2:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 800a0c0 <__ieee754_atan2+0x150>
 8009ff6:	2e00      	cmp	r6, #0
 8009ff8:	fe27 7b06 	vselge.f64	d7, d7, d6
 8009ffc:	e7d8      	b.n	8009fb0 <__ieee754_atan2+0x40>
 8009ffe:	42ba      	cmp	r2, r7
 800a000:	d10f      	bne.n	800a022 <__ieee754_atan2+0xb2>
 800a002:	4293      	cmp	r3, r2
 800a004:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800a008:	d107      	bne.n	800a01a <__ieee754_atan2+0xaa>
 800a00a:	2c02      	cmp	r4, #2
 800a00c:	d847      	bhi.n	800a09e <__ieee754_atan2+0x12e>
 800a00e:	4b37      	ldr	r3, [pc, #220]	@ (800a0ec <__ieee754_atan2+0x17c>)
 800a010:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a014:	ed93 7b00 	vldr	d7, [r3]
 800a018:	e7ca      	b.n	8009fb0 <__ieee754_atan2+0x40>
 800a01a:	2c02      	cmp	r4, #2
 800a01c:	d842      	bhi.n	800a0a4 <__ieee754_atan2+0x134>
 800a01e:	4b34      	ldr	r3, [pc, #208]	@ (800a0f0 <__ieee754_atan2+0x180>)
 800a020:	e7f6      	b.n	800a010 <__ieee754_atan2+0xa0>
 800a022:	42bb      	cmp	r3, r7
 800a024:	d0e3      	beq.n	8009fee <__ieee754_atan2+0x7e>
 800a026:	1a9b      	subs	r3, r3, r2
 800a028:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a02c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a030:	da1a      	bge.n	800a068 <__ieee754_atan2+0xf8>
 800a032:	2d00      	cmp	r5, #0
 800a034:	da01      	bge.n	800a03a <__ieee754_atan2+0xca>
 800a036:	323c      	adds	r2, #60	@ 0x3c
 800a038:	db19      	blt.n	800a06e <__ieee754_atan2+0xfe>
 800a03a:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800a03e:	f7ff fe77 	bl	8009d30 <fabs>
 800a042:	f000 f859 	bl	800a0f8 <atan>
 800a046:	eeb0 7b40 	vmov.f64	d7, d0
 800a04a:	2c01      	cmp	r4, #1
 800a04c:	d012      	beq.n	800a074 <__ieee754_atan2+0x104>
 800a04e:	2c02      	cmp	r4, #2
 800a050:	d019      	beq.n	800a086 <__ieee754_atan2+0x116>
 800a052:	2c00      	cmp	r4, #0
 800a054:	d0ac      	beq.n	8009fb0 <__ieee754_atan2+0x40>
 800a056:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800a0c8 <__ieee754_atan2+0x158>
 800a05a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a05e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800a0d0 <__ieee754_atan2+0x160>
 800a062:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a066:	e7a3      	b.n	8009fb0 <__ieee754_atan2+0x40>
 800a068:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 800a0b8 <__ieee754_atan2+0x148>
 800a06c:	e7ed      	b.n	800a04a <__ieee754_atan2+0xda>
 800a06e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800a0d8 <__ieee754_atan2+0x168>
 800a072:	e7ea      	b.n	800a04a <__ieee754_atan2+0xda>
 800a074:	ee17 1a90 	vmov	r1, s15
 800a078:	ec53 2b17 	vmov	r2, r3, d7
 800a07c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a080:	ec43 2b17 	vmov	d7, r2, r3
 800a084:	e794      	b.n	8009fb0 <__ieee754_atan2+0x40>
 800a086:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 800a0c8 <__ieee754_atan2+0x158>
 800a08a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a08e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 800a0d0 <__ieee754_atan2+0x160>
 800a092:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a096:	e78b      	b.n	8009fb0 <__ieee754_atan2+0x40>
 800a098:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800a0d0 <__ieee754_atan2+0x160>
 800a09c:	e788      	b.n	8009fb0 <__ieee754_atan2+0x40>
 800a09e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a0e0 <__ieee754_atan2+0x170>
 800a0a2:	e785      	b.n	8009fb0 <__ieee754_atan2+0x40>
 800a0a4:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800a0d8 <__ieee754_atan2+0x168>
 800a0a8:	e782      	b.n	8009fb0 <__ieee754_atan2+0x40>
 800a0aa:	bf00      	nop
 800a0ac:	f3af 8000 	nop.w
 800a0b0:	54442d18 	.word	0x54442d18
 800a0b4:	c00921fb 	.word	0xc00921fb
 800a0b8:	54442d18 	.word	0x54442d18
 800a0bc:	3ff921fb 	.word	0x3ff921fb
 800a0c0:	54442d18 	.word	0x54442d18
 800a0c4:	bff921fb 	.word	0xbff921fb
 800a0c8:	33145c07 	.word	0x33145c07
 800a0cc:	3ca1a626 	.word	0x3ca1a626
 800a0d0:	54442d18 	.word	0x54442d18
 800a0d4:	400921fb 	.word	0x400921fb
	...
 800a0e0:	54442d18 	.word	0x54442d18
 800a0e4:	3fe921fb 	.word	0x3fe921fb
 800a0e8:	7ff00000 	.word	0x7ff00000
 800a0ec:	0800a368 	.word	0x0800a368
 800a0f0:	0800a350 	.word	0x0800a350
 800a0f4:	00000000 	.word	0x00000000

0800a0f8 <atan>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	eeb0 7b40 	vmov.f64	d7, d0
 800a0fe:	ee17 5a90 	vmov	r5, s15
 800a102:	4b73      	ldr	r3, [pc, #460]	@ (800a2d0 <atan+0x1d8>)
 800a104:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a108:	429c      	cmp	r4, r3
 800a10a:	d913      	bls.n	800a134 <atan+0x3c>
 800a10c:	4b71      	ldr	r3, [pc, #452]	@ (800a2d4 <atan+0x1dc>)
 800a10e:	429c      	cmp	r4, r3
 800a110:	d803      	bhi.n	800a11a <atan+0x22>
 800a112:	d107      	bne.n	800a124 <atan+0x2c>
 800a114:	ee10 3a10 	vmov	r3, s0
 800a118:	b123      	cbz	r3, 800a124 <atan+0x2c>
 800a11a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a11e:	eeb0 0b47 	vmov.f64	d0, d7
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800a260 <atan+0x168>
 800a128:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800a268 <atan+0x170>
 800a12c:	2d00      	cmp	r5, #0
 800a12e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800a132:	e7f4      	b.n	800a11e <atan+0x26>
 800a134:	4b68      	ldr	r3, [pc, #416]	@ (800a2d8 <atan+0x1e0>)
 800a136:	429c      	cmp	r4, r3
 800a138:	d811      	bhi.n	800a15e <atan+0x66>
 800a13a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a13e:	429c      	cmp	r4, r3
 800a140:	d80a      	bhi.n	800a158 <atan+0x60>
 800a142:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800a146:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800a270 <atan+0x178>
 800a14a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800a14e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a156:	dce2      	bgt.n	800a11e <atan+0x26>
 800a158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a15c:	e013      	b.n	800a186 <atan+0x8e>
 800a15e:	f7ff fde7 	bl	8009d30 <fabs>
 800a162:	4b5e      	ldr	r3, [pc, #376]	@ (800a2dc <atan+0x1e4>)
 800a164:	429c      	cmp	r4, r3
 800a166:	d84f      	bhi.n	800a208 <atan+0x110>
 800a168:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a16c:	429c      	cmp	r4, r3
 800a16e:	d841      	bhi.n	800a1f4 <atan+0xfc>
 800a170:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800a174:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800a178:	2300      	movs	r3, #0
 800a17a:	eea0 5b07 	vfma.f64	d5, d0, d7
 800a17e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a182:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800a186:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a278 <atan+0x180>
 800a18a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a18e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800a192:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a280 <atan+0x188>
 800a196:	eea5 3b06 	vfma.f64	d3, d5, d6
 800a19a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800a288 <atan+0x190>
 800a19e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a1a2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a290 <atan+0x198>
 800a1a6:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a1aa:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800a298 <atan+0x1a0>
 800a1ae:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a1b2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a2a0 <atan+0x1a8>
 800a1b6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800a2a8 <atan+0x1b0>
 800a1ba:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a1be:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a2b0 <atan+0x1b8>
 800a1c2:	eea5 2b06 	vfma.f64	d2, d5, d6
 800a1c6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a2b8 <atan+0x1c0>
 800a1ca:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a1ce:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800a2c0 <atan+0x1c8>
 800a1d2:	eea6 2b05 	vfma.f64	d2, d6, d5
 800a1d6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a2c8 <atan+0x1d0>
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a1e0:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a1e4:	eea3 6b04 	vfma.f64	d6, d3, d4
 800a1e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a1ec:	d121      	bne.n	800a232 <atan+0x13a>
 800a1ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a1f2:	e794      	b.n	800a11e <atan+0x26>
 800a1f4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a1fe:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a202:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800a206:	e7be      	b.n	800a186 <atan+0x8e>
 800a208:	4b35      	ldr	r3, [pc, #212]	@ (800a2e0 <atan+0x1e8>)
 800a20a:	429c      	cmp	r4, r3
 800a20c:	d20b      	bcs.n	800a226 <atan+0x12e>
 800a20e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800a212:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a216:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a21a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a21e:	2302      	movs	r3, #2
 800a220:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a224:	e7af      	b.n	800a186 <atan+0x8e>
 800a226:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800a22a:	2303      	movs	r3, #3
 800a22c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a230:	e7a9      	b.n	800a186 <atan+0x8e>
 800a232:	4a2c      	ldr	r2, [pc, #176]	@ (800a2e4 <atan+0x1ec>)
 800a234:	492c      	ldr	r1, [pc, #176]	@ (800a2e8 <atan+0x1f0>)
 800a236:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a23a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800a23e:	ed93 5b00 	vldr	d5, [r3]
 800a242:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a246:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a24a:	ed92 7b00 	vldr	d7, [r2]
 800a24e:	2d00      	cmp	r5, #0
 800a250:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a254:	bfb8      	it	lt
 800a256:	eeb1 7b47 	vneglt.f64	d7, d7
 800a25a:	e760      	b.n	800a11e <atan+0x26>
 800a25c:	f3af 8000 	nop.w
 800a260:	54442d18 	.word	0x54442d18
 800a264:	bff921fb 	.word	0xbff921fb
 800a268:	54442d18 	.word	0x54442d18
 800a26c:	3ff921fb 	.word	0x3ff921fb
 800a270:	8800759c 	.word	0x8800759c
 800a274:	7e37e43c 	.word	0x7e37e43c
 800a278:	e322da11 	.word	0xe322da11
 800a27c:	3f90ad3a 	.word	0x3f90ad3a
 800a280:	24760deb 	.word	0x24760deb
 800a284:	3fa97b4b 	.word	0x3fa97b4b
 800a288:	a0d03d51 	.word	0xa0d03d51
 800a28c:	3fb10d66 	.word	0x3fb10d66
 800a290:	c54c206e 	.word	0xc54c206e
 800a294:	3fb745cd 	.word	0x3fb745cd
 800a298:	920083ff 	.word	0x920083ff
 800a29c:	3fc24924 	.word	0x3fc24924
 800a2a0:	5555550d 	.word	0x5555550d
 800a2a4:	3fd55555 	.word	0x3fd55555
 800a2a8:	52defd9a 	.word	0x52defd9a
 800a2ac:	bfadde2d 	.word	0xbfadde2d
 800a2b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a2b4:	bfa2b444 	.word	0xbfa2b444
 800a2b8:	af749a6d 	.word	0xaf749a6d
 800a2bc:	bfb3b0f2 	.word	0xbfb3b0f2
 800a2c0:	fe231671 	.word	0xfe231671
 800a2c4:	bfbc71c6 	.word	0xbfbc71c6
 800a2c8:	9998ebc4 	.word	0x9998ebc4
 800a2cc:	bfc99999 	.word	0xbfc99999
 800a2d0:	440fffff 	.word	0x440fffff
 800a2d4:	7ff00000 	.word	0x7ff00000
 800a2d8:	3fdbffff 	.word	0x3fdbffff
 800a2dc:	3ff2ffff 	.word	0x3ff2ffff
 800a2e0:	40038000 	.word	0x40038000
 800a2e4:	0800a3a0 	.word	0x0800a3a0
 800a2e8:	0800a380 	.word	0x0800a380

0800a2ec <__ieee754_sqrt>:
 800a2ec:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800a2f0:	4770      	bx	lr
	...

0800a2f4 <_init>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	bf00      	nop
 800a2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fa:	bc08      	pop	{r3}
 800a2fc:	469e      	mov	lr, r3
 800a2fe:	4770      	bx	lr

0800a300 <_fini>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	bf00      	nop
 800a304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a306:	bc08      	pop	{r3}
 800a308:	469e      	mov	lr, r3
 800a30a:	4770      	bx	lr
