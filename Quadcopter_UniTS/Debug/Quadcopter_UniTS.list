
Quadcopter_UniTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008438  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080086e8  080086e8  000096e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008720  08008720  00009720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008728  08008728  00009728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800872c  0800872c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08008730  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000290  24000010  08008740  0000a010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002a0  08008740  0000a2a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015588  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025f7  00000000  00000000  0001f5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001078  00000000  00000000  00021bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ce9  00000000  00000000  00022c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000302cc  00000000  00000000  00023921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000147c7  00000000  00000000  00053bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013eeca  00000000  00000000  000683b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a727e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045d0  00000000  00000000  001a72c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001ab894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080086d0 	.word	0x080086d0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	080086d0 	.word	0x080086d0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	rc_ref_euler[0] =  0;
 80005e4:	4b35      	ldr	r3, [pc, #212]	@ (80006bc <main+0xdc>)
 80005e6:	f04f 0200 	mov.w	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
	rc_ref_euler[1] =  0;
 80005ec:	4b33      	ldr	r3, [pc, #204]	@ (80006bc <main+0xdc>)
 80005ee:	f04f 0200 	mov.w	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
	rc_ref_euler[3] =  0;
 80005f4:	4b31      	ldr	r3, [pc, #196]	@ (80006bc <main+0xdc>)
 80005f6:	f04f 0200 	mov.w	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]

	rc_comm_temp[0] = 0;
 80005fc:	4b30      	ldr	r3, [pc, #192]	@ (80006c0 <main+0xe0>)
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	rc_comm_temp[1] = 0;
 8000604:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <main+0xe0>)
 8000606:	f04f 0200 	mov.w	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
	rc_comm_temp[2] = 0;
 800060c:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <main+0xe0>)
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	rc_comm_temp[3] = 0;
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <main+0xe0>)
 8000616:	f04f 0200 	mov.w	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f001 fb52 	bl	8001cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f85c 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 fc7a 	bl	8000f1c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000628:	f000 fc24 	bl	8000e74 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800062c:	f000 fc6e 	bl	8000f0c <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000630:	f000 f8cc 	bl	80007cc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000634:	f000 f99c 	bl	8000970 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000638:	f000 fa3a 	bl	8000ab0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800063c:	f000 fad8 	bl	8000bf0 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000640:	f000 fb76 	bl	8000d30 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000644:	2100      	movs	r1, #0
 8000646:	481f      	ldr	r0, [pc, #124]	@ (80006c4 <main+0xe4>)
 8000648:	f004 fd58 	bl	80050fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800064c:	2104      	movs	r1, #4
 800064e:	481d      	ldr	r0, [pc, #116]	@ (80006c4 <main+0xe4>)
 8000650:	f004 fd54 	bl	80050fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000654:	2108      	movs	r1, #8
 8000656:	481b      	ldr	r0, [pc, #108]	@ (80006c4 <main+0xe4>)
 8000658:	f004 fd50 	bl	80050fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800065c:	210c      	movs	r1, #12
 800065e:	4819      	ldr	r0, [pc, #100]	@ (80006c4 <main+0xe4>)
 8000660:	f004 fd4c 	bl	80050fc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int count = 0;


  set_motor_pwm_zero(motor_pwm);
 8000664:	4818      	ldr	r0, [pc, #96]	@ (80006c8 <main+0xe8>)
 8000666:	f000 ff83 	bl	8001570 <set_motor_pwm_zero>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
		  }
	*/


		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 800066a:	2104      	movs	r1, #4
 800066c:	4817      	ldr	r0, [pc, #92]	@ (80006cc <main+0xec>)
 800066e:	f004 feb5 	bl	80053dc <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000672:	2100      	movs	r1, #0
 8000674:	4815      	ldr	r0, [pc, #84]	@ (80006cc <main+0xec>)
 8000676:	f005 f827 	bl	80056c8 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 800067a:	2104      	movs	r1, #4
 800067c:	4814      	ldr	r0, [pc, #80]	@ (80006d0 <main+0xf0>)
 800067e:	f004 fead 	bl	80053dc <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000682:	2100      	movs	r1, #0
 8000684:	4812      	ldr	r0, [pc, #72]	@ (80006d0 <main+0xf0>)
 8000686:	f005 f81f 	bl	80056c8 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 800068a:	2104      	movs	r1, #4
 800068c:	4811      	ldr	r0, [pc, #68]	@ (80006d4 <main+0xf4>)
 800068e:	f004 fea5 	bl	80053dc <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000692:	2100      	movs	r1, #0
 8000694:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <main+0xf4>)
 8000696:	f005 f817 	bl	80056c8 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 800069a:	2104      	movs	r1, #4
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <main+0xf8>)
 800069e:	f004 fe9d 	bl	80053dc <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80006a2:	2100      	movs	r1, #0
 80006a4:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <main+0xf8>)
 80006a6:	f005 f80f 	bl	80056c8 <HAL_TIM_IC_Start_IT>

		  get_target_euler(rc_ref_euler, rc_comm_temp);
 80006aa:	4905      	ldr	r1, [pc, #20]	@ (80006c0 <main+0xe0>)
 80006ac:	4803      	ldr	r0, [pc, #12]	@ (80006bc <main+0xdc>)
 80006ae:	f000 ff79 	bl	80015a4 <get_target_euler>
		   * ---------------
		   * PID
		   * ---------------
		   */

		  set_motor_pwm(motor_pwm);
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <main+0xe8>)
 80006b4:	f000 fee6 	bl	8001484 <set_motor_pwm>
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80006b8:	bf00      	nop
 80006ba:	e7d6      	b.n	800066a <main+0x8a>
 80006bc:	2400024c 	.word	0x2400024c
 80006c0:	2400023c 	.word	0x2400023c
 80006c4:	2400002c 	.word	0x2400002c
 80006c8:	24000258 	.word	0x24000258
 80006cc:	24000078 	.word	0x24000078
 80006d0:	240000c4 	.word	0x240000c4
 80006d4:	24000110 	.word	0x24000110
 80006d8:	2400015c 	.word	0x2400015c

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09c      	sub	sp, #112	@ 0x70
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e6:	224c      	movs	r2, #76	@ 0x4c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f007 ffc4 	bl	8008678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2220      	movs	r2, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f007 ffbe 	bl	8008678 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006fc:	4b31      	ldr	r3, [pc, #196]	@ (80007c4 <SystemClock_Config+0xe8>)
 80006fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000702:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000706:	2004      	movs	r0, #4
 8000708:	f001 fe48 	bl	800239c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800070c:	2300      	movs	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4b2d      	ldr	r3, [pc, #180]	@ (80007c8 <SystemClock_Config+0xec>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a2c      	ldr	r2, [pc, #176]	@ (80007c8 <SystemClock_Config+0xec>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b2a      	ldr	r3, [pc, #168]	@ (80007c8 <SystemClock_Config+0xec>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000728:	bf00      	nop
 800072a:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <SystemClock_Config+0xec>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000736:	d1f8      	bne.n	800072a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000738:	2321      	movs	r3, #33	@ 0x21
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000740:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000742:	2301      	movs	r3, #1
 8000744:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	2302      	movs	r3, #2
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000752:	2325      	movs	r3, #37	@ 0x25
 8000754:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075a:	2304      	movs	r3, #4
 800075c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800075e:	2302      	movs	r3, #2
 8000760:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000762:	230c      	movs	r3, #12
 8000764:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000766:	2300      	movs	r3, #0
 8000768:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fe6b 	bl	8002450 <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000780:	f000 fe7a 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	233f      	movs	r3, #63	@ 0x3f
 8000786:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2303      	movs	r3, #3
 800078a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000794:	2340      	movs	r3, #64	@ 0x40
 8000796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000798:	2340      	movs	r3, #64	@ 0x40
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800079c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a2:	2340      	movs	r3, #64	@ 0x40
 80007a4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2103      	movs	r1, #3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fa82 	bl	8002cb4 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xde>
  {
    Error_Handler();
 80007b6:	f000 fe5f 	bl	8001478 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3770      	adds	r7, #112	@ 0x70
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	58024400 	.word	0x58024400
 80007c8:	58024800 	.word	0x58024800

080007cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09c      	sub	sp, #112	@ 0x70
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2234      	movs	r2, #52	@ 0x34
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f007 ff36 	bl	8008678 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800080c:	4b56      	ldr	r3, [pc, #344]	@ (8000968 <MX_TIM1_Init+0x19c>)
 800080e:	4a57      	ldr	r2, [pc, #348]	@ (800096c <MX_TIM1_Init+0x1a0>)
 8000810:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 8000812:	4b55      	ldr	r3, [pc, #340]	@ (8000968 <MX_TIM1_Init+0x19c>)
 8000814:	f240 227f 	movw	r2, #639	@ 0x27f
 8000818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b53      	ldr	r3, [pc, #332]	@ (8000968 <MX_TIM1_Init+0x19c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000820:	4b51      	ldr	r3, [pc, #324]	@ (8000968 <MX_TIM1_Init+0x19c>)
 8000822:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000826:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b4f      	ldr	r3, [pc, #316]	@ (8000968 <MX_TIM1_Init+0x19c>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800082e:	4b4e      	ldr	r3, [pc, #312]	@ (8000968 <MX_TIM1_Init+0x19c>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000834:	4b4c      	ldr	r3, [pc, #304]	@ (8000968 <MX_TIM1_Init+0x19c>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800083a:	484b      	ldr	r0, [pc, #300]	@ (8000968 <MX_TIM1_Init+0x19c>)
 800083c:	f004 fba6 	bl	8004f8c <HAL_TIM_Base_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000846:	f000 fe17 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000850:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000854:	4619      	mov	r1, r3
 8000856:	4844      	ldr	r0, [pc, #272]	@ (8000968 <MX_TIM1_Init+0x19c>)
 8000858:	f005 fbfc 	bl	8006054 <HAL_TIM_ConfigClockSource>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000862:	f000 fe09 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000866:	4840      	ldr	r0, [pc, #256]	@ (8000968 <MX_TIM1_Init+0x19c>)
 8000868:	f004 fbe7 	bl	800503a <HAL_TIM_PWM_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000872:	f000 fe01 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000882:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000886:	4619      	mov	r1, r3
 8000888:	4837      	ldr	r0, [pc, #220]	@ (8000968 <MX_TIM1_Init+0x19c>)
 800088a:	f006 fbdd 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000894:	f000 fdf0 	bl	8001478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000898:	2360      	movs	r3, #96	@ 0x60
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a0:	2300      	movs	r3, #0
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a4:	2300      	movs	r3, #0
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008b8:	2200      	movs	r2, #0
 80008ba:	4619      	mov	r1, r3
 80008bc:	482a      	ldr	r0, [pc, #168]	@ (8000968 <MX_TIM1_Init+0x19c>)
 80008be:	f005 fab5 	bl	8005e2c <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80008c8:	f000 fdd6 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008d0:	2204      	movs	r2, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4824      	ldr	r0, [pc, #144]	@ (8000968 <MX_TIM1_Init+0x19c>)
 80008d6:	f005 faa9 	bl	8005e2c <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80008e0:	f000 fdca 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008e8:	2208      	movs	r2, #8
 80008ea:	4619      	mov	r1, r3
 80008ec:	481e      	ldr	r0, [pc, #120]	@ (8000968 <MX_TIM1_Init+0x19c>)
 80008ee:	f005 fa9d 	bl	8005e2c <HAL_TIM_PWM_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80008f8:	f000 fdbe 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000900:	220c      	movs	r2, #12
 8000902:	4619      	mov	r1, r3
 8000904:	4818      	ldr	r0, [pc, #96]	@ (8000968 <MX_TIM1_Init+0x19c>)
 8000906:	f005 fa91 	bl	8005e2c <HAL_TIM_PWM_ConfigChannel>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000910:	f000 fdb2 	bl	8001478 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000928:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	4807      	ldr	r0, [pc, #28]	@ (8000968 <MX_TIM1_Init+0x19c>)
 800094a:	f006 fc0b 	bl	8007164 <HAL_TIMEx_ConfigBreakDeadTime>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000954:	f000 fd90 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000958:	4803      	ldr	r0, [pc, #12]	@ (8000968 <MX_TIM1_Init+0x19c>)
 800095a:	f001 f813 	bl	8001984 <HAL_TIM_MspPostInit>

}
 800095e:	bf00      	nop
 8000960:	3770      	adds	r7, #112	@ 0x70
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2400002c 	.word	0x2400002c
 800096c:	40010000 	.word	0x40010000

08000970 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b090      	sub	sp, #64	@ 0x40
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009ac:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 80009ae:	4a3f      	ldr	r2, [pc, #252]	@ (8000aac <MX_TIM3_Init+0x13c>)
 80009b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 80009b2:	4b3d      	ldr	r3, [pc, #244]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 80009b4:	f240 227f 	movw	r2, #639	@ 0x27f
 80009b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009c0:	4b39      	ldr	r3, [pc, #228]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 80009c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b37      	ldr	r3, [pc, #220]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b36      	ldr	r3, [pc, #216]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d4:	4834      	ldr	r0, [pc, #208]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 80009d6:	f004 fad9 	bl	8004f8c <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80009e0:	f000 fd4a 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009ee:	4619      	mov	r1, r3
 80009f0:	482d      	ldr	r0, [pc, #180]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 80009f2:	f005 fb2f 	bl	8006054 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80009fc:	f000 fd3c 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000a00:	4829      	ldr	r0, [pc, #164]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 8000a02:	f004 fc89 	bl	8005318 <HAL_TIM_IC_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000a0c:	f000 fd34 	bl	8001478 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000a10:	2304      	movs	r3, #4
 8000a12:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a14:	2350      	movs	r3, #80	@ 0x50
 8000a16:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481f      	ldr	r0, [pc, #124]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 8000a2c:	f005 fc0a 	bl	8006244 <HAL_TIM_SlaveConfigSynchro>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000a36:	f000 fd1f 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	4815      	ldr	r0, [pc, #84]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 8000a54:	f005 f94d 	bl	8005cf2 <HAL_TIM_IC_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8000a5e:	f000 fd0b 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a66:	2302      	movs	r3, #2
 8000a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2204      	movs	r2, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 8000a74:	f005 f93d 	bl	8005cf2 <HAL_TIM_IC_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8000a7e:	f000 fcfb 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	@ (8000aa8 <MX_TIM3_Init+0x138>)
 8000a90:	f006 fada 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 8000a9a:	f000 fced 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	3740      	adds	r7, #64	@ 0x40
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	24000078 	.word	0x24000078
 8000aac:	40000400 	.word	0x40000400

08000ab0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	@ 0x40
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aec:	4b3e      	ldr	r3, [pc, #248]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000aee:	4a3f      	ldr	r2, [pc, #252]	@ (8000bec <MX_TIM4_Init+0x13c>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8000af2:	4b3d      	ldr	r3, [pc, #244]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000af4:	f240 227f 	movw	r2, #639	@ 0x27f
 8000af8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afa:	4b3b      	ldr	r3, [pc, #236]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b00:	4b39      	ldr	r3, [pc, #228]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000b02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b36      	ldr	r3, [pc, #216]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b14:	4834      	ldr	r0, [pc, #208]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000b16:	f004 fa39 	bl	8004f8c <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000b20:	f000 fcaa 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b28:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b2e:	4619      	mov	r1, r3
 8000b30:	482d      	ldr	r0, [pc, #180]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000b32:	f005 fa8f 	bl	8006054 <HAL_TIM_ConfigClockSource>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000b3c:	f000 fc9c 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000b40:	4829      	ldr	r0, [pc, #164]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000b42:	f004 fbe9 	bl	8005318 <HAL_TIM_IC_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000b4c:	f000 fc94 	bl	8001478 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b50:	2304      	movs	r3, #4
 8000b52:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b54:	2350      	movs	r3, #80	@ 0x50
 8000b56:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481f      	ldr	r0, [pc, #124]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000b6c:	f005 fb6a 	bl	8006244 <HAL_TIM_SlaveConfigSynchro>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000b76:	f000 fc7f 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4619      	mov	r1, r3
 8000b92:	4815      	ldr	r0, [pc, #84]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000b94:	f005 f8ad 	bl	8005cf2 <HAL_TIM_IC_ConfigChannel>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8000b9e:	f000 fc6b 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480d      	ldr	r0, [pc, #52]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000bb4:	f005 f89d 	bl	8005cf2 <HAL_TIM_IC_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8000bbe:	f000 fc5b 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <MX_TIM4_Init+0x138>)
 8000bd0:	f006 fa3a 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 8000bda:	f000 fc4d 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3740      	adds	r7, #64	@ 0x40
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	240000c4 	.word	0x240000c4
 8000bec:	40000800 	.word	0x40000800

08000bf0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b090      	sub	sp, #64	@ 0x40
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c22:	463b      	mov	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000c2e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d2c <MX_TIM5_Init+0x13c>)
 8000c30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 639;
 8000c32:	4b3d      	ldr	r3, [pc, #244]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000c34:	f240 227f 	movw	r2, #639	@ 0x27f
 8000c38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000c40:	4b39      	ldr	r3, [pc, #228]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000c42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b37      	ldr	r3, [pc, #220]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b36      	ldr	r3, [pc, #216]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c54:	4834      	ldr	r0, [pc, #208]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000c56:	f004 f999 	bl	8004f8c <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000c60:	f000 fc0a 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c68:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c6e:	4619      	mov	r1, r3
 8000c70:	482d      	ldr	r0, [pc, #180]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000c72:	f005 f9ef 	bl	8006054 <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000c7c:	f000 fbfc 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000c80:	4829      	ldr	r0, [pc, #164]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000c82:	f004 fb49 	bl	8005318 <HAL_TIM_IC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000c8c:	f000 fbf4 	bl	8001478 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c90:	2304      	movs	r3, #4
 8000c92:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c94:	2350      	movs	r3, #80	@ 0x50
 8000c96:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481f      	ldr	r0, [pc, #124]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000cac:	f005 faca 	bl	8006244 <HAL_TIM_SlaveConfigSynchro>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8000cb6:	f000 fbdf 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	2200      	movs	r2, #0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4815      	ldr	r0, [pc, #84]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000cd4:	f005 f80d 	bl	8005cf2 <HAL_TIM_IC_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8000cde:	f000 fbcb 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2204      	movs	r2, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000cf4:	f004 fffd 	bl	8005cf2 <HAL_TIM_IC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 8000cfe:	f000 fbbb 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <MX_TIM5_Init+0x138>)
 8000d10:	f006 f99a 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM5_Init+0x12e>
  {
    Error_Handler();
 8000d1a:	f000 fbad 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3740      	adds	r7, #64	@ 0x40
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24000110 	.word	0x24000110
 8000d2c:	40000c00 	.word	0x40000c00

08000d30 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b090      	sub	sp, #64	@ 0x40
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000d6e:	4a40      	ldr	r2, [pc, #256]	@ (8000e70 <MX_TIM15_Init+0x140>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 8000d72:	4b3e      	ldr	r3, [pc, #248]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000d74:	f240 227f 	movw	r2, #639	@ 0x27f
 8000d78:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000d80:	4b3a      	ldr	r3, [pc, #232]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000d82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d86:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b38      	ldr	r3, [pc, #224]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d8e:	4b37      	ldr	r3, [pc, #220]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d94:	4b35      	ldr	r3, [pc, #212]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d9a:	4834      	ldr	r0, [pc, #208]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000d9c:	f004 f8f6 	bl	8004f8c <HAL_TIM_Base_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8000da6:	f000 fb67 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000daa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dae:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000db0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000db4:	4619      	mov	r1, r3
 8000db6:	482d      	ldr	r0, [pc, #180]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000db8:	f005 f94c 	bl	8006054 <HAL_TIM_ConfigClockSource>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 8000dc2:	f000 fb59 	bl	8001478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000dc6:	4829      	ldr	r0, [pc, #164]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000dc8:	f004 faa6 	bl	8005318 <HAL_TIM_IC_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8000dd2:	f000 fb51 	bl	8001478 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000dda:	2350      	movs	r3, #80	@ 0x50
 8000ddc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	481e      	ldr	r0, [pc, #120]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000df2:	f005 fa27 	bl	8006244 <HAL_TIM_SlaveConfigSynchro>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000dfc:	f000 fb3c 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e04:	2301      	movs	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	4619      	mov	r1, r3
 8000e18:	4814      	ldr	r0, [pc, #80]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000e1a:	f004 ff6a 	bl	8005cf2 <HAL_TIM_IC_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8000e24:	f000 fb28 	bl	8001478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	2204      	movs	r2, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000e3a:	f004 ff5a 	bl	8005cf2 <HAL_TIM_IC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 8000e44:	f000 fb18 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <MX_TIM15_Init+0x13c>)
 8000e56:	f006 f8f7 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 8000e60:	f000 fb0a 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3740      	adds	r7, #64	@ 0x40
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2400015c 	.word	0x2400015c
 8000e70:	40014000 	.word	0x40014000

08000e74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e7a:	4a23      	ldr	r2, [pc, #140]	@ (8000f08 <MX_USART3_UART_Init+0x94>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ebc:	4811      	ldr	r0, [pc, #68]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ebe:	f006 f9fb 	bl	80072b8 <HAL_UART_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ec8:	f000 fad6 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	480d      	ldr	r0, [pc, #52]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ed0:	f007 fb07 	bl	80084e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000eda:	f000 facd 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4808      	ldr	r0, [pc, #32]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ee2:	f007 fb3c 	bl	800855e <HAL_UARTEx_SetRxFifoThreshold>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000eec:	f000 fac4 	bl	8001478 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <MX_USART3_UART_Init+0x90>)
 8000ef2:	f007 fabd 	bl	8008470 <HAL_UARTEx_DisableFifoMode>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000efc:	f000 fabc 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	240001a8 	.word	0x240001a8
 8000f08:	40004800 	.word	0x40004800

08000f0c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	@ 0x38
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f32:	4b80      	ldr	r3, [pc, #512]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f38:	4a7e      	ldr	r2, [pc, #504]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f42:	4b7c      	ldr	r3, [pc, #496]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	623b      	str	r3, [r7, #32]
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f50:	4b78      	ldr	r3, [pc, #480]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f56:	4a77      	ldr	r2, [pc, #476]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f60:	4b74      	ldr	r3, [pc, #464]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f6e:	4b71      	ldr	r3, [pc, #452]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f74:	4a6f      	ldr	r2, [pc, #444]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f76:	f043 0320 	orr.w	r3, r3, #32
 8000f7a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f84:	f003 0320 	and.w	r3, r3, #32
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8c:	4b69      	ldr	r3, [pc, #420]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f92:	4a68      	ldr	r2, [pc, #416]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f98:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f9c:	4b65      	ldr	r3, [pc, #404]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000f9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	4b62      	ldr	r3, [pc, #392]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000fac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fb0:	4a60      	ldr	r2, [pc, #384]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fba:	4b5e      	ldr	r3, [pc, #376]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000fbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000fca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fce:	4a59      	ldr	r2, [pc, #356]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fd8:	4b56      	ldr	r3, [pc, #344]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000fda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe6:	4b53      	ldr	r3, [pc, #332]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000fe8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fec:	4a51      	ldr	r2, [pc, #324]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000fee:	f043 0308 	orr.w	r3, r3, #8
 8000ff2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ff6:	4b4f      	ldr	r3, [pc, #316]	@ (8001134 <MX_GPIO_Init+0x218>)
 8000ff8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001004:	4b4b      	ldr	r3, [pc, #300]	@ (8001134 <MX_GPIO_Init+0x218>)
 8001006:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800100a:	4a4a      	ldr	r2, [pc, #296]	@ (8001134 <MX_GPIO_Init+0x218>)
 800100c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001010:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001014:	4b47      	ldr	r3, [pc, #284]	@ (8001134 <MX_GPIO_Init+0x218>)
 8001016:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800101a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001028:	4843      	ldr	r0, [pc, #268]	@ (8001138 <MX_GPIO_Init+0x21c>)
 800102a:	f001 f99d 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001034:	4841      	ldr	r0, [pc, #260]	@ (800113c <MX_GPIO_Init+0x220>)
 8001036:	f001 f997 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2102      	movs	r1, #2
 800103e:	4840      	ldr	r0, [pc, #256]	@ (8001140 <MX_GPIO_Init+0x224>)
 8001040:	f001 f992 	bl	8002368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	483a      	ldr	r0, [pc, #232]	@ (8001144 <MX_GPIO_Init+0x228>)
 800105a:	f000 ffd5 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800105e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001074:	4619      	mov	r1, r3
 8001076:	4830      	ldr	r0, [pc, #192]	@ (8001138 <MX_GPIO_Init+0x21c>)
 8001078:	f000 ffc6 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800107c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	4829      	ldr	r0, [pc, #164]	@ (800113c <MX_GPIO_Init+0x220>)
 8001096:	f000 ffb7 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800109e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	4826      	ldr	r0, [pc, #152]	@ (8001148 <MX_GPIO_Init+0x22c>)
 80010b0:	f000 ffaa 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80010b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4820      	ldr	r0, [pc, #128]	@ (800114c <MX_GPIO_Init+0x230>)
 80010ca:	f000 ff9d 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80010ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80010e0:	230a      	movs	r3, #10
 80010e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4818      	ldr	r0, [pc, #96]	@ (800114c <MX_GPIO_Init+0x230>)
 80010ec:	f000 ff8c 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80010f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	4810      	ldr	r0, [pc, #64]	@ (800114c <MX_GPIO_Init+0x230>)
 800110a:	f000 ff7d 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800110e:	2302      	movs	r3, #2
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001122:	4619      	mov	r1, r3
 8001124:	4806      	ldr	r0, [pc, #24]	@ (8001140 <MX_GPIO_Init+0x224>)
 8001126:	f000 ff6f 	bl	8002008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112a:	bf00      	nop
 800112c:	3738      	adds	r7, #56	@ 0x38
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	58024400 	.word	0x58024400
 8001138:	58021400 	.word	0x58021400
 800113c:	58020400 	.word	0x58020400
 8001140:	58021000 	.word	0x58021000
 8001144:	58020800 	.word	0x58020800
 8001148:	58021800 	.word	0x58021800
 800114c:	58020000 	.word	0x58020000

08001150 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4ab2      	ldr	r2, [pc, #712]	@ (8001428 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d155      	bne.n	800120e <HAL_TIM_IC_CaptureCallback+0xbe>
    {

        cycle_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001162:	2100      	movs	r1, #0
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f005 f8af 	bl	80062c8 <HAL_TIM_ReadCapturedValue>
 800116a:	4603      	mov	r3, r0
 800116c:	4aaf      	ldr	r2, [pc, #700]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800116e:	6013      	str	r3, [r2, #0]
        period_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001170:	2104      	movs	r1, #4
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f005 f8a8 	bl	80062c8 <HAL_TIM_ReadCapturedValue>
 8001178:	4602      	mov	r2, r0
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	461a      	mov	r2, r3
 8001184:	4baa      	ldr	r3, [pc, #680]	@ (8001430 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8001186:	601a      	str	r2, [r3, #0]
    	if (cycle_rc_0 > 1990 && cycle_rc_0 < 2010 && period_rc_0 > 0 && cycle_rc_0 > period_rc_0 ) {
 8001188:	4ba8      	ldr	r3, [pc, #672]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001190:	4293      	cmp	r3, r2
 8001192:	d93c      	bls.n	800120e <HAL_TIM_IC_CaptureCallback+0xbe>
 8001194:	4ba5      	ldr	r3, [pc, #660]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 800119c:	4293      	cmp	r3, r2
 800119e:	d836      	bhi.n	800120e <HAL_TIM_IC_CaptureCallback+0xbe>
 80011a0:	4ba3      	ldr	r3, [pc, #652]	@ (8001430 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d032      	beq.n	800120e <HAL_TIM_IC_CaptureCallback+0xbe>
 80011a8:	4ba0      	ldr	r3, [pc, #640]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4ba0      	ldr	r3, [pc, #640]	@ (8001430 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d92c      	bls.n	800120e <HAL_TIM_IC_CaptureCallback+0xbe>
    		channel_mag_0 = (float) period_rc_0 / (float) cycle_rc_0;
 80011b4:	4b9e      	ldr	r3, [pc, #632]	@ (8001430 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011c0:	4b9a      	ldr	r3, [pc, #616]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d0:	4b98      	ldr	r3, [pc, #608]	@ (8001434 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80011d2:	edc3 7a00 	vstr	s15, [r3]
    		rc_comm_temp[0] = (channel_mag_0 - 0.5) * 2 * RC_FULLSCALE;
 80011d6:	4b97      	ldr	r3, [pc, #604]	@ (8001434 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e0:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80011e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80011e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80011ec:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 8001420 <HAL_TIM_IC_CaptureCallback+0x2d0>
 80011f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011f8:	4b8f      	ldr	r3, [pc, #572]	@ (8001438 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
    		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80011fe:	2100      	movs	r1, #0
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f004 fbb1 	bl	8005968 <HAL_TIM_IC_Stop_IT>
    		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001206:	2104      	movs	r1, #4
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f004 f9eb 	bl	80055e4 <HAL_TIM_IC_Stop>

    	}
    }

    if (htim->Instance == TIM4)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a8a      	ldr	r2, [pc, #552]	@ (800143c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d155      	bne.n	80012c4 <HAL_TIM_IC_CaptureCallback+0x174>
    {

            cycle_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001218:	2100      	movs	r1, #0
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f005 f854 	bl	80062c8 <HAL_TIM_ReadCapturedValue>
 8001220:	4603      	mov	r3, r0
 8001222:	4a87      	ldr	r2, [pc, #540]	@ (8001440 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001224:	6013      	str	r3, [r2, #0]
            period_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001226:	2104      	movs	r1, #4
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f005 f84d 	bl	80062c8 <HAL_TIM_ReadCapturedValue>
 800122e:	4602      	mov	r2, r0
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	461a      	mov	r2, r3
 800123a:	4b82      	ldr	r3, [pc, #520]	@ (8001444 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800123c:	601a      	str	r2, [r3, #0]
        	if (cycle_rc_1 > 1990 && cycle_rc_1 < 2010 && period_rc_1 > 0 && cycle_rc_1 > period_rc_1) {
 800123e:	4b80      	ldr	r3, [pc, #512]	@ (8001440 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001246:	4293      	cmp	r3, r2
 8001248:	d93c      	bls.n	80012c4 <HAL_TIM_IC_CaptureCallback+0x174>
 800124a:	4b7d      	ldr	r3, [pc, #500]	@ (8001440 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001252:	4293      	cmp	r3, r2
 8001254:	d836      	bhi.n	80012c4 <HAL_TIM_IC_CaptureCallback+0x174>
 8001256:	4b7b      	ldr	r3, [pc, #492]	@ (8001444 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d032      	beq.n	80012c4 <HAL_TIM_IC_CaptureCallback+0x174>
 800125e:	4b78      	ldr	r3, [pc, #480]	@ (8001440 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b78      	ldr	r3, [pc, #480]	@ (8001444 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d92c      	bls.n	80012c4 <HAL_TIM_IC_CaptureCallback+0x174>
        		channel_mag_1 = (float) period_rc_1 / (float) cycle_rc_1;
 800126a:	4b76      	ldr	r3, [pc, #472]	@ (8001444 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001276:	4b72      	ldr	r3, [pc, #456]	@ (8001440 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001286:	4b70      	ldr	r3, [pc, #448]	@ (8001448 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001288:	edc3 7a00 	vstr	s15, [r3]
        		rc_comm_temp[1] = (channel_mag_1 - 0.5) * 2 * RC_FULLSCALE;
 800128c:	4b6e      	ldr	r3, [pc, #440]	@ (8001448 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001296:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800129a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800129e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80012a2:	ed9f 6b5f 	vldr	d6, [pc, #380]	@ 8001420 <HAL_TIM_IC_CaptureCallback+0x2d0>
 80012a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012ae:	4b62      	ldr	r3, [pc, #392]	@ (8001438 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80012b0:	edc3 7a01 	vstr	s15, [r3, #4]
        		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80012b4:	2100      	movs	r1, #0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f004 fb56 	bl	8005968 <HAL_TIM_IC_Stop_IT>
        		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80012bc:	2104      	movs	r1, #4
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f004 f990 	bl	80055e4 <HAL_TIM_IC_Stop>

        	}
    }

    if (htim->Instance == TIM5)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a60      	ldr	r2, [pc, #384]	@ (800144c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d155      	bne.n	800137a <HAL_TIM_IC_CaptureCallback+0x22a>
            {

                cycle_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80012ce:	2100      	movs	r1, #0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f004 fff9 	bl	80062c8 <HAL_TIM_ReadCapturedValue>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001450 <HAL_TIM_IC_CaptureCallback+0x300>)
 80012da:	6013      	str	r3, [r2, #0]
                period_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80012dc:	2104      	movs	r1, #4
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f004 fff2 	bl	80062c8 <HAL_TIM_ReadCapturedValue>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b58      	ldr	r3, [pc, #352]	@ (8001454 <HAL_TIM_IC_CaptureCallback+0x304>)
 80012f2:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_2 > 1990 && cycle_rc_2 < 2010 && period_rc_2 > 0 && cycle_rc_2 > period_rc_2) {
 80012f4:	4b56      	ldr	r3, [pc, #344]	@ (8001450 <HAL_TIM_IC_CaptureCallback+0x300>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d93c      	bls.n	800137a <HAL_TIM_IC_CaptureCallback+0x22a>
 8001300:	4b53      	ldr	r3, [pc, #332]	@ (8001450 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001308:	4293      	cmp	r3, r2
 800130a:	d836      	bhi.n	800137a <HAL_TIM_IC_CaptureCallback+0x22a>
 800130c:	4b51      	ldr	r3, [pc, #324]	@ (8001454 <HAL_TIM_IC_CaptureCallback+0x304>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d032      	beq.n	800137a <HAL_TIM_IC_CaptureCallback+0x22a>
 8001314:	4b4e      	ldr	r3, [pc, #312]	@ (8001450 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b4e      	ldr	r3, [pc, #312]	@ (8001454 <HAL_TIM_IC_CaptureCallback+0x304>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d92c      	bls.n	800137a <HAL_TIM_IC_CaptureCallback+0x22a>
            		channel_mag_2 = (float) period_rc_2 / (float) cycle_rc_2;
 8001320:	4b4c      	ldr	r3, [pc, #304]	@ (8001454 <HAL_TIM_IC_CaptureCallback+0x304>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800132c:	4b48      	ldr	r3, [pc, #288]	@ (8001450 <HAL_TIM_IC_CaptureCallback+0x300>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133c:	4b46      	ldr	r3, [pc, #280]	@ (8001458 <HAL_TIM_IC_CaptureCallback+0x308>)
 800133e:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp[2] = (channel_mag_2 - 0.5) * 2 * RC_FULLSCALE;
 8001342:	4b45      	ldr	r3, [pc, #276]	@ (8001458 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800134c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001350:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001354:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001358:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8001420 <HAL_TIM_IC_CaptureCallback+0x2d0>
 800135c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001360:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001364:	4b34      	ldr	r3, [pc, #208]	@ (8001438 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8001366:	edc3 7a02 	vstr	s15, [r3, #8]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800136a:	2100      	movs	r1, #0
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f004 fafb 	bl	8005968 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001372:	2104      	movs	r1, #4
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f004 f935 	bl	80055e4 <HAL_TIM_IC_Stop>

            	}
            }
    if (htim->Instance == TIM15)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a37      	ldr	r2, [pc, #220]	@ (800145c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d175      	bne.n	8001470 <HAL_TIM_IC_CaptureCallback+0x320>
            {

                cycle_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001384:	2100      	movs	r1, #0
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f004 ff9e 	bl	80062c8 <HAL_TIM_ReadCapturedValue>
 800138c:	4603      	mov	r3, r0
 800138e:	4a34      	ldr	r2, [pc, #208]	@ (8001460 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001390:	6013      	str	r3, [r2, #0]
                period_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001392:	2104      	movs	r1, #4
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f004 ff97 	bl	80062c8 <HAL_TIM_ReadCapturedValue>
 800139a:	4602      	mov	r2, r0
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_TIM_IC_CaptureCallback+0x314>)
 80013a8:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_3 > 1990 && cycle_rc_3 < 2010 && period_rc_3 > 0 && cycle_rc_3 > period_rc_3) {
 80013aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001460 <HAL_TIM_IC_CaptureCallback+0x310>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d95c      	bls.n	8001470 <HAL_TIM_IC_CaptureCallback+0x320>
 80013b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <HAL_TIM_IC_CaptureCallback+0x310>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 80013be:	4293      	cmp	r3, r2
 80013c0:	d856      	bhi.n	8001470 <HAL_TIM_IC_CaptureCallback+0x320>
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <HAL_TIM_IC_CaptureCallback+0x314>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d052      	beq.n	8001470 <HAL_TIM_IC_CaptureCallback+0x320>
 80013ca:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <HAL_TIM_IC_CaptureCallback+0x310>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b25      	ldr	r3, [pc, #148]	@ (8001464 <HAL_TIM_IC_CaptureCallback+0x314>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d94c      	bls.n	8001470 <HAL_TIM_IC_CaptureCallback+0x320>
            		channel_mag_3 = (float) period_rc_3 / (float) cycle_rc_3;
 80013d6:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <HAL_TIM_IC_CaptureCallback+0x314>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <HAL_TIM_IC_CaptureCallback+0x310>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <HAL_TIM_IC_CaptureCallback+0x318>)
 80013f4:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp[3] =  channel_mag_3 * RC_FULLSCALE;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001468 <HAL_TIM_IC_CaptureCallback+0x318>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800146c <HAL_TIM_IC_CaptureCallback+0x31c>
 8001402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001406:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8001408:	edc3 7a03 	vstr	s15, [r3, #12]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800140c:	2100      	movs	r1, #0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f004 faaa 	bl	8005968 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001414:	2104      	movs	r1, #4
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f004 f8e4 	bl	80055e4 <HAL_TIM_IC_Stop>
 800141c:	e028      	b.n	8001470 <HAL_TIM_IC_CaptureCallback+0x320>
 800141e:	bf00      	nop
 8001420:	00000000 	.word	0x00000000
 8001424:	408f4000 	.word	0x408f4000
 8001428:	40000400 	.word	0x40000400
 800142c:	24000268 	.word	0x24000268
 8001430:	24000278 	.word	0x24000278
 8001434:	24000288 	.word	0x24000288
 8001438:	2400023c 	.word	0x2400023c
 800143c:	40000800 	.word	0x40000800
 8001440:	2400026c 	.word	0x2400026c
 8001444:	2400027c 	.word	0x2400027c
 8001448:	2400028c 	.word	0x2400028c
 800144c:	40000c00 	.word	0x40000c00
 8001450:	24000270 	.word	0x24000270
 8001454:	24000280 	.word	0x24000280
 8001458:	24000290 	.word	0x24000290
 800145c:	40014000 	.word	0x40014000
 8001460:	24000274 	.word	0x24000274
 8001464:	24000284 	.word	0x24000284
 8001468:	24000294 	.word	0x24000294
 800146c:	447a0000 	.word	0x447a0000

            	}
            }


}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <set_motor_pwm>:


extern TIM_HandleTypeDef htim1;

void set_motor_pwm(uint32_t motor_pwm[])
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if (motor_pwm[0] >= MOTOR_MAX_PWM_VALUE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001494:	d305      	bcc.n	80014a2 <set_motor_pwm+0x1e>
	  htim1.Instance->CCR1 = MOTOR_MAX_PWM_VALUE;
 8001496:	4b35      	ldr	r3, [pc, #212]	@ (800156c <set_motor_pwm+0xe8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800149e:	635a      	str	r2, [r3, #52]	@ 0x34
 80014a0:	e00d      	b.n	80014be <set_motor_pwm+0x3a>
  else if (motor_pwm[0] <= MOTOR_MIN_PWM_VALUE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <set_motor_pwm+0x30>
	  htim1.Instance->CCR1 = MOTOR_MIN_PWM_VALUE;
 80014aa:	4b30      	ldr	r3, [pc, #192]	@ (800156c <set_motor_pwm+0xe8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b2:	e004      	b.n	80014be <set_motor_pwm+0x3a>
  else
	  htim1.Instance->CCR1 = motor_pwm[0] ;
 80014b4:	4b2d      	ldr	r3, [pc, #180]	@ (800156c <set_motor_pwm+0xe8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	635a      	str	r2, [r3, #52]	@ 0x34
  
  if (motor_pwm[1] >= MOTOR_MAX_PWM_VALUE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3304      	adds	r3, #4
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80014c8:	d305      	bcc.n	80014d6 <set_motor_pwm+0x52>
	  htim1.Instance->CCR2 = MOTOR_MAX_PWM_VALUE;
 80014ca:	4b28      	ldr	r3, [pc, #160]	@ (800156c <set_motor_pwm+0xe8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80014d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80014d4:	e00e      	b.n	80014f4 <set_motor_pwm+0x70>
  else if (motor_pwm[1] <= MOTOR_MIN_PWM_VALUE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3304      	adds	r3, #4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d104      	bne.n	80014ea <set_motor_pwm+0x66>
	  htim1.Instance->CCR2 = MOTOR_MIN_PWM_VALUE;
 80014e0:	4b22      	ldr	r3, [pc, #136]	@ (800156c <set_motor_pwm+0xe8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2200      	movs	r2, #0
 80014e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80014e8:	e004      	b.n	80014f4 <set_motor_pwm+0x70>
  else
	  htim1.Instance->CCR2 =  motor_pwm[1] ;
 80014ea:	4b20      	ldr	r3, [pc, #128]	@ (800156c <set_motor_pwm+0xe8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	6852      	ldr	r2, [r2, #4]
 80014f2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  if (motor_pwm[2] >= MOTOR_MAX_PWM_VALUE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3308      	adds	r3, #8
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80014fe:	d305      	bcc.n	800150c <set_motor_pwm+0x88>
	  htim1.Instance->CCR3 = MOTOR_MAX_PWM_VALUE;
 8001500:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <set_motor_pwm+0xe8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001508:	63da      	str	r2, [r3, #60]	@ 0x3c
 800150a:	e00e      	b.n	800152a <set_motor_pwm+0xa6>
  else if (motor_pwm[2] <= MOTOR_MIN_PWM_VALUE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3308      	adds	r3, #8
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d104      	bne.n	8001520 <set_motor_pwm+0x9c>
	  htim1.Instance->CCR3 = MOTOR_MIN_PWM_VALUE;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <set_motor_pwm+0xe8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800151e:	e004      	b.n	800152a <set_motor_pwm+0xa6>
  else
	  htim1.Instance->CCR3 =  motor_pwm[2] ;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <set_motor_pwm+0xe8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6892      	ldr	r2, [r2, #8]
 8001528:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  if (motor_pwm[3] >= MOTOR_MAX_PWM_VALUE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	330c      	adds	r3, #12
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001534:	d305      	bcc.n	8001542 <set_motor_pwm+0xbe>
	  htim1.Instance->CCR4 = MOTOR_MAX_PWM_VALUE;
 8001536:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <set_motor_pwm+0xe8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800153e:	641a      	str	r2, [r3, #64]	@ 0x40
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM_VALUE)
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
  else
	  htim1.Instance->CCR4 = motor_pwm[3] ;
}
 8001540:	e00e      	b.n	8001560 <set_motor_pwm+0xdc>
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM_VALUE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	330c      	adds	r3, #12
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d104      	bne.n	8001556 <set_motor_pwm+0xd2>
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <set_motor_pwm+0xe8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2200      	movs	r2, #0
 8001552:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001554:	e004      	b.n	8001560 <set_motor_pwm+0xdc>
	  htim1.Instance->CCR4 = motor_pwm[3] ;
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <set_motor_pwm+0xe8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68d2      	ldr	r2, [r2, #12]
 800155e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	2400002c 	.word	0x2400002c

08001570 <set_motor_pwm_zero>:


void set_motor_pwm_zero(uint32_t motor_pwm[])
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  motor_pwm[0] = 0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
  motor_pwm[1] = 0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3304      	adds	r3, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
  motor_pwm[2] = 0;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3308      	adds	r3, #8
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
  motor_pwm[3] = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	330c      	adds	r3, #12
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <get_target_euler>:
const float max_yaw_rad = PI*YAW_MAX_DEG/180.0f;
int t1;


void get_target_euler(float euler_rc[], float rc_comm[])
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
    t1 = rc_comm[0];
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b8:	ee17 2a90 	vmov	r2, s15
 80015bc:	4b4c      	ldr	r3, [pc, #304]	@ (80016f0 <get_target_euler+0x14c>)
 80015be:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 80015c0:	4b4b      	ldr	r3, [pc, #300]	@ (80016f0 <get_target_euler+0x14c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015c8:	dd04      	ble.n	80015d4 <get_target_euler+0x30>
        t1 = RC_FULLSCALE;
 80015ca:	4b49      	ldr	r3, [pc, #292]	@ (80016f0 <get_target_euler+0x14c>)
 80015cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e007      	b.n	80015e4 <get_target_euler+0x40>
    else if (t1 < -RC_FULLSCALE)
 80015d4:	4b46      	ldr	r3, [pc, #280]	@ (80016f0 <get_target_euler+0x14c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80015dc:	da02      	bge.n	80015e4 <get_target_euler+0x40>
        t1 = - RC_FULLSCALE;
 80015de:	4b44      	ldr	r3, [pc, #272]	@ (80016f0 <get_target_euler+0x14c>)
 80015e0:	4a44      	ldr	r2, [pc, #272]	@ (80016f4 <get_target_euler+0x150>)
 80015e2:	601a      	str	r2, [r3, #0]
    euler_rc[0] = -t1 * max_pitch_rad / RC_FULLSCALE;
 80015e4:	4b42      	ldr	r3, [pc, #264]	@ (80016f0 <get_target_euler+0x14c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	425b      	negs	r3, r3
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f2:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80016f8 <get_target_euler+0x154>
 80015f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015fa:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80016fc <get_target_euler+0x158>
 80015fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm[1];
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	3304      	adds	r3, #4
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001614:	ee17 2a90 	vmov	r2, s15
 8001618:	4b35      	ldr	r3, [pc, #212]	@ (80016f0 <get_target_euler+0x14c>)
 800161a:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 800161c:	4b34      	ldr	r3, [pc, #208]	@ (80016f0 <get_target_euler+0x14c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001624:	dd04      	ble.n	8001630 <get_target_euler+0x8c>
        t1 = RC_FULLSCALE;
 8001626:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <get_target_euler+0x14c>)
 8001628:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e007      	b.n	8001640 <get_target_euler+0x9c>
    else if (t1 < -RC_FULLSCALE)
 8001630:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <get_target_euler+0x14c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001638:	da02      	bge.n	8001640 <get_target_euler+0x9c>
        t1 = - RC_FULLSCALE;
 800163a:	4b2d      	ldr	r3, [pc, #180]	@ (80016f0 <get_target_euler+0x14c>)
 800163c:	4a2d      	ldr	r2, [pc, #180]	@ (80016f4 <get_target_euler+0x150>)
 800163e:	601a      	str	r2, [r3, #0]
    euler_rc[1] = -t1 * max_roll_rad / RC_FULLSCALE;
 8001640:	4b2b      	ldr	r3, [pc, #172]	@ (80016f0 <get_target_euler+0x14c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	425b      	negs	r3, r3
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80016f8 <get_target_euler+0x154>
 8001652:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3304      	adds	r3, #4
 800165a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80016fc <get_target_euler+0x158>
 800165e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001662:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm[2];
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	3308      	adds	r3, #8
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001672:	ee17 2a90 	vmov	r2, s15
 8001676:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <get_target_euler+0x14c>)
 8001678:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <get_target_euler+0x14c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001682:	dd04      	ble.n	800168e <get_target_euler+0xea>
        t1 = RC_FULLSCALE;
 8001684:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <get_target_euler+0x14c>)
 8001686:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e007      	b.n	800169e <get_target_euler+0xfa>
    else if (t1 < -RC_FULLSCALE)
 800168e:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <get_target_euler+0x14c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001696:	da02      	bge.n	800169e <get_target_euler+0xfa>
        t1 = - RC_FULLSCALE;
 8001698:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <get_target_euler+0x14c>)
 800169a:	4a16      	ldr	r2, [pc, #88]	@ (80016f4 <get_target_euler+0x150>)
 800169c:	601a      	str	r2, [r3, #0]

    if(t1 > YAW_DEAD_THR)
 800169e:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <get_target_euler+0x14c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80016a6:	dd0c      	ble.n	80016c2 <get_target_euler+0x11e>
    {
        euler_rc[3] = euler_rc[3] + max_yaw_rad;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	330c      	adds	r3, #12
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001700 <get_target_euler+0x15c>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	330c      	adds	r3, #12
 80016b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016bc:	edc3 7a00 	vstr	s15, [r3]
    }
    else if(t1 < -YAW_DEAD_THR)
    {
        euler_rc[3] = euler_rc[3] - max_yaw_rad;
    }
}
 80016c0:	e010      	b.n	80016e4 <get_target_euler+0x140>
    else if(t1 < -YAW_DEAD_THR)
 80016c2:	4b0b      	ldr	r3, [pc, #44]	@ (80016f0 <get_target_euler+0x14c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 80016ca:	da0b      	bge.n	80016e4 <get_target_euler+0x140>
        euler_rc[3] = euler_rc[3] - max_yaw_rad;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	330c      	adds	r3, #12
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001700 <get_target_euler+0x15c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	330c      	adds	r3, #12
 80016dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016e0:	edc3 7a00 	vstr	s15, [r3]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	24000298 	.word	0x24000298
 80016f4:	fffffc18 	.word	0xfffffc18
 80016f8:	3f060a92 	.word	0x3f060a92
 80016fc:	447a0000 	.word	0x447a0000
 8001700:	3cab92a6 	.word	0x3cab92a6

08001704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_MspInit+0x30>)
 800170c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001710:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_MspInit+0x30>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_MspInit+0x30>)
 800171c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	58024400 	.word	0x58024400

08001738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b090      	sub	sp, #64	@ 0x40
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a82      	ldr	r2, [pc, #520]	@ (8001960 <HAL_TIM_Base_MspInit+0x228>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10f      	bne.n	800177a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800175a:	4b82      	ldr	r3, [pc, #520]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 800175c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001760:	4a80      	ldr	r2, [pc, #512]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800176a:	4b7e      	ldr	r3, [pc, #504]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 800176c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001778:	e0ee      	b.n	8001958 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM3)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7a      	ldr	r2, [pc, #488]	@ (8001968 <HAL_TIM_Base_MspInit+0x230>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d136      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001784:	4b77      	ldr	r3, [pc, #476]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 8001786:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800178a:	4a76      	ldr	r2, [pc, #472]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001794:	4b73      	ldr	r3, [pc, #460]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 8001796:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	4b70      	ldr	r3, [pc, #448]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 80017a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017b2:	4b6c      	ldr	r3, [pc, #432]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 80017b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	623b      	str	r3, [r7, #32]
 80017be:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017c0:	2310      	movs	r3, #16
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d0:	2302      	movs	r3, #2
 80017d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017d8:	4619      	mov	r1, r3
 80017da:	4864      	ldr	r0, [pc, #400]	@ (800196c <HAL_TIM_Base_MspInit+0x234>)
 80017dc:	f000 fc14 	bl	8002008 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	201d      	movs	r0, #29
 80017e6:	f000 fbda 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017ea:	201d      	movs	r0, #29
 80017ec:	f000 fbf1 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
}
 80017f0:	e0b2      	b.n	8001958 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM4)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001970 <HAL_TIM_Base_MspInit+0x238>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d136      	bne.n	800186a <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017fc:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 80017fe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001802:	4a58      	ldr	r2, [pc, #352]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800180c:	4b55      	ldr	r3, [pc, #340]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 800180e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b52      	ldr	r3, [pc, #328]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 800181c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001820:	4a50      	ldr	r2, [pc, #320]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800182a:	4b4e      	ldr	r3, [pc, #312]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 800182c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001838:	2340      	movs	r3, #64	@ 0x40
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001848:	2302      	movs	r3, #2
 800184a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001850:	4619      	mov	r1, r3
 8001852:	4846      	ldr	r0, [pc, #280]	@ (800196c <HAL_TIM_Base_MspInit+0x234>)
 8001854:	f000 fbd8 	bl	8002008 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	201e      	movs	r0, #30
 800185e:	f000 fb9e 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001862:	201e      	movs	r0, #30
 8001864:	f000 fbb5 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
}
 8001868:	e076      	b.n	8001958 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM5)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a41      	ldr	r2, [pc, #260]	@ (8001974 <HAL_TIM_Base_MspInit+0x23c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d136      	bne.n	80018e2 <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001874:	4b3b      	ldr	r3, [pc, #236]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 8001876:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800187a:	4a3a      	ldr	r2, [pc, #232]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001884:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 8001886:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b34      	ldr	r3, [pc, #208]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 8001894:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001898:	4a32      	ldr	r2, [pc, #200]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018a2:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 80018a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018b0:	2301      	movs	r3, #1
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018c0:	2302      	movs	r3, #2
 80018c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	482b      	ldr	r0, [pc, #172]	@ (8001978 <HAL_TIM_Base_MspInit+0x240>)
 80018cc:	f000 fb9c 	bl	8002008 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	2032      	movs	r0, #50	@ 0x32
 80018d6:	f000 fb62 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80018da:	2032      	movs	r0, #50	@ 0x32
 80018dc:	f000 fb79 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
}
 80018e0:	e03a      	b.n	8001958 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM15)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a25      	ldr	r2, [pc, #148]	@ (800197c <HAL_TIM_Base_MspInit+0x244>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d135      	bne.n	8001958 <HAL_TIM_Base_MspInit+0x220>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80018ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 80018ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80018f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 80018fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800190a:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 800190c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001910:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 8001912:	f043 0310 	orr.w	r3, r3, #16
 8001916:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_TIM_Base_MspInit+0x22c>)
 800191c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001928:	2320      	movs	r3, #32
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001938:	2304      	movs	r3, #4
 800193a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800193c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	480f      	ldr	r0, [pc, #60]	@ (8001980 <HAL_TIM_Base_MspInit+0x248>)
 8001944:	f000 fb60 	bl	8002008 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2074      	movs	r0, #116	@ 0x74
 800194e:	f000 fb26 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001952:	2074      	movs	r0, #116	@ 0x74
 8001954:	f000 fb3d 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
}
 8001958:	bf00      	nop
 800195a:	3740      	adds	r7, #64	@ 0x40
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40010000 	.word	0x40010000
 8001964:	58024400 	.word	0x58024400
 8001968:	40000400 	.word	0x40000400
 800196c:	58020400 	.word	0x58020400
 8001970:	40000800 	.word	0x40000800
 8001974:	40000c00 	.word	0x40000c00
 8001978:	58020000 	.word	0x58020000
 800197c:	40014000 	.word	0x40014000
 8001980:	58021000 	.word	0x58021000

08001984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a13      	ldr	r2, [pc, #76]	@ (80019f0 <HAL_TIM_MspPostInit+0x6c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d11f      	bne.n	80019e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019a6:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <HAL_TIM_MspPostInit+0x70>)
 80019a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019ac:	4a11      	ldr	r2, [pc, #68]	@ (80019f4 <HAL_TIM_MspPostInit+0x70>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_TIM_MspPostInit+0x70>)
 80019b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80019c4:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80019c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <HAL_TIM_MspPostInit+0x74>)
 80019e2:	f000 fb11 	bl	8002008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40010000 	.word	0x40010000
 80019f4:	58024400 	.word	0x58024400
 80019f8:	58021000 	.word	0x58021000

080019fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	22c0      	movs	r2, #192	@ 0xc0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f006 fe2b 	bl	8008678 <memset>
  if(huart->Instance==USART3)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a27      	ldr	r2, [pc, #156]	@ (8001ac4 <HAL_UART_MspInit+0xc8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d146      	bne.n	8001aba <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a2c:	f04f 0202 	mov.w	r2, #2
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 fcc2 	bl	80033cc <HAL_RCCEx_PeriphCLKConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a4e:	f7ff fd13 	bl	8001478 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_UART_MspInit+0xcc>)
 8001a54:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a58:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac8 <HAL_UART_MspInit+0xcc>)
 8001a5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a5e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_UART_MspInit+0xcc>)
 8001a64:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a70:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_UART_MspInit+0xcc>)
 8001a72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a76:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <HAL_UART_MspInit+0xcc>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a80:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <HAL_UART_MspInit+0xcc>)
 8001a82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	@ (8001acc <HAL_UART_MspInit+0xd0>)
 8001ab6:	f000 faa7 	bl	8002008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	37e8      	adds	r7, #232	@ 0xe8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40004800 	.word	0x40004800
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	58020c00 	.word	0x58020c00

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b26:	f000 f93f 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <TIM3_IRQHandler+0x10>)
 8001b36:	f003 ffd5 	bl	8005ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	24000078 	.word	0x24000078

08001b44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <TIM4_IRQHandler+0x10>)
 8001b4a:	f003 ffcb 	bl	8005ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	240000c4 	.word	0x240000c4

08001b58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b5c:	4802      	ldr	r0, [pc, #8]	@ (8001b68 <TIM5_IRQHandler+0x10>)
 8001b5e:	f003 ffc1 	bl	8005ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	24000110 	.word	0x24000110

08001b6c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <TIM15_IRQHandler+0x10>)
 8001b72:	f003 ffb7 	bl	8005ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2400015c 	.word	0x2400015c

08001b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b84:	4b32      	ldr	r3, [pc, #200]	@ (8001c50 <SystemInit+0xd0>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8a:	4a31      	ldr	r2, [pc, #196]	@ (8001c50 <SystemInit+0xd0>)
 8001b8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b94:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <SystemInit+0xd4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d807      	bhi.n	8001bb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <SystemInit+0xd4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 030f 	bic.w	r3, r3, #15
 8001ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c54 <SystemInit+0xd4>)
 8001baa:	f043 0303 	orr.w	r3, r3, #3
 8001bae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <SystemInit+0xd8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a28      	ldr	r2, [pc, #160]	@ (8001c58 <SystemInit+0xd8>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bbc:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <SystemInit+0xd8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bc2:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <SystemInit+0xd8>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4924      	ldr	r1, [pc, #144]	@ (8001c58 <SystemInit+0xd8>)
 8001bc8:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <SystemInit+0xdc>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bce:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <SystemInit+0xd4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bda:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <SystemInit+0xd4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 030f 	bic.w	r3, r3, #15
 8001be2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c54 <SystemInit+0xd4>)
 8001be4:	f043 0303 	orr.w	r3, r3, #3
 8001be8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001bea:	4b1b      	ldr	r3, [pc, #108]	@ (8001c58 <SystemInit+0xd8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <SystemInit+0xd8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <SystemInit+0xd8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	@ (8001c58 <SystemInit+0xd8>)
 8001bfe:	4a18      	ldr	r2, [pc, #96]	@ (8001c60 <SystemInit+0xe0>)
 8001c00:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <SystemInit+0xd8>)
 8001c04:	4a17      	ldr	r2, [pc, #92]	@ (8001c64 <SystemInit+0xe4>)
 8001c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <SystemInit+0xd8>)
 8001c0a:	4a17      	ldr	r2, [pc, #92]	@ (8001c68 <SystemInit+0xe8>)
 8001c0c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <SystemInit+0xd8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c14:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <SystemInit+0xd8>)
 8001c16:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <SystemInit+0xe8>)
 8001c18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <SystemInit+0xd8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c20:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <SystemInit+0xd8>)
 8001c22:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <SystemInit+0xe8>)
 8001c24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <SystemInit+0xd8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <SystemInit+0xd8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a09      	ldr	r2, [pc, #36]	@ (8001c58 <SystemInit+0xd8>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c38:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <SystemInit+0xd8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <SystemInit+0xec>)
 8001c40:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	52002000 	.word	0x52002000
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c60:	02020200 	.word	0x02020200
 8001c64:	01ff0000 	.word	0x01ff0000
 8001c68:	01010280 	.word	0x01010280
 8001c6c:	52004000 	.word	0x52004000

08001c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c74:	f7ff ff84 	bl	8001b80 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7a:	490d      	ldr	r1, [pc, #52]	@ (8001cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c90:	4c0a      	ldr	r4, [pc, #40]	@ (8001cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f006 fcf3 	bl	8008688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca2:	f7fe fc9d 	bl	80005e0 <main>
  bx  lr
 8001ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001cac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cb0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001cb4:	08008730 	.word	0x08008730
  ldr r2, =_sbss
 8001cb8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001cbc:	240002a0 	.word	0x240002a0

08001cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC_IRQHandler>
	...

08001cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cca:	2003      	movs	r0, #3
 8001ccc:	f000 f95c 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001cd0:	f001 f9a6 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_Init+0x68>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	4913      	ldr	r1, [pc, #76]	@ (8001d30 <HAL_Init+0x6c>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_Init+0x68>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d30 <HAL_Init+0x6c>)
 8001cf8:	5cd3      	ldrb	r3, [r2, r3]
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	4a0b      	ldr	r2, [pc, #44]	@ (8001d34 <HAL_Init+0x70>)
 8001d06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d08:	4a0b      	ldr	r2, [pc, #44]	@ (8001d38 <HAL_Init+0x74>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 f814 	bl	8001d3c <HAL_InitTick>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e002      	b.n	8001d24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d1e:	f7ff fcf1 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	080086e8 	.word	0x080086e8
 8001d34:	24000004 	.word	0x24000004
 8001d38:	24000000 	.word	0x24000000

08001d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d44:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_InitTick+0x60>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e021      	b.n	8001d94 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d50:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <HAL_InitTick+0x64>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <HAL_InitTick+0x60>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f941 	bl	8001fee <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d84:	f000 f90b 	bl	8001f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	@ (8001da4 <HAL_InitTick+0x68>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	2400000c 	.word	0x2400000c
 8001da0:	24000000 	.word	0x24000000
 8001da4:	24000008 	.word	0x24000008

08001da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_IncTick+0x24>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <HAL_IncTick+0x24>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	2400000c 	.word	0x2400000c
 8001dcc:	2400029c 	.word	0x2400029c

08001dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	@ (8001de4 <HAL_GetTick+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	2400029c 	.word	0x2400029c

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x40>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	@ (8001e28 <__NVIC_SetPriorityGrouping+0x40>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00
 8001e2c:	05fa0000 	.word	0x05fa0000

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0b      	blt.n	8001e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4907      	ldr	r1, [pc, #28]	@ (8001e84 <__NVIC_EnableIRQ+0x38>)
 8001e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	@ (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	@ (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	@ 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
         );
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	@ 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f68:	f7ff ff8e 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff29 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fac:	f7ff ff40 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff ff90 	bl	8001edc <NVIC_EncodePriority>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff5f 	bl	8001e88 <__NVIC_SetPriority>
}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff33 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffa4 	bl	8001f44 <SysTick_Config>
 8001ffc:	4603      	mov	r3, r0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	@ 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002016:	4b89      	ldr	r3, [pc, #548]	@ (800223c <HAL_GPIO_Init+0x234>)
 8002018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800201a:	e194      	b.n	8002346 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	2101      	movs	r1, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8186 	beq.w	8002340 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b01      	cmp	r3, #1
 800203e:	d005      	beq.n	800204c <HAL_GPIO_Init+0x44>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d130      	bne.n	80020ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002082:	2201      	movs	r2, #1
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 0201 	and.w	r2, r3, #1
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d017      	beq.n	80020ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d123      	bne.n	800213e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	220f      	movs	r2, #15
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	08da      	lsrs	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3208      	adds	r2, #8
 8002138:	69b9      	ldr	r1, [r7, #24]
 800213a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0203 	and.w	r2, r3, #3
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80e0 	beq.w	8002340 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002180:	4b2f      	ldr	r3, [pc, #188]	@ (8002240 <HAL_GPIO_Init+0x238>)
 8002182:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002186:	4a2e      	ldr	r2, [pc, #184]	@ (8002240 <HAL_GPIO_Init+0x238>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002190:	4b2b      	ldr	r3, [pc, #172]	@ (8002240 <HAL_GPIO_Init+0x238>)
 8002192:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800219e:	4a29      	ldr	r2, [pc, #164]	@ (8002244 <HAL_GPIO_Init+0x23c>)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a20      	ldr	r2, [pc, #128]	@ (8002248 <HAL_GPIO_Init+0x240>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d052      	beq.n	8002270 <HAL_GPIO_Init+0x268>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a1f      	ldr	r2, [pc, #124]	@ (800224c <HAL_GPIO_Init+0x244>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d031      	beq.n	8002236 <HAL_GPIO_Init+0x22e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002250 <HAL_GPIO_Init+0x248>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d02b      	beq.n	8002232 <HAL_GPIO_Init+0x22a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002254 <HAL_GPIO_Init+0x24c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d025      	beq.n	800222e <HAL_GPIO_Init+0x226>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002258 <HAL_GPIO_Init+0x250>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01f      	beq.n	800222a <HAL_GPIO_Init+0x222>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1b      	ldr	r2, [pc, #108]	@ (800225c <HAL_GPIO_Init+0x254>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d019      	beq.n	8002226 <HAL_GPIO_Init+0x21e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002260 <HAL_GPIO_Init+0x258>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0x21a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_GPIO_Init+0x25c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00d      	beq.n	800221e <HAL_GPIO_Init+0x216>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a18      	ldr	r2, [pc, #96]	@ (8002268 <HAL_GPIO_Init+0x260>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <HAL_GPIO_Init+0x212>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a17      	ldr	r2, [pc, #92]	@ (800226c <HAL_GPIO_Init+0x264>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_GPIO_Init+0x20e>
 8002212:	2309      	movs	r3, #9
 8002214:	e02d      	b.n	8002272 <HAL_GPIO_Init+0x26a>
 8002216:	230a      	movs	r3, #10
 8002218:	e02b      	b.n	8002272 <HAL_GPIO_Init+0x26a>
 800221a:	2308      	movs	r3, #8
 800221c:	e029      	b.n	8002272 <HAL_GPIO_Init+0x26a>
 800221e:	2307      	movs	r3, #7
 8002220:	e027      	b.n	8002272 <HAL_GPIO_Init+0x26a>
 8002222:	2306      	movs	r3, #6
 8002224:	e025      	b.n	8002272 <HAL_GPIO_Init+0x26a>
 8002226:	2305      	movs	r3, #5
 8002228:	e023      	b.n	8002272 <HAL_GPIO_Init+0x26a>
 800222a:	2304      	movs	r3, #4
 800222c:	e021      	b.n	8002272 <HAL_GPIO_Init+0x26a>
 800222e:	2303      	movs	r3, #3
 8002230:	e01f      	b.n	8002272 <HAL_GPIO_Init+0x26a>
 8002232:	2302      	movs	r3, #2
 8002234:	e01d      	b.n	8002272 <HAL_GPIO_Init+0x26a>
 8002236:	2301      	movs	r3, #1
 8002238:	e01b      	b.n	8002272 <HAL_GPIO_Init+0x26a>
 800223a:	bf00      	nop
 800223c:	58000080 	.word	0x58000080
 8002240:	58024400 	.word	0x58024400
 8002244:	58000400 	.word	0x58000400
 8002248:	58020000 	.word	0x58020000
 800224c:	58020400 	.word	0x58020400
 8002250:	58020800 	.word	0x58020800
 8002254:	58020c00 	.word	0x58020c00
 8002258:	58021000 	.word	0x58021000
 800225c:	58021400 	.word	0x58021400
 8002260:	58021800 	.word	0x58021800
 8002264:	58021c00 	.word	0x58021c00
 8002268:	58022000 	.word	0x58022000
 800226c:	58022400 	.word	0x58022400
 8002270:	2300      	movs	r3, #0
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4093      	lsls	r3, r2
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002282:	4938      	ldr	r1, [pc, #224]	@ (8002364 <HAL_GPIO_Init+0x35c>)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	3301      	adds	r3, #1
 8002344:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	f47f ae63 	bne.w	800201c <HAL_GPIO_Init+0x14>
  }
}
 8002356:	bf00      	nop
 8002358:	bf00      	nop
 800235a:	3724      	adds	r7, #36	@ 0x24
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	58000400 	.word	0x58000400

08002368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
 8002374:	4613      	mov	r3, r2
 8002376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002378:	787b      	ldrb	r3, [r7, #1]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800237e:	887a      	ldrh	r2, [r7, #2]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002384:	e003      	b.n	800238e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	041a      	lsls	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	619a      	str	r2, [r3, #24]
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80023a4:	4b29      	ldr	r3, [pc, #164]	@ (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d00a      	beq.n	80023c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023b0:	4b26      	ldr	r3, [pc, #152]	@ (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d001      	beq.n	80023c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e040      	b.n	8002444 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e03e      	b.n	8002444 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023c6:	4b21      	ldr	r3, [pc, #132]	@ (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80023ce:	491f      	ldr	r1, [pc, #124]	@ (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023d6:	f7ff fcfb 	bl	8001dd0 <HAL_GetTick>
 80023da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023dc:	e009      	b.n	80023f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023de:	f7ff fcf7 	bl	8001dd0 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023ec:	d901      	bls.n	80023f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e028      	b.n	8002444 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fe:	d1ee      	bne.n	80023de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b1e      	cmp	r3, #30
 8002404:	d008      	beq.n	8002418 <HAL_PWREx_ConfigSupply+0x7c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b2e      	cmp	r3, #46	@ 0x2e
 800240a:	d005      	beq.n	8002418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b1d      	cmp	r3, #29
 8002410:	d002      	beq.n	8002418 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b2d      	cmp	r3, #45	@ 0x2d
 8002416:	d114      	bne.n	8002442 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002418:	f7ff fcda 	bl	8001dd0 <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800241e:	e009      	b.n	8002434 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002420:	f7ff fcd6 	bl	8001dd0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800242e:	d901      	bls.n	8002434 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e007      	b.n	8002444 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_PWREx_ConfigSupply+0xb0>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002440:	d1ee      	bne.n	8002420 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	58024800 	.word	0x58024800

08002450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08c      	sub	sp, #48	@ 0x30
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	f000 bc1f 	b.w	8002ca2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80b3 	beq.w	80025d8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	4b95      	ldr	r3, [pc, #596]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800247c:	4b92      	ldr	r3, [pc, #584]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002484:	2b10      	cmp	r3, #16
 8002486:	d007      	beq.n	8002498 <HAL_RCC_OscConfig+0x48>
 8002488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248a:	2b18      	cmp	r3, #24
 800248c:	d112      	bne.n	80024b4 <HAL_RCC_OscConfig+0x64>
 800248e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d10d      	bne.n	80024b4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	4b8b      	ldr	r3, [pc, #556]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 8098 	beq.w	80025d6 <HAL_RCC_OscConfig+0x186>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f040 8093 	bne.w	80025d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e3f6      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024bc:	d106      	bne.n	80024cc <HAL_RCC_OscConfig+0x7c>
 80024be:	4b82      	ldr	r3, [pc, #520]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a81      	ldr	r2, [pc, #516]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e058      	b.n	800257e <HAL_RCC_OscConfig+0x12e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d112      	bne.n	80024fa <HAL_RCC_OscConfig+0xaa>
 80024d4:	4b7c      	ldr	r3, [pc, #496]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a7b      	ldr	r2, [pc, #492]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b79      	ldr	r3, [pc, #484]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a78      	ldr	r2, [pc, #480]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80024e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b76      	ldr	r3, [pc, #472]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a75      	ldr	r2, [pc, #468]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e041      	b.n	800257e <HAL_RCC_OscConfig+0x12e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002502:	d112      	bne.n	800252a <HAL_RCC_OscConfig+0xda>
 8002504:	4b70      	ldr	r3, [pc, #448]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6f      	ldr	r2, [pc, #444]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800250a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b6d      	ldr	r3, [pc, #436]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a6c      	ldr	r2, [pc, #432]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002516:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b6a      	ldr	r3, [pc, #424]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a69      	ldr	r2, [pc, #420]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	e029      	b.n	800257e <HAL_RCC_OscConfig+0x12e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002532:	d112      	bne.n	800255a <HAL_RCC_OscConfig+0x10a>
 8002534:	4b64      	ldr	r3, [pc, #400]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a63      	ldr	r2, [pc, #396]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800253a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	4b61      	ldr	r3, [pc, #388]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a60      	ldr	r2, [pc, #384]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b5e      	ldr	r3, [pc, #376]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a5d      	ldr	r2, [pc, #372]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e011      	b.n	800257e <HAL_RCC_OscConfig+0x12e>
 800255a:	4b5b      	ldr	r3, [pc, #364]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a5a      	ldr	r2, [pc, #360]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b58      	ldr	r3, [pc, #352]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a57      	ldr	r2, [pc, #348]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800256c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b55      	ldr	r3, [pc, #340]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a54      	ldr	r2, [pc, #336]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002578:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800257c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d013      	beq.n	80025ae <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7ff fc23 	bl	8001dd0 <HAL_GetTick>
 800258a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258e:	f7ff fc1f 	bl	8001dd0 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b64      	cmp	r3, #100	@ 0x64
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e380      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a0:	4b49      	ldr	r3, [pc, #292]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x13e>
 80025ac:	e014      	b.n	80025d8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7ff fc0f 	bl	8001dd0 <HAL_GetTick>
 80025b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b6:	f7ff fc0b 	bl	8001dd0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	@ 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e36c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025c8:	4b3f      	ldr	r3, [pc, #252]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x166>
 80025d4:	e000      	b.n	80025d8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 808c 	beq.w	80026fe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e6:	4b38      	ldr	r3, [pc, #224]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f0:	4b35      	ldr	r3, [pc, #212]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80025f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_RCC_OscConfig+0x1bc>
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	2b18      	cmp	r3, #24
 8002600:	d137      	bne.n	8002672 <HAL_RCC_OscConfig+0x222>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d132      	bne.n	8002672 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260c:	4b2e      	ldr	r3, [pc, #184]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_OscConfig+0x1d4>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e33e      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002624:	4b28      	ldr	r3, [pc, #160]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 0219 	bic.w	r2, r3, #25
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4925      	ldr	r1, [pc, #148]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7ff fbcb 	bl	8001dd0 <HAL_GetTick>
 800263a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263e:	f7ff fbc7 	bl	8001dd0 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e328      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002650:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265c:	4b1a      	ldr	r3, [pc, #104]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	061b      	lsls	r3, r3, #24
 800266a:	4917      	ldr	r1, [pc, #92]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002670:	e045      	b.n	80026fe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d028      	beq.n	80026cc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800267a:	4b13      	ldr	r3, [pc, #76]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 0219 	bic.w	r2, r3, #25
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4910      	ldr	r1, [pc, #64]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7ff fba0 	bl	8001dd0 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002694:	f7ff fb9c 	bl	8001dd0 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e2fd      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026a6:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	061b      	lsls	r3, r3, #24
 80026c0:	4901      	ldr	r1, [pc, #4]	@ (80026c8 <HAL_RCC_OscConfig+0x278>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	604b      	str	r3, [r1, #4]
 80026c6:	e01a      	b.n	80026fe <HAL_RCC_OscConfig+0x2ae>
 80026c8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026cc:	4b97      	ldr	r3, [pc, #604]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a96      	ldr	r2, [pc, #600]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff fb7a 	bl	8001dd0 <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e0:	f7ff fb76 	bl	8001dd0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e2d7      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026f2:	4b8e      	ldr	r3, [pc, #568]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d06a      	beq.n	80027e0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270a:	4b88      	ldr	r3, [pc, #544]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002712:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002714:	4b85      	ldr	r3, [pc, #532]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 8002716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002718:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d007      	beq.n	8002730 <HAL_RCC_OscConfig+0x2e0>
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b18      	cmp	r3, #24
 8002724:	d11b      	bne.n	800275e <HAL_RCC_OscConfig+0x30e>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d116      	bne.n	800275e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002730:	4b7e      	ldr	r3, [pc, #504]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x2f8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b80      	cmp	r3, #128	@ 0x80
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e2ac      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002748:	4b78      	ldr	r3, [pc, #480]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	4975      	ldr	r1, [pc, #468]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800275c:	e040      	b.n	80027e0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d023      	beq.n	80027ae <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002766:	4b71      	ldr	r3, [pc, #452]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a70      	ldr	r2, [pc, #448]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 800276c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7ff fb2d 	bl	8001dd0 <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800277a:	f7ff fb29 	bl	8001dd0 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e28a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800278c:	4b67      	ldr	r3, [pc, #412]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002798:	4b64      	ldr	r3, [pc, #400]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	4961      	ldr	r1, [pc, #388]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60cb      	str	r3, [r1, #12]
 80027ac:	e018      	b.n	80027e0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027ae:	4b5f      	ldr	r3, [pc, #380]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a5e      	ldr	r2, [pc, #376]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80027b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7ff fb09 	bl	8001dd0 <HAL_GetTick>
 80027be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027c2:	f7ff fb05 	bl	8001dd0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e266      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027d4:	4b55      	ldr	r3, [pc, #340]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f0      	bne.n	80027c2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d036      	beq.n	800285a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d019      	beq.n	8002828 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f4:	4b4d      	ldr	r3, [pc, #308]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80027f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f8:	4a4c      	ldr	r2, [pc, #304]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7ff fae6 	bl	8001dd0 <HAL_GetTick>
 8002804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002808:	f7ff fae2 	bl	8001dd0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e243      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800281a:	4b44      	ldr	r3, [pc, #272]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 800281c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x3b8>
 8002826:	e018      	b.n	800285a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002828:	4b40      	ldr	r3, [pc, #256]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 800282a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282c:	4a3f      	ldr	r2, [pc, #252]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff facc 	bl	8001dd0 <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7ff fac8 	bl	8001dd0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e229      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800284e:	4b37      	ldr	r3, [pc, #220]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 8002850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d036      	beq.n	80028d4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d019      	beq.n	80028a2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800286e:	4b2f      	ldr	r3, [pc, #188]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a2e      	ldr	r2, [pc, #184]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 8002874:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002878:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800287a:	f7ff faa9 	bl	8001dd0 <HAL_GetTick>
 800287e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002882:	f7ff faa5 	bl	8001dd0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e206      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002894:	4b25      	ldr	r3, [pc, #148]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x432>
 80028a0:	e018      	b.n	80028d4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028a2:	4b22      	ldr	r3, [pc, #136]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a21      	ldr	r2, [pc, #132]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80028a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028ae:	f7ff fa8f 	bl	8001dd0 <HAL_GetTick>
 80028b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b6:	f7ff fa8b 	bl	8001dd0 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e1ec      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80af 	beq.w	8002a40 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028e2:	4b13      	ldr	r3, [pc, #76]	@ (8002930 <HAL_RCC_OscConfig+0x4e0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a12      	ldr	r2, [pc, #72]	@ (8002930 <HAL_RCC_OscConfig+0x4e0>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028ee:	f7ff fa6f 	bl	8001dd0 <HAL_GetTick>
 80028f2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7ff fa6b 	bl	8001dd0 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	@ 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e1cc      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <HAL_RCC_OscConfig+0x4e0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d10b      	bne.n	8002934 <HAL_RCC_OscConfig+0x4e4>
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002920:	4a02      	ldr	r2, [pc, #8]	@ (800292c <HAL_RCC_OscConfig+0x4dc>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	@ 0x70
 8002928:	e05b      	b.n	80029e2 <HAL_RCC_OscConfig+0x592>
 800292a:	bf00      	nop
 800292c:	58024400 	.word	0x58024400
 8002930:	58024800 	.word	0x58024800
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d112      	bne.n	8002962 <HAL_RCC_OscConfig+0x512>
 800293c:	4b9d      	ldr	r3, [pc, #628]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a9c      	ldr	r2, [pc, #624]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
 8002948:	4b9a      	ldr	r3, [pc, #616]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a99      	ldr	r2, [pc, #612]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 800294e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	4b97      	ldr	r3, [pc, #604]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002958:	4a96      	ldr	r2, [pc, #600]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 800295a:	f023 0304 	bic.w	r3, r3, #4
 800295e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002960:	e03f      	b.n	80029e2 <HAL_RCC_OscConfig+0x592>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b05      	cmp	r3, #5
 8002968:	d112      	bne.n	8002990 <HAL_RCC_OscConfig+0x540>
 800296a:	4b92      	ldr	r3, [pc, #584]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	4a91      	ldr	r2, [pc, #580]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002970:	f043 0304 	orr.w	r3, r3, #4
 8002974:	6713      	str	r3, [r2, #112]	@ 0x70
 8002976:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a8e      	ldr	r2, [pc, #568]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 800297c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	4a8b      	ldr	r2, [pc, #556]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	@ 0x70
 800298e:	e028      	b.n	80029e2 <HAL_RCC_OscConfig+0x592>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b85      	cmp	r3, #133	@ 0x85
 8002996:	d112      	bne.n	80029be <HAL_RCC_OscConfig+0x56e>
 8002998:	4b86      	ldr	r3, [pc, #536]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a85      	ldr	r2, [pc, #532]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	4b83      	ldr	r3, [pc, #524]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a82      	ldr	r2, [pc, #520]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 80029aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b0:	4b80      	ldr	r3, [pc, #512]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	4a7f      	ldr	r2, [pc, #508]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80029bc:	e011      	b.n	80029e2 <HAL_RCC_OscConfig+0x592>
 80029be:	4b7d      	ldr	r3, [pc, #500]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c2:	4a7c      	ldr	r2, [pc, #496]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ca:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ce:	4a79      	ldr	r2, [pc, #484]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d6:	4b77      	ldr	r3, [pc, #476]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	4a76      	ldr	r2, [pc, #472]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 80029dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d015      	beq.n	8002a16 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7ff f9f1 	bl	8001dd0 <HAL_GetTick>
 80029ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7ff f9ed 	bl	8001dd0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e14c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a08:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ee      	beq.n	80029f2 <HAL_RCC_OscConfig+0x5a2>
 8002a14:	e014      	b.n	8002a40 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a16:	f7ff f9db 	bl	8001dd0 <HAL_GetTick>
 8002a1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7ff f9d7 	bl	8001dd0 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e136      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a34:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ee      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 812b 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a52:	2b18      	cmp	r3, #24
 8002a54:	f000 80bb 	beq.w	8002bce <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	f040 8095 	bne.w	8002b8c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b54      	ldr	r3, [pc, #336]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a53      	ldr	r2, [pc, #332]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002a68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7ff f9af 	bl	8001dd0 <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7ff f9ab 	bl	8001dd0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e10c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a88:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a94:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002a96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a98:	4b47      	ldr	r3, [pc, #284]	@ (8002bb8 <HAL_RCC_OscConfig+0x768>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	4942      	ldr	r1, [pc, #264]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	628b      	str	r3, [r1, #40]	@ 0x28
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abc:	3b01      	subs	r3, #1
 8002abe:	025b      	lsls	r3, r3, #9
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ade:	4935      	ldr	r1, [pc, #212]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ae4:	4b33      	ldr	r3, [pc, #204]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	4a32      	ldr	r2, [pc, #200]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002af0:	4b30      	ldr	r3, [pc, #192]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af4:	4b31      	ldr	r3, [pc, #196]	@ (8002bbc <HAL_RCC_OscConfig+0x76c>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002afc:	00d2      	lsls	r2, r2, #3
 8002afe:	492d      	ldr	r1, [pc, #180]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b04:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	f023 020c 	bic.w	r2, r3, #12
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	4928      	ldr	r1, [pc, #160]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b16:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1a:	f023 0202 	bic.w	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	4924      	ldr	r1, [pc, #144]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b28:	4b22      	ldr	r3, [pc, #136]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	4a21      	ldr	r2, [pc, #132]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b34:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b40:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b4c:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b58:	4b16      	ldr	r3, [pc, #88]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a15      	ldr	r2, [pc, #84]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7ff f934 	bl	8001dd0 <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7ff f930 	bl	8001dd0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e091      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x71c>
 8002b8a:	e089      	b.n	8002ca0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b09      	ldr	r3, [pc, #36]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a08      	ldr	r2, [pc, #32]	@ (8002bb4 <HAL_RCC_OscConfig+0x764>)
 8002b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7ff f91a 	bl	8001dd0 <HAL_GetTick>
 8002b9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9e:	e00f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7ff f916 	bl	8001dd0 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d908      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e077      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
 8002bb2:	bf00      	nop
 8002bb4:	58024400 	.word	0x58024400
 8002bb8:	fffffc0c 	.word	0xfffffc0c
 8002bbc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002cac <HAL_RCC_OscConfig+0x85c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e9      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x750>
 8002bcc:	e068      	b.n	8002ca0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bce:	4b37      	ldr	r3, [pc, #220]	@ (8002cac <HAL_RCC_OscConfig+0x85c>)
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bd4:	4b35      	ldr	r3, [pc, #212]	@ (8002cac <HAL_RCC_OscConfig+0x85c>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d031      	beq.n	8002c46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d12a      	bne.n	8002c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d122      	bne.n	8002c46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d11a      	bne.n	8002c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	0a5b      	lsrs	r3, r3, #9
 8002c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d111      	bne.n	8002c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	0c1b      	lsrs	r3, r3, #16
 8002c26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d108      	bne.n	8002c46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0e1b      	lsrs	r3, r3, #24
 8002c38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e02b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c4a:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <HAL_RCC_OscConfig+0x85c>)
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4e:	08db      	lsrs	r3, r3, #3
 8002c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c54:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d01f      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c60:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_RCC_OscConfig+0x85c>)
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	4a11      	ldr	r2, [pc, #68]	@ (8002cac <HAL_RCC_OscConfig+0x85c>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c6c:	f7ff f8b0 	bl	8001dd0 <HAL_GetTick>
 8002c70:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c72:	bf00      	nop
 8002c74:	f7ff f8ac 	bl	8001dd0 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d0f9      	beq.n	8002c74 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c80:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <HAL_RCC_OscConfig+0x85c>)
 8002c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c84:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_RCC_OscConfig+0x860>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c8c:	00d2      	lsls	r2, r2, #3
 8002c8e:	4907      	ldr	r1, [pc, #28]	@ (8002cac <HAL_RCC_OscConfig+0x85c>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_RCC_OscConfig+0x85c>)
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <HAL_RCC_OscConfig+0x85c>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3730      	adds	r7, #48	@ 0x30
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	ffff0007 	.word	0xffff0007

08002cb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e19c      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d910      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b87      	ldr	r3, [pc, #540]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 020f 	bic.w	r2, r3, #15
 8002cde:	4985      	ldr	r1, [pc, #532]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b83      	ldr	r3, [pc, #524]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e184      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d908      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d14:	4b78      	ldr	r3, [pc, #480]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	4975      	ldr	r1, [pc, #468]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d010      	beq.n	8002d54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	4b70      	ldr	r3, [pc, #448]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d908      	bls.n	8002d54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d42:	4b6d      	ldr	r3, [pc, #436]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	496a      	ldr	r1, [pc, #424]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	4b64      	ldr	r3, [pc, #400]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d908      	bls.n	8002d82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d70:	4b61      	ldr	r3, [pc, #388]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	495e      	ldr	r1, [pc, #376]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	4b59      	ldr	r3, [pc, #356]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d9e:	4b56      	ldr	r3, [pc, #344]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4953      	ldr	r1, [pc, #332]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d908      	bls.n	8002dde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f023 020f 	bic.w	r2, r3, #15
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4947      	ldr	r1, [pc, #284]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d055      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4940      	ldr	r1, [pc, #256]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e04:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d121      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0f6      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e1c:	4b36      	ldr	r3, [pc, #216]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d115      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0ea      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e34:	4b30      	ldr	r3, [pc, #192]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0de      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e44:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0d6      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e54:	4b28      	ldr	r3, [pc, #160]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f023 0207 	bic.w	r2, r3, #7
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4925      	ldr	r1, [pc, #148]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e66:	f7fe ffb3 	bl	8001dd0 <HAL_GetTick>
 8002e6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6e:	f7fe ffaf 	bl	8001dd0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0be      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d1eb      	bne.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d208      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f023 020f 	bic.w	r2, r3, #15
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	490e      	ldr	r1, [pc, #56]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d214      	bcs.n	8002efc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b08      	ldr	r3, [pc, #32]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 020f 	bic.w	r2, r3, #15
 8002eda:	4906      	ldr	r1, [pc, #24]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e086      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
 8002ef4:	52002000 	.word	0x52002000
 8002ef8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d208      	bcs.n	8002f2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f18:	4b3c      	ldr	r3, [pc, #240]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	4939      	ldr	r1, [pc, #228]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d010      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	4b34      	ldr	r3, [pc, #208]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d208      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f46:	4b31      	ldr	r3, [pc, #196]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	492e      	ldr	r1, [pc, #184]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	4b28      	ldr	r3, [pc, #160]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d208      	bcs.n	8002f86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f74:	4b25      	ldr	r3, [pc, #148]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4922      	ldr	r1, [pc, #136]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	4b1d      	ldr	r3, [pc, #116]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d208      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4917      	ldr	r1, [pc, #92]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002fb4:	f000 f834 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	4912      	ldr	r1, [pc, #72]	@ (8003010 <HAL_RCC_ClockConfig+0x35c>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a0d      	ldr	r2, [pc, #52]	@ (8003010 <HAL_RCC_ClockConfig+0x35c>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <HAL_RCC_ClockConfig+0x360>)
 8002fea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fec:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <HAL_RCC_ClockConfig+0x364>)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_RCC_ClockConfig+0x368>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fea0 	bl	8001d3c <HAL_InitTick>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	58024400 	.word	0x58024400
 8003010:	080086e8 	.word	0x080086e8
 8003014:	24000004 	.word	0x24000004
 8003018:	24000000 	.word	0x24000000
 800301c:	24000008 	.word	0x24000008

08003020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	@ 0x24
 8003024:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003026:	4bb3      	ldr	r3, [pc, #716]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800302e:	2b18      	cmp	r3, #24
 8003030:	f200 8155 	bhi.w	80032de <HAL_RCC_GetSysClockFreq+0x2be>
 8003034:	a201      	add	r2, pc, #4	@ (adr r2, 800303c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	080030a1 	.word	0x080030a1
 8003040:	080032df 	.word	0x080032df
 8003044:	080032df 	.word	0x080032df
 8003048:	080032df 	.word	0x080032df
 800304c:	080032df 	.word	0x080032df
 8003050:	080032df 	.word	0x080032df
 8003054:	080032df 	.word	0x080032df
 8003058:	080032df 	.word	0x080032df
 800305c:	080030c7 	.word	0x080030c7
 8003060:	080032df 	.word	0x080032df
 8003064:	080032df 	.word	0x080032df
 8003068:	080032df 	.word	0x080032df
 800306c:	080032df 	.word	0x080032df
 8003070:	080032df 	.word	0x080032df
 8003074:	080032df 	.word	0x080032df
 8003078:	080032df 	.word	0x080032df
 800307c:	080030cd 	.word	0x080030cd
 8003080:	080032df 	.word	0x080032df
 8003084:	080032df 	.word	0x080032df
 8003088:	080032df 	.word	0x080032df
 800308c:	080032df 	.word	0x080032df
 8003090:	080032df 	.word	0x080032df
 8003094:	080032df 	.word	0x080032df
 8003098:	080032df 	.word	0x080032df
 800309c:	080030d3 	.word	0x080030d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030a0:	4b94      	ldr	r3, [pc, #592]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030ac:	4b91      	ldr	r3, [pc, #580]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	4a90      	ldr	r2, [pc, #576]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030be:	e111      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030c0:	4b8d      	ldr	r3, [pc, #564]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030c2:	61bb      	str	r3, [r7, #24]
      break;
 80030c4:	e10e      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030c6:	4b8d      	ldr	r3, [pc, #564]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030c8:	61bb      	str	r3, [r7, #24]
      break;
 80030ca:	e10b      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030ce:	61bb      	str	r3, [r7, #24]
      break;
 80030d0:	e108      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030d2:	4b88      	ldr	r3, [pc, #544]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030dc:	4b85      	ldr	r3, [pc, #532]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030e8:	4b82      	ldr	r3, [pc, #520]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030f2:	4b80      	ldr	r3, [pc, #512]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f6:	08db      	lsrs	r3, r3, #3
 80030f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80e1 	beq.w	80032d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b02      	cmp	r3, #2
 800311a:	f000 8083 	beq.w	8003224 <HAL_RCC_GetSysClockFreq+0x204>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b02      	cmp	r3, #2
 8003122:	f200 80a1 	bhi.w	8003268 <HAL_RCC_GetSysClockFreq+0x248>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x114>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d056      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003132:	e099      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003134:	4b6f      	ldr	r3, [pc, #444]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d02d      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003140:	4b6c      	ldr	r3, [pc, #432]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	08db      	lsrs	r3, r3, #3
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	4a6b      	ldr	r2, [pc, #428]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	ee07 3a90 	vmov	s15, r3
 8003158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316a:	4b62      	ldr	r3, [pc, #392]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317a:	ed97 6a02 	vldr	s12, [r7, #8]
 800317e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800318e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800319a:	e087      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ae:	4b51      	ldr	r3, [pc, #324]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031be:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031de:	e065      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800330c <HAL_RCC_GetSysClockFreq+0x2ec>
 80031ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f2:	4b40      	ldr	r3, [pc, #256]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003202:	ed97 6a02 	vldr	s12, [r7, #8]
 8003206:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800320a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800320e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800321a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003222:	e043      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003310 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003236:	4b2f      	ldr	r3, [pc, #188]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003246:	ed97 6a02 	vldr	s12, [r7, #8]
 800324a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800324e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800325a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800325e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003266:	e021      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003272:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800330c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327a:	4b1e      	ldr	r3, [pc, #120]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328a:	ed97 6a02 	vldr	s12, [r7, #8]
 800328e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800329e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032ac:	4b11      	ldr	r3, [pc, #68]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	0a5b      	lsrs	r3, r3, #9
 80032b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032b6:	3301      	adds	r3, #1
 80032b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80032c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d0:	ee17 3a90 	vmov	r3, s15
 80032d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032d6:	e005      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	61bb      	str	r3, [r7, #24]
      break;
 80032dc:	e002      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032de:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032e0:	61bb      	str	r3, [r7, #24]
      break;
 80032e2:	bf00      	nop
  }

  return sysclockfreq;
 80032e4:	69bb      	ldr	r3, [r7, #24]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	@ 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	58024400 	.word	0x58024400
 80032f8:	03d09000 	.word	0x03d09000
 80032fc:	003d0900 	.word	0x003d0900
 8003300:	007a1200 	.word	0x007a1200
 8003304:	46000000 	.word	0x46000000
 8003308:	4c742400 	.word	0x4c742400
 800330c:	4a742400 	.word	0x4a742400
 8003310:	4af42400 	.word	0x4af42400

08003314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800331a:	f7ff fe81 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b10      	ldr	r3, [pc, #64]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x50>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490f      	ldr	r1, [pc, #60]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x54>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003338:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x50>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	4a09      	ldr	r2, [pc, #36]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x54>)
 8003342:	5cd3      	ldrb	r3, [r2, r3]
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	4a07      	ldr	r2, [pc, #28]	@ (800336c <HAL_RCC_GetHCLKFreq+0x58>)
 8003350:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003352:	4a07      	ldr	r2, [pc, #28]	@ (8003370 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003358:	4b04      	ldr	r3, [pc, #16]	@ (800336c <HAL_RCC_GetHCLKFreq+0x58>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	58024400 	.word	0x58024400
 8003368:	080086e8 	.word	0x080086e8
 800336c:	24000004 	.word	0x24000004
 8003370:	24000000 	.word	0x24000000

08003374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003378:	f7ff ffcc 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4904      	ldr	r1, [pc, #16]	@ (800339c <HAL_RCC_GetPCLK1Freq+0x28>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	58024400 	.word	0x58024400
 800339c:	080086e8 	.word	0x080086e8

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80033a4:	f7ff ffb6 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	58024400 	.word	0x58024400
 80033c8:	080086e8 	.word	0x080086e8

080033cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d0:	b0c8      	sub	sp, #288	@ 0x120
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033de:	2300      	movs	r3, #0
 80033e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033f0:	2500      	movs	r5, #0
 80033f2:	ea54 0305 	orrs.w	r3, r4, r5
 80033f6:	d049      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003402:	d02f      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003404:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003408:	d828      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800340a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800340e:	d01a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003410:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003414:	d822      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800341a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800341e:	d007      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003420:	e01c      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003422:	4ba7      	ldr	r3, [pc, #668]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	4aa6      	ldr	r2, [pc, #664]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800342c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800342e:	e01a      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003434:	3308      	adds	r3, #8
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f001 fc43 	bl	8004cc4 <RCCEx_PLL2_Config>
 800343e:	4603      	mov	r3, r0
 8003440:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003444:	e00f      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800344a:	3328      	adds	r3, #40	@ 0x28
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f001 fcea 	bl	8004e28 <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800345a:	e004      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003466:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800346e:	4b94      	ldr	r3, [pc, #592]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003472:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800347a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800347c:	4a90      	ldr	r2, [pc, #576]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800347e:	430b      	orrs	r3, r1
 8003480:	6513      	str	r3, [r2, #80]	@ 0x50
 8003482:	e003      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003488:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003498:	f04f 0900 	mov.w	r9, #0
 800349c:	ea58 0309 	orrs.w	r3, r8, r9
 80034a0:	d047      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d82a      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034ac:	a201      	add	r2, pc, #4	@ (adr r2, 80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034c9 	.word	0x080034c9
 80034b8:	080034d7 	.word	0x080034d7
 80034bc:	080034ed 	.word	0x080034ed
 80034c0:	0800350b 	.word	0x0800350b
 80034c4:	0800350b 	.word	0x0800350b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c8:	4b7d      	ldr	r3, [pc, #500]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	4a7c      	ldr	r2, [pc, #496]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d4:	e01a      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034da:	3308      	adds	r3, #8
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 fbf0 	bl	8004cc4 <RCCEx_PLL2_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ea:	e00f      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034f0:	3328      	adds	r3, #40	@ 0x28
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 fc97 	bl	8004e28 <RCCEx_PLL3_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003500:	e004      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003508:	e000      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800350a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003514:	4b6a      	ldr	r3, [pc, #424]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003518:	f023 0107 	bic.w	r1, r3, #7
 800351c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003522:	4a67      	ldr	r2, [pc, #412]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003524:	430b      	orrs	r3, r1
 8003526:	6513      	str	r3, [r2, #80]	@ 0x50
 8003528:	e003      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800352e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003532:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800353e:	f04f 0b00 	mov.w	fp, #0
 8003542:	ea5a 030b 	orrs.w	r3, sl, fp
 8003546:	d054      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800354c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003552:	d036      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003554:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003558:	d82f      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800355a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800355e:	d032      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003564:	d829      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003566:	2bc0      	cmp	r3, #192	@ 0xc0
 8003568:	d02f      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800356a:	2bc0      	cmp	r3, #192	@ 0xc0
 800356c:	d825      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800356e:	2b80      	cmp	r3, #128	@ 0x80
 8003570:	d018      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003572:	2b80      	cmp	r3, #128	@ 0x80
 8003574:	d821      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800357a:	2b40      	cmp	r3, #64	@ 0x40
 800357c:	d007      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800357e:	e01c      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003580:	4b4f      	ldr	r3, [pc, #316]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	4a4e      	ldr	r2, [pc, #312]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800358c:	e01e      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003592:	3308      	adds	r3, #8
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f001 fb94 	bl	8004cc4 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80035a2:	e013      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035a8:	3328      	adds	r3, #40	@ 0x28
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fc3b 	bl	8004e28 <RCCEx_PLL3_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80035b8:	e008      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80035c0:	e004      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035c2:	bf00      	nop
 80035c4:	e002      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80035d4:	4b3a      	ldr	r3, [pc, #232]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e2:	4a37      	ldr	r2, [pc, #220]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80035f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80035fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003608:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800360c:	460b      	mov	r3, r1
 800360e:	4313      	orrs	r3, r2
 8003610:	d05c      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003612:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003618:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800361c:	d03b      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800361e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003622:	d834      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003628:	d037      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800362a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800362e:	d82e      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003630:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003634:	d033      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003636:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800363a:	d828      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800363c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003640:	d01a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003646:	d822      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800364c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003650:	d007      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003652:	e01c      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003654:	4b1a      	ldr	r3, [pc, #104]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	4a19      	ldr	r2, [pc, #100]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003660:	e01e      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003666:	3308      	adds	r3, #8
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fb2a 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003676:	e013      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800367c:	3328      	adds	r3, #40	@ 0x28
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f001 fbd1 	bl	8004e28 <RCCEx_PLL3_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800368c:	e008      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003694:	e004      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003696:	bf00      	nop
 8003698:	e002      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800369e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10d      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ac:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80036b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b6:	4a02      	ldr	r2, [pc, #8]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80036bc:	e006      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80036be:	bf00      	nop
 80036c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80036e6:	460b      	mov	r3, r1
 80036e8:	4313      	orrs	r3, r2
 80036ea:	d03a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80036ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f2:	2b30      	cmp	r3, #48	@ 0x30
 80036f4:	d01f      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80036f6:	2b30      	cmp	r3, #48	@ 0x30
 80036f8:	d819      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d00c      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d815      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d019      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003706:	2b10      	cmp	r3, #16
 8003708:	d111      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370a:	4bae      	ldr	r3, [pc, #696]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800370c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370e:	4aad      	ldr	r2, [pc, #692]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003714:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003716:	e011      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003718:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800371c:	3308      	adds	r3, #8
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f001 facf 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800372c:	e006      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003734:	e002      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800373a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003744:	4b9f      	ldr	r3, [pc, #636]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003748:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800374c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003752:	4a9c      	ldr	r2, [pc, #624]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003754:	430b      	orrs	r3, r1
 8003756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003758:	e003      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800375e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800376e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003778:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800377c:	460b      	mov	r3, r1
 800377e:	4313      	orrs	r3, r2
 8003780:	d051      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003782:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800378c:	d035      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800378e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003792:	d82e      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003794:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003798:	d031      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x432>
 800379a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800379e:	d828      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037a4:	d01a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x410>
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037aa:	d822      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b4:	d007      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80037b6:	e01c      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b8:	4b82      	ldr	r3, [pc, #520]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	4a81      	ldr	r2, [pc, #516]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037c4:	e01c      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ca:	3308      	adds	r3, #8
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 fa78 	bl	8004cc4 <RCCEx_PLL2_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037da:	e011      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037e0:	3328      	adds	r3, #40	@ 0x28
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fb1f 	bl	8004e28 <RCCEx_PLL3_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80037f8:	e002      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80037fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003800:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003808:	4b6e      	ldr	r3, [pc, #440]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800380a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800380c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003816:	4a6b      	ldr	r2, [pc, #428]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003818:	430b      	orrs	r3, r1
 800381a:	6513      	str	r3, [r2, #80]	@ 0x50
 800381c:	e003      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003822:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003832:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800383c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003840:	460b      	mov	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	d053      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800384a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800384c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003850:	d033      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003852:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003856:	d82c      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003858:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800385c:	d02f      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800385e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003862:	d826      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003864:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003868:	d02b      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800386a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800386e:	d820      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003874:	d012      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800387a:	d81a      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d022      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003884:	d115      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800388a:	3308      	adds	r3, #8
 800388c:	2101      	movs	r1, #1
 800388e:	4618      	mov	r0, r3
 8003890:	f001 fa18 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800389a:	e015      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800389c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038a0:	3328      	adds	r3, #40	@ 0x28
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 fabf 	bl	8004e28 <RCCEx_PLL3_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038b0:	e00a      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038d0:	4b3c      	ldr	r3, [pc, #240]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038de:	4a39      	ldr	r2, [pc, #228]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80038e4:	e003      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038fe:	2300      	movs	r3, #0
 8003900:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003904:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003908:	460b      	mov	r3, r1
 800390a:	4313      	orrs	r3, r2
 800390c:	d060      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800390e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003916:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800391a:	d039      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800391c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003920:	d832      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003922:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003926:	d035      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800392c:	d82c      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003932:	d031      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003938:	d826      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800393a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800393e:	d02d      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003940:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003944:	d820      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800394a:	d012      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800394c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003950:	d81a      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d024      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800395a:	d115      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800395c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003960:	3308      	adds	r3, #8
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f001 f9ad 	bl	8004cc4 <RCCEx_PLL2_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003970:	e017      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003976:	3328      	adds	r3, #40	@ 0x28
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fa54 	bl	8004e28 <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003986:	e00c      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800398e:	e008      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003990:	bf00      	nop
 8003992:	e006      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003994:	bf00      	nop
 8003996:	e004      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003998:	bf00      	nop
 800399a:	e002      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800399c:	bf00      	nop
 800399e:	e000      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10e      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039ba:	4a02      	ldr	r2, [pc, #8]	@ (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039bc:	430b      	orrs	r3, r1
 80039be:	6593      	str	r3, [r2, #88]	@ 0x58
 80039c0:	e006      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80039c2:	bf00      	nop
 80039c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80039e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039ea:	460b      	mov	r3, r1
 80039ec:	4313      	orrs	r3, r2
 80039ee:	d037      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039fa:	d00e      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80039fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a00:	d816      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d018      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003a06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a0a:	d111      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a0c:	4bc4      	ldr	r3, [pc, #784]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a10:	4ac3      	ldr	r2, [pc, #780]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a18:	e00f      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a1e:	3308      	adds	r3, #8
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 f94e 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a2e:	e004      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a42:	4bb7      	ldr	r3, [pc, #732]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a50:	4ab3      	ldr	r2, [pc, #716]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a52:	430b      	orrs	r3, r1
 8003a54:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a56:	e003      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	d039      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d81c      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003acd 	.word	0x08003acd
 8003a94:	08003aa1 	.word	0x08003aa1
 8003a98:	08003aaf 	.word	0x08003aaf
 8003a9c:	08003acd 	.word	0x08003acd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa0:	4b9f      	ldr	r3, [pc, #636]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	4a9e      	ldr	r2, [pc, #632]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003aac:	e00f      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 f904 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ac2:	e004      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003aca:	e000      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ace:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ad6:	4b92      	ldr	r3, [pc, #584]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	f023 0103 	bic.w	r1, r3, #3
 8003ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aea:	e003      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003af0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f000 8099 	beq.w	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b16:	4b83      	ldr	r3, [pc, #524]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a82      	ldr	r2, [pc, #520]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b22:	f7fe f955 	bl	8001dd0 <HAL_GetTick>
 8003b26:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b2c:	f7fe f950 	bl	8001dd0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b64      	cmp	r3, #100	@ 0x64
 8003b3a:	d903      	bls.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b42:	e005      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b44:	4b77      	ldr	r3, [pc, #476]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ed      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d173      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b58:	4b71      	ldr	r3, [pc, #452]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b64:	4053      	eors	r3, r2
 8003b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d015      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b76:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b7a:	4b69      	ldr	r3, [pc, #420]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	4a68      	ldr	r2, [pc, #416]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b84:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b86:	4b66      	ldr	r3, [pc, #408]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	4a65      	ldr	r2, [pc, #404]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b90:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b92:	4a63      	ldr	r2, [pc, #396]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b98:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba6:	d118      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7fe f912 	bl	8001dd0 <HAL_GetTick>
 8003bac:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb0:	e00d      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fe f90d 	bl	8001dd0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003bbc:	1ad2      	subs	r2, r2, r3
 8003bbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d903      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003bcc:	e005      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bce:	4b54      	ldr	r3, [pc, #336]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0eb      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003bda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d129      	bne.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003be6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf2:	d10e      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c04:	091a      	lsrs	r2, r3, #4
 8003c06:	4b48      	ldr	r3, [pc, #288]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	4a45      	ldr	r2, [pc, #276]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6113      	str	r3, [r2, #16]
 8003c10:	e005      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003c12:	4b43      	ldr	r3, [pc, #268]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	4a42      	ldr	r2, [pc, #264]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c1c:	6113      	str	r3, [r2, #16]
 8003c1e:	4b40      	ldr	r3, [pc, #256]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2e:	4a3c      	ldr	r2, [pc, #240]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c34:	e008      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c36:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003c3e:	e003      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c44:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	f002 0301 	and.w	r3, r2, #1
 8003c54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f000 8090 	beq.w	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c72:	2b28      	cmp	r3, #40	@ 0x28
 8003c74:	d870      	bhi.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c76:	a201      	add	r2, pc, #4	@ (adr r2, 8003c7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7c:	08003d61 	.word	0x08003d61
 8003c80:	08003d59 	.word	0x08003d59
 8003c84:	08003d59 	.word	0x08003d59
 8003c88:	08003d59 	.word	0x08003d59
 8003c8c:	08003d59 	.word	0x08003d59
 8003c90:	08003d59 	.word	0x08003d59
 8003c94:	08003d59 	.word	0x08003d59
 8003c98:	08003d59 	.word	0x08003d59
 8003c9c:	08003d2d 	.word	0x08003d2d
 8003ca0:	08003d59 	.word	0x08003d59
 8003ca4:	08003d59 	.word	0x08003d59
 8003ca8:	08003d59 	.word	0x08003d59
 8003cac:	08003d59 	.word	0x08003d59
 8003cb0:	08003d59 	.word	0x08003d59
 8003cb4:	08003d59 	.word	0x08003d59
 8003cb8:	08003d59 	.word	0x08003d59
 8003cbc:	08003d43 	.word	0x08003d43
 8003cc0:	08003d59 	.word	0x08003d59
 8003cc4:	08003d59 	.word	0x08003d59
 8003cc8:	08003d59 	.word	0x08003d59
 8003ccc:	08003d59 	.word	0x08003d59
 8003cd0:	08003d59 	.word	0x08003d59
 8003cd4:	08003d59 	.word	0x08003d59
 8003cd8:	08003d59 	.word	0x08003d59
 8003cdc:	08003d61 	.word	0x08003d61
 8003ce0:	08003d59 	.word	0x08003d59
 8003ce4:	08003d59 	.word	0x08003d59
 8003ce8:	08003d59 	.word	0x08003d59
 8003cec:	08003d59 	.word	0x08003d59
 8003cf0:	08003d59 	.word	0x08003d59
 8003cf4:	08003d59 	.word	0x08003d59
 8003cf8:	08003d59 	.word	0x08003d59
 8003cfc:	08003d61 	.word	0x08003d61
 8003d00:	08003d59 	.word	0x08003d59
 8003d04:	08003d59 	.word	0x08003d59
 8003d08:	08003d59 	.word	0x08003d59
 8003d0c:	08003d59 	.word	0x08003d59
 8003d10:	08003d59 	.word	0x08003d59
 8003d14:	08003d59 	.word	0x08003d59
 8003d18:	08003d59 	.word	0x08003d59
 8003d1c:	08003d61 	.word	0x08003d61
 8003d20:	58024400 	.word	0x58024400
 8003d24:	58024800 	.word	0x58024800
 8003d28:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d30:	3308      	adds	r3, #8
 8003d32:	2101      	movs	r1, #1
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 ffc5 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d40:	e00f      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d46:	3328      	adds	r3, #40	@ 0x28
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 f86c 	bl	8004e28 <RCCEx_PLL3_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d56:	e004      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d6a:	4bc0      	ldr	r3, [pc, #768]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d7a:	4abc      	ldr	r2, [pc, #752]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f002 0302 	and.w	r3, r2, #2
 8003d96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003da0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003da4:	460b      	mov	r3, r1
 8003da6:	4313      	orrs	r3, r2
 8003da8:	d043      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d824      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003db6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003e09 	.word	0x08003e09
 8003dc0:	08003dd5 	.word	0x08003dd5
 8003dc4:	08003deb 	.word	0x08003deb
 8003dc8:	08003e09 	.word	0x08003e09
 8003dcc:	08003e09 	.word	0x08003e09
 8003dd0:	08003e09 	.word	0x08003e09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dd8:	3308      	adds	r3, #8
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 ff71 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003de8:	e00f      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dee:	3328      	adds	r3, #40	@ 0x28
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 f818 	bl	8004e28 <RCCEx_PLL3_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dfe:	e004      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e12:	4b96      	ldr	r3, [pc, #600]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e16:	f023 0107 	bic.w	r1, r3, #7
 8003e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e22:	4a92      	ldr	r2, [pc, #584]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e28:	e003      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e2e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f002 0304 	and.w	r3, r2, #4
 8003e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e48:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	d043      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	d824      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003eb1 	.word	0x08003eb1
 8003e68:	08003e7d 	.word	0x08003e7d
 8003e6c:	08003e93 	.word	0x08003e93
 8003e70:	08003eb1 	.word	0x08003eb1
 8003e74:	08003eb1 	.word	0x08003eb1
 8003e78:	08003eb1 	.word	0x08003eb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e80:	3308      	adds	r3, #8
 8003e82:	2101      	movs	r1, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 ff1d 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e90:	e00f      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e96:	3328      	adds	r3, #40	@ 0x28
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 ffc4 	bl	8004e28 <RCCEx_PLL3_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eba:	4b6c      	ldr	r3, [pc, #432]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	f023 0107 	bic.w	r1, r3, #7
 8003ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003eca:	4a68      	ldr	r2, [pc, #416]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed0:	e003      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ed6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f002 0320 	and.w	r3, r2, #32
 8003ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003eea:	2300      	movs	r3, #0
 8003eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ef0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	d055      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f06:	d033      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f0c:	d82c      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f12:	d02f      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f18:	d826      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f1e:	d02b      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f24:	d820      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f2a:	d012      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f30:	d81a      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d022      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f3a:	d115      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f40:	3308      	adds	r3, #8
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 febd 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f50:	e015      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f56:	3328      	adds	r3, #40	@ 0x28
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 ff64 	bl	8004e28 <RCCEx_PLL3_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f66:	e00a      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f6e:	e006      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f70:	bf00      	nop
 8003f72:	e004      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f86:	4b39      	ldr	r3, [pc, #228]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f96:	4a35      	ldr	r2, [pc, #212]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f9c:	e003      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fa2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003fbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	d058      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fd2:	d033      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003fd4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fd8:	d82c      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fde:	d02f      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe4:	d826      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003fe6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fea:	d02b      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003fec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ff0:	d820      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff6:	d012      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ffc:	d81a      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d022      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004006:	d115      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800400c:	3308      	adds	r3, #8
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fe57 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800401c:	e015      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800401e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004022:	3328      	adds	r3, #40	@ 0x28
 8004024:	2102      	movs	r1, #2
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fefe 	bl	8004e28 <RCCEx_PLL3_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004032:	e00a      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800403a:	e006      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800403c:	bf00      	nop
 800403e:	e004      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004040:	bf00      	nop
 8004042:	e002      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004044:	bf00      	nop
 8004046:	e000      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10e      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004052:	4b06      	ldr	r3, [pc, #24]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004056:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800405a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800405e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004062:	4a02      	ldr	r2, [pc, #8]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004064:	430b      	orrs	r3, r1
 8004066:	6593      	str	r3, [r2, #88]	@ 0x58
 8004068:	e006      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800406a:	bf00      	nop
 800406c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004074:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800408e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004092:	460b      	mov	r3, r1
 8004094:	4313      	orrs	r3, r2
 8004096:	d055      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800409c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040a4:	d033      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80040a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040aa:	d82c      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b0:	d02f      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80040b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b6:	d826      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040bc:	d02b      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80040be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040c2:	d820      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040c8:	d012      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80040ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ce:	d81a      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d022      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80040d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d8:	d115      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040de:	3308      	adds	r3, #8
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fdee 	bl	8004cc4 <RCCEx_PLL2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040ee:	e015      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040f4:	3328      	adds	r3, #40	@ 0x28
 80040f6:	2102      	movs	r1, #2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fe95 	bl	8004e28 <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004104:	e00a      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800410c:	e006      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800410e:	bf00      	nop
 8004110:	e004      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004112:	bf00      	nop
 8004114:	e002      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800411a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004124:	4ba1      	ldr	r3, [pc, #644]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004128:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800412c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004130:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004134:	4a9d      	ldr	r2, [pc, #628]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004136:	430b      	orrs	r3, r1
 8004138:	6593      	str	r3, [r2, #88]	@ 0x58
 800413a:	e003      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004140:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f002 0308 	and.w	r3, r2, #8
 8004150:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800415a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d01e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800416c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004170:	d10c      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004172:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004176:	3328      	adds	r3, #40	@ 0x28
 8004178:	2102      	movs	r1, #2
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fe54 	bl	8004e28 <RCCEx_PLL3_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800418c:	4b87      	ldr	r3, [pc, #540]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800418e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004190:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800419c:	4a83      	ldr	r2, [pc, #524]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800419e:	430b      	orrs	r3, r1
 80041a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f002 0310 	and.w	r3, r2, #16
 80041ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80041bc:	460b      	mov	r3, r1
 80041be:	4313      	orrs	r3, r2
 80041c0:	d01e      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ce:	d10c      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d4:	3328      	adds	r3, #40	@ 0x28
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fe25 	bl	8004e28 <RCCEx_PLL3_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ea:	4b70      	ldr	r3, [pc, #448]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041fa:	4a6c      	ldr	r2, [pc, #432]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800420c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004210:	2300      	movs	r3, #0
 8004212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004216:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800421a:	460b      	mov	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	d03e      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004224:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800422c:	d022      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800422e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004232:	d81b      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423c:	d00b      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800423e:	e015      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004244:	3308      	adds	r3, #8
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fd3b 	bl	8004cc4 <RCCEx_PLL2_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004254:	e00f      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800425a:	3328      	adds	r3, #40	@ 0x28
 800425c:	2102      	movs	r1, #2
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fde2 	bl	8004e28 <RCCEx_PLL3_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800427e:	4b4b      	ldr	r3, [pc, #300]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800428a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800428e:	4a47      	ldr	r2, [pc, #284]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004290:	430b      	orrs	r3, r1
 8004292:	6593      	str	r3, [r2, #88]	@ 0x58
 8004294:	e003      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004296:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800429a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800429e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042ac:	2300      	movs	r3, #0
 80042ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042b4:	460b      	mov	r3, r1
 80042b6:	4313      	orrs	r3, r2
 80042b8:	d03b      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042c6:	d01f      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80042c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042cc:	d818      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80042ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d2:	d003      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80042d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042d8:	d007      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80042da:	e011      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042dc:	4b33      	ldr	r3, [pc, #204]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	4a32      	ldr	r2, [pc, #200]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042e8:	e00f      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ee:	3328      	adds	r3, #40	@ 0x28
 80042f0:	2101      	movs	r1, #1
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fd98 	bl	8004e28 <RCCEx_PLL3_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80042fe:	e004      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10b      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004312:	4b26      	ldr	r3, [pc, #152]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004316:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800431a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004322:	4a22      	ldr	r2, [pc, #136]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004324:	430b      	orrs	r3, r1
 8004326:	6553      	str	r3, [r2, #84]	@ 0x54
 8004328:	e003      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800432e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800433e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004340:	2300      	movs	r3, #0
 8004342:	677b      	str	r3, [r7, #116]	@ 0x74
 8004344:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d034      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800434e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800435c:	d007      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800435e:	e011      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004360:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	4a11      	ldr	r2, [pc, #68]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800436a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800436c:	e00e      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800436e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004372:	3308      	adds	r3, #8
 8004374:	2102      	movs	r1, #2
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fca4 	bl	8004cc4 <RCCEx_PLL2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004382:	e003      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800438a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10d      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004394:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004398:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800439c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a2:	4a02      	ldr	r2, [pc, #8]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043a8:	e006      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80043c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043c6:	2300      	movs	r3, #0
 80043c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80043ce:	460b      	mov	r3, r1
 80043d0:	4313      	orrs	r3, r2
 80043d2:	d00c      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d8:	3328      	adds	r3, #40	@ 0x28
 80043da:	2102      	movs	r1, #2
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fd23 	bl	8004e28 <RCCEx_PLL3_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80043fc:	2300      	movs	r3, #0
 80043fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004400:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004404:	460b      	mov	r3, r1
 8004406:	4313      	orrs	r3, r2
 8004408:	d038      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800440a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004416:	d018      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800441c:	d811      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800441e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004422:	d014      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004428:	d80b      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d011      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800442e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004432:	d106      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004434:	4bc3      	ldr	r3, [pc, #780]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	4ac2      	ldr	r2, [pc, #776]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800443a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004440:	e008      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004448:	e004      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800444a:	bf00      	nop
 800444c:	e002      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004454:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800445c:	4bb9      	ldr	r3, [pc, #740]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446c:	4ab5      	ldr	r2, [pc, #724]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800446e:	430b      	orrs	r3, r1
 8004470:	6553      	str	r3, [r2, #84]	@ 0x54
 8004472:	e003      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004474:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004478:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800447c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004488:	65bb      	str	r3, [r7, #88]	@ 0x58
 800448a:	2300      	movs	r3, #0
 800448c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800448e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004498:	4baa      	ldr	r3, [pc, #680]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044a6:	4aa7      	ldr	r2, [pc, #668]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ba:	2300      	movs	r3, #0
 80044bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80044be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80044c2:	460b      	mov	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044c8:	4b9e      	ldr	r3, [pc, #632]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044cc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d6:	4a9b      	ldr	r2, [pc, #620]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044d8:	430b      	orrs	r3, r1
 80044da:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80044dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80044e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ea:	2300      	movs	r3, #0
 80044ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044f2:	460b      	mov	r3, r1
 80044f4:	4313      	orrs	r3, r2
 80044f6:	d009      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80044f8:	4b92      	ldr	r3, [pc, #584]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fc:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004506:	4a8f      	ldr	r2, [pc, #572]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004508:	430b      	orrs	r3, r1
 800450a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800450c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004518:	643b      	str	r3, [r7, #64]	@ 0x40
 800451a:	2300      	movs	r3, #0
 800451c:	647b      	str	r3, [r7, #68]	@ 0x44
 800451e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004528:	4b86      	ldr	r3, [pc, #536]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	4a85      	ldr	r2, [pc, #532]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800452e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004532:	6113      	str	r3, [r2, #16]
 8004534:	4b83      	ldr	r3, [pc, #524]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004536:	6919      	ldr	r1, [r3, #16]
 8004538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800453c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004540:	4a80      	ldr	r2, [pc, #512]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004542:	430b      	orrs	r3, r1
 8004544:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004554:	2300      	movs	r3, #0
 8004556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004558:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800455c:	460b      	mov	r3, r1
 800455e:	4313      	orrs	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004562:	4b78      	ldr	r3, [pc, #480]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004566:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800456a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800456e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004570:	4a74      	ldr	r2, [pc, #464]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004572:	430b      	orrs	r3, r1
 8004574:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004582:	633b      	str	r3, [r7, #48]	@ 0x30
 8004584:	2300      	movs	r3, #0
 8004586:	637b      	str	r3, [r7, #52]	@ 0x34
 8004588:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004592:	4b6c      	ldr	r3, [pc, #432]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004596:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800459a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a2:	4a68      	ldr	r2, [pc, #416]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	2100      	movs	r1, #0
 80045b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045be:	460b      	mov	r3, r1
 80045c0:	4313      	orrs	r3, r2
 80045c2:	d011      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045c8:	3308      	adds	r3, #8
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fb79 	bl	8004cc4 <RCCEx_PLL2_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	2100      	movs	r1, #0
 80045f2:	6239      	str	r1, [r7, #32]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045fe:	460b      	mov	r3, r1
 8004600:	4313      	orrs	r3, r2
 8004602:	d011      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004608:	3308      	adds	r3, #8
 800460a:	2101      	movs	r1, #1
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fb59 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004618:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004624:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004628:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	2100      	movs	r1, #0
 8004632:	61b9      	str	r1, [r7, #24]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800463e:	460b      	mov	r3, r1
 8004640:	4313      	orrs	r3, r2
 8004642:	d011      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004648:	3308      	adds	r3, #8
 800464a:	2102      	movs	r1, #2
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fb39 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004664:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	2100      	movs	r1, #0
 8004672:	6139      	str	r1, [r7, #16]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d011      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004688:	3328      	adds	r3, #40	@ 0x28
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fbcb 	bl	8004e28 <RCCEx_PLL3_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004698:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	2100      	movs	r1, #0
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046be:	460b      	mov	r3, r1
 80046c0:	4313      	orrs	r3, r2
 80046c2:	d011      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046c8:	3328      	adds	r3, #40	@ 0x28
 80046ca:	2101      	movs	r1, #1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fbab 	bl	8004e28 <RCCEx_PLL3_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80046d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f0:	2100      	movs	r1, #0
 80046f2:	6039      	str	r1, [r7, #0]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046fe:	460b      	mov	r3, r1
 8004700:	4313      	orrs	r3, r2
 8004702:	d011      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004708:	3328      	adds	r3, #40	@ 0x28
 800470a:	2102      	movs	r1, #2
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fb8b 	bl	8004e28 <RCCEx_PLL3_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004718:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004724:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004728:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
}
 8004736:	4618      	mov	r0, r3
 8004738:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800473c:	46bd      	mov	sp, r7
 800473e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004742:	bf00      	nop
 8004744:	58024400 	.word	0x58024400

08004748 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800474c:	f7fe fde2 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 8004750:	4602      	mov	r2, r0
 8004752:	4b06      	ldr	r3, [pc, #24]	@ (800476c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	091b      	lsrs	r3, r3, #4
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	4904      	ldr	r1, [pc, #16]	@ (8004770 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800475e:	5ccb      	ldrb	r3, [r1, r3]
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004768:	4618      	mov	r0, r3
 800476a:	bd80      	pop	{r7, pc}
 800476c:	58024400 	.word	0x58024400
 8004770:	080086e8 	.word	0x080086e8

08004774 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	@ 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800477c:	4ba1      	ldr	r3, [pc, #644]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004786:	4b9f      	ldr	r3, [pc, #636]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	0b1b      	lsrs	r3, r3, #12
 800478c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004790:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004792:	4b9c      	ldr	r3, [pc, #624]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800479e:	4b99      	ldr	r3, [pc, #612]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a2:	08db      	lsrs	r3, r3, #3
 80047a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8111 	beq.w	80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	f000 8083 	beq.w	80048d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	f200 80a1 	bhi.w	8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d056      	beq.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047de:	e099      	b.n	8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e0:	4b88      	ldr	r3, [pc, #544]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d02d      	beq.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047ec:	4b85      	ldr	r3, [pc, #532]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	4a84      	ldr	r2, [pc, #528]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
 80047fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b7b      	ldr	r3, [pc, #492]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a03 	vldr	s12, [r7, #12]
 800482a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004846:	e087      	b.n	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	ed97 6a03 	vldr	s12, [r7, #12]
 800486e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800487e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488a:	e065      	b.n	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004896:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800489a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489e:	4b59      	ldr	r3, [pc, #356]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ce:	e043      	b.n	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e2:	4b48      	ldr	r3, [pc, #288]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004912:	e021      	b.n	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004926:	4b37      	ldr	r3, [pc, #220]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004936:	ed97 6a03 	vldr	s12, [r7, #12]
 800493a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800493e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800494a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004956:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004958:	4b2a      	ldr	r3, [pc, #168]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	0a5b      	lsrs	r3, r3, #9
 800495e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800496e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004972:	edd7 6a07 	vldr	s13, [r7, #28]
 8004976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497e:	ee17 2a90 	vmov	r2, s15
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004986:	4b1f      	ldr	r3, [pc, #124]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004998:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800499c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ac:	ee17 2a90 	vmov	r2, s15
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049b4:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	0e1b      	lsrs	r3, r3, #24
 80049ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049da:	ee17 2a90 	vmov	r2, s15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049e2:	e008      	b.n	80049f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
}
 80049f6:	bf00      	nop
 80049f8:	3724      	adds	r7, #36	@ 0x24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	58024400 	.word	0x58024400
 8004a08:	03d09000 	.word	0x03d09000
 8004a0c:	46000000 	.word	0x46000000
 8004a10:	4c742400 	.word	0x4c742400
 8004a14:	4a742400 	.word	0x4a742400
 8004a18:	4af42400 	.word	0x4af42400

08004a1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	@ 0x24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a24:	4ba1      	ldr	r3, [pc, #644]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a2e:	4b9f      	ldr	r3, [pc, #636]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a32:	0d1b      	lsrs	r3, r3, #20
 8004a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a3a:	4b9c      	ldr	r3, [pc, #624]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a46:	4b99      	ldr	r3, [pc, #612]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	08db      	lsrs	r3, r3, #3
 8004a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8111 	beq.w	8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	f000 8083 	beq.w	8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	f200 80a1 	bhi.w	8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d056      	beq.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a86:	e099      	b.n	8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a88:	4b88      	ldr	r3, [pc, #544]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02d      	beq.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a94:	4b85      	ldr	r3, [pc, #532]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	08db      	lsrs	r3, r3, #3
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	4a84      	ldr	r2, [pc, #528]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abe:	4b7b      	ldr	r3, [pc, #492]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aee:	e087      	b.n	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b02:	4b6a      	ldr	r3, [pc, #424]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b32:	e065      	b.n	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b46:	4b59      	ldr	r3, [pc, #356]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b76:	e043      	b.n	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8a:	4b48      	ldr	r3, [pc, #288]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bba:	e021      	b.n	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bce:	4b37      	ldr	r3, [pc, #220]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c00:	4b2a      	ldr	r3, [pc, #168]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	0a5b      	lsrs	r3, r3, #9
 8004c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c26:	ee17 2a90 	vmov	r2, s15
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c54:	ee17 2a90 	vmov	r2, s15
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c5c:	4b13      	ldr	r3, [pc, #76]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	0e1b      	lsrs	r3, r3, #24
 8004c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c82:	ee17 2a90 	vmov	r2, s15
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c8a:	e008      	b.n	8004c9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	609a      	str	r2, [r3, #8]
}
 8004c9e:	bf00      	nop
 8004ca0:	3724      	adds	r7, #36	@ 0x24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	58024400 	.word	0x58024400
 8004cb0:	03d09000 	.word	0x03d09000
 8004cb4:	46000000 	.word	0x46000000
 8004cb8:	4c742400 	.word	0x4c742400
 8004cbc:	4a742400 	.word	0x4a742400
 8004cc0:	4af42400 	.word	0x4af42400

08004cc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cd2:	4b53      	ldr	r3, [pc, #332]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d101      	bne.n	8004ce2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e099      	b.n	8004e16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cee:	f7fd f86f 	bl	8001dd0 <HAL_GetTick>
 8004cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cf4:	e008      	b.n	8004d08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cf6:	f7fd f86b 	bl	8001dd0 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e086      	b.n	8004e16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d08:	4b45      	ldr	r3, [pc, #276]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d14:	4b42      	ldr	r3, [pc, #264]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	493f      	ldr	r1, [pc, #252]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	025b      	lsls	r3, r3, #9
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	061b      	lsls	r3, r3, #24
 8004d54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d58:	4931      	ldr	r1, [pc, #196]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d5e:	4b30      	ldr	r3, [pc, #192]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	492d      	ldr	r1, [pc, #180]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d70:	4b2b      	ldr	r3, [pc, #172]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	f023 0220 	bic.w	r2, r3, #32
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	4928      	ldr	r1, [pc, #160]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d82:	4b27      	ldr	r3, [pc, #156]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	4a26      	ldr	r2, [pc, #152]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	f023 0310 	bic.w	r3, r3, #16
 8004d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d8e:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d92:	4b24      	ldr	r3, [pc, #144]	@ (8004e24 <RCCEx_PLL2_Config+0x160>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	69d2      	ldr	r2, [r2, #28]
 8004d9a:	00d2      	lsls	r2, r2, #3
 8004d9c:	4920      	ldr	r1, [pc, #128]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004da2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	f043 0310 	orr.w	r3, r3, #16
 8004dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004db4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	4a19      	ldr	r2, [pc, #100]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dc0:	e00f      	b.n	8004de2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d106      	bne.n	8004dd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dc8:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	4a14      	ldr	r2, [pc, #80]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dd4:	e005      	b.n	8004de2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dd6:	4b12      	ldr	r3, [pc, #72]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	4a11      	ldr	r2, [pc, #68]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004de2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004de8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dee:	f7fc ffef 	bl	8001dd0 <HAL_GetTick>
 8004df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004df4:	e008      	b.n	8004e08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004df6:	f7fc ffeb 	bl	8001dd0 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e006      	b.n	8004e16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	58024400 	.word	0x58024400
 8004e24:	ffff0007 	.word	0xffff0007

08004e28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e36:	4b53      	ldr	r3, [pc, #332]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d101      	bne.n	8004e46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e099      	b.n	8004f7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e46:	4b4f      	ldr	r3, [pc, #316]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e52:	f7fc ffbd 	bl	8001dd0 <HAL_GetTick>
 8004e56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e58:	e008      	b.n	8004e6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e5a:	f7fc ffb9 	bl	8001dd0 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e086      	b.n	8004f7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e6c:	4b45      	ldr	r3, [pc, #276]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f0      	bne.n	8004e5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e78:	4b42      	ldr	r3, [pc, #264]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	051b      	lsls	r3, r3, #20
 8004e86:	493f      	ldr	r1, [pc, #252]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	025b      	lsls	r3, r3, #9
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	061b      	lsls	r3, r3, #24
 8004eb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ebc:	4931      	ldr	r1, [pc, #196]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ec2:	4b30      	ldr	r3, [pc, #192]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	492d      	ldr	r1, [pc, #180]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	4928      	ldr	r1, [pc, #160]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ee6:	4b27      	ldr	r3, [pc, #156]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	4a26      	ldr	r2, [pc, #152]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ef2:	4b24      	ldr	r3, [pc, #144]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef6:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <RCCEx_PLL3_Config+0x160>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	69d2      	ldr	r2, [r2, #28]
 8004efe:	00d2      	lsls	r2, r2, #3
 8004f00:	4920      	ldr	r1, [pc, #128]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f06:	4b1f      	ldr	r3, [pc, #124]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f18:	4b1a      	ldr	r3, [pc, #104]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f24:	e00f      	b.n	8004f46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d106      	bne.n	8004f3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f2c:	4b15      	ldr	r3, [pc, #84]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	4a14      	ldr	r2, [pc, #80]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f38:	e005      	b.n	8004f46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f3a:	4b12      	ldr	r3, [pc, #72]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	4a11      	ldr	r2, [pc, #68]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f46:	4b0f      	ldr	r3, [pc, #60]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f52:	f7fc ff3d 	bl	8001dd0 <HAL_GetTick>
 8004f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f58:	e008      	b.n	8004f6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f5a:	f7fc ff39 	bl	8001dd0 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e006      	b.n	8004f7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f6c:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	58024400 	.word	0x58024400
 8004f88:	ffff0007 	.word	0xffff0007

08004f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e049      	b.n	8005032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fc fbc0 	bl	8001738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f001 f9e8 	bl	80063a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e049      	b.n	80050e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f841 	bl	80050e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2202      	movs	r2, #2
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3304      	adds	r3, #4
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f001 f991 	bl	80063a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d109      	bne.n	8005120 <HAL_TIM_PWM_Start+0x24>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	bf14      	ite	ne
 8005118:	2301      	movne	r3, #1
 800511a:	2300      	moveq	r3, #0
 800511c:	b2db      	uxtb	r3, r3
 800511e:	e03c      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b04      	cmp	r3, #4
 8005124:	d109      	bne.n	800513a <HAL_TIM_PWM_Start+0x3e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b01      	cmp	r3, #1
 8005130:	bf14      	ite	ne
 8005132:	2301      	movne	r3, #1
 8005134:	2300      	moveq	r3, #0
 8005136:	b2db      	uxtb	r3, r3
 8005138:	e02f      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b08      	cmp	r3, #8
 800513e:	d109      	bne.n	8005154 <HAL_TIM_PWM_Start+0x58>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e022      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d109      	bne.n	800516e <HAL_TIM_PWM_Start+0x72>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	bf14      	ite	ne
 8005166:	2301      	movne	r3, #1
 8005168:	2300      	moveq	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e015      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b10      	cmp	r3, #16
 8005172:	d109      	bne.n	8005188 <HAL_TIM_PWM_Start+0x8c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e008      	b.n	800519a <HAL_TIM_PWM_Start+0x9e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	bf14      	ite	ne
 8005194:	2301      	movne	r3, #1
 8005196:	2300      	moveq	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0a1      	b.n	80052e6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_PWM_Start+0xb6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051b0:	e023      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_PWM_Start+0xc6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051c0:	e01b      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_PWM_Start+0xd6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d0:	e013      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b0c      	cmp	r3, #12
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0xe6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e0:	e00b      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0xf6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051f0:	e003      	b.n	80051fa <HAL_TIM_PWM_Start+0xfe>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2201      	movs	r2, #1
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f001 fefa 	bl	8006ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a38      	ldr	r2, [pc, #224]	@ (80052f0 <HAL_TIM_PWM_Start+0x1f4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a37      	ldr	r2, [pc, #220]	@ (80052f4 <HAL_TIM_PWM_Start+0x1f8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00e      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a35      	ldr	r2, [pc, #212]	@ (80052f8 <HAL_TIM_PWM_Start+0x1fc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a34      	ldr	r2, [pc, #208]	@ (80052fc <HAL_TIM_PWM_Start+0x200>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d004      	beq.n	800523a <HAL_TIM_PWM_Start+0x13e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a32      	ldr	r2, [pc, #200]	@ (8005300 <HAL_TIM_PWM_Start+0x204>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <HAL_TIM_PWM_Start+0x142>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <HAL_TIM_PWM_Start+0x144>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d007      	beq.n	8005254 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005252:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a25      	ldr	r2, [pc, #148]	@ (80052f0 <HAL_TIM_PWM_Start+0x1f4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d022      	beq.n	80052a4 <HAL_TIM_PWM_Start+0x1a8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d01d      	beq.n	80052a4 <HAL_TIM_PWM_Start+0x1a8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a25      	ldr	r2, [pc, #148]	@ (8005304 <HAL_TIM_PWM_Start+0x208>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d018      	beq.n	80052a4 <HAL_TIM_PWM_Start+0x1a8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a24      	ldr	r2, [pc, #144]	@ (8005308 <HAL_TIM_PWM_Start+0x20c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d013      	beq.n	80052a4 <HAL_TIM_PWM_Start+0x1a8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a22      	ldr	r2, [pc, #136]	@ (800530c <HAL_TIM_PWM_Start+0x210>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00e      	beq.n	80052a4 <HAL_TIM_PWM_Start+0x1a8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1a      	ldr	r2, [pc, #104]	@ (80052f4 <HAL_TIM_PWM_Start+0x1f8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_TIM_PWM_Start+0x1a8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1e      	ldr	r2, [pc, #120]	@ (8005310 <HAL_TIM_PWM_Start+0x214>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_TIM_PWM_Start+0x1a8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a16      	ldr	r2, [pc, #88]	@ (80052f8 <HAL_TIM_PWM_Start+0x1fc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d115      	bne.n	80052d0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005314 <HAL_TIM_PWM_Start+0x218>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b06      	cmp	r3, #6
 80052b4:	d015      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x1e6>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052bc:	d011      	beq.n	80052e2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	e008      	b.n	80052e2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e000      	b.n	80052e4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40010400 	.word	0x40010400
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40014400 	.word	0x40014400
 8005300:	40014800 	.word	0x40014800
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40001800 	.word	0x40001800
 8005314:	00010007 	.word	0x00010007

08005318 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e049      	b.n	80053be <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f841 	bl	80053c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f001 f822 	bl	80063a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_IC_Start+0x1a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e023      	b.n	800543e <HAL_TIM_IC_Start+0x62>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_IC_Start+0x2a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005402:	b2db      	uxtb	r3, r3
 8005404:	e01b      	b.n	800543e <HAL_TIM_IC_Start+0x62>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d104      	bne.n	8005416 <HAL_TIM_IC_Start+0x3a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e013      	b.n	800543e <HAL_TIM_IC_Start+0x62>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b0c      	cmp	r3, #12
 800541a:	d104      	bne.n	8005426 <HAL_TIM_IC_Start+0x4a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005422:	b2db      	uxtb	r3, r3
 8005424:	e00b      	b.n	800543e <HAL_TIM_IC_Start+0x62>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b10      	cmp	r3, #16
 800542a:	d104      	bne.n	8005436 <HAL_TIM_IC_Start+0x5a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005432:	b2db      	uxtb	r3, r3
 8005434:	e003      	b.n	800543e <HAL_TIM_IC_Start+0x62>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800543c:	b2db      	uxtb	r3, r3
 800543e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d104      	bne.n	8005450 <HAL_TIM_IC_Start+0x74>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800544c:	b2db      	uxtb	r3, r3
 800544e:	e013      	b.n	8005478 <HAL_TIM_IC_Start+0x9c>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d104      	bne.n	8005460 <HAL_TIM_IC_Start+0x84>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800545c:	b2db      	uxtb	r3, r3
 800545e:	e00b      	b.n	8005478 <HAL_TIM_IC_Start+0x9c>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b08      	cmp	r3, #8
 8005464:	d104      	bne.n	8005470 <HAL_TIM_IC_Start+0x94>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e003      	b.n	8005478 <HAL_TIM_IC_Start+0x9c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005476:	b2db      	uxtb	r3, r3
 8005478:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d102      	bne.n	8005486 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005480:	7bbb      	ldrb	r3, [r7, #14]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d001      	beq.n	800548a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e097      	b.n	80055ba <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <HAL_TIM_IC_Start+0xbe>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005498:	e023      	b.n	80054e2 <HAL_TIM_IC_Start+0x106>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b04      	cmp	r3, #4
 800549e:	d104      	bne.n	80054aa <HAL_TIM_IC_Start+0xce>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054a8:	e01b      	b.n	80054e2 <HAL_TIM_IC_Start+0x106>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_IC_Start+0xde>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b8:	e013      	b.n	80054e2 <HAL_TIM_IC_Start+0x106>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b0c      	cmp	r3, #12
 80054be:	d104      	bne.n	80054ca <HAL_TIM_IC_Start+0xee>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054c8:	e00b      	b.n	80054e2 <HAL_TIM_IC_Start+0x106>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d104      	bne.n	80054da <HAL_TIM_IC_Start+0xfe>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054d8:	e003      	b.n	80054e2 <HAL_TIM_IC_Start+0x106>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_IC_Start+0x116>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054f0:	e013      	b.n	800551a <HAL_TIM_IC_Start+0x13e>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_IC_Start+0x126>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005500:	e00b      	b.n	800551a <HAL_TIM_IC_Start+0x13e>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d104      	bne.n	8005512 <HAL_TIM_IC_Start+0x136>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005510:	e003      	b.n	800551a <HAL_TIM_IC_Start+0x13e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2201      	movs	r2, #1
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fd6a 	bl	8006ffc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a25      	ldr	r2, [pc, #148]	@ (80055c4 <HAL_TIM_IC_Start+0x1e8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d022      	beq.n	8005578 <HAL_TIM_IC_Start+0x19c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800553a:	d01d      	beq.n	8005578 <HAL_TIM_IC_Start+0x19c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <HAL_TIM_IC_Start+0x1ec>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d018      	beq.n	8005578 <HAL_TIM_IC_Start+0x19c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a20      	ldr	r2, [pc, #128]	@ (80055cc <HAL_TIM_IC_Start+0x1f0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d013      	beq.n	8005578 <HAL_TIM_IC_Start+0x19c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1e      	ldr	r2, [pc, #120]	@ (80055d0 <HAL_TIM_IC_Start+0x1f4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00e      	beq.n	8005578 <HAL_TIM_IC_Start+0x19c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1d      	ldr	r2, [pc, #116]	@ (80055d4 <HAL_TIM_IC_Start+0x1f8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d009      	beq.n	8005578 <HAL_TIM_IC_Start+0x19c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1b      	ldr	r2, [pc, #108]	@ (80055d8 <HAL_TIM_IC_Start+0x1fc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d004      	beq.n	8005578 <HAL_TIM_IC_Start+0x19c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1a      	ldr	r2, [pc, #104]	@ (80055dc <HAL_TIM_IC_Start+0x200>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d115      	bne.n	80055a4 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	4b18      	ldr	r3, [pc, #96]	@ (80055e0 <HAL_TIM_IC_Start+0x204>)
 8005580:	4013      	ands	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b06      	cmp	r3, #6
 8005588:	d015      	beq.n	80055b6 <HAL_TIM_IC_Start+0x1da>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005590:	d011      	beq.n	80055b6 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0201 	orr.w	r2, r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a2:	e008      	b.n	80055b6 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	e000      	b.n	80055b8 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40010000 	.word	0x40010000
 80055c8:	40000400 	.word	0x40000400
 80055cc:	40000800 	.word	0x40000800
 80055d0:	40000c00 	.word	0x40000c00
 80055d4:	40010400 	.word	0x40010400
 80055d8:	40001800 	.word	0x40001800
 80055dc:	40014000 	.word	0x40014000
 80055e0:	00010007 	.word	0x00010007

080055e4 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	6839      	ldr	r1, [r7, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 fd00 	bl	8006ffc <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6a1a      	ldr	r2, [r3, #32]
 8005602:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005606:	4013      	ands	r3, r2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10f      	bne.n	800562c <HAL_TIM_IC_Stop+0x48>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6a1a      	ldr	r2, [r3, #32]
 8005612:	f240 4344 	movw	r3, #1092	@ 0x444
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d107      	bne.n	800562c <HAL_TIM_IC_Stop+0x48>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d104      	bne.n	800563c <HAL_TIM_IC_Stop+0x58>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800563a:	e023      	b.n	8005684 <HAL_TIM_IC_Stop+0xa0>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b04      	cmp	r3, #4
 8005640:	d104      	bne.n	800564c <HAL_TIM_IC_Stop+0x68>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800564a:	e01b      	b.n	8005684 <HAL_TIM_IC_Stop+0xa0>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b08      	cmp	r3, #8
 8005650:	d104      	bne.n	800565c <HAL_TIM_IC_Stop+0x78>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800565a:	e013      	b.n	8005684 <HAL_TIM_IC_Stop+0xa0>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b0c      	cmp	r3, #12
 8005660:	d104      	bne.n	800566c <HAL_TIM_IC_Stop+0x88>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800566a:	e00b      	b.n	8005684 <HAL_TIM_IC_Stop+0xa0>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b10      	cmp	r3, #16
 8005670:	d104      	bne.n	800567c <HAL_TIM_IC_Stop+0x98>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800567a:	e003      	b.n	8005684 <HAL_TIM_IC_Stop+0xa0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d104      	bne.n	8005694 <HAL_TIM_IC_Stop+0xb0>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005692:	e013      	b.n	80056bc <HAL_TIM_IC_Stop+0xd8>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b04      	cmp	r3, #4
 8005698:	d104      	bne.n	80056a4 <HAL_TIM_IC_Stop+0xc0>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056a2:	e00b      	b.n	80056bc <HAL_TIM_IC_Stop+0xd8>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d104      	bne.n	80056b4 <HAL_TIM_IC_Stop+0xd0>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056b2:	e003      	b.n	80056bc <HAL_TIM_IC_Stop+0xd8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_IC_Start_IT+0x1e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	e023      	b.n	800572e <HAL_TIM_IC_Start_IT+0x66>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_IC_Start_IT+0x2e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e01b      	b.n	800572e <HAL_TIM_IC_Start_IT+0x66>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_IC_Start_IT+0x3e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005702:	b2db      	uxtb	r3, r3
 8005704:	e013      	b.n	800572e <HAL_TIM_IC_Start_IT+0x66>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b0c      	cmp	r3, #12
 800570a:	d104      	bne.n	8005716 <HAL_TIM_IC_Start_IT+0x4e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e00b      	b.n	800572e <HAL_TIM_IC_Start_IT+0x66>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b10      	cmp	r3, #16
 800571a:	d104      	bne.n	8005726 <HAL_TIM_IC_Start_IT+0x5e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e003      	b.n	800572e <HAL_TIM_IC_Start_IT+0x66>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800572c:	b2db      	uxtb	r3, r3
 800572e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <HAL_TIM_IC_Start_IT+0x78>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800573c:	b2db      	uxtb	r3, r3
 800573e:	e013      	b.n	8005768 <HAL_TIM_IC_Start_IT+0xa0>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b04      	cmp	r3, #4
 8005744:	d104      	bne.n	8005750 <HAL_TIM_IC_Start_IT+0x88>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e00b      	b.n	8005768 <HAL_TIM_IC_Start_IT+0xa0>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b08      	cmp	r3, #8
 8005754:	d104      	bne.n	8005760 <HAL_TIM_IC_Start_IT+0x98>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e003      	b.n	8005768 <HAL_TIM_IC_Start_IT+0xa0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005766:	b2db      	uxtb	r3, r3
 8005768:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800576a:	7bbb      	ldrb	r3, [r7, #14]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d102      	bne.n	8005776 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005770:	7b7b      	ldrb	r3, [r7, #13]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d001      	beq.n	800577a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e0e2      	b.n	8005940 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <HAL_TIM_IC_Start_IT+0xc2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005788:	e023      	b.n	80057d2 <HAL_TIM_IC_Start_IT+0x10a>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b04      	cmp	r3, #4
 800578e:	d104      	bne.n	800579a <HAL_TIM_IC_Start_IT+0xd2>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005798:	e01b      	b.n	80057d2 <HAL_TIM_IC_Start_IT+0x10a>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d104      	bne.n	80057aa <HAL_TIM_IC_Start_IT+0xe2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057a8:	e013      	b.n	80057d2 <HAL_TIM_IC_Start_IT+0x10a>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b0c      	cmp	r3, #12
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_IC_Start_IT+0xf2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057b8:	e00b      	b.n	80057d2 <HAL_TIM_IC_Start_IT+0x10a>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d104      	bne.n	80057ca <HAL_TIM_IC_Start_IT+0x102>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057c8:	e003      	b.n	80057d2 <HAL_TIM_IC_Start_IT+0x10a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_IC_Start_IT+0x11a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e0:	e013      	b.n	800580a <HAL_TIM_IC_Start_IT+0x142>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_IC_Start_IT+0x12a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057f0:	e00b      	b.n	800580a <HAL_TIM_IC_Start_IT+0x142>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_IC_Start_IT+0x13a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005800:	e003      	b.n	800580a <HAL_TIM_IC_Start_IT+0x142>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b0c      	cmp	r3, #12
 800580e:	d841      	bhi.n	8005894 <HAL_TIM_IC_Start_IT+0x1cc>
 8005810:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <HAL_TIM_IC_Start_IT+0x150>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	0800584d 	.word	0x0800584d
 800581c:	08005895 	.word	0x08005895
 8005820:	08005895 	.word	0x08005895
 8005824:	08005895 	.word	0x08005895
 8005828:	0800585f 	.word	0x0800585f
 800582c:	08005895 	.word	0x08005895
 8005830:	08005895 	.word	0x08005895
 8005834:	08005895 	.word	0x08005895
 8005838:	08005871 	.word	0x08005871
 800583c:	08005895 	.word	0x08005895
 8005840:	08005895 	.word	0x08005895
 8005844:	08005895 	.word	0x08005895
 8005848:	08005883 	.word	0x08005883
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0202 	orr.w	r2, r2, #2
 800585a:	60da      	str	r2, [r3, #12]
      break;
 800585c:	e01d      	b.n	800589a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0204 	orr.w	r2, r2, #4
 800586c:	60da      	str	r2, [r3, #12]
      break;
 800586e:	e014      	b.n	800589a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0208 	orr.w	r2, r2, #8
 800587e:	60da      	str	r2, [r3, #12]
      break;
 8005880:	e00b      	b.n	800589a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0210 	orr.w	r2, r2, #16
 8005890:	60da      	str	r2, [r3, #12]
      break;
 8005892:	e002      	b.n	800589a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
      break;
 8005898:	bf00      	nop
  }

  if (status == HAL_OK)
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d14e      	bne.n	800593e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2201      	movs	r2, #1
 80058a6:	6839      	ldr	r1, [r7, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f001 fba7 	bl	8006ffc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a25      	ldr	r2, [pc, #148]	@ (8005948 <HAL_TIM_IC_Start_IT+0x280>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d022      	beq.n	80058fe <HAL_TIM_IC_Start_IT+0x236>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c0:	d01d      	beq.n	80058fe <HAL_TIM_IC_Start_IT+0x236>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a21      	ldr	r2, [pc, #132]	@ (800594c <HAL_TIM_IC_Start_IT+0x284>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d018      	beq.n	80058fe <HAL_TIM_IC_Start_IT+0x236>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005950 <HAL_TIM_IC_Start_IT+0x288>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <HAL_TIM_IC_Start_IT+0x236>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1e      	ldr	r2, [pc, #120]	@ (8005954 <HAL_TIM_IC_Start_IT+0x28c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00e      	beq.n	80058fe <HAL_TIM_IC_Start_IT+0x236>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <HAL_TIM_IC_Start_IT+0x290>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_TIM_IC_Start_IT+0x236>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1b      	ldr	r2, [pc, #108]	@ (800595c <HAL_TIM_IC_Start_IT+0x294>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_TIM_IC_Start_IT+0x236>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a19      	ldr	r2, [pc, #100]	@ (8005960 <HAL_TIM_IC_Start_IT+0x298>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d115      	bne.n	800592a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	4b17      	ldr	r3, [pc, #92]	@ (8005964 <HAL_TIM_IC_Start_IT+0x29c>)
 8005906:	4013      	ands	r3, r2
 8005908:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b06      	cmp	r3, #6
 800590e:	d015      	beq.n	800593c <HAL_TIM_IC_Start_IT+0x274>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005916:	d011      	beq.n	800593c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005928:	e008      	b.n	800593c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0201 	orr.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e000      	b.n	800593e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800593e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40010000 	.word	0x40010000
 800594c:	40000400 	.word	0x40000400
 8005950:	40000800 	.word	0x40000800
 8005954:	40000c00 	.word	0x40000c00
 8005958:	40010400 	.word	0x40010400
 800595c:	40001800 	.word	0x40001800
 8005960:	40014000 	.word	0x40014000
 8005964:	00010007 	.word	0x00010007

08005968 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b0c      	cmp	r3, #12
 800597a:	d841      	bhi.n	8005a00 <HAL_TIM_IC_Stop_IT+0x98>
 800597c:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <HAL_TIM_IC_Stop_IT+0x1c>)
 800597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	080059b9 	.word	0x080059b9
 8005988:	08005a01 	.word	0x08005a01
 800598c:	08005a01 	.word	0x08005a01
 8005990:	08005a01 	.word	0x08005a01
 8005994:	080059cb 	.word	0x080059cb
 8005998:	08005a01 	.word	0x08005a01
 800599c:	08005a01 	.word	0x08005a01
 80059a0:	08005a01 	.word	0x08005a01
 80059a4:	080059dd 	.word	0x080059dd
 80059a8:	08005a01 	.word	0x08005a01
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	08005a01 	.word	0x08005a01
 80059b4:	080059ef 	.word	0x080059ef
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0202 	bic.w	r2, r2, #2
 80059c6:	60da      	str	r2, [r3, #12]
      break;
 80059c8:	e01d      	b.n	8005a06 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0204 	bic.w	r2, r2, #4
 80059d8:	60da      	str	r2, [r3, #12]
      break;
 80059da:	e014      	b.n	8005a06 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 0208 	bic.w	r2, r2, #8
 80059ea:	60da      	str	r2, [r3, #12]
      break;
 80059ec:	e00b      	b.n	8005a06 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0210 	bic.w	r2, r2, #16
 80059fc:	60da      	str	r2, [r3, #12]
      break;
 80059fe:	e002      	b.n	8005a06 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
      break;
 8005a04:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d166      	bne.n	8005ada <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2200      	movs	r2, #0
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f001 faf1 	bl	8006ffc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10f      	bne.n	8005a4a <HAL_TIM_IC_Stop_IT+0xe2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6a1a      	ldr	r2, [r3, #32]
 8005a30:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a34:	4013      	ands	r3, r2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d107      	bne.n	8005a4a <HAL_TIM_IC_Stop_IT+0xe2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0201 	bic.w	r2, r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_IC_Stop_IT+0xf2>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a58:	e023      	b.n	8005aa2 <HAL_TIM_IC_Stop_IT+0x13a>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_IC_Stop_IT+0x102>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a68:	e01b      	b.n	8005aa2 <HAL_TIM_IC_Stop_IT+0x13a>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d104      	bne.n	8005a7a <HAL_TIM_IC_Stop_IT+0x112>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a78:	e013      	b.n	8005aa2 <HAL_TIM_IC_Stop_IT+0x13a>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b0c      	cmp	r3, #12
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIM_IC_Stop_IT+0x122>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a88:	e00b      	b.n	8005aa2 <HAL_TIM_IC_Stop_IT+0x13a>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d104      	bne.n	8005a9a <HAL_TIM_IC_Stop_IT+0x132>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a98:	e003      	b.n	8005aa2 <HAL_TIM_IC_Stop_IT+0x13a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_IC_Stop_IT+0x14a>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ab0:	e013      	b.n	8005ada <HAL_TIM_IC_Stop_IT+0x172>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	d104      	bne.n	8005ac2 <HAL_TIM_IC_Stop_IT+0x15a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ac0:	e00b      	b.n	8005ada <HAL_TIM_IC_Stop_IT+0x172>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_IC_Stop_IT+0x16a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ad0:	e003      	b.n	8005ada <HAL_TIM_IC_Stop_IT+0x172>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d020      	beq.n	8005b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01b      	beq.n	8005b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0202 	mvn.w	r2, #2
 8005b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fb fb0e 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8005b34:	e005      	b.n	8005b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fc14 	bl	8006364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fc1b 	bl	8006378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d020      	beq.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01b      	beq.n	8005b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0204 	mvn.w	r2, #4
 8005b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fb fae8 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fbee 	bl	8006364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fbf5 	bl	8006378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d020      	beq.n	8005be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01b      	beq.n	8005be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0208 	mvn.w	r2, #8
 8005bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fb fac2 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fbc8 	bl	8006364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fbcf 	bl	8006378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d020      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01b      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0210 	mvn.w	r2, #16
 8005bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2208      	movs	r2, #8
 8005c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fb fa9c 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fba2 	bl	8006364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fba9 	bl	8006378 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00c      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0201 	mvn.w	r2, #1
 8005c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fb80 	bl	8006350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00c      	beq.n	8005c7e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f001 fb09 	bl	8007290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00c      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d007      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 fb01 	bl	80072a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00c      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fb63 	bl	800638c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00c      	beq.n	8005cea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f06f 0220 	mvn.w	r2, #32
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fac9 	bl	800727c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b086      	sub	sp, #24
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	60f8      	str	r0, [r7, #12]
 8005cfa:	60b9      	str	r1, [r7, #8]
 8005cfc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e088      	b.n	8005e22 <HAL_TIM_IC_ConfigChannel+0x130>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d11b      	bne.n	8005d56 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d2e:	f000 ff9d 	bl	8006c6c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699a      	ldr	r2, [r3, #24]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 020c 	bic.w	r2, r2, #12
 8005d40:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6999      	ldr	r1, [r3, #24]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	619a      	str	r2, [r3, #24]
 8005d54:	e060      	b.n	8005e18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d11c      	bne.n	8005d96 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005d6c:	f001 f821 	bl	8006db2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d7e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6999      	ldr	r1, [r3, #24]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	021a      	lsls	r2, r3, #8
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	619a      	str	r2, [r3, #24]
 8005d94:	e040      	b.n	8005e18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d11b      	bne.n	8005dd4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005dac:	f001 f86e 	bl	8006e8c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69da      	ldr	r2, [r3, #28]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 020c 	bic.w	r2, r2, #12
 8005dbe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69d9      	ldr	r1, [r3, #28]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	61da      	str	r2, [r3, #28]
 8005dd2:	e021      	b.n	8005e18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b0c      	cmp	r3, #12
 8005dd8:	d11c      	bne.n	8005e14 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005dea:	f001 f88b 	bl	8006f04 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005dfc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69d9      	ldr	r1, [r3, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	021a      	lsls	r2, r3, #8
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	61da      	str	r2, [r3, #28]
 8005e12:	e001      	b.n	8005e18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e0ff      	b.n	800604a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b14      	cmp	r3, #20
 8005e56:	f200 80f0 	bhi.w	800603a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005eb5 	.word	0x08005eb5
 8005e64:	0800603b 	.word	0x0800603b
 8005e68:	0800603b 	.word	0x0800603b
 8005e6c:	0800603b 	.word	0x0800603b
 8005e70:	08005ef5 	.word	0x08005ef5
 8005e74:	0800603b 	.word	0x0800603b
 8005e78:	0800603b 	.word	0x0800603b
 8005e7c:	0800603b 	.word	0x0800603b
 8005e80:	08005f37 	.word	0x08005f37
 8005e84:	0800603b 	.word	0x0800603b
 8005e88:	0800603b 	.word	0x0800603b
 8005e8c:	0800603b 	.word	0x0800603b
 8005e90:	08005f77 	.word	0x08005f77
 8005e94:	0800603b 	.word	0x0800603b
 8005e98:	0800603b 	.word	0x0800603b
 8005e9c:	0800603b 	.word	0x0800603b
 8005ea0:	08005fb9 	.word	0x08005fb9
 8005ea4:	0800603b 	.word	0x0800603b
 8005ea8:	0800603b 	.word	0x0800603b
 8005eac:	0800603b 	.word	0x0800603b
 8005eb0:	08005ff9 	.word	0x08005ff9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fb16 	bl	80064ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0208 	orr.w	r2, r2, #8
 8005ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0204 	bic.w	r2, r2, #4
 8005ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6999      	ldr	r1, [r3, #24]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	619a      	str	r2, [r3, #24]
      break;
 8005ef2:	e0a5      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fb86 	bl	800660c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6999      	ldr	r1, [r3, #24]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	021a      	lsls	r2, r3, #8
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	619a      	str	r2, [r3, #24]
      break;
 8005f34:	e084      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fbef 	bl	8006720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0208 	orr.w	r2, r2, #8
 8005f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0204 	bic.w	r2, r2, #4
 8005f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69d9      	ldr	r1, [r3, #28]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	61da      	str	r2, [r3, #28]
      break;
 8005f74:	e064      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fc57 	bl	8006830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69d9      	ldr	r1, [r3, #28]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	021a      	lsls	r2, r3, #8
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	61da      	str	r2, [r3, #28]
      break;
 8005fb6:	e043      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fca0 	bl	8006904 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0208 	orr.w	r2, r2, #8
 8005fd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0204 	bic.w	r2, r2, #4
 8005fe2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ff6:	e023      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fce4 	bl	80069cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006012:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006022:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006038:	e002      	b.n	8006040 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]
      break;
 800603e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop

08006054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_TIM_ConfigClockSource+0x1c>
 800606c:	2302      	movs	r3, #2
 800606e:	e0dc      	b.n	800622a <HAL_TIM_ConfigClockSource+0x1d6>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	4b6a      	ldr	r3, [pc, #424]	@ (8006234 <HAL_TIM_ConfigClockSource+0x1e0>)
 800608c:	4013      	ands	r3, r2
 800608e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006096:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a64      	ldr	r2, [pc, #400]	@ (8006238 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	f000 80a9 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x1aa>
 80060ac:	4a62      	ldr	r2, [pc, #392]	@ (8006238 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	f200 80ae 	bhi.w	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 80060b4:	4a61      	ldr	r2, [pc, #388]	@ (800623c <HAL_TIM_ConfigClockSource+0x1e8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	f000 80a1 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x1aa>
 80060bc:	4a5f      	ldr	r2, [pc, #380]	@ (800623c <HAL_TIM_ConfigClockSource+0x1e8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	f200 80a6 	bhi.w	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 80060c4:	4a5e      	ldr	r2, [pc, #376]	@ (8006240 <HAL_TIM_ConfigClockSource+0x1ec>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	f000 8099 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x1aa>
 80060cc:	4a5c      	ldr	r2, [pc, #368]	@ (8006240 <HAL_TIM_ConfigClockSource+0x1ec>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	f200 809e 	bhi.w	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 80060d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060d8:	f000 8091 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x1aa>
 80060dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060e0:	f200 8096 	bhi.w	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 80060e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e8:	f000 8089 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x1aa>
 80060ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060f0:	f200 808e 	bhi.w	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 80060f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f8:	d03e      	beq.n	8006178 <HAL_TIM_ConfigClockSource+0x124>
 80060fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060fe:	f200 8087 	bhi.w	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006106:	f000 8086 	beq.w	8006216 <HAL_TIM_ConfigClockSource+0x1c2>
 800610a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610e:	d87f      	bhi.n	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 8006110:	2b70      	cmp	r3, #112	@ 0x70
 8006112:	d01a      	beq.n	800614a <HAL_TIM_ConfigClockSource+0xf6>
 8006114:	2b70      	cmp	r3, #112	@ 0x70
 8006116:	d87b      	bhi.n	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 8006118:	2b60      	cmp	r3, #96	@ 0x60
 800611a:	d050      	beq.n	80061be <HAL_TIM_ConfigClockSource+0x16a>
 800611c:	2b60      	cmp	r3, #96	@ 0x60
 800611e:	d877      	bhi.n	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 8006120:	2b50      	cmp	r3, #80	@ 0x50
 8006122:	d03c      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x14a>
 8006124:	2b50      	cmp	r3, #80	@ 0x50
 8006126:	d873      	bhi.n	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 8006128:	2b40      	cmp	r3, #64	@ 0x40
 800612a:	d058      	beq.n	80061de <HAL_TIM_ConfigClockSource+0x18a>
 800612c:	2b40      	cmp	r3, #64	@ 0x40
 800612e:	d86f      	bhi.n	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 8006130:	2b30      	cmp	r3, #48	@ 0x30
 8006132:	d064      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x1aa>
 8006134:	2b30      	cmp	r3, #48	@ 0x30
 8006136:	d86b      	bhi.n	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 8006138:	2b20      	cmp	r3, #32
 800613a:	d060      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x1aa>
 800613c:	2b20      	cmp	r3, #32
 800613e:	d867      	bhi.n	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d05c      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x1aa>
 8006144:	2b10      	cmp	r3, #16
 8006146:	d05a      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x1aa>
 8006148:	e062      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800615a:	f000 ff2f 	bl	8006fbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800616c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	609a      	str	r2, [r3, #8]
      break;
 8006176:	e04f      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006188:	f000 ff18 	bl	8006fbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800619a:	609a      	str	r2, [r3, #8]
      break;
 800619c:	e03c      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061aa:	461a      	mov	r2, r3
 80061ac:	f000 fdd2 	bl	8006d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2150      	movs	r1, #80	@ 0x50
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fee2 	bl	8006f80 <TIM_ITRx_SetConfig>
      break;
 80061bc:	e02c      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ca:	461a      	mov	r2, r3
 80061cc:	f000 fe2e 	bl	8006e2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2160      	movs	r1, #96	@ 0x60
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fed2 	bl	8006f80 <TIM_ITRx_SetConfig>
      break;
 80061dc:	e01c      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ea:	461a      	mov	r2, r3
 80061ec:	f000 fdb2 	bl	8006d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2140      	movs	r1, #64	@ 0x40
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fec2 	bl	8006f80 <TIM_ITRx_SetConfig>
      break;
 80061fc:	e00c      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f000 feb9 	bl	8006f80 <TIM_ITRx_SetConfig>
      break;
 800620e:	e003      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
      break;
 8006214:	e000      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	ffceff88 	.word	0xffceff88
 8006238:	00100040 	.word	0x00100040
 800623c:	00100030 	.word	0x00100030
 8006240:	00100020 	.word	0x00100020

08006244 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006258:	2302      	movs	r3, #2
 800625a:	e031      	b.n	80062c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800626c:	6839      	ldr	r1, [r7, #0]
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fc12 	bl	8006a98 <TIM_SlaveTimer_SetConfig>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d009      	beq.n	800628e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e018      	b.n	80062c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800629c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062ac:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b0c      	cmp	r3, #12
 80062da:	d831      	bhi.n	8006340 <HAL_TIM_ReadCapturedValue+0x78>
 80062dc:	a201      	add	r2, pc, #4	@ (adr r2, 80062e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	08006319 	.word	0x08006319
 80062e8:	08006341 	.word	0x08006341
 80062ec:	08006341 	.word	0x08006341
 80062f0:	08006341 	.word	0x08006341
 80062f4:	08006323 	.word	0x08006323
 80062f8:	08006341 	.word	0x08006341
 80062fc:	08006341 	.word	0x08006341
 8006300:	08006341 	.word	0x08006341
 8006304:	0800632d 	.word	0x0800632d
 8006308:	08006341 	.word	0x08006341
 800630c:	08006341 	.word	0x08006341
 8006310:	08006341 	.word	0x08006341
 8006314:	08006337 	.word	0x08006337
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800631e:	60fb      	str	r3, [r7, #12]

      break;
 8006320:	e00f      	b.n	8006342 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006328:	60fb      	str	r3, [r7, #12]

      break;
 800632a:	e00a      	b.n	8006342 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006332:	60fb      	str	r3, [r7, #12]

      break;
 8006334:	e005      	b.n	8006342 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633c:	60fb      	str	r3, [r7, #12]

      break;
 800633e:	e000      	b.n	8006342 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006340:	bf00      	nop
  }

  return tmpreg;
 8006342:	68fb      	ldr	r3, [r7, #12]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a46      	ldr	r2, [pc, #280]	@ (80064cc <TIM_Base_SetConfig+0x12c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d013      	beq.n	80063e0 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063be:	d00f      	beq.n	80063e0 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a43      	ldr	r2, [pc, #268]	@ (80064d0 <TIM_Base_SetConfig+0x130>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00b      	beq.n	80063e0 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a42      	ldr	r2, [pc, #264]	@ (80064d4 <TIM_Base_SetConfig+0x134>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d007      	beq.n	80063e0 <TIM_Base_SetConfig+0x40>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a41      	ldr	r2, [pc, #260]	@ (80064d8 <TIM_Base_SetConfig+0x138>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_Base_SetConfig+0x40>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a40      	ldr	r2, [pc, #256]	@ (80064dc <TIM_Base_SetConfig+0x13c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d108      	bne.n	80063f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a35      	ldr	r2, [pc, #212]	@ (80064cc <TIM_Base_SetConfig+0x12c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01f      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006400:	d01b      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a32      	ldr	r2, [pc, #200]	@ (80064d0 <TIM_Base_SetConfig+0x130>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d017      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a31      	ldr	r2, [pc, #196]	@ (80064d4 <TIM_Base_SetConfig+0x134>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a30      	ldr	r2, [pc, #192]	@ (80064d8 <TIM_Base_SetConfig+0x138>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00f      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a2f      	ldr	r2, [pc, #188]	@ (80064dc <TIM_Base_SetConfig+0x13c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00b      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a2e      	ldr	r2, [pc, #184]	@ (80064e0 <TIM_Base_SetConfig+0x140>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d007      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a2d      	ldr	r2, [pc, #180]	@ (80064e4 <TIM_Base_SetConfig+0x144>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d003      	beq.n	800643a <TIM_Base_SetConfig+0x9a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a2c      	ldr	r2, [pc, #176]	@ (80064e8 <TIM_Base_SetConfig+0x148>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d108      	bne.n	800644c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a16      	ldr	r2, [pc, #88]	@ (80064cc <TIM_Base_SetConfig+0x12c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00f      	beq.n	8006498 <TIM_Base_SetConfig+0xf8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a18      	ldr	r2, [pc, #96]	@ (80064dc <TIM_Base_SetConfig+0x13c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00b      	beq.n	8006498 <TIM_Base_SetConfig+0xf8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a17      	ldr	r2, [pc, #92]	@ (80064e0 <TIM_Base_SetConfig+0x140>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d007      	beq.n	8006498 <TIM_Base_SetConfig+0xf8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a16      	ldr	r2, [pc, #88]	@ (80064e4 <TIM_Base_SetConfig+0x144>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_Base_SetConfig+0xf8>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a15      	ldr	r2, [pc, #84]	@ (80064e8 <TIM_Base_SetConfig+0x148>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d103      	bne.n	80064a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d105      	bne.n	80064be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f023 0201 	bic.w	r2, r3, #1
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	611a      	str	r2, [r3, #16]
  }
}
 80064be:	bf00      	nop
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40010000 	.word	0x40010000
 80064d0:	40000400 	.word	0x40000400
 80064d4:	40000800 	.word	0x40000800
 80064d8:	40000c00 	.word	0x40000c00
 80064dc:	40010400 	.word	0x40010400
 80064e0:	40014000 	.word	0x40014000
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800

080064ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f023 0201 	bic.w	r2, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4b37      	ldr	r3, [pc, #220]	@ (80065f4 <TIM_OC1_SetConfig+0x108>)
 8006518:	4013      	ands	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 0302 	bic.w	r3, r3, #2
 8006534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a2d      	ldr	r2, [pc, #180]	@ (80065f8 <TIM_OC1_SetConfig+0x10c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00f      	beq.n	8006568 <TIM_OC1_SetConfig+0x7c>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a2c      	ldr	r2, [pc, #176]	@ (80065fc <TIM_OC1_SetConfig+0x110>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00b      	beq.n	8006568 <TIM_OC1_SetConfig+0x7c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a2b      	ldr	r2, [pc, #172]	@ (8006600 <TIM_OC1_SetConfig+0x114>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <TIM_OC1_SetConfig+0x7c>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a2a      	ldr	r2, [pc, #168]	@ (8006604 <TIM_OC1_SetConfig+0x118>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_OC1_SetConfig+0x7c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a29      	ldr	r2, [pc, #164]	@ (8006608 <TIM_OC1_SetConfig+0x11c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d10c      	bne.n	8006582 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 0308 	bic.w	r3, r3, #8
 800656e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f023 0304 	bic.w	r3, r3, #4
 8006580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a1c      	ldr	r2, [pc, #112]	@ (80065f8 <TIM_OC1_SetConfig+0x10c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00f      	beq.n	80065aa <TIM_OC1_SetConfig+0xbe>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a1b      	ldr	r2, [pc, #108]	@ (80065fc <TIM_OC1_SetConfig+0x110>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_OC1_SetConfig+0xbe>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a1a      	ldr	r2, [pc, #104]	@ (8006600 <TIM_OC1_SetConfig+0x114>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <TIM_OC1_SetConfig+0xbe>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a19      	ldr	r2, [pc, #100]	@ (8006604 <TIM_OC1_SetConfig+0x118>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_OC1_SetConfig+0xbe>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a18      	ldr	r2, [pc, #96]	@ (8006608 <TIM_OC1_SetConfig+0x11c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d111      	bne.n	80065ce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	621a      	str	r2, [r3, #32]
}
 80065e8:	bf00      	nop
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	fffeff8f 	.word	0xfffeff8f
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40010400 	.word	0x40010400
 8006600:	40014000 	.word	0x40014000
 8006604:	40014400 	.word	0x40014400
 8006608:	40014800 	.word	0x40014800

0800660c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f023 0210 	bic.w	r2, r3, #16
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4b34      	ldr	r3, [pc, #208]	@ (8006708 <TIM_OC2_SetConfig+0xfc>)
 8006638:	4013      	ands	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0320 	bic.w	r3, r3, #32
 8006656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a29      	ldr	r2, [pc, #164]	@ (800670c <TIM_OC2_SetConfig+0x100>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d003      	beq.n	8006674 <TIM_OC2_SetConfig+0x68>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a28      	ldr	r2, [pc, #160]	@ (8006710 <TIM_OC2_SetConfig+0x104>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d10d      	bne.n	8006690 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800667a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800668e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1e      	ldr	r2, [pc, #120]	@ (800670c <TIM_OC2_SetConfig+0x100>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00f      	beq.n	80066b8 <TIM_OC2_SetConfig+0xac>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a1d      	ldr	r2, [pc, #116]	@ (8006710 <TIM_OC2_SetConfig+0x104>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00b      	beq.n	80066b8 <TIM_OC2_SetConfig+0xac>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1c      	ldr	r2, [pc, #112]	@ (8006714 <TIM_OC2_SetConfig+0x108>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d007      	beq.n	80066b8 <TIM_OC2_SetConfig+0xac>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006718 <TIM_OC2_SetConfig+0x10c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d003      	beq.n	80066b8 <TIM_OC2_SetConfig+0xac>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a1a      	ldr	r2, [pc, #104]	@ (800671c <TIM_OC2_SetConfig+0x110>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d113      	bne.n	80066e0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	621a      	str	r2, [r3, #32]
}
 80066fa:	bf00      	nop
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	feff8fff 	.word	0xfeff8fff
 800670c:	40010000 	.word	0x40010000
 8006710:	40010400 	.word	0x40010400
 8006714:	40014000 	.word	0x40014000
 8006718:	40014400 	.word	0x40014400
 800671c:	40014800 	.word	0x40014800

08006720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4b33      	ldr	r3, [pc, #204]	@ (8006818 <TIM_OC3_SetConfig+0xf8>)
 800674c:	4013      	ands	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0303 	bic.w	r3, r3, #3
 8006756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a28      	ldr	r2, [pc, #160]	@ (800681c <TIM_OC3_SetConfig+0xfc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <TIM_OC3_SetConfig+0x66>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a27      	ldr	r2, [pc, #156]	@ (8006820 <TIM_OC3_SetConfig+0x100>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d10d      	bne.n	80067a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800678c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1d      	ldr	r2, [pc, #116]	@ (800681c <TIM_OC3_SetConfig+0xfc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00f      	beq.n	80067ca <TIM_OC3_SetConfig+0xaa>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006820 <TIM_OC3_SetConfig+0x100>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00b      	beq.n	80067ca <TIM_OC3_SetConfig+0xaa>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006824 <TIM_OC3_SetConfig+0x104>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d007      	beq.n	80067ca <TIM_OC3_SetConfig+0xaa>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006828 <TIM_OC3_SetConfig+0x108>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d003      	beq.n	80067ca <TIM_OC3_SetConfig+0xaa>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a19      	ldr	r2, [pc, #100]	@ (800682c <TIM_OC3_SetConfig+0x10c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d113      	bne.n	80067f2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	621a      	str	r2, [r3, #32]
}
 800680c:	bf00      	nop
 800680e:	371c      	adds	r7, #28
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	fffeff8f 	.word	0xfffeff8f
 800681c:	40010000 	.word	0x40010000
 8006820:	40010400 	.word	0x40010400
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800

08006830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	4b24      	ldr	r3, [pc, #144]	@ (80068ec <TIM_OC4_SetConfig+0xbc>)
 800685c:	4013      	ands	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800687a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	031b      	lsls	r3, r3, #12
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a19      	ldr	r2, [pc, #100]	@ (80068f0 <TIM_OC4_SetConfig+0xc0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00f      	beq.n	80068b0 <TIM_OC4_SetConfig+0x80>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a18      	ldr	r2, [pc, #96]	@ (80068f4 <TIM_OC4_SetConfig+0xc4>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00b      	beq.n	80068b0 <TIM_OC4_SetConfig+0x80>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a17      	ldr	r2, [pc, #92]	@ (80068f8 <TIM_OC4_SetConfig+0xc8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d007      	beq.n	80068b0 <TIM_OC4_SetConfig+0x80>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a16      	ldr	r2, [pc, #88]	@ (80068fc <TIM_OC4_SetConfig+0xcc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d003      	beq.n	80068b0 <TIM_OC4_SetConfig+0x80>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a15      	ldr	r2, [pc, #84]	@ (8006900 <TIM_OC4_SetConfig+0xd0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d109      	bne.n	80068c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	019b      	lsls	r3, r3, #6
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	feff8fff 	.word	0xfeff8fff
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40010400 	.word	0x40010400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800

08006904 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4b21      	ldr	r3, [pc, #132]	@ (80069b4 <TIM_OC5_SetConfig+0xb0>)
 8006930:	4013      	ands	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006944:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	041b      	lsls	r3, r3, #16
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a18      	ldr	r2, [pc, #96]	@ (80069b8 <TIM_OC5_SetConfig+0xb4>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00f      	beq.n	800697a <TIM_OC5_SetConfig+0x76>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a17      	ldr	r2, [pc, #92]	@ (80069bc <TIM_OC5_SetConfig+0xb8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00b      	beq.n	800697a <TIM_OC5_SetConfig+0x76>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a16      	ldr	r2, [pc, #88]	@ (80069c0 <TIM_OC5_SetConfig+0xbc>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d007      	beq.n	800697a <TIM_OC5_SetConfig+0x76>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a15      	ldr	r2, [pc, #84]	@ (80069c4 <TIM_OC5_SetConfig+0xc0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_OC5_SetConfig+0x76>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a14      	ldr	r2, [pc, #80]	@ (80069c8 <TIM_OC5_SetConfig+0xc4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d109      	bne.n	800698e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	021b      	lsls	r3, r3, #8
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	621a      	str	r2, [r3, #32]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	fffeff8f 	.word	0xfffeff8f
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40010400 	.word	0x40010400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40014400 	.word	0x40014400
 80069c8:	40014800 	.word	0x40014800

080069cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4b22      	ldr	r3, [pc, #136]	@ (8006a80 <TIM_OC6_SetConfig+0xb4>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	051b      	lsls	r3, r3, #20
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a19      	ldr	r2, [pc, #100]	@ (8006a84 <TIM_OC6_SetConfig+0xb8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00f      	beq.n	8006a44 <TIM_OC6_SetConfig+0x78>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a18      	ldr	r2, [pc, #96]	@ (8006a88 <TIM_OC6_SetConfig+0xbc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00b      	beq.n	8006a44 <TIM_OC6_SetConfig+0x78>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a17      	ldr	r2, [pc, #92]	@ (8006a8c <TIM_OC6_SetConfig+0xc0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d007      	beq.n	8006a44 <TIM_OC6_SetConfig+0x78>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a16      	ldr	r2, [pc, #88]	@ (8006a90 <TIM_OC6_SetConfig+0xc4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_OC6_SetConfig+0x78>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a15      	ldr	r2, [pc, #84]	@ (8006a94 <TIM_OC6_SetConfig+0xc8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d109      	bne.n	8006a58 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	029b      	lsls	r3, r3, #10
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	feff8fff 	.word	0xfeff8fff
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40010400 	.word	0x40010400
 8006a8c:	40014000 	.word	0x40014000
 8006a90:	40014400 	.word	0x40014400
 8006a94:	40014800 	.word	0x40014800

08006a98 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4b65      	ldr	r3, [pc, #404]	@ (8006c48 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4b62      	ldr	r3, [pc, #392]	@ (8006c4c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4a5c      	ldr	r2, [pc, #368]	@ (8006c50 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	f000 80ab 	beq.w	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006ae6:	4a5a      	ldr	r2, [pc, #360]	@ (8006c50 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	f200 80a4 	bhi.w	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006aee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006af2:	f000 80a3 	beq.w	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006af6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006afa:	f200 809c 	bhi.w	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006afe:	4a55      	ldr	r2, [pc, #340]	@ (8006c54 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	f000 809b 	beq.w	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b06:	4a53      	ldr	r2, [pc, #332]	@ (8006c54 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	f200 8094 	bhi.w	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b0e:	4a52      	ldr	r2, [pc, #328]	@ (8006c58 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	f000 8093 	beq.w	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b16:	4a50      	ldr	r2, [pc, #320]	@ (8006c58 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	f200 808c 	bhi.w	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b1e:	4a4f      	ldr	r2, [pc, #316]	@ (8006c5c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	f000 808b 	beq.w	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b26:	4a4d      	ldr	r2, [pc, #308]	@ (8006c5c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	f200 8084 	bhi.w	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b2e:	4a4c      	ldr	r2, [pc, #304]	@ (8006c60 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	f000 8083 	beq.w	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b36:	4a4a      	ldr	r2, [pc, #296]	@ (8006c60 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d87c      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b3c:	4a49      	ldr	r2, [pc, #292]	@ (8006c64 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d07c      	beq.n	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b42:	4a48      	ldr	r2, [pc, #288]	@ (8006c64 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d876      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b48:	4a47      	ldr	r2, [pc, #284]	@ (8006c68 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d076      	beq.n	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b4e:	4a46      	ldr	r2, [pc, #280]	@ (8006c68 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d870      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006b58:	d070      	beq.n	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b5a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006b5e:	d86a      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b64:	d06a      	beq.n	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b6a:	d864      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b6c:	2b70      	cmp	r3, #112	@ 0x70
 8006b6e:	d01a      	beq.n	8006ba6 <TIM_SlaveTimer_SetConfig+0x10e>
 8006b70:	2b70      	cmp	r3, #112	@ 0x70
 8006b72:	d860      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b74:	2b60      	cmp	r3, #96	@ 0x60
 8006b76:	d054      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x18a>
 8006b78:	2b60      	cmp	r3, #96	@ 0x60
 8006b7a:	d85c      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b7c:	2b50      	cmp	r3, #80	@ 0x50
 8006b7e:	d046      	beq.n	8006c0e <TIM_SlaveTimer_SetConfig+0x176>
 8006b80:	2b50      	cmp	r3, #80	@ 0x50
 8006b82:	d858      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b84:	2b40      	cmp	r3, #64	@ 0x40
 8006b86:	d019      	beq.n	8006bbc <TIM_SlaveTimer_SetConfig+0x124>
 8006b88:	2b40      	cmp	r3, #64	@ 0x40
 8006b8a:	d854      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b8c:	2b30      	cmp	r3, #48	@ 0x30
 8006b8e:	d055      	beq.n	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b90:	2b30      	cmp	r3, #48	@ 0x30
 8006b92:	d850      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d051      	beq.n	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d84c      	bhi.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d04d      	beq.n	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d04b      	beq.n	8006c3c <TIM_SlaveTimer_SetConfig+0x1a4>
 8006ba4:	e047      	b.n	8006c36 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006bb6:	f000 fa01 	bl	8006fbc <TIM_ETR_SetConfig>
      break;
 8006bba:	e040      	b.n	8006c3e <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b05      	cmp	r3, #5
 8006bc2:	d101      	bne.n	8006bc8 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e03b      	b.n	8006c40 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6a1a      	ldr	r2, [r3, #32]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bee:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	621a      	str	r2, [r3, #32]
      break;
 8006c0c:	e017      	b.n	8006c3e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f000 f89a 	bl	8006d54 <TIM_TI1_ConfigInputStage>
      break;
 8006c20:	e00d      	b.n	8006c3e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f000 f8fc 	bl	8006e2c <TIM_TI2_ConfigInputStage>
      break;
 8006c34:	e003      	b.n	8006c3e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3a:	e000      	b.n	8006c3e <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8006c3c:	bf00      	nop
  }

  return status;
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	ffcfff8f 	.word	0xffcfff8f
 8006c4c:	fffefff8 	.word	0xfffefff8
 8006c50:	00200010 	.word	0x00200010
 8006c54:	00100070 	.word	0x00100070
 8006c58:	00100060 	.word	0x00100060
 8006c5c:	00100050 	.word	0x00100050
 8006c60:	00100040 	.word	0x00100040
 8006c64:	00100030 	.word	0x00100030
 8006c68:	00100020 	.word	0x00100020

08006c6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	f023 0201 	bic.w	r2, r3, #1
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4a28      	ldr	r2, [pc, #160]	@ (8006d38 <TIM_TI1_SetConfig+0xcc>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01b      	beq.n	8006cd2 <TIM_TI1_SetConfig+0x66>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca0:	d017      	beq.n	8006cd2 <TIM_TI1_SetConfig+0x66>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a25      	ldr	r2, [pc, #148]	@ (8006d3c <TIM_TI1_SetConfig+0xd0>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d013      	beq.n	8006cd2 <TIM_TI1_SetConfig+0x66>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4a24      	ldr	r2, [pc, #144]	@ (8006d40 <TIM_TI1_SetConfig+0xd4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00f      	beq.n	8006cd2 <TIM_TI1_SetConfig+0x66>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4a23      	ldr	r2, [pc, #140]	@ (8006d44 <TIM_TI1_SetConfig+0xd8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00b      	beq.n	8006cd2 <TIM_TI1_SetConfig+0x66>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a22      	ldr	r2, [pc, #136]	@ (8006d48 <TIM_TI1_SetConfig+0xdc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d007      	beq.n	8006cd2 <TIM_TI1_SetConfig+0x66>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4a21      	ldr	r2, [pc, #132]	@ (8006d4c <TIM_TI1_SetConfig+0xe0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d003      	beq.n	8006cd2 <TIM_TI1_SetConfig+0x66>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4a20      	ldr	r2, [pc, #128]	@ (8006d50 <TIM_TI1_SetConfig+0xe4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d101      	bne.n	8006cd6 <TIM_TI1_SetConfig+0x6a>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <TIM_TI1_SetConfig+0x6c>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	e003      	b.n	8006cf6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f043 0301 	orr.w	r3, r3, #1
 8006cf4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f023 030a 	bic.w	r3, r3, #10
 8006d10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f003 030a 	and.w	r3, r3, #10
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40010000 	.word	0x40010000
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40010400 	.word	0x40010400
 8006d4c:	40001800 	.word	0x40001800
 8006d50:	40014000 	.word	0x40014000

08006d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f023 0201 	bic.w	r2, r3, #1
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	699b      	ldr	r3, [r3, #24]
 8006d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f023 030a 	bic.w	r3, r3, #10
 8006d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	621a      	str	r2, [r3, #32]
}
 8006da6:	bf00      	nop
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b087      	sub	sp, #28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
 8006dbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	f023 0210 	bic.w	r2, r3, #16
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	031b      	lsls	r3, r3, #12
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e04:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	621a      	str	r2, [r3, #32]
}
 8006e20:	bf00      	nop
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f023 0210 	bic.w	r2, r3, #16
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	031b      	lsls	r3, r3, #12
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	621a      	str	r2, [r3, #32]
}
 8006e80:	bf00      	nop
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f023 0303 	bic.w	r3, r3, #3
 8006eb8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ec8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006edc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	621a      	str	r2, [r3, #32]
}
 8006ef8:	bf00      	nop
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	031b      	lsls	r3, r3, #12
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006f56:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	031b      	lsls	r3, r3, #12
 8006f5c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
	...

08006f80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4b09      	ldr	r3, [pc, #36]	@ (8006fb8 <TIM_ITRx_SetConfig+0x38>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f043 0307 	orr.w	r3, r3, #7
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	609a      	str	r2, [r3, #8]
}
 8006faa:	bf00      	nop
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	ffcfff8f 	.word	0xffcfff8f

08006fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
 8006fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	021a      	lsls	r2, r3, #8
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	609a      	str	r2, [r3, #8]
}
 8006ff0:	bf00      	nop
 8006ff2:	371c      	adds	r7, #28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2201      	movs	r2, #1
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a1a      	ldr	r2, [r3, #32]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	43db      	mvns	r3, r3
 800701e:	401a      	ands	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	fa01 f303 	lsl.w	r3, r1, r3
 8007034:	431a      	orrs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
	...

08007048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e06d      	b.n	800713c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a30      	ldr	r2, [pc, #192]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a2f      	ldr	r2, [pc, #188]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d108      	bne.n	80070a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800709a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a20      	ldr	r2, [pc, #128]	@ (8007148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d022      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d2:	d01d      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007150 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d018      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007154 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d013      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007158 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d00e      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a15      	ldr	r2, [pc, #84]	@ (800714c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d009      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a16      	ldr	r2, [pc, #88]	@ (800715c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d004      	beq.n	8007110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a15      	ldr	r2, [pc, #84]	@ (8007160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10c      	bne.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	4313      	orrs	r3, r2
 8007120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	40010000 	.word	0x40010000
 800714c:	40010400 	.word	0x40010400
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40001800 	.word	0x40001800
 8007160:	40014000 	.word	0x40014000

08007164 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800717c:	2302      	movs	r3, #2
 800717e:	e073      	b.n	8007268 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a19      	ldr	r2, [pc, #100]	@ (8007274 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d004      	beq.n	800721c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a18      	ldr	r2, [pc, #96]	@ (8007278 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d11c      	bne.n	8007256 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007226:	051b      	lsls	r3, r3, #20
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	40010000 	.word	0x40010000
 8007278:	40010400 	.word	0x40010400

0800727c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e042      	b.n	8007350 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d106      	bne.n	80072e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7fa fb8d 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2224      	movs	r2, #36	@ 0x24
 80072e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0201 	bic.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fe94 	bl	8008030 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f825 	bl	8007358 <UART_SetConfig>
 800730e:	4603      	mov	r3, r0
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e01b      	b.n	8007350 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0201 	orr.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 ff13 	bl	8008174 <UART_CheckIdleState>
 800734e:	4603      	mov	r3, r0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800735c:	b092      	sub	sp, #72	@ 0x48
 800735e:	af00      	add	r7, sp, #0
 8007360:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	431a      	orrs	r2, r3
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	431a      	orrs	r2, r3
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	4313      	orrs	r3, r2
 800737e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	4bbe      	ldr	r3, [pc, #760]	@ (8007680 <UART_SetConfig+0x328>)
 8007388:	4013      	ands	r3, r2
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007390:	430b      	orrs	r3, r1
 8007392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4ab3      	ldr	r2, [pc, #716]	@ (8007684 <UART_SetConfig+0x32c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073c0:	4313      	orrs	r3, r2
 80073c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	4baf      	ldr	r3, [pc, #700]	@ (8007688 <UART_SetConfig+0x330>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073d4:	430b      	orrs	r3, r1
 80073d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	f023 010f 	bic.w	r1, r3, #15
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4aa6      	ldr	r2, [pc, #664]	@ (800768c <UART_SetConfig+0x334>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d177      	bne.n	80074e8 <UART_SetConfig+0x190>
 80073f8:	4ba5      	ldr	r3, [pc, #660]	@ (8007690 <UART_SetConfig+0x338>)
 80073fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007400:	2b28      	cmp	r3, #40	@ 0x28
 8007402:	d86d      	bhi.n	80074e0 <UART_SetConfig+0x188>
 8007404:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <UART_SetConfig+0xb4>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	080074b1 	.word	0x080074b1
 8007410:	080074e1 	.word	0x080074e1
 8007414:	080074e1 	.word	0x080074e1
 8007418:	080074e1 	.word	0x080074e1
 800741c:	080074e1 	.word	0x080074e1
 8007420:	080074e1 	.word	0x080074e1
 8007424:	080074e1 	.word	0x080074e1
 8007428:	080074e1 	.word	0x080074e1
 800742c:	080074b9 	.word	0x080074b9
 8007430:	080074e1 	.word	0x080074e1
 8007434:	080074e1 	.word	0x080074e1
 8007438:	080074e1 	.word	0x080074e1
 800743c:	080074e1 	.word	0x080074e1
 8007440:	080074e1 	.word	0x080074e1
 8007444:	080074e1 	.word	0x080074e1
 8007448:	080074e1 	.word	0x080074e1
 800744c:	080074c1 	.word	0x080074c1
 8007450:	080074e1 	.word	0x080074e1
 8007454:	080074e1 	.word	0x080074e1
 8007458:	080074e1 	.word	0x080074e1
 800745c:	080074e1 	.word	0x080074e1
 8007460:	080074e1 	.word	0x080074e1
 8007464:	080074e1 	.word	0x080074e1
 8007468:	080074e1 	.word	0x080074e1
 800746c:	080074c9 	.word	0x080074c9
 8007470:	080074e1 	.word	0x080074e1
 8007474:	080074e1 	.word	0x080074e1
 8007478:	080074e1 	.word	0x080074e1
 800747c:	080074e1 	.word	0x080074e1
 8007480:	080074e1 	.word	0x080074e1
 8007484:	080074e1 	.word	0x080074e1
 8007488:	080074e1 	.word	0x080074e1
 800748c:	080074d1 	.word	0x080074d1
 8007490:	080074e1 	.word	0x080074e1
 8007494:	080074e1 	.word	0x080074e1
 8007498:	080074e1 	.word	0x080074e1
 800749c:	080074e1 	.word	0x080074e1
 80074a0:	080074e1 	.word	0x080074e1
 80074a4:	080074e1 	.word	0x080074e1
 80074a8:	080074e1 	.word	0x080074e1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e326      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80074b8:	2304      	movs	r3, #4
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e322      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80074c0:	2308      	movs	r3, #8
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e31e      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80074c8:	2310      	movs	r3, #16
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e31a      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80074d0:	2320      	movs	r3, #32
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e316      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80074d8:	2340      	movs	r3, #64	@ 0x40
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e312      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80074e0:	2380      	movs	r3, #128	@ 0x80
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e6:	e30e      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a69      	ldr	r2, [pc, #420]	@ (8007694 <UART_SetConfig+0x33c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d130      	bne.n	8007554 <UART_SetConfig+0x1fc>
 80074f2:	4b67      	ldr	r3, [pc, #412]	@ (8007690 <UART_SetConfig+0x338>)
 80074f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	d826      	bhi.n	800754c <UART_SetConfig+0x1f4>
 80074fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007504 <UART_SetConfig+0x1ac>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	0800751d 	.word	0x0800751d
 8007508:	08007525 	.word	0x08007525
 800750c:	0800752d 	.word	0x0800752d
 8007510:	08007535 	.word	0x08007535
 8007514:	0800753d 	.word	0x0800753d
 8007518:	08007545 	.word	0x08007545
 800751c:	2300      	movs	r3, #0
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e2f0      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007524:	2304      	movs	r3, #4
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e2ec      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800752c:	2308      	movs	r3, #8
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e2e8      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007534:	2310      	movs	r3, #16
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e2e4      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800753c:	2320      	movs	r3, #32
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e2e0      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007544:	2340      	movs	r3, #64	@ 0x40
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e2dc      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800754c:	2380      	movs	r3, #128	@ 0x80
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e2d8      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a4f      	ldr	r2, [pc, #316]	@ (8007698 <UART_SetConfig+0x340>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d130      	bne.n	80075c0 <UART_SetConfig+0x268>
 800755e:	4b4c      	ldr	r3, [pc, #304]	@ (8007690 <UART_SetConfig+0x338>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	2b05      	cmp	r3, #5
 8007568:	d826      	bhi.n	80075b8 <UART_SetConfig+0x260>
 800756a:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <UART_SetConfig+0x218>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	08007589 	.word	0x08007589
 8007574:	08007591 	.word	0x08007591
 8007578:	08007599 	.word	0x08007599
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075b1 	.word	0x080075b1
 8007588:	2300      	movs	r3, #0
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e2ba      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007590:	2304      	movs	r3, #4
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e2b6      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007598:	2308      	movs	r3, #8
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e2b2      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e2ae      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80075a8:	2320      	movs	r3, #32
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e2aa      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80075b0:	2340      	movs	r3, #64	@ 0x40
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e2a6      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80075b8:	2380      	movs	r3, #128	@ 0x80
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e2a2      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a35      	ldr	r2, [pc, #212]	@ (800769c <UART_SetConfig+0x344>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d130      	bne.n	800762c <UART_SetConfig+0x2d4>
 80075ca:	4b31      	ldr	r3, [pc, #196]	@ (8007690 <UART_SetConfig+0x338>)
 80075cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	d826      	bhi.n	8007624 <UART_SetConfig+0x2cc>
 80075d6:	a201      	add	r2, pc, #4	@ (adr r2, 80075dc <UART_SetConfig+0x284>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	080075f5 	.word	0x080075f5
 80075e0:	080075fd 	.word	0x080075fd
 80075e4:	08007605 	.word	0x08007605
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007615 	.word	0x08007615
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	2300      	movs	r3, #0
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e284      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80075fc:	2304      	movs	r3, #4
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e280      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007604:	2308      	movs	r3, #8
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e27c      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800760c:	2310      	movs	r3, #16
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e278      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007614:	2320      	movs	r3, #32
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e274      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800761c:	2340      	movs	r3, #64	@ 0x40
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e270      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007624:	2380      	movs	r3, #128	@ 0x80
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e26c      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1b      	ldr	r2, [pc, #108]	@ (80076a0 <UART_SetConfig+0x348>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d142      	bne.n	80076bc <UART_SetConfig+0x364>
 8007636:	4b16      	ldr	r3, [pc, #88]	@ (8007690 <UART_SetConfig+0x338>)
 8007638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	2b05      	cmp	r3, #5
 8007640:	d838      	bhi.n	80076b4 <UART_SetConfig+0x35c>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <UART_SetConfig+0x2f0>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007661 	.word	0x08007661
 800764c:	08007669 	.word	0x08007669
 8007650:	08007671 	.word	0x08007671
 8007654:	08007679 	.word	0x08007679
 8007658:	080076a5 	.word	0x080076a5
 800765c:	080076ad 	.word	0x080076ad
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007666:	e24e      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007668:	2304      	movs	r3, #4
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800766e:	e24a      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007670:	2308      	movs	r3, #8
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007676:	e246      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007678:	2310      	movs	r3, #16
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800767e:	e242      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007680:	cfff69f3 	.word	0xcfff69f3
 8007684:	58000c00 	.word	0x58000c00
 8007688:	11fff4ff 	.word	0x11fff4ff
 800768c:	40011000 	.word	0x40011000
 8007690:	58024400 	.word	0x58024400
 8007694:	40004400 	.word	0x40004400
 8007698:	40004800 	.word	0x40004800
 800769c:	40004c00 	.word	0x40004c00
 80076a0:	40005000 	.word	0x40005000
 80076a4:	2320      	movs	r3, #32
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076aa:	e22c      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80076ac:	2340      	movs	r3, #64	@ 0x40
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e228      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80076b4:	2380      	movs	r3, #128	@ 0x80
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ba:	e224      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4ab1      	ldr	r2, [pc, #708]	@ (8007988 <UART_SetConfig+0x630>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d176      	bne.n	80077b4 <UART_SetConfig+0x45c>
 80076c6:	4bb1      	ldr	r3, [pc, #708]	@ (800798c <UART_SetConfig+0x634>)
 80076c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076ce:	2b28      	cmp	r3, #40	@ 0x28
 80076d0:	d86c      	bhi.n	80077ac <UART_SetConfig+0x454>
 80076d2:	a201      	add	r2, pc, #4	@ (adr r2, 80076d8 <UART_SetConfig+0x380>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	0800777d 	.word	0x0800777d
 80076dc:	080077ad 	.word	0x080077ad
 80076e0:	080077ad 	.word	0x080077ad
 80076e4:	080077ad 	.word	0x080077ad
 80076e8:	080077ad 	.word	0x080077ad
 80076ec:	080077ad 	.word	0x080077ad
 80076f0:	080077ad 	.word	0x080077ad
 80076f4:	080077ad 	.word	0x080077ad
 80076f8:	08007785 	.word	0x08007785
 80076fc:	080077ad 	.word	0x080077ad
 8007700:	080077ad 	.word	0x080077ad
 8007704:	080077ad 	.word	0x080077ad
 8007708:	080077ad 	.word	0x080077ad
 800770c:	080077ad 	.word	0x080077ad
 8007710:	080077ad 	.word	0x080077ad
 8007714:	080077ad 	.word	0x080077ad
 8007718:	0800778d 	.word	0x0800778d
 800771c:	080077ad 	.word	0x080077ad
 8007720:	080077ad 	.word	0x080077ad
 8007724:	080077ad 	.word	0x080077ad
 8007728:	080077ad 	.word	0x080077ad
 800772c:	080077ad 	.word	0x080077ad
 8007730:	080077ad 	.word	0x080077ad
 8007734:	080077ad 	.word	0x080077ad
 8007738:	08007795 	.word	0x08007795
 800773c:	080077ad 	.word	0x080077ad
 8007740:	080077ad 	.word	0x080077ad
 8007744:	080077ad 	.word	0x080077ad
 8007748:	080077ad 	.word	0x080077ad
 800774c:	080077ad 	.word	0x080077ad
 8007750:	080077ad 	.word	0x080077ad
 8007754:	080077ad 	.word	0x080077ad
 8007758:	0800779d 	.word	0x0800779d
 800775c:	080077ad 	.word	0x080077ad
 8007760:	080077ad 	.word	0x080077ad
 8007764:	080077ad 	.word	0x080077ad
 8007768:	080077ad 	.word	0x080077ad
 800776c:	080077ad 	.word	0x080077ad
 8007770:	080077ad 	.word	0x080077ad
 8007774:	080077ad 	.word	0x080077ad
 8007778:	080077a5 	.word	0x080077a5
 800777c:	2301      	movs	r3, #1
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e1c0      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007784:	2304      	movs	r3, #4
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e1bc      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800778c:	2308      	movs	r3, #8
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e1b8      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007794:	2310      	movs	r3, #16
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e1b4      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800779c:	2320      	movs	r3, #32
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e1b0      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80077a4:	2340      	movs	r3, #64	@ 0x40
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077aa:	e1ac      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80077ac:	2380      	movs	r3, #128	@ 0x80
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b2:	e1a8      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a75      	ldr	r2, [pc, #468]	@ (8007990 <UART_SetConfig+0x638>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d130      	bne.n	8007820 <UART_SetConfig+0x4c8>
 80077be:	4b73      	ldr	r3, [pc, #460]	@ (800798c <UART_SetConfig+0x634>)
 80077c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d826      	bhi.n	8007818 <UART_SetConfig+0x4c0>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <UART_SetConfig+0x478>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077e9 	.word	0x080077e9
 80077d4:	080077f1 	.word	0x080077f1
 80077d8:	080077f9 	.word	0x080077f9
 80077dc:	08007801 	.word	0x08007801
 80077e0:	08007809 	.word	0x08007809
 80077e4:	08007811 	.word	0x08007811
 80077e8:	2300      	movs	r3, #0
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e18a      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80077f0:	2304      	movs	r3, #4
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e186      	b.n	8007b06 <UART_SetConfig+0x7ae>
 80077f8:	2308      	movs	r3, #8
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e182      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007800:	2310      	movs	r3, #16
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007806:	e17e      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007808:	2320      	movs	r3, #32
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e17a      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007810:	2340      	movs	r3, #64	@ 0x40
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e176      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007818:	2380      	movs	r3, #128	@ 0x80
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e172      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a5b      	ldr	r2, [pc, #364]	@ (8007994 <UART_SetConfig+0x63c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d130      	bne.n	800788c <UART_SetConfig+0x534>
 800782a:	4b58      	ldr	r3, [pc, #352]	@ (800798c <UART_SetConfig+0x634>)
 800782c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	2b05      	cmp	r3, #5
 8007834:	d826      	bhi.n	8007884 <UART_SetConfig+0x52c>
 8007836:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <UART_SetConfig+0x4e4>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007855 	.word	0x08007855
 8007840:	0800785d 	.word	0x0800785d
 8007844:	08007865 	.word	0x08007865
 8007848:	0800786d 	.word	0x0800786d
 800784c:	08007875 	.word	0x08007875
 8007850:	0800787d 	.word	0x0800787d
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e154      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800785c:	2304      	movs	r3, #4
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007862:	e150      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007864:	2308      	movs	r3, #8
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e14c      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e148      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007874:	2320      	movs	r3, #32
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e144      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800787c:	2340      	movs	r3, #64	@ 0x40
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e140      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007884:	2380      	movs	r3, #128	@ 0x80
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e13c      	b.n	8007b06 <UART_SetConfig+0x7ae>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a41      	ldr	r2, [pc, #260]	@ (8007998 <UART_SetConfig+0x640>)
 8007892:	4293      	cmp	r3, r2
 8007894:	f040 8082 	bne.w	800799c <UART_SetConfig+0x644>
 8007898:	4b3c      	ldr	r3, [pc, #240]	@ (800798c <UART_SetConfig+0x634>)
 800789a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078a0:	2b28      	cmp	r3, #40	@ 0x28
 80078a2:	d86d      	bhi.n	8007980 <UART_SetConfig+0x628>
 80078a4:	a201      	add	r2, pc, #4	@ (adr r2, 80078ac <UART_SetConfig+0x554>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	08007951 	.word	0x08007951
 80078b0:	08007981 	.word	0x08007981
 80078b4:	08007981 	.word	0x08007981
 80078b8:	08007981 	.word	0x08007981
 80078bc:	08007981 	.word	0x08007981
 80078c0:	08007981 	.word	0x08007981
 80078c4:	08007981 	.word	0x08007981
 80078c8:	08007981 	.word	0x08007981
 80078cc:	08007959 	.word	0x08007959
 80078d0:	08007981 	.word	0x08007981
 80078d4:	08007981 	.word	0x08007981
 80078d8:	08007981 	.word	0x08007981
 80078dc:	08007981 	.word	0x08007981
 80078e0:	08007981 	.word	0x08007981
 80078e4:	08007981 	.word	0x08007981
 80078e8:	08007981 	.word	0x08007981
 80078ec:	08007961 	.word	0x08007961
 80078f0:	08007981 	.word	0x08007981
 80078f4:	08007981 	.word	0x08007981
 80078f8:	08007981 	.word	0x08007981
 80078fc:	08007981 	.word	0x08007981
 8007900:	08007981 	.word	0x08007981
 8007904:	08007981 	.word	0x08007981
 8007908:	08007981 	.word	0x08007981
 800790c:	08007969 	.word	0x08007969
 8007910:	08007981 	.word	0x08007981
 8007914:	08007981 	.word	0x08007981
 8007918:	08007981 	.word	0x08007981
 800791c:	08007981 	.word	0x08007981
 8007920:	08007981 	.word	0x08007981
 8007924:	08007981 	.word	0x08007981
 8007928:	08007981 	.word	0x08007981
 800792c:	08007971 	.word	0x08007971
 8007930:	08007981 	.word	0x08007981
 8007934:	08007981 	.word	0x08007981
 8007938:	08007981 	.word	0x08007981
 800793c:	08007981 	.word	0x08007981
 8007940:	08007981 	.word	0x08007981
 8007944:	08007981 	.word	0x08007981
 8007948:	08007981 	.word	0x08007981
 800794c:	08007979 	.word	0x08007979
 8007950:	2301      	movs	r3, #1
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e0d6      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007958:	2304      	movs	r3, #4
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e0d2      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007960:	2308      	movs	r3, #8
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e0ce      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007968:	2310      	movs	r3, #16
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e0ca      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007970:	2320      	movs	r3, #32
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e0c6      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007978:	2340      	movs	r3, #64	@ 0x40
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797e:	e0c2      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007980:	2380      	movs	r3, #128	@ 0x80
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007986:	e0be      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007988:	40011400 	.word	0x40011400
 800798c:	58024400 	.word	0x58024400
 8007990:	40007800 	.word	0x40007800
 8007994:	40007c00 	.word	0x40007c00
 8007998:	40011800 	.word	0x40011800
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4aad      	ldr	r2, [pc, #692]	@ (8007c58 <UART_SetConfig+0x900>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d176      	bne.n	8007a94 <UART_SetConfig+0x73c>
 80079a6:	4bad      	ldr	r3, [pc, #692]	@ (8007c5c <UART_SetConfig+0x904>)
 80079a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079ae:	2b28      	cmp	r3, #40	@ 0x28
 80079b0:	d86c      	bhi.n	8007a8c <UART_SetConfig+0x734>
 80079b2:	a201      	add	r2, pc, #4	@ (adr r2, 80079b8 <UART_SetConfig+0x660>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	08007a5d 	.word	0x08007a5d
 80079bc:	08007a8d 	.word	0x08007a8d
 80079c0:	08007a8d 	.word	0x08007a8d
 80079c4:	08007a8d 	.word	0x08007a8d
 80079c8:	08007a8d 	.word	0x08007a8d
 80079cc:	08007a8d 	.word	0x08007a8d
 80079d0:	08007a8d 	.word	0x08007a8d
 80079d4:	08007a8d 	.word	0x08007a8d
 80079d8:	08007a65 	.word	0x08007a65
 80079dc:	08007a8d 	.word	0x08007a8d
 80079e0:	08007a8d 	.word	0x08007a8d
 80079e4:	08007a8d 	.word	0x08007a8d
 80079e8:	08007a8d 	.word	0x08007a8d
 80079ec:	08007a8d 	.word	0x08007a8d
 80079f0:	08007a8d 	.word	0x08007a8d
 80079f4:	08007a8d 	.word	0x08007a8d
 80079f8:	08007a6d 	.word	0x08007a6d
 80079fc:	08007a8d 	.word	0x08007a8d
 8007a00:	08007a8d 	.word	0x08007a8d
 8007a04:	08007a8d 	.word	0x08007a8d
 8007a08:	08007a8d 	.word	0x08007a8d
 8007a0c:	08007a8d 	.word	0x08007a8d
 8007a10:	08007a8d 	.word	0x08007a8d
 8007a14:	08007a8d 	.word	0x08007a8d
 8007a18:	08007a75 	.word	0x08007a75
 8007a1c:	08007a8d 	.word	0x08007a8d
 8007a20:	08007a8d 	.word	0x08007a8d
 8007a24:	08007a8d 	.word	0x08007a8d
 8007a28:	08007a8d 	.word	0x08007a8d
 8007a2c:	08007a8d 	.word	0x08007a8d
 8007a30:	08007a8d 	.word	0x08007a8d
 8007a34:	08007a8d 	.word	0x08007a8d
 8007a38:	08007a7d 	.word	0x08007a7d
 8007a3c:	08007a8d 	.word	0x08007a8d
 8007a40:	08007a8d 	.word	0x08007a8d
 8007a44:	08007a8d 	.word	0x08007a8d
 8007a48:	08007a8d 	.word	0x08007a8d
 8007a4c:	08007a8d 	.word	0x08007a8d
 8007a50:	08007a8d 	.word	0x08007a8d
 8007a54:	08007a8d 	.word	0x08007a8d
 8007a58:	08007a85 	.word	0x08007a85
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a62:	e050      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007a64:	2304      	movs	r3, #4
 8007a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6a:	e04c      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007a6c:	2308      	movs	r3, #8
 8007a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a72:	e048      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007a74:	2310      	movs	r3, #16
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e044      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007a7c:	2320      	movs	r3, #32
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e040      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007a84:	2340      	movs	r3, #64	@ 0x40
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e03c      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007a8c:	2380      	movs	r3, #128	@ 0x80
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a92:	e038      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a71      	ldr	r2, [pc, #452]	@ (8007c60 <UART_SetConfig+0x908>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d130      	bne.n	8007b00 <UART_SetConfig+0x7a8>
 8007a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8007c5c <UART_SetConfig+0x904>)
 8007aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	d826      	bhi.n	8007af8 <UART_SetConfig+0x7a0>
 8007aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab0 <UART_SetConfig+0x758>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ac9 	.word	0x08007ac9
 8007ab4:	08007ad1 	.word	0x08007ad1
 8007ab8:	08007ad9 	.word	0x08007ad9
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007ae9 	.word	0x08007ae9
 8007ac4:	08007af1 	.word	0x08007af1
 8007ac8:	2302      	movs	r3, #2
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e01a      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e016      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007ad8:	2308      	movs	r3, #8
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e012      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007ae0:	2310      	movs	r3, #16
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e00e      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007ae8:	2320      	movs	r3, #32
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e00a      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007af0:	2340      	movs	r3, #64	@ 0x40
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e006      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007af8:	2380      	movs	r3, #128	@ 0x80
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e002      	b.n	8007b06 <UART_SetConfig+0x7ae>
 8007b00:	2380      	movs	r3, #128	@ 0x80
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a55      	ldr	r2, [pc, #340]	@ (8007c60 <UART_SetConfig+0x908>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	f040 80f8 	bne.w	8007d02 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	dc46      	bgt.n	8007ba8 <UART_SetConfig+0x850>
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	db75      	blt.n	8007c0a <UART_SetConfig+0x8b2>
 8007b1e:	3b02      	subs	r3, #2
 8007b20:	2b1e      	cmp	r3, #30
 8007b22:	d872      	bhi.n	8007c0a <UART_SetConfig+0x8b2>
 8007b24:	a201      	add	r2, pc, #4	@ (adr r2, 8007b2c <UART_SetConfig+0x7d4>)
 8007b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2a:	bf00      	nop
 8007b2c:	08007baf 	.word	0x08007baf
 8007b30:	08007c0b 	.word	0x08007c0b
 8007b34:	08007bb7 	.word	0x08007bb7
 8007b38:	08007c0b 	.word	0x08007c0b
 8007b3c:	08007c0b 	.word	0x08007c0b
 8007b40:	08007c0b 	.word	0x08007c0b
 8007b44:	08007bc7 	.word	0x08007bc7
 8007b48:	08007c0b 	.word	0x08007c0b
 8007b4c:	08007c0b 	.word	0x08007c0b
 8007b50:	08007c0b 	.word	0x08007c0b
 8007b54:	08007c0b 	.word	0x08007c0b
 8007b58:	08007c0b 	.word	0x08007c0b
 8007b5c:	08007c0b 	.word	0x08007c0b
 8007b60:	08007c0b 	.word	0x08007c0b
 8007b64:	08007bd7 	.word	0x08007bd7
 8007b68:	08007c0b 	.word	0x08007c0b
 8007b6c:	08007c0b 	.word	0x08007c0b
 8007b70:	08007c0b 	.word	0x08007c0b
 8007b74:	08007c0b 	.word	0x08007c0b
 8007b78:	08007c0b 	.word	0x08007c0b
 8007b7c:	08007c0b 	.word	0x08007c0b
 8007b80:	08007c0b 	.word	0x08007c0b
 8007b84:	08007c0b 	.word	0x08007c0b
 8007b88:	08007c0b 	.word	0x08007c0b
 8007b8c:	08007c0b 	.word	0x08007c0b
 8007b90:	08007c0b 	.word	0x08007c0b
 8007b94:	08007c0b 	.word	0x08007c0b
 8007b98:	08007c0b 	.word	0x08007c0b
 8007b9c:	08007c0b 	.word	0x08007c0b
 8007ba0:	08007c0b 	.word	0x08007c0b
 8007ba4:	08007bfd 	.word	0x08007bfd
 8007ba8:	2b40      	cmp	r3, #64	@ 0x40
 8007baa:	d02a      	beq.n	8007c02 <UART_SetConfig+0x8aa>
 8007bac:	e02d      	b.n	8007c0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007bae:	f7fc fdcb 	bl	8004748 <HAL_RCCEx_GetD3PCLK1Freq>
 8007bb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007bb4:	e02f      	b.n	8007c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fc fdda 	bl	8004774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bc4:	e027      	b.n	8007c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bc6:	f107 0318 	add.w	r3, r7, #24
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fc ff26 	bl	8004a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bd4:	e01f      	b.n	8007c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bd6:	4b21      	ldr	r3, [pc, #132]	@ (8007c5c <UART_SetConfig+0x904>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0320 	and.w	r3, r3, #32
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007be2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c5c <UART_SetConfig+0x904>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	08db      	lsrs	r3, r3, #3
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	4a1d      	ldr	r2, [pc, #116]	@ (8007c64 <UART_SetConfig+0x90c>)
 8007bee:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bf4:	e00f      	b.n	8007c16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8007c64 <UART_SetConfig+0x90c>)
 8007bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bfa:	e00c      	b.n	8007c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8007c68 <UART_SetConfig+0x910>)
 8007bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c00:	e009      	b.n	8007c16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c08:	e005      	b.n	8007c16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 81ee 	beq.w	8007ffa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c22:	4a12      	ldr	r2, [pc, #72]	@ (8007c6c <UART_SetConfig+0x914>)
 8007c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c30:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	4413      	add	r3, r2
 8007c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d305      	bcc.n	8007c4e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d910      	bls.n	8007c70 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c54:	e1d1      	b.n	8007ffa <UART_SetConfig+0xca2>
 8007c56:	bf00      	nop
 8007c58:	40011c00 	.word	0x40011c00
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	58000c00 	.word	0x58000c00
 8007c64:	03d09000 	.word	0x03d09000
 8007c68:	003d0900 	.word	0x003d0900
 8007c6c:	080086f8 	.word	0x080086f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c72:	2200      	movs	r2, #0
 8007c74:	60bb      	str	r3, [r7, #8]
 8007c76:	60fa      	str	r2, [r7, #12]
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7c:	4ac0      	ldr	r2, [pc, #768]	@ (8007f80 <UART_SetConfig+0xc28>)
 8007c7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	2200      	movs	r2, #0
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	607a      	str	r2, [r7, #4]
 8007c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c92:	f7f8 fb2d 	bl	80002f0 <__aeabi_uldivmod>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	f04f 0200 	mov.w	r2, #0
 8007ca2:	f04f 0300 	mov.w	r3, #0
 8007ca6:	020b      	lsls	r3, r1, #8
 8007ca8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cac:	0202      	lsls	r2, r0, #8
 8007cae:	6979      	ldr	r1, [r7, #20]
 8007cb0:	6849      	ldr	r1, [r1, #4]
 8007cb2:	0849      	lsrs	r1, r1, #1
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	4605      	mov	r5, r0
 8007cba:	eb12 0804 	adds.w	r8, r2, r4
 8007cbe:	eb43 0905 	adc.w	r9, r3, r5
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	469a      	mov	sl, r3
 8007cca:	4693      	mov	fp, r2
 8007ccc:	4652      	mov	r2, sl
 8007cce:	465b      	mov	r3, fp
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	f7f8 fb0c 	bl	80002f0 <__aeabi_uldivmod>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	460b      	mov	r3, r1
 8007cdc:	4613      	mov	r3, r2
 8007cde:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ce6:	d308      	bcc.n	8007cfa <UART_SetConfig+0x9a2>
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cee:	d204      	bcs.n	8007cfa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cf6:	60da      	str	r2, [r3, #12]
 8007cf8:	e17f      	b.n	8007ffa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d00:	e17b      	b.n	8007ffa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d0a:	f040 80bd 	bne.w	8007e88 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007d0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	dc48      	bgt.n	8007da8 <UART_SetConfig+0xa50>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	db7b      	blt.n	8007e12 <UART_SetConfig+0xaba>
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d879      	bhi.n	8007e12 <UART_SetConfig+0xaba>
 8007d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d24 <UART_SetConfig+0x9cc>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007daf 	.word	0x08007daf
 8007d28:	08007db7 	.word	0x08007db7
 8007d2c:	08007e13 	.word	0x08007e13
 8007d30:	08007e13 	.word	0x08007e13
 8007d34:	08007dbf 	.word	0x08007dbf
 8007d38:	08007e13 	.word	0x08007e13
 8007d3c:	08007e13 	.word	0x08007e13
 8007d40:	08007e13 	.word	0x08007e13
 8007d44:	08007dcf 	.word	0x08007dcf
 8007d48:	08007e13 	.word	0x08007e13
 8007d4c:	08007e13 	.word	0x08007e13
 8007d50:	08007e13 	.word	0x08007e13
 8007d54:	08007e13 	.word	0x08007e13
 8007d58:	08007e13 	.word	0x08007e13
 8007d5c:	08007e13 	.word	0x08007e13
 8007d60:	08007e13 	.word	0x08007e13
 8007d64:	08007ddf 	.word	0x08007ddf
 8007d68:	08007e13 	.word	0x08007e13
 8007d6c:	08007e13 	.word	0x08007e13
 8007d70:	08007e13 	.word	0x08007e13
 8007d74:	08007e13 	.word	0x08007e13
 8007d78:	08007e13 	.word	0x08007e13
 8007d7c:	08007e13 	.word	0x08007e13
 8007d80:	08007e13 	.word	0x08007e13
 8007d84:	08007e13 	.word	0x08007e13
 8007d88:	08007e13 	.word	0x08007e13
 8007d8c:	08007e13 	.word	0x08007e13
 8007d90:	08007e13 	.word	0x08007e13
 8007d94:	08007e13 	.word	0x08007e13
 8007d98:	08007e13 	.word	0x08007e13
 8007d9c:	08007e13 	.word	0x08007e13
 8007da0:	08007e13 	.word	0x08007e13
 8007da4:	08007e05 	.word	0x08007e05
 8007da8:	2b40      	cmp	r3, #64	@ 0x40
 8007daa:	d02e      	beq.n	8007e0a <UART_SetConfig+0xab2>
 8007dac:	e031      	b.n	8007e12 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dae:	f7fb fae1 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 8007db2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007db4:	e033      	b.n	8007e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007db6:	f7fb faf3 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8007dba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dbc:	e02f      	b.n	8007e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fc fcd6 	bl	8004774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dcc:	e027      	b.n	8007e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dce:	f107 0318 	add.w	r3, r7, #24
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fc fe22 	bl	8004a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ddc:	e01f      	b.n	8007e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dde:	4b69      	ldr	r3, [pc, #420]	@ (8007f84 <UART_SetConfig+0xc2c>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007dea:	4b66      	ldr	r3, [pc, #408]	@ (8007f84 <UART_SetConfig+0xc2c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	08db      	lsrs	r3, r3, #3
 8007df0:	f003 0303 	and.w	r3, r3, #3
 8007df4:	4a64      	ldr	r2, [pc, #400]	@ (8007f88 <UART_SetConfig+0xc30>)
 8007df6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007dfc:	e00f      	b.n	8007e1e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007dfe:	4b62      	ldr	r3, [pc, #392]	@ (8007f88 <UART_SetConfig+0xc30>)
 8007e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e02:	e00c      	b.n	8007e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e04:	4b61      	ldr	r3, [pc, #388]	@ (8007f8c <UART_SetConfig+0xc34>)
 8007e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e08:	e009      	b.n	8007e1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e10:	e005      	b.n	8007e1e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 80ea 	beq.w	8007ffa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2a:	4a55      	ldr	r2, [pc, #340]	@ (8007f80 <UART_SetConfig+0xc28>)
 8007e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e30:	461a      	mov	r2, r3
 8007e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e38:	005a      	lsls	r2, r3, #1
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	441a      	add	r2, r3
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4e:	2b0f      	cmp	r3, #15
 8007e50:	d916      	bls.n	8007e80 <UART_SetConfig+0xb28>
 8007e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e58:	d212      	bcs.n	8007e80 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f023 030f 	bic.w	r3, r3, #15
 8007e62:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	f003 0307 	and.w	r3, r3, #7
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e72:	4313      	orrs	r3, r2
 8007e74:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007e7c:	60da      	str	r2, [r3, #12]
 8007e7e:	e0bc      	b.n	8007ffa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007e86:	e0b8      	b.n	8007ffa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e8c:	2b20      	cmp	r3, #32
 8007e8e:	dc4b      	bgt.n	8007f28 <UART_SetConfig+0xbd0>
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f2c0 8087 	blt.w	8007fa4 <UART_SetConfig+0xc4c>
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	f200 8084 	bhi.w	8007fa4 <UART_SetConfig+0xc4c>
 8007e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea4 <UART_SetConfig+0xb4c>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007f2f 	.word	0x08007f2f
 8007ea8:	08007f37 	.word	0x08007f37
 8007eac:	08007fa5 	.word	0x08007fa5
 8007eb0:	08007fa5 	.word	0x08007fa5
 8007eb4:	08007f3f 	.word	0x08007f3f
 8007eb8:	08007fa5 	.word	0x08007fa5
 8007ebc:	08007fa5 	.word	0x08007fa5
 8007ec0:	08007fa5 	.word	0x08007fa5
 8007ec4:	08007f4f 	.word	0x08007f4f
 8007ec8:	08007fa5 	.word	0x08007fa5
 8007ecc:	08007fa5 	.word	0x08007fa5
 8007ed0:	08007fa5 	.word	0x08007fa5
 8007ed4:	08007fa5 	.word	0x08007fa5
 8007ed8:	08007fa5 	.word	0x08007fa5
 8007edc:	08007fa5 	.word	0x08007fa5
 8007ee0:	08007fa5 	.word	0x08007fa5
 8007ee4:	08007f5f 	.word	0x08007f5f
 8007ee8:	08007fa5 	.word	0x08007fa5
 8007eec:	08007fa5 	.word	0x08007fa5
 8007ef0:	08007fa5 	.word	0x08007fa5
 8007ef4:	08007fa5 	.word	0x08007fa5
 8007ef8:	08007fa5 	.word	0x08007fa5
 8007efc:	08007fa5 	.word	0x08007fa5
 8007f00:	08007fa5 	.word	0x08007fa5
 8007f04:	08007fa5 	.word	0x08007fa5
 8007f08:	08007fa5 	.word	0x08007fa5
 8007f0c:	08007fa5 	.word	0x08007fa5
 8007f10:	08007fa5 	.word	0x08007fa5
 8007f14:	08007fa5 	.word	0x08007fa5
 8007f18:	08007fa5 	.word	0x08007fa5
 8007f1c:	08007fa5 	.word	0x08007fa5
 8007f20:	08007fa5 	.word	0x08007fa5
 8007f24:	08007f97 	.word	0x08007f97
 8007f28:	2b40      	cmp	r3, #64	@ 0x40
 8007f2a:	d037      	beq.n	8007f9c <UART_SetConfig+0xc44>
 8007f2c:	e03a      	b.n	8007fa4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f2e:	f7fb fa21 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 8007f32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f34:	e03c      	b.n	8007fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f36:	f7fb fa33 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8007f3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f3c:	e038      	b.n	8007fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fc fc16 	bl	8004774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f4c:	e030      	b.n	8007fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f4e:	f107 0318 	add.w	r3, r7, #24
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fc fd62 	bl	8004a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f5c:	e028      	b.n	8007fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f5e:	4b09      	ldr	r3, [pc, #36]	@ (8007f84 <UART_SetConfig+0xc2c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d012      	beq.n	8007f90 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f6a:	4b06      	ldr	r3, [pc, #24]	@ (8007f84 <UART_SetConfig+0xc2c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	08db      	lsrs	r3, r3, #3
 8007f70:	f003 0303 	and.w	r3, r3, #3
 8007f74:	4a04      	ldr	r2, [pc, #16]	@ (8007f88 <UART_SetConfig+0xc30>)
 8007f76:	fa22 f303 	lsr.w	r3, r2, r3
 8007f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f7c:	e018      	b.n	8007fb0 <UART_SetConfig+0xc58>
 8007f7e:	bf00      	nop
 8007f80:	080086f8 	.word	0x080086f8
 8007f84:	58024400 	.word	0x58024400
 8007f88:	03d09000 	.word	0x03d09000
 8007f8c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007f90:	4b24      	ldr	r3, [pc, #144]	@ (8008024 <UART_SetConfig+0xccc>)
 8007f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f94:	e00c      	b.n	8007fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f96:	4b24      	ldr	r3, [pc, #144]	@ (8008028 <UART_SetConfig+0xcd0>)
 8007f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9a:	e009      	b.n	8007fb0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fa2:	e005      	b.n	8007fb0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007fae:	bf00      	nop
    }

    if (pclk != 0U)
 8007fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d021      	beq.n	8007ffa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fba:	4a1c      	ldr	r2, [pc, #112]	@ (800802c <UART_SetConfig+0xcd4>)
 8007fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	085b      	lsrs	r3, r3, #1
 8007fce:	441a      	add	r2, r3
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fdc:	2b0f      	cmp	r3, #15
 8007fde:	d909      	bls.n	8007ff4 <UART_SetConfig+0xc9c>
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fe6:	d205      	bcs.n	8007ff4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60da      	str	r2, [r3, #12]
 8007ff2:	e002      	b.n	8007ffa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2201      	movs	r2, #1
 8008006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2200      	movs	r2, #0
 800800e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2200      	movs	r2, #0
 8008014:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008016:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800801a:	4618      	mov	r0, r3
 800801c:	3748      	adds	r7, #72	@ 0x48
 800801e:	46bd      	mov	sp, r7
 8008020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008024:	03d09000 	.word	0x03d09000
 8008028:	003d0900 	.word	0x003d0900
 800802c:	080086f8 	.word	0x080086f8

08008030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00a      	beq.n	800809e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01a      	beq.n	8008146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800812a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800812e:	d10a      	bne.n	8008146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	605a      	str	r2, [r3, #4]
  }
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b098      	sub	sp, #96	@ 0x60
 8008178:	af02      	add	r7, sp, #8
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008184:	f7f9 fe24 	bl	8001dd0 <HAL_GetTick>
 8008188:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b08      	cmp	r3, #8
 8008196:	d12f      	bne.n	80081f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008198:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081a0:	2200      	movs	r2, #0
 80081a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f88e 	bl	80082c8 <UART_WaitOnFlagUntilTimeout>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d022      	beq.n	80081f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	461a      	mov	r2, r3
 80081ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081d8:	e841 2300 	strex	r3, r2, [r1]
 80081dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1e6      	bne.n	80081b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e063      	b.n	80082c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0304 	and.w	r3, r3, #4
 8008202:	2b04      	cmp	r3, #4
 8008204:	d149      	bne.n	800829a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008206:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800820e:	2200      	movs	r2, #0
 8008210:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f857 	bl	80082c8 <UART_WaitOnFlagUntilTimeout>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d03c      	beq.n	800829a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	623b      	str	r3, [r7, #32]
   return(result);
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008234:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800823e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008240:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800824c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e6      	bne.n	8008220 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	60fb      	str	r3, [r7, #12]
   return(result);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f023 0301 	bic.w	r3, r3, #1
 8008268:	64bb      	str	r3, [r7, #72]	@ 0x48
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008272:	61fa      	str	r2, [r7, #28]
 8008274:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	69b9      	ldr	r1, [r7, #24]
 8008278:	69fa      	ldr	r2, [r7, #28]
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	617b      	str	r3, [r7, #20]
   return(result);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e5      	bne.n	8008252 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e012      	b.n	80082c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3758      	adds	r7, #88	@ 0x58
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	4613      	mov	r3, r2
 80082d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082d8:	e04f      	b.n	800837a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082e0:	d04b      	beq.n	800837a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082e2:	f7f9 fd75 	bl	8001dd0 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d302      	bcc.n	80082f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e04e      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	d037      	beq.n	800837a <UART_WaitOnFlagUntilTimeout+0xb2>
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2b80      	cmp	r3, #128	@ 0x80
 800830e:	d034      	beq.n	800837a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2b40      	cmp	r3, #64	@ 0x40
 8008314:	d031      	beq.n	800837a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	f003 0308 	and.w	r3, r3, #8
 8008320:	2b08      	cmp	r3, #8
 8008322:	d110      	bne.n	8008346 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2208      	movs	r2, #8
 800832a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f839 	bl	80083a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2208      	movs	r2, #8
 8008336:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e029      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008354:	d111      	bne.n	800837a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800835e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f000 f81f 	bl	80083a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2220      	movs	r2, #32
 800836a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e00f      	b.n	800839a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69da      	ldr	r2, [r3, #28]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4013      	ands	r3, r2
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	429a      	cmp	r2, r3
 8008388:	bf0c      	ite	eq
 800838a:	2301      	moveq	r3, #1
 800838c:	2300      	movne	r3, #0
 800838e:	b2db      	uxtb	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	79fb      	ldrb	r3, [r7, #7]
 8008394:	429a      	cmp	r2, r3
 8008396:	d0a0      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b095      	sub	sp, #84	@ 0x54
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80083cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e6      	bne.n	80083ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80083ee:	69fa      	ldr	r2, [r7, #28]
 80083f0:	4b1e      	ldr	r3, [pc, #120]	@ (800846c <UART_EndRxTransfer+0xc8>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3308      	adds	r3, #8
 80083fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008400:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800840c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e5      	bne.n	80083de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008416:	2b01      	cmp	r3, #1
 8008418:	d118      	bne.n	800844c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	60bb      	str	r3, [r7, #8]
   return(result);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	f023 0310 	bic.w	r3, r3, #16
 800842e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008438:	61bb      	str	r3, [r7, #24]
 800843a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843c:	6979      	ldr	r1, [r7, #20]
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	e841 2300 	strex	r3, r2, [r1]
 8008444:	613b      	str	r3, [r7, #16]
   return(result);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1e6      	bne.n	800841a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2220      	movs	r2, #32
 8008450:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008460:	bf00      	nop
 8008462:	3754      	adds	r7, #84	@ 0x54
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	effffffe 	.word	0xeffffffe

08008470 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800847e:	2b01      	cmp	r3, #1
 8008480:	d101      	bne.n	8008486 <HAL_UARTEx_DisableFifoMode+0x16>
 8008482:	2302      	movs	r3, #2
 8008484:	e027      	b.n	80084d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2224      	movs	r2, #36	@ 0x24
 8008492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0201 	bic.w	r2, r2, #1
 80084ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80084b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3714      	adds	r7, #20
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e02d      	b.n	8008556 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2224      	movs	r2, #36	@ 0x24
 8008506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 0201 	bic.w	r2, r2, #1
 8008520:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f850 	bl	80085dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2220      	movs	r2, #32
 8008548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800856e:	2b01      	cmp	r3, #1
 8008570:	d101      	bne.n	8008576 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008572:	2302      	movs	r3, #2
 8008574:	e02d      	b.n	80085d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2224      	movs	r2, #36	@ 0x24
 8008582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0201 	bic.w	r2, r2, #1
 800859c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f812 	bl	80085dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2220      	movs	r2, #32
 80085c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d108      	bne.n	80085fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085fc:	e031      	b.n	8008662 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085fe:	2310      	movs	r3, #16
 8008600:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008602:	2310      	movs	r3, #16
 8008604:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	0e5b      	lsrs	r3, r3, #25
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	0f5b      	lsrs	r3, r3, #29
 800861e:	b2db      	uxtb	r3, r3
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	7b3a      	ldrb	r2, [r7, #12]
 800862a:	4911      	ldr	r1, [pc, #68]	@ (8008670 <UARTEx_SetNbDataToProcess+0x94>)
 800862c:	5c8a      	ldrb	r2, [r1, r2]
 800862e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008632:	7b3a      	ldrb	r2, [r7, #12]
 8008634:	490f      	ldr	r1, [pc, #60]	@ (8008674 <UARTEx_SetNbDataToProcess+0x98>)
 8008636:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008638:	fb93 f3f2 	sdiv	r3, r3, r2
 800863c:	b29a      	uxth	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	7b7a      	ldrb	r2, [r7, #13]
 8008648:	4909      	ldr	r1, [pc, #36]	@ (8008670 <UARTEx_SetNbDataToProcess+0x94>)
 800864a:	5c8a      	ldrb	r2, [r1, r2]
 800864c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008650:	7b7a      	ldrb	r2, [r7, #13]
 8008652:	4908      	ldr	r1, [pc, #32]	@ (8008674 <UARTEx_SetNbDataToProcess+0x98>)
 8008654:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008656:	fb93 f3f2 	sdiv	r3, r3, r2
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008662:	bf00      	nop
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	08008710 	.word	0x08008710
 8008674:	08008718 	.word	0x08008718

08008678 <memset>:
 8008678:	4402      	add	r2, r0
 800867a:	4603      	mov	r3, r0
 800867c:	4293      	cmp	r3, r2
 800867e:	d100      	bne.n	8008682 <memset+0xa>
 8008680:	4770      	bx	lr
 8008682:	f803 1b01 	strb.w	r1, [r3], #1
 8008686:	e7f9      	b.n	800867c <memset+0x4>

08008688 <__libc_init_array>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	4d0d      	ldr	r5, [pc, #52]	@ (80086c0 <__libc_init_array+0x38>)
 800868c:	4c0d      	ldr	r4, [pc, #52]	@ (80086c4 <__libc_init_array+0x3c>)
 800868e:	1b64      	subs	r4, r4, r5
 8008690:	10a4      	asrs	r4, r4, #2
 8008692:	2600      	movs	r6, #0
 8008694:	42a6      	cmp	r6, r4
 8008696:	d109      	bne.n	80086ac <__libc_init_array+0x24>
 8008698:	4d0b      	ldr	r5, [pc, #44]	@ (80086c8 <__libc_init_array+0x40>)
 800869a:	4c0c      	ldr	r4, [pc, #48]	@ (80086cc <__libc_init_array+0x44>)
 800869c:	f000 f818 	bl	80086d0 <_init>
 80086a0:	1b64      	subs	r4, r4, r5
 80086a2:	10a4      	asrs	r4, r4, #2
 80086a4:	2600      	movs	r6, #0
 80086a6:	42a6      	cmp	r6, r4
 80086a8:	d105      	bne.n	80086b6 <__libc_init_array+0x2e>
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b0:	4798      	blx	r3
 80086b2:	3601      	adds	r6, #1
 80086b4:	e7ee      	b.n	8008694 <__libc_init_array+0xc>
 80086b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ba:	4798      	blx	r3
 80086bc:	3601      	adds	r6, #1
 80086be:	e7f2      	b.n	80086a6 <__libc_init_array+0x1e>
 80086c0:	08008728 	.word	0x08008728
 80086c4:	08008728 	.word	0x08008728
 80086c8:	08008728 	.word	0x08008728
 80086cc:	0800872c 	.word	0x0800872c

080086d0 <_init>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	bf00      	nop
 80086d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d6:	bc08      	pop	{r3}
 80086d8:	469e      	mov	lr, r3
 80086da:	4770      	bx	lr

080086dc <_fini>:
 80086dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086de:	bf00      	nop
 80086e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e2:	bc08      	pop	{r3}
 80086e4:	469e      	mov	lr, r3
 80086e6:	4770      	bx	lr
