
Quadcopter_UniTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f94  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800a248  0800a248  0000b248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a2f0  0800a2f0  0000b2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a2f8  0800a2f8  0000b2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a2fc  0800a2fc  0000b2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800a300  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004ac  24000088  0800a388  0000c088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000534  0800a388  0000c534  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019c0d  00000000  00000000  0000c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ecb  00000000  00000000  00025cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001408  00000000  00000000  00028b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fbe  00000000  00000000  00029f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003d51  00000000  00000000  0002af56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b6c8  00000000  00000000  0002eca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140792  00000000  00000000  0004a36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0018ab01  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005770  00000000  00000000  0018ab44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001902b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000088 	.word	0x24000088
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a22c 	.word	0x0800a22c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400008c 	.word	0x2400008c
 80002ec:	0800a22c 	.word	0x0800a22c

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <filter_compute_gravity_angles>:
#include "math.h"
#include "main.h"

extern float dt;

void filter_compute_gravity_angles(float gx, float gy, float gz, int euler[3]) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	ed2d 8b02 	vpush	{d8}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80005ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80005f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80005f6:	6038      	str	r0, [r7, #0]
    float roll  = atan2(gy, gz);
 80005f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80005fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000600:	edd7 6a01 	vldr	s13, [r7, #4]
 8000604:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000608:	eeb0 1b46 	vmov.f64	d1, d6
 800060c:	eeb0 0b47 	vmov.f64	d0, d7
 8000610:	f009 fc20 	bl	8009e54 <atan2>
 8000614:	eeb0 7b40 	vmov.f64	d7, d0
 8000618:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800061c:	edc7 7a05 	vstr	s15, [r7, #20]
    float pitch = atan2(-gx, sqrt(gy * gy + gz * gz));
 8000620:	edd7 7a03 	vldr	s15, [r7, #12]
 8000624:	eef1 7a67 	vneg.f32	s15, s15
 8000628:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800062c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000630:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000634:	edd7 7a01 	vldr	s15, [r7, #4]
 8000638:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800063c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000640:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000644:	eeb0 0b47 	vmov.f64	d0, d7
 8000648:	f009 fc06 	bl	8009e58 <sqrt>
 800064c:	eeb0 7b40 	vmov.f64	d7, d0
 8000650:	eeb0 1b47 	vmov.f64	d1, d7
 8000654:	eeb0 0b48 	vmov.f64	d0, d8
 8000658:	f009 fbfc 	bl	8009e54 <atan2>
 800065c:	eeb0 7b40 	vmov.f64	d7, d0
 8000660:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000664:	edc7 7a04 	vstr	s15, [r7, #16]

    euler[0] = (int)(roll * RAD_TO_MDEG);
 8000668:	edd7 7a05 	vldr	s15, [r7, #20]
 800066c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80006a8 <filter_compute_gravity_angles+0xc8>
 8000670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000678:	ee17 2a90 	vmov	r2, s15
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	601a      	str	r2, [r3, #0]
    euler[1] = (int)(pitch * RAD_TO_MDEG);
 8000680:	edd7 7a04 	vldr	s15, [r7, #16]
 8000684:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80006a8 <filter_compute_gravity_angles+0xc8>
 8000688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	3304      	adds	r3, #4
 8000690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000694:	ee17 2a90 	vmov	r2, s15
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	ecbd 8b02 	vpop	{d8}
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	475fcfcd 	.word	0x475fcfcd

080006ac <filter_integrate_gyro>:

void filter_integrate_gyro(int gyro[3], int gyro_delta[3], int euler_est[3], int* prev_tick_ms) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
    int now = HAL_GetTick();
 80006ba:	f002 f939 	bl	8002930 <HAL_GetTick>
 80006be:	4603      	mov	r3, r0
 80006c0:	61bb      	str	r3, [r7, #24]
    dt = (now - *prev_tick_ms) / 1000.0f;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	69ba      	ldr	r2, [r7, #24]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	ee07 3a90 	vmov	s15, r3
 80006ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006d2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800077c <filter_integrate_gyro+0xd0>
 80006d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <filter_integrate_gyro+0xd4>)
 80006dc:	edc3 7a00 	vstr	s15, [r3]
    *prev_tick_ms = now;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	69ba      	ldr	r2, [r7, #24]
 80006e4:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 3; i++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
 80006ea:	e03e      	b.n	800076a <filter_integrate_gyro+0xbe>
    	float gyro_scaled = gyro[i] * SCALING;
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	ee07 3a90 	vmov	s15, r3
 80006fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006fe:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000784 <filter_integrate_gyro+0xd8>
 8000702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000706:	edc7 7a05 	vstr	s15, [r7, #20]
    	float gyro_delta_scaled = gyro_delta[i] * SCALING;
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	4413      	add	r3, r2
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000784 <filter_integrate_gyro+0xd8>
 8000720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000724:	edc7 7a04 	vstr	s15, [r7, #16]
    	euler_est[i] += (int)((gyro_scaled + gyro_delta_scaled / 2.0f) * dt);
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	edd7 7a04 	vldr	s15, [r7, #16]
 8000736:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800073a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800073e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000742:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <filter_integrate_gyro+0xd4>)
 8000748:	edd3 7a00 	vldr	s15, [r3]
 800074c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000754:	ee17 0a90 	vmov	r0, s15
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	440b      	add	r3, r1
 8000760:	4402      	add	r2, r0
 8000762:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	3301      	adds	r3, #1
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	2b02      	cmp	r3, #2
 800076e:	ddbd      	ble.n	80006ec <filter_integrate_gyro+0x40>
    }
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	447a0000 	.word	0x447a0000
 8000780:	24000390 	.word	0x24000390
 8000784:	40f42400 	.word	0x40f42400

08000788 <filter_fuse_angles>:

void filter_fuse_angles(int acc_euler[3], int euler_est[3], float alpha) {
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i = 0; i < 2; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e02b      	b.n	80007f4 <filter_fuse_angles+0x6c>
        euler_est[i] = (int)(alpha * acc_euler[i] + (1.0f - alpha) * euler_est[i]);
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	ee07 3a90 	vmov	s15, r3
 80007aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80007b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80007ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80007be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	4413      	add	r3, r2
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	ee07 3a90 	vmov	s15, r3
 80007d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	4413      	add	r3, r2
 80007e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007e8:	ee17 2a90 	vmov	r2, s15
 80007ec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 2; i++) {
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	ddd0      	ble.n	800079c <filter_fuse_angles+0x14>
    }
}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	371c      	adds	r7, #28
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <imu_init>:

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart3;

void imu_init()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af02      	add	r7, sp, #8
    unsigned char data[2];
    data[0]=0x6b;
 800080e:	236b      	movs	r3, #107	@ 0x6b
 8000810:	713b      	strb	r3, [r7, #4]
    data[1]=0;
 8000812:	2300      	movs	r3, #0
 8000814:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&hi2c1, IMU_ADDR_8, data, 2, 1000);
 8000816:	1d3a      	adds	r2, r7, #4
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2302      	movs	r3, #2
 8000820:	21d0      	movs	r1, #208	@ 0xd0
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <imu_init+0x30>)
 8000824:	f002 fc2a 	bl	800307c <HAL_I2C_Master_Transmit>
    HAL_Delay(300);
 8000828:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800082c:	f002 f88c 	bl	8002948 <HAL_Delay>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	240000a4 	.word	0x240000a4

0800083c <imu_read_word>:

short int imu_read_word(uint8_t reg_addr) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af02      	add	r7, sp, #8
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	unsigned char data[2];
    HAL_I2C_Master_Transmit(&hi2c1, IMU_ADDR_8, &reg_addr, 1, 1000);
 8000846:	1dfa      	adds	r2, r7, #7
 8000848:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2301      	movs	r3, #1
 8000850:	21d0      	movs	r1, #208	@ 0xd0
 8000852:	480c      	ldr	r0, [pc, #48]	@ (8000884 <imu_read_word+0x48>)
 8000854:	f002 fc12 	bl	800307c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, IMU_ADDR_8, data, 2, 1000);
 8000858:	f107 020c 	add.w	r2, r7, #12
 800085c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2302      	movs	r3, #2
 8000864:	21d0      	movs	r1, #208	@ 0xd0
 8000866:	4807      	ldr	r0, [pc, #28]	@ (8000884 <imu_read_word+0x48>)
 8000868:	f002 fd20 	bl	80032ac <HAL_I2C_Master_Receive>
    return (short int)(data[0] << 8) | data[1];
 800086c:	7b3b      	ldrb	r3, [r7, #12]
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	b21a      	sxth	r2, r3
 8000872:	7b7b      	ldrb	r3, [r7, #13]
 8000874:	b21b      	sxth	r3, r3
 8000876:	4313      	orrs	r3, r2
 8000878:	b21b      	sxth	r3, r3
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	240000a4 	.word	0x240000a4

08000888 <imu_read_all>:

void imu_read_all(short int data[7]) {
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    int reg = IMU_REG;
 8000890:	233b      	movs	r3, #59	@ 0x3b
 8000892:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 7; i++) {
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	e010      	b.n	80008bc <imu_read_all+0x34>
        data[i] = imu_read_word(reg);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	b2d9      	uxtb	r1, r3
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	18d4      	adds	r4, r2, r3
 80008a6:	4608      	mov	r0, r1
 80008a8:	f7ff ffc8 	bl	800083c <imu_read_word>
 80008ac:	4603      	mov	r3, r0
 80008ae:	8023      	strh	r3, [r4, #0]
        reg += 2;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	3302      	adds	r3, #2
 80008b4:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 7; i++) {
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	ddeb      	ble.n	800089a <imu_read_all+0x12>
    }
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd90      	pop	{r4, r7, pc}

080008cc <imu_calibrate>:

void imu_calibrate(int euler_offset[2], int gyro_offset[3]) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b090      	sub	sp, #64	@ 0x40
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
    long int euler_sum[2] = {0};
 80008d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
    long int gyro_sum[3] = {0};
 80008e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
    short int data[7];
    int euler[3];

    for (int i = 0; i < 100; i++) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80008f0:	e045      	b.n	800097e <imu_calibrate+0xb2>
        imu_read_all(data);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffc6 	bl	8000888 <imu_read_all>
        filter_compute_gravity_angles(data[0], data[1], data[2], euler);
 80008fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000908:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800090c:	ee07 3a10 	vmov	s14, r3
 8000910:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000914:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000918:	ee06 3a90 	vmov	s13, r3
 800091c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	4618      	mov	r0, r3
 8000926:	eeb0 1a66 	vmov.f32	s2, s13
 800092a:	eef0 0a47 	vmov.f32	s1, s14
 800092e:	eeb0 0a67 	vmov.f32	s0, s15
 8000932:	f7ff fe55 	bl	80005e0 <filter_compute_gravity_angles>

        if (euler[0] > 0) euler[0] -= 360000;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2b00      	cmp	r3, #0
 800093a:	dd03      	ble.n	8000944 <imu_calibrate+0x78>
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	4b2a      	ldr	r3, [pc, #168]	@ (80009e8 <imu_calibrate+0x11c>)
 8000940:	4413      	add	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]

        euler_sum[0] += euler[0];
 8000944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	4413      	add	r3, r2
 800094a:	633b      	str	r3, [r7, #48]	@ 0x30
        euler_sum[1] += euler[1];
 800094c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4413      	add	r3, r2
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34

        gyro_sum[0] += data[4];
 8000954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000956:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800095a:	4413      	add	r3, r2
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
        gyro_sum[1] += data[5];
 800095e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000960:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000964:	4413      	add	r3, r2
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
        gyro_sum[2] += data[6];
 8000968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800096e:	4413      	add	r3, r2
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c

        HAL_Delay(10);
 8000972:	200a      	movs	r0, #10
 8000974:	f001 ffe8 	bl	8002948 <HAL_Delay>
    for (int i = 0; i < 100; i++) {
 8000978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800097a:	3301      	adds	r3, #1
 800097c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800097e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000980:	2b63      	cmp	r3, #99	@ 0x63
 8000982:	ddb6      	ble.n	80008f2 <imu_calibrate+0x26>
    }

    euler_offset[0] = euler_sum[0] / 100;
 8000984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000986:	4a19      	ldr	r2, [pc, #100]	@ (80009ec <imu_calibrate+0x120>)
 8000988:	fb82 1203 	smull	r1, r2, r2, r3
 800098c:	1152      	asrs	r2, r2, #5
 800098e:	17db      	asrs	r3, r3, #31
 8000990:	1ad2      	subs	r2, r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	601a      	str	r2, [r3, #0]
    euler_offset[1] = euler_sum[1] / 100;
 8000996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	3204      	adds	r2, #4
 800099c:	4913      	ldr	r1, [pc, #76]	@ (80009ec <imu_calibrate+0x120>)
 800099e:	fb81 0103 	smull	r0, r1, r1, r3
 80009a2:	1149      	asrs	r1, r1, #5
 80009a4:	17db      	asrs	r3, r3, #31
 80009a6:	1acb      	subs	r3, r1, r3
 80009a8:	6013      	str	r3, [r2, #0]

    for (int i = 0; i < 3; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009ae:	e013      	b.n	80009d8 <imu_calibrate+0x10c>
        gyro_offset[i] = gyro_sum[i] / 100;
 80009b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	3340      	adds	r3, #64	@ 0x40
 80009b6:	443b      	add	r3, r7
 80009b8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80009bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80009be:	0092      	lsls	r2, r2, #2
 80009c0:	6839      	ldr	r1, [r7, #0]
 80009c2:	440a      	add	r2, r1
 80009c4:	4909      	ldr	r1, [pc, #36]	@ (80009ec <imu_calibrate+0x120>)
 80009c6:	fb81 0103 	smull	r0, r1, r1, r3
 80009ca:	1149      	asrs	r1, r1, #5
 80009cc:	17db      	asrs	r3, r3, #31
 80009ce:	1acb      	subs	r3, r1, r3
 80009d0:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 3; i++) {
 80009d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009d4:	3301      	adds	r3, #1
 80009d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009da:	2b02      	cmp	r3, #2
 80009dc:	dde8      	ble.n	80009b0 <imu_calibrate+0xe4>
    }

}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3740      	adds	r7, #64	@ 0x40
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	fffa81c0 	.word	0xfffa81c0
 80009ec:	51eb851f 	.word	0x51eb851f

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	rc_ref_euler.pitch =  0;
 80009f6:	4b94      	ldr	r3, [pc, #592]	@ (8000c48 <main+0x258>)
 80009f8:	f04f 0200 	mov.w	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
	rc_ref_euler.roll =  0;
 80009fe:	4b92      	ldr	r3, [pc, #584]	@ (8000c48 <main+0x258>)
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
	rc_ref_euler.yaw =  0;
 8000a06:	4b90      	ldr	r3, [pc, #576]	@ (8000c48 <main+0x258>)
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]

	rc_comm_temp.AIL = 0;
 8000a0e:	4b8f      	ldr	r3, [pc, #572]	@ (8000c4c <main+0x25c>)
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
	rc_comm_temp.ELE = 0;
 8000a16:	4b8d      	ldr	r3, [pc, #564]	@ (8000c4c <main+0x25c>)
 8000a18:	f04f 0200 	mov.w	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	rc_comm_temp.RUD = 0;
 8000a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8000c4c <main+0x25c>)
 8000a20:	f04f 0200 	mov.w	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
	rc_comm_temp.THR = 0;
 8000a26:	4b89      	ldr	r3, [pc, #548]	@ (8000c4c <main+0x25c>)
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 3; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e037      	b.n	8000aa4 <main+0xb4>
		euler_est[i] = 0;
 8000a34:	4a86      	ldr	r2, [pc, #536]	@ (8000c50 <main+0x260>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2100      	movs	r1, #0
 8000a3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		control_error.p_error[i] = 0;
 8000a3e:	4a85      	ldr	r2, [pc, #532]	@ (8000c54 <main+0x264>)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	f04f 0200 	mov.w	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
		control_error.i_error[i] = 0;
 8000a4c:	4a81      	ldr	r2, [pc, #516]	@ (8000c54 <main+0x264>)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3302      	adds	r3, #2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	3304      	adds	r3, #4
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
		control_error.d_error[i] = 0;
 8000a5e:	4a7d      	ldr	r2, [pc, #500]	@ (8000c54 <main+0x264>)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3306      	adds	r3, #6
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	f04f 0200 	mov.w	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
		former_error.p_error[i] = 0;
 8000a6e:	4a7a      	ldr	r2, [pc, #488]	@ (8000c58 <main+0x268>)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4413      	add	r3, r2
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
		former_error.i_error[i] = 0;
 8000a7c:	4a76      	ldr	r2, [pc, #472]	@ (8000c58 <main+0x268>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3302      	adds	r3, #2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	3304      	adds	r3, #4
 8000a88:	f04f 0200 	mov.w	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
		former_error.d_error[i] = 0;
 8000a8e:	4a72      	ldr	r2, [pc, #456]	@ (8000c58 <main+0x268>)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	3306      	adds	r3, #6
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	ddc4      	ble.n	8000a34 <main+0x44>
	}

	motor_throttle = 0;
 8000aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8000c5c <main+0x26c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	801a      	strh	r2, [r3, #0]
	dt = 1;
 8000ab0:	4b6b      	ldr	r3, [pc, #428]	@ (8000c60 <main+0x270>)
 8000ab2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000ab6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab8:	f001 feb4 	bl	8002824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000abc:	f000 fa34 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac0:	f000 fe92 	bl	80017e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ac4:	f000 fe3c 	bl	8001740 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000ac8:	f000 fe86 	bl	80017d8 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000acc:	f000 fae4 	bl	8001098 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ad0:	f000 fbb4 	bl	800123c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ad4:	f000 fc52 	bl	800137c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ad8:	f000 fcf0 	bl	80014bc <MX_TIM5_Init>
  MX_TIM15_Init();
 8000adc:	f000 fd8e 	bl	80015fc <MX_TIM15_Init>
  MX_I2C1_Init();
 8000ae0:	f000 fa9a 	bl	8001018 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	485f      	ldr	r0, [pc, #380]	@ (8000c64 <main+0x274>)
 8000ae8:	f005 fec4 	bl	8006874 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000aec:	2104      	movs	r1, #4
 8000aee:	485d      	ldr	r0, [pc, #372]	@ (8000c64 <main+0x274>)
 8000af0:	f005 fec0 	bl	8006874 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000af4:	2108      	movs	r1, #8
 8000af6:	485b      	ldr	r0, [pc, #364]	@ (8000c64 <main+0x274>)
 8000af8:	f005 febc 	bl	8006874 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000afc:	210c      	movs	r1, #12
 8000afe:	4859      	ldr	r0, [pc, #356]	@ (8000c64 <main+0x274>)
 8000b00:	f005 feb8 	bl	8006874 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000b04:	2104      	movs	r1, #4
 8000b06:	4858      	ldr	r0, [pc, #352]	@ (8000c68 <main+0x278>)
 8000b08:	f006 f824 	bl	8006b54 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4856      	ldr	r0, [pc, #344]	@ (8000c68 <main+0x278>)
 8000b10:	f006 f996 	bl	8006e40 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8000b14:	2104      	movs	r1, #4
 8000b16:	4855      	ldr	r0, [pc, #340]	@ (8000c6c <main+0x27c>)
 8000b18:	f006 f81c 	bl	8006b54 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4853      	ldr	r0, [pc, #332]	@ (8000c6c <main+0x27c>)
 8000b20:	f006 f98e 	bl	8006e40 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8000b24:	2104      	movs	r1, #4
 8000b26:	4852      	ldr	r0, [pc, #328]	@ (8000c70 <main+0x280>)
 8000b28:	f006 f814 	bl	8006b54 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4850      	ldr	r0, [pc, #320]	@ (8000c70 <main+0x280>)
 8000b30:	f006 f986 	bl	8006e40 <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8000b34:	2104      	movs	r1, #4
 8000b36:	484f      	ldr	r0, [pc, #316]	@ (8000c74 <main+0x284>)
 8000b38:	f006 f80c 	bl	8006b54 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	484d      	ldr	r0, [pc, #308]	@ (8000c74 <main+0x284>)
 8000b40:	f006 f97e 	bl	8006e40 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);  // 1ms if period is 2000 ticks
 8000b44:	4b47      	ldr	r3, [pc, #284]	@ (8000c64 <main+0x274>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2264      	movs	r2, #100	@ 0x64
 8000b4a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8000b4c:	4b45      	ldr	r3, [pc, #276]	@ (8000c64 <main+0x274>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2264      	movs	r2, #100	@ 0x64
 8000b52:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 8000b54:	4b43      	ldr	r3, [pc, #268]	@ (8000c64 <main+0x274>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2264      	movs	r2, #100	@ 0x64
 8000b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8000b5c:	4b41      	ldr	r3, [pc, #260]	@ (8000c64 <main+0x274>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2264      	movs	r2, #100	@ 0x64
 8000b62:	641a      	str	r2, [r3, #64]	@ 0x40

     HAL_Delay(3000);  // Wait for ESC to initialize
 8000b64:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b68:	f001 feee 	bl	8002948 <HAL_Delay>

     // Optional: set mid-throttle (1.5 ms pulse width)
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 150);  // 1.5ms
 8000b6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c64 <main+0x274>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2296      	movs	r2, #150	@ 0x96
 8000b72:	635a      	str	r2, [r3, #52]	@ 0x34
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 150);
 8000b74:	4b3b      	ldr	r3, [pc, #236]	@ (8000c64 <main+0x274>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2296      	movs	r2, #150	@ 0x96
 8000b7a:	639a      	str	r2, [r3, #56]	@ 0x38
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 150);
 8000b7c:	4b39      	ldr	r3, [pc, #228]	@ (8000c64 <main+0x274>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2296      	movs	r2, #150	@ 0x96
 8000b82:	63da      	str	r2, [r3, #60]	@ 0x3c
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 150);
 8000b84:	4b37      	ldr	r3, [pc, #220]	@ (8000c64 <main+0x274>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2296      	movs	r2, #150	@ 0x96
 8000b8a:	641a      	str	r2, [r3, #64]	@ 0x40


  set_motor_pwm_zero(motor_pwm);
 8000b8c:	483a      	ldr	r0, [pc, #232]	@ (8000c78 <main+0x288>)
 8000b8e:	f001 f99d 	bl	8001ecc <set_motor_pwm_zero>
  set_motor_pwm(motor_pwm);
 8000b92:	4839      	ldr	r0, [pc, #228]	@ (8000c78 <main+0x288>)
 8000b94:	f001 f928 	bl	8001de8 <set_motor_pwm>


  imu_init();
 8000b98:	f7ff fe36 	bl	8000808 <imu_init>
  orientation_init();
 8000b9c:	f001 f9b0 	bl	8001f00 <orientation_init>

    /* USER CODE BEGIN 3 */


	  	  // Reactivate Radio interrupts
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	4831      	ldr	r0, [pc, #196]	@ (8000c68 <main+0x278>)
 8000ba4:	f005 ffd6 	bl	8006b54 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	482f      	ldr	r0, [pc, #188]	@ (8000c68 <main+0x278>)
 8000bac:	f006 f948 	bl	8006e40 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	482e      	ldr	r0, [pc, #184]	@ (8000c6c <main+0x27c>)
 8000bb4:	f005 ffce 	bl	8006b54 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	482c      	ldr	r0, [pc, #176]	@ (8000c6c <main+0x27c>)
 8000bbc:	f006 f940 	bl	8006e40 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	482b      	ldr	r0, [pc, #172]	@ (8000c70 <main+0x280>)
 8000bc4:	f005 ffc6 	bl	8006b54 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4829      	ldr	r0, [pc, #164]	@ (8000c70 <main+0x280>)
 8000bcc:	f006 f938 	bl	8006e40 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4828      	ldr	r0, [pc, #160]	@ (8000c74 <main+0x284>)
 8000bd4:	f005 ffbe 	bl	8006b54 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4826      	ldr	r0, [pc, #152]	@ (8000c74 <main+0x284>)
 8000bdc:	f006 f930 	bl	8006e40 <HAL_TIM_IC_Start_IT>

		  // Target euler angles: PID reference
		  get_target_euler(&rc_ref_euler, &rc_comm_temp);
 8000be0:	491a      	ldr	r1, [pc, #104]	@ (8000c4c <main+0x25c>)
 8000be2:	4819      	ldr	r0, [pc, #100]	@ (8000c48 <main+0x258>)
 8000be4:	f001 fa2a 	bl	800203c <get_target_euler>
		  orientation_update(euler_est);
 8000be8:	4819      	ldr	r0, [pc, #100]	@ (8000c50 <main+0x260>)
 8000bea:	f001 f99d 	bl	8001f28 <orientation_update>



		  control_error.p_error[0] = rc_ref_euler.pitch - euler_est[0];
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <main+0x258>)
 8000bf0:	ed93 7a00 	vldr	s14, [r3]
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <main+0x260>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	ee07 3a90 	vmov	s15, r3
 8000bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <main+0x264>)
 8000c06:	edc3 7a00 	vstr	s15, [r3]
		  control_error.p_error[1] = rc_ref_euler.roll - euler_est[1];
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <main+0x258>)
 8000c0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <main+0x260>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	ee07 3a90 	vmov	s15, r3
 8000c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <main+0x264>)
 8000c22:	edc3 7a01 	vstr	s15, [r3, #4]
		  control_error.p_error[2] = rc_ref_euler.yaw - euler_est[2];
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <main+0x258>)
 8000c28:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <main+0x260>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	ee07 3a90 	vmov	s15, r3
 8000c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <main+0x264>)
 8000c3e:	edc3 7a02 	vstr	s15, [r3, #8]

		  for (int i = 0; i < 3; i++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	e04e      	b.n	8000ce6 <main+0x2f6>
 8000c48:	24000318 	.word	0x24000318
 8000c4c:	24000308 	.word	0x24000308
 8000c50:	24000380 	.word	0x24000380
 8000c54:	2400032c 	.word	0x2400032c
 8000c58:	24000350 	.word	0x24000350
 8000c5c:	2400038c 	.word	0x2400038c
 8000c60:	24000390 	.word	0x24000390
 8000c64:	240000f8 	.word	0x240000f8
 8000c68:	24000144 	.word	0x24000144
 8000c6c:	24000190 	.word	0x24000190
 8000c70:	240001dc 	.word	0x240001dc
 8000c74:	24000228 	.word	0x24000228
 8000c78:	24000324 	.word	0x24000324
			  control_error.d_error[i] = control_error.p_error[i] - former_error.p_error[i];
 8000c7c:	4a9e      	ldr	r2, [pc, #632]	@ (8000ef8 <main+0x508>)
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	ed93 7a00 	vldr	s14, [r3]
 8000c88:	4a9c      	ldr	r2, [pc, #624]	@ (8000efc <main+0x50c>)
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	edd3 7a00 	vldr	s15, [r3]
 8000c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c98:	4a97      	ldr	r2, [pc, #604]	@ (8000ef8 <main+0x508>)
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3306      	adds	r3, #6
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	edc3 7a00 	vstr	s15, [r3]
			  control_error.i_error[i] += control_error.p_error[i] * dt;
 8000ca6:	4a94      	ldr	r2, [pc, #592]	@ (8000ef8 <main+0x508>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	3302      	adds	r3, #2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
 8000cb6:	4a90      	ldr	r2, [pc, #576]	@ (8000ef8 <main+0x508>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	edd3 6a00 	vldr	s13, [r3]
 8000cc2:	4b8f      	ldr	r3, [pc, #572]	@ (8000f00 <main+0x510>)
 8000cc4:	edd3 7a00 	vldr	s15, [r3]
 8000cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd0:	4a89      	ldr	r2, [pc, #548]	@ (8000ef8 <main+0x508>)
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	3304      	adds	r3, #4
 8000cdc:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < 3; i++) {
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	ddc7      	ble.n	8000c7c <main+0x28c>
		  }


		  // PID control output
		  out_pid.pitch  = Kp[0] * control_error.p_error[0] +
 8000cec:	4b85      	ldr	r3, [pc, #532]	@ (8000f04 <main+0x514>)
 8000cee:	ed93 7a00 	vldr	s14, [r3]
 8000cf2:	4b81      	ldr	r3, [pc, #516]	@ (8000ef8 <main+0x508>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
		                   Ki[0] * control_error.i_error[0] +
 8000cfc:	4b82      	ldr	r3, [pc, #520]	@ (8000f08 <main+0x518>)
 8000cfe:	edd3 6a00 	vldr	s13, [r3]
 8000d02:	4b7d      	ldr	r3, [pc, #500]	@ (8000ef8 <main+0x508>)
 8000d04:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
		  out_pid.pitch  = Kp[0] * control_error.p_error[0] +
 8000d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
		                   Kd[0] * control_error.d_error[0];
 8000d10:	4b7e      	ldr	r3, [pc, #504]	@ (8000f0c <main+0x51c>)
 8000d12:	edd3 6a00 	vldr	s13, [r3]
 8000d16:	4b78      	ldr	r3, [pc, #480]	@ (8000ef8 <main+0x508>)
 8000d18:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		                   Ki[0] * control_error.i_error[0] +
 8000d20:	ee77 7a27 	vadd.f32	s15, s14, s15
		  out_pid.pitch  = Kp[0] * control_error.p_error[0] +
 8000d24:	4b7a      	ldr	r3, [pc, #488]	@ (8000f10 <main+0x520>)
 8000d26:	edc3 7a00 	vstr	s15, [r3]

		  out_pid.roll = Kp[1] * control_error.p_error[1] +
 8000d2a:	4b76      	ldr	r3, [pc, #472]	@ (8000f04 <main+0x514>)
 8000d2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d30:	4b71      	ldr	r3, [pc, #452]	@ (8000ef8 <main+0x508>)
 8000d32:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d36:	ee27 7a27 	vmul.f32	s14, s14, s15
		                 Ki[1] * control_error.i_error[1] +
 8000d3a:	4b73      	ldr	r3, [pc, #460]	@ (8000f08 <main+0x518>)
 8000d3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d40:	4b6d      	ldr	r3, [pc, #436]	@ (8000ef8 <main+0x508>)
 8000d42:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
		  out_pid.roll = Kp[1] * control_error.p_error[1] +
 8000d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
		                 Kd[1] * control_error.d_error[1];
 8000d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8000f0c <main+0x51c>)
 8000d50:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d54:	4b68      	ldr	r3, [pc, #416]	@ (8000ef8 <main+0x508>)
 8000d56:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
		                 Ki[1] * control_error.i_error[1] +
 8000d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
		  out_pid.roll = Kp[1] * control_error.p_error[1] +
 8000d62:	4b6b      	ldr	r3, [pc, #428]	@ (8000f10 <main+0x520>)
 8000d64:	edc3 7a01 	vstr	s15, [r3, #4]

		  out_pid.yaw = Kp[2] * control_error.p_error[2] +
 8000d68:	4b66      	ldr	r3, [pc, #408]	@ (8000f04 <main+0x514>)
 8000d6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d6e:	4b62      	ldr	r3, [pc, #392]	@ (8000ef8 <main+0x508>)
 8000d70:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d74:	ee27 7a27 	vmul.f32	s14, s14, s15
		                Ki[2] * control_error.i_error[2] +
 8000d78:	4b63      	ldr	r3, [pc, #396]	@ (8000f08 <main+0x518>)
 8000d7a:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ef8 <main+0x508>)
 8000d80:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
		  out_pid.yaw = Kp[2] * control_error.p_error[2] +
 8000d88:	ee37 7a27 	vadd.f32	s14, s14, s15
		                Kd[2] * control_error.d_error[2];
 8000d8c:	4b5f      	ldr	r3, [pc, #380]	@ (8000f0c <main+0x51c>)
 8000d8e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000d92:	4b59      	ldr	r3, [pc, #356]	@ (8000ef8 <main+0x508>)
 8000d94:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
		                Ki[2] * control_error.i_error[2] +
 8000d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
		  out_pid.yaw = Kp[2] * control_error.p_error[2] +
 8000da0:	4b5b      	ldr	r3, [pc, #364]	@ (8000f10 <main+0x520>)
 8000da2:	edc3 7a02 	vstr	s15, [r3, #8]

		  // Update former errors
		  for (int i = 0; i < 3; i++) {
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	e01a      	b.n	8000de2 <main+0x3f2>
			  former_error.p_error[i] = control_error.p_error[i];
 8000dac:	4a52      	ldr	r2, [pc, #328]	@ (8000ef8 <main+0x508>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	4951      	ldr	r1, [pc, #324]	@ (8000efc <main+0x50c>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	601a      	str	r2, [r3, #0]
		      former_error.i_error[i] = control_error.i_error[i];
 8000dc0:	4a4d      	ldr	r2, [pc, #308]	@ (8000ef8 <main+0x508>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	3304      	adds	r3, #4
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	494b      	ldr	r1, [pc, #300]	@ (8000efc <main+0x50c>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3304      	adds	r3, #4
 8000dda:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < 3; i++) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3301      	adds	r3, #1
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	dde1      	ble.n	8000dac <main+0x3bc>
		  }

		  motor_throttle = 0.28f *rc_comm_temp.THR + MOTOR_MIN_PWM;  // Scaled throttle
 8000de8:	4b4a      	ldr	r3, [pc, #296]	@ (8000f14 <main+0x524>)
 8000dea:	edd3 7a02 	vldr	s15, [r3, #8]
 8000dee:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000f18 <main+0x528>
 8000df2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000f1c <main+0x52c>
 8000dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e02:	ee17 3a90 	vmov	r3, s15
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	4b45      	ldr	r3, [pc, #276]	@ (8000f20 <main+0x530>)
 8000e0a:	801a      	strh	r2, [r3, #0]

		  // Mixing formula
		  motor_pwm[0] = motor_throttle - out_pid.pitch - out_pid.roll + out_pid.yaw;
 8000e0c:	4b44      	ldr	r3, [pc, #272]	@ (8000f20 <main+0x530>)
 8000e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f10 <main+0x520>)
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e24:	4b3a      	ldr	r3, [pc, #232]	@ (8000f10 <main+0x520>)
 8000e26:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e2e:	4b38      	ldr	r3, [pc, #224]	@ (8000f10 <main+0x520>)
 8000e30:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e3c:	ee17 3a90 	vmov	r3, s15
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	4b38      	ldr	r3, [pc, #224]	@ (8000f24 <main+0x534>)
 8000e44:	801a      	strh	r2, [r3, #0]
		  motor_pwm[1] = motor_throttle + out_pid.pitch - out_pid.roll - out_pid.yaw;
 8000e46:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <main+0x530>)
 8000e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e54:	4b2e      	ldr	r3, [pc, #184]	@ (8000f10 <main+0x520>)
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f10 <main+0x520>)
 8000e60:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e68:	4b29      	ldr	r3, [pc, #164]	@ (8000f10 <main+0x520>)
 8000e6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e76:	ee17 3a90 	vmov	r3, s15
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b29      	ldr	r3, [pc, #164]	@ (8000f24 <main+0x534>)
 8000e7e:	805a      	strh	r2, [r3, #2]
		  motor_pwm[2] = motor_throttle + out_pid.pitch + out_pid.roll + out_pid.yaw;
 8000e80:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <main+0x530>)
 8000e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e8e:	4b20      	ldr	r3, [pc, #128]	@ (8000f10 <main+0x520>)
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e98:	4b1d      	ldr	r3, [pc, #116]	@ (8000f10 <main+0x520>)
 8000e9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <main+0x520>)
 8000ea4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb0:	ee17 3a90 	vmov	r3, s15
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <main+0x534>)
 8000eb8:	809a      	strh	r2, [r3, #4]
		  motor_pwm[3] = motor_throttle - out_pid.pitch + out_pid.roll - out_pid.yaw;
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <main+0x530>)
 8000ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <main+0x520>)
 8000eca:	edd3 7a00 	vldr	s15, [r3]
 8000ece:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <main+0x520>)
 8000ed4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <main+0x520>)
 8000ede:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eea:	ee17 3a90 	vmov	r3, s15
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <main+0x534>)
 8000ef2:	80da      	strh	r2, [r3, #6]
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000ef4:	e654      	b.n	8000ba0 <main+0x1b0>
 8000ef6:	bf00      	nop
 8000ef8:	2400032c 	.word	0x2400032c
 8000efc:	24000350 	.word	0x24000350
 8000f00:	24000390 	.word	0x24000390
 8000f04:	24000000 	.word	0x24000000
 8000f08:	2400000c 	.word	0x2400000c
 8000f0c:	24000018 	.word	0x24000018
 8000f10:	24000374 	.word	0x24000374
 8000f14:	24000308 	.word	0x24000308
 8000f18:	3e8f5c29 	.word	0x3e8f5c29
 8000f1c:	42d20000 	.word	0x42d20000
 8000f20:	2400038c 	.word	0x2400038c
 8000f24:	24000324 	.word	0x24000324

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b09c      	sub	sp, #112	@ 0x70
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f32:	224c      	movs	r2, #76	@ 0x4c
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f008 ff5a 	bl	8009df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2220      	movs	r2, #32
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f008 ff54 	bl	8009df0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000f48:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <SystemClock_Config+0xe8>)
 8000f4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f52:	2004      	movs	r0, #4
 8000f54:	f002 fdde 	bl	8003b14 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <SystemClock_Config+0xec>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a2c      	ldr	r2, [pc, #176]	@ (8001014 <SystemClock_Config+0xec>)
 8000f62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <SystemClock_Config+0xec>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f74:	bf00      	nop
 8000f76:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <SystemClock_Config+0xec>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f82:	d1f8      	bne.n	8000f76 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f84:	2321      	movs	r3, #33	@ 0x21
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f96:	2302      	movs	r3, #2
 8000f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000f9e:	2325      	movs	r3, #37	@ 0x25
 8000fa0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fae:	230c      	movs	r3, #12
 8000fb0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 fe01 	bl	8003bc8 <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000fcc:	f000 ff06 	bl	8001ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	233f      	movs	r3, #63	@ 0x3f
 8000fd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fe0:	2340      	movs	r3, #64	@ 0x40
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fe4:	2340      	movs	r3, #64	@ 0x40
 8000fe6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fee:	2340      	movs	r3, #64	@ 0x40
 8000ff0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fa18 	bl	800442c <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001002:	f000 feeb 	bl	8001ddc <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3770      	adds	r7, #112	@ 0x70
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	58024400 	.word	0x58024400
 8001014:	58024800 	.word	0x58024800

08001018 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_I2C1_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	@ (8001090 <MX_I2C1_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702787;
 8001022:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_I2C1_Init+0x74>)
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <MX_I2C1_Init+0x7c>)
 8001026:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001028:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_I2C1_Init+0x74>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_I2C1_Init+0x74>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_I2C1_Init+0x74>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001052:	480e      	ldr	r0, [pc, #56]	@ (800108c <MX_I2C1_Init+0x74>)
 8001054:	f001 ff76 	bl	8002f44 <HAL_I2C_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800105e:	f000 febd 	bl	8001ddc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <MX_I2C1_Init+0x74>)
 8001066:	f002 fcbd 	bl	80039e4 <HAL_I2CEx_ConfigAnalogFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001070:	f000 feb4 	bl	8001ddc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_I2C1_Init+0x74>)
 8001078:	f002 fcff 	bl	8003a7a <HAL_I2CEx_ConfigDigitalFilter>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 feab 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	240000a4 	.word	0x240000a4
 8001090:	40005400 	.word	0x40005400
 8001094:	00702787 	.word	0x00702787

08001098 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b09c      	sub	sp, #112	@ 0x70
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2234      	movs	r2, #52	@ 0x34
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f008 fe8c 	bl	8009df0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d8:	4b56      	ldr	r3, [pc, #344]	@ (8001234 <MX_TIM1_Init+0x19c>)
 80010da:	4a57      	ldr	r2, [pc, #348]	@ (8001238 <MX_TIM1_Init+0x1a0>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1499;
 80010de:	4b55      	ldr	r3, [pc, #340]	@ (8001234 <MX_TIM1_Init+0x19c>)
 80010e0:	f240 52db 	movw	r2, #1499	@ 0x5db
 80010e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b53      	ldr	r3, [pc, #332]	@ (8001234 <MX_TIM1_Init+0x19c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80010ec:	4b51      	ldr	r3, [pc, #324]	@ (8001234 <MX_TIM1_Init+0x19c>)
 80010ee:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80010f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001234 <MX_TIM1_Init+0x19c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001234 <MX_TIM1_Init+0x19c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001100:	4b4c      	ldr	r3, [pc, #304]	@ (8001234 <MX_TIM1_Init+0x19c>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001106:	484b      	ldr	r0, [pc, #300]	@ (8001234 <MX_TIM1_Init+0x19c>)
 8001108:	f005 fafc 	bl	8006704 <HAL_TIM_Base_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001112:	f000 fe63 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001120:	4619      	mov	r1, r3
 8001122:	4844      	ldr	r0, [pc, #272]	@ (8001234 <MX_TIM1_Init+0x19c>)
 8001124:	f006 fb52 	bl	80077cc <HAL_TIM_ConfigClockSource>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800112e:	f000 fe55 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001132:	4840      	ldr	r0, [pc, #256]	@ (8001234 <MX_TIM1_Init+0x19c>)
 8001134:	f005 fb3d 	bl	80067b2 <HAL_TIM_PWM_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800113e:	f000 fe4d 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800114e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001152:	4619      	mov	r1, r3
 8001154:	4837      	ldr	r0, [pc, #220]	@ (8001234 <MX_TIM1_Init+0x19c>)
 8001156:	f007 fb33 	bl	80087c0 <HAL_TIMEx_MasterConfigSynchronization>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001160:	f000 fe3c 	bl	8001ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001164:	2360      	movs	r3, #96	@ 0x60
 8001166:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116c:	2300      	movs	r3, #0
 800116e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001170:	2300      	movs	r3, #0
 8001172:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001180:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	482a      	ldr	r0, [pc, #168]	@ (8001234 <MX_TIM1_Init+0x19c>)
 800118a:	f006 fa0b 	bl	80075a4 <HAL_TIM_PWM_ConfigChannel>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001194:	f000 fe22 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001198:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800119c:	2204      	movs	r2, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4824      	ldr	r0, [pc, #144]	@ (8001234 <MX_TIM1_Init+0x19c>)
 80011a2:	f006 f9ff 	bl	80075a4 <HAL_TIM_PWM_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80011ac:	f000 fe16 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011b4:	2208      	movs	r2, #8
 80011b6:	4619      	mov	r1, r3
 80011b8:	481e      	ldr	r0, [pc, #120]	@ (8001234 <MX_TIM1_Init+0x19c>)
 80011ba:	f006 f9f3 	bl	80075a4 <HAL_TIM_PWM_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80011c4:	f000 fe0a 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011cc:	220c      	movs	r2, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4818      	ldr	r0, [pc, #96]	@ (8001234 <MX_TIM1_Init+0x19c>)
 80011d2:	f006 f9e7 	bl	80075a4 <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80011dc:	f000 fdfe 	bl	8001ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001202:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	@ (8001234 <MX_TIM1_Init+0x19c>)
 8001216:	f007 fb61 	bl	80088dc <HAL_TIMEx_ConfigBreakDeadTime>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8001220:	f000 fddc 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001224:	4803      	ldr	r0, [pc, #12]	@ (8001234 <MX_TIM1_Init+0x19c>)
 8001226:	f001 f95d 	bl	80024e4 <HAL_TIM_MspPostInit>

}
 800122a:	bf00      	nop
 800122c:	3770      	adds	r7, #112	@ 0x70
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	240000f8 	.word	0x240000f8
 8001238:	40010000 	.word	0x40010000

0800123c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b090      	sub	sp, #64	@ 0x40
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001278:	4b3e      	ldr	r3, [pc, #248]	@ (8001374 <MX_TIM3_Init+0x138>)
 800127a:	4a3f      	ldr	r2, [pc, #252]	@ (8001378 <MX_TIM3_Init+0x13c>)
 800127c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 800127e:	4b3d      	ldr	r3, [pc, #244]	@ (8001374 <MX_TIM3_Init+0x138>)
 8001280:	f240 227f 	movw	r2, #639	@ 0x27f
 8001284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b3b      	ldr	r3, [pc, #236]	@ (8001374 <MX_TIM3_Init+0x138>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800128c:	4b39      	ldr	r3, [pc, #228]	@ (8001374 <MX_TIM3_Init+0x138>)
 800128e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001292:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b37      	ldr	r3, [pc, #220]	@ (8001374 <MX_TIM3_Init+0x138>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b36      	ldr	r3, [pc, #216]	@ (8001374 <MX_TIM3_Init+0x138>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012a0:	4834      	ldr	r0, [pc, #208]	@ (8001374 <MX_TIM3_Init+0x138>)
 80012a2:	f005 fa2f 	bl	8006704 <HAL_TIM_Base_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80012ac:	f000 fd96 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80012ba:	4619      	mov	r1, r3
 80012bc:	482d      	ldr	r0, [pc, #180]	@ (8001374 <MX_TIM3_Init+0x138>)
 80012be:	f006 fa85 	bl	80077cc <HAL_TIM_ConfigClockSource>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80012c8:	f000 fd88 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012cc:	4829      	ldr	r0, [pc, #164]	@ (8001374 <MX_TIM3_Init+0x138>)
 80012ce:	f005 fbdf 	bl	8006a90 <HAL_TIM_IC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80012d8:	f000 fd80 	bl	8001ddc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012dc:	2304      	movs	r3, #4
 80012de:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80012e0:	2350      	movs	r3, #80	@ 0x50
 80012e2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	481f      	ldr	r0, [pc, #124]	@ (8001374 <MX_TIM3_Init+0x138>)
 80012f8:	f006 fb60 	bl	80079bc <HAL_TIM_SlaveConfigSynchro>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001302:	f000 fd6b 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800130a:	2301      	movs	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2200      	movs	r2, #0
 800131c:	4619      	mov	r1, r3
 800131e:	4815      	ldr	r0, [pc, #84]	@ (8001374 <MX_TIM3_Init+0x138>)
 8001320:	f006 f8a3 	bl	800746a <HAL_TIM_IC_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 800132a:	f000 fd57 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800132e:	2302      	movs	r3, #2
 8001330:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001332:	2302      	movs	r3, #2
 8001334:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	2204      	movs	r2, #4
 800133c:	4619      	mov	r1, r3
 800133e:	480d      	ldr	r0, [pc, #52]	@ (8001374 <MX_TIM3_Init+0x138>)
 8001340:	f006 f893 	bl	800746a <HAL_TIM_IC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 800134a:	f000 fd47 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	@ (8001374 <MX_TIM3_Init+0x138>)
 800135c:	f007 fa30 	bl	80087c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 8001366:	f000 fd39 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3740      	adds	r7, #64	@ 0x40
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	24000144 	.word	0x24000144
 8001378:	40000400 	.word	0x40000400

0800137c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b090      	sub	sp, #64	@ 0x40
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b8:	4b3e      	ldr	r3, [pc, #248]	@ (80014b4 <MX_TIM4_Init+0x138>)
 80013ba:	4a3f      	ldr	r2, [pc, #252]	@ (80014b8 <MX_TIM4_Init+0x13c>)
 80013bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 80013be:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <MX_TIM4_Init+0x138>)
 80013c0:	f240 227f 	movw	r2, #639	@ 0x27f
 80013c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <MX_TIM4_Init+0x138>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013cc:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <MX_TIM4_Init+0x138>)
 80013ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <MX_TIM4_Init+0x138>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <MX_TIM4_Init+0x138>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013e0:	4834      	ldr	r0, [pc, #208]	@ (80014b4 <MX_TIM4_Init+0x138>)
 80013e2:	f005 f98f 	bl	8006704 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80013ec:	f000 fcf6 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013fa:	4619      	mov	r1, r3
 80013fc:	482d      	ldr	r0, [pc, #180]	@ (80014b4 <MX_TIM4_Init+0x138>)
 80013fe:	f006 f9e5 	bl	80077cc <HAL_TIM_ConfigClockSource>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001408:	f000 fce8 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800140c:	4829      	ldr	r0, [pc, #164]	@ (80014b4 <MX_TIM4_Init+0x138>)
 800140e:	f005 fb3f 	bl	8006a90 <HAL_TIM_IC_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001418:	f000 fce0 	bl	8001ddc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800141c:	2304      	movs	r3, #4
 800141e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001420:	2350      	movs	r3, #80	@ 0x50
 8001422:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	4619      	mov	r1, r3
 8001436:	481f      	ldr	r0, [pc, #124]	@ (80014b4 <MX_TIM4_Init+0x138>)
 8001438:	f006 fac0 	bl	80079bc <HAL_TIM_SlaveConfigSynchro>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001442:	f000 fccb 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800144a:	2301      	movs	r3, #1
 800144c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	4815      	ldr	r0, [pc, #84]	@ (80014b4 <MX_TIM4_Init+0x138>)
 8001460:	f006 f803 	bl	800746a <HAL_TIM_IC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 800146a:	f000 fcb7 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800146e:	2302      	movs	r3, #2
 8001470:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001472:	2302      	movs	r3, #2
 8001474:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	2204      	movs	r2, #4
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <MX_TIM4_Init+0x138>)
 8001480:	f005 fff3 	bl	800746a <HAL_TIM_IC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 800148a:	f000 fca7 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_TIM4_Init+0x138>)
 800149c:	f007 f990 	bl	80087c0 <HAL_TIMEx_MasterConfigSynchronization>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 80014a6:	f000 fc99 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3740      	adds	r7, #64	@ 0x40
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	24000190 	.word	0x24000190
 80014b8:	40000800 	.word	0x40000800

080014bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b090      	sub	sp, #64	@ 0x40
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014f8:	4b3e      	ldr	r3, [pc, #248]	@ (80015f4 <MX_TIM5_Init+0x138>)
 80014fa:	4a3f      	ldr	r2, [pc, #252]	@ (80015f8 <MX_TIM5_Init+0x13c>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 639;
 80014fe:	4b3d      	ldr	r3, [pc, #244]	@ (80015f4 <MX_TIM5_Init+0x138>)
 8001500:	f240 227f 	movw	r2, #639	@ 0x27f
 8001504:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b3b      	ldr	r3, [pc, #236]	@ (80015f4 <MX_TIM5_Init+0x138>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800150c:	4b39      	ldr	r3, [pc, #228]	@ (80015f4 <MX_TIM5_Init+0x138>)
 800150e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001512:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <MX_TIM5_Init+0x138>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <MX_TIM5_Init+0x138>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001520:	4834      	ldr	r0, [pc, #208]	@ (80015f4 <MX_TIM5_Init+0x138>)
 8001522:	f005 f8ef 	bl	8006704 <HAL_TIM_Base_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800152c:	f000 fc56 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001530:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001534:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001536:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800153a:	4619      	mov	r1, r3
 800153c:	482d      	ldr	r0, [pc, #180]	@ (80015f4 <MX_TIM5_Init+0x138>)
 800153e:	f006 f945 	bl	80077cc <HAL_TIM_ConfigClockSource>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001548:	f000 fc48 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800154c:	4829      	ldr	r0, [pc, #164]	@ (80015f4 <MX_TIM5_Init+0x138>)
 800154e:	f005 fa9f 	bl	8006a90 <HAL_TIM_IC_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8001558:	f000 fc40 	bl	8001ddc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800155c:	2304      	movs	r3, #4
 800155e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001560:	2350      	movs	r3, #80	@ 0x50
 8001562:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	481f      	ldr	r0, [pc, #124]	@ (80015f4 <MX_TIM5_Init+0x138>)
 8001578:	f006 fa20 	bl	80079bc <HAL_TIM_SlaveConfigSynchro>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8001582:	f000 fc2b 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800158a:	2301      	movs	r3, #1
 800158c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2200      	movs	r2, #0
 800159c:	4619      	mov	r1, r3
 800159e:	4815      	ldr	r0, [pc, #84]	@ (80015f4 <MX_TIM5_Init+0x138>)
 80015a0:	f005 ff63 	bl	800746a <HAL_TIM_IC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 80015aa:	f000 fc17 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80015ae:	2302      	movs	r3, #2
 80015b0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80015b2:	2302      	movs	r3, #2
 80015b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2204      	movs	r2, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	@ (80015f4 <MX_TIM5_Init+0x138>)
 80015c0:	f005 ff53 	bl	800746a <HAL_TIM_IC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 80015ca:	f000 fc07 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	@ (80015f4 <MX_TIM5_Init+0x138>)
 80015dc:	f007 f8f0 	bl	80087c0 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM5_Init+0x12e>
  {
    Error_Handler();
 80015e6:	f000 fbf9 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3740      	adds	r7, #64	@ 0x40
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	240001dc 	.word	0x240001dc
 80015f8:	40000c00 	.word	0x40000c00

080015fc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b090      	sub	sp, #64	@ 0x40
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162e:	463b      	mov	r3, r7
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001638:	4b3f      	ldr	r3, [pc, #252]	@ (8001738 <MX_TIM15_Init+0x13c>)
 800163a:	4a40      	ldr	r2, [pc, #256]	@ (800173c <MX_TIM15_Init+0x140>)
 800163c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 800163e:	4b3e      	ldr	r3, [pc, #248]	@ (8001738 <MX_TIM15_Init+0x13c>)
 8001640:	f240 227f 	movw	r2, #639	@ 0x27f
 8001644:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b3c      	ldr	r3, [pc, #240]	@ (8001738 <MX_TIM15_Init+0x13c>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800164c:	4b3a      	ldr	r3, [pc, #232]	@ (8001738 <MX_TIM15_Init+0x13c>)
 800164e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001652:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001654:	4b38      	ldr	r3, [pc, #224]	@ (8001738 <MX_TIM15_Init+0x13c>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800165a:	4b37      	ldr	r3, [pc, #220]	@ (8001738 <MX_TIM15_Init+0x13c>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b35      	ldr	r3, [pc, #212]	@ (8001738 <MX_TIM15_Init+0x13c>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001666:	4834      	ldr	r0, [pc, #208]	@ (8001738 <MX_TIM15_Init+0x13c>)
 8001668:	f005 f84c 	bl	8006704 <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8001672:	f000 fbb3 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800167c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001680:	4619      	mov	r1, r3
 8001682:	482d      	ldr	r0, [pc, #180]	@ (8001738 <MX_TIM15_Init+0x13c>)
 8001684:	f006 f8a2 	bl	80077cc <HAL_TIM_ConfigClockSource>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 800168e:	f000 fba5 	bl	8001ddc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001692:	4829      	ldr	r0, [pc, #164]	@ (8001738 <MX_TIM15_Init+0x13c>)
 8001694:	f005 f9fc 	bl	8006a90 <HAL_TIM_IC_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 800169e:	f000 fb9d 	bl	8001ddc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80016a2:	2304      	movs	r3, #4
 80016a4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80016a6:	2350      	movs	r3, #80	@ 0x50
 80016a8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	481e      	ldr	r0, [pc, #120]	@ (8001738 <MX_TIM15_Init+0x13c>)
 80016be:	f006 f97d 	bl	80079bc <HAL_TIM_SlaveConfigSynchro>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 80016c8:	f000 fb88 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016d0:	2301      	movs	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4814      	ldr	r0, [pc, #80]	@ (8001738 <MX_TIM15_Init+0x13c>)
 80016e6:	f005 fec0 	bl	800746a <HAL_TIM_IC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 80016f0:	f000 fb74 	bl	8001ddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80016f4:	2302      	movs	r3, #2
 80016f6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	2204      	movs	r2, #4
 8001702:	4619      	mov	r1, r3
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <MX_TIM15_Init+0x13c>)
 8001706:	f005 feb0 	bl	800746a <HAL_TIM_IC_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 8001710:	f000 fb64 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001714:	2300      	movs	r3, #0
 8001716:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800171c:	463b      	mov	r3, r7
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_TIM15_Init+0x13c>)
 8001722:	f007 f84d 	bl	80087c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 800172c:	f000 fb56 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	3740      	adds	r7, #64	@ 0x40
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	24000228 	.word	0x24000228
 800173c:	40014000 	.word	0x40014000

08001740 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 8001746:	4a23      	ldr	r2, [pc, #140]	@ (80017d4 <MX_USART3_UART_Init+0x94>)
 8001748:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800174a:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800177c:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001782:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001788:	4811      	ldr	r0, [pc, #68]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 800178a:	f007 f951 	bl	8008a30 <HAL_UART_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001794:	f000 fb22 	bl	8001ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	480d      	ldr	r0, [pc, #52]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 800179c:	f008 fa5d 	bl	8009c5a <HAL_UARTEx_SetTxFifoThreshold>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017a6:	f000 fb19 	bl	8001ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 80017ae:	f008 fa92 	bl	8009cd6 <HAL_UARTEx_SetRxFifoThreshold>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017b8:	f000 fb10 	bl	8001ddc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	@ (80017d0 <MX_USART3_UART_Init+0x90>)
 80017be:	f008 fa13 	bl	8009be8 <HAL_UARTEx_DisableFifoMode>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017c8:	f000 fb08 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	24000274 	.word	0x24000274
 80017d4:	40004800 	.word	0x40004800

080017d8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
	...

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	@ 0x38
 80017ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017fe:	4b80      	ldr	r3, [pc, #512]	@ (8001a00 <MX_GPIO_Init+0x218>)
 8001800:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001804:	4a7e      	ldr	r2, [pc, #504]	@ (8001a00 <MX_GPIO_Init+0x218>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800180e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a00 <MX_GPIO_Init+0x218>)
 8001810:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001814:	f003 0310 	and.w	r3, r3, #16
 8001818:	623b      	str	r3, [r7, #32]
 800181a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	4b78      	ldr	r3, [pc, #480]	@ (8001a00 <MX_GPIO_Init+0x218>)
 800181e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001822:	4a77      	ldr	r2, [pc, #476]	@ (8001a00 <MX_GPIO_Init+0x218>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800182c:	4b74      	ldr	r3, [pc, #464]	@ (8001a00 <MX_GPIO_Init+0x218>)
 800182e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800183a:	4b71      	ldr	r3, [pc, #452]	@ (8001a00 <MX_GPIO_Init+0x218>)
 800183c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001840:	4a6f      	ldr	r2, [pc, #444]	@ (8001a00 <MX_GPIO_Init+0x218>)
 8001842:	f043 0320 	orr.w	r3, r3, #32
 8001846:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800184a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a00 <MX_GPIO_Init+0x218>)
 800184c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001858:	4b69      	ldr	r3, [pc, #420]	@ (8001a00 <MX_GPIO_Init+0x218>)
 800185a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800185e:	4a68      	ldr	r2, [pc, #416]	@ (8001a00 <MX_GPIO_Init+0x218>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001864:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001868:	4b65      	ldr	r3, [pc, #404]	@ (8001a00 <MX_GPIO_Init+0x218>)
 800186a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800186e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b62      	ldr	r3, [pc, #392]	@ (8001a00 <MX_GPIO_Init+0x218>)
 8001878:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800187c:	4a60      	ldr	r2, [pc, #384]	@ (8001a00 <MX_GPIO_Init+0x218>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001886:	4b5e      	ldr	r3, [pc, #376]	@ (8001a00 <MX_GPIO_Init+0x218>)
 8001888:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b5a      	ldr	r3, [pc, #360]	@ (8001a00 <MX_GPIO_Init+0x218>)
 8001896:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800189a:	4a59      	ldr	r2, [pc, #356]	@ (8001a00 <MX_GPIO_Init+0x218>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018a4:	4b56      	ldr	r3, [pc, #344]	@ (8001a00 <MX_GPIO_Init+0x218>)
 80018a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b2:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <MX_GPIO_Init+0x218>)
 80018b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018b8:	4a51      	ldr	r2, [pc, #324]	@ (8001a00 <MX_GPIO_Init+0x218>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018c2:	4b4f      	ldr	r3, [pc, #316]	@ (8001a00 <MX_GPIO_Init+0x218>)
 80018c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001a00 <MX_GPIO_Init+0x218>)
 80018d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018d6:	4a4a      	ldr	r2, [pc, #296]	@ (8001a00 <MX_GPIO_Init+0x218>)
 80018d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018dc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018e0:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <MX_GPIO_Init+0x218>)
 80018e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018f4:	4843      	ldr	r0, [pc, #268]	@ (8001a04 <MX_GPIO_Init+0x21c>)
 80018f6:	f001 fb0b 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001900:	4841      	ldr	r0, [pc, #260]	@ (8001a08 <MX_GPIO_Init+0x220>)
 8001902:	f001 fb05 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2102      	movs	r1, #2
 800190a:	4840      	ldr	r0, [pc, #256]	@ (8001a0c <MX_GPIO_Init+0x224>)
 800190c:	f001 fb00 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001910:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001916:	2300      	movs	r3, #0
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001922:	4619      	mov	r1, r3
 8001924:	483a      	ldr	r0, [pc, #232]	@ (8001a10 <MX_GPIO_Init+0x228>)
 8001926:	f001 f943 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800192a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	4830      	ldr	r0, [pc, #192]	@ (8001a04 <MX_GPIO_Init+0x21c>)
 8001944:	f001 f934 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001948:	f244 0301 	movw	r3, #16385	@ 0x4001
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	2301      	movs	r3, #1
 8001950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800195e:	4619      	mov	r1, r3
 8001960:	4829      	ldr	r0, [pc, #164]	@ (8001a08 <MX_GPIO_Init+0x220>)
 8001962:	f001 f925 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001966:	2380      	movs	r3, #128	@ 0x80
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800196a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800196e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	4826      	ldr	r0, [pc, #152]	@ (8001a14 <MX_GPIO_Init+0x22c>)
 800197c:	f001 f918 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001992:	4619      	mov	r1, r3
 8001994:	4820      	ldr	r0, [pc, #128]	@ (8001a18 <MX_GPIO_Init+0x230>)
 8001996:	f001 f90b 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800199a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80019ac:	230a      	movs	r3, #10
 80019ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b4:	4619      	mov	r1, r3
 80019b6:	4818      	ldr	r0, [pc, #96]	@ (8001a18 <MX_GPIO_Init+0x230>)
 80019b8:	f001 f8fa 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80019bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d2:	4619      	mov	r1, r3
 80019d4:	4810      	ldr	r0, [pc, #64]	@ (8001a18 <MX_GPIO_Init+0x230>)
 80019d6:	f001 f8eb 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019da:	2302      	movs	r3, #2
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ee:	4619      	mov	r1, r3
 80019f0:	4806      	ldr	r0, [pc, #24]	@ (8001a0c <MX_GPIO_Init+0x224>)
 80019f2:	f001 f8dd 	bl	8002bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f6:	bf00      	nop
 80019f8:	3738      	adds	r7, #56	@ 0x38
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	58024400 	.word	0x58024400
 8001a04:	58021400 	.word	0x58021400
 8001a08:	58020400 	.word	0x58020400
 8001a0c:	58021000 	.word	0x58021000
 8001a10:	58020800 	.word	0x58020800
 8001a14:	58021800 	.word	0x58021800
 8001a18:	58020000 	.word	0x58020000
 8001a1c:	00000000 	.word	0x00000000

08001a20 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4ab8      	ldr	r2, [pc, #736]	@ (8001d10 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d161      	bne.n	8001af6 <HAL_TIM_IC_CaptureCallback+0xd6>
    {

        cycle_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a32:	2100      	movs	r1, #0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f006 f803 	bl	8007a40 <HAL_TIM_ReadCapturedValue>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4ab5      	ldr	r2, [pc, #724]	@ (8001d14 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001a3e:	6013      	str	r3, [r2, #0]
        period_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001a40:	2104      	movs	r1, #4
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f005 fffc 	bl	8007a40 <HAL_TIM_ReadCapturedValue>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	461a      	mov	r2, r3
 8001a54:	4bb0      	ldr	r3, [pc, #704]	@ (8001d18 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001a56:	601a      	str	r2, [r3, #0]
    	if (cycle_rc_0 > 4300 && cycle_rc_0 < 4380 && period_rc_0 > 0 && cycle_rc_0 > period_rc_0 ) {
 8001a58:	4bae      	ldr	r3, [pc, #696]	@ (8001d14 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d948      	bls.n	8001af6 <HAL_TIM_IC_CaptureCallback+0xd6>
 8001a64:	4bab      	ldr	r3, [pc, #684]	@ (8001d14 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f241 121b 	movw	r2, #4379	@ 0x111b
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d842      	bhi.n	8001af6 <HAL_TIM_IC_CaptureCallback+0xd6>
 8001a70:	4ba9      	ldr	r3, [pc, #676]	@ (8001d18 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d03e      	beq.n	8001af6 <HAL_TIM_IC_CaptureCallback+0xd6>
 8001a78:	4ba6      	ldr	r3, [pc, #664]	@ (8001d14 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4ba6      	ldr	r3, [pc, #664]	@ (8001d18 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d938      	bls.n	8001af6 <HAL_TIM_IC_CaptureCallback+0xd6>
    		channel_mag_0 = ((float) period_rc_0 / (float) cycle_rc_0 - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 8001a84:	4ba4      	ldr	r3, [pc, #656]	@ (8001d18 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a90:	4ba0      	ldr	r3, [pc, #640]	@ (8001d14 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	ee07 3a90 	vmov	s15, r3
 8001a98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aa4:	ed9f 6b94 	vldr	d6, [pc, #592]	@ 8001cf8 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001aa8:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001aac:	ed9f 5b94 	vldr	d5, [pc, #592]	@ 8001d00 <HAL_TIM_IC_CaptureCallback+0x2e0>
 8001ab0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ab4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ab8:	4b98      	ldr	r3, [pc, #608]	@ (8001d1c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]
    		rc_comm_temp.AIL = (channel_mag_0 - 0.5) * 2 * RC_FULLSCALE;
 8001abe:	4b97      	ldr	r3, [pc, #604]	@ (8001d1c <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ac8:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001acc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ad0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001ad4:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 8001d08 <HAL_TIM_IC_CaptureCallback+0x2e8>
 8001ad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001adc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ae0:	4b8f      	ldr	r3, [pc, #572]	@ (8001d20 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001ae2:	edc3 7a00 	vstr	s15, [r3]
    		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f005 faf9 	bl	80070e0 <HAL_TIM_IC_Stop_IT>
    		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001aee:	2104      	movs	r1, #4
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f005 f933 	bl	8006d5c <HAL_TIM_IC_Stop>

    	}
    }

    if (htim->Instance == TIM4)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a8a      	ldr	r2, [pc, #552]	@ (8001d24 <HAL_TIM_IC_CaptureCallback+0x304>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d161      	bne.n	8001bc4 <HAL_TIM_IC_CaptureCallback+0x1a4>
    {

            cycle_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001b00:	2100      	movs	r1, #0
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f005 ff9c 	bl	8007a40 <HAL_TIM_ReadCapturedValue>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	4a87      	ldr	r2, [pc, #540]	@ (8001d28 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001b0c:	6013      	str	r3, [r2, #0]
            period_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001b0e:	2104      	movs	r1, #4
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f005 ff95 	bl	8007a40 <HAL_TIM_ReadCapturedValue>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b82      	ldr	r3, [pc, #520]	@ (8001d2c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001b24:	601a      	str	r2, [r3, #0]
        	if (cycle_rc_1 > 4300 && cycle_rc_1 < 4380 && period_rc_1 > 0 && cycle_rc_1 > period_rc_1) {
 8001b26:	4b80      	ldr	r3, [pc, #512]	@ (8001d28 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d948      	bls.n	8001bc4 <HAL_TIM_IC_CaptureCallback+0x1a4>
 8001b32:	4b7d      	ldr	r3, [pc, #500]	@ (8001d28 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f241 121b 	movw	r2, #4379	@ 0x111b
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d842      	bhi.n	8001bc4 <HAL_TIM_IC_CaptureCallback+0x1a4>
 8001b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8001d2c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d03e      	beq.n	8001bc4 <HAL_TIM_IC_CaptureCallback+0x1a4>
 8001b46:	4b78      	ldr	r3, [pc, #480]	@ (8001d28 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b78      	ldr	r3, [pc, #480]	@ (8001d2c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d938      	bls.n	8001bc4 <HAL_TIM_IC_CaptureCallback+0x1a4>
        		channel_mag_1 = ((float) period_rc_1 / (float) cycle_rc_1  - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 8001b52:	4b76      	ldr	r3, [pc, #472]	@ (8001d2c <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b5e:	4b72      	ldr	r3, [pc, #456]	@ (8001d28 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b72:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8001cf8 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001b76:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001b7a:	ed9f 5b61 	vldr	d5, [pc, #388]	@ 8001d00 <HAL_TIM_IC_CaptureCallback+0x2e0>
 8001b7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b86:	4b6a      	ldr	r3, [pc, #424]	@ (8001d30 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001b88:	edc3 7a00 	vstr	s15, [r3]
        		rc_comm_temp.ELE = (channel_mag_1 - 0.5) * 2 * RC_FULLSCALE;
 8001b8c:	4b68      	ldr	r3, [pc, #416]	@ (8001d30 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b96:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001b9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001ba2:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8001d08 <HAL_TIM_IC_CaptureCallback+0x2e8>
 8001ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001baa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bae:	4b5c      	ldr	r3, [pc, #368]	@ (8001d20 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001bb0:	edc3 7a01 	vstr	s15, [r3, #4]
        		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f005 fa92 	bl	80070e0 <HAL_TIM_IC_Stop_IT>
        		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f005 f8cc 	bl	8006d5c <HAL_TIM_IC_Stop>

        	}
    }

    if (htim->Instance == TIM5)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a5a      	ldr	r2, [pc, #360]	@ (8001d34 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d161      	bne.n	8001c92 <HAL_TIM_IC_CaptureCallback+0x272>
            {

                cycle_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f005 ff35 	bl	8007a40 <HAL_TIM_ReadCapturedValue>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4a57      	ldr	r2, [pc, #348]	@ (8001d38 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001bda:	6013      	str	r3, [r2, #0]
                period_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001bdc:	2104      	movs	r1, #4
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f005 ff2e 	bl	8007a40 <HAL_TIM_ReadCapturedValue>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b52      	ldr	r3, [pc, #328]	@ (8001d3c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001bf2:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_2 > 4300 && cycle_rc_2 < 4380 && period_rc_2 > 0 && cycle_rc_2 > period_rc_2) {
 8001bf4:	4b50      	ldr	r3, [pc, #320]	@ (8001d38 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d948      	bls.n	8001c92 <HAL_TIM_IC_CaptureCallback+0x272>
 8001c00:	4b4d      	ldr	r3, [pc, #308]	@ (8001d38 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f241 121b 	movw	r2, #4379	@ 0x111b
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d842      	bhi.n	8001c92 <HAL_TIM_IC_CaptureCallback+0x272>
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d3c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d03e      	beq.n	8001c92 <HAL_TIM_IC_CaptureCallback+0x272>
 8001c14:	4b48      	ldr	r3, [pc, #288]	@ (8001d38 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b48      	ldr	r3, [pc, #288]	@ (8001d3c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d938      	bls.n	8001c92 <HAL_TIM_IC_CaptureCallback+0x272>
            		channel_mag_2 = ((float) period_rc_2 / (float) cycle_rc_2  - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 8001c20:	4b46      	ldr	r3, [pc, #280]	@ (8001d3c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	ee07 3a90 	vmov	s15, r3
 8001c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c2c:	4b42      	ldr	r3, [pc, #264]	@ (8001d38 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c40:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8001cf8 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001c44:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001c48:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8001d00 <HAL_TIM_IC_CaptureCallback+0x2e0>
 8001c4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c54:	4b3a      	ldr	r3, [pc, #232]	@ (8001d40 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001c56:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp.RUD = (channel_mag_2 - 0.5) * 2 * RC_FULLSCALE;
 8001c5a:	4b39      	ldr	r3, [pc, #228]	@ (8001d40 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c64:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001c68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c6c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001c70:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8001d08 <HAL_TIM_IC_CaptureCallback+0x2e8>
 8001c74:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c7c:	4b28      	ldr	r3, [pc, #160]	@ (8001d20 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001c7e:	edc3 7a03 	vstr	s15, [r3, #12]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001c82:	2100      	movs	r1, #0
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f005 fa2b 	bl	80070e0 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f005 f865 	bl	8006d5c <HAL_TIM_IC_Stop>

            	}
            }
    if (htim->Instance == TIM15)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a2b      	ldr	r2, [pc, #172]	@ (8001d44 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	f040 8088 	bne.w	8001dae <HAL_TIM_IC_CaptureCallback+0x38e>
            {

                cycle_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f005 fecd 	bl	8007a40 <HAL_TIM_ReadCapturedValue>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4a27      	ldr	r2, [pc, #156]	@ (8001d48 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001caa:	6013      	str	r3, [r2, #0]
                period_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001cac:	2104      	movs	r1, #4
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f005 fec6 	bl	8007a40 <HAL_TIM_ReadCapturedValue>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001cc2:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_3 > 4300 && cycle_rc_3 < 4380 && period_rc_3 > 0 && cycle_rc_3 > period_rc_3) {
 8001cc4:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d96e      	bls.n	8001dae <HAL_TIM_IC_CaptureCallback+0x38e>
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f241 121b 	movw	r2, #4379	@ 0x111b
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d868      	bhi.n	8001dae <HAL_TIM_IC_CaptureCallback+0x38e>
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d064      	beq.n	8001dae <HAL_TIM_IC_CaptureCallback+0x38e>
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d95e      	bls.n	8001dae <HAL_TIM_IC_CaptureCallback+0x38e>
 8001cf0:	e02e      	b.n	8001d50 <HAL_TIM_IC_CaptureCallback+0x330>
 8001cf2:	bf00      	nop
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	147ae148 	.word	0x147ae148
 8001cfc:	3fe147ae 	.word	0x3fe147ae
 8001d00:	ae147ae0 	.word	0xae147ae0
 8001d04:	3fdae147 	.word	0x3fdae147
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	408f4000 	.word	0x408f4000
 8001d10:	40000400 	.word	0x40000400
 8001d14:	24000394 	.word	0x24000394
 8001d18:	240003a4 	.word	0x240003a4
 8001d1c:	240003b4 	.word	0x240003b4
 8001d20:	24000308 	.word	0x24000308
 8001d24:	40000800 	.word	0x40000800
 8001d28:	24000398 	.word	0x24000398
 8001d2c:	240003a8 	.word	0x240003a8
 8001d30:	240003b8 	.word	0x240003b8
 8001d34:	40000c00 	.word	0x40000c00
 8001d38:	2400039c 	.word	0x2400039c
 8001d3c:	240003ac 	.word	0x240003ac
 8001d40:	240003bc 	.word	0x240003bc
 8001d44:	40014000 	.word	0x40014000
 8001d48:	240003a0 	.word	0x240003a0
 8001d4c:	240003b0 	.word	0x240003b0
            		channel_mag_3 = ((float) period_rc_3 / (float) cycle_rc_3  - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 8001d50:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc8 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d70:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8001db8 <HAL_TIM_IC_CaptureCallback+0x398>
 8001d74:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001d78:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001dc0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 8001d7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001d86:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp.THR =  channel_mag_3 * RC_FULLSCALE;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001dd4 <HAL_TIM_IC_CaptureCallback+0x3b4>
 8001d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <HAL_TIM_IC_CaptureCallback+0x3b8>)
 8001d9a:	edc3 7a02 	vstr	s15, [r3, #8]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001d9e:	2100      	movs	r1, #0
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f005 f99d 	bl	80070e0 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001da6:	2104      	movs	r1, #4
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f004 ffd7 	bl	8006d5c <HAL_TIM_IC_Stop>

            	}
            }


}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	147ae148 	.word	0x147ae148
 8001dbc:	3fe147ae 	.word	0x3fe147ae
 8001dc0:	ae147ae0 	.word	0xae147ae0
 8001dc4:	3fdae147 	.word	0x3fdae147
 8001dc8:	240003b0 	.word	0x240003b0
 8001dcc:	240003a0 	.word	0x240003a0
 8001dd0:	240003c0 	.word	0x240003c0
 8001dd4:	447a0000 	.word	0x447a0000
 8001dd8:	24000308 	.word	0x24000308

08001ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de0:	b672      	cpsid	i
}
 8001de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <Error_Handler+0x8>

08001de8 <set_motor_pwm>:


extern TIM_HandleTypeDef htim1;

void set_motor_pwm(uint16_t motor_pwm[])
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if (motor_pwm[0] >= MOTOR_MAX_PWM)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	2bdc      	cmp	r3, #220	@ 0xdc
 8001df6:	d904      	bls.n	8001e02 <set_motor_pwm+0x1a>
	  htim1.Instance->CCR1 = MOTOR_MAX_PWM;
 8001df8:	4b33      	ldr	r3, [pc, #204]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	22dd      	movs	r2, #221	@ 0xdd
 8001dfe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e00:	e00d      	b.n	8001e1e <set_motor_pwm+0x36>
  else if (motor_pwm[0] <= MOTOR_MIN_PWM)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	2b69      	cmp	r3, #105	@ 0x69
 8001e08:	d804      	bhi.n	8001e14 <set_motor_pwm+0x2c>
	  htim1.Instance->CCR1 = MOTOR_MIN_PWM;
 8001e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2269      	movs	r2, #105	@ 0x69
 8001e10:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e12:	e004      	b.n	8001e1e <set_motor_pwm+0x36>
  else
	  htim1.Instance->CCR1 = motor_pwm[0] ;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	881a      	ldrh	r2, [r3, #0]
 8001e18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	635a      	str	r2, [r3, #52]	@ 0x34
  
  if (motor_pwm[1] >= MOTOR_MAX_PWM)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3302      	adds	r3, #2
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	2bdc      	cmp	r3, #220	@ 0xdc
 8001e26:	d904      	bls.n	8001e32 <set_motor_pwm+0x4a>
	  htim1.Instance->CCR2 = MOTOR_MAX_PWM;
 8001e28:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	22dd      	movs	r2, #221	@ 0xdd
 8001e2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e30:	e00f      	b.n	8001e52 <set_motor_pwm+0x6a>
  else if (motor_pwm[1] <= MOTOR_MIN_PWM)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3302      	adds	r3, #2
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	2b69      	cmp	r3, #105	@ 0x69
 8001e3a:	d804      	bhi.n	8001e46 <set_motor_pwm+0x5e>
	  htim1.Instance->CCR2 = MOTOR_MIN_PWM;
 8001e3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2269      	movs	r2, #105	@ 0x69
 8001e42:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e44:	e005      	b.n	8001e52 <set_motor_pwm+0x6a>
  else
	  htim1.Instance->CCR2 =  motor_pwm[1] ;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3302      	adds	r3, #2
 8001e4a:	881a      	ldrh	r2, [r3, #0]
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	639a      	str	r2, [r3, #56]	@ 0x38
  
  if (motor_pwm[2] >= MOTOR_MAX_PWM)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3304      	adds	r3, #4
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	2bdc      	cmp	r3, #220	@ 0xdc
 8001e5a:	d904      	bls.n	8001e66 <set_motor_pwm+0x7e>
	  htim1.Instance->CCR3 = MOTOR_MAX_PWM;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	22dd      	movs	r2, #221	@ 0xdd
 8001e62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e64:	e00f      	b.n	8001e86 <set_motor_pwm+0x9e>
  else if (motor_pwm[2] <= MOTOR_MIN_PWM)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	2b69      	cmp	r3, #105	@ 0x69
 8001e6e:	d804      	bhi.n	8001e7a <set_motor_pwm+0x92>
	  htim1.Instance->CCR3 = MOTOR_MIN_PWM;
 8001e70:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2269      	movs	r2, #105	@ 0x69
 8001e76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e78:	e005      	b.n	8001e86 <set_motor_pwm+0x9e>
  else
	  htim1.Instance->CCR3 =  motor_pwm[2] ;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	4b11      	ldr	r3, [pc, #68]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  if (motor_pwm[3] >= MOTOR_MAX_PWM)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3306      	adds	r3, #6
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	2bdc      	cmp	r3, #220	@ 0xdc
 8001e8e:	d904      	bls.n	8001e9a <set_motor_pwm+0xb2>
	  htim1.Instance->CCR4 = MOTOR_MAX_PWM;
 8001e90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	22dd      	movs	r2, #221	@ 0xdd
 8001e96:	641a      	str	r2, [r3, #64]	@ 0x40
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM)
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM;
  else
	  htim1.Instance->CCR4 = motor_pwm[3] ;
}
 8001e98:	e00f      	b.n	8001eba <set_motor_pwm+0xd2>
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3306      	adds	r3, #6
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	2b69      	cmp	r3, #105	@ 0x69
 8001ea2:	d804      	bhi.n	8001eae <set_motor_pwm+0xc6>
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2269      	movs	r2, #105	@ 0x69
 8001eaa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001eac:	e005      	b.n	8001eba <set_motor_pwm+0xd2>
	  htim1.Instance->CCR4 = motor_pwm[3] ;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3306      	adds	r3, #6
 8001eb2:	881a      	ldrh	r2, [r3, #0]
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <set_motor_pwm+0xe0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	240000f8 	.word	0x240000f8

08001ecc <set_motor_pwm_zero>:


void set_motor_pwm_zero(uint16_t motor_pwm[])
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  motor_pwm[0] = 0;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	801a      	strh	r2, [r3, #0]
  motor_pwm[1] = 0;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3302      	adds	r3, #2
 8001ede:	2200      	movs	r2, #0
 8001ee0:	801a      	strh	r2, [r3, #0]
  motor_pwm[2] = 0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	801a      	strh	r2, [r3, #0]
  motor_pwm[3] = 0;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3306      	adds	r3, #6
 8001eee:	2200      	movs	r2, #0
 8001ef0:	801a      	strh	r2, [r3, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <orientation_init>:
static int gyro_data[3];
static int gyro_delta[3];
static int prev_tick_ms = 0;
static float alpha = 0.01f;

void orientation_init(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
    imu_calibrate(euler_offset, gyro_offset);
 8001f04:	4905      	ldr	r1, [pc, #20]	@ (8001f1c <orientation_init+0x1c>)
 8001f06:	4806      	ldr	r0, [pc, #24]	@ (8001f20 <orientation_init+0x20>)
 8001f08:	f7fe fce0 	bl	80008cc <imu_calibrate>
    prev_tick_ms = HAL_GetTick();
 8001f0c:	f000 fd10 	bl	8002930 <HAL_GetTick>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b03      	ldr	r3, [pc, #12]	@ (8001f24 <orientation_init+0x24>)
 8001f16:	601a      	str	r2, [r3, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	240003cc 	.word	0x240003cc
 8001f20:	240003c4 	.word	0x240003c4
 8001f24:	240003f0 	.word	0x240003f0

08001f28 <orientation_update>:

void orientation_update(int euler_est[3]){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	short int imu_raw[7];
    int acc_euler[3];

    imu_read_all(imu_raw);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fca7 	bl	8000888 <imu_read_all>
    filter_compute_gravity_angles(imu_raw[0], imu_raw[1], imu_raw[2], acc_euler);
 8001f3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f4a:	ee07 3a10 	vmov	s14, r3
 8001f4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f52:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f56:	ee06 3a90 	vmov	s13, r3
 8001f5a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	4618      	mov	r0, r3
 8001f64:	eeb0 1a66 	vmov.f32	s2, s13
 8001f68:	eef0 0a47 	vmov.f32	s1, s14
 8001f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f70:	f7fe fb36 	bl	80005e0 <filter_compute_gravity_angles>

    if (acc_euler[0] > 0) acc_euler[0] -= 360000;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	dd03      	ble.n	8001f82 <orientation_update+0x5a>
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	4b28      	ldr	r3, [pc, #160]	@ (8002020 <orientation_update+0xf8>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	60bb      	str	r3, [r7, #8]

    acc_euler[0] -= euler_offset[0];
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <orientation_update+0xfc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	60bb      	str	r3, [r7, #8]
    acc_euler[1] -= euler_offset[1];
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4b25      	ldr	r3, [pc, #148]	@ (8002024 <orientation_update+0xfc>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < 3; i++) {
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9a:	e029      	b.n	8001ff0 <orientation_update+0xc8>
        gyro_delta[i] = imu_raw[4 + i] - gyro_offset[i] - gyro_data[i];
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	3328      	adds	r3, #40	@ 0x28
 8001fa4:	443b      	add	r3, r7
 8001fa6:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8001faa:	4619      	mov	r1, r3
 8001fac:	4a1e      	ldr	r2, [pc, #120]	@ (8002028 <orientation_update+0x100>)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	1aca      	subs	r2, r1, r3
 8001fb6:	491d      	ldr	r1, [pc, #116]	@ (800202c <orientation_update+0x104>)
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	491b      	ldr	r1, [pc, #108]	@ (8002030 <orientation_update+0x108>)
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        gyro_data[i]  = imu_raw[4 + i] - gyro_offset[i];
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	3304      	adds	r3, #4
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	3328      	adds	r3, #40	@ 0x28
 8001fd0:	443b      	add	r3, r7
 8001fd2:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4a13      	ldr	r2, [pc, #76]	@ (8002028 <orientation_update+0x100>)
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	1aca      	subs	r2, r1, r3
 8001fe2:	4912      	ldr	r1, [pc, #72]	@ (800202c <orientation_update+0x104>)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	3301      	adds	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	ddd2      	ble.n	8001f9c <orientation_update+0x74>
    }

    filter_integrate_gyro(gyro_data, gyro_delta, euler_est, &prev_tick_ms);
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <orientation_update+0x10c>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	490d      	ldr	r1, [pc, #52]	@ (8002030 <orientation_update+0x108>)
 8001ffc:	480b      	ldr	r0, [pc, #44]	@ (800202c <orientation_update+0x104>)
 8001ffe:	f7fe fb55 	bl	80006ac <filter_integrate_gyro>
    filter_fuse_angles(acc_euler, euler_est, alpha);
 8002002:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <orientation_update+0x110>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	f107 0308 	add.w	r3, r7, #8
 800200c:	eeb0 0a67 	vmov.f32	s0, s15
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fbb8 	bl	8000788 <filter_fuse_angles>
}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	@ 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	fffa81c0 	.word	0xfffa81c0
 8002024:	240003c4 	.word	0x240003c4
 8002028:	240003cc 	.word	0x240003cc
 800202c:	240003d8 	.word	0x240003d8
 8002030:	240003e4 	.word	0x240003e4
 8002034:	240003f0 	.word	0x240003f0
 8002038:	24000024 	.word	0x24000024

0800203c <get_target_euler>:
const float max_yaw_rad = PI*YAW_MAX_DEG/180.0f;
int t1;


void get_target_euler(Euler *euler_rc, Radio *rc_comm)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
    t1 = rc_comm->ELE;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	edd3 7a01 	vldr	s15, [r3, #4]
 800204c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002050:	ee17 2a90 	vmov	r2, s15
 8002054:	4b49      	ldr	r3, [pc, #292]	@ (800217c <get_target_euler+0x140>)
 8002056:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8002058:	4b48      	ldr	r3, [pc, #288]	@ (800217c <get_target_euler+0x140>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002060:	dd04      	ble.n	800206c <get_target_euler+0x30>
        t1 = RC_FULLSCALE;
 8002062:	4b46      	ldr	r3, [pc, #280]	@ (800217c <get_target_euler+0x140>)
 8002064:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	e007      	b.n	800207c <get_target_euler+0x40>
    else if (t1 < -RC_FULLSCALE)
 800206c:	4b43      	ldr	r3, [pc, #268]	@ (800217c <get_target_euler+0x140>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8002074:	da02      	bge.n	800207c <get_target_euler+0x40>
        t1 = - RC_FULLSCALE;
 8002076:	4b41      	ldr	r3, [pc, #260]	@ (800217c <get_target_euler+0x140>)
 8002078:	4a41      	ldr	r2, [pc, #260]	@ (8002180 <get_target_euler+0x144>)
 800207a:	601a      	str	r2, [r3, #0]
    euler_rc->pitch = -t1 * max_pitch_rad / RC_FULLSCALE;
 800207c:	4b3f      	ldr	r3, [pc, #252]	@ (800217c <get_target_euler+0x140>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	425b      	negs	r3, r3
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002184 <get_target_euler+0x148>
 800208e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002092:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002188 <get_target_euler+0x14c>
 8002096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm->AIL;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020aa:	ee17 2a90 	vmov	r2, s15
 80020ae:	4b33      	ldr	r3, [pc, #204]	@ (800217c <get_target_euler+0x140>)
 80020b0:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 80020b2:	4b32      	ldr	r3, [pc, #200]	@ (800217c <get_target_euler+0x140>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020ba:	dd04      	ble.n	80020c6 <get_target_euler+0x8a>
        t1 = RC_FULLSCALE;
 80020bc:	4b2f      	ldr	r3, [pc, #188]	@ (800217c <get_target_euler+0x140>)
 80020be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e007      	b.n	80020d6 <get_target_euler+0x9a>
    else if (t1 < -RC_FULLSCALE)
 80020c6:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <get_target_euler+0x140>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80020ce:	da02      	bge.n	80020d6 <get_target_euler+0x9a>
        t1 = - RC_FULLSCALE;
 80020d0:	4b2a      	ldr	r3, [pc, #168]	@ (800217c <get_target_euler+0x140>)
 80020d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002180 <get_target_euler+0x144>)
 80020d4:	601a      	str	r2, [r3, #0]
    euler_rc->roll = -t1 * max_roll_rad / RC_FULLSCALE;
 80020d6:	4b29      	ldr	r3, [pc, #164]	@ (800217c <get_target_euler+0x140>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	425b      	negs	r3, r3
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002184 <get_target_euler+0x148>
 80020e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020ec:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002188 <get_target_euler+0x14c>
 80020f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	edc3 7a01 	vstr	s15, [r3, #4]

    t1 = rc_comm->RUD;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002104:	ee17 2a90 	vmov	r2, s15
 8002108:	4b1c      	ldr	r3, [pc, #112]	@ (800217c <get_target_euler+0x140>)
 800210a:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 800210c:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <get_target_euler+0x140>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002114:	dd04      	ble.n	8002120 <get_target_euler+0xe4>
        t1 = RC_FULLSCALE;
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <get_target_euler+0x140>)
 8002118:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e007      	b.n	8002130 <get_target_euler+0xf4>
    else if (t1 < -RC_FULLSCALE)
 8002120:	4b16      	ldr	r3, [pc, #88]	@ (800217c <get_target_euler+0x140>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8002128:	da02      	bge.n	8002130 <get_target_euler+0xf4>
        t1 = - RC_FULLSCALE;
 800212a:	4b14      	ldr	r3, [pc, #80]	@ (800217c <get_target_euler+0x140>)
 800212c:	4a14      	ldr	r2, [pc, #80]	@ (8002180 <get_target_euler+0x144>)
 800212e:	601a      	str	r2, [r3, #0]

    if(t1 > YAW_DEAD_THR)
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <get_target_euler+0x140>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002138:	dd0a      	ble.n	8002150 <get_target_euler+0x114>
    {
        euler_rc->yaw = euler_rc->yaw + max_yaw_rad;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002140:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800218c <get_target_euler+0x150>
 8002144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    else if(t1 < -YAW_DEAD_THR)
    {
        euler_rc->yaw = euler_rc->yaw - max_yaw_rad;
    }
}
 800214e:	e00e      	b.n	800216e <get_target_euler+0x132>
    else if(t1 < -YAW_DEAD_THR)
 8002150:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <get_target_euler+0x140>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002158:	da09      	bge.n	800216e <get_target_euler+0x132>
        euler_rc->yaw = euler_rc->yaw - max_yaw_rad;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002160:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800218c <get_target_euler+0x150>
 8002164:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	240003f4 	.word	0x240003f4
 8002180:	fffffc18 	.word	0xfffffc18
 8002184:	3f060a92 	.word	0x3f060a92
 8002188:	447a0000 	.word	0x447a0000
 800218c:	3cab92a6 	.word	0x3cab92a6

08002190 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <HAL_MspInit+0x30>)
 8002198:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800219c:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <HAL_MspInit+0x30>)
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_MspInit+0x30>)
 80021a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	58024400 	.word	0x58024400

080021c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b0ba      	sub	sp, #232	@ 0xe8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	22c0      	movs	r2, #192	@ 0xc0
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f007 fe03 	bl	8009df0 <memset>
  if(hi2c->Instance==I2C1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a27      	ldr	r2, [pc, #156]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d146      	bne.n	8002282 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021f4:	f04f 0208 	mov.w	r2, #8
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002200:	2300      	movs	r3, #0
 8002202:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fc9a 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002216:	f7ff fde1 	bl	8001ddc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <HAL_I2C_MspInit+0xcc>)
 800221c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002220:	4a1b      	ldr	r2, [pc, #108]	@ (8002290 <HAL_I2C_MspInit+0xcc>)
 8002222:	f043 0302 	orr.w	r3, r3, #2
 8002226:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800222a:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <HAL_I2C_MspInit+0xcc>)
 800222c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002238:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800223c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002240:	2312      	movs	r3, #18
 8002242:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002252:	2304      	movs	r3, #4
 8002254:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800225c:	4619      	mov	r1, r3
 800225e:	480d      	ldr	r0, [pc, #52]	@ (8002294 <HAL_I2C_MspInit+0xd0>)
 8002260:	f000 fca6 	bl	8002bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002264:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <HAL_I2C_MspInit+0xcc>)
 8002266:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800226a:	4a09      	ldr	r2, [pc, #36]	@ (8002290 <HAL_I2C_MspInit+0xcc>)
 800226c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002270:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_I2C_MspInit+0xcc>)
 8002276:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800227a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002282:	bf00      	nop
 8002284:	37e8      	adds	r7, #232	@ 0xe8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40005400 	.word	0x40005400
 8002290:	58024400 	.word	0x58024400
 8002294:	58020400 	.word	0x58020400

08002298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b090      	sub	sp, #64	@ 0x40
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a82      	ldr	r2, [pc, #520]	@ (80024c0 <HAL_TIM_Base_MspInit+0x228>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10f      	bne.n	80022da <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ba:	4b82      	ldr	r3, [pc, #520]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80022bc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80022c0:	4a80      	ldr	r2, [pc, #512]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80022ca:	4b7e      	ldr	r3, [pc, #504]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80022cc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80022d8:	e0ee      	b.n	80024b8 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM3)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7a      	ldr	r2, [pc, #488]	@ (80024c8 <HAL_TIM_Base_MspInit+0x230>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d136      	bne.n	8002352 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022e4:	4b77      	ldr	r3, [pc, #476]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80022e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80022ea:	4a76      	ldr	r2, [pc, #472]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80022f4:	4b73      	ldr	r3, [pc, #460]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80022f6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	4b70      	ldr	r3, [pc, #448]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 8002304:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002308:	4a6e      	ldr	r2, [pc, #440]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002312:	4b6c      	ldr	r3, [pc, #432]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 8002314:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002320:	2310      	movs	r3, #16
 8002322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002330:	2302      	movs	r3, #2
 8002332:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002334:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002338:	4619      	mov	r1, r3
 800233a:	4864      	ldr	r0, [pc, #400]	@ (80024cc <HAL_TIM_Base_MspInit+0x234>)
 800233c:	f000 fc38 	bl	8002bb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	201d      	movs	r0, #29
 8002346:	f000 fbfe 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800234a:	201d      	movs	r0, #29
 800234c:	f000 fc15 	bl	8002b7a <HAL_NVIC_EnableIRQ>
}
 8002350:	e0b2      	b.n	80024b8 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM4)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5e      	ldr	r2, [pc, #376]	@ (80024d0 <HAL_TIM_Base_MspInit+0x238>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d136      	bne.n	80023ca <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800235c:	4b59      	ldr	r3, [pc, #356]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 800235e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002362:	4a58      	ldr	r2, [pc, #352]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800236c:	4b55      	ldr	r3, [pc, #340]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 800236e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	4b52      	ldr	r3, [pc, #328]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 800237c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002380:	4a50      	ldr	r2, [pc, #320]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 8002382:	f043 0302 	orr.w	r3, r3, #2
 8002386:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800238a:	4b4e      	ldr	r3, [pc, #312]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 800238c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002398:	2340      	movs	r3, #64	@ 0x40
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239c:	2302      	movs	r3, #2
 800239e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023a8:	2302      	movs	r3, #2
 80023aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023b0:	4619      	mov	r1, r3
 80023b2:	4846      	ldr	r0, [pc, #280]	@ (80024cc <HAL_TIM_Base_MspInit+0x234>)
 80023b4:	f000 fbfc 	bl	8002bb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	201e      	movs	r0, #30
 80023be:	f000 fbc2 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023c2:	201e      	movs	r0, #30
 80023c4:	f000 fbd9 	bl	8002b7a <HAL_NVIC_EnableIRQ>
}
 80023c8:	e076      	b.n	80024b8 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM5)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a41      	ldr	r2, [pc, #260]	@ (80024d4 <HAL_TIM_Base_MspInit+0x23c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d136      	bne.n	8002442 <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023d4:	4b3b      	ldr	r3, [pc, #236]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80023d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80023da:	4a3a      	ldr	r2, [pc, #232]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80023e4:	4b37      	ldr	r3, [pc, #220]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80023e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	4b34      	ldr	r3, [pc, #208]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80023f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023f8:	4a32      	ldr	r2, [pc, #200]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002402:	4b30      	ldr	r3, [pc, #192]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 8002404:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002410:	2301      	movs	r3, #1
 8002412:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002420:	2302      	movs	r3, #2
 8002422:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	482b      	ldr	r0, [pc, #172]	@ (80024d8 <HAL_TIM_Base_MspInit+0x240>)
 800242c:	f000 fbc0 	bl	8002bb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2100      	movs	r1, #0
 8002434:	2032      	movs	r0, #50	@ 0x32
 8002436:	f000 fb86 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800243a:	2032      	movs	r0, #50	@ 0x32
 800243c:	f000 fb9d 	bl	8002b7a <HAL_NVIC_EnableIRQ>
}
 8002440:	e03a      	b.n	80024b8 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM15)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a25      	ldr	r2, [pc, #148]	@ (80024dc <HAL_TIM_Base_MspInit+0x244>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d135      	bne.n	80024b8 <HAL_TIM_Base_MspInit+0x220>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800244c:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 800244e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002452:	4a1c      	ldr	r2, [pc, #112]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002458:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800245c:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 800245e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800246a:	4b16      	ldr	r3, [pc, #88]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 800246c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002470:	4a14      	ldr	r2, [pc, #80]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800247a:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_TIM_Base_MspInit+0x22c>)
 800247c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002488:	2320      	movs	r3, #32
 800248a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002498:	2304      	movs	r3, #4
 800249a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800249c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024a0:	4619      	mov	r1, r3
 80024a2:	480f      	ldr	r0, [pc, #60]	@ (80024e0 <HAL_TIM_Base_MspInit+0x248>)
 80024a4:	f000 fb84 	bl	8002bb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2100      	movs	r1, #0
 80024ac:	2074      	movs	r0, #116	@ 0x74
 80024ae:	f000 fb4a 	bl	8002b46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80024b2:	2074      	movs	r0, #116	@ 0x74
 80024b4:	f000 fb61 	bl	8002b7a <HAL_NVIC_EnableIRQ>
}
 80024b8:	bf00      	nop
 80024ba:	3740      	adds	r7, #64	@ 0x40
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40010000 	.word	0x40010000
 80024c4:	58024400 	.word	0x58024400
 80024c8:	40000400 	.word	0x40000400
 80024cc:	58020400 	.word	0x58020400
 80024d0:	40000800 	.word	0x40000800
 80024d4:	40000c00 	.word	0x40000c00
 80024d8:	58020000 	.word	0x58020000
 80024dc:	40014000 	.word	0x40014000
 80024e0:	58021000 	.word	0x58021000

080024e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a13      	ldr	r2, [pc, #76]	@ (8002550 <HAL_TIM_MspPostInit+0x6c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d11f      	bne.n	8002546 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002506:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <HAL_TIM_MspPostInit+0x70>)
 8002508:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800250c:	4a11      	ldr	r2, [pc, #68]	@ (8002554 <HAL_TIM_MspPostInit+0x70>)
 800250e:	f043 0310 	orr.w	r3, r3, #16
 8002512:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002516:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <HAL_TIM_MspPostInit+0x70>)
 8002518:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002524:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002528:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002536:	2301      	movs	r3, #1
 8002538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	@ (8002558 <HAL_TIM_MspPostInit+0x74>)
 8002542:	f000 fb35 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002546:	bf00      	nop
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40010000 	.word	0x40010000
 8002554:	58024400 	.word	0x58024400
 8002558:	58021000 	.word	0x58021000

0800255c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b0ba      	sub	sp, #232	@ 0xe8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	22c0      	movs	r2, #192	@ 0xc0
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f007 fc37 	bl	8009df0 <memset>
  if(huart->Instance==USART3)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a27      	ldr	r2, [pc, #156]	@ (8002624 <HAL_UART_MspInit+0xc8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d146      	bne.n	800261a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800258c:	f04f 0202 	mov.w	r2, #2
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 face 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80025ae:	f7ff fc15 	bl	8001ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002628 <HAL_UART_MspInit+0xcc>)
 80025b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80025b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <HAL_UART_MspInit+0xcc>)
 80025ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025be:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80025c2:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <HAL_UART_MspInit+0xcc>)
 80025c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80025c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d0:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <HAL_UART_MspInit+0xcc>)
 80025d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025d6:	4a14      	ldr	r2, [pc, #80]	@ (8002628 <HAL_UART_MspInit+0xcc>)
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <HAL_UART_MspInit+0xcc>)
 80025e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80025ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002608:	2307      	movs	r3, #7
 800260a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800260e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002612:	4619      	mov	r1, r3
 8002614:	4805      	ldr	r0, [pc, #20]	@ (800262c <HAL_UART_MspInit+0xd0>)
 8002616:	f000 facb 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800261a:	bf00      	nop
 800261c:	37e8      	adds	r7, #232	@ 0xe8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40004800 	.word	0x40004800
 8002628:	58024400 	.word	0x58024400
 800262c:	58020c00 	.word	0x58020c00

08002630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <NMI_Handler+0x4>

08002638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <HardFault_Handler+0x4>

08002640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <MemManage_Handler+0x4>

08002648 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <BusFault_Handler+0x4>

08002650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <UsageFault_Handler+0x4>

08002658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002686:	f000 f93f 	bl	8002908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002694:	4802      	ldr	r0, [pc, #8]	@ (80026a0 <TIM3_IRQHandler+0x10>)
 8002696:	f004 fde1 	bl	800725c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	24000144 	.word	0x24000144

080026a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026a8:	4802      	ldr	r0, [pc, #8]	@ (80026b4 <TIM4_IRQHandler+0x10>)
 80026aa:	f004 fdd7 	bl	800725c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	24000190 	.word	0x24000190

080026b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80026bc:	4802      	ldr	r0, [pc, #8]	@ (80026c8 <TIM5_IRQHandler+0x10>)
 80026be:	f004 fdcd 	bl	800725c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	240001dc 	.word	0x240001dc

080026cc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80026d0:	4802      	ldr	r0, [pc, #8]	@ (80026dc <TIM15_IRQHandler+0x10>)
 80026d2:	f004 fdc3 	bl	800725c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	24000228 	.word	0x24000228

080026e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026e4:	4b32      	ldr	r3, [pc, #200]	@ (80027b0 <SystemInit+0xd0>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ea:	4a31      	ldr	r2, [pc, #196]	@ (80027b0 <SystemInit+0xd0>)
 80026ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026f4:	4b2f      	ldr	r3, [pc, #188]	@ (80027b4 <SystemInit+0xd4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d807      	bhi.n	8002710 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002700:	4b2c      	ldr	r3, [pc, #176]	@ (80027b4 <SystemInit+0xd4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 030f 	bic.w	r3, r3, #15
 8002708:	4a2a      	ldr	r2, [pc, #168]	@ (80027b4 <SystemInit+0xd4>)
 800270a:	f043 0303 	orr.w	r3, r3, #3
 800270e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002710:	4b29      	ldr	r3, [pc, #164]	@ (80027b8 <SystemInit+0xd8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a28      	ldr	r2, [pc, #160]	@ (80027b8 <SystemInit+0xd8>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800271c:	4b26      	ldr	r3, [pc, #152]	@ (80027b8 <SystemInit+0xd8>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002722:	4b25      	ldr	r3, [pc, #148]	@ (80027b8 <SystemInit+0xd8>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4924      	ldr	r1, [pc, #144]	@ (80027b8 <SystemInit+0xd8>)
 8002728:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <SystemInit+0xdc>)
 800272a:	4013      	ands	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800272e:	4b21      	ldr	r3, [pc, #132]	@ (80027b4 <SystemInit+0xd4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d007      	beq.n	800274a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800273a:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <SystemInit+0xd4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 030f 	bic.w	r3, r3, #15
 8002742:	4a1c      	ldr	r2, [pc, #112]	@ (80027b4 <SystemInit+0xd4>)
 8002744:	f043 0303 	orr.w	r3, r3, #3
 8002748:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800274a:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <SystemInit+0xd8>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002750:	4b19      	ldr	r3, [pc, #100]	@ (80027b8 <SystemInit+0xd8>)
 8002752:	2200      	movs	r2, #0
 8002754:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002756:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <SystemInit+0xd8>)
 8002758:	2200      	movs	r2, #0
 800275a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800275c:	4b16      	ldr	r3, [pc, #88]	@ (80027b8 <SystemInit+0xd8>)
 800275e:	4a18      	ldr	r2, [pc, #96]	@ (80027c0 <SystemInit+0xe0>)
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <SystemInit+0xd8>)
 8002764:	4a17      	ldr	r2, [pc, #92]	@ (80027c4 <SystemInit+0xe4>)
 8002766:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002768:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <SystemInit+0xd8>)
 800276a:	4a17      	ldr	r2, [pc, #92]	@ (80027c8 <SystemInit+0xe8>)
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800276e:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <SystemInit+0xd8>)
 8002770:	2200      	movs	r2, #0
 8002772:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002774:	4b10      	ldr	r3, [pc, #64]	@ (80027b8 <SystemInit+0xd8>)
 8002776:	4a14      	ldr	r2, [pc, #80]	@ (80027c8 <SystemInit+0xe8>)
 8002778:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800277a:	4b0f      	ldr	r3, [pc, #60]	@ (80027b8 <SystemInit+0xd8>)
 800277c:	2200      	movs	r2, #0
 800277e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002780:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <SystemInit+0xd8>)
 8002782:	4a11      	ldr	r2, [pc, #68]	@ (80027c8 <SystemInit+0xe8>)
 8002784:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002786:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <SystemInit+0xd8>)
 8002788:	2200      	movs	r2, #0
 800278a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800278c:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <SystemInit+0xd8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a09      	ldr	r2, [pc, #36]	@ (80027b8 <SystemInit+0xd8>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002796:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002798:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <SystemInit+0xd8>)
 800279a:	2200      	movs	r2, #0
 800279c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <SystemInit+0xec>)
 80027a0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00
 80027b4:	52002000 	.word	0x52002000
 80027b8:	58024400 	.word	0x58024400
 80027bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80027c0:	02020200 	.word	0x02020200
 80027c4:	01ff0000 	.word	0x01ff0000
 80027c8:	01010280 	.word	0x01010280
 80027cc:	52004000 	.word	0x52004000

080027d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002808 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027d4:	f7ff ff84 	bl	80026e0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027d8:	480c      	ldr	r0, [pc, #48]	@ (800280c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027da:	490d      	ldr	r1, [pc, #52]	@ (8002810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e0:	e002      	b.n	80027e8 <LoopCopyDataInit>

080027e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e6:	3304      	adds	r3, #4

080027e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80027e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ec:	d3f9      	bcc.n	80027e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027f0:	4c0a      	ldr	r4, [pc, #40]	@ (800281c <LoopFillZerobss+0x22>)
  movs r3, #0
 80027f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f4:	e001      	b.n	80027fa <LoopFillZerobss>

080027f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f8:	3204      	adds	r2, #4

080027fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027fc:	d3fb      	bcc.n	80027f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027fe:	f007 fb05 	bl	8009e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002802:	f7fe f8f5 	bl	80009f0 <main>
  bx  lr
 8002806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002808:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800280c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002810:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8002814:	0800a300 	.word	0x0800a300
  ldr r2, =_sbss
 8002818:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800281c:	24000534 	.word	0x24000534

08002820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC_IRQHandler>
	...

08002824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282a:	2003      	movs	r0, #3
 800282c:	f000 f980 	bl	8002b30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002830:	f001 ffb2 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <HAL_Init+0x68>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	4913      	ldr	r1, [pc, #76]	@ (8002890 <HAL_Init+0x6c>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
 800284c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800284e:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <HAL_Init+0x68>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	4a0e      	ldr	r2, [pc, #56]	@ (8002890 <HAL_Init+0x6c>)
 8002858:	5cd3      	ldrb	r3, [r2, r3]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	4a0b      	ldr	r2, [pc, #44]	@ (8002894 <HAL_Init+0x70>)
 8002866:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002868:	4a0b      	ldr	r2, [pc, #44]	@ (8002898 <HAL_Init+0x74>)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800286e:	2000      	movs	r0, #0
 8002870:	f000 f814 	bl	800289c <HAL_InitTick>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e002      	b.n	8002884 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800287e:	f7ff fc87 	bl	8002190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	58024400 	.word	0x58024400
 8002890:	0800a248 	.word	0x0800a248
 8002894:	2400002c 	.word	0x2400002c
 8002898:	24000028 	.word	0x24000028

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028a4:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <HAL_InitTick+0x60>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e021      	b.n	80028f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028b0:	4b13      	ldr	r3, [pc, #76]	@ (8002900 <HAL_InitTick+0x64>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <HAL_InitTick+0x60>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028be:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f965 	bl	8002b96 <HAL_SYSTICK_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00e      	b.n	80028f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b0f      	cmp	r3, #15
 80028da:	d80a      	bhi.n	80028f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028dc:	2200      	movs	r2, #0
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028e4:	f000 f92f 	bl	8002b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e8:	4a06      	ldr	r2, [pc, #24]	@ (8002904 <HAL_InitTick+0x68>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e000      	b.n	80028f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	24000034 	.word	0x24000034
 8002900:	24000028 	.word	0x24000028
 8002904:	24000030 	.word	0x24000030

08002908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_IncTick+0x20>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_IncTick+0x24>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4413      	add	r3, r2
 8002918:	4a04      	ldr	r2, [pc, #16]	@ (800292c <HAL_IncTick+0x24>)
 800291a:	6013      	str	r3, [r2, #0]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	24000034 	.word	0x24000034
 800292c:	240003f8 	.word	0x240003f8

08002930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return uwTick;
 8002934:	4b03      	ldr	r3, [pc, #12]	@ (8002944 <HAL_GetTick+0x14>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	240003f8 	.word	0x240003f8

08002948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002950:	f7ff ffee 	bl	8002930 <HAL_GetTick>
 8002954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002960:	d005      	beq.n	800296e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002962:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <HAL_Delay+0x44>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800296e:	bf00      	nop
 8002970:	f7ff ffde 	bl	8002930 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	429a      	cmp	r2, r3
 800297e:	d8f7      	bhi.n	8002970 <HAL_Delay+0x28>
  {
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	24000034 	.word	0x24000034

08002990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <__NVIC_SetPriorityGrouping+0x40>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029b8:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029be:	4a04      	ldr	r2, [pc, #16]	@ (80029d0 <__NVIC_SetPriorityGrouping+0x40>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	60d3      	str	r3, [r2, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00
 80029d4:	05fa0000 	.word	0x05fa0000

080029d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029dc:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <__NVIC_GetPriorityGrouping+0x18>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	f003 0307 	and.w	r3, r3, #7
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	db0b      	blt.n	8002a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	4907      	ldr	r1, [pc, #28]	@ (8002a2c <__NVIC_EnableIRQ+0x38>)
 8002a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	2001      	movs	r0, #1
 8002a16:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000e100 	.word	0xe000e100

08002a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	db0a      	blt.n	8002a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	490c      	ldr	r1, [pc, #48]	@ (8002a7c <__NVIC_SetPriority+0x4c>)
 8002a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a4e:	0112      	lsls	r2, r2, #4
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	440b      	add	r3, r1
 8002a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a58:	e00a      	b.n	8002a70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4908      	ldr	r1, [pc, #32]	@ (8002a80 <__NVIC_SetPriority+0x50>)
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	3b04      	subs	r3, #4
 8002a68:	0112      	lsls	r2, r2, #4
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	761a      	strb	r2, [r3, #24]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000e100 	.word	0xe000e100
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	@ 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f1c3 0307 	rsb	r3, r3, #7
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	bf28      	it	cs
 8002aa2:	2304      	movcs	r3, #4
 8002aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d902      	bls.n	8002ab4 <NVIC_EncodePriority+0x30>
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3b03      	subs	r3, #3
 8002ab2:	e000      	b.n	8002ab6 <NVIC_EncodePriority+0x32>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	43d9      	mvns	r1, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	4313      	orrs	r3, r2
         );
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3724      	adds	r7, #36	@ 0x24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002afc:	d301      	bcc.n	8002b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00f      	b.n	8002b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b02:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <SysTick_Config+0x40>)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b0a:	210f      	movs	r1, #15
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b10:	f7ff ff8e 	bl	8002a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b14:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <SysTick_Config+0x40>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b1a:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <SysTick_Config+0x40>)
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	e000e010 	.word	0xe000e010

08002b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ff29 	bl	8002990 <__NVIC_SetPriorityGrouping>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b086      	sub	sp, #24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b54:	f7ff ff40 	bl	80029d8 <__NVIC_GetPriorityGrouping>
 8002b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f7ff ff90 	bl	8002a84 <NVIC_EncodePriority>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff5f 	bl	8002a30 <__NVIC_SetPriority>
}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff33 	bl	80029f4 <__NVIC_EnableIRQ>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffa4 	bl	8002aec <SysTick_Config>
 8002ba4:	4603      	mov	r3, r0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	@ 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002bbe:	4b89      	ldr	r3, [pc, #548]	@ (8002de4 <HAL_GPIO_Init+0x234>)
 8002bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bc2:	e194      	b.n	8002eee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8186 	beq.w	8002ee8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d005      	beq.n	8002bf4 <HAL_GPIO_Init+0x44>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d130      	bne.n	8002c56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f003 0201 	and.w	r2, r3, #1
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d017      	beq.n	8002c92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d123      	bne.n	8002ce6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	08da      	lsrs	r2, r3, #3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3208      	adds	r2, #8
 8002ce0:	69b9      	ldr	r1, [r7, #24]
 8002ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f003 0203 	and.w	r2, r3, #3
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 80e0 	beq.w	8002ee8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d28:	4b2f      	ldr	r3, [pc, #188]	@ (8002de8 <HAL_GPIO_Init+0x238>)
 8002d2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8002de8 <HAL_GPIO_Init+0x238>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002d38:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <HAL_GPIO_Init+0x238>)
 8002d3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d46:	4a29      	ldr	r2, [pc, #164]	@ (8002dec <HAL_GPIO_Init+0x23c>)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	089b      	lsrs	r3, r3, #2
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	@ (8002df0 <HAL_GPIO_Init+0x240>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d052      	beq.n	8002e18 <HAL_GPIO_Init+0x268>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1f      	ldr	r2, [pc, #124]	@ (8002df4 <HAL_GPIO_Init+0x244>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d031      	beq.n	8002dde <HAL_GPIO_Init+0x22e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002df8 <HAL_GPIO_Init+0x248>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d02b      	beq.n	8002dda <HAL_GPIO_Init+0x22a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <HAL_GPIO_Init+0x24c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d025      	beq.n	8002dd6 <HAL_GPIO_Init+0x226>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002e00 <HAL_GPIO_Init+0x250>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01f      	beq.n	8002dd2 <HAL_GPIO_Init+0x222>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a1b      	ldr	r2, [pc, #108]	@ (8002e04 <HAL_GPIO_Init+0x254>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d019      	beq.n	8002dce <HAL_GPIO_Init+0x21e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002e08 <HAL_GPIO_Init+0x258>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_GPIO_Init+0x21a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a19      	ldr	r2, [pc, #100]	@ (8002e0c <HAL_GPIO_Init+0x25c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00d      	beq.n	8002dc6 <HAL_GPIO_Init+0x216>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a18      	ldr	r2, [pc, #96]	@ (8002e10 <HAL_GPIO_Init+0x260>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <HAL_GPIO_Init+0x212>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a17      	ldr	r2, [pc, #92]	@ (8002e14 <HAL_GPIO_Init+0x264>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <HAL_GPIO_Init+0x20e>
 8002dba:	2309      	movs	r3, #9
 8002dbc:	e02d      	b.n	8002e1a <HAL_GPIO_Init+0x26a>
 8002dbe:	230a      	movs	r3, #10
 8002dc0:	e02b      	b.n	8002e1a <HAL_GPIO_Init+0x26a>
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	e029      	b.n	8002e1a <HAL_GPIO_Init+0x26a>
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	e027      	b.n	8002e1a <HAL_GPIO_Init+0x26a>
 8002dca:	2306      	movs	r3, #6
 8002dcc:	e025      	b.n	8002e1a <HAL_GPIO_Init+0x26a>
 8002dce:	2305      	movs	r3, #5
 8002dd0:	e023      	b.n	8002e1a <HAL_GPIO_Init+0x26a>
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	e021      	b.n	8002e1a <HAL_GPIO_Init+0x26a>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e01f      	b.n	8002e1a <HAL_GPIO_Init+0x26a>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e01d      	b.n	8002e1a <HAL_GPIO_Init+0x26a>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e01b      	b.n	8002e1a <HAL_GPIO_Init+0x26a>
 8002de2:	bf00      	nop
 8002de4:	58000080 	.word	0x58000080
 8002de8:	58024400 	.word	0x58024400
 8002dec:	58000400 	.word	0x58000400
 8002df0:	58020000 	.word	0x58020000
 8002df4:	58020400 	.word	0x58020400
 8002df8:	58020800 	.word	0x58020800
 8002dfc:	58020c00 	.word	0x58020c00
 8002e00:	58021000 	.word	0x58021000
 8002e04:	58021400 	.word	0x58021400
 8002e08:	58021800 	.word	0x58021800
 8002e0c:	58021c00 	.word	0x58021c00
 8002e10:	58022000 	.word	0x58022000
 8002e14:	58022400 	.word	0x58022400
 8002e18:	2300      	movs	r3, #0
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	f002 0203 	and.w	r2, r2, #3
 8002e20:	0092      	lsls	r2, r2, #2
 8002e22:	4093      	lsls	r3, r2
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e2a:	4938      	ldr	r1, [pc, #224]	@ (8002f0c <HAL_GPIO_Init+0x35c>)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3302      	adds	r3, #2
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002e5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002e8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	3301      	adds	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f47f ae63 	bne.w	8002bc4 <HAL_GPIO_Init+0x14>
  }
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	3724      	adds	r7, #36	@ 0x24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	58000400 	.word	0x58000400

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002f2c:	e003      	b.n	8002f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e08b      	b.n	800306e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff f92a 	bl	80021c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2224      	movs	r2, #36	@ 0x24
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d107      	bne.n	8002fbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	e006      	b.n	8002fcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002fca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d108      	bne.n	8002fe6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	e007      	b.n	8002ff6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ff4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <HAL_I2C_Init+0x134>)
 8003002:	430b      	orrs	r3, r1
 8003004:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003014:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69d9      	ldr	r1, [r3, #28]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1a      	ldr	r2, [r3, #32]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	02008000 	.word	0x02008000

0800307c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af02      	add	r7, sp, #8
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	461a      	mov	r2, r3
 8003088:	460b      	mov	r3, r1
 800308a:	817b      	strh	r3, [r7, #10]
 800308c:	4613      	mov	r3, r2
 800308e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b20      	cmp	r3, #32
 800309a:	f040 80fd 	bne.w	8003298 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_I2C_Master_Transmit+0x30>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e0f6      	b.n	800329a <HAL_I2C_Master_Transmit+0x21e>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030b4:	f7ff fc3c 	bl	8002930 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2319      	movs	r3, #25
 80030c0:	2201      	movs	r2, #1
 80030c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fa0a 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0e1      	b.n	800329a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2221      	movs	r2, #33	@ 0x21
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2210      	movs	r2, #16
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	893a      	ldrh	r2, [r7, #8]
 80030f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	2bff      	cmp	r3, #255	@ 0xff
 8003106:	d906      	bls.n	8003116 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	22ff      	movs	r2, #255	@ 0xff
 800310c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800310e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	e007      	b.n	8003126 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003120:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003124:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	2b00      	cmp	r3, #0
 800312c:	d024      	beq.n	8003178 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	781a      	ldrb	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3301      	adds	r3, #1
 8003166:	b2da      	uxtb	r2, r3
 8003168:	8979      	ldrh	r1, [r7, #10]
 800316a:	4b4e      	ldr	r3, [pc, #312]	@ (80032a4 <HAL_I2C_Master_Transmit+0x228>)
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fc05 	bl	8003980 <I2C_TransferConfig>
 8003176:	e066      	b.n	8003246 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317c:	b2da      	uxtb	r2, r3
 800317e:	8979      	ldrh	r1, [r7, #10]
 8003180:	4b48      	ldr	r3, [pc, #288]	@ (80032a4 <HAL_I2C_Master_Transmit+0x228>)
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fbfa 	bl	8003980 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800318c:	e05b      	b.n	8003246 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	6a39      	ldr	r1, [r7, #32]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f9fd 	bl	8003592 <I2C_WaitOnTXISFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e07b      	b.n	800329a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d034      	beq.n	8003246 <HAL_I2C_Master_Transmit+0x1ca>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d130      	bne.n	8003246 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2180      	movs	r1, #128	@ 0x80
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f976 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e04d      	b.n	800329a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	2bff      	cmp	r3, #255	@ 0xff
 8003206:	d90e      	bls.n	8003226 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	22ff      	movs	r2, #255	@ 0xff
 800320c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003212:	b2da      	uxtb	r2, r3
 8003214:	8979      	ldrh	r1, [r7, #10]
 8003216:	2300      	movs	r3, #0
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fbae 	bl	8003980 <I2C_TransferConfig>
 8003224:	e00f      	b.n	8003246 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322a:	b29a      	uxth	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003234:	b2da      	uxtb	r2, r3
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	2300      	movs	r3, #0
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fb9d 	bl	8003980 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d19e      	bne.n	800318e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	6a39      	ldr	r1, [r7, #32]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f9e3 	bl	8003620 <I2C_WaitOnSTOPFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e01a      	b.n	800329a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2220      	movs	r2, #32
 800326a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <HAL_I2C_Master_Transmit+0x22c>)
 8003278:	400b      	ands	r3, r1
 800327a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	80002000 	.word	0x80002000
 80032a8:	fe00e800 	.word	0xfe00e800

080032ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	461a      	mov	r2, r3
 80032b8:	460b      	mov	r3, r1
 80032ba:	817b      	strh	r3, [r7, #10]
 80032bc:	4613      	mov	r3, r2
 80032be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	f040 80db 	bne.w	8003484 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_I2C_Master_Receive+0x30>
 80032d8:	2302      	movs	r3, #2
 80032da:	e0d4      	b.n	8003486 <HAL_I2C_Master_Receive+0x1da>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032e4:	f7ff fb24 	bl	8002930 <HAL_GetTick>
 80032e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	2319      	movs	r3, #25
 80032f0:	2201      	movs	r2, #1
 80032f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f8f2 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0bf      	b.n	8003486 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2222      	movs	r2, #34	@ 0x22
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2210      	movs	r2, #16
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	893a      	ldrh	r2, [r7, #8]
 8003326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	2bff      	cmp	r3, #255	@ 0xff
 8003336:	d90e      	bls.n	8003356 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	22ff      	movs	r2, #255	@ 0xff
 800333c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	b2da      	uxtb	r2, r3
 8003344:	8979      	ldrh	r1, [r7, #10]
 8003346:	4b52      	ldr	r3, [pc, #328]	@ (8003490 <HAL_I2C_Master_Receive+0x1e4>)
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fb16 	bl	8003980 <I2C_TransferConfig>
 8003354:	e06d      	b.n	8003432 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003364:	b2da      	uxtb	r2, r3
 8003366:	8979      	ldrh	r1, [r7, #10]
 8003368:	4b49      	ldr	r3, [pc, #292]	@ (8003490 <HAL_I2C_Master_Receive+0x1e4>)
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 fb05 	bl	8003980 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003376:	e05c      	b.n	8003432 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	6a39      	ldr	r1, [r7, #32]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f993 	bl	80036a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e07c      	b.n	8003486 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d034      	beq.n	8003432 <HAL_I2C_Master_Receive+0x186>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d130      	bne.n	8003432 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2200      	movs	r2, #0
 80033d8:	2180      	movs	r1, #128	@ 0x80
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f880 	bl	80034e0 <I2C_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e04d      	b.n	8003486 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2bff      	cmp	r3, #255	@ 0xff
 80033f2:	d90e      	bls.n	8003412 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	22ff      	movs	r2, #255	@ 0xff
 80033f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	8979      	ldrh	r1, [r7, #10]
 8003402:	2300      	movs	r3, #0
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fab8 	bl	8003980 <I2C_TransferConfig>
 8003410:	e00f      	b.n	8003432 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003420:	b2da      	uxtb	r2, r3
 8003422:	8979      	ldrh	r1, [r7, #10]
 8003424:	2300      	movs	r3, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 faa7 	bl	8003980 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d19d      	bne.n	8003378 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	6a39      	ldr	r1, [r7, #32]
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f8ed 	bl	8003620 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e01a      	b.n	8003486 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2220      	movs	r2, #32
 8003456:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b0c      	ldr	r3, [pc, #48]	@ (8003494 <HAL_I2C_Master_Receive+0x1e8>)
 8003464:	400b      	ands	r3, r1
 8003466:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003480:	2300      	movs	r3, #0
 8003482:	e000      	b.n	8003486 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003484:	2302      	movs	r3, #2
  }
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	80002400 	.word	0x80002400
 8003494:	fe00e800 	.word	0xfe00e800

08003498 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d103      	bne.n	80034b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d007      	beq.n	80034d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	619a      	str	r2, [r3, #24]
  }
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034f0:	e03b      	b.n	800356a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	6839      	ldr	r1, [r7, #0]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f962 	bl	80037c0 <I2C_IsErrorOccurred>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e041      	b.n	800358a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800350c:	d02d      	beq.n	800356a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7ff fa0f 	bl	8002930 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <I2C_WaitOnFlagUntilTimeout+0x44>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d122      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4013      	ands	r3, r2
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	429a      	cmp	r2, r3
 8003540:	d113      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e00f      	b.n	800358a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d0b4      	beq.n	80034f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800359e:	e033      	b.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f90b 	bl	80037c0 <I2C_IsErrorOccurred>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e031      	b.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035ba:	d025      	beq.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7ff f9b8 	bl	8002930 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11a      	bne.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d013      	beq.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e007      	b.n	8003618 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d1c4      	bne.n	80035a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362c:	e02f      	b.n	800368e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f8c4 	bl	80037c0 <I2C_IsErrorOccurred>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e02d      	b.n	800369e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7ff f975 	bl	8002930 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11a      	bne.n	800368e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b20      	cmp	r3, #32
 8003664:	d013      	beq.n	800368e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e007      	b.n	800369e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b20      	cmp	r3, #32
 800369a:	d1c8      	bne.n	800362e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80036b8:	e071      	b.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f87e 	bl	80037c0 <I2C_IsErrorOccurred>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f003 0320 	and.w	r3, r3, #32
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d13b      	bne.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d138      	bne.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d105      	bne.n	80036fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b10      	cmp	r3, #16
 8003708:	d121      	bne.n	800374e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2210      	movs	r2, #16
 8003710:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2204      	movs	r2, #4
 8003716:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2220      	movs	r2, #32
 800371e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6859      	ldr	r1, [r3, #4]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b24      	ldr	r3, [pc, #144]	@ (80037bc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800372c:	400b      	ands	r3, r1
 800372e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
 800374c:	e002      	b.n	8003754 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003754:	f7ff f8ec 	bl	8002930 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d302      	bcc.n	800376a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d119      	bne.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d116      	bne.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d00f      	beq.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d002      	beq.n	80037b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d083      	beq.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	fe00e800 	.word	0xfe00e800

080037c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	@ 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d068      	beq.n	80038be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2210      	movs	r2, #16
 80037f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037f4:	e049      	b.n	800388a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037fc:	d045      	beq.n	800388a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7ff f897 	bl	8002930 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_IsErrorOccurred+0x54>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d13a      	bne.n	800388a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800381e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003826:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003832:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003836:	d121      	bne.n	800387c <I2C_IsErrorOccurred+0xbc>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800383e:	d01d      	beq.n	800387c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003840:	7cfb      	ldrb	r3, [r7, #19]
 8003842:	2b20      	cmp	r3, #32
 8003844:	d01a      	beq.n	800387c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003854:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003856:	f7ff f86b 	bl	8002930 <HAL_GetTick>
 800385a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800385c:	e00e      	b.n	800387c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800385e:	f7ff f867 	bl	8002930 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b19      	cmp	r3, #25
 800386a:	d907      	bls.n	800387c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f043 0320 	orr.w	r3, r3, #32
 8003872:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800387a:	e006      	b.n	800388a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b20      	cmp	r3, #32
 8003888:	d1e9      	bne.n	800385e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d003      	beq.n	80038a0 <I2C_IsErrorOccurred+0xe0>
 8003898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0aa      	beq.n	80037f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d103      	bne.n	80038b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2220      	movs	r2, #32
 80038ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	f043 0308 	orr.w	r3, r3, #8
 80038f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003902:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003924:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800392c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01c      	beq.n	800396e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff fdaf 	bl	8003498 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <I2C_IsErrorOccurred+0x1bc>)
 8003946:	400b      	ands	r3, r1
 8003948:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	431a      	orrs	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800396e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003972:	4618      	mov	r0, r3
 8003974:	3728      	adds	r7, #40	@ 0x28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	fe00e800 	.word	0xfe00e800

08003980 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	460b      	mov	r3, r1
 800398c:	817b      	strh	r3, [r7, #10]
 800398e:	4613      	mov	r3, r2
 8003990:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003992:	897b      	ldrh	r3, [r7, #10]
 8003994:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003998:	7a7b      	ldrb	r3, [r7, #9]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	0d5b      	lsrs	r3, r3, #21
 80039ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039be:	4b08      	ldr	r3, [pc, #32]	@ (80039e0 <I2C_TransferConfig+0x60>)
 80039c0:	430b      	orrs	r3, r1
 80039c2:	43db      	mvns	r3, r3
 80039c4:	ea02 0103 	and.w	r1, r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	03ff63ff 	.word	0x03ff63ff

080039e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d138      	bne.n	8003a6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e032      	b.n	8003a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2224      	movs	r2, #36	@ 0x24
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e000      	b.n	8003a6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d139      	bne.n	8003b04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e033      	b.n	8003b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2224      	movs	r2, #36	@ 0x24
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003acc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	e000      	b.n	8003b06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
  }
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003b1c:	4b29      	ldr	r3, [pc, #164]	@ (8003bc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	2b06      	cmp	r3, #6
 8003b26:	d00a      	beq.n	8003b3e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b28:	4b26      	ldr	r3, [pc, #152]	@ (8003bc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d001      	beq.n	8003b3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e040      	b.n	8003bbc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e03e      	b.n	8003bbc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b3e:	4b21      	ldr	r3, [pc, #132]	@ (8003bc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003b46:	491f      	ldr	r1, [pc, #124]	@ (8003bc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b4e:	f7fe feef 	bl	8002930 <HAL_GetTick>
 8003b52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b54:	e009      	b.n	8003b6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b56:	f7fe feeb 	bl	8002930 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b64:	d901      	bls.n	8003b6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e028      	b.n	8003bbc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b6a:	4b16      	ldr	r3, [pc, #88]	@ (8003bc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b76:	d1ee      	bne.n	8003b56 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b1e      	cmp	r3, #30
 8003b7c:	d008      	beq.n	8003b90 <HAL_PWREx_ConfigSupply+0x7c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b82:	d005      	beq.n	8003b90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b1d      	cmp	r3, #29
 8003b88:	d002      	beq.n	8003b90 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b2d      	cmp	r3, #45	@ 0x2d
 8003b8e:	d114      	bne.n	8003bba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003b90:	f7fe fece 	bl	8002930 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003b96:	e009      	b.n	8003bac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b98:	f7fe feca 	bl	8002930 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ba6:	d901      	bls.n	8003bac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e007      	b.n	8003bbc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb8:	d1ee      	bne.n	8003b98 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	58024800 	.word	0x58024800

08003bc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	@ 0x30
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d102      	bne.n	8003bdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f000 bc1f 	b.w	800441a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80b3 	beq.w	8003d50 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bea:	4b95      	ldr	r3, [pc, #596]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bf4:	4b92      	ldr	r3, [pc, #584]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d007      	beq.n	8003c10 <HAL_RCC_OscConfig+0x48>
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	2b18      	cmp	r3, #24
 8003c04:	d112      	bne.n	8003c2c <HAL_RCC_OscConfig+0x64>
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c10:	4b8b      	ldr	r3, [pc, #556]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8098 	beq.w	8003d4e <HAL_RCC_OscConfig+0x186>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 8093 	bne.w	8003d4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e3f6      	b.n	800441a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x7c>
 8003c36:	4b82      	ldr	r3, [pc, #520]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a81      	ldr	r2, [pc, #516]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e058      	b.n	8003cf6 <HAL_RCC_OscConfig+0x12e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d112      	bne.n	8003c72 <HAL_RCC_OscConfig+0xaa>
 8003c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a7b      	ldr	r2, [pc, #492]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4b79      	ldr	r3, [pc, #484]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a78      	ldr	r2, [pc, #480]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c5e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b76      	ldr	r3, [pc, #472]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a75      	ldr	r2, [pc, #468]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	e041      	b.n	8003cf6 <HAL_RCC_OscConfig+0x12e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c7a:	d112      	bne.n	8003ca2 <HAL_RCC_OscConfig+0xda>
 8003c7c:	4b70      	ldr	r3, [pc, #448]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6f      	ldr	r2, [pc, #444]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b6d      	ldr	r3, [pc, #436]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a6c      	ldr	r2, [pc, #432]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c8e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b6a      	ldr	r3, [pc, #424]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a69      	ldr	r2, [pc, #420]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	e029      	b.n	8003cf6 <HAL_RCC_OscConfig+0x12e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003caa:	d112      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x10a>
 8003cac:	4b64      	ldr	r3, [pc, #400]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a63      	ldr	r2, [pc, #396]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003cb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b61      	ldr	r3, [pc, #388]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a60      	ldr	r2, [pc, #384]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	e011      	b.n	8003cf6 <HAL_RCC_OscConfig+0x12e>
 8003cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003cd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b58      	ldr	r3, [pc, #352]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a57      	ldr	r2, [pc, #348]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003ce4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b55      	ldr	r3, [pc, #340]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a54      	ldr	r2, [pc, #336]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003cf0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d013      	beq.n	8003d26 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fe fe17 	bl	8002930 <HAL_GetTick>
 8003d02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d06:	f7fe fe13 	bl	8002930 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b64      	cmp	r3, #100	@ 0x64
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e380      	b.n	800441a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d18:	4b49      	ldr	r3, [pc, #292]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x13e>
 8003d24:	e014      	b.n	8003d50 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fe fe03 	bl	8002930 <HAL_GetTick>
 8003d2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d2e:	f7fe fdff 	bl	8002930 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b64      	cmp	r3, #100	@ 0x64
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e36c      	b.n	800441a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d40:	4b3f      	ldr	r3, [pc, #252]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCC_OscConfig+0x166>
 8003d4c:	e000      	b.n	8003d50 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 808c 	beq.w	8003e76 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5e:	4b38      	ldr	r3, [pc, #224]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d68:	4b35      	ldr	r3, [pc, #212]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d007      	beq.n	8003d84 <HAL_RCC_OscConfig+0x1bc>
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	2b18      	cmp	r3, #24
 8003d78:	d137      	bne.n	8003dea <HAL_RCC_OscConfig+0x222>
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d132      	bne.n	8003dea <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d84:	4b2e      	ldr	r3, [pc, #184]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_OscConfig+0x1d4>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e33e      	b.n	800441a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d9c:	4b28      	ldr	r3, [pc, #160]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f023 0219 	bic.w	r2, r3, #25
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4925      	ldr	r1, [pc, #148]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fe fdbf 	bl	8002930 <HAL_GetTick>
 8003db2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db6:	f7fe fdbb 	bl	8002930 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e328      	b.n	800441a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	4917      	ldr	r1, [pc, #92]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003de8:	e045      	b.n	8003e76 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d028      	beq.n	8003e44 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003df2:	4b13      	ldr	r3, [pc, #76]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 0219 	bic.w	r2, r3, #25
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	4910      	ldr	r1, [pc, #64]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe fd94 	bl	8002930 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe fd90 	bl	8002930 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e2fd      	b.n	800441a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e1e:	4b08      	ldr	r3, [pc, #32]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2a:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	061b      	lsls	r3, r3, #24
 8003e38:	4901      	ldr	r1, [pc, #4]	@ (8003e40 <HAL_RCC_OscConfig+0x278>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
 8003e3e:	e01a      	b.n	8003e76 <HAL_RCC_OscConfig+0x2ae>
 8003e40:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e44:	4b97      	ldr	r3, [pc, #604]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a96      	ldr	r2, [pc, #600]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fe fd6e 	bl	8002930 <HAL_GetTick>
 8003e54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e58:	f7fe fd6a 	bl	8002930 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e2d7      	b.n	800441a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e6a:	4b8e      	ldr	r3, [pc, #568]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d06a      	beq.n	8003f58 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e82:	4b88      	ldr	r3, [pc, #544]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e8c:	4b85      	ldr	r3, [pc, #532]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d007      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x2e0>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b18      	cmp	r3, #24
 8003e9c:	d11b      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x30e>
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d116      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x2f8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	2b80      	cmp	r3, #128	@ 0x80
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e2ac      	b.n	800441a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ec0:	4b78      	ldr	r3, [pc, #480]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	4975      	ldr	r1, [pc, #468]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ed4:	e040      	b.n	8003f58 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d023      	beq.n	8003f26 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ede:	4b71      	ldr	r3, [pc, #452]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a70      	ldr	r2, [pc, #448]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eea:	f7fe fd21 	bl	8002930 <HAL_GetTick>
 8003eee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ef2:	f7fe fd1d 	bl	8002930 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e28a      	b.n	800441a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f04:	4b67      	ldr	r3, [pc, #412]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f10:	4b64      	ldr	r3, [pc, #400]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	061b      	lsls	r3, r3, #24
 8003f1e:	4961      	ldr	r1, [pc, #388]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60cb      	str	r3, [r1, #12]
 8003f24:	e018      	b.n	8003f58 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f26:	4b5f      	ldr	r3, [pc, #380]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a5e      	ldr	r2, [pc, #376]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fe fcfd 	bl	8002930 <HAL_GetTick>
 8003f36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f3a:	f7fe fcf9 	bl	8002930 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e266      	b.n	800441a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f4c:	4b55      	ldr	r3, [pc, #340]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d036      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d019      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f70:	4a4c      	ldr	r2, [pc, #304]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fe fcda 	bl	8002930 <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f80:	f7fe fcd6 	bl	8002930 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e243      	b.n	800441a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f92:	4b44      	ldr	r3, [pc, #272]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x3b8>
 8003f9e:	e018      	b.n	8003fd2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa0:	4b40      	ldr	r3, [pc, #256]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003fa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fa4:	4a3f      	ldr	r2, [pc, #252]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fe fcc0 	bl	8002930 <HAL_GetTick>
 8003fb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb4:	f7fe fcbc 	bl	8002930 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e229      	b.n	800441a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fc6:	4b37      	ldr	r3, [pc, #220]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d036      	beq.n	800404c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d019      	beq.n	800401a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fe6:	4b2f      	ldr	r3, [pc, #188]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2e      	ldr	r2, [pc, #184]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8003fec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ff2:	f7fe fc9d 	bl	8002930 <HAL_GetTick>
 8003ff6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ffa:	f7fe fc99 	bl	8002930 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e206      	b.n	800441a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800400c:	4b25      	ldr	r3, [pc, #148]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x432>
 8004018:	e018      	b.n	800404c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800401a:	4b22      	ldr	r3, [pc, #136]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a21      	ldr	r2, [pc, #132]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004020:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004024:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004026:	f7fe fc83 	bl	8002930 <HAL_GetTick>
 800402a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800402e:	f7fe fc7f 	bl	8002930 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1ec      	b.n	800441a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004040:	4b18      	ldr	r3, [pc, #96]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f0      	bne.n	800402e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80af 	beq.w	80041b8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800405a:	4b13      	ldr	r3, [pc, #76]	@ (80040a8 <HAL_RCC_OscConfig+0x4e0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a12      	ldr	r2, [pc, #72]	@ (80040a8 <HAL_RCC_OscConfig+0x4e0>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004066:	f7fe fc63 	bl	8002930 <HAL_GetTick>
 800406a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406e:	f7fe fc5f 	bl	8002930 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b64      	cmp	r3, #100	@ 0x64
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e1cc      	b.n	800441a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004080:	4b09      	ldr	r3, [pc, #36]	@ (80040a8 <HAL_RCC_OscConfig+0x4e0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d10b      	bne.n	80040ac <HAL_RCC_OscConfig+0x4e4>
 8004094:	4b03      	ldr	r3, [pc, #12]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	4a02      	ldr	r2, [pc, #8]	@ (80040a4 <HAL_RCC_OscConfig+0x4dc>)
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a0:	e05b      	b.n	800415a <HAL_RCC_OscConfig+0x592>
 80040a2:	bf00      	nop
 80040a4:	58024400 	.word	0x58024400
 80040a8:	58024800 	.word	0x58024800
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d112      	bne.n	80040da <HAL_RCC_OscConfig+0x512>
 80040b4:	4b9d      	ldr	r3, [pc, #628]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b8:	4a9c      	ldr	r2, [pc, #624]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c0:	4b9a      	ldr	r3, [pc, #616]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c4:	4a99      	ldr	r2, [pc, #612]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80040cc:	4b97      	ldr	r3, [pc, #604]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d0:	4a96      	ldr	r2, [pc, #600]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040d2:	f023 0304 	bic.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d8:	e03f      	b.n	800415a <HAL_RCC_OscConfig+0x592>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b05      	cmp	r3, #5
 80040e0:	d112      	bne.n	8004108 <HAL_RCC_OscConfig+0x540>
 80040e2:	4b92      	ldr	r3, [pc, #584]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e6:	4a91      	ldr	r2, [pc, #580]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040e8:	f043 0304 	orr.w	r3, r3, #4
 80040ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ee:	4b8f      	ldr	r3, [pc, #572]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f2:	4a8e      	ldr	r2, [pc, #568]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040fa:	4b8c      	ldr	r3, [pc, #560]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fe:	4a8b      	ldr	r2, [pc, #556]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6713      	str	r3, [r2, #112]	@ 0x70
 8004106:	e028      	b.n	800415a <HAL_RCC_OscConfig+0x592>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b85      	cmp	r3, #133	@ 0x85
 800410e:	d112      	bne.n	8004136 <HAL_RCC_OscConfig+0x56e>
 8004110:	4b86      	ldr	r3, [pc, #536]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004114:	4a85      	ldr	r2, [pc, #532]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	6713      	str	r3, [r2, #112]	@ 0x70
 800411c:	4b83      	ldr	r3, [pc, #524]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004120:	4a82      	ldr	r2, [pc, #520]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004126:	6713      	str	r3, [r2, #112]	@ 0x70
 8004128:	4b80      	ldr	r3, [pc, #512]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800412a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412c:	4a7f      	ldr	r2, [pc, #508]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	6713      	str	r3, [r2, #112]	@ 0x70
 8004134:	e011      	b.n	800415a <HAL_RCC_OscConfig+0x592>
 8004136:	4b7d      	ldr	r3, [pc, #500]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413a:	4a7c      	ldr	r2, [pc, #496]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	6713      	str	r3, [r2, #112]	@ 0x70
 8004142:	4b7a      	ldr	r3, [pc, #488]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	4a79      	ldr	r2, [pc, #484]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	6713      	str	r3, [r2, #112]	@ 0x70
 800414e:	4b77      	ldr	r3, [pc, #476]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	4a76      	ldr	r2, [pc, #472]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004154:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004158:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d015      	beq.n	800418e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004162:	f7fe fbe5 	bl	8002930 <HAL_GetTick>
 8004166:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004168:	e00a      	b.n	8004180 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416a:	f7fe fbe1 	bl	8002930 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e14c      	b.n	800441a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004180:	4b6a      	ldr	r3, [pc, #424]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0ee      	beq.n	800416a <HAL_RCC_OscConfig+0x5a2>
 800418c:	e014      	b.n	80041b8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fe fbcf 	bl	8002930 <HAL_GetTick>
 8004192:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004194:	e00a      	b.n	80041ac <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fe fbcb 	bl	8002930 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e136      	b.n	800441a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041ac:	4b5f      	ldr	r3, [pc, #380]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80041ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1ee      	bne.n	8004196 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 812b 	beq.w	8004418 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80041c2:	4b5a      	ldr	r3, [pc, #360]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041ca:	2b18      	cmp	r3, #24
 80041cc:	f000 80bb 	beq.w	8004346 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	f040 8095 	bne.w	8004304 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041da:	4b54      	ldr	r3, [pc, #336]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a53      	ldr	r2, [pc, #332]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80041e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fe fba3 	bl	8002930 <HAL_GetTick>
 80041ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fe fb9f 	bl	8002930 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e10c      	b.n	800441a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004200:	4b4a      	ldr	r3, [pc, #296]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800420c:	4b47      	ldr	r3, [pc, #284]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800420e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004210:	4b47      	ldr	r3, [pc, #284]	@ (8004330 <HAL_RCC_OscConfig+0x768>)
 8004212:	4013      	ands	r3, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800421c:	0112      	lsls	r2, r2, #4
 800421e:	430a      	orrs	r2, r1
 8004220:	4942      	ldr	r1, [pc, #264]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004222:	4313      	orrs	r3, r2
 8004224:	628b      	str	r3, [r1, #40]	@ 0x28
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	3b01      	subs	r3, #1
 800422c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004234:	3b01      	subs	r3, #1
 8004236:	025b      	lsls	r3, r3, #9
 8004238:	b29b      	uxth	r3, r3
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	3b01      	subs	r3, #1
 8004242:	041b      	lsls	r3, r3, #16
 8004244:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800424e:	3b01      	subs	r3, #1
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004256:	4935      	ldr	r1, [pc, #212]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004258:	4313      	orrs	r3, r2
 800425a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800425c:	4b33      	ldr	r3, [pc, #204]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	4a32      	ldr	r2, [pc, #200]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004268:	4b30      	ldr	r3, [pc, #192]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800426a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800426c:	4b31      	ldr	r3, [pc, #196]	@ (8004334 <HAL_RCC_OscConfig+0x76c>)
 800426e:	4013      	ands	r3, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004274:	00d2      	lsls	r2, r2, #3
 8004276:	492d      	ldr	r1, [pc, #180]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004278:	4313      	orrs	r3, r2
 800427a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800427c:	4b2b      	ldr	r3, [pc, #172]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	f023 020c 	bic.w	r2, r3, #12
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004288:	4928      	ldr	r1, [pc, #160]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800428a:	4313      	orrs	r3, r2
 800428c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800428e:	4b27      	ldr	r3, [pc, #156]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	f023 0202 	bic.w	r2, r3, #2
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	4924      	ldr	r1, [pc, #144]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800429c:	4313      	orrs	r3, r2
 800429e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042a0:	4b22      	ldr	r3, [pc, #136]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	4a21      	ldr	r2, [pc, #132]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ac:	4b1f      	ldr	r3, [pc, #124]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	4a1e      	ldr	r2, [pc, #120]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80042b8:	4b1c      	ldr	r3, [pc, #112]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042bc:	4a1b      	ldr	r2, [pc, #108]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80042c4:	4b19      	ldr	r3, [pc, #100]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	4a18      	ldr	r2, [pc, #96]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d0:	4b16      	ldr	r3, [pc, #88]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a15      	ldr	r2, [pc, #84]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe fb28 	bl	8002930 <HAL_GetTick>
 80042e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fe fb24 	bl	8002930 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e091      	b.n	800441a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042f6:	4b0d      	ldr	r3, [pc, #52]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x71c>
 8004302:	e089      	b.n	8004418 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004304:	4b09      	ldr	r3, [pc, #36]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a08      	ldr	r2, [pc, #32]	@ (800432c <HAL_RCC_OscConfig+0x764>)
 800430a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800430e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe fb0e 	bl	8002930 <HAL_GetTick>
 8004314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004316:	e00f      	b.n	8004338 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004318:	f7fe fb0a 	bl	8002930 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d908      	bls.n	8004338 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e077      	b.n	800441a <HAL_RCC_OscConfig+0x852>
 800432a:	bf00      	nop
 800432c:	58024400 	.word	0x58024400
 8004330:	fffffc0c 	.word	0xfffffc0c
 8004334:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004338:	4b3a      	ldr	r3, [pc, #232]	@ (8004424 <HAL_RCC_OscConfig+0x85c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e9      	bne.n	8004318 <HAL_RCC_OscConfig+0x750>
 8004344:	e068      	b.n	8004418 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004346:	4b37      	ldr	r3, [pc, #220]	@ (8004424 <HAL_RCC_OscConfig+0x85c>)
 8004348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800434c:	4b35      	ldr	r3, [pc, #212]	@ (8004424 <HAL_RCC_OscConfig+0x85c>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	2b01      	cmp	r3, #1
 8004358:	d031      	beq.n	80043be <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f003 0203 	and.w	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d12a      	bne.n	80043be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d122      	bne.n	80043be <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d11a      	bne.n	80043be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	0a5b      	lsrs	r3, r3, #9
 800438c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004394:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004396:	429a      	cmp	r2, r3
 8004398:	d111      	bne.n	80043be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d108      	bne.n	80043be <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	0e1b      	lsrs	r3, r3, #24
 80043b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e02b      	b.n	800441a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80043c2:	4b18      	ldr	r3, [pc, #96]	@ (8004424 <HAL_RCC_OscConfig+0x85c>)
 80043c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c6:	08db      	lsrs	r3, r3, #3
 80043c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043cc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d01f      	beq.n	8004418 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80043d8:	4b12      	ldr	r3, [pc, #72]	@ (8004424 <HAL_RCC_OscConfig+0x85c>)
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	4a11      	ldr	r2, [pc, #68]	@ (8004424 <HAL_RCC_OscConfig+0x85c>)
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043e4:	f7fe faa4 	bl	8002930 <HAL_GetTick>
 80043e8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80043ea:	bf00      	nop
 80043ec:	f7fe faa0 	bl	8002930 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d0f9      	beq.n	80043ec <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <HAL_RCC_OscConfig+0x85c>)
 80043fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <HAL_RCC_OscConfig+0x860>)
 80043fe:	4013      	ands	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004404:	00d2      	lsls	r2, r2, #3
 8004406:	4907      	ldr	r1, [pc, #28]	@ (8004424 <HAL_RCC_OscConfig+0x85c>)
 8004408:	4313      	orrs	r3, r2
 800440a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <HAL_RCC_OscConfig+0x85c>)
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	4a04      	ldr	r2, [pc, #16]	@ (8004424 <HAL_RCC_OscConfig+0x85c>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3730      	adds	r7, #48	@ 0x30
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	58024400 	.word	0x58024400
 8004428:	ffff0007 	.word	0xffff0007

0800442c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e19c      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b8a      	ldr	r3, [pc, #552]	@ (800466c <HAL_RCC_ClockConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d910      	bls.n	8004470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b87      	ldr	r3, [pc, #540]	@ (800466c <HAL_RCC_ClockConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 020f 	bic.w	r2, r3, #15
 8004456:	4985      	ldr	r1, [pc, #532]	@ (800466c <HAL_RCC_ClockConfig+0x240>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b83      	ldr	r3, [pc, #524]	@ (800466c <HAL_RCC_ClockConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e184      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d010      	beq.n	800449e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	4b7b      	ldr	r3, [pc, #492]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004488:	429a      	cmp	r2, r3
 800448a:	d908      	bls.n	800449e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800448c:	4b78      	ldr	r3, [pc, #480]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	4975      	ldr	r1, [pc, #468]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 800449a:	4313      	orrs	r3, r2
 800449c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d010      	beq.n	80044cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	4b70      	ldr	r3, [pc, #448]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d908      	bls.n	80044cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	496a      	ldr	r1, [pc, #424]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d010      	beq.n	80044fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	4b64      	ldr	r3, [pc, #400]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d908      	bls.n	80044fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044e8:	4b61      	ldr	r3, [pc, #388]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	495e      	ldr	r1, [pc, #376]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d010      	beq.n	8004528 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	4b59      	ldr	r3, [pc, #356]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004512:	429a      	cmp	r2, r3
 8004514:	d908      	bls.n	8004528 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004516:	4b56      	ldr	r3, [pc, #344]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	4953      	ldr	r1, [pc, #332]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004524:	4313      	orrs	r3, r2
 8004526:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4b4d      	ldr	r3, [pc, #308]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	429a      	cmp	r2, r3
 8004542:	d908      	bls.n	8004556 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004544:	4b4a      	ldr	r3, [pc, #296]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f023 020f 	bic.w	r2, r3, #15
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4947      	ldr	r1, [pc, #284]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004552:	4313      	orrs	r3, r2
 8004554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d055      	beq.n	800460e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004562:	4b43      	ldr	r3, [pc, #268]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4940      	ldr	r1, [pc, #256]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004570:	4313      	orrs	r3, r2
 8004572:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d107      	bne.n	800458c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800457c:	4b3c      	ldr	r3, [pc, #240]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d121      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0f6      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004594:	4b36      	ldr	r3, [pc, #216]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d115      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0ea      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045ac:	4b30      	ldr	r3, [pc, #192]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0de      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0d6      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045cc:	4b28      	ldr	r3, [pc, #160]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f023 0207 	bic.w	r2, r3, #7
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4925      	ldr	r1, [pc, #148]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045de:	f7fe f9a7 	bl	8002930 <HAL_GetTick>
 80045e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e6:	f7fe f9a3 	bl	8002930 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0be      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	429a      	cmp	r2, r3
 800460c:	d1eb      	bne.n	80045e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	4b14      	ldr	r3, [pc, #80]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	429a      	cmp	r2, r3
 8004628:	d208      	bcs.n	800463c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462a:	4b11      	ldr	r3, [pc, #68]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f023 020f 	bic.w	r2, r3, #15
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	490e      	ldr	r1, [pc, #56]	@ (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004638:	4313      	orrs	r3, r2
 800463a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <HAL_RCC_ClockConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d214      	bcs.n	8004674 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b08      	ldr	r3, [pc, #32]	@ (800466c <HAL_RCC_ClockConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 020f 	bic.w	r2, r3, #15
 8004652:	4906      	ldr	r1, [pc, #24]	@ (800466c <HAL_RCC_ClockConfig+0x240>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b04      	ldr	r3, [pc, #16]	@ (800466c <HAL_RCC_ClockConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d005      	beq.n	8004674 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e086      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
 800466c:	52002000 	.word	0x52002000
 8004670:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	4b3f      	ldr	r3, [pc, #252]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800468c:	429a      	cmp	r2, r3
 800468e:	d208      	bcs.n	80046a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004690:	4b3c      	ldr	r3, [pc, #240]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	4939      	ldr	r1, [pc, #228]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d010      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	4b34      	ldr	r3, [pc, #208]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d208      	bcs.n	80046d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046be:	4b31      	ldr	r3, [pc, #196]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	492e      	ldr	r1, [pc, #184]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	4b28      	ldr	r3, [pc, #160]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d208      	bcs.n	80046fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046ec:	4b25      	ldr	r3, [pc, #148]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	4922      	ldr	r1, [pc, #136]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d010      	beq.n	800472c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	4b1d      	ldr	r3, [pc, #116]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004716:	429a      	cmp	r2, r3
 8004718:	d208      	bcs.n	800472c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800471a:	4b1a      	ldr	r3, [pc, #104]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4917      	ldr	r1, [pc, #92]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004728:	4313      	orrs	r3, r2
 800472a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800472c:	f000 f834 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b14      	ldr	r3, [pc, #80]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	4912      	ldr	r1, [pc, #72]	@ (8004788 <HAL_RCC_ClockConfig+0x35c>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800474a:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <HAL_RCC_ClockConfig+0x358>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	4a0d      	ldr	r2, [pc, #52]	@ (8004788 <HAL_RCC_ClockConfig+0x35c>)
 8004754:	5cd3      	ldrb	r3, [r2, r3]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
 8004760:	4a0a      	ldr	r2, [pc, #40]	@ (800478c <HAL_RCC_ClockConfig+0x360>)
 8004762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004764:	4a0a      	ldr	r2, [pc, #40]	@ (8004790 <HAL_RCC_ClockConfig+0x364>)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800476a:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <HAL_RCC_ClockConfig+0x368>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe f894 	bl	800289c <HAL_InitTick>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004778:	7bfb      	ldrb	r3, [r7, #15]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	58024400 	.word	0x58024400
 8004788:	0800a248 	.word	0x0800a248
 800478c:	2400002c 	.word	0x2400002c
 8004790:	24000028 	.word	0x24000028
 8004794:	24000030 	.word	0x24000030

08004798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	@ 0x24
 800479c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800479e:	4bb3      	ldr	r3, [pc, #716]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047a6:	2b18      	cmp	r3, #24
 80047a8:	f200 8155 	bhi.w	8004a56 <HAL_RCC_GetSysClockFreq+0x2be>
 80047ac:	a201      	add	r2, pc, #4	@ (adr r2, 80047b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	08004819 	.word	0x08004819
 80047b8:	08004a57 	.word	0x08004a57
 80047bc:	08004a57 	.word	0x08004a57
 80047c0:	08004a57 	.word	0x08004a57
 80047c4:	08004a57 	.word	0x08004a57
 80047c8:	08004a57 	.word	0x08004a57
 80047cc:	08004a57 	.word	0x08004a57
 80047d0:	08004a57 	.word	0x08004a57
 80047d4:	0800483f 	.word	0x0800483f
 80047d8:	08004a57 	.word	0x08004a57
 80047dc:	08004a57 	.word	0x08004a57
 80047e0:	08004a57 	.word	0x08004a57
 80047e4:	08004a57 	.word	0x08004a57
 80047e8:	08004a57 	.word	0x08004a57
 80047ec:	08004a57 	.word	0x08004a57
 80047f0:	08004a57 	.word	0x08004a57
 80047f4:	08004845 	.word	0x08004845
 80047f8:	08004a57 	.word	0x08004a57
 80047fc:	08004a57 	.word	0x08004a57
 8004800:	08004a57 	.word	0x08004a57
 8004804:	08004a57 	.word	0x08004a57
 8004808:	08004a57 	.word	0x08004a57
 800480c:	08004a57 	.word	0x08004a57
 8004810:	08004a57 	.word	0x08004a57
 8004814:	0800484b 	.word	0x0800484b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004818:	4b94      	ldr	r3, [pc, #592]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d009      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004824:	4b91      	ldr	r3, [pc, #580]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	08db      	lsrs	r3, r3, #3
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	4a90      	ldr	r2, [pc, #576]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004836:	e111      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004838:	4b8d      	ldr	r3, [pc, #564]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800483a:	61bb      	str	r3, [r7, #24]
      break;
 800483c:	e10e      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800483e:	4b8d      	ldr	r3, [pc, #564]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004840:	61bb      	str	r3, [r7, #24]
      break;
 8004842:	e10b      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004844:	4b8c      	ldr	r3, [pc, #560]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004846:	61bb      	str	r3, [r7, #24]
      break;
 8004848:	e108      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800484a:	4b88      	ldr	r3, [pc, #544]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800484c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004854:	4b85      	ldr	r3, [pc, #532]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800485e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004860:	4b82      	ldr	r3, [pc, #520]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800486a:	4b80      	ldr	r3, [pc, #512]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486e:	08db      	lsrs	r3, r3, #3
 8004870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80e1 	beq.w	8004a50 <HAL_RCC_GetSysClockFreq+0x2b8>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b02      	cmp	r3, #2
 8004892:	f000 8083 	beq.w	800499c <HAL_RCC_GetSysClockFreq+0x204>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b02      	cmp	r3, #2
 800489a:	f200 80a1 	bhi.w	80049e0 <HAL_RCC_GetSysClockFreq+0x248>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x114>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d056      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x1c0>
 80048aa:	e099      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ac:	4b6f      	ldr	r3, [pc, #444]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02d      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048b8:	4b6c      	ldr	r3, [pc, #432]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	08db      	lsrs	r3, r3, #3
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	4a6b      	ldr	r2, [pc, #428]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e2:	4b62      	ldr	r3, [pc, #392]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80048fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004912:	e087      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004a80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004926:	4b51      	ldr	r3, [pc, #324]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004936:	ed97 6a02 	vldr	s12, [r7, #8]
 800493a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800493e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800494a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004956:	e065      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496a:	4b40      	ldr	r3, [pc, #256]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497a:	ed97 6a02 	vldr	s12, [r7, #8]
 800497e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800498e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800499a:	e043      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004a88 <HAL_RCC_GetSysClockFreq+0x2f0>
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	4b2f      	ldr	r3, [pc, #188]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049be:	ed97 6a02 	vldr	s12, [r7, #8]
 80049c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049de:	e021      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004a24:	4b11      	ldr	r3, [pc, #68]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a28:	0a5b      	lsrs	r3, r3, #9
 8004a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a2e:	3301      	adds	r3, #1
 8004a30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a48:	ee17 3a90 	vmov	r3, s15
 8004a4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004a4e:	e005      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
      break;
 8004a54:	e002      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004a56:	4b07      	ldr	r3, [pc, #28]	@ (8004a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a58:	61bb      	str	r3, [r7, #24]
      break;
 8004a5a:	bf00      	nop
  }

  return sysclockfreq;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3724      	adds	r7, #36	@ 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	58024400 	.word	0x58024400
 8004a70:	03d09000 	.word	0x03d09000
 8004a74:	003d0900 	.word	0x003d0900
 8004a78:	007a1200 	.word	0x007a1200
 8004a7c:	46000000 	.word	0x46000000
 8004a80:	4c742400 	.word	0x4c742400
 8004a84:	4a742400 	.word	0x4a742400
 8004a88:	4af42400 	.word	0x4af42400

08004a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004a92:	f7ff fe81 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <HAL_RCC_GetHCLKFreq+0x50>)
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	0a1b      	lsrs	r3, r3, #8
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	490f      	ldr	r1, [pc, #60]	@ (8004ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004aa4:	5ccb      	ldrb	r3, [r1, r3]
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004aae:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <HAL_RCC_GetHCLKFreq+0x50>)
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	4a09      	ldr	r2, [pc, #36]	@ (8004ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004aba:	5cd3      	ldrb	r3, [r2, r3]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac6:	4a07      	ldr	r2, [pc, #28]	@ (8004ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ac8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004aca:	4a07      	ldr	r2, [pc, #28]	@ (8004ae8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ad0:	4b04      	ldr	r3, [pc, #16]	@ (8004ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	0800a248 	.word	0x0800a248
 8004ae4:	2400002c 	.word	0x2400002c
 8004ae8:	24000028 	.word	0x24000028

08004aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004af0:	f7ff ffcc 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4904      	ldr	r1, [pc, #16]	@ (8004b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	f003 031f 	and.w	r3, r3, #31
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	58024400 	.word	0x58024400
 8004b14:	0800a248 	.word	0x0800a248

08004b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004b1c:	f7ff ffb6 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4904      	ldr	r1, [pc, #16]	@ (8004b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	58024400 	.word	0x58024400
 8004b40:	0800a248 	.word	0x0800a248

08004b44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b48:	b0c8      	sub	sp, #288	@ 0x120
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b56:	2300      	movs	r3, #0
 8004b58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004b68:	2500      	movs	r5, #0
 8004b6a:	ea54 0305 	orrs.w	r3, r4, r5
 8004b6e:	d049      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b76:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b7a:	d02f      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004b7c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b80:	d828      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b86:	d01a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b8c:	d822      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b96:	d007      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b98:	e01c      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b9a:	4ba7      	ldr	r3, [pc, #668]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9e:	4aa6      	ldr	r2, [pc, #664]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ba6:	e01a      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bac:	3308      	adds	r3, #8
 8004bae:	2102      	movs	r1, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 fc43 	bl	800643c <RCCEx_PLL2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bbc:	e00f      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bc2:	3328      	adds	r3, #40	@ 0x28
 8004bc4:	2102      	movs	r1, #2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f001 fcea 	bl	80065a0 <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bd2:	e004      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004be6:	4b94      	ldr	r3, [pc, #592]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bf4:	4a90      	ldr	r2, [pc, #576]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bfa:	e003      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004c10:	f04f 0900 	mov.w	r9, #0
 8004c14:	ea58 0309 	orrs.w	r3, r8, r9
 8004c18:	d047      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d82a      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004c24:	a201      	add	r2, pc, #4	@ (adr r2, 8004c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c41 	.word	0x08004c41
 8004c30:	08004c4f 	.word	0x08004c4f
 8004c34:	08004c65 	.word	0x08004c65
 8004c38:	08004c83 	.word	0x08004c83
 8004c3c:	08004c83 	.word	0x08004c83
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c40:	4b7d      	ldr	r3, [pc, #500]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	4a7c      	ldr	r2, [pc, #496]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c4c:	e01a      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c52:	3308      	adds	r3, #8
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 fbf0 	bl	800643c <RCCEx_PLL2_Config>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c62:	e00f      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c68:	3328      	adds	r3, #40	@ 0x28
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f001 fc97 	bl	80065a0 <RCCEx_PLL3_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c78:	e004      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c80:	e000      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c90:	f023 0107 	bic.w	r1, r3, #7
 8004c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9a:	4a67      	ldr	r2, [pc, #412]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ca0:	e003      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ca6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004cb6:	f04f 0b00 	mov.w	fp, #0
 8004cba:	ea5a 030b 	orrs.w	r3, sl, fp
 8004cbe:	d054      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004cca:	d036      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004ccc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004cd0:	d82f      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cd6:	d032      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cdc:	d829      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ce0:	d02f      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004ce2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ce4:	d825      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	d018      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004cea:	2b80      	cmp	r3, #128	@ 0x80
 8004cec:	d821      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004cf2:	2b40      	cmp	r3, #64	@ 0x40
 8004cf4:	d007      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004cf6:	e01c      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf8:	4b4f      	ldr	r3, [pc, #316]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	4a4e      	ldr	r2, [pc, #312]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004d04:	e01e      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 fb94 	bl	800643c <RCCEx_PLL2_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004d1a:	e013      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d20:	3328      	adds	r3, #40	@ 0x28
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f001 fc3b 	bl	80065a0 <RCCEx_PLL3_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004d30:	e008      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d38:	e004      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004d3a:	bf00      	nop
 8004d3c:	e002      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d50:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5a:	4a37      	ldr	r2, [pc, #220]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d60:	e003      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004d76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d05c      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d90:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004d94:	d03b      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004d96:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004d9a:	d834      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004da0:	d037      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004da2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004da6:	d82e      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004da8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004dac:	d033      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004dae:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004db2:	d828      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db8:	d01a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dbe:	d822      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dc8:	d007      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004dca:	e01c      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	4a19      	ldr	r2, [pc, #100]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004dd8:	e01e      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dde:	3308      	adds	r3, #8
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 fb2a 	bl	800643c <RCCEx_PLL2_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004dee:	e013      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004df4:	3328      	adds	r3, #40	@ 0x28
 8004df6:	2100      	movs	r1, #0
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f001 fbd1 	bl	80065a0 <RCCEx_PLL3_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004e04:	e008      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e0c:	e004      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e002      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10d      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004e20:	4b05      	ldr	r3, [pc, #20]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e24:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e2e:	4a02      	ldr	r2, [pc, #8]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004e30:	430b      	orrs	r3, r1
 8004e32:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e34:	e006      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004e36:	bf00      	nop
 8004e38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004e50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4313      	orrs	r3, r2
 8004e62:	d03a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6a:	2b30      	cmp	r3, #48	@ 0x30
 8004e6c:	d01f      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004e6e:	2b30      	cmp	r3, #48	@ 0x30
 8004e70:	d819      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d00c      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d815      	bhi.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d019      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d111      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e82:	4bae      	ldr	r3, [pc, #696]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e86:	4aad      	ldr	r2, [pc, #692]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004e8e:	e011      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e94:	3308      	adds	r3, #8
 8004e96:	2102      	movs	r1, #2
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 facf 	bl	800643c <RCCEx_PLL2_Config>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ea4:	e006      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004eac:	e002      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ebc:	4b9f      	ldr	r3, [pc, #636]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ec0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eca:	4a9c      	ldr	r2, [pc, #624]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ecc:	430b      	orrs	r3, r1
 8004ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ed0:	e003      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ed6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004ee6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	d051      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004efe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f04:	d035      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004f06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f0a:	d82e      	bhi.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004f0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f10:	d031      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004f12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f16:	d828      	bhi.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f1c:	d01a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f22:	d822      	bhi.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2c:	d007      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004f2e:	e01c      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f30:	4b82      	ldr	r3, [pc, #520]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	4a81      	ldr	r2, [pc, #516]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f3c:	e01c      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f42:	3308      	adds	r3, #8
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 fa78 	bl	800643c <RCCEx_PLL2_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f52:	e011      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f58:	3328      	adds	r3, #40	@ 0x28
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 fb1f 	bl	80065a0 <RCCEx_PLL3_Config>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f68:	e006      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f70:	e002      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004f72:	bf00      	nop
 8004f74:	e000      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f80:	4b6e      	ldr	r3, [pc, #440]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f8e:	4a6b      	ldr	r2, [pc, #428]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f94:	e003      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f9a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004faa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004fb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	d053      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fc8:	d033      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004fca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fce:	d82c      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004fd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fd4:	d02f      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004fd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fda:	d826      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004fdc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fe0:	d02b      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004fe2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fe6:	d820      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004fe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fec:	d012      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004fee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ff2:	d81a      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d022      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ffc:	d115      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005002:	3308      	adds	r3, #8
 8005004:	2101      	movs	r1, #1
 8005006:	4618      	mov	r0, r3
 8005008:	f001 fa18 	bl	800643c <RCCEx_PLL2_Config>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005012:	e015      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005018:	3328      	adds	r3, #40	@ 0x28
 800501a:	2101      	movs	r1, #1
 800501c:	4618      	mov	r0, r3
 800501e:	f001 fabf 	bl	80065a0 <RCCEx_PLL3_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005028:	e00a      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005030:	e006      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005032:	bf00      	nop
 8005034:	e004      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005036:	bf00      	nop
 8005038:	e002      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800503a:	bf00      	nop
 800503c:	e000      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800503e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005040:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005048:	4b3c      	ldr	r3, [pc, #240]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800504a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005050:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005056:	4a39      	ldr	r2, [pc, #228]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005058:	430b      	orrs	r3, r1
 800505a:	6513      	str	r3, [r2, #80]	@ 0x50
 800505c:	e003      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005062:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005072:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800507c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005080:	460b      	mov	r3, r1
 8005082:	4313      	orrs	r3, r2
 8005084:	d060      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800508a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800508e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005092:	d039      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005094:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8005098:	d832      	bhi.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800509a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800509e:	d035      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80050a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050a4:	d82c      	bhi.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050aa:	d031      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80050ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b0:	d826      	bhi.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80050b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050b6:	d02d      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80050b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050bc:	d820      	bhi.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80050be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050c2:	d012      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80050c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050c8:	d81a      	bhi.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d024      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80050ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050d2:	d115      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d8:	3308      	adds	r3, #8
 80050da:	2101      	movs	r1, #1
 80050dc:	4618      	mov	r0, r3
 80050de:	f001 f9ad 	bl	800643c <RCCEx_PLL2_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050e8:	e017      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050ee:	3328      	adds	r3, #40	@ 0x28
 80050f0:	2101      	movs	r1, #1
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 fa54 	bl	80065a0 <RCCEx_PLL3_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050fe:	e00c      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005106:	e008      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005108:	bf00      	nop
 800510a:	e006      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800510c:	bf00      	nop
 800510e:	e004      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005110:	bf00      	nop
 8005112:	e002      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005114:	bf00      	nop
 8005116:	e000      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10e      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005122:	4b06      	ldr	r3, [pc, #24]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005126:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800512a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800512e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005132:	4a02      	ldr	r2, [pc, #8]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005134:	430b      	orrs	r3, r1
 8005136:	6593      	str	r3, [r2, #88]	@ 0x58
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005144:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005154:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005158:	2300      	movs	r3, #0
 800515a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800515e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005162:	460b      	mov	r3, r1
 8005164:	4313      	orrs	r3, r2
 8005166:	d037      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800516c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800516e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005172:	d00e      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005178:	d816      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d018      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800517e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005182:	d111      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005184:	4bc4      	ldr	r3, [pc, #784]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005188:	4ac3      	ldr	r2, [pc, #780]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800518a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800518e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005190:	e00f      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005196:	3308      	adds	r3, #8
 8005198:	2101      	movs	r1, #1
 800519a:	4618      	mov	r0, r3
 800519c:	f001 f94e 	bl	800643c <RCCEx_PLL2_Config>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80051a6:	e004      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80051ae:	e000      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80051b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051ba:	4bb7      	ldr	r3, [pc, #732]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80051c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051c8:	4ab3      	ldr	r2, [pc, #716]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80051ce:	e003      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80051e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051e8:	2300      	movs	r3, #0
 80051ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80051ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4313      	orrs	r3, r2
 80051f6:	d039      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80051f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d81c      	bhi.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005202:	a201      	add	r2, pc, #4	@ (adr r2, 8005208 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005245 	.word	0x08005245
 800520c:	08005219 	.word	0x08005219
 8005210:	08005227 	.word	0x08005227
 8005214:	08005245 	.word	0x08005245
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005218:	4b9f      	ldr	r3, [pc, #636]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800521a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521c:	4a9e      	ldr	r2, [pc, #632]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800521e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005224:	e00f      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800522a:	3308      	adds	r3, #8
 800522c:	2102      	movs	r1, #2
 800522e:	4618      	mov	r0, r3
 8005230:	f001 f904 	bl	800643c <RCCEx_PLL2_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800523a:	e004      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005242:	e000      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005246:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800524e:	4b92      	ldr	r3, [pc, #584]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005252:	f023 0103 	bic.w	r1, r3, #3
 8005256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800525a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525c:	4a8e      	ldr	r2, [pc, #568]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800525e:	430b      	orrs	r3, r1
 8005260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005262:	e003      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005264:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005268:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800526c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005278:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800527c:	2300      	movs	r3, #0
 800527e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005282:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005286:	460b      	mov	r3, r1
 8005288:	4313      	orrs	r3, r2
 800528a:	f000 8099 	beq.w	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800528e:	4b83      	ldr	r3, [pc, #524]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a82      	ldr	r2, [pc, #520]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800529a:	f7fd fb49 	bl	8002930 <HAL_GetTick>
 800529e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052a2:	e00b      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a4:	f7fd fb44 	bl	8002930 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b64      	cmp	r3, #100	@ 0x64
 80052b2:	d903      	bls.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80052ba:	e005      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052bc:	4b77      	ldr	r3, [pc, #476]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ed      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80052c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d173      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052d0:	4b71      	ldr	r3, [pc, #452]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052dc:	4053      	eors	r3, r2
 80052de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d015      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052e6:	4b6c      	ldr	r3, [pc, #432]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052f2:	4b69      	ldr	r3, [pc, #420]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f6:	4a68      	ldr	r2, [pc, #416]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80052f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052fc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052fe:	4b66      	ldr	r3, [pc, #408]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005302:	4a65      	ldr	r2, [pc, #404]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005308:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800530a:	4a63      	ldr	r2, [pc, #396]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800530c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005310:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005316:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800531a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800531e:	d118      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fd fb06 	bl	8002930 <HAL_GetTick>
 8005324:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005328:	e00d      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532a:	f7fd fb01 	bl	8002930 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005334:	1ad2      	subs	r2, r2, r3
 8005336:	f241 3388 	movw	r3, #5000	@ 0x1388
 800533a:	429a      	cmp	r2, r3
 800533c:	d903      	bls.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005344:	e005      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005346:	4b54      	ldr	r3, [pc, #336]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0eb      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005352:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005356:	2b00      	cmp	r3, #0
 8005358:	d129      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800535a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800535e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005366:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800536a:	d10e      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800536c:	4b4a      	ldr	r3, [pc, #296]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005378:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800537c:	091a      	lsrs	r2, r3, #4
 800537e:	4b48      	ldr	r3, [pc, #288]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005380:	4013      	ands	r3, r2
 8005382:	4a45      	ldr	r2, [pc, #276]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005384:	430b      	orrs	r3, r1
 8005386:	6113      	str	r3, [r2, #16]
 8005388:	e005      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800538a:	4b43      	ldr	r3, [pc, #268]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	4a42      	ldr	r2, [pc, #264]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005390:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005394:	6113      	str	r3, [r2, #16]
 8005396:	4b40      	ldr	r3, [pc, #256]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005398:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800539a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800539e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a6:	4a3c      	ldr	r2, [pc, #240]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80053ac:	e008      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80053b6:	e003      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	f002 0301 	and.w	r3, r2, #1
 80053cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053d0:	2300      	movs	r3, #0
 80053d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053da:	460b      	mov	r3, r1
 80053dc:	4313      	orrs	r3, r2
 80053de:	f000 8090 	beq.w	8005502 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80053e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ea:	2b28      	cmp	r3, #40	@ 0x28
 80053ec:	d870      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80053ee:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	080054d9 	.word	0x080054d9
 80053f8:	080054d1 	.word	0x080054d1
 80053fc:	080054d1 	.word	0x080054d1
 8005400:	080054d1 	.word	0x080054d1
 8005404:	080054d1 	.word	0x080054d1
 8005408:	080054d1 	.word	0x080054d1
 800540c:	080054d1 	.word	0x080054d1
 8005410:	080054d1 	.word	0x080054d1
 8005414:	080054a5 	.word	0x080054a5
 8005418:	080054d1 	.word	0x080054d1
 800541c:	080054d1 	.word	0x080054d1
 8005420:	080054d1 	.word	0x080054d1
 8005424:	080054d1 	.word	0x080054d1
 8005428:	080054d1 	.word	0x080054d1
 800542c:	080054d1 	.word	0x080054d1
 8005430:	080054d1 	.word	0x080054d1
 8005434:	080054bb 	.word	0x080054bb
 8005438:	080054d1 	.word	0x080054d1
 800543c:	080054d1 	.word	0x080054d1
 8005440:	080054d1 	.word	0x080054d1
 8005444:	080054d1 	.word	0x080054d1
 8005448:	080054d1 	.word	0x080054d1
 800544c:	080054d1 	.word	0x080054d1
 8005450:	080054d1 	.word	0x080054d1
 8005454:	080054d9 	.word	0x080054d9
 8005458:	080054d1 	.word	0x080054d1
 800545c:	080054d1 	.word	0x080054d1
 8005460:	080054d1 	.word	0x080054d1
 8005464:	080054d1 	.word	0x080054d1
 8005468:	080054d1 	.word	0x080054d1
 800546c:	080054d1 	.word	0x080054d1
 8005470:	080054d1 	.word	0x080054d1
 8005474:	080054d9 	.word	0x080054d9
 8005478:	080054d1 	.word	0x080054d1
 800547c:	080054d1 	.word	0x080054d1
 8005480:	080054d1 	.word	0x080054d1
 8005484:	080054d1 	.word	0x080054d1
 8005488:	080054d1 	.word	0x080054d1
 800548c:	080054d1 	.word	0x080054d1
 8005490:	080054d1 	.word	0x080054d1
 8005494:	080054d9 	.word	0x080054d9
 8005498:	58024400 	.word	0x58024400
 800549c:	58024800 	.word	0x58024800
 80054a0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054a8:	3308      	adds	r3, #8
 80054aa:	2101      	movs	r1, #1
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 ffc5 	bl	800643c <RCCEx_PLL2_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80054b8:	e00f      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054be:	3328      	adds	r3, #40	@ 0x28
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 f86c 	bl	80065a0 <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80054d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80054e2:	4bc0      	ldr	r3, [pc, #768]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80054ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054f2:	4abc      	ldr	r2, [pc, #752]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f002 0302 	and.w	r3, r2, #2
 800550e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005512:	2300      	movs	r3, #0
 8005514:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005518:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800551c:	460b      	mov	r3, r1
 800551e:	4313      	orrs	r3, r2
 8005520:	d043      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800552a:	2b05      	cmp	r3, #5
 800552c:	d824      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800552e:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005581 	.word	0x08005581
 8005538:	0800554d 	.word	0x0800554d
 800553c:	08005563 	.word	0x08005563
 8005540:	08005581 	.word	0x08005581
 8005544:	08005581 	.word	0x08005581
 8005548:	08005581 	.word	0x08005581
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800554c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005550:	3308      	adds	r3, #8
 8005552:	2101      	movs	r1, #1
 8005554:	4618      	mov	r0, r3
 8005556:	f000 ff71 	bl	800643c <RCCEx_PLL2_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005560:	e00f      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005566:	3328      	adds	r3, #40	@ 0x28
 8005568:	2101      	movs	r1, #1
 800556a:	4618      	mov	r0, r3
 800556c:	f001 f818 	bl	80065a0 <RCCEx_PLL3_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005576:	e004      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800557e:	e000      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8005580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005582:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800558a:	4b96      	ldr	r3, [pc, #600]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800558c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558e:	f023 0107 	bic.w	r1, r3, #7
 8005592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800559a:	4a92      	ldr	r2, [pc, #584]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800559c:	430b      	orrs	r3, r1
 800559e:	6553      	str	r3, [r2, #84]	@ 0x54
 80055a0:	e003      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055a6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	f002 0304 	and.w	r3, r2, #4
 80055b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055ba:	2300      	movs	r3, #0
 80055bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055c0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	d043      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80055ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d824      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80055d6:	a201      	add	r2, pc, #4	@ (adr r2, 80055dc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	08005629 	.word	0x08005629
 80055e0:	080055f5 	.word	0x080055f5
 80055e4:	0800560b 	.word	0x0800560b
 80055e8:	08005629 	.word	0x08005629
 80055ec:	08005629 	.word	0x08005629
 80055f0:	08005629 	.word	0x08005629
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055f8:	3308      	adds	r3, #8
 80055fa:	2101      	movs	r1, #1
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 ff1d 	bl	800643c <RCCEx_PLL2_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005608:	e00f      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800560a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800560e:	3328      	adds	r3, #40	@ 0x28
 8005610:	2101      	movs	r1, #1
 8005612:	4618      	mov	r0, r3
 8005614:	f000 ffc4 	bl	80065a0 <RCCEx_PLL3_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800561e:	e004      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005626:	e000      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800562a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10b      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005632:	4b6c      	ldr	r3, [pc, #432]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005636:	f023 0107 	bic.w	r1, r3, #7
 800563a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800563e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005642:	4a68      	ldr	r2, [pc, #416]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005644:	430b      	orrs	r3, r1
 8005646:	6593      	str	r3, [r2, #88]	@ 0x58
 8005648:	e003      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800564e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005652:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f002 0320 	and.w	r3, r2, #32
 800565e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005662:	2300      	movs	r3, #0
 8005664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005668:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800566c:	460b      	mov	r3, r1
 800566e:	4313      	orrs	r3, r2
 8005670:	d055      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005676:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800567a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800567e:	d033      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005684:	d82c      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800568a:	d02f      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005690:	d826      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005692:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005696:	d02b      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005698:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800569c:	d820      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800569e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056a2:	d012      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80056a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056a8:	d81a      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d022      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80056ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056b2:	d115      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056b8:	3308      	adds	r3, #8
 80056ba:	2100      	movs	r1, #0
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 febd 	bl	800643c <RCCEx_PLL2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056c8:	e015      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056ce:	3328      	adds	r3, #40	@ 0x28
 80056d0:	2102      	movs	r1, #2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 ff64 	bl	80065a0 <RCCEx_PLL3_Config>
 80056d8:	4603      	mov	r3, r0
 80056da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056de:	e00a      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056e6:	e006      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80056e8:	bf00      	nop
 80056ea:	e004      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80056ec:	bf00      	nop
 80056ee:	e002      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80056f0:	bf00      	nop
 80056f2:	e000      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80056f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10b      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056fe:	4b39      	ldr	r3, [pc, #228]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005702:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800570a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800570e:	4a35      	ldr	r2, [pc, #212]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005710:	430b      	orrs	r3, r1
 8005712:	6553      	str	r3, [r2, #84]	@ 0x54
 8005714:	e003      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005716:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800571a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800571e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800572a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005734:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005738:	460b      	mov	r3, r1
 800573a:	4313      	orrs	r3, r2
 800573c:	d058      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800573e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005742:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005746:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800574a:	d033      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800574c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005750:	d82c      	bhi.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005756:	d02f      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800575c:	d826      	bhi.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800575e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005762:	d02b      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005764:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005768:	d820      	bhi.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800576a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800576e:	d012      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005774:	d81a      	bhi.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005776:	2b00      	cmp	r3, #0
 8005778:	d022      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800577a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577e:	d115      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005784:	3308      	adds	r3, #8
 8005786:	2100      	movs	r1, #0
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fe57 	bl	800643c <RCCEx_PLL2_Config>
 800578e:	4603      	mov	r3, r0
 8005790:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005794:	e015      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005796:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800579a:	3328      	adds	r3, #40	@ 0x28
 800579c:	2102      	movs	r1, #2
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fefe 	bl	80065a0 <RCCEx_PLL3_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80057aa:	e00a      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057b2:	e006      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80057b4:	bf00      	nop
 80057b6:	e004      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80057b8:	bf00      	nop
 80057ba:	e002      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80057bc:	bf00      	nop
 80057be:	e000      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80057c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10e      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057ca:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80057d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057da:	4a02      	ldr	r2, [pc, #8]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80057dc:	430b      	orrs	r3, r1
 80057de:	6593      	str	r3, [r2, #88]	@ 0x58
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80057e2:	bf00      	nop
 80057e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80057f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80057fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005800:	2300      	movs	r3, #0
 8005802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005806:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800580a:	460b      	mov	r3, r1
 800580c:	4313      	orrs	r3, r2
 800580e:	d055      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005814:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005818:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800581c:	d033      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800581e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005822:	d82c      	bhi.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005828:	d02f      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800582a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800582e:	d826      	bhi.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005830:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005834:	d02b      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005836:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800583a:	d820      	bhi.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800583c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005840:	d012      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005842:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005846:	d81a      	bhi.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005848:	2b00      	cmp	r3, #0
 800584a:	d022      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800584c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005850:	d115      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005852:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005856:	3308      	adds	r3, #8
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fdee 	bl	800643c <RCCEx_PLL2_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005866:	e015      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800586c:	3328      	adds	r3, #40	@ 0x28
 800586e:	2102      	movs	r1, #2
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fe95 	bl	80065a0 <RCCEx_PLL3_Config>
 8005876:	4603      	mov	r3, r0
 8005878:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800587c:	e00a      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005884:	e006      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005886:	bf00      	nop
 8005888:	e004      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800588a:	bf00      	nop
 800588c:	e002      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800588e:	bf00      	nop
 8005890:	e000      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005894:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10b      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800589c:	4ba1      	ldr	r3, [pc, #644]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800589e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80058a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058ac:	4a9d      	ldr	r2, [pc, #628]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058ae:	430b      	orrs	r3, r1
 80058b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80058b2:	e003      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80058bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	f002 0308 	and.w	r3, r2, #8
 80058c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058cc:	2300      	movs	r3, #0
 80058ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80058d6:	460b      	mov	r3, r1
 80058d8:	4313      	orrs	r3, r2
 80058da:	d01e      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80058dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e8:	d10c      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ee:	3328      	adds	r3, #40	@ 0x28
 80058f0:	2102      	movs	r1, #2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fe54 	bl	80065a0 <RCCEx_PLL3_Config>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005904:	4b87      	ldr	r3, [pc, #540]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005908:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800590c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005910:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005914:	4a83      	ldr	r2, [pc, #524]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005916:	430b      	orrs	r3, r1
 8005918:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800591a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f002 0310 	and.w	r3, r2, #16
 8005926:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800592a:	2300      	movs	r3, #0
 800592c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005930:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005934:	460b      	mov	r3, r1
 8005936:	4313      	orrs	r3, r2
 8005938:	d01e      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800593a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800593e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005946:	d10c      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800594c:	3328      	adds	r3, #40	@ 0x28
 800594e:	2102      	movs	r1, #2
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fe25 	bl	80065a0 <RCCEx_PLL3_Config>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005962:	4b70      	ldr	r3, [pc, #448]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005966:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800596a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800596e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005972:	4a6c      	ldr	r2, [pc, #432]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005974:	430b      	orrs	r3, r1
 8005976:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005988:	2300      	movs	r3, #0
 800598a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800598e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005992:	460b      	mov	r3, r1
 8005994:	4313      	orrs	r3, r2
 8005996:	d03e      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005998:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800599c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a4:	d022      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80059a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059aa:	d81b      	bhi.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b4:	d00b      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80059b6:	e015      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059bc:	3308      	adds	r3, #8
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fd3b 	bl	800643c <RCCEx_PLL2_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80059cc:	e00f      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d2:	3328      	adds	r3, #40	@ 0x28
 80059d4:	2102      	movs	r1, #2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fde2 	bl	80065a0 <RCCEx_PLL3_Config>
 80059dc:	4603      	mov	r3, r0
 80059de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80059e2:	e004      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80059ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80059fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a06:	4a47      	ldr	r2, [pc, #284]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a0c:	e003      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005a22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a24:	2300      	movs	r3, #0
 8005a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a28:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	d03b      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a3e:	d01f      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005a40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a44:	d818      	bhi.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a4a:	d003      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005a4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a50:	d007      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005a52:	e011      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a54:	4b33      	ldr	r3, [pc, #204]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a58:	4a32      	ldr	r2, [pc, #200]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a60:	e00f      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a66:	3328      	adds	r3, #40	@ 0x28
 8005a68:	2101      	movs	r1, #1
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fd98 	bl	80065a0 <RCCEx_PLL3_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a76:	e004      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a7e:	e000      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8005a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10b      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a8a:	4b26      	ldr	r3, [pc, #152]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9a:	4a22      	ldr	r2, [pc, #136]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005aa0:	e003      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aa6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005ab6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ab8:	2300      	movs	r3, #0
 8005aba:	677b      	str	r3, [r7, #116]	@ 0x74
 8005abc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	d034      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8005ad0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ad4:	d007      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005ad6:	e011      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad8:	4b12      	ldr	r3, [pc, #72]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	4a11      	ldr	r2, [pc, #68]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ae4:	e00e      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ae6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aea:	3308      	adds	r3, #8
 8005aec:	2102      	movs	r1, #2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fca4 	bl	800643c <RCCEx_PLL2_Config>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005afa:	e003      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10d      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b0c:	4b05      	ldr	r3, [pc, #20]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b10:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1a:	4a02      	ldr	r2, [pc, #8]	@ (8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b20:	e006      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b3e:	2300      	movs	r3, #0
 8005b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b42:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	d00c      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b50:	3328      	adds	r3, #40	@ 0x28
 8005b52:	2102      	movs	r1, #2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fd23 	bl	80065a0 <RCCEx_PLL3_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005b72:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b74:	2300      	movs	r3, #0
 8005b76:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b78:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	d038      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b8e:	d018      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005b90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b94:	d811      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b9a:	d014      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ba0:	d80b      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d011      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005baa:	d106      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bac:	4bc3      	ldr	r3, [pc, #780]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb0:	4ac2      	ldr	r2, [pc, #776]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005bb8:	e008      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005bc0:	e004      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005bc2:	bf00      	nop
 8005bc4:	e002      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10b      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bd4:	4bb9      	ldr	r3, [pc, #740]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be4:	4ab5      	ldr	r2, [pc, #724]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005be6:	430b      	orrs	r3, r1
 8005be8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bea:	e003      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bf0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005c00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c02:	2300      	movs	r3, #0
 8005c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c06:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	d009      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c10:	4baa      	ldr	r3, [pc, #680]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c1e:	4aa7      	ldr	r2, [pc, #668]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c20:	430b      	orrs	r3, r1
 8005c22:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c30:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c32:	2300      	movs	r3, #0
 8005c34:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	d009      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c40:	4b9e      	ldr	r3, [pc, #632]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c44:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4e:	4a9b      	ldr	r2, [pc, #620]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005c60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c62:	2300      	movs	r3, #0
 8005c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c66:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	d009      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005c70:	4b92      	ldr	r3, [pc, #584]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c74:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c7e:	4a8f      	ldr	r2, [pc, #572]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c92:	2300      	movs	r3, #0
 8005c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c96:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	d00e      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ca0:	4b86      	ldr	r3, [pc, #536]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	4a85      	ldr	r2, [pc, #532]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ca6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005caa:	6113      	str	r3, [r2, #16]
 8005cac:	4b83      	ldr	r3, [pc, #524]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005cae:	6919      	ldr	r1, [r3, #16]
 8005cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005cb8:	4a80      	ldr	r2, [pc, #512]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ccc:	2300      	movs	r3, #0
 8005cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cd0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005cda:	4b78      	ldr	r3, [pc, #480]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cde:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce8:	4a74      	ldr	r2, [pc, #464]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005cea:	430b      	orrs	r3, r1
 8005cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005cfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d00:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005d04:	460b      	mov	r3, r1
 8005d06:	4313      	orrs	r3, r2
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d1a:	4a68      	ldr	r2, [pc, #416]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	2100      	movs	r1, #0
 8005d2a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d32:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005d36:	460b      	mov	r3, r1
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	d011      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d40:	3308      	adds	r3, #8
 8005d42:	2100      	movs	r1, #0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fb79 	bl	800643c <RCCEx_PLL2_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005d50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d003      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	6239      	str	r1, [r7, #32]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d76:	460b      	mov	r3, r1
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	d011      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d80:	3308      	adds	r3, #8
 8005d82:	2101      	movs	r1, #1
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fb59 	bl	800643c <RCCEx_PLL2_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005d90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da8:	2100      	movs	r1, #0
 8005daa:	61b9      	str	r1, [r7, #24]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005db6:	460b      	mov	r3, r1
 8005db8:	4313      	orrs	r3, r2
 8005dba:	d011      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005dc0:	3308      	adds	r3, #8
 8005dc2:	2102      	movs	r1, #2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fb39 	bl	800643c <RCCEx_PLL2_Config>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ddc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	2100      	movs	r1, #0
 8005dea:	6139      	str	r1, [r7, #16]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005df6:	460b      	mov	r3, r1
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	d011      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e00:	3328      	adds	r3, #40	@ 0x28
 8005e02:	2100      	movs	r1, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fbcb 	bl	80065a0 <RCCEx_PLL3_Config>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005e10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	2100      	movs	r1, #0
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e36:	460b      	mov	r3, r1
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	d011      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e40:	3328      	adds	r3, #40	@ 0x28
 8005e42:	2101      	movs	r1, #1
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fbab 	bl	80065a0 <RCCEx_PLL3_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005e50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	2100      	movs	r1, #0
 8005e6a:	6039      	str	r1, [r7, #0]
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	607b      	str	r3, [r7, #4]
 8005e72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e76:	460b      	mov	r3, r1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	d011      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e80:	3328      	adds	r3, #40	@ 0x28
 8005e82:	2102      	movs	r1, #2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fb8b 	bl	80065a0 <RCCEx_PLL3_Config>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005e90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005e9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005ea0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e000      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eba:	bf00      	nop
 8005ebc:	58024400 	.word	0x58024400

08005ec0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005ec4:	f7fe fde2 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	091b      	lsrs	r3, r3, #4
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4904      	ldr	r1, [pc, #16]	@ (8005ee8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	0800a248 	.word	0x0800a248

08005eec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	@ 0x24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef4:	4ba1      	ldr	r3, [pc, #644]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005efe:	4b9f      	ldr	r3, [pc, #636]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f02:	0b1b      	lsrs	r3, r3, #12
 8005f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f0a:	4b9c      	ldr	r3, [pc, #624]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0e:	091b      	lsrs	r3, r3, #4
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005f16:	4b99      	ldr	r3, [pc, #612]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1a:	08db      	lsrs	r3, r3, #3
 8005f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8111 	beq.w	800615c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	f000 8083 	beq.w	8006048 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	f200 80a1 	bhi.w	800608c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d056      	beq.n	8006004 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005f56:	e099      	b.n	800608c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f58:	4b88      	ldr	r3, [pc, #544]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d02d      	beq.n	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f64:	4b85      	ldr	r3, [pc, #532]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	08db      	lsrs	r3, r3, #3
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	4a84      	ldr	r2, [pc, #528]	@ (8006180 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005f70:	fa22 f303 	lsr.w	r3, r2, r3
 8005f74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b7b      	ldr	r3, [pc, #492]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005fbe:	e087      	b.n	80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006188 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006002:	e065      	b.n	80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800618c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b59      	ldr	r3, [pc, #356]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a03 	vldr	s12, [r7, #12]
 800602a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006046:	e043      	b.n	80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006190 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605a:	4b48      	ldr	r3, [pc, #288]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800605c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606a:	ed97 6a03 	vldr	s12, [r7, #12]
 800606e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800607e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800608a:	e021      	b.n	80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800618c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	4b37      	ldr	r3, [pc, #220]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006184 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80060d0:	4b2a      	ldr	r3, [pc, #168]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d4:	0a5b      	lsrs	r3, r3, #9
 80060d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f6:	ee17 2a90 	vmov	r2, s15
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80060fe:	4b1f      	ldr	r3, [pc, #124]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006102:	0c1b      	lsrs	r3, r3, #16
 8006104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006108:	ee07 3a90 	vmov	s15, r3
 800610c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006110:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006114:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006118:	edd7 6a07 	vldr	s13, [r7, #28]
 800611c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006124:	ee17 2a90 	vmov	r2, s15
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800612c:	4b13      	ldr	r3, [pc, #76]	@ (800617c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800612e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006130:	0e1b      	lsrs	r3, r3, #24
 8006132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006146:	edd7 6a07 	vldr	s13, [r7, #28]
 800614a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800614e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006152:	ee17 2a90 	vmov	r2, s15
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800615a:	e008      	b.n	800616e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
}
 800616e:	bf00      	nop
 8006170:	3724      	adds	r7, #36	@ 0x24
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	58024400 	.word	0x58024400
 8006180:	03d09000 	.word	0x03d09000
 8006184:	46000000 	.word	0x46000000
 8006188:	4c742400 	.word	0x4c742400
 800618c:	4a742400 	.word	0x4a742400
 8006190:	4af42400 	.word	0x4af42400

08006194 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006194:	b480      	push	{r7}
 8006196:	b089      	sub	sp, #36	@ 0x24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800619c:	4ba1      	ldr	r3, [pc, #644]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800619e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80061a6:	4b9f      	ldr	r3, [pc, #636]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	0d1b      	lsrs	r3, r3, #20
 80061ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80061b2:	4b9c      	ldr	r3, [pc, #624]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b6:	0a1b      	lsrs	r3, r3, #8
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80061be:	4b99      	ldr	r3, [pc, #612]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c2:	08db      	lsrs	r3, r3, #3
 80061c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	fb02 f303 	mul.w	r3, r2, r3
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8111 	beq.w	8006404 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	f000 8083 	beq.w	80062f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	f200 80a1 	bhi.w	8006334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d056      	beq.n	80062ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80061fe:	e099      	b.n	8006334 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006200:	4b88      	ldr	r3, [pc, #544]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d02d      	beq.n	8006268 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800620c:	4b85      	ldr	r3, [pc, #532]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	08db      	lsrs	r3, r3, #3
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	4a84      	ldr	r2, [pc, #528]	@ (8006428 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006218:	fa22 f303 	lsr.w	r3, r2, r3
 800621c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	ee07 3a90 	vmov	s15, r3
 8006224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006236:	4b7b      	ldr	r3, [pc, #492]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006246:	ed97 6a03 	vldr	s12, [r7, #12]
 800624a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800642c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800624e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800625a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006262:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006266:	e087      	b.n	8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006272:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006430 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627a:	4b6a      	ldr	r3, [pc, #424]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628a:	ed97 6a03 	vldr	s12, [r7, #12]
 800628e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800642c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800629e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062aa:	e065      	b.n	8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062be:	4b59      	ldr	r3, [pc, #356]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80062d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800642c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ee:	e043      	b.n	8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006438 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80062fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006302:	4b48      	ldr	r3, [pc, #288]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006312:	ed97 6a03 	vldr	s12, [r7, #12]
 8006316:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800642c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800631a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006332:	e021      	b.n	8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006346:	4b37      	ldr	r3, [pc, #220]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006356:	ed97 6a03 	vldr	s12, [r7, #12]
 800635a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800642c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800635e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800636a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006376:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006378:	4b2a      	ldr	r3, [pc, #168]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800637a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637c:	0a5b      	lsrs	r3, r3, #9
 800637e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800638e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006392:	edd7 6a07 	vldr	s13, [r7, #28]
 8006396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800639a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800639e:	ee17 2a90 	vmov	r2, s15
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80063a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	0c1b      	lsrs	r3, r3, #16
 80063ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063b0:	ee07 3a90 	vmov	s15, r3
 80063b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063cc:	ee17 2a90 	vmov	r2, s15
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80063d4:	4b13      	ldr	r3, [pc, #76]	@ (8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	0e1b      	lsrs	r3, r3, #24
 80063da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063fa:	ee17 2a90 	vmov	r2, s15
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006402:	e008      	b.n	8006416 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	609a      	str	r2, [r3, #8]
}
 8006416:	bf00      	nop
 8006418:	3724      	adds	r7, #36	@ 0x24
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	58024400 	.word	0x58024400
 8006428:	03d09000 	.word	0x03d09000
 800642c:	46000000 	.word	0x46000000
 8006430:	4c742400 	.word	0x4c742400
 8006434:	4a742400 	.word	0x4a742400
 8006438:	4af42400 	.word	0x4af42400

0800643c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800644a:	4b53      	ldr	r3, [pc, #332]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 800644c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	2b03      	cmp	r3, #3
 8006454:	d101      	bne.n	800645a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e099      	b.n	800658e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800645a:	4b4f      	ldr	r3, [pc, #316]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a4e      	ldr	r2, [pc, #312]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006460:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006466:	f7fc fa63 	bl	8002930 <HAL_GetTick>
 800646a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800646c:	e008      	b.n	8006480 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800646e:	f7fc fa5f 	bl	8002930 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	2b02      	cmp	r3, #2
 800647a:	d901      	bls.n	8006480 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e086      	b.n	800658e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006480:	4b45      	ldr	r3, [pc, #276]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1f0      	bne.n	800646e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800648c:	4b42      	ldr	r3, [pc, #264]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 800648e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006490:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	031b      	lsls	r3, r3, #12
 800649a:	493f      	ldr	r1, [pc, #252]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 800649c:	4313      	orrs	r3, r2
 800649e:	628b      	str	r3, [r1, #40]	@ 0x28
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	025b      	lsls	r3, r3, #9
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	041b      	lsls	r3, r3, #16
 80064be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	061b      	lsls	r3, r3, #24
 80064cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80064d0:	4931      	ldr	r1, [pc, #196]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80064d6:	4b30      	ldr	r3, [pc, #192]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 80064d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	492d      	ldr	r1, [pc, #180]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80064e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 80064ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ec:	f023 0220 	bic.w	r2, r3, #32
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	4928      	ldr	r1, [pc, #160]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80064fa:	4b27      	ldr	r3, [pc, #156]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 80064fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fe:	4a26      	ldr	r2, [pc, #152]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006500:	f023 0310 	bic.w	r3, r3, #16
 8006504:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006506:	4b24      	ldr	r3, [pc, #144]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006508:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800650a:	4b24      	ldr	r3, [pc, #144]	@ (800659c <RCCEx_PLL2_Config+0x160>)
 800650c:	4013      	ands	r3, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	69d2      	ldr	r2, [r2, #28]
 8006512:	00d2      	lsls	r2, r2, #3
 8006514:	4920      	ldr	r1, [pc, #128]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006516:	4313      	orrs	r3, r2
 8006518:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800651a:	4b1f      	ldr	r3, [pc, #124]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 800651c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651e:	4a1e      	ldr	r2, [pc, #120]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006520:	f043 0310 	orr.w	r3, r3, #16
 8006524:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800652c:	4b1a      	ldr	r3, [pc, #104]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 800652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006530:	4a19      	ldr	r2, [pc, #100]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006532:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006536:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006538:	e00f      	b.n	800655a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d106      	bne.n	800654e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006540:	4b15      	ldr	r3, [pc, #84]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006544:	4a14      	ldr	r2, [pc, #80]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800654a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800654c:	e005      	b.n	800655a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800654e:	4b12      	ldr	r3, [pc, #72]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	4a11      	ldr	r2, [pc, #68]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006554:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006558:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800655a:	4b0f      	ldr	r3, [pc, #60]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a0e      	ldr	r2, [pc, #56]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006560:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006566:	f7fc f9e3 	bl	8002930 <HAL_GetTick>
 800656a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800656c:	e008      	b.n	8006580 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800656e:	f7fc f9df 	bl	8002930 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e006      	b.n	800658e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006580:	4b05      	ldr	r3, [pc, #20]	@ (8006598 <RCCEx_PLL2_Config+0x15c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	58024400 	.word	0x58024400
 800659c:	ffff0007 	.word	0xffff0007

080065a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065ae:	4b53      	ldr	r3, [pc, #332]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80065b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d101      	bne.n	80065be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e099      	b.n	80066f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80065be:	4b4f      	ldr	r3, [pc, #316]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a4e      	ldr	r2, [pc, #312]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80065c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ca:	f7fc f9b1 	bl	8002930 <HAL_GetTick>
 80065ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065d0:	e008      	b.n	80065e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80065d2:	f7fc f9ad 	bl	8002930 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e086      	b.n	80066f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065e4:	4b45      	ldr	r3, [pc, #276]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f0      	bne.n	80065d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80065f0:	4b42      	ldr	r3, [pc, #264]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	051b      	lsls	r3, r3, #20
 80065fe:	493f      	ldr	r1, [pc, #252]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 8006600:	4313      	orrs	r3, r2
 8006602:	628b      	str	r3, [r1, #40]	@ 0x28
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	3b01      	subs	r3, #1
 800660a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	3b01      	subs	r3, #1
 8006614:	025b      	lsls	r3, r3, #9
 8006616:	b29b      	uxth	r3, r3
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	3b01      	subs	r3, #1
 8006620:	041b      	lsls	r3, r3, #16
 8006622:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	3b01      	subs	r3, #1
 800662e:	061b      	lsls	r3, r3, #24
 8006630:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006634:	4931      	ldr	r1, [pc, #196]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 8006636:	4313      	orrs	r3, r2
 8006638:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800663a:	4b30      	ldr	r3, [pc, #192]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	492d      	ldr	r1, [pc, #180]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 8006648:	4313      	orrs	r3, r2
 800664a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800664c:	4b2b      	ldr	r3, [pc, #172]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 800664e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006650:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	4928      	ldr	r1, [pc, #160]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 800665a:	4313      	orrs	r3, r2
 800665c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800665e:	4b27      	ldr	r3, [pc, #156]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 8006660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006662:	4a26      	ldr	r2, [pc, #152]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 8006664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006668:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800666a:	4b24      	ldr	r3, [pc, #144]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 800666c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800666e:	4b24      	ldr	r3, [pc, #144]	@ (8006700 <RCCEx_PLL3_Config+0x160>)
 8006670:	4013      	ands	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	69d2      	ldr	r2, [r2, #28]
 8006676:	00d2      	lsls	r2, r2, #3
 8006678:	4920      	ldr	r1, [pc, #128]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 800667a:	4313      	orrs	r3, r2
 800667c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800667e:	4b1f      	ldr	r3, [pc, #124]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 8006680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006682:	4a1e      	ldr	r2, [pc, #120]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 8006684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006688:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006690:	4b1a      	ldr	r3, [pc, #104]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	4a19      	ldr	r2, [pc, #100]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 8006696:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800669a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800669c:	e00f      	b.n	80066be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d106      	bne.n	80066b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80066a4:	4b15      	ldr	r3, [pc, #84]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	4a14      	ldr	r2, [pc, #80]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80066aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80066ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80066b0:	e005      	b.n	80066be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80066b2:	4b12      	ldr	r3, [pc, #72]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	4a11      	ldr	r2, [pc, #68]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80066b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80066be:	4b0f      	ldr	r3, [pc, #60]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a0e      	ldr	r2, [pc, #56]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80066c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ca:	f7fc f931 	bl	8002930 <HAL_GetTick>
 80066ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066d0:	e008      	b.n	80066e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066d2:	f7fc f92d 	bl	8002930 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d901      	bls.n	80066e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e006      	b.n	80066f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066e4:	4b05      	ldr	r3, [pc, #20]	@ (80066fc <RCCEx_PLL3_Config+0x15c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f0      	beq.n	80066d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	58024400 	.word	0x58024400
 8006700:	ffff0007 	.word	0xffff0007

08006704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e049      	b.n	80067aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fb fdb4 	bl	8002298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f001 f9e8 	bl	8007b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e049      	b.n	8006858 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d106      	bne.n	80067de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f841 	bl	8006860 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f001 f991 	bl	8007b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <HAL_TIM_PWM_Start+0x24>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b01      	cmp	r3, #1
 800688e:	bf14      	ite	ne
 8006890:	2301      	movne	r3, #1
 8006892:	2300      	moveq	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	e03c      	b.n	8006912 <HAL_TIM_PWM_Start+0x9e>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b04      	cmp	r3, #4
 800689c:	d109      	bne.n	80068b2 <HAL_TIM_PWM_Start+0x3e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	bf14      	ite	ne
 80068aa:	2301      	movne	r3, #1
 80068ac:	2300      	moveq	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	e02f      	b.n	8006912 <HAL_TIM_PWM_Start+0x9e>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d109      	bne.n	80068cc <HAL_TIM_PWM_Start+0x58>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	bf14      	ite	ne
 80068c4:	2301      	movne	r3, #1
 80068c6:	2300      	moveq	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	e022      	b.n	8006912 <HAL_TIM_PWM_Start+0x9e>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b0c      	cmp	r3, #12
 80068d0:	d109      	bne.n	80068e6 <HAL_TIM_PWM_Start+0x72>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b01      	cmp	r3, #1
 80068dc:	bf14      	ite	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	2300      	moveq	r3, #0
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	e015      	b.n	8006912 <HAL_TIM_PWM_Start+0x9e>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d109      	bne.n	8006900 <HAL_TIM_PWM_Start+0x8c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	bf14      	ite	ne
 80068f8:	2301      	movne	r3, #1
 80068fa:	2300      	moveq	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	e008      	b.n	8006912 <HAL_TIM_PWM_Start+0x9e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	bf14      	ite	ne
 800690c:	2301      	movne	r3, #1
 800690e:	2300      	moveq	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e0a1      	b.n	8006a5e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <HAL_TIM_PWM_Start+0xb6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006928:	e023      	b.n	8006972 <HAL_TIM_PWM_Start+0xfe>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b04      	cmp	r3, #4
 800692e:	d104      	bne.n	800693a <HAL_TIM_PWM_Start+0xc6>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006938:	e01b      	b.n	8006972 <HAL_TIM_PWM_Start+0xfe>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b08      	cmp	r3, #8
 800693e:	d104      	bne.n	800694a <HAL_TIM_PWM_Start+0xd6>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006948:	e013      	b.n	8006972 <HAL_TIM_PWM_Start+0xfe>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b0c      	cmp	r3, #12
 800694e:	d104      	bne.n	800695a <HAL_TIM_PWM_Start+0xe6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006958:	e00b      	b.n	8006972 <HAL_TIM_PWM_Start+0xfe>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b10      	cmp	r3, #16
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Start+0xf6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006968:	e003      	b.n	8006972 <HAL_TIM_PWM_Start+0xfe>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2202      	movs	r2, #2
 800696e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2201      	movs	r2, #1
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f001 fefa 	bl	8008774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a38      	ldr	r2, [pc, #224]	@ (8006a68 <HAL_TIM_PWM_Start+0x1f4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x13e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a37      	ldr	r2, [pc, #220]	@ (8006a6c <HAL_TIM_PWM_Start+0x1f8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x13e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a35      	ldr	r2, [pc, #212]	@ (8006a70 <HAL_TIM_PWM_Start+0x1fc>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x13e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a34      	ldr	r2, [pc, #208]	@ (8006a74 <HAL_TIM_PWM_Start+0x200>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x13e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a32      	ldr	r2, [pc, #200]	@ (8006a78 <HAL_TIM_PWM_Start+0x204>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d101      	bne.n	80069b6 <HAL_TIM_PWM_Start+0x142>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e000      	b.n	80069b8 <HAL_TIM_PWM_Start+0x144>
 80069b6:	2300      	movs	r3, #0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a25      	ldr	r2, [pc, #148]	@ (8006a68 <HAL_TIM_PWM_Start+0x1f4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d022      	beq.n	8006a1c <HAL_TIM_PWM_Start+0x1a8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069de:	d01d      	beq.n	8006a1c <HAL_TIM_PWM_Start+0x1a8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a25      	ldr	r2, [pc, #148]	@ (8006a7c <HAL_TIM_PWM_Start+0x208>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d018      	beq.n	8006a1c <HAL_TIM_PWM_Start+0x1a8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a24      	ldr	r2, [pc, #144]	@ (8006a80 <HAL_TIM_PWM_Start+0x20c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <HAL_TIM_PWM_Start+0x1a8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a22      	ldr	r2, [pc, #136]	@ (8006a84 <HAL_TIM_PWM_Start+0x210>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00e      	beq.n	8006a1c <HAL_TIM_PWM_Start+0x1a8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1a      	ldr	r2, [pc, #104]	@ (8006a6c <HAL_TIM_PWM_Start+0x1f8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d009      	beq.n	8006a1c <HAL_TIM_PWM_Start+0x1a8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8006a88 <HAL_TIM_PWM_Start+0x214>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <HAL_TIM_PWM_Start+0x1a8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a16      	ldr	r2, [pc, #88]	@ (8006a70 <HAL_TIM_PWM_Start+0x1fc>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d115      	bne.n	8006a48 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	4b1a      	ldr	r3, [pc, #104]	@ (8006a8c <HAL_TIM_PWM_Start+0x218>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b06      	cmp	r3, #6
 8006a2c:	d015      	beq.n	8006a5a <HAL_TIM_PWM_Start+0x1e6>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a34:	d011      	beq.n	8006a5a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0201 	orr.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a46:	e008      	b.n	8006a5a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0201 	orr.w	r2, r2, #1
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	e000      	b.n	8006a5c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	40010000 	.word	0x40010000
 8006a6c:	40010400 	.word	0x40010400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400
 8006a78:	40014800 	.word	0x40014800
 8006a7c:	40000400 	.word	0x40000400
 8006a80:	40000800 	.word	0x40000800
 8006a84:	40000c00 	.word	0x40000c00
 8006a88:	40001800 	.word	0x40001800
 8006a8c:	00010007 	.word	0x00010007

08006a90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e049      	b.n	8006b36 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f841 	bl	8006b3e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3304      	adds	r3, #4
 8006acc:	4619      	mov	r1, r3
 8006ace:	4610      	mov	r0, r2
 8006ad0:	f001 f822 	bl	8007b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d104      	bne.n	8006b6e <HAL_TIM_IC_Start+0x1a>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	e023      	b.n	8006bb6 <HAL_TIM_IC_Start+0x62>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b04      	cmp	r3, #4
 8006b72:	d104      	bne.n	8006b7e <HAL_TIM_IC_Start+0x2a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	e01b      	b.n	8006bb6 <HAL_TIM_IC_Start+0x62>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d104      	bne.n	8006b8e <HAL_TIM_IC_Start+0x3a>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	e013      	b.n	8006bb6 <HAL_TIM_IC_Start+0x62>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b0c      	cmp	r3, #12
 8006b92:	d104      	bne.n	8006b9e <HAL_TIM_IC_Start+0x4a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	e00b      	b.n	8006bb6 <HAL_TIM_IC_Start+0x62>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d104      	bne.n	8006bae <HAL_TIM_IC_Start+0x5a>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	e003      	b.n	8006bb6 <HAL_TIM_IC_Start+0x62>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <HAL_TIM_IC_Start+0x74>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	e013      	b.n	8006bf0 <HAL_TIM_IC_Start+0x9c>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d104      	bne.n	8006bd8 <HAL_TIM_IC_Start+0x84>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	e00b      	b.n	8006bf0 <HAL_TIM_IC_Start+0x9c>
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d104      	bne.n	8006be8 <HAL_TIM_IC_Start+0x94>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	e003      	b.n	8006bf0 <HAL_TIM_IC_Start+0x9c>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d102      	bne.n	8006bfe <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d001      	beq.n	8006c02 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e097      	b.n	8006d32 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <HAL_TIM_IC_Start+0xbe>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c10:	e023      	b.n	8006c5a <HAL_TIM_IC_Start+0x106>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d104      	bne.n	8006c22 <HAL_TIM_IC_Start+0xce>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c20:	e01b      	b.n	8006c5a <HAL_TIM_IC_Start+0x106>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d104      	bne.n	8006c32 <HAL_TIM_IC_Start+0xde>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c30:	e013      	b.n	8006c5a <HAL_TIM_IC_Start+0x106>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b0c      	cmp	r3, #12
 8006c36:	d104      	bne.n	8006c42 <HAL_TIM_IC_Start+0xee>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c40:	e00b      	b.n	8006c5a <HAL_TIM_IC_Start+0x106>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b10      	cmp	r3, #16
 8006c46:	d104      	bne.n	8006c52 <HAL_TIM_IC_Start+0xfe>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c50:	e003      	b.n	8006c5a <HAL_TIM_IC_Start+0x106>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2202      	movs	r2, #2
 8006c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_IC_Start+0x116>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c68:	e013      	b.n	8006c92 <HAL_TIM_IC_Start+0x13e>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_IC_Start+0x126>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c78:	e00b      	b.n	8006c92 <HAL_TIM_IC_Start+0x13e>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d104      	bne.n	8006c8a <HAL_TIM_IC_Start+0x136>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c88:	e003      	b.n	8006c92 <HAL_TIM_IC_Start+0x13e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 fd6a 	bl	8008774 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a25      	ldr	r2, [pc, #148]	@ (8006d3c <HAL_TIM_IC_Start+0x1e8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d022      	beq.n	8006cf0 <HAL_TIM_IC_Start+0x19c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb2:	d01d      	beq.n	8006cf0 <HAL_TIM_IC_Start+0x19c>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a21      	ldr	r2, [pc, #132]	@ (8006d40 <HAL_TIM_IC_Start+0x1ec>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d018      	beq.n	8006cf0 <HAL_TIM_IC_Start+0x19c>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a20      	ldr	r2, [pc, #128]	@ (8006d44 <HAL_TIM_IC_Start+0x1f0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d013      	beq.n	8006cf0 <HAL_TIM_IC_Start+0x19c>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8006d48 <HAL_TIM_IC_Start+0x1f4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00e      	beq.n	8006cf0 <HAL_TIM_IC_Start+0x19c>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d4c <HAL_TIM_IC_Start+0x1f8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d009      	beq.n	8006cf0 <HAL_TIM_IC_Start+0x19c>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d50 <HAL_TIM_IC_Start+0x1fc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d004      	beq.n	8006cf0 <HAL_TIM_IC_Start+0x19c>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1a      	ldr	r2, [pc, #104]	@ (8006d54 <HAL_TIM_IC_Start+0x200>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d115      	bne.n	8006d1c <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	4b18      	ldr	r3, [pc, #96]	@ (8006d58 <HAL_TIM_IC_Start+0x204>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b06      	cmp	r3, #6
 8006d00:	d015      	beq.n	8006d2e <HAL_TIM_IC_Start+0x1da>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d08:	d011      	beq.n	8006d2e <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0201 	orr.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1a:	e008      	b.n	8006d2e <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e000      	b.n	8006d30 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40000400 	.word	0x40000400
 8006d44:	40000800 	.word	0x40000800
 8006d48:	40000c00 	.word	0x40000c00
 8006d4c:	40010400 	.word	0x40010400
 8006d50:	40001800 	.word	0x40001800
 8006d54:	40014000 	.word	0x40014000
 8006d58:	00010007 	.word	0x00010007

08006d5c <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 fd00 	bl	8008774 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6a1a      	ldr	r2, [r3, #32]
 8006d7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10f      	bne.n	8006da4 <HAL_TIM_IC_Stop+0x48>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	f240 4344 	movw	r3, #1092	@ 0x444
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d107      	bne.n	8006da4 <HAL_TIM_IC_Stop+0x48>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0201 	bic.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <HAL_TIM_IC_Stop+0x58>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006db2:	e023      	b.n	8006dfc <HAL_TIM_IC_Stop+0xa0>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d104      	bne.n	8006dc4 <HAL_TIM_IC_Stop+0x68>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dc2:	e01b      	b.n	8006dfc <HAL_TIM_IC_Stop+0xa0>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d104      	bne.n	8006dd4 <HAL_TIM_IC_Stop+0x78>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dd2:	e013      	b.n	8006dfc <HAL_TIM_IC_Stop+0xa0>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b0c      	cmp	r3, #12
 8006dd8:	d104      	bne.n	8006de4 <HAL_TIM_IC_Stop+0x88>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006de2:	e00b      	b.n	8006dfc <HAL_TIM_IC_Stop+0xa0>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	2b10      	cmp	r3, #16
 8006de8:	d104      	bne.n	8006df4 <HAL_TIM_IC_Stop+0x98>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006df2:	e003      	b.n	8006dfc <HAL_TIM_IC_Stop+0xa0>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d104      	bne.n	8006e0c <HAL_TIM_IC_Stop+0xb0>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e0a:	e013      	b.n	8006e34 <HAL_TIM_IC_Stop+0xd8>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d104      	bne.n	8006e1c <HAL_TIM_IC_Stop+0xc0>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e1a:	e00b      	b.n	8006e34 <HAL_TIM_IC_Stop+0xd8>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	d104      	bne.n	8006e2c <HAL_TIM_IC_Stop+0xd0>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e2a:	e003      	b.n	8006e34 <HAL_TIM_IC_Stop+0xd8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <HAL_TIM_IC_Start_IT+0x1e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	e023      	b.n	8006ea6 <HAL_TIM_IC_Start_IT+0x66>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d104      	bne.n	8006e6e <HAL_TIM_IC_Start_IT+0x2e>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	e01b      	b.n	8006ea6 <HAL_TIM_IC_Start_IT+0x66>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d104      	bne.n	8006e7e <HAL_TIM_IC_Start_IT+0x3e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	e013      	b.n	8006ea6 <HAL_TIM_IC_Start_IT+0x66>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b0c      	cmp	r3, #12
 8006e82:	d104      	bne.n	8006e8e <HAL_TIM_IC_Start_IT+0x4e>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	e00b      	b.n	8006ea6 <HAL_TIM_IC_Start_IT+0x66>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d104      	bne.n	8006e9e <HAL_TIM_IC_Start_IT+0x5e>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	e003      	b.n	8006ea6 <HAL_TIM_IC_Start_IT+0x66>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d104      	bne.n	8006eb8 <HAL_TIM_IC_Start_IT+0x78>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	e013      	b.n	8006ee0 <HAL_TIM_IC_Start_IT+0xa0>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d104      	bne.n	8006ec8 <HAL_TIM_IC_Start_IT+0x88>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	e00b      	b.n	8006ee0 <HAL_TIM_IC_Start_IT+0xa0>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d104      	bne.n	8006ed8 <HAL_TIM_IC_Start_IT+0x98>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	e003      	b.n	8006ee0 <HAL_TIM_IC_Start_IT+0xa0>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d102      	bne.n	8006eee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ee8:	7b7b      	ldrb	r3, [r7, #13]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d001      	beq.n	8006ef2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e0e2      	b.n	80070b8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <HAL_TIM_IC_Start_IT+0xc2>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f00:	e023      	b.n	8006f4a <HAL_TIM_IC_Start_IT+0x10a>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d104      	bne.n	8006f12 <HAL_TIM_IC_Start_IT+0xd2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f10:	e01b      	b.n	8006f4a <HAL_TIM_IC_Start_IT+0x10a>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_IC_Start_IT+0xe2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f20:	e013      	b.n	8006f4a <HAL_TIM_IC_Start_IT+0x10a>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b0c      	cmp	r3, #12
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_IC_Start_IT+0xf2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f30:	e00b      	b.n	8006f4a <HAL_TIM_IC_Start_IT+0x10a>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_IC_Start_IT+0x102>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f40:	e003      	b.n	8006f4a <HAL_TIM_IC_Start_IT+0x10a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d104      	bne.n	8006f5a <HAL_TIM_IC_Start_IT+0x11a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f58:	e013      	b.n	8006f82 <HAL_TIM_IC_Start_IT+0x142>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d104      	bne.n	8006f6a <HAL_TIM_IC_Start_IT+0x12a>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f68:	e00b      	b.n	8006f82 <HAL_TIM_IC_Start_IT+0x142>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d104      	bne.n	8006f7a <HAL_TIM_IC_Start_IT+0x13a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f78:	e003      	b.n	8006f82 <HAL_TIM_IC_Start_IT+0x142>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b0c      	cmp	r3, #12
 8006f86:	d841      	bhi.n	800700c <HAL_TIM_IC_Start_IT+0x1cc>
 8006f88:	a201      	add	r2, pc, #4	@ (adr r2, 8006f90 <HAL_TIM_IC_Start_IT+0x150>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fc5 	.word	0x08006fc5
 8006f94:	0800700d 	.word	0x0800700d
 8006f98:	0800700d 	.word	0x0800700d
 8006f9c:	0800700d 	.word	0x0800700d
 8006fa0:	08006fd7 	.word	0x08006fd7
 8006fa4:	0800700d 	.word	0x0800700d
 8006fa8:	0800700d 	.word	0x0800700d
 8006fac:	0800700d 	.word	0x0800700d
 8006fb0:	08006fe9 	.word	0x08006fe9
 8006fb4:	0800700d 	.word	0x0800700d
 8006fb8:	0800700d 	.word	0x0800700d
 8006fbc:	0800700d 	.word	0x0800700d
 8006fc0:	08006ffb 	.word	0x08006ffb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0202 	orr.w	r2, r2, #2
 8006fd2:	60da      	str	r2, [r3, #12]
      break;
 8006fd4:	e01d      	b.n	8007012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0204 	orr.w	r2, r2, #4
 8006fe4:	60da      	str	r2, [r3, #12]
      break;
 8006fe6:	e014      	b.n	8007012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0208 	orr.w	r2, r2, #8
 8006ff6:	60da      	str	r2, [r3, #12]
      break;
 8006ff8:	e00b      	b.n	8007012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68da      	ldr	r2, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0210 	orr.w	r2, r2, #16
 8007008:	60da      	str	r2, [r3, #12]
      break;
 800700a:	e002      	b.n	8007012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
      break;
 8007010:	bf00      	nop
  }

  if (status == HAL_OK)
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d14e      	bne.n	80070b6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2201      	movs	r2, #1
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	4618      	mov	r0, r3
 8007022:	f001 fba7 	bl	8008774 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a25      	ldr	r2, [pc, #148]	@ (80070c0 <HAL_TIM_IC_Start_IT+0x280>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d022      	beq.n	8007076 <HAL_TIM_IC_Start_IT+0x236>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007038:	d01d      	beq.n	8007076 <HAL_TIM_IC_Start_IT+0x236>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a21      	ldr	r2, [pc, #132]	@ (80070c4 <HAL_TIM_IC_Start_IT+0x284>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <HAL_TIM_IC_Start_IT+0x236>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a1f      	ldr	r2, [pc, #124]	@ (80070c8 <HAL_TIM_IC_Start_IT+0x288>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_TIM_IC_Start_IT+0x236>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1e      	ldr	r2, [pc, #120]	@ (80070cc <HAL_TIM_IC_Start_IT+0x28c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_TIM_IC_Start_IT+0x236>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1c      	ldr	r2, [pc, #112]	@ (80070d0 <HAL_TIM_IC_Start_IT+0x290>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_TIM_IC_Start_IT+0x236>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1b      	ldr	r2, [pc, #108]	@ (80070d4 <HAL_TIM_IC_Start_IT+0x294>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_TIM_IC_Start_IT+0x236>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a19      	ldr	r2, [pc, #100]	@ (80070d8 <HAL_TIM_IC_Start_IT+0x298>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d115      	bne.n	80070a2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	4b17      	ldr	r3, [pc, #92]	@ (80070dc <HAL_TIM_IC_Start_IT+0x29c>)
 800707e:	4013      	ands	r3, r2
 8007080:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2b06      	cmp	r3, #6
 8007086:	d015      	beq.n	80070b4 <HAL_TIM_IC_Start_IT+0x274>
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800708e:	d011      	beq.n	80070b4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0201 	orr.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a0:	e008      	b.n	80070b4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f042 0201 	orr.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	e000      	b.n	80070b6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40010000 	.word	0x40010000
 80070c4:	40000400 	.word	0x40000400
 80070c8:	40000800 	.word	0x40000800
 80070cc:	40000c00 	.word	0x40000c00
 80070d0:	40010400 	.word	0x40010400
 80070d4:	40001800 	.word	0x40001800
 80070d8:	40014000 	.word	0x40014000
 80070dc:	00010007 	.word	0x00010007

080070e0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b0c      	cmp	r3, #12
 80070f2:	d841      	bhi.n	8007178 <HAL_TIM_IC_Stop_IT+0x98>
 80070f4:	a201      	add	r2, pc, #4	@ (adr r2, 80070fc <HAL_TIM_IC_Stop_IT+0x1c>)
 80070f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	08007131 	.word	0x08007131
 8007100:	08007179 	.word	0x08007179
 8007104:	08007179 	.word	0x08007179
 8007108:	08007179 	.word	0x08007179
 800710c:	08007143 	.word	0x08007143
 8007110:	08007179 	.word	0x08007179
 8007114:	08007179 	.word	0x08007179
 8007118:	08007179 	.word	0x08007179
 800711c:	08007155 	.word	0x08007155
 8007120:	08007179 	.word	0x08007179
 8007124:	08007179 	.word	0x08007179
 8007128:	08007179 	.word	0x08007179
 800712c:	08007167 	.word	0x08007167
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0202 	bic.w	r2, r2, #2
 800713e:	60da      	str	r2, [r3, #12]
      break;
 8007140:	e01d      	b.n	800717e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 0204 	bic.w	r2, r2, #4
 8007150:	60da      	str	r2, [r3, #12]
      break;
 8007152:	e014      	b.n	800717e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0208 	bic.w	r2, r2, #8
 8007162:	60da      	str	r2, [r3, #12]
      break;
 8007164:	e00b      	b.n	800717e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68da      	ldr	r2, [r3, #12]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0210 	bic.w	r2, r2, #16
 8007174:	60da      	str	r2, [r3, #12]
      break;
 8007176:	e002      	b.n	800717e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	73fb      	strb	r3, [r7, #15]
      break;
 800717c:	bf00      	nop
  }

  if (status == HAL_OK)
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d166      	bne.n	8007252 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2200      	movs	r2, #0
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	4618      	mov	r0, r3
 800718e:	f001 faf1 	bl	8008774 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6a1a      	ldr	r2, [r3, #32]
 8007198:	f241 1311 	movw	r3, #4369	@ 0x1111
 800719c:	4013      	ands	r3, r2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10f      	bne.n	80071c2 <HAL_TIM_IC_Stop_IT+0xe2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6a1a      	ldr	r2, [r3, #32]
 80071a8:	f240 4344 	movw	r3, #1092	@ 0x444
 80071ac:	4013      	ands	r3, r2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <HAL_TIM_IC_Stop_IT+0xe2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <HAL_TIM_IC_Stop_IT+0xf2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071d0:	e023      	b.n	800721a <HAL_TIM_IC_Stop_IT+0x13a>
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d104      	bne.n	80071e2 <HAL_TIM_IC_Stop_IT+0x102>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071e0:	e01b      	b.n	800721a <HAL_TIM_IC_Stop_IT+0x13a>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d104      	bne.n	80071f2 <HAL_TIM_IC_Stop_IT+0x112>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071f0:	e013      	b.n	800721a <HAL_TIM_IC_Stop_IT+0x13a>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b0c      	cmp	r3, #12
 80071f6:	d104      	bne.n	8007202 <HAL_TIM_IC_Stop_IT+0x122>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007200:	e00b      	b.n	800721a <HAL_TIM_IC_Stop_IT+0x13a>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b10      	cmp	r3, #16
 8007206:	d104      	bne.n	8007212 <HAL_TIM_IC_Stop_IT+0x132>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007210:	e003      	b.n	800721a <HAL_TIM_IC_Stop_IT+0x13a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d104      	bne.n	800722a <HAL_TIM_IC_Stop_IT+0x14a>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007228:	e013      	b.n	8007252 <HAL_TIM_IC_Stop_IT+0x172>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b04      	cmp	r3, #4
 800722e:	d104      	bne.n	800723a <HAL_TIM_IC_Stop_IT+0x15a>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007238:	e00b      	b.n	8007252 <HAL_TIM_IC_Stop_IT+0x172>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b08      	cmp	r3, #8
 800723e:	d104      	bne.n	800724a <HAL_TIM_IC_Stop_IT+0x16a>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007248:	e003      	b.n	8007252 <HAL_TIM_IC_Stop_IT+0x172>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8007252:	7bfb      	ldrb	r3, [r7, #15]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d020      	beq.n	80072c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01b      	beq.n	80072c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f06f 0202 	mvn.w	r2, #2
 8007290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fa fbba 	bl	8001a20 <HAL_TIM_IC_CaptureCallback>
 80072ac:	e005      	b.n	80072ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fc14 	bl	8007adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fc1b 	bl	8007af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d020      	beq.n	800730c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01b      	beq.n	800730c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0204 	mvn.w	r2, #4
 80072dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2202      	movs	r2, #2
 80072e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fa fb94 	bl	8001a20 <HAL_TIM_IC_CaptureCallback>
 80072f8:	e005      	b.n	8007306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fbee 	bl	8007adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fbf5 	bl	8007af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d020      	beq.n	8007358 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f003 0308 	and.w	r3, r3, #8
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01b      	beq.n	8007358 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f06f 0208 	mvn.w	r2, #8
 8007328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2204      	movs	r2, #4
 800732e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fa fb6e 	bl	8001a20 <HAL_TIM_IC_CaptureCallback>
 8007344:	e005      	b.n	8007352 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fbc8 	bl	8007adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fbcf 	bl	8007af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f003 0310 	and.w	r3, r3, #16
 800735e:	2b00      	cmp	r3, #0
 8007360:	d020      	beq.n	80073a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f003 0310 	and.w	r3, r3, #16
 8007368:	2b00      	cmp	r3, #0
 800736a:	d01b      	beq.n	80073a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0210 	mvn.w	r2, #16
 8007374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2208      	movs	r2, #8
 800737a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fa fb48 	bl	8001a20 <HAL_TIM_IC_CaptureCallback>
 8007390:	e005      	b.n	800739e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fba2 	bl	8007adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fba9 	bl	8007af0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00c      	beq.n	80073c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d007      	beq.n	80073c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f06f 0201 	mvn.w	r2, #1
 80073c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fb80 	bl	8007ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d104      	bne.n	80073dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00c      	beq.n	80073f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80073ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f001 fb09 	bl	8008a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00c      	beq.n	800741a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 fb01 	bl	8008a1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00c      	beq.n	800743e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800742a:	2b00      	cmp	r3, #0
 800742c:	d007      	beq.n	800743e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fb63 	bl	8007b04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f003 0320 	and.w	r3, r3, #32
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00c      	beq.n	8007462 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f06f 0220 	mvn.w	r2, #32
 800745a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fac9 	bl	80089f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007462:	bf00      	nop
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007484:	2302      	movs	r3, #2
 8007486:	e088      	b.n	800759a <HAL_TIM_IC_ConfigChannel+0x130>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d11b      	bne.n	80074ce <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80074a6:	f000 ff9d 	bl	80083e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 020c 	bic.w	r2, r2, #12
 80074b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6999      	ldr	r1, [r3, #24]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	619a      	str	r2, [r3, #24]
 80074cc:	e060      	b.n	8007590 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d11c      	bne.n	800750e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80074e4:	f001 f821 	bl	800852a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699a      	ldr	r2, [r3, #24]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80074f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6999      	ldr	r1, [r3, #24]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	021a      	lsls	r2, r3, #8
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	619a      	str	r2, [r3, #24]
 800750c:	e040      	b.n	8007590 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b08      	cmp	r3, #8
 8007512:	d11b      	bne.n	800754c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007524:	f001 f86e 	bl	8008604 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	69da      	ldr	r2, [r3, #28]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f022 020c 	bic.w	r2, r2, #12
 8007536:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69d9      	ldr	r1, [r3, #28]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	61da      	str	r2, [r3, #28]
 800754a:	e021      	b.n	8007590 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b0c      	cmp	r3, #12
 8007550:	d11c      	bne.n	800758c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007562:	f001 f88b 	bl	800867c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007574:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69d9      	ldr	r1, [r3, #28]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	021a      	lsls	r2, r3, #8
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	61da      	str	r2, [r3, #28]
 800758a:	e001      	b.n	8007590 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007598:	7dfb      	ldrb	r3, [r7, #23]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075be:	2302      	movs	r3, #2
 80075c0:	e0ff      	b.n	80077c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b14      	cmp	r3, #20
 80075ce:	f200 80f0 	bhi.w	80077b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075d2:	a201      	add	r2, pc, #4	@ (adr r2, 80075d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	0800762d 	.word	0x0800762d
 80075dc:	080077b3 	.word	0x080077b3
 80075e0:	080077b3 	.word	0x080077b3
 80075e4:	080077b3 	.word	0x080077b3
 80075e8:	0800766d 	.word	0x0800766d
 80075ec:	080077b3 	.word	0x080077b3
 80075f0:	080077b3 	.word	0x080077b3
 80075f4:	080077b3 	.word	0x080077b3
 80075f8:	080076af 	.word	0x080076af
 80075fc:	080077b3 	.word	0x080077b3
 8007600:	080077b3 	.word	0x080077b3
 8007604:	080077b3 	.word	0x080077b3
 8007608:	080076ef 	.word	0x080076ef
 800760c:	080077b3 	.word	0x080077b3
 8007610:	080077b3 	.word	0x080077b3
 8007614:	080077b3 	.word	0x080077b3
 8007618:	08007731 	.word	0x08007731
 800761c:	080077b3 	.word	0x080077b3
 8007620:	080077b3 	.word	0x080077b3
 8007624:	080077b3 	.word	0x080077b3
 8007628:	08007771 	.word	0x08007771
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fb16 	bl	8007c64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699a      	ldr	r2, [r3, #24]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0208 	orr.w	r2, r2, #8
 8007646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f022 0204 	bic.w	r2, r2, #4
 8007656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6999      	ldr	r1, [r3, #24]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	619a      	str	r2, [r3, #24]
      break;
 800766a:	e0a5      	b.n	80077b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fb86 	bl	8007d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6999      	ldr	r1, [r3, #24]
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	021a      	lsls	r2, r3, #8
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	619a      	str	r2, [r3, #24]
      break;
 80076ac:	e084      	b.n	80077b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fbef 	bl	8007e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69da      	ldr	r2, [r3, #28]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0208 	orr.w	r2, r2, #8
 80076c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0204 	bic.w	r2, r2, #4
 80076d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69d9      	ldr	r1, [r3, #28]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	61da      	str	r2, [r3, #28]
      break;
 80076ec:	e064      	b.n	80077b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 fc57 	bl	8007fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69d9      	ldr	r1, [r3, #28]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	021a      	lsls	r2, r3, #8
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	61da      	str	r2, [r3, #28]
      break;
 800772e:	e043      	b.n	80077b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fca0 	bl	800807c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0208 	orr.w	r2, r2, #8
 800774a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0204 	bic.w	r2, r2, #4
 800775a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	691a      	ldr	r2, [r3, #16]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800776e:	e023      	b.n	80077b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fce4 	bl	8008144 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800778a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800779a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	021a      	lsls	r2, r3, #8
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80077b0:	e002      	b.n	80077b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	75fb      	strb	r3, [r7, #23]
      break;
 80077b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop

080077cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_TIM_ConfigClockSource+0x1c>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e0dc      	b.n	80079a2 <HAL_TIM_ConfigClockSource+0x1d6>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	4b6a      	ldr	r3, [pc, #424]	@ (80079ac <HAL_TIM_ConfigClockSource+0x1e0>)
 8007804:	4013      	ands	r3, r2
 8007806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800780e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a64      	ldr	r2, [pc, #400]	@ (80079b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	f000 80a9 	beq.w	8007976 <HAL_TIM_ConfigClockSource+0x1aa>
 8007824:	4a62      	ldr	r2, [pc, #392]	@ (80079b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	f200 80ae 	bhi.w	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 800782c:	4a61      	ldr	r2, [pc, #388]	@ (80079b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	f000 80a1 	beq.w	8007976 <HAL_TIM_ConfigClockSource+0x1aa>
 8007834:	4a5f      	ldr	r2, [pc, #380]	@ (80079b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	f200 80a6 	bhi.w	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 800783c:	4a5e      	ldr	r2, [pc, #376]	@ (80079b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800783e:	4293      	cmp	r3, r2
 8007840:	f000 8099 	beq.w	8007976 <HAL_TIM_ConfigClockSource+0x1aa>
 8007844:	4a5c      	ldr	r2, [pc, #368]	@ (80079b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007846:	4293      	cmp	r3, r2
 8007848:	f200 809e 	bhi.w	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 800784c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007850:	f000 8091 	beq.w	8007976 <HAL_TIM_ConfigClockSource+0x1aa>
 8007854:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007858:	f200 8096 	bhi.w	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 800785c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007860:	f000 8089 	beq.w	8007976 <HAL_TIM_ConfigClockSource+0x1aa>
 8007864:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007868:	f200 808e 	bhi.w	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 800786c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007870:	d03e      	beq.n	80078f0 <HAL_TIM_ConfigClockSource+0x124>
 8007872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007876:	f200 8087 	bhi.w	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 800787a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800787e:	f000 8086 	beq.w	800798e <HAL_TIM_ConfigClockSource+0x1c2>
 8007882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007886:	d87f      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 8007888:	2b70      	cmp	r3, #112	@ 0x70
 800788a:	d01a      	beq.n	80078c2 <HAL_TIM_ConfigClockSource+0xf6>
 800788c:	2b70      	cmp	r3, #112	@ 0x70
 800788e:	d87b      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 8007890:	2b60      	cmp	r3, #96	@ 0x60
 8007892:	d050      	beq.n	8007936 <HAL_TIM_ConfigClockSource+0x16a>
 8007894:	2b60      	cmp	r3, #96	@ 0x60
 8007896:	d877      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 8007898:	2b50      	cmp	r3, #80	@ 0x50
 800789a:	d03c      	beq.n	8007916 <HAL_TIM_ConfigClockSource+0x14a>
 800789c:	2b50      	cmp	r3, #80	@ 0x50
 800789e:	d873      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 80078a0:	2b40      	cmp	r3, #64	@ 0x40
 80078a2:	d058      	beq.n	8007956 <HAL_TIM_ConfigClockSource+0x18a>
 80078a4:	2b40      	cmp	r3, #64	@ 0x40
 80078a6:	d86f      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 80078a8:	2b30      	cmp	r3, #48	@ 0x30
 80078aa:	d064      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x1aa>
 80078ac:	2b30      	cmp	r3, #48	@ 0x30
 80078ae:	d86b      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d060      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x1aa>
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d867      	bhi.n	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d05c      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x1aa>
 80078bc:	2b10      	cmp	r3, #16
 80078be:	d05a      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x1aa>
 80078c0:	e062      	b.n	8007988 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078d2:	f000 ff2f 	bl	8008734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	609a      	str	r2, [r3, #8]
      break;
 80078ee:	e04f      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007900:	f000 ff18 	bl	8008734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007912:	609a      	str	r2, [r3, #8]
      break;
 8007914:	e03c      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007922:	461a      	mov	r2, r3
 8007924:	f000 fdd2 	bl	80084cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2150      	movs	r1, #80	@ 0x50
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fee2 	bl	80086f8 <TIM_ITRx_SetConfig>
      break;
 8007934:	e02c      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007942:	461a      	mov	r2, r3
 8007944:	f000 fe2e 	bl	80085a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2160      	movs	r1, #96	@ 0x60
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fed2 	bl	80086f8 <TIM_ITRx_SetConfig>
      break;
 8007954:	e01c      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007962:	461a      	mov	r2, r3
 8007964:	f000 fdb2 	bl	80084cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2140      	movs	r1, #64	@ 0x40
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fec2 	bl	80086f8 <TIM_ITRx_SetConfig>
      break;
 8007974:	e00c      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	4610      	mov	r0, r2
 8007982:	f000 feb9 	bl	80086f8 <TIM_ITRx_SetConfig>
      break;
 8007986:	e003      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
      break;
 800798c:	e000      	b.n	8007990 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800798e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	ffceff88 	.word	0xffceff88
 80079b0:	00100040 	.word	0x00100040
 80079b4:	00100030 	.word	0x00100030
 80079b8:	00100020 	.word	0x00100020

080079bc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d101      	bne.n	80079d4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80079d0:	2302      	movs	r3, #2
 80079d2:	e031      	b.n	8007a38 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fc12 	bl	8008210 <TIM_SlaveTimer_SetConfig>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e018      	b.n	8007a38 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a14:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68da      	ldr	r2, [r3, #12]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a24:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	d831      	bhi.n	8007ab8 <HAL_TIM_ReadCapturedValue+0x78>
 8007a54:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a91 	.word	0x08007a91
 8007a60:	08007ab9 	.word	0x08007ab9
 8007a64:	08007ab9 	.word	0x08007ab9
 8007a68:	08007ab9 	.word	0x08007ab9
 8007a6c:	08007a9b 	.word	0x08007a9b
 8007a70:	08007ab9 	.word	0x08007ab9
 8007a74:	08007ab9 	.word	0x08007ab9
 8007a78:	08007ab9 	.word	0x08007ab9
 8007a7c:	08007aa5 	.word	0x08007aa5
 8007a80:	08007ab9 	.word	0x08007ab9
 8007a84:	08007ab9 	.word	0x08007ab9
 8007a88:	08007ab9 	.word	0x08007ab9
 8007a8c:	08007aaf 	.word	0x08007aaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a96:	60fb      	str	r3, [r7, #12]

      break;
 8007a98:	e00f      	b.n	8007aba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa0:	60fb      	str	r3, [r7, #12]

      break;
 8007aa2:	e00a      	b.n	8007aba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007aaa:	60fb      	str	r3, [r7, #12]

      break;
 8007aac:	e005      	b.n	8007aba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	60fb      	str	r3, [r7, #12]

      break;
 8007ab6:	e000      	b.n	8007aba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007ab8:	bf00      	nop
  }

  return tmpreg;
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a46      	ldr	r2, [pc, #280]	@ (8007c44 <TIM_Base_SetConfig+0x12c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d013      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b36:	d00f      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a43      	ldr	r2, [pc, #268]	@ (8007c48 <TIM_Base_SetConfig+0x130>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d00b      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a42      	ldr	r2, [pc, #264]	@ (8007c4c <TIM_Base_SetConfig+0x134>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d007      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a41      	ldr	r2, [pc, #260]	@ (8007c50 <TIM_Base_SetConfig+0x138>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_Base_SetConfig+0x40>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a40      	ldr	r2, [pc, #256]	@ (8007c54 <TIM_Base_SetConfig+0x13c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d108      	bne.n	8007b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a35      	ldr	r2, [pc, #212]	@ (8007c44 <TIM_Base_SetConfig+0x12c>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d01f      	beq.n	8007bb2 <TIM_Base_SetConfig+0x9a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b78:	d01b      	beq.n	8007bb2 <TIM_Base_SetConfig+0x9a>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a32      	ldr	r2, [pc, #200]	@ (8007c48 <TIM_Base_SetConfig+0x130>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d017      	beq.n	8007bb2 <TIM_Base_SetConfig+0x9a>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a31      	ldr	r2, [pc, #196]	@ (8007c4c <TIM_Base_SetConfig+0x134>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d013      	beq.n	8007bb2 <TIM_Base_SetConfig+0x9a>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a30      	ldr	r2, [pc, #192]	@ (8007c50 <TIM_Base_SetConfig+0x138>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00f      	beq.n	8007bb2 <TIM_Base_SetConfig+0x9a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a2f      	ldr	r2, [pc, #188]	@ (8007c54 <TIM_Base_SetConfig+0x13c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00b      	beq.n	8007bb2 <TIM_Base_SetConfig+0x9a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8007c58 <TIM_Base_SetConfig+0x140>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d007      	beq.n	8007bb2 <TIM_Base_SetConfig+0x9a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8007c5c <TIM_Base_SetConfig+0x144>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d003      	beq.n	8007bb2 <TIM_Base_SetConfig+0x9a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a2c      	ldr	r2, [pc, #176]	@ (8007c60 <TIM_Base_SetConfig+0x148>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d108      	bne.n	8007bc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a16      	ldr	r2, [pc, #88]	@ (8007c44 <TIM_Base_SetConfig+0x12c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00f      	beq.n	8007c10 <TIM_Base_SetConfig+0xf8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a18      	ldr	r2, [pc, #96]	@ (8007c54 <TIM_Base_SetConfig+0x13c>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00b      	beq.n	8007c10 <TIM_Base_SetConfig+0xf8>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a17      	ldr	r2, [pc, #92]	@ (8007c58 <TIM_Base_SetConfig+0x140>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d007      	beq.n	8007c10 <TIM_Base_SetConfig+0xf8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a16      	ldr	r2, [pc, #88]	@ (8007c5c <TIM_Base_SetConfig+0x144>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_Base_SetConfig+0xf8>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a15      	ldr	r2, [pc, #84]	@ (8007c60 <TIM_Base_SetConfig+0x148>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d103      	bne.n	8007c18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d105      	bne.n	8007c36 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f023 0201 	bic.w	r2, r3, #1
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	611a      	str	r2, [r3, #16]
  }
}
 8007c36:	bf00      	nop
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40000c00 	.word	0x40000c00
 8007c54:	40010400 	.word	0x40010400
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	40014400 	.word	0x40014400
 8007c60:	40014800 	.word	0x40014800

08007c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	f023 0201 	bic.w	r2, r3, #1
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4b37      	ldr	r3, [pc, #220]	@ (8007d6c <TIM_OC1_SetConfig+0x108>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f023 0302 	bic.w	r3, r3, #2
 8007cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a2d      	ldr	r2, [pc, #180]	@ (8007d70 <TIM_OC1_SetConfig+0x10c>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00f      	beq.n	8007ce0 <TIM_OC1_SetConfig+0x7c>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8007d74 <TIM_OC1_SetConfig+0x110>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00b      	beq.n	8007ce0 <TIM_OC1_SetConfig+0x7c>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a2b      	ldr	r2, [pc, #172]	@ (8007d78 <TIM_OC1_SetConfig+0x114>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d007      	beq.n	8007ce0 <TIM_OC1_SetConfig+0x7c>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8007d7c <TIM_OC1_SetConfig+0x118>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_OC1_SetConfig+0x7c>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a29      	ldr	r2, [pc, #164]	@ (8007d80 <TIM_OC1_SetConfig+0x11c>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d10c      	bne.n	8007cfa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f023 0308 	bic.w	r3, r3, #8
 8007ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f023 0304 	bic.w	r3, r3, #4
 8007cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8007d70 <TIM_OC1_SetConfig+0x10c>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00f      	beq.n	8007d22 <TIM_OC1_SetConfig+0xbe>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a1b      	ldr	r2, [pc, #108]	@ (8007d74 <TIM_OC1_SetConfig+0x110>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00b      	beq.n	8007d22 <TIM_OC1_SetConfig+0xbe>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8007d78 <TIM_OC1_SetConfig+0x114>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d007      	beq.n	8007d22 <TIM_OC1_SetConfig+0xbe>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a19      	ldr	r2, [pc, #100]	@ (8007d7c <TIM_OC1_SetConfig+0x118>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d003      	beq.n	8007d22 <TIM_OC1_SetConfig+0xbe>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a18      	ldr	r2, [pc, #96]	@ (8007d80 <TIM_OC1_SetConfig+0x11c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d111      	bne.n	8007d46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	621a      	str	r2, [r3, #32]
}
 8007d60:	bf00      	nop
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	fffeff8f 	.word	0xfffeff8f
 8007d70:	40010000 	.word	0x40010000
 8007d74:	40010400 	.word	0x40010400
 8007d78:	40014000 	.word	0x40014000
 8007d7c:	40014400 	.word	0x40014400
 8007d80:	40014800 	.word	0x40014800

08007d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b087      	sub	sp, #28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	f023 0210 	bic.w	r2, r3, #16
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4b34      	ldr	r3, [pc, #208]	@ (8007e80 <TIM_OC2_SetConfig+0xfc>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	021b      	lsls	r3, r3, #8
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f023 0320 	bic.w	r3, r3, #32
 8007dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a29      	ldr	r2, [pc, #164]	@ (8007e84 <TIM_OC2_SetConfig+0x100>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d003      	beq.n	8007dec <TIM_OC2_SetConfig+0x68>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a28      	ldr	r2, [pc, #160]	@ (8007e88 <TIM_OC2_SetConfig+0x104>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d10d      	bne.n	8007e08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	011b      	lsls	r3, r3, #4
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007e84 <TIM_OC2_SetConfig+0x100>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00f      	beq.n	8007e30 <TIM_OC2_SetConfig+0xac>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a1d      	ldr	r2, [pc, #116]	@ (8007e88 <TIM_OC2_SetConfig+0x104>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00b      	beq.n	8007e30 <TIM_OC2_SetConfig+0xac>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007e8c <TIM_OC2_SetConfig+0x108>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d007      	beq.n	8007e30 <TIM_OC2_SetConfig+0xac>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a1b      	ldr	r2, [pc, #108]	@ (8007e90 <TIM_OC2_SetConfig+0x10c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_OC2_SetConfig+0xac>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007e94 <TIM_OC2_SetConfig+0x110>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d113      	bne.n	8007e58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	feff8fff 	.word	0xfeff8fff
 8007e84:	40010000 	.word	0x40010000
 8007e88:	40010400 	.word	0x40010400
 8007e8c:	40014000 	.word	0x40014000
 8007e90:	40014400 	.word	0x40014400
 8007e94:	40014800 	.word	0x40014800

08007e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4b33      	ldr	r3, [pc, #204]	@ (8007f90 <TIM_OC3_SetConfig+0xf8>)
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0303 	bic.w	r3, r3, #3
 8007ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	021b      	lsls	r3, r3, #8
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a28      	ldr	r2, [pc, #160]	@ (8007f94 <TIM_OC3_SetConfig+0xfc>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d003      	beq.n	8007efe <TIM_OC3_SetConfig+0x66>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a27      	ldr	r2, [pc, #156]	@ (8007f98 <TIM_OC3_SetConfig+0x100>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d10d      	bne.n	8007f1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f94 <TIM_OC3_SetConfig+0xfc>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d00f      	beq.n	8007f42 <TIM_OC3_SetConfig+0xaa>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a1c      	ldr	r2, [pc, #112]	@ (8007f98 <TIM_OC3_SetConfig+0x100>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d00b      	beq.n	8007f42 <TIM_OC3_SetConfig+0xaa>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8007f9c <TIM_OC3_SetConfig+0x104>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d007      	beq.n	8007f42 <TIM_OC3_SetConfig+0xaa>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a1a      	ldr	r2, [pc, #104]	@ (8007fa0 <TIM_OC3_SetConfig+0x108>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d003      	beq.n	8007f42 <TIM_OC3_SetConfig+0xaa>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a19      	ldr	r2, [pc, #100]	@ (8007fa4 <TIM_OC3_SetConfig+0x10c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d113      	bne.n	8007f6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	011b      	lsls	r3, r3, #4
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	011b      	lsls	r3, r3, #4
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	621a      	str	r2, [r3, #32]
}
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	fffeff8f 	.word	0xfffeff8f
 8007f94:	40010000 	.word	0x40010000
 8007f98:	40010400 	.word	0x40010400
 8007f9c:	40014000 	.word	0x40014000
 8007fa0:	40014400 	.word	0x40014400
 8007fa4:	40014800 	.word	0x40014800

08007fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	4b24      	ldr	r3, [pc, #144]	@ (8008064 <TIM_OC4_SetConfig+0xbc>)
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	031b      	lsls	r3, r3, #12
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a19      	ldr	r2, [pc, #100]	@ (8008068 <TIM_OC4_SetConfig+0xc0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00f      	beq.n	8008028 <TIM_OC4_SetConfig+0x80>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a18      	ldr	r2, [pc, #96]	@ (800806c <TIM_OC4_SetConfig+0xc4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d00b      	beq.n	8008028 <TIM_OC4_SetConfig+0x80>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a17      	ldr	r2, [pc, #92]	@ (8008070 <TIM_OC4_SetConfig+0xc8>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d007      	beq.n	8008028 <TIM_OC4_SetConfig+0x80>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a16      	ldr	r2, [pc, #88]	@ (8008074 <TIM_OC4_SetConfig+0xcc>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d003      	beq.n	8008028 <TIM_OC4_SetConfig+0x80>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a15      	ldr	r2, [pc, #84]	@ (8008078 <TIM_OC4_SetConfig+0xd0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d109      	bne.n	800803c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800802e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	695b      	ldr	r3, [r3, #20]
 8008034:	019b      	lsls	r3, r3, #6
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4313      	orrs	r3, r2
 800803a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	feff8fff 	.word	0xfeff8fff
 8008068:	40010000 	.word	0x40010000
 800806c:	40010400 	.word	0x40010400
 8008070:	40014000 	.word	0x40014000
 8008074:	40014400 	.word	0x40014400
 8008078:	40014800 	.word	0x40014800

0800807c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4b21      	ldr	r3, [pc, #132]	@ (800812c <TIM_OC5_SetConfig+0xb0>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80080bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	041b      	lsls	r3, r3, #16
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a18      	ldr	r2, [pc, #96]	@ (8008130 <TIM_OC5_SetConfig+0xb4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00f      	beq.n	80080f2 <TIM_OC5_SetConfig+0x76>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a17      	ldr	r2, [pc, #92]	@ (8008134 <TIM_OC5_SetConfig+0xb8>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d00b      	beq.n	80080f2 <TIM_OC5_SetConfig+0x76>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a16      	ldr	r2, [pc, #88]	@ (8008138 <TIM_OC5_SetConfig+0xbc>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d007      	beq.n	80080f2 <TIM_OC5_SetConfig+0x76>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a15      	ldr	r2, [pc, #84]	@ (800813c <TIM_OC5_SetConfig+0xc0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d003      	beq.n	80080f2 <TIM_OC5_SetConfig+0x76>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a14      	ldr	r2, [pc, #80]	@ (8008140 <TIM_OC5_SetConfig+0xc4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d109      	bne.n	8008106 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	621a      	str	r2, [r3, #32]
}
 8008120:	bf00      	nop
 8008122:	371c      	adds	r7, #28
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	fffeff8f 	.word	0xfffeff8f
 8008130:	40010000 	.word	0x40010000
 8008134:	40010400 	.word	0x40010400
 8008138:	40014000 	.word	0x40014000
 800813c:	40014400 	.word	0x40014400
 8008140:	40014800 	.word	0x40014800

08008144 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800816a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4b22      	ldr	r3, [pc, #136]	@ (80081f8 <TIM_OC6_SetConfig+0xb4>)
 8008170:	4013      	ands	r3, r2
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	051b      	lsls	r3, r3, #20
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a19      	ldr	r2, [pc, #100]	@ (80081fc <TIM_OC6_SetConfig+0xb8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00f      	beq.n	80081bc <TIM_OC6_SetConfig+0x78>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a18      	ldr	r2, [pc, #96]	@ (8008200 <TIM_OC6_SetConfig+0xbc>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00b      	beq.n	80081bc <TIM_OC6_SetConfig+0x78>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a17      	ldr	r2, [pc, #92]	@ (8008204 <TIM_OC6_SetConfig+0xc0>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d007      	beq.n	80081bc <TIM_OC6_SetConfig+0x78>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a16      	ldr	r2, [pc, #88]	@ (8008208 <TIM_OC6_SetConfig+0xc4>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d003      	beq.n	80081bc <TIM_OC6_SetConfig+0x78>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a15      	ldr	r2, [pc, #84]	@ (800820c <TIM_OC6_SetConfig+0xc8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d109      	bne.n	80081d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80081c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	029b      	lsls	r3, r3, #10
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	621a      	str	r2, [r3, #32]
}
 80081ea:	bf00      	nop
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	feff8fff 	.word	0xfeff8fff
 80081fc:	40010000 	.word	0x40010000
 8008200:	40010400 	.word	0x40010400
 8008204:	40014000 	.word	0x40014000
 8008208:	40014400 	.word	0x40014400
 800820c:	40014800 	.word	0x40014800

08008210 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	4b65      	ldr	r3, [pc, #404]	@ (80083c0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800822a:	4013      	ands	r3, r2
 800822c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	4313      	orrs	r3, r2
 8008236:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4b62      	ldr	r3, [pc, #392]	@ (80083c4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800823c:	4013      	ands	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	4a5c      	ldr	r2, [pc, #368]	@ (80083c8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008258:	4293      	cmp	r3, r2
 800825a:	f000 80ab 	beq.w	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800825e:	4a5a      	ldr	r2, [pc, #360]	@ (80083c8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	f200 80a4 	bhi.w	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 8008266:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800826a:	f000 80a3 	beq.w	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800826e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008272:	f200 809c 	bhi.w	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 8008276:	4a55      	ldr	r2, [pc, #340]	@ (80083cc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008278:	4293      	cmp	r3, r2
 800827a:	f000 809b 	beq.w	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800827e:	4a53      	ldr	r2, [pc, #332]	@ (80083cc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008280:	4293      	cmp	r3, r2
 8008282:	f200 8094 	bhi.w	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 8008286:	4a52      	ldr	r2, [pc, #328]	@ (80083d0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008288:	4293      	cmp	r3, r2
 800828a:	f000 8093 	beq.w	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800828e:	4a50      	ldr	r2, [pc, #320]	@ (80083d0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	f200 808c 	bhi.w	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 8008296:	4a4f      	ldr	r2, [pc, #316]	@ (80083d4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	f000 808b 	beq.w	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800829e:	4a4d      	ldr	r2, [pc, #308]	@ (80083d4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	f200 8084 	bhi.w	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 80082a6:	4a4c      	ldr	r2, [pc, #304]	@ (80083d8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	f000 8083 	beq.w	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082ae:	4a4a      	ldr	r2, [pc, #296]	@ (80083d8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d87c      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 80082b4:	4a49      	ldr	r2, [pc, #292]	@ (80083dc <TIM_SlaveTimer_SetConfig+0x1cc>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d07c      	beq.n	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082ba:	4a48      	ldr	r2, [pc, #288]	@ (80083dc <TIM_SlaveTimer_SetConfig+0x1cc>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d876      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 80082c0:	4a47      	ldr	r2, [pc, #284]	@ (80083e0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d076      	beq.n	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082c6:	4a46      	ldr	r2, [pc, #280]	@ (80083e0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d870      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 80082cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80082d0:	d070      	beq.n	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082d2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80082d6:	d86a      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 80082d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082dc:	d06a      	beq.n	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082e2:	d864      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 80082e4:	2b70      	cmp	r3, #112	@ 0x70
 80082e6:	d01a      	beq.n	800831e <TIM_SlaveTimer_SetConfig+0x10e>
 80082e8:	2b70      	cmp	r3, #112	@ 0x70
 80082ea:	d860      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 80082ec:	2b60      	cmp	r3, #96	@ 0x60
 80082ee:	d054      	beq.n	800839a <TIM_SlaveTimer_SetConfig+0x18a>
 80082f0:	2b60      	cmp	r3, #96	@ 0x60
 80082f2:	d85c      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 80082f4:	2b50      	cmp	r3, #80	@ 0x50
 80082f6:	d046      	beq.n	8008386 <TIM_SlaveTimer_SetConfig+0x176>
 80082f8:	2b50      	cmp	r3, #80	@ 0x50
 80082fa:	d858      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 80082fc:	2b40      	cmp	r3, #64	@ 0x40
 80082fe:	d019      	beq.n	8008334 <TIM_SlaveTimer_SetConfig+0x124>
 8008300:	2b40      	cmp	r3, #64	@ 0x40
 8008302:	d854      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 8008304:	2b30      	cmp	r3, #48	@ 0x30
 8008306:	d055      	beq.n	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008308:	2b30      	cmp	r3, #48	@ 0x30
 800830a:	d850      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 800830c:	2b20      	cmp	r3, #32
 800830e:	d051      	beq.n	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008310:	2b20      	cmp	r3, #32
 8008312:	d84c      	bhi.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
 8008314:	2b00      	cmp	r3, #0
 8008316:	d04d      	beq.n	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008318:	2b10      	cmp	r3, #16
 800831a:	d04b      	beq.n	80083b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800831c:	e047      	b.n	80083ae <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800832e:	f000 fa01 	bl	8008734 <TIM_ETR_SetConfig>
      break;
 8008332:	e040      	b.n	80083b6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b05      	cmp	r3, #5
 800833a:	d101      	bne.n	8008340 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e03b      	b.n	80083b8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6a1a      	ldr	r2, [r3, #32]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0201 	bic.w	r2, r2, #1
 8008356:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008366:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	4313      	orrs	r3, r2
 8008372:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	621a      	str	r2, [r3, #32]
      break;
 8008384:	e017      	b.n	80083b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008392:	461a      	mov	r2, r3
 8008394:	f000 f89a 	bl	80084cc <TIM_TI1_ConfigInputStage>
      break;
 8008398:	e00d      	b.n	80083b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083a6:	461a      	mov	r2, r3
 80083a8:	f000 f8fc 	bl	80085a4 <TIM_TI2_ConfigInputStage>
      break;
 80083ac:	e003      	b.n	80083b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	75fb      	strb	r3, [r7, #23]
      break;
 80083b2:	e000      	b.n	80083b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80083b4:	bf00      	nop
  }

  return status;
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	ffcfff8f 	.word	0xffcfff8f
 80083c4:	fffefff8 	.word	0xfffefff8
 80083c8:	00200010 	.word	0x00200010
 80083cc:	00100070 	.word	0x00100070
 80083d0:	00100060 	.word	0x00100060
 80083d4:	00100050 	.word	0x00100050
 80083d8:	00100040 	.word	0x00100040
 80083dc:	00100030 	.word	0x00100030
 80083e0:	00100020 	.word	0x00100020

080083e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	f023 0201 	bic.w	r2, r3, #1
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4a28      	ldr	r2, [pc, #160]	@ (80084b0 <TIM_TI1_SetConfig+0xcc>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d01b      	beq.n	800844a <TIM_TI1_SetConfig+0x66>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008418:	d017      	beq.n	800844a <TIM_TI1_SetConfig+0x66>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4a25      	ldr	r2, [pc, #148]	@ (80084b4 <TIM_TI1_SetConfig+0xd0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d013      	beq.n	800844a <TIM_TI1_SetConfig+0x66>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4a24      	ldr	r2, [pc, #144]	@ (80084b8 <TIM_TI1_SetConfig+0xd4>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00f      	beq.n	800844a <TIM_TI1_SetConfig+0x66>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4a23      	ldr	r2, [pc, #140]	@ (80084bc <TIM_TI1_SetConfig+0xd8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00b      	beq.n	800844a <TIM_TI1_SetConfig+0x66>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4a22      	ldr	r2, [pc, #136]	@ (80084c0 <TIM_TI1_SetConfig+0xdc>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d007      	beq.n	800844a <TIM_TI1_SetConfig+0x66>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4a21      	ldr	r2, [pc, #132]	@ (80084c4 <TIM_TI1_SetConfig+0xe0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d003      	beq.n	800844a <TIM_TI1_SetConfig+0x66>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4a20      	ldr	r2, [pc, #128]	@ (80084c8 <TIM_TI1_SetConfig+0xe4>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d101      	bne.n	800844e <TIM_TI1_SetConfig+0x6a>
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <TIM_TI1_SetConfig+0x6c>
 800844e:	2300      	movs	r3, #0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d008      	beq.n	8008466 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f023 0303 	bic.w	r3, r3, #3
 800845a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4313      	orrs	r3, r2
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	e003      	b.n	800846e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	b2db      	uxtb	r3, r3
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	4313      	orrs	r3, r2
 8008480:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f023 030a 	bic.w	r3, r3, #10
 8008488:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f003 030a 	and.w	r3, r3, #10
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	4313      	orrs	r3, r2
 8008494:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	621a      	str	r2, [r3, #32]
}
 80084a2:	bf00      	nop
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	40010000 	.word	0x40010000
 80084b4:	40000400 	.word	0x40000400
 80084b8:	40000800 	.word	0x40000800
 80084bc:	40000c00 	.word	0x40000c00
 80084c0:	40010400 	.word	0x40010400
 80084c4:	40001800 	.word	0x40001800
 80084c8:	40014000 	.word	0x40014000

080084cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	f023 0201 	bic.w	r2, r3, #1
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f023 030a 	bic.w	r3, r3, #10
 8008508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	621a      	str	r2, [r3, #32]
}
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800852a:	b480      	push	{r7}
 800852c:	b087      	sub	sp, #28
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	607a      	str	r2, [r7, #4]
 8008536:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f023 0210 	bic.w	r2, r3, #16
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	021b      	lsls	r3, r3, #8
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	4313      	orrs	r3, r2
 8008560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	031b      	lsls	r3, r3, #12
 800856e:	b29b      	uxth	r3, r3
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800857c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4313      	orrs	r3, r2
 800858a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	621a      	str	r2, [r3, #32]
}
 8008598:	bf00      	nop
 800859a:	371c      	adds	r7, #28
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6a1b      	ldr	r3, [r3, #32]
 80085b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	f023 0210 	bic.w	r2, r3, #16
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	031b      	lsls	r3, r3, #12
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	011b      	lsls	r3, r3, #4
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	621a      	str	r2, [r3, #32]
}
 80085f8:	bf00      	nop
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f023 0303 	bic.w	r3, r3, #3
 8008630:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4313      	orrs	r3, r2
 8008638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008640:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	b2db      	uxtb	r3, r3
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	4313      	orrs	r3, r2
 800864c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008654:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	021b      	lsls	r3, r3, #8
 800865a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	621a      	str	r2, [r3, #32]
}
 8008670:	bf00      	nop
 8008672:	371c      	adds	r7, #28
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	021b      	lsls	r3, r3, #8
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	031b      	lsls	r3, r3, #12
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80086ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	031b      	lsls	r3, r3, #12
 80086d4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	4313      	orrs	r3, r2
 80086dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	621a      	str	r2, [r3, #32]
}
 80086ea:	bf00      	nop
 80086ec:	371c      	adds	r7, #28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
	...

080086f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4b09      	ldr	r3, [pc, #36]	@ (8008730 <TIM_ITRx_SetConfig+0x38>)
 800870c:	4013      	ands	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4313      	orrs	r3, r2
 8008716:	f043 0307 	orr.w	r3, r3, #7
 800871a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	609a      	str	r2, [r3, #8]
}
 8008722:	bf00      	nop
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	ffcfff8f 	.word	0xffcfff8f

08008734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800874e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	021a      	lsls	r2, r3, #8
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	431a      	orrs	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4313      	orrs	r3, r2
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	609a      	str	r2, [r3, #8]
}
 8008768:	bf00      	nop
 800876a:	371c      	adds	r7, #28
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 031f 	and.w	r3, r3, #31
 8008786:	2201      	movs	r2, #1
 8008788:	fa02 f303 	lsl.w	r3, r2, r3
 800878c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a1a      	ldr	r2, [r3, #32]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	43db      	mvns	r3, r3
 8008796:	401a      	ands	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a1a      	ldr	r2, [r3, #32]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f003 031f 	and.w	r3, r3, #31
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	fa01 f303 	lsl.w	r3, r1, r3
 80087ac:	431a      	orrs	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	621a      	str	r2, [r3, #32]
}
 80087b2:	bf00      	nop
 80087b4:	371c      	adds	r7, #28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
	...

080087c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d101      	bne.n	80087d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087d4:	2302      	movs	r3, #2
 80087d6:	e06d      	b.n	80088b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a30      	ldr	r2, [pc, #192]	@ (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d004      	beq.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a2f      	ldr	r2, [pc, #188]	@ (80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d108      	bne.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008812:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008824:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a20      	ldr	r2, [pc, #128]	@ (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d022      	beq.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800884a:	d01d      	beq.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a1d      	ldr	r2, [pc, #116]	@ (80088c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d018      	beq.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a1c      	ldr	r2, [pc, #112]	@ (80088cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d013      	beq.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a1a      	ldr	r2, [pc, #104]	@ (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00e      	beq.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a15      	ldr	r2, [pc, #84]	@ (80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d009      	beq.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a16      	ldr	r2, [pc, #88]	@ (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d004      	beq.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a15      	ldr	r2, [pc, #84]	@ (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d10c      	bne.n	80088a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800888e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	4313      	orrs	r3, r2
 8008898:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	40010000 	.word	0x40010000
 80088c4:	40010400 	.word	0x40010400
 80088c8:	40000400 	.word	0x40000400
 80088cc:	40000800 	.word	0x40000800
 80088d0:	40000c00 	.word	0x40000c00
 80088d4:	40001800 	.word	0x40001800
 80088d8:	40014000 	.word	0x40014000

080088dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e073      	b.n	80089e0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	4313      	orrs	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	4313      	orrs	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4313      	orrs	r3, r2
 8008936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	041b      	lsls	r3, r3, #16
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	4313      	orrs	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a19      	ldr	r2, [pc, #100]	@ (80089ec <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d004      	beq.n	8008994 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a18      	ldr	r2, [pc, #96]	@ (80089f0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d11c      	bne.n	80089ce <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899e:	051b      	lsls	r3, r3, #20
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089bc:	4313      	orrs	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	40010000 	.word	0x40010000
 80089f0:	40010400 	.word	0x40010400

080089f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e042      	b.n	8008ac8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d106      	bne.n	8008a5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7f9 fd81 	bl	800255c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2224      	movs	r2, #36	@ 0x24
 8008a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 0201 	bic.w	r2, r2, #1
 8008a70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d002      	beq.n	8008a80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fe94 	bl	80097a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f825 	bl	8008ad0 <UART_SetConfig>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d101      	bne.n	8008a90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e01b      	b.n	8008ac8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689a      	ldr	r2, [r3, #8]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008aae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f042 0201 	orr.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 ff13 	bl	80098ec <UART_CheckIdleState>
 8008ac6:	4603      	mov	r3, r0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ad4:	b092      	sub	sp, #72	@ 0x48
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	4bbe      	ldr	r3, [pc, #760]	@ (8008df8 <UART_SetConfig+0x328>)
 8008b00:	4013      	ands	r3, r2
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	6812      	ldr	r2, [r2, #0]
 8008b06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4ab3      	ldr	r2, [pc, #716]	@ (8008dfc <UART_SetConfig+0x32c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d004      	beq.n	8008b3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	4baf      	ldr	r3, [pc, #700]	@ (8008e00 <UART_SetConfig+0x330>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	6812      	ldr	r2, [r2, #0]
 8008b4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b4c:	430b      	orrs	r3, r1
 8008b4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b56:	f023 010f 	bic.w	r1, r3, #15
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	430a      	orrs	r2, r1
 8008b64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4aa6      	ldr	r2, [pc, #664]	@ (8008e04 <UART_SetConfig+0x334>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d177      	bne.n	8008c60 <UART_SetConfig+0x190>
 8008b70:	4ba5      	ldr	r3, [pc, #660]	@ (8008e08 <UART_SetConfig+0x338>)
 8008b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b78:	2b28      	cmp	r3, #40	@ 0x28
 8008b7a:	d86d      	bhi.n	8008c58 <UART_SetConfig+0x188>
 8008b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b84 <UART_SetConfig+0xb4>)
 8008b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b82:	bf00      	nop
 8008b84:	08008c29 	.word	0x08008c29
 8008b88:	08008c59 	.word	0x08008c59
 8008b8c:	08008c59 	.word	0x08008c59
 8008b90:	08008c59 	.word	0x08008c59
 8008b94:	08008c59 	.word	0x08008c59
 8008b98:	08008c59 	.word	0x08008c59
 8008b9c:	08008c59 	.word	0x08008c59
 8008ba0:	08008c59 	.word	0x08008c59
 8008ba4:	08008c31 	.word	0x08008c31
 8008ba8:	08008c59 	.word	0x08008c59
 8008bac:	08008c59 	.word	0x08008c59
 8008bb0:	08008c59 	.word	0x08008c59
 8008bb4:	08008c59 	.word	0x08008c59
 8008bb8:	08008c59 	.word	0x08008c59
 8008bbc:	08008c59 	.word	0x08008c59
 8008bc0:	08008c59 	.word	0x08008c59
 8008bc4:	08008c39 	.word	0x08008c39
 8008bc8:	08008c59 	.word	0x08008c59
 8008bcc:	08008c59 	.word	0x08008c59
 8008bd0:	08008c59 	.word	0x08008c59
 8008bd4:	08008c59 	.word	0x08008c59
 8008bd8:	08008c59 	.word	0x08008c59
 8008bdc:	08008c59 	.word	0x08008c59
 8008be0:	08008c59 	.word	0x08008c59
 8008be4:	08008c41 	.word	0x08008c41
 8008be8:	08008c59 	.word	0x08008c59
 8008bec:	08008c59 	.word	0x08008c59
 8008bf0:	08008c59 	.word	0x08008c59
 8008bf4:	08008c59 	.word	0x08008c59
 8008bf8:	08008c59 	.word	0x08008c59
 8008bfc:	08008c59 	.word	0x08008c59
 8008c00:	08008c59 	.word	0x08008c59
 8008c04:	08008c49 	.word	0x08008c49
 8008c08:	08008c59 	.word	0x08008c59
 8008c0c:	08008c59 	.word	0x08008c59
 8008c10:	08008c59 	.word	0x08008c59
 8008c14:	08008c59 	.word	0x08008c59
 8008c18:	08008c59 	.word	0x08008c59
 8008c1c:	08008c59 	.word	0x08008c59
 8008c20:	08008c59 	.word	0x08008c59
 8008c24:	08008c51 	.word	0x08008c51
 8008c28:	2301      	movs	r3, #1
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2e:	e326      	b.n	800927e <UART_SetConfig+0x7ae>
 8008c30:	2304      	movs	r3, #4
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c36:	e322      	b.n	800927e <UART_SetConfig+0x7ae>
 8008c38:	2308      	movs	r3, #8
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3e:	e31e      	b.n	800927e <UART_SetConfig+0x7ae>
 8008c40:	2310      	movs	r3, #16
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c46:	e31a      	b.n	800927e <UART_SetConfig+0x7ae>
 8008c48:	2320      	movs	r3, #32
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e316      	b.n	800927e <UART_SetConfig+0x7ae>
 8008c50:	2340      	movs	r3, #64	@ 0x40
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c56:	e312      	b.n	800927e <UART_SetConfig+0x7ae>
 8008c58:	2380      	movs	r3, #128	@ 0x80
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e30e      	b.n	800927e <UART_SetConfig+0x7ae>
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a69      	ldr	r2, [pc, #420]	@ (8008e0c <UART_SetConfig+0x33c>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d130      	bne.n	8008ccc <UART_SetConfig+0x1fc>
 8008c6a:	4b67      	ldr	r3, [pc, #412]	@ (8008e08 <UART_SetConfig+0x338>)
 8008c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c6e:	f003 0307 	and.w	r3, r3, #7
 8008c72:	2b05      	cmp	r3, #5
 8008c74:	d826      	bhi.n	8008cc4 <UART_SetConfig+0x1f4>
 8008c76:	a201      	add	r2, pc, #4	@ (adr r2, 8008c7c <UART_SetConfig+0x1ac>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008c95 	.word	0x08008c95
 8008c80:	08008c9d 	.word	0x08008c9d
 8008c84:	08008ca5 	.word	0x08008ca5
 8008c88:	08008cad 	.word	0x08008cad
 8008c8c:	08008cb5 	.word	0x08008cb5
 8008c90:	08008cbd 	.word	0x08008cbd
 8008c94:	2300      	movs	r3, #0
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9a:	e2f0      	b.n	800927e <UART_SetConfig+0x7ae>
 8008c9c:	2304      	movs	r3, #4
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca2:	e2ec      	b.n	800927e <UART_SetConfig+0x7ae>
 8008ca4:	2308      	movs	r3, #8
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008caa:	e2e8      	b.n	800927e <UART_SetConfig+0x7ae>
 8008cac:	2310      	movs	r3, #16
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb2:	e2e4      	b.n	800927e <UART_SetConfig+0x7ae>
 8008cb4:	2320      	movs	r3, #32
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cba:	e2e0      	b.n	800927e <UART_SetConfig+0x7ae>
 8008cbc:	2340      	movs	r3, #64	@ 0x40
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e2dc      	b.n	800927e <UART_SetConfig+0x7ae>
 8008cc4:	2380      	movs	r3, #128	@ 0x80
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e2d8      	b.n	800927e <UART_SetConfig+0x7ae>
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a4f      	ldr	r2, [pc, #316]	@ (8008e10 <UART_SetConfig+0x340>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d130      	bne.n	8008d38 <UART_SetConfig+0x268>
 8008cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8008e08 <UART_SetConfig+0x338>)
 8008cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	2b05      	cmp	r3, #5
 8008ce0:	d826      	bhi.n	8008d30 <UART_SetConfig+0x260>
 8008ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce8 <UART_SetConfig+0x218>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d09 	.word	0x08008d09
 8008cf0:	08008d11 	.word	0x08008d11
 8008cf4:	08008d19 	.word	0x08008d19
 8008cf8:	08008d21 	.word	0x08008d21
 8008cfc:	08008d29 	.word	0x08008d29
 8008d00:	2300      	movs	r3, #0
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d06:	e2ba      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d08:	2304      	movs	r3, #4
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0e:	e2b6      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d10:	2308      	movs	r3, #8
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d16:	e2b2      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d18:	2310      	movs	r3, #16
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1e:	e2ae      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d20:	2320      	movs	r3, #32
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d26:	e2aa      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d28:	2340      	movs	r3, #64	@ 0x40
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2e:	e2a6      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d30:	2380      	movs	r3, #128	@ 0x80
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d36:	e2a2      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a35      	ldr	r2, [pc, #212]	@ (8008e14 <UART_SetConfig+0x344>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d130      	bne.n	8008da4 <UART_SetConfig+0x2d4>
 8008d42:	4b31      	ldr	r3, [pc, #196]	@ (8008e08 <UART_SetConfig+0x338>)
 8008d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	2b05      	cmp	r3, #5
 8008d4c:	d826      	bhi.n	8008d9c <UART_SetConfig+0x2cc>
 8008d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d54 <UART_SetConfig+0x284>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008d6d 	.word	0x08008d6d
 8008d58:	08008d75 	.word	0x08008d75
 8008d5c:	08008d7d 	.word	0x08008d7d
 8008d60:	08008d85 	.word	0x08008d85
 8008d64:	08008d8d 	.word	0x08008d8d
 8008d68:	08008d95 	.word	0x08008d95
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d72:	e284      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d74:	2304      	movs	r3, #4
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7a:	e280      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d7c:	2308      	movs	r3, #8
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d82:	e27c      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d84:	2310      	movs	r3, #16
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8a:	e278      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d92:	e274      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d94:	2340      	movs	r3, #64	@ 0x40
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9a:	e270      	b.n	800927e <UART_SetConfig+0x7ae>
 8008d9c:	2380      	movs	r3, #128	@ 0x80
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da2:	e26c      	b.n	800927e <UART_SetConfig+0x7ae>
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e18 <UART_SetConfig+0x348>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d142      	bne.n	8008e34 <UART_SetConfig+0x364>
 8008dae:	4b16      	ldr	r3, [pc, #88]	@ (8008e08 <UART_SetConfig+0x338>)
 8008db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db2:	f003 0307 	and.w	r3, r3, #7
 8008db6:	2b05      	cmp	r3, #5
 8008db8:	d838      	bhi.n	8008e2c <UART_SetConfig+0x35c>
 8008dba:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc0 <UART_SetConfig+0x2f0>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008dd9 	.word	0x08008dd9
 8008dc4:	08008de1 	.word	0x08008de1
 8008dc8:	08008de9 	.word	0x08008de9
 8008dcc:	08008df1 	.word	0x08008df1
 8008dd0:	08008e1d 	.word	0x08008e1d
 8008dd4:	08008e25 	.word	0x08008e25
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dde:	e24e      	b.n	800927e <UART_SetConfig+0x7ae>
 8008de0:	2304      	movs	r3, #4
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e24a      	b.n	800927e <UART_SetConfig+0x7ae>
 8008de8:	2308      	movs	r3, #8
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dee:	e246      	b.n	800927e <UART_SetConfig+0x7ae>
 8008df0:	2310      	movs	r3, #16
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df6:	e242      	b.n	800927e <UART_SetConfig+0x7ae>
 8008df8:	cfff69f3 	.word	0xcfff69f3
 8008dfc:	58000c00 	.word	0x58000c00
 8008e00:	11fff4ff 	.word	0x11fff4ff
 8008e04:	40011000 	.word	0x40011000
 8008e08:	58024400 	.word	0x58024400
 8008e0c:	40004400 	.word	0x40004400
 8008e10:	40004800 	.word	0x40004800
 8008e14:	40004c00 	.word	0x40004c00
 8008e18:	40005000 	.word	0x40005000
 8008e1c:	2320      	movs	r3, #32
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e22c      	b.n	800927e <UART_SetConfig+0x7ae>
 8008e24:	2340      	movs	r3, #64	@ 0x40
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e228      	b.n	800927e <UART_SetConfig+0x7ae>
 8008e2c:	2380      	movs	r3, #128	@ 0x80
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e224      	b.n	800927e <UART_SetConfig+0x7ae>
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4ab1      	ldr	r2, [pc, #708]	@ (8009100 <UART_SetConfig+0x630>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d176      	bne.n	8008f2c <UART_SetConfig+0x45c>
 8008e3e:	4bb1      	ldr	r3, [pc, #708]	@ (8009104 <UART_SetConfig+0x634>)
 8008e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e46:	2b28      	cmp	r3, #40	@ 0x28
 8008e48:	d86c      	bhi.n	8008f24 <UART_SetConfig+0x454>
 8008e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e50 <UART_SetConfig+0x380>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008ef5 	.word	0x08008ef5
 8008e54:	08008f25 	.word	0x08008f25
 8008e58:	08008f25 	.word	0x08008f25
 8008e5c:	08008f25 	.word	0x08008f25
 8008e60:	08008f25 	.word	0x08008f25
 8008e64:	08008f25 	.word	0x08008f25
 8008e68:	08008f25 	.word	0x08008f25
 8008e6c:	08008f25 	.word	0x08008f25
 8008e70:	08008efd 	.word	0x08008efd
 8008e74:	08008f25 	.word	0x08008f25
 8008e78:	08008f25 	.word	0x08008f25
 8008e7c:	08008f25 	.word	0x08008f25
 8008e80:	08008f25 	.word	0x08008f25
 8008e84:	08008f25 	.word	0x08008f25
 8008e88:	08008f25 	.word	0x08008f25
 8008e8c:	08008f25 	.word	0x08008f25
 8008e90:	08008f05 	.word	0x08008f05
 8008e94:	08008f25 	.word	0x08008f25
 8008e98:	08008f25 	.word	0x08008f25
 8008e9c:	08008f25 	.word	0x08008f25
 8008ea0:	08008f25 	.word	0x08008f25
 8008ea4:	08008f25 	.word	0x08008f25
 8008ea8:	08008f25 	.word	0x08008f25
 8008eac:	08008f25 	.word	0x08008f25
 8008eb0:	08008f0d 	.word	0x08008f0d
 8008eb4:	08008f25 	.word	0x08008f25
 8008eb8:	08008f25 	.word	0x08008f25
 8008ebc:	08008f25 	.word	0x08008f25
 8008ec0:	08008f25 	.word	0x08008f25
 8008ec4:	08008f25 	.word	0x08008f25
 8008ec8:	08008f25 	.word	0x08008f25
 8008ecc:	08008f25 	.word	0x08008f25
 8008ed0:	08008f15 	.word	0x08008f15
 8008ed4:	08008f25 	.word	0x08008f25
 8008ed8:	08008f25 	.word	0x08008f25
 8008edc:	08008f25 	.word	0x08008f25
 8008ee0:	08008f25 	.word	0x08008f25
 8008ee4:	08008f25 	.word	0x08008f25
 8008ee8:	08008f25 	.word	0x08008f25
 8008eec:	08008f25 	.word	0x08008f25
 8008ef0:	08008f1d 	.word	0x08008f1d
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efa:	e1c0      	b.n	800927e <UART_SetConfig+0x7ae>
 8008efc:	2304      	movs	r3, #4
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f02:	e1bc      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f04:	2308      	movs	r3, #8
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e1b8      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f0c:	2310      	movs	r3, #16
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f12:	e1b4      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f14:	2320      	movs	r3, #32
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e1b0      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f1c:	2340      	movs	r3, #64	@ 0x40
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e1ac      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f24:	2380      	movs	r3, #128	@ 0x80
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e1a8      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a75      	ldr	r2, [pc, #468]	@ (8009108 <UART_SetConfig+0x638>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d130      	bne.n	8008f98 <UART_SetConfig+0x4c8>
 8008f36:	4b73      	ldr	r3, [pc, #460]	@ (8009104 <UART_SetConfig+0x634>)
 8008f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	2b05      	cmp	r3, #5
 8008f40:	d826      	bhi.n	8008f90 <UART_SetConfig+0x4c0>
 8008f42:	a201      	add	r2, pc, #4	@ (adr r2, 8008f48 <UART_SetConfig+0x478>)
 8008f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f48:	08008f61 	.word	0x08008f61
 8008f4c:	08008f69 	.word	0x08008f69
 8008f50:	08008f71 	.word	0x08008f71
 8008f54:	08008f79 	.word	0x08008f79
 8008f58:	08008f81 	.word	0x08008f81
 8008f5c:	08008f89 	.word	0x08008f89
 8008f60:	2300      	movs	r3, #0
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f66:	e18a      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f68:	2304      	movs	r3, #4
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e186      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f70:	2308      	movs	r3, #8
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f76:	e182      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f78:	2310      	movs	r3, #16
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7e:	e17e      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f80:	2320      	movs	r3, #32
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f86:	e17a      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f88:	2340      	movs	r3, #64	@ 0x40
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8e:	e176      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f90:	2380      	movs	r3, #128	@ 0x80
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f96:	e172      	b.n	800927e <UART_SetConfig+0x7ae>
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a5b      	ldr	r2, [pc, #364]	@ (800910c <UART_SetConfig+0x63c>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d130      	bne.n	8009004 <UART_SetConfig+0x534>
 8008fa2:	4b58      	ldr	r3, [pc, #352]	@ (8009104 <UART_SetConfig+0x634>)
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b05      	cmp	r3, #5
 8008fac:	d826      	bhi.n	8008ffc <UART_SetConfig+0x52c>
 8008fae:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb4 <UART_SetConfig+0x4e4>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	08008fcd 	.word	0x08008fcd
 8008fb8:	08008fd5 	.word	0x08008fd5
 8008fbc:	08008fdd 	.word	0x08008fdd
 8008fc0:	08008fe5 	.word	0x08008fe5
 8008fc4:	08008fed 	.word	0x08008fed
 8008fc8:	08008ff5 	.word	0x08008ff5
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e154      	b.n	800927e <UART_SetConfig+0x7ae>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e150      	b.n	800927e <UART_SetConfig+0x7ae>
 8008fdc:	2308      	movs	r3, #8
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	e14c      	b.n	800927e <UART_SetConfig+0x7ae>
 8008fe4:	2310      	movs	r3, #16
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fea:	e148      	b.n	800927e <UART_SetConfig+0x7ae>
 8008fec:	2320      	movs	r3, #32
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff2:	e144      	b.n	800927e <UART_SetConfig+0x7ae>
 8008ff4:	2340      	movs	r3, #64	@ 0x40
 8008ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffa:	e140      	b.n	800927e <UART_SetConfig+0x7ae>
 8008ffc:	2380      	movs	r3, #128	@ 0x80
 8008ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009002:	e13c      	b.n	800927e <UART_SetConfig+0x7ae>
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a41      	ldr	r2, [pc, #260]	@ (8009110 <UART_SetConfig+0x640>)
 800900a:	4293      	cmp	r3, r2
 800900c:	f040 8082 	bne.w	8009114 <UART_SetConfig+0x644>
 8009010:	4b3c      	ldr	r3, [pc, #240]	@ (8009104 <UART_SetConfig+0x634>)
 8009012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009014:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009018:	2b28      	cmp	r3, #40	@ 0x28
 800901a:	d86d      	bhi.n	80090f8 <UART_SetConfig+0x628>
 800901c:	a201      	add	r2, pc, #4	@ (adr r2, 8009024 <UART_SetConfig+0x554>)
 800901e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009022:	bf00      	nop
 8009024:	080090c9 	.word	0x080090c9
 8009028:	080090f9 	.word	0x080090f9
 800902c:	080090f9 	.word	0x080090f9
 8009030:	080090f9 	.word	0x080090f9
 8009034:	080090f9 	.word	0x080090f9
 8009038:	080090f9 	.word	0x080090f9
 800903c:	080090f9 	.word	0x080090f9
 8009040:	080090f9 	.word	0x080090f9
 8009044:	080090d1 	.word	0x080090d1
 8009048:	080090f9 	.word	0x080090f9
 800904c:	080090f9 	.word	0x080090f9
 8009050:	080090f9 	.word	0x080090f9
 8009054:	080090f9 	.word	0x080090f9
 8009058:	080090f9 	.word	0x080090f9
 800905c:	080090f9 	.word	0x080090f9
 8009060:	080090f9 	.word	0x080090f9
 8009064:	080090d9 	.word	0x080090d9
 8009068:	080090f9 	.word	0x080090f9
 800906c:	080090f9 	.word	0x080090f9
 8009070:	080090f9 	.word	0x080090f9
 8009074:	080090f9 	.word	0x080090f9
 8009078:	080090f9 	.word	0x080090f9
 800907c:	080090f9 	.word	0x080090f9
 8009080:	080090f9 	.word	0x080090f9
 8009084:	080090e1 	.word	0x080090e1
 8009088:	080090f9 	.word	0x080090f9
 800908c:	080090f9 	.word	0x080090f9
 8009090:	080090f9 	.word	0x080090f9
 8009094:	080090f9 	.word	0x080090f9
 8009098:	080090f9 	.word	0x080090f9
 800909c:	080090f9 	.word	0x080090f9
 80090a0:	080090f9 	.word	0x080090f9
 80090a4:	080090e9 	.word	0x080090e9
 80090a8:	080090f9 	.word	0x080090f9
 80090ac:	080090f9 	.word	0x080090f9
 80090b0:	080090f9 	.word	0x080090f9
 80090b4:	080090f9 	.word	0x080090f9
 80090b8:	080090f9 	.word	0x080090f9
 80090bc:	080090f9 	.word	0x080090f9
 80090c0:	080090f9 	.word	0x080090f9
 80090c4:	080090f1 	.word	0x080090f1
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e0d6      	b.n	800927e <UART_SetConfig+0x7ae>
 80090d0:	2304      	movs	r3, #4
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e0d2      	b.n	800927e <UART_SetConfig+0x7ae>
 80090d8:	2308      	movs	r3, #8
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e0ce      	b.n	800927e <UART_SetConfig+0x7ae>
 80090e0:	2310      	movs	r3, #16
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e0ca      	b.n	800927e <UART_SetConfig+0x7ae>
 80090e8:	2320      	movs	r3, #32
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ee:	e0c6      	b.n	800927e <UART_SetConfig+0x7ae>
 80090f0:	2340      	movs	r3, #64	@ 0x40
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090f6:	e0c2      	b.n	800927e <UART_SetConfig+0x7ae>
 80090f8:	2380      	movs	r3, #128	@ 0x80
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e0be      	b.n	800927e <UART_SetConfig+0x7ae>
 8009100:	40011400 	.word	0x40011400
 8009104:	58024400 	.word	0x58024400
 8009108:	40007800 	.word	0x40007800
 800910c:	40007c00 	.word	0x40007c00
 8009110:	40011800 	.word	0x40011800
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4aad      	ldr	r2, [pc, #692]	@ (80093d0 <UART_SetConfig+0x900>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d176      	bne.n	800920c <UART_SetConfig+0x73c>
 800911e:	4bad      	ldr	r3, [pc, #692]	@ (80093d4 <UART_SetConfig+0x904>)
 8009120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009126:	2b28      	cmp	r3, #40	@ 0x28
 8009128:	d86c      	bhi.n	8009204 <UART_SetConfig+0x734>
 800912a:	a201      	add	r2, pc, #4	@ (adr r2, 8009130 <UART_SetConfig+0x660>)
 800912c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009130:	080091d5 	.word	0x080091d5
 8009134:	08009205 	.word	0x08009205
 8009138:	08009205 	.word	0x08009205
 800913c:	08009205 	.word	0x08009205
 8009140:	08009205 	.word	0x08009205
 8009144:	08009205 	.word	0x08009205
 8009148:	08009205 	.word	0x08009205
 800914c:	08009205 	.word	0x08009205
 8009150:	080091dd 	.word	0x080091dd
 8009154:	08009205 	.word	0x08009205
 8009158:	08009205 	.word	0x08009205
 800915c:	08009205 	.word	0x08009205
 8009160:	08009205 	.word	0x08009205
 8009164:	08009205 	.word	0x08009205
 8009168:	08009205 	.word	0x08009205
 800916c:	08009205 	.word	0x08009205
 8009170:	080091e5 	.word	0x080091e5
 8009174:	08009205 	.word	0x08009205
 8009178:	08009205 	.word	0x08009205
 800917c:	08009205 	.word	0x08009205
 8009180:	08009205 	.word	0x08009205
 8009184:	08009205 	.word	0x08009205
 8009188:	08009205 	.word	0x08009205
 800918c:	08009205 	.word	0x08009205
 8009190:	080091ed 	.word	0x080091ed
 8009194:	08009205 	.word	0x08009205
 8009198:	08009205 	.word	0x08009205
 800919c:	08009205 	.word	0x08009205
 80091a0:	08009205 	.word	0x08009205
 80091a4:	08009205 	.word	0x08009205
 80091a8:	08009205 	.word	0x08009205
 80091ac:	08009205 	.word	0x08009205
 80091b0:	080091f5 	.word	0x080091f5
 80091b4:	08009205 	.word	0x08009205
 80091b8:	08009205 	.word	0x08009205
 80091bc:	08009205 	.word	0x08009205
 80091c0:	08009205 	.word	0x08009205
 80091c4:	08009205 	.word	0x08009205
 80091c8:	08009205 	.word	0x08009205
 80091cc:	08009205 	.word	0x08009205
 80091d0:	080091fd 	.word	0x080091fd
 80091d4:	2301      	movs	r3, #1
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091da:	e050      	b.n	800927e <UART_SetConfig+0x7ae>
 80091dc:	2304      	movs	r3, #4
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e2:	e04c      	b.n	800927e <UART_SetConfig+0x7ae>
 80091e4:	2308      	movs	r3, #8
 80091e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ea:	e048      	b.n	800927e <UART_SetConfig+0x7ae>
 80091ec:	2310      	movs	r3, #16
 80091ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f2:	e044      	b.n	800927e <UART_SetConfig+0x7ae>
 80091f4:	2320      	movs	r3, #32
 80091f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fa:	e040      	b.n	800927e <UART_SetConfig+0x7ae>
 80091fc:	2340      	movs	r3, #64	@ 0x40
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009202:	e03c      	b.n	800927e <UART_SetConfig+0x7ae>
 8009204:	2380      	movs	r3, #128	@ 0x80
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800920a:	e038      	b.n	800927e <UART_SetConfig+0x7ae>
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a71      	ldr	r2, [pc, #452]	@ (80093d8 <UART_SetConfig+0x908>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d130      	bne.n	8009278 <UART_SetConfig+0x7a8>
 8009216:	4b6f      	ldr	r3, [pc, #444]	@ (80093d4 <UART_SetConfig+0x904>)
 8009218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800921a:	f003 0307 	and.w	r3, r3, #7
 800921e:	2b05      	cmp	r3, #5
 8009220:	d826      	bhi.n	8009270 <UART_SetConfig+0x7a0>
 8009222:	a201      	add	r2, pc, #4	@ (adr r2, 8009228 <UART_SetConfig+0x758>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	08009241 	.word	0x08009241
 800922c:	08009249 	.word	0x08009249
 8009230:	08009251 	.word	0x08009251
 8009234:	08009259 	.word	0x08009259
 8009238:	08009261 	.word	0x08009261
 800923c:	08009269 	.word	0x08009269
 8009240:	2302      	movs	r3, #2
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009246:	e01a      	b.n	800927e <UART_SetConfig+0x7ae>
 8009248:	2304      	movs	r3, #4
 800924a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924e:	e016      	b.n	800927e <UART_SetConfig+0x7ae>
 8009250:	2308      	movs	r3, #8
 8009252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009256:	e012      	b.n	800927e <UART_SetConfig+0x7ae>
 8009258:	2310      	movs	r3, #16
 800925a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925e:	e00e      	b.n	800927e <UART_SetConfig+0x7ae>
 8009260:	2320      	movs	r3, #32
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009266:	e00a      	b.n	800927e <UART_SetConfig+0x7ae>
 8009268:	2340      	movs	r3, #64	@ 0x40
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926e:	e006      	b.n	800927e <UART_SetConfig+0x7ae>
 8009270:	2380      	movs	r3, #128	@ 0x80
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009276:	e002      	b.n	800927e <UART_SetConfig+0x7ae>
 8009278:	2380      	movs	r3, #128	@ 0x80
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a55      	ldr	r2, [pc, #340]	@ (80093d8 <UART_SetConfig+0x908>)
 8009284:	4293      	cmp	r3, r2
 8009286:	f040 80f8 	bne.w	800947a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800928a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800928e:	2b20      	cmp	r3, #32
 8009290:	dc46      	bgt.n	8009320 <UART_SetConfig+0x850>
 8009292:	2b02      	cmp	r3, #2
 8009294:	db75      	blt.n	8009382 <UART_SetConfig+0x8b2>
 8009296:	3b02      	subs	r3, #2
 8009298:	2b1e      	cmp	r3, #30
 800929a:	d872      	bhi.n	8009382 <UART_SetConfig+0x8b2>
 800929c:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <UART_SetConfig+0x7d4>)
 800929e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a2:	bf00      	nop
 80092a4:	08009327 	.word	0x08009327
 80092a8:	08009383 	.word	0x08009383
 80092ac:	0800932f 	.word	0x0800932f
 80092b0:	08009383 	.word	0x08009383
 80092b4:	08009383 	.word	0x08009383
 80092b8:	08009383 	.word	0x08009383
 80092bc:	0800933f 	.word	0x0800933f
 80092c0:	08009383 	.word	0x08009383
 80092c4:	08009383 	.word	0x08009383
 80092c8:	08009383 	.word	0x08009383
 80092cc:	08009383 	.word	0x08009383
 80092d0:	08009383 	.word	0x08009383
 80092d4:	08009383 	.word	0x08009383
 80092d8:	08009383 	.word	0x08009383
 80092dc:	0800934f 	.word	0x0800934f
 80092e0:	08009383 	.word	0x08009383
 80092e4:	08009383 	.word	0x08009383
 80092e8:	08009383 	.word	0x08009383
 80092ec:	08009383 	.word	0x08009383
 80092f0:	08009383 	.word	0x08009383
 80092f4:	08009383 	.word	0x08009383
 80092f8:	08009383 	.word	0x08009383
 80092fc:	08009383 	.word	0x08009383
 8009300:	08009383 	.word	0x08009383
 8009304:	08009383 	.word	0x08009383
 8009308:	08009383 	.word	0x08009383
 800930c:	08009383 	.word	0x08009383
 8009310:	08009383 	.word	0x08009383
 8009314:	08009383 	.word	0x08009383
 8009318:	08009383 	.word	0x08009383
 800931c:	08009375 	.word	0x08009375
 8009320:	2b40      	cmp	r3, #64	@ 0x40
 8009322:	d02a      	beq.n	800937a <UART_SetConfig+0x8aa>
 8009324:	e02d      	b.n	8009382 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009326:	f7fc fdcb 	bl	8005ec0 <HAL_RCCEx_GetD3PCLK1Freq>
 800932a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800932c:	e02f      	b.n	800938e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009332:	4618      	mov	r0, r3
 8009334:	f7fc fdda 	bl	8005eec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800933c:	e027      	b.n	800938e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800933e:	f107 0318 	add.w	r3, r7, #24
 8009342:	4618      	mov	r0, r3
 8009344:	f7fc ff26 	bl	8006194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800934c:	e01f      	b.n	800938e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800934e:	4b21      	ldr	r3, [pc, #132]	@ (80093d4 <UART_SetConfig+0x904>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800935a:	4b1e      	ldr	r3, [pc, #120]	@ (80093d4 <UART_SetConfig+0x904>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	08db      	lsrs	r3, r3, #3
 8009360:	f003 0303 	and.w	r3, r3, #3
 8009364:	4a1d      	ldr	r2, [pc, #116]	@ (80093dc <UART_SetConfig+0x90c>)
 8009366:	fa22 f303 	lsr.w	r3, r2, r3
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800936c:	e00f      	b.n	800938e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800936e:	4b1b      	ldr	r3, [pc, #108]	@ (80093dc <UART_SetConfig+0x90c>)
 8009370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009372:	e00c      	b.n	800938e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009374:	4b1a      	ldr	r3, [pc, #104]	@ (80093e0 <UART_SetConfig+0x910>)
 8009376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009378:	e009      	b.n	800938e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800937a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009380:	e005      	b.n	800938e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009382:	2300      	movs	r3, #0
 8009384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800938c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800938e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009390:	2b00      	cmp	r3, #0
 8009392:	f000 81ee 	beq.w	8009772 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800939a:	4a12      	ldr	r2, [pc, #72]	@ (80093e4 <UART_SetConfig+0x914>)
 800939c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093a0:	461a      	mov	r2, r3
 80093a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80093a8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	4413      	add	r3, r2
 80093b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d305      	bcc.n	80093c6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d910      	bls.n	80093e8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80093cc:	e1d1      	b.n	8009772 <UART_SetConfig+0xca2>
 80093ce:	bf00      	nop
 80093d0:	40011c00 	.word	0x40011c00
 80093d4:	58024400 	.word	0x58024400
 80093d8:	58000c00 	.word	0x58000c00
 80093dc:	03d09000 	.word	0x03d09000
 80093e0:	003d0900 	.word	0x003d0900
 80093e4:	0800a258 	.word	0x0800a258
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ea:	2200      	movs	r2, #0
 80093ec:	60bb      	str	r3, [r7, #8]
 80093ee:	60fa      	str	r2, [r7, #12]
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093f4:	4ac0      	ldr	r2, [pc, #768]	@ (80096f8 <UART_SetConfig+0xc28>)
 80093f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2200      	movs	r2, #0
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	607a      	str	r2, [r7, #4]
 8009402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009406:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800940a:	f7f6 ff71 	bl	80002f0 <__aeabi_uldivmod>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4610      	mov	r0, r2
 8009414:	4619      	mov	r1, r3
 8009416:	f04f 0200 	mov.w	r2, #0
 800941a:	f04f 0300 	mov.w	r3, #0
 800941e:	020b      	lsls	r3, r1, #8
 8009420:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009424:	0202      	lsls	r2, r0, #8
 8009426:	6979      	ldr	r1, [r7, #20]
 8009428:	6849      	ldr	r1, [r1, #4]
 800942a:	0849      	lsrs	r1, r1, #1
 800942c:	2000      	movs	r0, #0
 800942e:	460c      	mov	r4, r1
 8009430:	4605      	mov	r5, r0
 8009432:	eb12 0804 	adds.w	r8, r2, r4
 8009436:	eb43 0905 	adc.w	r9, r3, r5
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	469a      	mov	sl, r3
 8009442:	4693      	mov	fp, r2
 8009444:	4652      	mov	r2, sl
 8009446:	465b      	mov	r3, fp
 8009448:	4640      	mov	r0, r8
 800944a:	4649      	mov	r1, r9
 800944c:	f7f6 ff50 	bl	80002f0 <__aeabi_uldivmod>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4613      	mov	r3, r2
 8009456:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800945e:	d308      	bcc.n	8009472 <UART_SetConfig+0x9a2>
 8009460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009466:	d204      	bcs.n	8009472 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800946e:	60da      	str	r2, [r3, #12]
 8009470:	e17f      	b.n	8009772 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009478:	e17b      	b.n	8009772 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009482:	f040 80bd 	bne.w	8009600 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009486:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800948a:	2b20      	cmp	r3, #32
 800948c:	dc48      	bgt.n	8009520 <UART_SetConfig+0xa50>
 800948e:	2b00      	cmp	r3, #0
 8009490:	db7b      	blt.n	800958a <UART_SetConfig+0xaba>
 8009492:	2b20      	cmp	r3, #32
 8009494:	d879      	bhi.n	800958a <UART_SetConfig+0xaba>
 8009496:	a201      	add	r2, pc, #4	@ (adr r2, 800949c <UART_SetConfig+0x9cc>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	08009527 	.word	0x08009527
 80094a0:	0800952f 	.word	0x0800952f
 80094a4:	0800958b 	.word	0x0800958b
 80094a8:	0800958b 	.word	0x0800958b
 80094ac:	08009537 	.word	0x08009537
 80094b0:	0800958b 	.word	0x0800958b
 80094b4:	0800958b 	.word	0x0800958b
 80094b8:	0800958b 	.word	0x0800958b
 80094bc:	08009547 	.word	0x08009547
 80094c0:	0800958b 	.word	0x0800958b
 80094c4:	0800958b 	.word	0x0800958b
 80094c8:	0800958b 	.word	0x0800958b
 80094cc:	0800958b 	.word	0x0800958b
 80094d0:	0800958b 	.word	0x0800958b
 80094d4:	0800958b 	.word	0x0800958b
 80094d8:	0800958b 	.word	0x0800958b
 80094dc:	08009557 	.word	0x08009557
 80094e0:	0800958b 	.word	0x0800958b
 80094e4:	0800958b 	.word	0x0800958b
 80094e8:	0800958b 	.word	0x0800958b
 80094ec:	0800958b 	.word	0x0800958b
 80094f0:	0800958b 	.word	0x0800958b
 80094f4:	0800958b 	.word	0x0800958b
 80094f8:	0800958b 	.word	0x0800958b
 80094fc:	0800958b 	.word	0x0800958b
 8009500:	0800958b 	.word	0x0800958b
 8009504:	0800958b 	.word	0x0800958b
 8009508:	0800958b 	.word	0x0800958b
 800950c:	0800958b 	.word	0x0800958b
 8009510:	0800958b 	.word	0x0800958b
 8009514:	0800958b 	.word	0x0800958b
 8009518:	0800958b 	.word	0x0800958b
 800951c:	0800957d 	.word	0x0800957d
 8009520:	2b40      	cmp	r3, #64	@ 0x40
 8009522:	d02e      	beq.n	8009582 <UART_SetConfig+0xab2>
 8009524:	e031      	b.n	800958a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009526:	f7fb fae1 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 800952a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800952c:	e033      	b.n	8009596 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800952e:	f7fb faf3 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 8009532:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009534:	e02f      	b.n	8009596 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800953a:	4618      	mov	r0, r3
 800953c:	f7fc fcd6 	bl	8005eec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009544:	e027      	b.n	8009596 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009546:	f107 0318 	add.w	r3, r7, #24
 800954a:	4618      	mov	r0, r3
 800954c:	f7fc fe22 	bl	8006194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009554:	e01f      	b.n	8009596 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009556:	4b69      	ldr	r3, [pc, #420]	@ (80096fc <UART_SetConfig+0xc2c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0320 	and.w	r3, r3, #32
 800955e:	2b00      	cmp	r3, #0
 8009560:	d009      	beq.n	8009576 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009562:	4b66      	ldr	r3, [pc, #408]	@ (80096fc <UART_SetConfig+0xc2c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	08db      	lsrs	r3, r3, #3
 8009568:	f003 0303 	and.w	r3, r3, #3
 800956c:	4a64      	ldr	r2, [pc, #400]	@ (8009700 <UART_SetConfig+0xc30>)
 800956e:	fa22 f303 	lsr.w	r3, r2, r3
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009574:	e00f      	b.n	8009596 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009576:	4b62      	ldr	r3, [pc, #392]	@ (8009700 <UART_SetConfig+0xc30>)
 8009578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800957a:	e00c      	b.n	8009596 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800957c:	4b61      	ldr	r3, [pc, #388]	@ (8009704 <UART_SetConfig+0xc34>)
 800957e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009580:	e009      	b.n	8009596 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009588:	e005      	b.n	8009596 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009594:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 80ea 	beq.w	8009772 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a2:	4a55      	ldr	r2, [pc, #340]	@ (80096f8 <UART_SetConfig+0xc28>)
 80095a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095a8:	461a      	mov	r2, r3
 80095aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80095b0:	005a      	lsls	r2, r3, #1
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	085b      	lsrs	r3, r3, #1
 80095b8:	441a      	add	r2, r3
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	fbb2 f3f3 	udiv	r3, r2, r3
 80095c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c6:	2b0f      	cmp	r3, #15
 80095c8:	d916      	bls.n	80095f8 <UART_SetConfig+0xb28>
 80095ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095d0:	d212      	bcs.n	80095f8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	f023 030f 	bic.w	r3, r3, #15
 80095da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095de:	085b      	lsrs	r3, r3, #1
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	f003 0307 	and.w	r3, r3, #7
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80095ea:	4313      	orrs	r3, r2
 80095ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80095f4:	60da      	str	r2, [r3, #12]
 80095f6:	e0bc      	b.n	8009772 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095fe:	e0b8      	b.n	8009772 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009600:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009604:	2b20      	cmp	r3, #32
 8009606:	dc4b      	bgt.n	80096a0 <UART_SetConfig+0xbd0>
 8009608:	2b00      	cmp	r3, #0
 800960a:	f2c0 8087 	blt.w	800971c <UART_SetConfig+0xc4c>
 800960e:	2b20      	cmp	r3, #32
 8009610:	f200 8084 	bhi.w	800971c <UART_SetConfig+0xc4c>
 8009614:	a201      	add	r2, pc, #4	@ (adr r2, 800961c <UART_SetConfig+0xb4c>)
 8009616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961a:	bf00      	nop
 800961c:	080096a7 	.word	0x080096a7
 8009620:	080096af 	.word	0x080096af
 8009624:	0800971d 	.word	0x0800971d
 8009628:	0800971d 	.word	0x0800971d
 800962c:	080096b7 	.word	0x080096b7
 8009630:	0800971d 	.word	0x0800971d
 8009634:	0800971d 	.word	0x0800971d
 8009638:	0800971d 	.word	0x0800971d
 800963c:	080096c7 	.word	0x080096c7
 8009640:	0800971d 	.word	0x0800971d
 8009644:	0800971d 	.word	0x0800971d
 8009648:	0800971d 	.word	0x0800971d
 800964c:	0800971d 	.word	0x0800971d
 8009650:	0800971d 	.word	0x0800971d
 8009654:	0800971d 	.word	0x0800971d
 8009658:	0800971d 	.word	0x0800971d
 800965c:	080096d7 	.word	0x080096d7
 8009660:	0800971d 	.word	0x0800971d
 8009664:	0800971d 	.word	0x0800971d
 8009668:	0800971d 	.word	0x0800971d
 800966c:	0800971d 	.word	0x0800971d
 8009670:	0800971d 	.word	0x0800971d
 8009674:	0800971d 	.word	0x0800971d
 8009678:	0800971d 	.word	0x0800971d
 800967c:	0800971d 	.word	0x0800971d
 8009680:	0800971d 	.word	0x0800971d
 8009684:	0800971d 	.word	0x0800971d
 8009688:	0800971d 	.word	0x0800971d
 800968c:	0800971d 	.word	0x0800971d
 8009690:	0800971d 	.word	0x0800971d
 8009694:	0800971d 	.word	0x0800971d
 8009698:	0800971d 	.word	0x0800971d
 800969c:	0800970f 	.word	0x0800970f
 80096a0:	2b40      	cmp	r3, #64	@ 0x40
 80096a2:	d037      	beq.n	8009714 <UART_SetConfig+0xc44>
 80096a4:	e03a      	b.n	800971c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096a6:	f7fb fa21 	bl	8004aec <HAL_RCC_GetPCLK1Freq>
 80096aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096ac:	e03c      	b.n	8009728 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096ae:	f7fb fa33 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 80096b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80096b4:	e038      	b.n	8009728 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fc fc16 	bl	8005eec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c4:	e030      	b.n	8009728 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096c6:	f107 0318 	add.w	r3, r7, #24
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fc fd62 	bl	8006194 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d4:	e028      	b.n	8009728 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096d6:	4b09      	ldr	r3, [pc, #36]	@ (80096fc <UART_SetConfig+0xc2c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0320 	and.w	r3, r3, #32
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d012      	beq.n	8009708 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096e2:	4b06      	ldr	r3, [pc, #24]	@ (80096fc <UART_SetConfig+0xc2c>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	08db      	lsrs	r3, r3, #3
 80096e8:	f003 0303 	and.w	r3, r3, #3
 80096ec:	4a04      	ldr	r2, [pc, #16]	@ (8009700 <UART_SetConfig+0xc30>)
 80096ee:	fa22 f303 	lsr.w	r3, r2, r3
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096f4:	e018      	b.n	8009728 <UART_SetConfig+0xc58>
 80096f6:	bf00      	nop
 80096f8:	0800a258 	.word	0x0800a258
 80096fc:	58024400 	.word	0x58024400
 8009700:	03d09000 	.word	0x03d09000
 8009704:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009708:	4b24      	ldr	r3, [pc, #144]	@ (800979c <UART_SetConfig+0xccc>)
 800970a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800970c:	e00c      	b.n	8009728 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800970e:	4b24      	ldr	r3, [pc, #144]	@ (80097a0 <UART_SetConfig+0xcd0>)
 8009710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009712:	e009      	b.n	8009728 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009714:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800971a:	e005      	b.n	8009728 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800971c:	2300      	movs	r3, #0
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009726:	bf00      	nop
    }

    if (pclk != 0U)
 8009728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800972a:	2b00      	cmp	r3, #0
 800972c:	d021      	beq.n	8009772 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009732:	4a1c      	ldr	r2, [pc, #112]	@ (80097a4 <UART_SetConfig+0xcd4>)
 8009734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009738:	461a      	mov	r2, r3
 800973a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800973c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	085b      	lsrs	r3, r3, #1
 8009746:	441a      	add	r2, r3
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009750:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009754:	2b0f      	cmp	r3, #15
 8009756:	d909      	bls.n	800976c <UART_SetConfig+0xc9c>
 8009758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800975e:	d205      	bcs.n	800976c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009762:	b29a      	uxth	r2, r3
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60da      	str	r2, [r3, #12]
 800976a:	e002      	b.n	8009772 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2201      	movs	r2, #1
 8009776:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2201      	movs	r2, #1
 800977e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2200      	movs	r2, #0
 8009786:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2200      	movs	r2, #0
 800978c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800978e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009792:	4618      	mov	r0, r3
 8009794:	3748      	adds	r7, #72	@ 0x48
 8009796:	46bd      	mov	sp, r7
 8009798:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800979c:	03d09000 	.word	0x03d09000
 80097a0:	003d0900 	.word	0x003d0900
 80097a4:	0800a258 	.word	0x0800a258

080097a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b4:	f003 0308 	and.w	r3, r3, #8
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f8:	f003 0302 	and.w	r3, r3, #2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00a      	beq.n	8009816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800983c:	f003 0310 	and.w	r3, r3, #16
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00a      	beq.n	800985a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985e:	f003 0320 	and.w	r3, r3, #32
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00a      	beq.n	800987c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	430a      	orrs	r2, r1
 800987a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01a      	beq.n	80098be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098a6:	d10a      	bne.n	80098be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	430a      	orrs	r2, r1
 80098de:	605a      	str	r2, [r3, #4]
  }
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b098      	sub	sp, #96	@ 0x60
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098fc:	f7f9 f818 	bl	8002930 <HAL_GetTick>
 8009900:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0308 	and.w	r3, r3, #8
 800990c:	2b08      	cmp	r3, #8
 800990e:	d12f      	bne.n	8009970 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009910:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009918:	2200      	movs	r2, #0
 800991a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f88e 	bl	8009a40 <UART_WaitOnFlagUntilTimeout>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d022      	beq.n	8009970 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009932:	e853 3f00 	ldrex	r3, [r3]
 8009936:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800993a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800993e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	461a      	mov	r2, r3
 8009946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009948:	647b      	str	r3, [r7, #68]	@ 0x44
 800994a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800994e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009950:	e841 2300 	strex	r3, r2, [r1]
 8009954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e6      	bne.n	800992a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2220      	movs	r2, #32
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e063      	b.n	8009a38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0304 	and.w	r3, r3, #4
 800997a:	2b04      	cmp	r3, #4
 800997c:	d149      	bne.n	8009a12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800997e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009986:	2200      	movs	r2, #0
 8009988:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f857 	bl	8009a40 <UART_WaitOnFlagUntilTimeout>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d03c      	beq.n	8009a12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a0:	e853 3f00 	ldrex	r3, [r3]
 80099a4:	623b      	str	r3, [r7, #32]
   return(result);
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80099b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e6      	bne.n	8009998 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	3308      	adds	r3, #8
 80099d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	e853 3f00 	ldrex	r3, [r3]
 80099d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f023 0301 	bic.w	r3, r3, #1
 80099e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3308      	adds	r3, #8
 80099e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099ea:	61fa      	str	r2, [r7, #28]
 80099ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ee:	69b9      	ldr	r1, [r7, #24]
 80099f0:	69fa      	ldr	r2, [r7, #28]
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	617b      	str	r3, [r7, #20]
   return(result);
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1e5      	bne.n	80099ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2220      	movs	r2, #32
 8009a02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a0e:	2303      	movs	r3, #3
 8009a10:	e012      	b.n	8009a38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2220      	movs	r2, #32
 8009a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3758      	adds	r7, #88	@ 0x58
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	603b      	str	r3, [r7, #0]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a50:	e04f      	b.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a58:	d04b      	beq.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a5a:	f7f8 ff69 	bl	8002930 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	69ba      	ldr	r2, [r7, #24]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d302      	bcc.n	8009a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e04e      	b.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0304 	and.w	r3, r3, #4
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d037      	beq.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b80      	cmp	r3, #128	@ 0x80
 8009a86:	d034      	beq.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	2b40      	cmp	r3, #64	@ 0x40
 8009a8c:	d031      	beq.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	69db      	ldr	r3, [r3, #28]
 8009a94:	f003 0308 	and.w	r3, r3, #8
 8009a98:	2b08      	cmp	r3, #8
 8009a9a:	d110      	bne.n	8009abe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2208      	movs	r2, #8
 8009aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 f839 	bl	8009b1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2208      	movs	r2, #8
 8009aae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e029      	b.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009acc:	d111      	bne.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 f81f 	bl	8009b1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e00f      	b.n	8009b12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69da      	ldr	r2, [r3, #28]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4013      	ands	r3, r2
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	bf0c      	ite	eq
 8009b02:	2301      	moveq	r3, #1
 8009b04:	2300      	movne	r3, #0
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	79fb      	ldrb	r3, [r7, #7]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d0a0      	beq.n	8009a52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b095      	sub	sp, #84	@ 0x54
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2c:	e853 3f00 	ldrex	r3, [r3]
 8009b30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b42:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e6      	bne.n	8009b24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	e853 3f00 	ldrex	r3, [r3]
 8009b64:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	4b1e      	ldr	r3, [pc, #120]	@ (8009be4 <UART_EndRxTransfer+0xc8>)
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3308      	adds	r3, #8
 8009b74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b7e:	e841 2300 	strex	r3, r2, [r1]
 8009b82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1e5      	bne.n	8009b56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d118      	bne.n	8009bc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	e853 3f00 	ldrex	r3, [r3]
 8009b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f023 0310 	bic.w	r3, r3, #16
 8009ba6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	461a      	mov	r2, r3
 8009bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bb0:	61bb      	str	r3, [r7, #24]
 8009bb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb4:	6979      	ldr	r1, [r7, #20]
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	e841 2300 	strex	r3, r2, [r1]
 8009bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1e6      	bne.n	8009b92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009bd8:	bf00      	nop
 8009bda:	3754      	adds	r7, #84	@ 0x54
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	effffffe 	.word	0xeffffffe

08009be8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d101      	bne.n	8009bfe <HAL_UARTEx_DisableFifoMode+0x16>
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	e027      	b.n	8009c4e <HAL_UARTEx_DisableFifoMode+0x66>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2224      	movs	r2, #36	@ 0x24
 8009c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f022 0201 	bic.w	r2, r2, #1
 8009c24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009c2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2220      	movs	r2, #32
 8009c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c6e:	2302      	movs	r3, #2
 8009c70:	e02d      	b.n	8009cce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2224      	movs	r2, #36	@ 0x24
 8009c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f022 0201 	bic.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	430a      	orrs	r2, r1
 8009cac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f850 	bl	8009d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d101      	bne.n	8009cee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009cea:	2302      	movs	r3, #2
 8009cec:	e02d      	b.n	8009d4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2224      	movs	r2, #36	@ 0x24
 8009cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 0201 	bic.w	r2, r2, #1
 8009d14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f812 	bl	8009d54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d108      	bne.n	8009d76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d74:	e031      	b.n	8009dda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d76:	2310      	movs	r3, #16
 8009d78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d7a:	2310      	movs	r3, #16
 8009d7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	0e5b      	lsrs	r3, r3, #25
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	f003 0307 	and.w	r3, r3, #7
 8009d8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	0f5b      	lsrs	r3, r3, #29
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f003 0307 	and.w	r3, r3, #7
 8009d9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	7b3a      	ldrb	r2, [r7, #12]
 8009da2:	4911      	ldr	r1, [pc, #68]	@ (8009de8 <UARTEx_SetNbDataToProcess+0x94>)
 8009da4:	5c8a      	ldrb	r2, [r1, r2]
 8009da6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009daa:	7b3a      	ldrb	r2, [r7, #12]
 8009dac:	490f      	ldr	r1, [pc, #60]	@ (8009dec <UARTEx_SetNbDataToProcess+0x98>)
 8009dae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009db0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
 8009dbe:	7b7a      	ldrb	r2, [r7, #13]
 8009dc0:	4909      	ldr	r1, [pc, #36]	@ (8009de8 <UARTEx_SetNbDataToProcess+0x94>)
 8009dc2:	5c8a      	ldrb	r2, [r1, r2]
 8009dc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009dc8:	7b7a      	ldrb	r2, [r7, #13]
 8009dca:	4908      	ldr	r1, [pc, #32]	@ (8009dec <UARTEx_SetNbDataToProcess+0x98>)
 8009dcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dce:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	0800a270 	.word	0x0800a270
 8009dec:	0800a278 	.word	0x0800a278

08009df0 <memset>:
 8009df0:	4402      	add	r2, r0
 8009df2:	4603      	mov	r3, r0
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d100      	bne.n	8009dfa <memset+0xa>
 8009df8:	4770      	bx	lr
 8009dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8009dfe:	e7f9      	b.n	8009df4 <memset+0x4>

08009e00 <__errno>:
 8009e00:	4b01      	ldr	r3, [pc, #4]	@ (8009e08 <__errno+0x8>)
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	24000038 	.word	0x24000038

08009e0c <__libc_init_array>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8009e44 <__libc_init_array+0x38>)
 8009e10:	4c0d      	ldr	r4, [pc, #52]	@ (8009e48 <__libc_init_array+0x3c>)
 8009e12:	1b64      	subs	r4, r4, r5
 8009e14:	10a4      	asrs	r4, r4, #2
 8009e16:	2600      	movs	r6, #0
 8009e18:	42a6      	cmp	r6, r4
 8009e1a:	d109      	bne.n	8009e30 <__libc_init_array+0x24>
 8009e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8009e4c <__libc_init_array+0x40>)
 8009e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8009e50 <__libc_init_array+0x44>)
 8009e20:	f000 fa04 	bl	800a22c <_init>
 8009e24:	1b64      	subs	r4, r4, r5
 8009e26:	10a4      	asrs	r4, r4, #2
 8009e28:	2600      	movs	r6, #0
 8009e2a:	42a6      	cmp	r6, r4
 8009e2c:	d105      	bne.n	8009e3a <__libc_init_array+0x2e>
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e34:	4798      	blx	r3
 8009e36:	3601      	adds	r6, #1
 8009e38:	e7ee      	b.n	8009e18 <__libc_init_array+0xc>
 8009e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e3e:	4798      	blx	r3
 8009e40:	3601      	adds	r6, #1
 8009e42:	e7f2      	b.n	8009e2a <__libc_init_array+0x1e>
 8009e44:	0800a2f8 	.word	0x0800a2f8
 8009e48:	0800a2f8 	.word	0x0800a2f8
 8009e4c:	0800a2f8 	.word	0x0800a2f8
 8009e50:	0800a2fc 	.word	0x0800a2fc

08009e54 <atan2>:
 8009e54:	f000 b82c 	b.w	8009eb0 <__ieee754_atan2>

08009e58 <sqrt>:
 8009e58:	b508      	push	{r3, lr}
 8009e5a:	ed2d 8b04 	vpush	{d8-d9}
 8009e5e:	eeb0 8b40 	vmov.f64	d8, d0
 8009e62:	f000 f821 	bl	8009ea8 <__ieee754_sqrt>
 8009e66:	eeb4 8b48 	vcmp.f64	d8, d8
 8009e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e6e:	d60c      	bvs.n	8009e8a <sqrt+0x32>
 8009e70:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8009e90 <sqrt+0x38>
 8009e74:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e7c:	d505      	bpl.n	8009e8a <sqrt+0x32>
 8009e7e:	f7ff ffbf 	bl	8009e00 <__errno>
 8009e82:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8009e86:	2321      	movs	r3, #33	@ 0x21
 8009e88:	6003      	str	r3, [r0, #0]
 8009e8a:	ecbd 8b04 	vpop	{d8-d9}
 8009e8e:	bd08      	pop	{r3, pc}
	...

08009e98 <fabs>:
 8009e98:	ec51 0b10 	vmov	r0, r1, d0
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009ea2:	ec43 2b10 	vmov	d0, r2, r3
 8009ea6:	4770      	bx	lr

08009ea8 <__ieee754_sqrt>:
 8009ea8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8009eac:	4770      	bx	lr
	...

08009eb0 <__ieee754_atan2>:
 8009eb0:	ee11 1a10 	vmov	r1, s2
 8009eb4:	eeb0 7b40 	vmov.f64	d7, d0
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	ee11 5a90 	vmov	r5, s3
 8009ebe:	424b      	negs	r3, r1
 8009ec0:	4f59      	ldr	r7, [pc, #356]	@ (800a028 <__ieee754_atan2+0x178>)
 8009ec2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009ec6:	430b      	orrs	r3, r1
 8009ec8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009ecc:	42bb      	cmp	r3, r7
 8009ece:	d80d      	bhi.n	8009eec <__ieee754_atan2+0x3c>
 8009ed0:	ee10 ca10 	vmov	ip, s0
 8009ed4:	ee17 6a90 	vmov	r6, s15
 8009ed8:	f1cc 0000 	rsb	r0, ip, #0
 8009edc:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009ee0:	ea40 000c 	orr.w	r0, r0, ip
 8009ee4:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 8009ee8:	42b8      	cmp	r0, r7
 8009eea:	d904      	bls.n	8009ef6 <__ieee754_atan2+0x46>
 8009eec:	ee37 7b01 	vadd.f64	d7, d7, d1
 8009ef0:	eeb0 0b47 	vmov.f64	d0, d7
 8009ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ef6:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 8009efa:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009efe:	4308      	orrs	r0, r1
 8009f00:	d103      	bne.n	8009f0a <__ieee754_atan2+0x5a>
 8009f02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f06:	f000 b897 	b.w	800a038 <atan>
 8009f0a:	17ac      	asrs	r4, r5, #30
 8009f0c:	f004 0402 	and.w	r4, r4, #2
 8009f10:	ea53 0c0c 	orrs.w	ip, r3, ip
 8009f14:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 8009f18:	d107      	bne.n	8009f2a <__ieee754_atan2+0x7a>
 8009f1a:	2c02      	cmp	r4, #2
 8009f1c:	d05c      	beq.n	8009fd8 <__ieee754_atan2+0x128>
 8009f1e:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8009ff0 <__ieee754_atan2+0x140>
 8009f22:	2c03      	cmp	r4, #3
 8009f24:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8009f28:	e7e2      	b.n	8009ef0 <__ieee754_atan2+0x40>
 8009f2a:	4311      	orrs	r1, r2
 8009f2c:	d107      	bne.n	8009f3e <__ieee754_atan2+0x8e>
 8009f2e:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 8009ff8 <__ieee754_atan2+0x148>
 8009f32:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 800a000 <__ieee754_atan2+0x150>
 8009f36:	2e00      	cmp	r6, #0
 8009f38:	fe27 7b06 	vselge.f64	d7, d7, d6
 8009f3c:	e7d8      	b.n	8009ef0 <__ieee754_atan2+0x40>
 8009f3e:	42ba      	cmp	r2, r7
 8009f40:	d10f      	bne.n	8009f62 <__ieee754_atan2+0xb2>
 8009f42:	4293      	cmp	r3, r2
 8009f44:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8009f48:	d107      	bne.n	8009f5a <__ieee754_atan2+0xaa>
 8009f4a:	2c02      	cmp	r4, #2
 8009f4c:	d847      	bhi.n	8009fde <__ieee754_atan2+0x12e>
 8009f4e:	4b37      	ldr	r3, [pc, #220]	@ (800a02c <__ieee754_atan2+0x17c>)
 8009f50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f54:	ed93 7b00 	vldr	d7, [r3]
 8009f58:	e7ca      	b.n	8009ef0 <__ieee754_atan2+0x40>
 8009f5a:	2c02      	cmp	r4, #2
 8009f5c:	d842      	bhi.n	8009fe4 <__ieee754_atan2+0x134>
 8009f5e:	4b34      	ldr	r3, [pc, #208]	@ (800a030 <__ieee754_atan2+0x180>)
 8009f60:	e7f6      	b.n	8009f50 <__ieee754_atan2+0xa0>
 8009f62:	42bb      	cmp	r3, r7
 8009f64:	d0e3      	beq.n	8009f2e <__ieee754_atan2+0x7e>
 8009f66:	1a9b      	subs	r3, r3, r2
 8009f68:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009f6c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f70:	da1a      	bge.n	8009fa8 <__ieee754_atan2+0xf8>
 8009f72:	2d00      	cmp	r5, #0
 8009f74:	da01      	bge.n	8009f7a <__ieee754_atan2+0xca>
 8009f76:	323c      	adds	r2, #60	@ 0x3c
 8009f78:	db19      	blt.n	8009fae <__ieee754_atan2+0xfe>
 8009f7a:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8009f7e:	f7ff ff8b 	bl	8009e98 <fabs>
 8009f82:	f000 f859 	bl	800a038 <atan>
 8009f86:	eeb0 7b40 	vmov.f64	d7, d0
 8009f8a:	2c01      	cmp	r4, #1
 8009f8c:	d012      	beq.n	8009fb4 <__ieee754_atan2+0x104>
 8009f8e:	2c02      	cmp	r4, #2
 8009f90:	d019      	beq.n	8009fc6 <__ieee754_atan2+0x116>
 8009f92:	2c00      	cmp	r4, #0
 8009f94:	d0ac      	beq.n	8009ef0 <__ieee754_atan2+0x40>
 8009f96:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800a008 <__ieee754_atan2+0x158>
 8009f9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009f9e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800a010 <__ieee754_atan2+0x160>
 8009fa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009fa6:	e7a3      	b.n	8009ef0 <__ieee754_atan2+0x40>
 8009fa8:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 8009ff8 <__ieee754_atan2+0x148>
 8009fac:	e7ed      	b.n	8009f8a <__ieee754_atan2+0xda>
 8009fae:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800a018 <__ieee754_atan2+0x168>
 8009fb2:	e7ea      	b.n	8009f8a <__ieee754_atan2+0xda>
 8009fb4:	ee17 1a90 	vmov	r1, s15
 8009fb8:	ec53 2b17 	vmov	r2, r3, d7
 8009fbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009fc0:	ec43 2b17 	vmov	d7, r2, r3
 8009fc4:	e794      	b.n	8009ef0 <__ieee754_atan2+0x40>
 8009fc6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 800a008 <__ieee754_atan2+0x158>
 8009fca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009fce:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 800a010 <__ieee754_atan2+0x160>
 8009fd2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009fd6:	e78b      	b.n	8009ef0 <__ieee754_atan2+0x40>
 8009fd8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800a010 <__ieee754_atan2+0x160>
 8009fdc:	e788      	b.n	8009ef0 <__ieee754_atan2+0x40>
 8009fde:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a020 <__ieee754_atan2+0x170>
 8009fe2:	e785      	b.n	8009ef0 <__ieee754_atan2+0x40>
 8009fe4:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800a018 <__ieee754_atan2+0x168>
 8009fe8:	e782      	b.n	8009ef0 <__ieee754_atan2+0x40>
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w
 8009ff0:	54442d18 	.word	0x54442d18
 8009ff4:	c00921fb 	.word	0xc00921fb
 8009ff8:	54442d18 	.word	0x54442d18
 8009ffc:	3ff921fb 	.word	0x3ff921fb
 800a000:	54442d18 	.word	0x54442d18
 800a004:	bff921fb 	.word	0xbff921fb
 800a008:	33145c07 	.word	0x33145c07
 800a00c:	3ca1a626 	.word	0x3ca1a626
 800a010:	54442d18 	.word	0x54442d18
 800a014:	400921fb 	.word	0x400921fb
	...
 800a020:	54442d18 	.word	0x54442d18
 800a024:	3fe921fb 	.word	0x3fe921fb
 800a028:	7ff00000 	.word	0x7ff00000
 800a02c:	0800a298 	.word	0x0800a298
 800a030:	0800a280 	.word	0x0800a280
 800a034:	00000000 	.word	0x00000000

0800a038 <atan>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	eeb0 7b40 	vmov.f64	d7, d0
 800a03e:	ee17 5a90 	vmov	r5, s15
 800a042:	4b73      	ldr	r3, [pc, #460]	@ (800a210 <atan+0x1d8>)
 800a044:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a048:	429c      	cmp	r4, r3
 800a04a:	d913      	bls.n	800a074 <atan+0x3c>
 800a04c:	4b71      	ldr	r3, [pc, #452]	@ (800a214 <atan+0x1dc>)
 800a04e:	429c      	cmp	r4, r3
 800a050:	d803      	bhi.n	800a05a <atan+0x22>
 800a052:	d107      	bne.n	800a064 <atan+0x2c>
 800a054:	ee10 3a10 	vmov	r3, s0
 800a058:	b123      	cbz	r3, 800a064 <atan+0x2c>
 800a05a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a05e:	eeb0 0b47 	vmov.f64	d0, d7
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800a1a0 <atan+0x168>
 800a068:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800a1a8 <atan+0x170>
 800a06c:	2d00      	cmp	r5, #0
 800a06e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800a072:	e7f4      	b.n	800a05e <atan+0x26>
 800a074:	4b68      	ldr	r3, [pc, #416]	@ (800a218 <atan+0x1e0>)
 800a076:	429c      	cmp	r4, r3
 800a078:	d811      	bhi.n	800a09e <atan+0x66>
 800a07a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a07e:	429c      	cmp	r4, r3
 800a080:	d80a      	bhi.n	800a098 <atan+0x60>
 800a082:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800a086:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800a1b0 <atan+0x178>
 800a08a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800a08e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a096:	dce2      	bgt.n	800a05e <atan+0x26>
 800a098:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a09c:	e013      	b.n	800a0c6 <atan+0x8e>
 800a09e:	f7ff fefb 	bl	8009e98 <fabs>
 800a0a2:	4b5e      	ldr	r3, [pc, #376]	@ (800a21c <atan+0x1e4>)
 800a0a4:	429c      	cmp	r4, r3
 800a0a6:	d84f      	bhi.n	800a148 <atan+0x110>
 800a0a8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a0ac:	429c      	cmp	r4, r3
 800a0ae:	d841      	bhi.n	800a134 <atan+0xfc>
 800a0b0:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800a0b4:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	eea0 5b07 	vfma.f64	d5, d0, d7
 800a0be:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a0c2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800a0c6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a1b8 <atan+0x180>
 800a0ca:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a0ce:	ee24 5b04 	vmul.f64	d5, d4, d4
 800a0d2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a1c0 <atan+0x188>
 800a0d6:	eea5 3b06 	vfma.f64	d3, d5, d6
 800a0da:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800a1c8 <atan+0x190>
 800a0de:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a0e2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a1d0 <atan+0x198>
 800a0e6:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a0ea:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800a1d8 <atan+0x1a0>
 800a0ee:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a0f2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a1e0 <atan+0x1a8>
 800a0f6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800a1e8 <atan+0x1b0>
 800a0fa:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a0fe:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a1f0 <atan+0x1b8>
 800a102:	eea5 2b06 	vfma.f64	d2, d5, d6
 800a106:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a1f8 <atan+0x1c0>
 800a10a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a10e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800a200 <atan+0x1c8>
 800a112:	eea6 2b05 	vfma.f64	d2, d6, d5
 800a116:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a208 <atan+0x1d0>
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a120:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a124:	eea3 6b04 	vfma.f64	d6, d3, d4
 800a128:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a12c:	d121      	bne.n	800a172 <atan+0x13a>
 800a12e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a132:	e794      	b.n	800a05e <atan+0x26>
 800a134:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800a138:	2301      	movs	r3, #1
 800a13a:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a13e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a142:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800a146:	e7be      	b.n	800a0c6 <atan+0x8e>
 800a148:	4b35      	ldr	r3, [pc, #212]	@ (800a220 <atan+0x1e8>)
 800a14a:	429c      	cmp	r4, r3
 800a14c:	d20b      	bcs.n	800a166 <atan+0x12e>
 800a14e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800a152:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a156:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a15a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a15e:	2302      	movs	r3, #2
 800a160:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a164:	e7af      	b.n	800a0c6 <atan+0x8e>
 800a166:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800a16a:	2303      	movs	r3, #3
 800a16c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a170:	e7a9      	b.n	800a0c6 <atan+0x8e>
 800a172:	4a2c      	ldr	r2, [pc, #176]	@ (800a224 <atan+0x1ec>)
 800a174:	492c      	ldr	r1, [pc, #176]	@ (800a228 <atan+0x1f0>)
 800a176:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a17a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800a17e:	ed93 5b00 	vldr	d5, [r3]
 800a182:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a186:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a18a:	ed92 7b00 	vldr	d7, [r2]
 800a18e:	2d00      	cmp	r5, #0
 800a190:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a194:	bfb8      	it	lt
 800a196:	eeb1 7b47 	vneglt.f64	d7, d7
 800a19a:	e760      	b.n	800a05e <atan+0x26>
 800a19c:	f3af 8000 	nop.w
 800a1a0:	54442d18 	.word	0x54442d18
 800a1a4:	bff921fb 	.word	0xbff921fb
 800a1a8:	54442d18 	.word	0x54442d18
 800a1ac:	3ff921fb 	.word	0x3ff921fb
 800a1b0:	8800759c 	.word	0x8800759c
 800a1b4:	7e37e43c 	.word	0x7e37e43c
 800a1b8:	e322da11 	.word	0xe322da11
 800a1bc:	3f90ad3a 	.word	0x3f90ad3a
 800a1c0:	24760deb 	.word	0x24760deb
 800a1c4:	3fa97b4b 	.word	0x3fa97b4b
 800a1c8:	a0d03d51 	.word	0xa0d03d51
 800a1cc:	3fb10d66 	.word	0x3fb10d66
 800a1d0:	c54c206e 	.word	0xc54c206e
 800a1d4:	3fb745cd 	.word	0x3fb745cd
 800a1d8:	920083ff 	.word	0x920083ff
 800a1dc:	3fc24924 	.word	0x3fc24924
 800a1e0:	5555550d 	.word	0x5555550d
 800a1e4:	3fd55555 	.word	0x3fd55555
 800a1e8:	52defd9a 	.word	0x52defd9a
 800a1ec:	bfadde2d 	.word	0xbfadde2d
 800a1f0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a1f4:	bfa2b444 	.word	0xbfa2b444
 800a1f8:	af749a6d 	.word	0xaf749a6d
 800a1fc:	bfb3b0f2 	.word	0xbfb3b0f2
 800a200:	fe231671 	.word	0xfe231671
 800a204:	bfbc71c6 	.word	0xbfbc71c6
 800a208:	9998ebc4 	.word	0x9998ebc4
 800a20c:	bfc99999 	.word	0xbfc99999
 800a210:	440fffff 	.word	0x440fffff
 800a214:	7ff00000 	.word	0x7ff00000
 800a218:	3fdbffff 	.word	0x3fdbffff
 800a21c:	3ff2ffff 	.word	0x3ff2ffff
 800a220:	40038000 	.word	0x40038000
 800a224:	0800a2d0 	.word	0x0800a2d0
 800a228:	0800a2b0 	.word	0x0800a2b0

0800a22c <_init>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	bf00      	nop
 800a230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a232:	bc08      	pop	{r3}
 800a234:	469e      	mov	lr, r3
 800a236:	4770      	bx	lr

0800a238 <_fini>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	bf00      	nop
 800a23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a23e:	bc08      	pop	{r3}
 800a240:	469e      	mov	lr, r3
 800a242:	4770      	bx	lr
