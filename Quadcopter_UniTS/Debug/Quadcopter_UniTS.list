
Quadcopter_UniTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f04  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800a1b8  0800a1b8  0000b1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a268  0800a268  0000b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a270  0800a270  0000b270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a274  0800a274  0000b274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a278  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000520  24000064  0800a2dc  0000c064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000584  0800a2dc  0000c584  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019f73  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e50  00000000  00000000  00026005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001430  00000000  00000000  00028e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fda  00000000  00000000  0002a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031678  00000000  00000000  0002b262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ba69  00000000  00000000  0005c8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014088d  00000000  00000000  00078343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b8bd0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005860  00000000  00000000  001b8c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001be474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a19c 	.word	0x0800a19c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	0800a19c 	.word	0x0800a19c

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <attitude_fusion>:
int ahrs_init_flag = 0;
int acc_over = 0;
float ahrs_kp;

void attitude_fusion(Axes_float *acc, Axes_float *gyro, Attitude *ahrs, Radio *rc_comm )
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09a      	sub	sp, #104	@ 0x68
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	603b      	str	r3, [r7, #0]
  float ex, ey, ez;
  float q0q0, q0q1, q0q2, /*q0q3,*/ q1q1, /*q1q2,*/ q1q3, q2q2, q2q3, q3q3;
  float halfT;
 
  
  if(rc_comm->THR < MIN_THR)
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80005f4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80005f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000600:	d508      	bpl.n	8000614 <attitude_fusion+0x34>
  {
    ahrs_kp = AHRS_KP_BIG;
 8000602:	4b02      	ldr	r3, [pc, #8]	@ (800060c <attitude_fusion+0x2c>)
 8000604:	4a02      	ldr	r2, [pc, #8]	@ (8000610 <attitude_fusion+0x30>)
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	e007      	b.n	800061a <attitude_fusion+0x3a>
 800060a:	bf00      	nop
 800060c:	24000098 	.word	0x24000098
 8000610:	41200000 	.word	0x41200000
  }
  else
  {
    ahrs_kp = AHRS_KP_NORM;
 8000614:	4be1      	ldr	r3, [pc, #900]	@ (800099c <attitude_fusion+0x3bc>)
 8000616:	4ae2      	ldr	r2, [pc, #904]	@ (80009a0 <attitude_fusion+0x3c0>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  axf = acc->AXIS_X;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	667b      	str	r3, [r7, #100]	@ 0x64
  ayf = acc->AXIS_Y;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	663b      	str	r3, [r7, #96]	@ 0x60
  azf = acc->AXIS_Z;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	689b      	ldr	r3, [r3, #8]
 800062a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  // mdps convert to rad/s
  gxf = ((float)gyro->AXIS_X) * ((float)COE_MDPS_TO_RADPS);  
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	edd3 7a00 	vldr	s15, [r3]
 8000632:	ed9f 7adc 	vldr	s14, [pc, #880]	@ 80009a4 <attitude_fusion+0x3c4>
 8000636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
  gyf = ((float)gyro->AXIS_Y) * ((float)COE_MDPS_TO_RADPS);  
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	edd3 7a01 	vldr	s15, [r3, #4]
 8000644:	ed9f 7ad7 	vldr	s14, [pc, #860]	@ 80009a4 <attitude_fusion+0x3c4>
 8000648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800064c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  gzf = ((float)gyro->AXIS_Z) * ((float)COE_MDPS_TO_RADPS); 
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	edd3 7a02 	vldr	s15, [r3, #8]
 8000656:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 80009a4 <attitude_fusion+0x3c4>
 800065a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800065e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50


  // auxiliary variables to reduce number of repeated operations
  q0q0 = q0*q0;
 8000662:	4bd1      	ldr	r3, [pc, #836]	@ (80009a8 <attitude_fusion+0x3c8>)
 8000664:	ed93 7a00 	vldr	s14, [r3]
 8000668:	4bcf      	ldr	r3, [pc, #828]	@ (80009a8 <attitude_fusion+0x3c8>)
 800066a:	edd3 7a00 	vldr	s15, [r3]
 800066e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000672:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  q0q1 = q0*q1;
 8000676:	4bcc      	ldr	r3, [pc, #816]	@ (80009a8 <attitude_fusion+0x3c8>)
 8000678:	ed93 7a00 	vldr	s14, [r3]
 800067c:	4bcb      	ldr	r3, [pc, #812]	@ (80009ac <attitude_fusion+0x3cc>)
 800067e:	edd3 7a00 	vldr	s15, [r3]
 8000682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000686:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  q0q2 = q0*q2;
 800068a:	4bc7      	ldr	r3, [pc, #796]	@ (80009a8 <attitude_fusion+0x3c8>)
 800068c:	ed93 7a00 	vldr	s14, [r3]
 8000690:	4bc7      	ldr	r3, [pc, #796]	@ (80009b0 <attitude_fusion+0x3d0>)
 8000692:	edd3 7a00 	vldr	s15, [r3]
 8000696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800069a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  //q0q3 = q0*q3;
  q1q1 = q1*q1;
 800069e:	4bc3      	ldr	r3, [pc, #780]	@ (80009ac <attitude_fusion+0x3cc>)
 80006a0:	ed93 7a00 	vldr	s14, [r3]
 80006a4:	4bc1      	ldr	r3, [pc, #772]	@ (80009ac <attitude_fusion+0x3cc>)
 80006a6:	edd3 7a00 	vldr	s15, [r3]
 80006aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ae:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  //q1q2 = q1*q2;
  q1q3 = q1*q3;
 80006b2:	4bbe      	ldr	r3, [pc, #760]	@ (80009ac <attitude_fusion+0x3cc>)
 80006b4:	ed93 7a00 	vldr	s14, [r3]
 80006b8:	4bbe      	ldr	r3, [pc, #760]	@ (80009b4 <attitude_fusion+0x3d4>)
 80006ba:	edd3 7a00 	vldr	s15, [r3]
 80006be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  q2q2 = q2*q2;
 80006c6:	4bba      	ldr	r3, [pc, #744]	@ (80009b0 <attitude_fusion+0x3d0>)
 80006c8:	ed93 7a00 	vldr	s14, [r3]
 80006cc:	4bb8      	ldr	r3, [pc, #736]	@ (80009b0 <attitude_fusion+0x3d0>)
 80006ce:	edd3 7a00 	vldr	s15, [r3]
 80006d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
  q2q3 = q2*q3;
 80006da:	4bb5      	ldr	r3, [pc, #724]	@ (80009b0 <attitude_fusion+0x3d0>)
 80006dc:	ed93 7a00 	vldr	s14, [r3]
 80006e0:	4bb4      	ldr	r3, [pc, #720]	@ (80009b4 <attitude_fusion+0x3d4>)
 80006e2:	edd3 7a00 	vldr	s15, [r3]
 80006e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ea:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  q3q3 = q3*q3;
 80006ee:	4bb1      	ldr	r3, [pc, #708]	@ (80009b4 <attitude_fusion+0x3d4>)
 80006f0:	ed93 7a00 	vldr	s14, [r3]
 80006f4:	4baf      	ldr	r3, [pc, #700]	@ (80009b4 <attitude_fusion+0x3d4>)
 80006f6:	edd3 7a00 	vldr	s15, [r3]
 80006fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006fe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

  // normalise the accelerometer measurement
  norm = fast_inv_sqrt(axf*axf+ayf*ayf+azf*azf);
 8000702:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8000706:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800070a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800070e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000716:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800071a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800071e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000722:	eeb0 0a67 	vmov.f32	s0, s15
 8000726:	f001 fe81 	bl	800242c <fast_inv_sqrt>
 800072a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

  axf = axf * norm;
 800072e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8000732:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
  ayf = ayf * norm;
 800073e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8000742:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
  azf = azf * norm;
 800074e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8000752:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800075a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

  // estimated direction of gravity and flux (v and w)
  vx = 2*(q1q3 - q0q2);
 800075e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000762:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800076a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800076e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  vy = 2*(q0q1 + q2q3);
 8000772:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000776:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800077a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800077e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000782:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  vz = q0q0 - q1q1 - q2q2 + q3q3;
 8000786:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800078a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800078e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000792:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800079a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800079e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007a2:	edc7 7a08 	vstr	s15, [r7, #32]

  ex = (ayf*vz - azf*vy);
 80007a6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80007aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80007ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007b2:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 80007b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80007ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007c2:	edc7 7a07 	vstr	s15, [r7, #28]
  ey = (azf*vx - axf*vz);
 80007c6:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80007ca:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80007ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007d2:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 80007d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80007da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007e2:	edc7 7a06 	vstr	s15, [r7, #24]
  ez = (axf*vy - ayf*vx);
 80007e6:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80007ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80007ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007f2:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80007f6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80007fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000802:	edc7 7a05 	vstr	s15, [r7, #20]

  // integral error scaled integral gain
  exInt = exInt + ex*AHRS_KI*SENSOR_SAMPLING_TIME;
 8000806:	edd7 7a07 	vldr	s15, [r7, #28]
 800080a:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80009b8 <attitude_fusion+0x3d8>
 800080e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000812:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80009bc <attitude_fusion+0x3dc>
 8000816:	ee27 7a87 	vmul.f32	s14, s15, s14
 800081a:	4b69      	ldr	r3, [pc, #420]	@ (80009c0 <attitude_fusion+0x3e0>)
 800081c:	edd3 7a00 	vldr	s15, [r3]
 8000820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000824:	4b66      	ldr	r3, [pc, #408]	@ (80009c0 <attitude_fusion+0x3e0>)
 8000826:	edc3 7a00 	vstr	s15, [r3]
  eyInt = eyInt + ey*AHRS_KI*SENSOR_SAMPLING_TIME;
 800082a:	edd7 7a06 	vldr	s15, [r7, #24]
 800082e:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80009b8 <attitude_fusion+0x3d8>
 8000832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000836:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80009bc <attitude_fusion+0x3dc>
 800083a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800083e:	4b61      	ldr	r3, [pc, #388]	@ (80009c4 <attitude_fusion+0x3e4>)
 8000840:	edd3 7a00 	vldr	s15, [r3]
 8000844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000848:	4b5e      	ldr	r3, [pc, #376]	@ (80009c4 <attitude_fusion+0x3e4>)
 800084a:	edc3 7a00 	vstr	s15, [r3]
  ezInt = ezInt + ez*AHRS_KI*SENSOR_SAMPLING_TIME;
 800084e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000852:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80009b8 <attitude_fusion+0x3d8>
 8000856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800085a:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80009bc <attitude_fusion+0x3dc>
 800085e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000862:	4b59      	ldr	r3, [pc, #356]	@ (80009c8 <attitude_fusion+0x3e8>)
 8000864:	edd3 7a00 	vldr	s15, [r3]
 8000868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800086c:	4b56      	ldr	r3, [pc, #344]	@ (80009c8 <attitude_fusion+0x3e8>)
 800086e:	edc3 7a00 	vstr	s15, [r3]

  // adjusted gyroscope measurements
  gxf = gxf + ahrs_kp*ex + exInt;
 8000872:	4b4a      	ldr	r3, [pc, #296]	@ (800099c <attitude_fusion+0x3bc>)
 8000874:	ed93 7a00 	vldr	s14, [r3]
 8000878:	edd7 7a07 	vldr	s15, [r7, #28]
 800087c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000880:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000888:	4b4d      	ldr	r3, [pc, #308]	@ (80009c0 <attitude_fusion+0x3e0>)
 800088a:	edd3 7a00 	vldr	s15, [r3]
 800088e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000892:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
  gyf = gyf + ahrs_kp*ey + eyInt;
 8000896:	4b41      	ldr	r3, [pc, #260]	@ (800099c <attitude_fusion+0x3bc>)
 8000898:	ed93 7a00 	vldr	s14, [r3]
 800089c:	edd7 7a06 	vldr	s15, [r7, #24]
 80008a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80008a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008ac:	4b45      	ldr	r3, [pc, #276]	@ (80009c4 <attitude_fusion+0x3e4>)
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008b6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  gzf = gzf + ahrs_kp*ez + ezInt;
 80008ba:	4b38      	ldr	r3, [pc, #224]	@ (800099c <attitude_fusion+0x3bc>)
 80008bc:	ed93 7a00 	vldr	s14, [r3]
 80008c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80008c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008c8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80008cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008d0:	4b3d      	ldr	r3, [pc, #244]	@ (80009c8 <attitude_fusion+0x3e8>)
 80008d2:	edd3 7a00 	vldr	s15, [r3]
 80008d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008da:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

  // integrate quaternion rate and normalise
  halfT = 0.5f*SENSOR_SAMPLING_TIME;
 80008de:	4b3b      	ldr	r3, [pc, #236]	@ (80009cc <attitude_fusion+0x3ec>)
 80008e0:	613b      	str	r3, [r7, #16]
  q0 = q0 + (-q1*gxf - q2*gyf - q3*gzf)*halfT;
 80008e2:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <attitude_fusion+0x3cc>)
 80008e4:	edd3 7a00 	vldr	s15, [r3]
 80008e8:	eeb1 7a67 	vneg.f32	s14, s15
 80008ec:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80008f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008f4:	4b2e      	ldr	r3, [pc, #184]	@ (80009b0 <attitude_fusion+0x3d0>)
 80008f6:	edd3 6a00 	vldr	s13, [r3]
 80008fa:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80008fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000902:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000906:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <attitude_fusion+0x3d4>)
 8000908:	edd3 6a00 	vldr	s13, [r3]
 800090c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000918:	edd7 7a04 	vldr	s15, [r7, #16]
 800091c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000920:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <attitude_fusion+0x3c8>)
 8000922:	edd3 7a00 	vldr	s15, [r3]
 8000926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800092a:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <attitude_fusion+0x3c8>)
 800092c:	edc3 7a00 	vstr	s15, [r3]
  q1 = q1 + (q0*gxf + q2*gzf - q3*gyf)*halfT;
 8000930:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <attitude_fusion+0x3c8>)
 8000932:	ed93 7a00 	vldr	s14, [r3]
 8000936:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800093a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <attitude_fusion+0x3d0>)
 8000940:	edd3 6a00 	vldr	s13, [r3]
 8000944:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800094c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000950:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <attitude_fusion+0x3d4>)
 8000952:	edd3 6a00 	vldr	s13, [r3]
 8000956:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800095a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800095e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000962:	edd7 7a04 	vldr	s15, [r7, #16]
 8000966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <attitude_fusion+0x3cc>)
 800096c:	edd3 7a00 	vldr	s15, [r3]
 8000970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000974:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <attitude_fusion+0x3cc>)
 8000976:	edc3 7a00 	vstr	s15, [r3]
  q2 = q2 + (q0*gyf - q1*gzf + q3*gxf)*halfT;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <attitude_fusion+0x3c8>)
 800097c:	ed93 7a00 	vldr	s14, [r3]
 8000980:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <attitude_fusion+0x3cc>)
 800098a:	edd3 6a00 	vldr	s13, [r3]
 800098e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000996:	ee37 7a67 	vsub.f32	s14, s14, s15
 800099a:	e019      	b.n	80009d0 <attitude_fusion+0x3f0>
 800099c:	24000098 	.word	0x24000098
 80009a0:	3ecccccd 	.word	0x3ecccccd
 80009a4:	379268a9 	.word	0x379268a9
 80009a8:	24000000 	.word	0x24000000
 80009ac:	24000080 	.word	0x24000080
 80009b0:	24000084 	.word	0x24000084
 80009b4:	24000088 	.word	0x24000088
 80009b8:	3dcccccd 	.word	0x3dcccccd
 80009bc:	3bcccccd 	.word	0x3bcccccd
 80009c0:	2400008c 	.word	0x2400008c
 80009c4:	24000090 	.word	0x24000090
 80009c8:	24000094 	.word	0x24000094
 80009cc:	3b4ccccd 	.word	0x3b4ccccd
 80009d0:	4b44      	ldr	r3, [pc, #272]	@ (8000ae4 <attitude_fusion+0x504>)
 80009d2:	edd3 6a00 	vldr	s13, [r3]
 80009d6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80009da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80009e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009ea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae8 <attitude_fusion+0x508>)
 80009ec:	edd3 7a00 	vldr	s15, [r3]
 80009f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae8 <attitude_fusion+0x508>)
 80009f6:	edc3 7a00 	vstr	s15, [r3]
  q3 = q3 + (q0*gzf + q1*gyf - q2*gxf)*halfT;
 80009fa:	4b3c      	ldr	r3, [pc, #240]	@ (8000aec <attitude_fusion+0x50c>)
 80009fc:	ed93 7a00 	vldr	s14, [r3]
 8000a00:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8000a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a08:	4b39      	ldr	r3, [pc, #228]	@ (8000af0 <attitude_fusion+0x510>)
 8000a0a:	edd3 6a00 	vldr	s13, [r3]
 8000a0e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8000a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ae8 <attitude_fusion+0x508>)
 8000a1c:	edd3 6a00 	vldr	s13, [r3]
 8000a20:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <attitude_fusion+0x504>)
 8000a36:	edd3 7a00 	vldr	s15, [r3]
 8000a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <attitude_fusion+0x504>)
 8000a40:	edc3 7a00 	vstr	s15, [r3]

  // normalise quaternion
  norm = fast_inv_sqrt(q0q0 + q1q1 + q2q2 + q3q3);
 8000a44:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8000a48:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a50:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a58:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a60:	eeb0 0a67 	vmov.f32	s0, s15
 8000a64:	f001 fce2 	bl	800242c <fast_inv_sqrt>
 8000a68:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
  q0 *= norm;
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <attitude_fusion+0x50c>)
 8000a6e:	ed93 7a00 	vldr	s14, [r3]
 8000a72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <attitude_fusion+0x50c>)
 8000a7c:	edc3 7a00 	vstr	s15, [r3]
  q1 *= norm;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <attitude_fusion+0x510>)
 8000a82:	ed93 7a00 	vldr	s14, [r3]
 8000a86:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <attitude_fusion+0x510>)
 8000a90:	edc3 7a00 	vstr	s15, [r3]
  q2 *= norm;
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <attitude_fusion+0x508>)
 8000a96:	ed93 7a00 	vldr	s14, [r3]
 8000a9a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <attitude_fusion+0x508>)
 8000aa4:	edc3 7a00 	vstr	s15, [r3]
  q3 *= norm;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <attitude_fusion+0x504>)
 8000aaa:	ed93 7a00 	vldr	s14, [r3]
 8000aae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <attitude_fusion+0x504>)
 8000ab8:	edc3 7a00 	vstr	s15, [r3]

  ahrs->q.q0 = q0;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <attitude_fusion+0x50c>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]
  ahrs->q.q1 = q1;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <attitude_fusion+0x510>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	605a      	str	r2, [r3, #4]
  ahrs->q.q2 = q2;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <attitude_fusion+0x508>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
  ahrs->q.q3 = q3;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <attitude_fusion+0x504>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	60da      	str	r2, [r3, #12]

}
 8000adc:	bf00      	nop
 8000ade:	3768      	adds	r7, #104	@ 0x68
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	24000088 	.word	0x24000088
 8000ae8:	24000084 	.word	0x24000084
 8000aec:	24000000 	.word	0x24000000
 8000af0:	24000080 	.word	0x24000080

08000af4 <PID_init>:

int16_t motor_thr;
float dt_recip;

void PID_init(Dual_PID_Control *pid)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  pid->ts = PID_SAMPLING_TIME;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a33      	ldr	r2, [pc, #204]	@ (8000bcc <PID_init+0xd8>)
 8000b00:	601a      	str	r2, [r3, #0]

  pid->x_kp1 = PITCH_PID_KP1;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a32      	ldr	r2, [pc, #200]	@ (8000bd0 <PID_init+0xdc>)
 8000b06:	605a      	str	r2, [r3, #4]
  pid->x_ki1 = PITCH_PID_KI1;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f04f 0200 	mov.w	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  pid->x_i1_limit = PITCH_PID_I1_LIMIT;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b16:	641a      	str	r2, [r3, #64]	@ 0x40
  pid->x_kp2 = PITCH_PID_KP2;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000bd4 <PID_init+0xe0>)
 8000b1c:	60da      	str	r2, [r3, #12]
  pid->x_ki2 = PITCH_PID_KI2;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd4 <PID_init+0xe0>)
 8000b22:	611a      	str	r2, [r3, #16]
  pid->x_kd2 = PITCH_PID_KD2;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd8 <PID_init+0xe4>)
 8000b28:	615a      	str	r2, [r3, #20]
  pid->x_i2_limit = PITCH_PID_I2_LIMIT;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8000bdc <PID_init+0xe8>)
 8000b2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  pid->x_s1 = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f04f 0200 	mov.w	r2, #0
 8000b36:	659a      	str	r2, [r3, #88]	@ 0x58
  pid->x_s2 = 0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  pid->y_kp1 = ROLL_PID_KP1;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a23      	ldr	r2, [pc, #140]	@ (8000bd0 <PID_init+0xdc>)
 8000b44:	619a      	str	r2, [r3, #24]
  pid->y_ki1 = ROLL_PID_KI1;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f04f 0200 	mov.w	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  pid->y_i1_limit = ROLL_PID_I1_LIMIT;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b54:	645a      	str	r2, [r3, #68]	@ 0x44
  pid->y_kp2 = ROLL_PID_KP2;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd4 <PID_init+0xe0>)
 8000b5a:	621a      	str	r2, [r3, #32]
  pid->y_ki2 = ROLL_PID_KI2;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <PID_init+0xe0>)
 8000b60:	625a      	str	r2, [r3, #36]	@ 0x24
  pid->y_kd2 = ROLL_PID_KD2;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd8 <PID_init+0xe4>)
 8000b66:	629a      	str	r2, [r3, #40]	@ 0x28
  pid->y_i2_limit = ROLL_PID_I2_LIMIT;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bdc <PID_init+0xe8>)
 8000b6c:	651a      	str	r2, [r3, #80]	@ 0x50
  pid->y_s1 = 0;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	661a      	str	r2, [r3, #96]	@ 0x60
  pid->y_s2 = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	665a      	str	r2, [r3, #100]	@ 0x64

  pid->z_kp1 = YAW_PID_KP1;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8000b84:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid->z_ki1 = YAW_PID_KI1;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f04f 0200 	mov.w	r2, #0
 8000b8c:	631a      	str	r2, [r3, #48]	@ 0x30
  pid->z_i1_limit = YAW_PID_I1_LIMIT;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b94:	649a      	str	r2, [r3, #72]	@ 0x48
  pid->z_kp2 = YAW_PID_KP2;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a11      	ldr	r2, [pc, #68]	@ (8000be0 <PID_init+0xec>)
 8000b9a:	635a      	str	r2, [r3, #52]	@ 0x34
  pid->z_ki2 = YAW_PID_KI2;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd0 <PID_init+0xdc>)
 8000ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  pid->z_kd2 = YAW_PID_KD2;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <PID_init+0xdc>)
 8000ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
  pid->z_i2_limit = YAW_PID_I2_LIMIT;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bae:	655a      	str	r2, [r3, #84]	@ 0x54
  pid->z_s1 = 0;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f04f 0200 	mov.w	r2, #0
 8000bb6:	669a      	str	r2, [r3, #104]	@ 0x68
  pid->z_s2 = 0;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	3aa3d70a 	.word	0x3aa3d70a
 8000bd0:	40400000 	.word	0x40400000
 8000bd4:	42a00000 	.word	0x42a00000
 8000bd8:	41200000 	.word	0x41200000
 8000bdc:	41a00000 	.word	0x41a00000
 8000be0:	44610000 	.word	0x44610000

08000be4 <PID_outer>:


void PID_outer(Euler *euler_rc, Euler *euler_ahrs, Attitude *ahrs, Dual_PID_Control *pid, Radio *rc_comm)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	603b      	str	r3, [r7, #0]
  float error;

  if(rc_comm->THR<MIN_THR)
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bf8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c04:	d50b      	bpl.n	8000c1e <PID_outer+0x3a>
  {
    pid_x_integ1 = 0;
 8000c06:	4b84      	ldr	r3, [pc, #528]	@ (8000e18 <PID_outer+0x234>)
 8000c08:	f04f 0200 	mov.w	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
    pid_y_integ1 = 0;
 8000c0e:	4b83      	ldr	r3, [pc, #524]	@ (8000e1c <PID_outer+0x238>)
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
    pid_z_integ1 = 0;
 8000c16:	4b82      	ldr	r3, [pc, #520]	@ (8000e20 <PID_outer+0x23c>)
 8000c18:	f04f 0200 	mov.w	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  // x-axis PID
  error = euler_rc->thx - euler_ahrs->thx;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	ed93 7a00 	vldr	s14, [r3]
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c2e:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_x_integ1 += error*pid->ts;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	ed93 7a00 	vldr	s14, [r3]
 8000c38:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c40:	4b75      	ldr	r3, [pc, #468]	@ (8000e18 <PID_outer+0x234>)
 8000c42:	edd3 7a00 	vldr	s15, [r3]
 8000c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c4a:	4b73      	ldr	r3, [pc, #460]	@ (8000e18 <PID_outer+0x234>)
 8000c4c:	edc3 7a00 	vstr	s15, [r3]
  if(pid_x_integ1 > pid->x_i1_limit)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8000c56:	4b70      	ldr	r3, [pc, #448]	@ (8000e18 <PID_outer+0x234>)
 8000c58:	edd3 7a00 	vldr	s15, [r3]
 8000c5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c64:	d504      	bpl.n	8000c70 <PID_outer+0x8c>
    pid_x_integ1 = pid->x_i1_limit;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a6b      	ldr	r2, [pc, #428]	@ (8000e18 <PID_outer+0x234>)
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e014      	b.n	8000c9a <PID_outer+0xb6>
  else if(pid_x_integ1 < -pid->x_i1_limit)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000c76:	eeb1 7a67 	vneg.f32	s14, s15
 8000c7a:	4b67      	ldr	r3, [pc, #412]	@ (8000e18 <PID_outer+0x234>)
 8000c7c:	edd3 7a00 	vldr	s15, [r3]
 8000c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c88:	dd07      	ble.n	8000c9a <PID_outer+0xb6>
    pid_x_integ1 = -pid->x_i1_limit;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000c90:	eef1 7a67 	vneg.f32	s15, s15
 8000c94:	4b60      	ldr	r3, [pc, #384]	@ (8000e18 <PID_outer+0x234>)
 8000c96:	edc3 7a00 	vstr	s15, [r3]
  pid->x_s1 =  pid->x_kp1*error + pid->x_ki1*pid_x_integ1;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ca0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	edd3 6a02 	vldr	s13, [r3, #8]
 8000cae:	4b5a      	ldr	r3, [pc, #360]	@ (8000e18 <PID_outer+0x234>)
 8000cb0:	edd3 7a00 	vldr	s15, [r3]
 8000cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

  // y-axis PID
  error = euler_rc->thy - euler_ahrs->thy;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd2:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_y_integ1 += error*pid->ts;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	ed93 7a00 	vldr	s14, [r3]
 8000cdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8000e1c <PID_outer+0x238>)
 8000ce6:	edd3 7a00 	vldr	s15, [r3]
 8000cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cee:	4b4b      	ldr	r3, [pc, #300]	@ (8000e1c <PID_outer+0x238>)
 8000cf0:	edc3 7a00 	vstr	s15, [r3]
  if(pid_y_integ1 > pid->y_i1_limit)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8000cfa:	4b48      	ldr	r3, [pc, #288]	@ (8000e1c <PID_outer+0x238>)
 8000cfc:	edd3 7a00 	vldr	s15, [r3]
 8000d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d08:	d504      	bpl.n	8000d14 <PID_outer+0x130>
    pid_y_integ1 = pid->y_i1_limit;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	4a43      	ldr	r2, [pc, #268]	@ (8000e1c <PID_outer+0x238>)
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e014      	b.n	8000d3e <PID_outer+0x15a>
  else if(pid_y_integ1 < -pid->y_i1_limit)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000d1a:	eeb1 7a67 	vneg.f32	s14, s15
 8000d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e1c <PID_outer+0x238>)
 8000d20:	edd3 7a00 	vldr	s15, [r3]
 8000d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	dd07      	ble.n	8000d3e <PID_outer+0x15a>
    pid_y_integ1 = -pid->y_i1_limit;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000d34:	eef1 7a67 	vneg.f32	s15, s15
 8000d38:	4b38      	ldr	r3, [pc, #224]	@ (8000e1c <PID_outer+0x238>)
 8000d3a:	edc3 7a00 	vstr	s15, [r3]
  pid->y_s1 =  pid->y_kp1*error + pid->y_ki1*pid_y_integ1;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	ed93 7a06 	vldr	s14, [r3, #24]
 8000d44:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	edd3 6a07 	vldr	s13, [r3, #28]
 8000d52:	4b32      	ldr	r3, [pc, #200]	@ (8000e1c <PID_outer+0x238>)
 8000d54:	edd3 7a00 	vldr	s15, [r3]
 8000d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

  // z-axis PID
  error = euler_rc->thz - euler_ahrs->thz;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d76:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_z_integ1 += error*pid->ts;
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	ed93 7a00 	vldr	s14, [r3]
 8000d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d88:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <PID_outer+0x23c>)
 8000d8a:	edd3 7a00 	vldr	s15, [r3]
 8000d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d92:	4b23      	ldr	r3, [pc, #140]	@ (8000e20 <PID_outer+0x23c>)
 8000d94:	edc3 7a00 	vstr	s15, [r3]
  if(pid_z_integ1 > pid->z_i1_limit)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000d9e:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <PID_outer+0x23c>)
 8000da0:	edd3 7a00 	vldr	s15, [r3]
 8000da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dac:	d504      	bpl.n	8000db8 <PID_outer+0x1d4>
    pid_z_integ1 = pid->z_i1_limit;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000db2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e20 <PID_outer+0x23c>)
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e014      	b.n	8000de2 <PID_outer+0x1fe>
  else if(pid_z_integ1 < -pid->z_i1_limit)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8000dbe:	eeb1 7a67 	vneg.f32	s14, s15
 8000dc2:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <PID_outer+0x23c>)
 8000dc4:	edd3 7a00 	vldr	s15, [r3]
 8000dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd0:	dd07      	ble.n	8000de2 <PID_outer+0x1fe>
    pid_z_integ1 = -pid->z_i1_limit;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8000dd8:	eef1 7a67 	vneg.f32	s15, s15
 8000ddc:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <PID_outer+0x23c>)
 8000dde:	edc3 7a00 	vstr	s15, [r3]
  pid->z_s1 =  pid->z_kp1*error + pid->z_ki1*pid_z_integ1;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8000de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <PID_outer+0x23c>)
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2400009c 	.word	0x2400009c
 8000e1c:	240000a0 	.word	0x240000a0
 8000e20:	240000a4 	.word	0x240000a4

08000e24 <PID_inner>:

void PID_inner(Euler *euler_rc, Gyro *gyro_rad, Attitude *ahrs, Dual_PID_Control *pid, uint16_t motor_pwm[], Radio *rc_comm)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	603b      	str	r3, [r7, #0]
  float error, deriv;

  if(rc_comm->THR<MIN_THR)
 8000e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e34:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e38:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	d50b      	bpl.n	8000e5e <PID_inner+0x3a>
  {
    pid_x_integ2 = 0;
 8000e46:	4bba      	ldr	r3, [pc, #744]	@ (8001130 <PID_inner+0x30c>)
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
    pid_y_integ2 = 0;
 8000e4e:	4bb9      	ldr	r3, [pc, #740]	@ (8001134 <PID_inner+0x310>)
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
    pid_z_integ2 = 0;
 8000e56:	4bb8      	ldr	r3, [pc, #736]	@ (8001138 <PID_inner+0x314>)
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
  }
  
  dt_recip = 1/pid->ts;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	ed93 7a00 	vldr	s14, [r3]
 8000e64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e6c:	4bb3      	ldr	r3, [pc, #716]	@ (800113c <PID_inner+0x318>)
 8000e6e:	edc3 7a00 	vstr	s15, [r3]

  // X Axis
  error = pid->x_s1 - gyro_rad->gx;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e82:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_x_integ2 += error*pid->ts;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	ed93 7a00 	vldr	s14, [r3]
 8000e8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e94:	4ba6      	ldr	r3, [pc, #664]	@ (8001130 <PID_inner+0x30c>)
 8000e96:	edd3 7a00 	vldr	s15, [r3]
 8000e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e9e:	4ba4      	ldr	r3, [pc, #656]	@ (8001130 <PID_inner+0x30c>)
 8000ea0:	edc3 7a00 	vstr	s15, [r3]
  if(pid_x_integ2 > pid->x_i2_limit)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8000eaa:	4ba1      	ldr	r3, [pc, #644]	@ (8001130 <PID_inner+0x30c>)
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb8:	d504      	bpl.n	8000ec4 <PID_inner+0xa0>
    pid_x_integ2 = pid->x_i2_limit;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	4a9c      	ldr	r2, [pc, #624]	@ (8001130 <PID_inner+0x30c>)
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e014      	b.n	8000eee <PID_inner+0xca>
  else if(pid_x_integ2 < -pid->x_i2_limit)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000eca:	eeb1 7a67 	vneg.f32	s14, s15
 8000ece:	4b98      	ldr	r3, [pc, #608]	@ (8001130 <PID_inner+0x30c>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	dd07      	ble.n	8000eee <PID_inner+0xca>
    pid_x_integ2 = -pid->x_i2_limit;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8000ee4:	eef1 7a67 	vneg.f32	s15, s15
 8000ee8:	4b91      	ldr	r3, [pc, #580]	@ (8001130 <PID_inner+0x30c>)
 8000eea:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_x_pre_error2)*dt_recip;
 8000eee:	4b94      	ldr	r3, [pc, #592]	@ (8001140 <PID_inner+0x31c>)
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ef8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000efc:	4b8f      	ldr	r3, [pc, #572]	@ (800113c <PID_inner+0x318>)
 8000efe:	edd3 7a00 	vldr	s15, [r3]
 8000f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f06:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_x_pre_error2 = error;
 8000f0a:	4a8d      	ldr	r2, [pc, #564]	@ (8001140 <PID_inner+0x31c>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	6013      	str	r3, [r2, #0]
  deriv = pid_x_pre_deriv + (deriv - pid_x_pre_deriv)*D_FILTER_COFF;
 8000f10:	4b8c      	ldr	r3, [pc, #560]	@ (8001144 <PID_inner+0x320>)
 8000f12:	edd3 7a00 	vldr	s15, [r3]
 8000f16:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1e:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001148 <PID_inner+0x324>
 8000f22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f26:	4b87      	ldr	r3, [pc, #540]	@ (8001144 <PID_inner+0x320>)
 8000f28:	edd3 7a00 	vldr	s15, [r3]
 8000f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f30:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_x_pre_deriv = deriv;
 8000f34:	4a83      	ldr	r2, [pc, #524]	@ (8001144 <PID_inner+0x320>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6013      	str	r3, [r2, #0]
  pid->x_s2 = pid->x_kp2*error + pid->x_ki2*pid_x_integ2 + pid->x_kd2*deriv;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f4e:	4b78      	ldr	r3, [pc, #480]	@ (8001130 <PID_inner+0x30c>)
 8000f50:	edd3 7a00 	vldr	s15, [r3]
 8000f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f62:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
  
  if(pid->x_s2 > MAX_ADJ_AMOUNT)  pid->x_s2 = MAX_ADJ_AMOUNT;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8000f7a:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 800114c <PID_inner+0x328>
 8000f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	dd02      	ble.n	8000f8e <PID_inner+0x16a>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	4a71      	ldr	r2, [pc, #452]	@ (8001150 <PID_inner+0x32c>)
 8000f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
  if(pid->x_s2 < -MAX_ADJ_AMOUNT)  pid->x_s2 = -MAX_ADJ_AMOUNT;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8000f94:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001154 <PID_inner+0x330>
 8000f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	d502      	bpl.n	8000fa8 <PID_inner+0x184>
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	4a6c      	ldr	r2, [pc, #432]	@ (8001158 <PID_inner+0x334>)
 8000fa6:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Y Axis
  error = pid->y_s1 - gyro_rad->gy;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb8:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_y_integ2 += error*pid->ts;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fca:	4b5a      	ldr	r3, [pc, #360]	@ (8001134 <PID_inner+0x310>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd4:	4b57      	ldr	r3, [pc, #348]	@ (8001134 <PID_inner+0x310>)
 8000fd6:	edc3 7a00 	vstr	s15, [r3]
  if(pid_y_integ2 > pid->y_i2_limit)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000fe0:	4b54      	ldr	r3, [pc, #336]	@ (8001134 <PID_inner+0x310>)
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	d504      	bpl.n	8000ffa <PID_inner+0x1d6>
    pid_y_integ2 = pid->y_i2_limit;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8001134 <PID_inner+0x310>)
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e014      	b.n	8001024 <PID_inner+0x200>
  else if(pid_y_integ2 < -pid->y_i2_limit)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001000:	eeb1 7a67 	vneg.f32	s14, s15
 8001004:	4b4b      	ldr	r3, [pc, #300]	@ (8001134 <PID_inner+0x310>)
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	dd07      	ble.n	8001024 <PID_inner+0x200>
    pid_y_integ2 = -pid->y_i2_limit;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800101a:	eef1 7a67 	vneg.f32	s15, s15
 800101e:	4b45      	ldr	r3, [pc, #276]	@ (8001134 <PID_inner+0x310>)
 8001020:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_y_pre_error2)*dt_recip;
 8001024:	4b4d      	ldr	r3, [pc, #308]	@ (800115c <PID_inner+0x338>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ed97 7a05 	vldr	s14, [r7, #20]
 800102e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001032:	4b42      	ldr	r3, [pc, #264]	@ (800113c <PID_inner+0x318>)
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_y_pre_error2 = error;
 8001040:	4a46      	ldr	r2, [pc, #280]	@ (800115c <PID_inner+0x338>)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	6013      	str	r3, [r2, #0]
  deriv = pid_y_pre_deriv + (deriv - pid_y_pre_deriv)*D_FILTER_COFF;
 8001046:	4b46      	ldr	r3, [pc, #280]	@ (8001160 <PID_inner+0x33c>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001054:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001148 <PID_inner+0x324>
 8001058:	ee27 7a87 	vmul.f32	s14, s15, s14
 800105c:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <PID_inner+0x33c>)
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001066:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_y_pre_deriv = deriv;
 800106a:	4a3d      	ldr	r2, [pc, #244]	@ (8001160 <PID_inner+0x33c>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	6013      	str	r3, [r2, #0]
  pid->y_s2 = pid->y_kp2*error + pid->y_ki2*pid_y_integ2 + pid->y_kd2*deriv;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	ed93 7a08 	vldr	s14, [r3, #32]
 8001076:	edd7 7a05 	vldr	s15, [r7, #20]
 800107a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001084:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <PID_inner+0x310>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8001098:	edd7 7a04 	vldr	s15, [r7, #16]
 800109c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

  if(pid->y_s2 > MAX_ADJ_AMOUNT)  pid->y_s2 = MAX_ADJ_AMOUNT;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80010b0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800114c <PID_inner+0x328>
 80010b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	dd02      	ble.n	80010c4 <PID_inner+0x2a0>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	4a23      	ldr	r2, [pc, #140]	@ (8001150 <PID_inner+0x32c>)
 80010c2:	665a      	str	r2, [r3, #100]	@ 0x64
  if(pid->y_s2 < -MAX_ADJ_AMOUNT)  pid->y_s2 = -MAX_ADJ_AMOUNT;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80010ca:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001154 <PID_inner+0x330>
 80010ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	d502      	bpl.n	80010de <PID_inner+0x2ba>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	4a1f      	ldr	r2, [pc, #124]	@ (8001158 <PID_inner+0x334>)
 80010dc:	665a      	str	r2, [r3, #100]	@ 0x64

  // Z Axis
  error = pid->z_s1 - gyro_rad->gz;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	edc7 7a05 	vstr	s15, [r7, #20]
  pid_z_integ2 += error*pid->ts;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	ed93 7a00 	vldr	s14, [r3]
 80010f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <PID_inner+0x314>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800110a:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <PID_inner+0x314>)
 800110c:	edc3 7a00 	vstr	s15, [r3]
  if(pid_z_integ2 > pid->z_i2_limit)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <PID_inner+0x314>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	d51e      	bpl.n	8001164 <PID_inner+0x340>
    pid_z_integ2 = pid->z_i2_limit;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112a:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <PID_inner+0x314>)
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e02e      	b.n	800118e <PID_inner+0x36a>
 8001130:	240000a8 	.word	0x240000a8
 8001134:	240000ac 	.word	0x240000ac
 8001138:	240000b0 	.word	0x240000b0
 800113c:	240000cc 	.word	0x240000cc
 8001140:	240000b4 	.word	0x240000b4
 8001144:	240000c0 	.word	0x240000c0
 8001148:	3ccccccd 	.word	0x3ccccccd
 800114c:	44480000 	.word	0x44480000
 8001150:	44480000 	.word	0x44480000
 8001154:	c4480000 	.word	0xc4480000
 8001158:	c4480000 	.word	0xc4480000
 800115c:	240000b8 	.word	0x240000b8
 8001160:	240000c4 	.word	0x240000c4
  else if(pid_z_integ2 < -pid->z_i2_limit)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800116a:	eeb1 7a67 	vneg.f32	s14, s15
 800116e:	4b7b      	ldr	r3, [pc, #492]	@ (800135c <PID_inner+0x538>)
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	dd07      	ble.n	800118e <PID_inner+0x36a>
    pid_z_integ2 = -pid->z_i2_limit;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001184:	eef1 7a67 	vneg.f32	s15, s15
 8001188:	4b74      	ldr	r3, [pc, #464]	@ (800135c <PID_inner+0x538>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
  deriv = (error - pid_z_pre_error2)*dt_recip;
 800118e:	4b74      	ldr	r3, [pc, #464]	@ (8001360 <PID_inner+0x53c>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ed97 7a05 	vldr	s14, [r7, #20]
 8001198:	ee37 7a67 	vsub.f32	s14, s14, s15
 800119c:	4b71      	ldr	r3, [pc, #452]	@ (8001364 <PID_inner+0x540>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a6:	edc7 7a04 	vstr	s15, [r7, #16]
  pid_z_pre_error2 = error;
 80011aa:	4a6d      	ldr	r2, [pc, #436]	@ (8001360 <PID_inner+0x53c>)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	6013      	str	r3, [r2, #0]
  pid->z_s2 = pid->z_kp2*error + pid->z_ki2*pid_z_integ2 + pid->z_kd2*deriv;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80011b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80011c4:	4b65      	ldr	r3, [pc, #404]	@ (800135c <PID_inner+0x538>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80011d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c

  if(pid->z_s2 > MAX_ADJ_AMOUNT_YAW)  pid->z_s2 = MAX_ADJ_AMOUNT_YAW;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80011f0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001368 <PID_inner+0x544>
 80011f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	dd02      	ble.n	8001204 <PID_inner+0x3e0>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	4a5a      	ldr	r2, [pc, #360]	@ (800136c <PID_inner+0x548>)
 8001202:	66da      	str	r2, [r3, #108]	@ 0x6c
  if(pid->z_s2 < -MAX_ADJ_AMOUNT_YAW)  pid->z_s2 = -MAX_ADJ_AMOUNT_YAW;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 800120a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001370 <PID_inner+0x54c>
 800120e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001216:	d502      	bpl.n	800121e <PID_inner+0x3fa>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4a56      	ldr	r2, [pc, #344]	@ (8001374 <PID_inner+0x550>)
 800121c:	66da      	str	r2, [r3, #108]	@ 0x6c

  motor_thr = 0.28f*rc_comm->THR + 750.0f;
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	edd3 7a02 	vldr	s15, [r3, #8]
 8001224:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001378 <PID_inner+0x554>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800137c <PID_inner+0x558>
 8001230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001238:	ee17 3a90 	vmov	r3, s15
 800123c:	b21a      	sxth	r2, r3
 800123e:	4b50      	ldr	r3, [pc, #320]	@ (8001380 <PID_inner+0x55c>)
 8001240:	801a      	strh	r2, [r3, #0]

  motor_pwm[0] = motor_thr - pid->x_s2 - pid->y_s2 + pid->z_s2 + MOTOR_OFF1;
 8001242:	4b4f      	ldr	r3, [pc, #316]	@ (8001380 <PID_inner+0x55c>)
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001256:	ee37 7a67 	vsub.f32	s14, s14, s15
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8001260:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 800126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001384 <PID_inner+0x560>
 8001272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127a:	ee17 3a90 	vmov	r3, s15
 800127e:	b29a      	uxth	r2, r3
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	801a      	strh	r2, [r3, #0]
  motor_pwm[1] = motor_thr + pid->x_s2 - pid->y_s2 - pid->z_s2 + MOTOR_OFF2;
 8001284:	4b3e      	ldr	r3, [pc, #248]	@ (8001380 <PID_inner+0x55c>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	ee07 3a90 	vmov	s15, r3
 800128e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80012a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80012ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001384 <PID_inner+0x560>
 80012b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	3302      	adds	r3, #2
 80012bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c0:	ee17 2a90 	vmov	r2, s15
 80012c4:	b292      	uxth	r2, r2
 80012c6:	801a      	strh	r2, [r3, #0]
  motor_pwm[2] = motor_thr + pid->x_s2 + pid->y_s2 + pid->z_s2 + MOTOR_OFF3;
 80012c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <PID_inner+0x55c>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80012dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80012e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80012f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f4:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001384 <PID_inner+0x560>
 80012f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	3304      	adds	r3, #4
 8001300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001304:	ee17 2a90 	vmov	r2, s15
 8001308:	b292      	uxth	r2, r2
 800130a:	801a      	strh	r2, [r3, #0]
  motor_pwm[3] = motor_thr - pid->x_s2 + pid->y_s2 - pid->z_s2 + MOTOR_OFF4;
 800130c:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <PID_inner+0x55c>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001320:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800132a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 8001334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001338:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001384 <PID_inner+0x560>
 800133c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	3306      	adds	r3, #6
 8001344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001348:	ee17 2a90 	vmov	r2, s15
 800134c:	b292      	uxth	r2, r2
 800134e:	801a      	strh	r2, [r3, #0]

}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	240000b0 	.word	0x240000b0
 8001360:	240000bc 	.word	0x240000bc
 8001364:	240000cc 	.word	0x240000cc
 8001368:	44480000 	.word	0x44480000
 800136c:	44480000 	.word	0x44480000
 8001370:	c4480000 	.word	0xc4480000
 8001374:	c4480000 	.word	0xc4480000
 8001378:	3e8f5c29 	.word	0x3e8f5c29
 800137c:	443b8000 	.word	0x443b8000
 8001380:	240000c8 	.word	0x240000c8
 8001384:	00000000 	.word	0x00000000

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	rc_ref_euler.thx =  0;
 800138e:	4b8d      	ldr	r3, [pc, #564]	@ (80015c4 <main+0x23c>)
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
	rc_ref_euler.thy =  0;
 8001396:	4b8b      	ldr	r3, [pc, #556]	@ (80015c4 <main+0x23c>)
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
	rc_ref_euler.thz =  0;
 800139e:	4b89      	ldr	r3, [pc, #548]	@ (80015c4 <main+0x23c>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]

	rc_comm_temp.AIL = 0;
 80013a6:	4b88      	ldr	r3, [pc, #544]	@ (80015c8 <main+0x240>)
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
	rc_comm_temp.ELE = 0;
 80013ae:	4b86      	ldr	r3, [pc, #536]	@ (80015c8 <main+0x240>)
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
	rc_comm_temp.RUD = 0;
 80013b6:	4b84      	ldr	r3, [pc, #528]	@ (80015c8 <main+0x240>)
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
	rc_comm_temp.THR = 0;
 80013be:	4b82      	ldr	r3, [pc, #520]	@ (80015c8 <main+0x240>)
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]

	rc_ref_euler.thz = attitude_euler.thz;
 80013c6:	4b81      	ldr	r3, [pc, #516]	@ (80015cc <main+0x244>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	4a7e      	ldr	r2, [pc, #504]	@ (80015c4 <main+0x23c>)
 80013cc:	6093      	str	r3, [r2, #8]

	acc_attitude.AXIS_X = 0;
 80013ce:	4b80      	ldr	r3, [pc, #512]	@ (80015d0 <main+0x248>)
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	acc_attitude.AXIS_Y = 0;
 80013d6:	4b7e      	ldr	r3, [pc, #504]	@ (80015d0 <main+0x248>)
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
	acc_attitude.AXIS_Z = 0;
 80013de:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <main+0x248>)
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
	gyro_attitude.AXIS_X = 0;
 80013e6:	4b7b      	ldr	r3, [pc, #492]	@ (80015d4 <main+0x24c>)
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
	gyro_attitude.AXIS_Y = 0;
 80013ee:	4b79      	ldr	r3, [pc, #484]	@ (80015d4 <main+0x24c>)
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
	gyro_attitude.AXIS_Z = 0;
 80013f6:	4b77      	ldr	r3, [pc, #476]	@ (80015d4 <main+0x24c>)
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fe:	f001 fd7b 	bl	8002ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001402:	f000 f8ff 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001406:	f000 fd5d 	bl	8001ec4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800140a:	f000 fd07 	bl	8001e1c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800140e:	f000 fd51 	bl	8001eb4 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8001412:	f000 f9af 	bl	8001774 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001416:	f000 fa7f 	bl	8001918 <MX_TIM3_Init>
  MX_TIM4_Init();
 800141a:	f000 fb1d 	bl	8001a58 <MX_TIM4_Init>
  MX_TIM5_Init();
 800141e:	f000 fbbb 	bl	8001b98 <MX_TIM5_Init>
  MX_TIM15_Init();
 8001422:	f000 fc59 	bl	8001cd8 <MX_TIM15_Init>
  MX_I2C4_Init();
 8001426:	f000 f965 	bl	80016f4 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800142a:	2100      	movs	r1, #0
 800142c:	486a      	ldr	r0, [pc, #424]	@ (80015d8 <main+0x250>)
 800142e:	f005 f8b3 	bl	8006598 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001432:	2104      	movs	r1, #4
 8001434:	4868      	ldr	r0, [pc, #416]	@ (80015d8 <main+0x250>)
 8001436:	f005 f8af 	bl	8006598 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800143a:	2108      	movs	r1, #8
 800143c:	4866      	ldr	r0, [pc, #408]	@ (80015d8 <main+0x250>)
 800143e:	f005 f8ab 	bl	8006598 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001442:	210c      	movs	r1, #12
 8001444:	4864      	ldr	r0, [pc, #400]	@ (80015d8 <main+0x250>)
 8001446:	f005 f8a7 	bl	8006598 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  set_motor_pwm_zero(motor_pwm);
 800144a:	4864      	ldr	r0, [pc, #400]	@ (80015dc <main+0x254>)
 800144c:	f001 f8a4 	bl	8002598 <set_motor_pwm_zero>
  PID_init(&pid);
 8001450:	4863      	ldr	r0, [pc, #396]	@ (80015e0 <main+0x258>)
 8001452:	f7ff fb4f 	bl	8000af4 <PID_init>

    /* USER CODE BEGIN 3 */


	  	  // Reactivate Radio interrupts
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8001456:	2104      	movs	r1, #4
 8001458:	4862      	ldr	r0, [pc, #392]	@ (80015e4 <main+0x25c>)
 800145a:	f005 fa0d 	bl	8006878 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800145e:	2100      	movs	r1, #0
 8001460:	4860      	ldr	r0, [pc, #384]	@ (80015e4 <main+0x25c>)
 8001462:	f005 fb7f 	bl	8006b64 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8001466:	2104      	movs	r1, #4
 8001468:	485f      	ldr	r0, [pc, #380]	@ (80015e8 <main+0x260>)
 800146a:	f005 fa05 	bl	8006878 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800146e:	2100      	movs	r1, #0
 8001470:	485d      	ldr	r0, [pc, #372]	@ (80015e8 <main+0x260>)
 8001472:	f005 fb77 	bl	8006b64 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8001476:	2104      	movs	r1, #4
 8001478:	485c      	ldr	r0, [pc, #368]	@ (80015ec <main+0x264>)
 800147a:	f005 f9fd 	bl	8006878 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800147e:	2100      	movs	r1, #0
 8001480:	485a      	ldr	r0, [pc, #360]	@ (80015ec <main+0x264>)
 8001482:	f005 fb6f 	bl	8006b64 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8001486:	2104      	movs	r1, #4
 8001488:	4859      	ldr	r0, [pc, #356]	@ (80015f0 <main+0x268>)
 800148a:	f005 f9f5 	bl	8006878 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800148e:	2100      	movs	r1, #0
 8001490:	4857      	ldr	r0, [pc, #348]	@ (80015f0 <main+0x268>)
 8001492:	f005 fb67 	bl	8006b64 <HAL_TIM_IC_Start_IT>

		  // Target euler angles: PID reference
		  get_target_euler(&rc_ref_euler, &rc_comm_temp);
 8001496:	494c      	ldr	r1, [pc, #304]	@ (80015c8 <main+0x240>)
 8001498:	484a      	ldr	r0, [pc, #296]	@ (80015c4 <main+0x23c>)
 800149a:	f001 f939 	bl	8002710 <get_target_euler>

		  /*
		   * Placeholder for Acc + Gyro :
		   */

		  acc_attitude.AXIS_X = 0;
 800149e:	4b4c      	ldr	r3, [pc, #304]	@ (80015d0 <main+0x248>)
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
		  acc_attitude.AXIS_Y = 0;
 80014a6:	4b4a      	ldr	r3, [pc, #296]	@ (80015d0 <main+0x248>)
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
		  acc_attitude.AXIS_Z = 0;
 80014ae:	4b48      	ldr	r3, [pc, #288]	@ (80015d0 <main+0x248>)
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
		  gyro_attitude.AXIS_X = 0;
 80014b6:	4b47      	ldr	r3, [pc, #284]	@ (80015d4 <main+0x24c>)
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
		  gyro_attitude.AXIS_Y = 0;
 80014be:	4b45      	ldr	r3, [pc, #276]	@ (80015d4 <main+0x24c>)
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
		  gyro_attitude.AXIS_Z = 0;
 80014c6:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <main+0x24c>)
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
		   * MOVING AVERAGE + FILTER
		   */


		  // Update attitude
		  attitude_fusion(&acc_attitude, &gyro_attitude, &attitude, &rc_comm_temp);
 80014ce:	4b3e      	ldr	r3, [pc, #248]	@ (80015c8 <main+0x240>)
 80014d0:	4a48      	ldr	r2, [pc, #288]	@ (80015f4 <main+0x26c>)
 80014d2:	4940      	ldr	r1, [pc, #256]	@ (80015d4 <main+0x24c>)
 80014d4:	483e      	ldr	r0, [pc, #248]	@ (80015d0 <main+0x248>)
 80014d6:	f7ff f883 	bl	80005e0 <attitude_fusion>
		  quat_to_euler(&attitude.q, &attitude_euler);
 80014da:	493c      	ldr	r1, [pc, #240]	@ (80015cc <main+0x244>)
 80014dc:	4845      	ldr	r0, [pc, #276]	@ (80015f4 <main+0x26c>)
 80014de:	f001 f874 	bl	80025ca <quat_to_euler>

		  if(rc_comm_temp.THR < MIN_THR)
 80014e2:	4b39      	ldr	r3, [pc, #228]	@ (80015c8 <main+0x240>)
 80014e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80014e8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80014ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	d507      	bpl.n	8001506 <main+0x17e>
		  {
			rc_ref_euler.thz = 0;
 80014f6:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <main+0x23c>)
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
			attitude_euler.thz = 0;
 80014fe:	4b33      	ldr	r3, [pc, #204]	@ (80015cc <main+0x244>)
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
		  }


		  PID_outer(&rc_ref_euler, &attitude_euler, &attitude, &pid, &rc_comm_temp);
 8001506:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <main+0x240>)
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4b35      	ldr	r3, [pc, #212]	@ (80015e0 <main+0x258>)
 800150c:	4a39      	ldr	r2, [pc, #228]	@ (80015f4 <main+0x26c>)
 800150e:	492f      	ldr	r1, [pc, #188]	@ (80015cc <main+0x244>)
 8001510:	482c      	ldr	r0, [pc, #176]	@ (80015c4 <main+0x23c>)
 8001512:	f7ff fb67 	bl	8000be4 <PID_outer>

		  gyro_rad.gx = ((float)gyro_attitude.AXIS_X)*((float)COE_MDPS_TO_RADPS);
 8001516:	4b2f      	ldr	r3, [pc, #188]	@ (80015d4 <main+0x24c>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80015f8 <main+0x270>
 8001520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001524:	4b35      	ldr	r3, [pc, #212]	@ (80015fc <main+0x274>)
 8001526:	edc3 7a00 	vstr	s15, [r3]
		  gyro_rad.gy = ((float)gyro_attitude.AXIS_Y)*((float)COE_MDPS_TO_RADPS);
 800152a:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <main+0x24c>)
 800152c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001530:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80015f8 <main+0x270>
 8001534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001538:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <main+0x274>)
 800153a:	edc3 7a01 	vstr	s15, [r3, #4]
		  gyro_rad.gz = ((float)gyro_attitude.AXIS_Z)*((float)COE_MDPS_TO_RADPS);
 800153e:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <main+0x24c>)
 8001540:	edd3 7a02 	vldr	s15, [r3, #8]
 8001544:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80015f8 <main+0x270>
 8001548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154c:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <main+0x274>)
 800154e:	edc3 7a02 	vstr	s15, [r3, #8]

		  attitude_euler.thz += gyro_rad.gz*PID_SAMPLING_TIME;
 8001552:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <main+0x244>)
 8001554:	ed93 7a02 	vldr	s14, [r3, #8]
 8001558:	4b28      	ldr	r3, [pc, #160]	@ (80015fc <main+0x274>)
 800155a:	edd3 7a02 	vldr	s15, [r3, #8]
 800155e:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001600 <main+0x278>
 8001562:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <main+0x244>)
 800156c:	edc3 7a02 	vstr	s15, [r3, #8]
		  /**
		   * !! PID_SAMPLING_TIME -> Precise PID sampling time: computed or defined by interrupt
		   */

		  if(rc_comm_temp.THR < MIN_THR)
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <main+0x240>)
 8001572:	edd3 7a02 	vldr	s15, [r3, #8]
 8001576:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800157a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d503      	bpl.n	800158c <main+0x204>
		  {
			  attitude_euler.thz = 0;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <main+0x244>)
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
		  }

		  PID_inner(&rc_ref_euler, &gyro_rad, &attitude, &pid, motor_pwm, &rc_comm_temp);
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <main+0x240>)
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <main+0x254>)
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <main+0x258>)
 8001596:	4a17      	ldr	r2, [pc, #92]	@ (80015f4 <main+0x26c>)
 8001598:	4918      	ldr	r1, [pc, #96]	@ (80015fc <main+0x274>)
 800159a:	480a      	ldr	r0, [pc, #40]	@ (80015c4 <main+0x23c>)
 800159c:	f7ff fc42 	bl	8000e24 <PID_inner>

		  if(rc_comm_temp.THR < MIN_THR)
 80015a0:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <main+0x240>)
 80015a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015a6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80015aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	d502      	bpl.n	80015ba <main+0x232>
		  {
			  set_motor_pwm_zero(motor_pwm);
 80015b4:	4809      	ldr	r0, [pc, #36]	@ (80015dc <main+0x254>)
 80015b6:	f000 ffef 	bl	8002598 <set_motor_pwm_zero>
		  }

		  set_motor_pwm(motor_pwm);
 80015ba:	4808      	ldr	r0, [pc, #32]	@ (80015dc <main+0x254>)
 80015bc:	f000 ff72 	bl	80024a4 <set_motor_pwm>
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80015c0:	e749      	b.n	8001456 <main+0xce>
 80015c2:	bf00      	nop
 80015c4:	24000344 	.word	0x24000344
 80015c8:	24000334 	.word	0x24000334
 80015cc:	24000350 	.word	0x24000350
 80015d0:	240003f0 	.word	0x240003f0
 80015d4:	240003fc 	.word	0x240003fc
 80015d8:	24000124 	.word	0x24000124
 80015dc:	2400035c 	.word	0x2400035c
 80015e0:	24000380 	.word	0x24000380
 80015e4:	24000170 	.word	0x24000170
 80015e8:	240001bc 	.word	0x240001bc
 80015ec:	24000208 	.word	0x24000208
 80015f0:	24000254 	.word	0x24000254
 80015f4:	24000364 	.word	0x24000364
 80015f8:	379268a9 	.word	0x379268a9
 80015fc:	24000408 	.word	0x24000408
 8001600:	3aa3d70a 	.word	0x3aa3d70a

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b09c      	sub	sp, #112	@ 0x70
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160e:	224c      	movs	r2, #76	@ 0x4c
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f008 fa7e 	bl	8009b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2220      	movs	r2, #32
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f008 fa78 	bl	8009b14 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001624:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <SystemClock_Config+0xe8>)
 8001626:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800162a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800162e:	2004      	movs	r0, #4
 8001630:	f002 f902 	bl	8003838 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001634:	2300      	movs	r3, #0
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	4b2d      	ldr	r3, [pc, #180]	@ (80016f0 <SystemClock_Config+0xec>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a2c      	ldr	r2, [pc, #176]	@ (80016f0 <SystemClock_Config+0xec>)
 800163e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <SystemClock_Config+0xec>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001650:	bf00      	nop
 8001652:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <SystemClock_Config+0xec>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800165a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800165e:	d1f8      	bne.n	8001652 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001660:	2321      	movs	r3, #33	@ 0x21
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001668:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800166a:	2301      	movs	r3, #1
 800166c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001672:	2302      	movs	r3, #2
 8001674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 800167a:	2325      	movs	r3, #37	@ 0x25
 800167c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800167e:	2302      	movs	r3, #2
 8001680:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001682:	2304      	movs	r3, #4
 8001684:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001686:	2302      	movs	r3, #2
 8001688:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800168a:	230c      	movs	r3, #12
 800168c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800168e:	2300      	movs	r3, #0
 8001690:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001696:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169c:	4618      	mov	r0, r3
 800169e:	f002 f925 	bl	80038ec <HAL_RCC_OscConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80016a8:	f000 feba 	bl	8002420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ac:	233f      	movs	r3, #63	@ 0x3f
 80016ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b0:	2303      	movs	r3, #3
 80016b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016bc:	2340      	movs	r3, #64	@ 0x40
 80016be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016c0:	2340      	movs	r3, #64	@ 0x40
 80016c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016ca:	2340      	movs	r3, #64	@ 0x40
 80016cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2103      	movs	r1, #3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 fd3c 	bl	8004150 <HAL_RCC_ClockConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80016de:	f000 fe9f 	bl	8002420 <Error_Handler>
  }
}
 80016e2:	bf00      	nop
 80016e4:	3770      	adds	r7, #112	@ 0x70
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	58024400 	.word	0x58024400
 80016f0:	58024800 	.word	0x58024800

080016f4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <MX_I2C4_Init+0x74>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	@ (800176c <MX_I2C4_Init+0x78>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00702787;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_I2C4_Init+0x74>)
 8001700:	4a1b      	ldr	r2, [pc, #108]	@ (8001770 <MX_I2C4_Init+0x7c>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <MX_I2C4_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_I2C4_Init+0x74>)
 800170c:	2201      	movs	r2, #1
 800170e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_I2C4_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001716:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <MX_I2C4_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <MX_I2C4_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_I2C4_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <MX_I2C4_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800172e:	480e      	ldr	r0, [pc, #56]	@ (8001768 <MX_I2C4_Init+0x74>)
 8001730:	f001 ff4e 	bl	80035d0 <HAL_I2C_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800173a:	f000 fe71 	bl	8002420 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800173e:	2100      	movs	r1, #0
 8001740:	4809      	ldr	r0, [pc, #36]	@ (8001768 <MX_I2C4_Init+0x74>)
 8001742:	f001 ffe1 	bl	8003708 <HAL_I2CEx_ConfigAnalogFilter>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800174c:	f000 fe68 	bl	8002420 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001750:	2100      	movs	r1, #0
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_I2C4_Init+0x74>)
 8001754:	f002 f823 	bl	800379e <HAL_I2CEx_ConfigDigitalFilter>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800175e:	f000 fe5f 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	240000d0 	.word	0x240000d0
 800176c:	58001c00 	.word	0x58001c00
 8001770:	00702787 	.word	0x00702787

08001774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b09c      	sub	sp, #112	@ 0x70
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001794:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2234      	movs	r2, #52	@ 0x34
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f008 f9b0 	bl	8009b14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017b4:	4b56      	ldr	r3, [pc, #344]	@ (8001910 <MX_TIM1_Init+0x19c>)
 80017b6:	4a57      	ldr	r2, [pc, #348]	@ (8001914 <MX_TIM1_Init+0x1a0>)
 80017b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 80017ba:	4b55      	ldr	r3, [pc, #340]	@ (8001910 <MX_TIM1_Init+0x19c>)
 80017bc:	f240 227f 	movw	r2, #639	@ 0x27f
 80017c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b53      	ldr	r3, [pc, #332]	@ (8001910 <MX_TIM1_Init+0x19c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80017c8:	4b51      	ldr	r3, [pc, #324]	@ (8001910 <MX_TIM1_Init+0x19c>)
 80017ca:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80017ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001910 <MX_TIM1_Init+0x19c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001910 <MX_TIM1_Init+0x19c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001910 <MX_TIM1_Init+0x19c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017e2:	484b      	ldr	r0, [pc, #300]	@ (8001910 <MX_TIM1_Init+0x19c>)
 80017e4:	f004 fe20 	bl	8006428 <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80017ee:	f000 fe17 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017f8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017fc:	4619      	mov	r1, r3
 80017fe:	4844      	ldr	r0, [pc, #272]	@ (8001910 <MX_TIM1_Init+0x19c>)
 8001800:	f005 fe76 	bl	80074f0 <HAL_TIM_ConfigClockSource>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800180a:	f000 fe09 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800180e:	4840      	ldr	r0, [pc, #256]	@ (8001910 <MX_TIM1_Init+0x19c>)
 8001810:	f004 fe61 	bl	80064d6 <HAL_TIM_PWM_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800181a:	f000 fe01 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800182a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800182e:	4619      	mov	r1, r3
 8001830:	4837      	ldr	r0, [pc, #220]	@ (8001910 <MX_TIM1_Init+0x19c>)
 8001832:	f006 fe57 	bl	80084e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800183c:	f000 fdf0 	bl	8002420 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001840:	2360      	movs	r3, #96	@ 0x60
 8001842:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001848:	2300      	movs	r3, #0
 800184a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800184c:	2300      	movs	r3, #0
 800184e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800185c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001860:	2200      	movs	r2, #0
 8001862:	4619      	mov	r1, r3
 8001864:	482a      	ldr	r0, [pc, #168]	@ (8001910 <MX_TIM1_Init+0x19c>)
 8001866:	f005 fd2f 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001870:	f000 fdd6 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001874:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001878:	2204      	movs	r2, #4
 800187a:	4619      	mov	r1, r3
 800187c:	4824      	ldr	r0, [pc, #144]	@ (8001910 <MX_TIM1_Init+0x19c>)
 800187e:	f005 fd23 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001888:	f000 fdca 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800188c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001890:	2208      	movs	r2, #8
 8001892:	4619      	mov	r1, r3
 8001894:	481e      	ldr	r0, [pc, #120]	@ (8001910 <MX_TIM1_Init+0x19c>)
 8001896:	f005 fd17 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80018a0:	f000 fdbe 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018a8:	220c      	movs	r2, #12
 80018aa:	4619      	mov	r1, r3
 80018ac:	4818      	ldr	r0, [pc, #96]	@ (8001910 <MX_TIM1_Init+0x19c>)
 80018ae:	f005 fd0b 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80018b8:	f000 fdb2 	bl	8002420 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	@ (8001910 <MX_TIM1_Init+0x19c>)
 80018f2:	f006 fe85 	bl	8008600 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80018fc:	f000 fd90 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001900:	4803      	ldr	r0, [pc, #12]	@ (8001910 <MX_TIM1_Init+0x19c>)
 8001902:	f001 f959 	bl	8002bb8 <HAL_TIM_MspPostInit>

}
 8001906:	bf00      	nop
 8001908:	3770      	adds	r7, #112	@ 0x70
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	24000124 	.word	0x24000124
 8001914:	40010000 	.word	0x40010000

08001918 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b090      	sub	sp, #64	@ 0x40
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194a:	463b      	mov	r3, r7
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001954:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <MX_TIM3_Init+0x138>)
 8001956:	4a3f      	ldr	r2, [pc, #252]	@ (8001a54 <MX_TIM3_Init+0x13c>)
 8001958:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 800195a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a50 <MX_TIM3_Init+0x138>)
 800195c:	f240 227f 	movw	r2, #639	@ 0x27f
 8001960:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <MX_TIM3_Init+0x138>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001968:	4b39      	ldr	r3, [pc, #228]	@ (8001a50 <MX_TIM3_Init+0x138>)
 800196a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800196e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001970:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <MX_TIM3_Init+0x138>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001976:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <MX_TIM3_Init+0x138>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800197c:	4834      	ldr	r0, [pc, #208]	@ (8001a50 <MX_TIM3_Init+0x138>)
 800197e:	f004 fd53 	bl	8006428 <HAL_TIM_Base_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001988:	f000 fd4a 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001990:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001992:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001996:	4619      	mov	r1, r3
 8001998:	482d      	ldr	r0, [pc, #180]	@ (8001a50 <MX_TIM3_Init+0x138>)
 800199a:	f005 fda9 	bl	80074f0 <HAL_TIM_ConfigClockSource>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80019a4:	f000 fd3c 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80019a8:	4829      	ldr	r0, [pc, #164]	@ (8001a50 <MX_TIM3_Init+0x138>)
 80019aa:	f004 ff03 	bl	80067b4 <HAL_TIM_IC_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80019b4:	f000 fd34 	bl	8002420 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80019b8:	2304      	movs	r3, #4
 80019ba:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80019bc:	2350      	movs	r3, #80	@ 0x50
 80019be:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	481f      	ldr	r0, [pc, #124]	@ (8001a50 <MX_TIM3_Init+0x138>)
 80019d4:	f005 fe84 	bl	80076e0 <HAL_TIM_SlaveConfigSynchro>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80019de:	f000 fd1f 	bl	8002420 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019e6:	2301      	movs	r3, #1
 80019e8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	2200      	movs	r2, #0
 80019f8:	4619      	mov	r1, r3
 80019fa:	4815      	ldr	r0, [pc, #84]	@ (8001a50 <MX_TIM3_Init+0x138>)
 80019fc:	f005 fbc7 	bl	800718e <HAL_TIM_IC_ConfigChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8001a06:	f000 fd0b 	bl	8002420 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2204      	movs	r2, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480d      	ldr	r0, [pc, #52]	@ (8001a50 <MX_TIM3_Init+0x138>)
 8001a1c:	f005 fbb7 	bl	800718e <HAL_TIM_IC_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8001a26:	f000 fcfb 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a32:	463b      	mov	r3, r7
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	@ (8001a50 <MX_TIM3_Init+0x138>)
 8001a38:	f006 fd54 	bl	80084e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 8001a42:	f000 fced 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	3740      	adds	r7, #64	@ 0x40
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	24000170 	.word	0x24000170
 8001a54:	40000400 	.word	0x40000400

08001a58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b090      	sub	sp, #64	@ 0x40
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a94:	4b3e      	ldr	r3, [pc, #248]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001a96:	4a3f      	ldr	r2, [pc, #252]	@ (8001b94 <MX_TIM4_Init+0x13c>)
 8001a98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001a9c:	f240 227f 	movw	r2, #639	@ 0x27f
 8001aa0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001aa8:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001aaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b37      	ldr	r3, [pc, #220]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001abc:	4834      	ldr	r0, [pc, #208]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001abe:	f004 fcb3 	bl	8006428 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001ac8:	f000 fcaa 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	482d      	ldr	r0, [pc, #180]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001ada:	f005 fd09 	bl	80074f0 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001ae4:	f000 fc9c 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001ae8:	4829      	ldr	r0, [pc, #164]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001aea:	f004 fe63 	bl	80067b4 <HAL_TIM_IC_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001af4:	f000 fc94 	bl	8002420 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001af8:	2304      	movs	r3, #4
 8001afa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001afc:	2350      	movs	r3, #80	@ 0x50
 8001afe:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	481f      	ldr	r0, [pc, #124]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001b14:	f005 fde4 	bl	80076e0 <HAL_TIM_SlaveConfigSynchro>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001b1e:	f000 fc7f 	bl	8002420 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b26:	2301      	movs	r3, #1
 8001b28:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	2200      	movs	r2, #0
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4815      	ldr	r0, [pc, #84]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001b3c:	f005 fb27 	bl	800718e <HAL_TIM_IC_ConfigChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8001b46:	f000 fc6b 	bl	8002420 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	2204      	movs	r2, #4
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001b5c:	f005 fb17 	bl	800718e <HAL_TIM_IC_ConfigChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8001b66:	f000 fc5b 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b72:	463b      	mov	r3, r7
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <MX_TIM4_Init+0x138>)
 8001b78:	f006 fcb4 	bl	80084e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 8001b82:	f000 fc4d 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	3740      	adds	r7, #64	@ 0x40
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	240001bc 	.word	0x240001bc
 8001b94:	40000800 	.word	0x40000800

08001b98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b090      	sub	sp, #64	@ 0x40
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bca:	463b      	mov	r3, r7
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001bd6:	4a3f      	ldr	r2, [pc, #252]	@ (8001cd4 <MX_TIM5_Init+0x13c>)
 8001bd8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 639;
 8001bda:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001bdc:	f240 227f 	movw	r2, #639	@ 0x27f
 8001be0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001be8:	4b39      	ldr	r3, [pc, #228]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001bea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf0:	4b37      	ldr	r3, [pc, #220]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b36      	ldr	r3, [pc, #216]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bfc:	4834      	ldr	r0, [pc, #208]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001bfe:	f004 fc13 	bl	8006428 <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001c08:	f000 fc0a 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c16:	4619      	mov	r1, r3
 8001c18:	482d      	ldr	r0, [pc, #180]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001c1a:	f005 fc69 	bl	80074f0 <HAL_TIM_ConfigClockSource>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001c24:	f000 fbfc 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001c28:	4829      	ldr	r0, [pc, #164]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001c2a:	f004 fdc3 	bl	80067b4 <HAL_TIM_IC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8001c34:	f000 fbf4 	bl	8002420 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c3c:	2350      	movs	r3, #80	@ 0x50
 8001c3e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	481f      	ldr	r0, [pc, #124]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001c54:	f005 fd44 	bl	80076e0 <HAL_TIM_SlaveConfigSynchro>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8001c5e:	f000 fbdf 	bl	8002420 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c66:	2301      	movs	r3, #1
 8001c68:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	2200      	movs	r2, #0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4815      	ldr	r0, [pc, #84]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001c7c:	f005 fa87 	bl	800718e <HAL_TIM_IC_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8001c86:	f000 fbcb 	bl	8002420 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	2204      	movs	r2, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480d      	ldr	r0, [pc, #52]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001c9c:	f005 fa77 	bl	800718e <HAL_TIM_IC_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 8001ca6:	f000 fbbb 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	@ (8001cd0 <MX_TIM5_Init+0x138>)
 8001cb8:	f006 fc14 	bl	80084e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM5_Init+0x12e>
  {
    Error_Handler();
 8001cc2:	f000 fbad 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	3740      	adds	r7, #64	@ 0x40
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	24000208 	.word	0x24000208
 8001cd4:	40000c00 	.word	0x40000c00

08001cd8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b090      	sub	sp, #64	@ 0x40
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d14:	4b3f      	ldr	r3, [pc, #252]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d16:	4a40      	ldr	r2, [pc, #256]	@ (8001e18 <MX_TIM15_Init+0x140>)
 8001d18:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d1c:	f240 227f 	movw	r2, #639	@ 0x27f
 8001d20:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b3c      	ldr	r3, [pc, #240]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001d28:	4b3a      	ldr	r3, [pc, #232]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d2e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d30:	4b38      	ldr	r3, [pc, #224]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d36:	4b37      	ldr	r3, [pc, #220]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3c:	4b35      	ldr	r3, [pc, #212]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001d42:	4834      	ldr	r0, [pc, #208]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d44:	f004 fb70 	bl	8006428 <HAL_TIM_Base_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8001d4e:	f000 fb67 	bl	8002420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d56:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001d58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	482d      	ldr	r0, [pc, #180]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d60:	f005 fbc6 	bl	80074f0 <HAL_TIM_ConfigClockSource>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 8001d6a:	f000 fb59 	bl	8002420 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001d6e:	4829      	ldr	r0, [pc, #164]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d70:	f004 fd20 	bl	80067b4 <HAL_TIM_IC_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8001d7a:	f000 fb51 	bl	8002420 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001d82:	2350      	movs	r3, #80	@ 0x50
 8001d84:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	4619      	mov	r1, r3
 8001d98:	481e      	ldr	r0, [pc, #120]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001d9a:	f005 fca1 	bl	80076e0 <HAL_TIM_SlaveConfigSynchro>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001da4:	f000 fb3c 	bl	8002420 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dac:	2301      	movs	r3, #1
 8001dae:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4814      	ldr	r0, [pc, #80]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001dc2:	f005 f9e4 	bl	800718e <HAL_TIM_IC_ConfigChannel>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001dcc:	f000 fb28 	bl	8002420 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	2204      	movs	r2, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	480c      	ldr	r0, [pc, #48]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001de2:	f005 f9d4 	bl	800718e <HAL_TIM_IC_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 8001dec:	f000 fb18 	bl	8002420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_TIM15_Init+0x13c>)
 8001dfe:	f006 fb71 	bl	80084e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 8001e08:	f000 fb0a 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3740      	adds	r7, #64	@ 0x40
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	24000254 	.word	0x24000254
 8001e18:	40014000 	.word	0x40014000

08001e1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e20:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e22:	4a23      	ldr	r2, [pc, #140]	@ (8001eb0 <MX_USART3_UART_Init+0x94>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e26:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b19      	ldr	r3, [pc, #100]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e52:	4b16      	ldr	r3, [pc, #88]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e64:	4811      	ldr	r0, [pc, #68]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e66:	f006 fc75 	bl	8008754 <HAL_UART_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001e70:	f000 fad6 	bl	8002420 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e74:	2100      	movs	r1, #0
 8001e76:	480d      	ldr	r0, [pc, #52]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e78:	f007 fd81 	bl	800997e <HAL_UARTEx_SetTxFifoThreshold>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001e82:	f000 facd 	bl	8002420 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e86:	2100      	movs	r1, #0
 8001e88:	4808      	ldr	r0, [pc, #32]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e8a:	f007 fdb6 	bl	80099fa <HAL_UARTEx_SetRxFifoThreshold>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001e94:	f000 fac4 	bl	8002420 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e98:	4804      	ldr	r0, [pc, #16]	@ (8001eac <MX_USART3_UART_Init+0x90>)
 8001e9a:	f007 fd37 	bl	800990c <HAL_UARTEx_DisableFifoMode>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ea4:	f000 fabc 	bl	8002420 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	240002a0 	.word	0x240002a0
 8001eb0:	40004800 	.word	0x40004800

08001eb4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08e      	sub	sp, #56	@ 0x38
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eda:	4b80      	ldr	r3, [pc, #512]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ee0:	4a7e      	ldr	r2, [pc, #504]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001eea:	4b7c      	ldr	r3, [pc, #496]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001eec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef8:	4b78      	ldr	r3, [pc, #480]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001efe:	4a77      	ldr	r2, [pc, #476]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f08:	4b74      	ldr	r3, [pc, #464]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f16:	4b71      	ldr	r3, [pc, #452]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f1c:	4a6f      	ldr	r2, [pc, #444]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f1e:	f043 0320 	orr.w	r3, r3, #32
 8001f22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f26:	4b6d      	ldr	r3, [pc, #436]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f34:	4b69      	ldr	r3, [pc, #420]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f3a:	4a68      	ldr	r2, [pc, #416]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f44:	4b65      	ldr	r3, [pc, #404]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b62      	ldr	r3, [pc, #392]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f58:	4a60      	ldr	r2, [pc, #384]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f62:	4b5e      	ldr	r3, [pc, #376]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f70:	4b5a      	ldr	r3, [pc, #360]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f76:	4a59      	ldr	r2, [pc, #356]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f80:	4b56      	ldr	r3, [pc, #344]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8e:	4b53      	ldr	r3, [pc, #332]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001f94:	4a51      	ldr	r2, [pc, #324]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001f96:	f043 0308 	orr.w	r3, r3, #8
 8001f9a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001fa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fac:	4b4b      	ldr	r3, [pc, #300]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001fae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fb8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001fbc:	4b47      	ldr	r3, [pc, #284]	@ (80020dc <MX_GPIO_Init+0x218>)
 8001fbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fd0:	4843      	ldr	r0, [pc, #268]	@ (80020e0 <MX_GPIO_Init+0x21c>)
 8001fd2:	f001 fae3 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001fdc:	4841      	ldr	r0, [pc, #260]	@ (80020e4 <MX_GPIO_Init+0x220>)
 8001fde:	f001 fadd 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4840      	ldr	r0, [pc, #256]	@ (80020e8 <MX_GPIO_Init+0x224>)
 8001fe8:	f001 fad8 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ffe:	4619      	mov	r1, r3
 8002000:	483a      	ldr	r0, [pc, #232]	@ (80020ec <MX_GPIO_Init+0x228>)
 8002002:	f001 f91b 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8002006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200c:	2301      	movs	r3, #1
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201c:	4619      	mov	r1, r3
 800201e:	4830      	ldr	r0, [pc, #192]	@ (80020e0 <MX_GPIO_Init+0x21c>)
 8002020:	f001 f90c 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8002024:	f244 0301 	movw	r3, #16385	@ 0x4001
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203a:	4619      	mov	r1, r3
 800203c:	4829      	ldr	r0, [pc, #164]	@ (80020e4 <MX_GPIO_Init+0x220>)
 800203e:	f001 f8fd 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8002042:	2380      	movs	r3, #128	@ 0x80
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002046:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	4826      	ldr	r0, [pc, #152]	@ (80020f0 <MX_GPIO_Init+0x22c>)
 8002058:	f001 f8f0 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800205c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002062:	2300      	movs	r3, #0
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800206a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800206e:	4619      	mov	r1, r3
 8002070:	4820      	ldr	r0, [pc, #128]	@ (80020f4 <MX_GPIO_Init+0x230>)
 8002072:	f001 f8e3 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8002076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207c:	2302      	movs	r3, #2
 800207e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002084:	2300      	movs	r3, #0
 8002086:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8002088:	230a      	movs	r3, #10
 800208a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800208c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002090:	4619      	mov	r1, r3
 8002092:	4818      	ldr	r0, [pc, #96]	@ (80020f4 <MX_GPIO_Init+0x230>)
 8002094:	f001 f8d2 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8002098:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ae:	4619      	mov	r1, r3
 80020b0:	4810      	ldr	r0, [pc, #64]	@ (80020f4 <MX_GPIO_Init+0x230>)
 80020b2:	f001 f8c3 	bl	800323c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020b6:	2302      	movs	r3, #2
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	4806      	ldr	r0, [pc, #24]	@ (80020e8 <MX_GPIO_Init+0x224>)
 80020ce:	f001 f8b5 	bl	800323c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020d2:	bf00      	nop
 80020d4:	3738      	adds	r7, #56	@ 0x38
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	58024400 	.word	0x58024400
 80020e0:	58021400 	.word	0x58021400
 80020e4:	58020400 	.word	0x58020400
 80020e8:	58021000 	.word	0x58021000
 80020ec:	58020800 	.word	0x58020800
 80020f0:	58021800 	.word	0x58021800
 80020f4:	58020000 	.word	0x58020000

080020f8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4ab2      	ldr	r2, [pc, #712]	@ (80023d0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d155      	bne.n	80021b6 <HAL_TIM_IC_CaptureCallback+0xbe>
    {

        cycle_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800210a:	2100      	movs	r1, #0
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f005 fb29 	bl	8007764 <HAL_TIM_ReadCapturedValue>
 8002112:	4603      	mov	r3, r0
 8002114:	4aaf      	ldr	r2, [pc, #700]	@ (80023d4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8002116:	6013      	str	r3, [r2, #0]
        period_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8002118:	2104      	movs	r1, #4
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f005 fb22 	bl	8007764 <HAL_TIM_ReadCapturedValue>
 8002120:	4602      	mov	r2, r0
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	461a      	mov	r2, r3
 800212c:	4baa      	ldr	r3, [pc, #680]	@ (80023d8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800212e:	601a      	str	r2, [r3, #0]
    	if (cycle_rc_0 > 1990 && cycle_rc_0 < 2010 && period_rc_0 > 0 && cycle_rc_0 > period_rc_0 ) {
 8002130:	4ba8      	ldr	r3, [pc, #672]	@ (80023d4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8002138:	4293      	cmp	r3, r2
 800213a:	d93c      	bls.n	80021b6 <HAL_TIM_IC_CaptureCallback+0xbe>
 800213c:	4ba5      	ldr	r3, [pc, #660]	@ (80023d4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8002144:	4293      	cmp	r3, r2
 8002146:	d836      	bhi.n	80021b6 <HAL_TIM_IC_CaptureCallback+0xbe>
 8002148:	4ba3      	ldr	r3, [pc, #652]	@ (80023d8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d032      	beq.n	80021b6 <HAL_TIM_IC_CaptureCallback+0xbe>
 8002150:	4ba0      	ldr	r3, [pc, #640]	@ (80023d4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4ba0      	ldr	r3, [pc, #640]	@ (80023d8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d92c      	bls.n	80021b6 <HAL_TIM_IC_CaptureCallback+0xbe>
    		channel_mag_0 = (float) period_rc_0 / (float) cycle_rc_0;
 800215c:	4b9e      	ldr	r3, [pc, #632]	@ (80023d8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002168:	4b9a      	ldr	r3, [pc, #616]	@ (80023d4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002178:	4b98      	ldr	r3, [pc, #608]	@ (80023dc <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800217a:	edc3 7a00 	vstr	s15, [r3]
    		rc_comm_temp.AIL = (channel_mag_0 - 0.5) * 2 * RC_FULLSCALE;
 800217e:	4b97      	ldr	r3, [pc, #604]	@ (80023dc <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002188:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800218c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002190:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002194:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 80023c8 <HAL_TIM_IC_CaptureCallback+0x2d0>
 8002198:	ee27 7b06 	vmul.f64	d7, d7, d6
 800219c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021a0:	4b8f      	ldr	r3, [pc, #572]	@ (80023e0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80021a2:	edc3 7a00 	vstr	s15, [r3]
    		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80021a6:	2100      	movs	r1, #0
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f004 fe2b 	bl	8006e04 <HAL_TIM_IC_Stop_IT>
    		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80021ae:	2104      	movs	r1, #4
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f004 fc65 	bl	8006a80 <HAL_TIM_IC_Stop>

    	}
    }

    if (htim->Instance == TIM4)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a8a      	ldr	r2, [pc, #552]	@ (80023e4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d155      	bne.n	800226c <HAL_TIM_IC_CaptureCallback+0x174>
    {

            cycle_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80021c0:	2100      	movs	r1, #0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f005 face 	bl	8007764 <HAL_TIM_ReadCapturedValue>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4a87      	ldr	r2, [pc, #540]	@ (80023e8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80021cc:	6013      	str	r3, [r2, #0]
            period_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80021ce:	2104      	movs	r1, #4
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f005 fac7 	bl	8007764 <HAL_TIM_ReadCapturedValue>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b82      	ldr	r3, [pc, #520]	@ (80023ec <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80021e4:	601a      	str	r2, [r3, #0]
        	if (cycle_rc_1 > 1990 && cycle_rc_1 < 2010 && period_rc_1 > 0 && cycle_rc_1 > period_rc_1) {
 80021e6:	4b80      	ldr	r3, [pc, #512]	@ (80023e8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d93c      	bls.n	800226c <HAL_TIM_IC_CaptureCallback+0x174>
 80021f2:	4b7d      	ldr	r3, [pc, #500]	@ (80023e8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d836      	bhi.n	800226c <HAL_TIM_IC_CaptureCallback+0x174>
 80021fe:	4b7b      	ldr	r3, [pc, #492]	@ (80023ec <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d032      	beq.n	800226c <HAL_TIM_IC_CaptureCallback+0x174>
 8002206:	4b78      	ldr	r3, [pc, #480]	@ (80023e8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b78      	ldr	r3, [pc, #480]	@ (80023ec <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d92c      	bls.n	800226c <HAL_TIM_IC_CaptureCallback+0x174>
        		channel_mag_1 = (float) period_rc_1 / (float) cycle_rc_1;
 8002212:	4b76      	ldr	r3, [pc, #472]	@ (80023ec <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800221e:	4b72      	ldr	r3, [pc, #456]	@ (80023e8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800222a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800222e:	4b70      	ldr	r3, [pc, #448]	@ (80023f0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8002230:	edc3 7a00 	vstr	s15, [r3]
        		rc_comm_temp.ELE = (channel_mag_1 - 0.5) * 2 * RC_FULLSCALE;
 8002234:	4b6e      	ldr	r3, [pc, #440]	@ (80023f0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800223e:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8002242:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002246:	ee37 7b07 	vadd.f64	d7, d7, d7
 800224a:	ed9f 6b5f 	vldr	d6, [pc, #380]	@ 80023c8 <HAL_TIM_IC_CaptureCallback+0x2d0>
 800224e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002252:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002256:	4b62      	ldr	r3, [pc, #392]	@ (80023e0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8002258:	edc3 7a01 	vstr	s15, [r3, #4]
        		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800225c:	2100      	movs	r1, #0
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f004 fdd0 	bl	8006e04 <HAL_TIM_IC_Stop_IT>
        		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8002264:	2104      	movs	r1, #4
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f004 fc0a 	bl	8006a80 <HAL_TIM_IC_Stop>

        	}
    }

    if (htim->Instance == TIM5)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a60      	ldr	r2, [pc, #384]	@ (80023f4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d155      	bne.n	8002322 <HAL_TIM_IC_CaptureCallback+0x22a>
            {

                cycle_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002276:	2100      	movs	r1, #0
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f005 fa73 	bl	8007764 <HAL_TIM_ReadCapturedValue>
 800227e:	4603      	mov	r3, r0
 8002280:	4a5d      	ldr	r2, [pc, #372]	@ (80023f8 <HAL_TIM_IC_CaptureCallback+0x300>)
 8002282:	6013      	str	r3, [r2, #0]
                period_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8002284:	2104      	movs	r1, #4
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f005 fa6c 	bl	8007764 <HAL_TIM_ReadCapturedValue>
 800228c:	4602      	mov	r2, r0
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	461a      	mov	r2, r3
 8002298:	4b58      	ldr	r3, [pc, #352]	@ (80023fc <HAL_TIM_IC_CaptureCallback+0x304>)
 800229a:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_2 > 1990 && cycle_rc_2 < 2010 && period_rc_2 > 0 && cycle_rc_2 > period_rc_2) {
 800229c:	4b56      	ldr	r3, [pc, #344]	@ (80023f8 <HAL_TIM_IC_CaptureCallback+0x300>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d93c      	bls.n	8002322 <HAL_TIM_IC_CaptureCallback+0x22a>
 80022a8:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_TIM_IC_CaptureCallback+0x300>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d836      	bhi.n	8002322 <HAL_TIM_IC_CaptureCallback+0x22a>
 80022b4:	4b51      	ldr	r3, [pc, #324]	@ (80023fc <HAL_TIM_IC_CaptureCallback+0x304>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d032      	beq.n	8002322 <HAL_TIM_IC_CaptureCallback+0x22a>
 80022bc:	4b4e      	ldr	r3, [pc, #312]	@ (80023f8 <HAL_TIM_IC_CaptureCallback+0x300>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b4e      	ldr	r3, [pc, #312]	@ (80023fc <HAL_TIM_IC_CaptureCallback+0x304>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d92c      	bls.n	8002322 <HAL_TIM_IC_CaptureCallback+0x22a>
            		channel_mag_2 = (float) period_rc_2 / (float) cycle_rc_2;
 80022c8:	4b4c      	ldr	r3, [pc, #304]	@ (80023fc <HAL_TIM_IC_CaptureCallback+0x304>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d4:	4b48      	ldr	r3, [pc, #288]	@ (80023f8 <HAL_TIM_IC_CaptureCallback+0x300>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	ee07 3a90 	vmov	s15, r3
 80022dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e4:	4b46      	ldr	r3, [pc, #280]	@ (8002400 <HAL_TIM_IC_CaptureCallback+0x308>)
 80022e6:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp.RUD = (channel_mag_2 - 0.5) * 2 * RC_FULLSCALE;
 80022ea:	4b45      	ldr	r3, [pc, #276]	@ (8002400 <HAL_TIM_IC_CaptureCallback+0x308>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022f4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80022f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002300:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80023c8 <HAL_TIM_IC_CaptureCallback+0x2d0>
 8002304:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002308:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800230c:	4b34      	ldr	r3, [pc, #208]	@ (80023e0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 800230e:	edc3 7a03 	vstr	s15, [r3, #12]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8002312:	2100      	movs	r1, #0
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f004 fd75 	bl	8006e04 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 800231a:	2104      	movs	r1, #4
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f004 fbaf 	bl	8006a80 <HAL_TIM_IC_Stop>

            	}
            }
    if (htim->Instance == TIM15)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a37      	ldr	r2, [pc, #220]	@ (8002404 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d175      	bne.n	8002418 <HAL_TIM_IC_CaptureCallback+0x320>
            {

                cycle_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800232c:	2100      	movs	r1, #0
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f005 fa18 	bl	8007764 <HAL_TIM_ReadCapturedValue>
 8002334:	4603      	mov	r3, r0
 8002336:	4a34      	ldr	r2, [pc, #208]	@ (8002408 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002338:	6013      	str	r3, [r2, #0]
                period_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 800233a:	2104      	movs	r1, #4
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f005 fa11 	bl	8007764 <HAL_TIM_ReadCapturedValue>
 8002342:	4602      	mov	r2, r0
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	461a      	mov	r2, r3
 800234e:	4b2f      	ldr	r3, [pc, #188]	@ (800240c <HAL_TIM_IC_CaptureCallback+0x314>)
 8002350:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_3 > 1990 && cycle_rc_3 < 2010 && period_rc_3 > 0 && cycle_rc_3 > period_rc_3) {
 8002352:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800235a:	4293      	cmp	r3, r2
 800235c:	d95c      	bls.n	8002418 <HAL_TIM_IC_CaptureCallback+0x320>
 800235e:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8002366:	4293      	cmp	r3, r2
 8002368:	d856      	bhi.n	8002418 <HAL_TIM_IC_CaptureCallback+0x320>
 800236a:	4b28      	ldr	r3, [pc, #160]	@ (800240c <HAL_TIM_IC_CaptureCallback+0x314>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d052      	beq.n	8002418 <HAL_TIM_IC_CaptureCallback+0x320>
 8002372:	4b25      	ldr	r3, [pc, #148]	@ (8002408 <HAL_TIM_IC_CaptureCallback+0x310>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4b25      	ldr	r3, [pc, #148]	@ (800240c <HAL_TIM_IC_CaptureCallback+0x314>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d94c      	bls.n	8002418 <HAL_TIM_IC_CaptureCallback+0x320>
            		channel_mag_3 = (float) period_rc_3 / (float) cycle_rc_3;
 800237e:	4b23      	ldr	r3, [pc, #140]	@ (800240c <HAL_TIM_IC_CaptureCallback+0x314>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800238a:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <HAL_TIM_IC_CaptureCallback+0x310>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239a:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <HAL_TIM_IC_CaptureCallback+0x318>)
 800239c:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp.THR =  channel_mag_3 * RC_FULLSCALE;
 80023a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <HAL_TIM_IC_CaptureCallback+0x318>)
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002414 <HAL_TIM_IC_CaptureCallback+0x31c>
 80023aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ae:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80023b0:	edc3 7a02 	vstr	s15, [r3, #8]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80023b4:	2100      	movs	r1, #0
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f004 fd24 	bl	8006e04 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80023bc:	2104      	movs	r1, #4
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f004 fb5e 	bl	8006a80 <HAL_TIM_IC_Stop>
 80023c4:	e028      	b.n	8002418 <HAL_TIM_IC_CaptureCallback+0x320>
 80023c6:	bf00      	nop
 80023c8:	00000000 	.word	0x00000000
 80023cc:	408f4000 	.word	0x408f4000
 80023d0:	40000400 	.word	0x40000400
 80023d4:	24000414 	.word	0x24000414
 80023d8:	24000424 	.word	0x24000424
 80023dc:	24000434 	.word	0x24000434
 80023e0:	24000334 	.word	0x24000334
 80023e4:	40000800 	.word	0x40000800
 80023e8:	24000418 	.word	0x24000418
 80023ec:	24000428 	.word	0x24000428
 80023f0:	24000438 	.word	0x24000438
 80023f4:	40000c00 	.word	0x40000c00
 80023f8:	2400041c 	.word	0x2400041c
 80023fc:	2400042c 	.word	0x2400042c
 8002400:	2400043c 	.word	0x2400043c
 8002404:	40014000 	.word	0x40014000
 8002408:	24000420 	.word	0x24000420
 800240c:	24000430 	.word	0x24000430
 8002410:	24000440 	.word	0x24000440
 8002414:	447a0000 	.word	0x447a0000

            	}
            }


}
 8002418:	bf00      	nop
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002424:	b672      	cpsid	i
}
 8002426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <Error_Handler+0x8>

0800242c <fast_inv_sqrt>:
}

// Fast inverse square-root

float fast_inv_sqrt(float x) 
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002436:	edd7 7a01 	vldr	s15, [r7, #4]
 800243a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800243e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002442:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	105a      	asrs	r2, r3, #1
 8002456:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <fast_inv_sqrt+0x74>)
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002464:	ed97 7a04 	vldr	s14, [r7, #16]
 8002468:	edd7 7a05 	vldr	s15, [r7, #20]
 800246c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002470:	edd7 7a04 	vldr	s15, [r7, #16]
 8002474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002478:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800247c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002480:	edd7 7a04 	vldr	s15, [r7, #16]
 8002484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002488:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	ee07 3a90 	vmov	s15, r3
}
 8002492:	eeb0 0a67 	vmov.f32	s0, s15
 8002496:	371c      	adds	r7, #28
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	5f3759df 	.word	0x5f3759df

080024a4 <set_motor_pwm>:


extern TIM_HandleTypeDef htim1;

void set_motor_pwm(uint16_t motor_pwm[])
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if (motor_pwm[0] >= MOTOR_MAX_PWM)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80024b4:	d305      	bcc.n	80024c2 <set_motor_pwm+0x1e>
	  htim1.Instance->CCR1 = MOTOR_MAX_PWM;
 80024b6:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <set_motor_pwm+0xf0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80024be:	635a      	str	r2, [r3, #52]	@ 0x34
 80024c0:	e00d      	b.n	80024de <set_motor_pwm+0x3a>
  else if (motor_pwm[0] <= MOTOR_MIN_PWM)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <set_motor_pwm+0x30>
	  htim1.Instance->CCR1 = MOTOR_MIN_PWM;
 80024ca:	4b32      	ldr	r3, [pc, #200]	@ (8002594 <set_motor_pwm+0xf0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80024d2:	e004      	b.n	80024de <set_motor_pwm+0x3a>
  else
	  htim1.Instance->CCR1 = motor_pwm[0] ;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <set_motor_pwm+0xf0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	635a      	str	r2, [r3, #52]	@ 0x34
  
  if (motor_pwm[1] >= MOTOR_MAX_PWM)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3302      	adds	r3, #2
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80024e8:	d305      	bcc.n	80024f6 <set_motor_pwm+0x52>
	  htim1.Instance->CCR2 = MOTOR_MAX_PWM;
 80024ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <set_motor_pwm+0xf0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80024f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80024f4:	e00f      	b.n	8002516 <set_motor_pwm+0x72>
  else if (motor_pwm[1] <= MOTOR_MIN_PWM)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3302      	adds	r3, #2
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <set_motor_pwm+0x66>
	  htim1.Instance->CCR2 = MOTOR_MIN_PWM;
 8002500:	4b24      	ldr	r3, [pc, #144]	@ (8002594 <set_motor_pwm+0xf0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	639a      	str	r2, [r3, #56]	@ 0x38
 8002508:	e005      	b.n	8002516 <set_motor_pwm+0x72>
  else
	  htim1.Instance->CCR2 =  motor_pwm[1] ;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3302      	adds	r3, #2
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <set_motor_pwm+0xf0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	639a      	str	r2, [r3, #56]	@ 0x38
  
  if (motor_pwm[2] >= MOTOR_MAX_PWM)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002520:	d305      	bcc.n	800252e <set_motor_pwm+0x8a>
	  htim1.Instance->CCR3 = MOTOR_MAX_PWM;
 8002522:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <set_motor_pwm+0xf0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800252a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800252c:	e00f      	b.n	800254e <set_motor_pwm+0xaa>
  else if (motor_pwm[2] <= MOTOR_MIN_PWM)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d104      	bne.n	8002542 <set_motor_pwm+0x9e>
	  htim1.Instance->CCR3 = MOTOR_MIN_PWM;
 8002538:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <set_motor_pwm+0xf0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2200      	movs	r2, #0
 800253e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002540:	e005      	b.n	800254e <set_motor_pwm+0xaa>
  else
	  htim1.Instance->CCR3 =  motor_pwm[2] ;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <set_motor_pwm+0xf0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  if (motor_pwm[3] >= MOTOR_MAX_PWM)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3306      	adds	r3, #6
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002558:	d305      	bcc.n	8002566 <set_motor_pwm+0xc2>
	  htim1.Instance->CCR4 = MOTOR_MAX_PWM;
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <set_motor_pwm+0xf0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM)
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM;
  else
	  htim1.Instance->CCR4 = motor_pwm[3] ;
}
 8002564:	e00f      	b.n	8002586 <set_motor_pwm+0xe2>
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3306      	adds	r3, #6
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d104      	bne.n	800257a <set_motor_pwm+0xd6>
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM;
 8002570:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <set_motor_pwm+0xf0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002578:	e005      	b.n	8002586 <set_motor_pwm+0xe2>
	  htim1.Instance->CCR4 = motor_pwm[3] ;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3306      	adds	r3, #6
 800257e:	881a      	ldrh	r2, [r3, #0]
 8002580:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <set_motor_pwm+0xf0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	24000124 	.word	0x24000124

08002598 <set_motor_pwm_zero>:


void set_motor_pwm_zero(uint16_t motor_pwm[])
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  motor_pwm[0] = 0;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	801a      	strh	r2, [r3, #0]
  motor_pwm[1] = 0;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3302      	adds	r3, #2
 80025aa:	2200      	movs	r2, #0
 80025ac:	801a      	strh	r2, [r3, #0]
  motor_pwm[2] = 0;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2200      	movs	r2, #0
 80025b4:	801a      	strh	r2, [r3, #0]
  motor_pwm[3] = 0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3306      	adds	r3, #6
 80025ba:	2200      	movs	r2, #0
 80025bc:	801a      	strh	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <quat_to_euler>:

/*
 * Convert Quaternion to Euler Angle
 */
void quat_to_euler(Quaternion *qr, Euler *ea)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b08e      	sub	sp, #56	@ 0x38
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
    float q0q0, q1q1, q2q2, q3q3;
    float dq0, dq1, dq2;
    float dq1q3, dq0q2/*, dq1q2*/;
    float dq0q1, dq2q3/*, dq0q3*/;

    q0q0 = qr->q0*qr->q0;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	ed93 7a00 	vldr	s14, [r3]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	edd3 7a00 	vldr	s15, [r3]
 80025e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    q1q1 = qr->q1*qr->q1;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80025f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q2q2 = qr->q2*qr->q2;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	edd3 7a02 	vldr	s15, [r3, #8]
 8002608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    q3q3 = qr->q3*qr->q3;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	ed93 7a03 	vldr	s14, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	edd3 7a03 	vldr	s15, [r3, #12]
 800261c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002620:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    dq0 = 2*qr->q0;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800262e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    dq1 = 2*qr->q1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	edd3 7a01 	vldr	s15, [r3, #4]
 8002638:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800263c:	edc7 7a08 	vstr	s15, [r7, #32]
    dq2 = 2*qr->q2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	edd3 7a02 	vldr	s15, [r3, #8]
 8002646:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800264a:	edc7 7a07 	vstr	s15, [r7, #28]
    //dq1q2 = dq1 * qr->q2;
    dq1q3 = dq1 * qr->q3;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	edd3 7a03 	vldr	s15, [r3, #12]
 8002654:	ed97 7a08 	vldr	s14, [r7, #32]
 8002658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265c:	edc7 7a06 	vstr	s15, [r7, #24]
    dq0q2 = dq0 * qr->q2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edd3 7a02 	vldr	s15, [r3, #8]
 8002666:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800266a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266e:	edc7 7a05 	vstr	s15, [r7, #20]
    //dq0q3 = dq0 * qr->q3;
    dq0q1 = dq0 * qr->q1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	edd3 7a01 	vldr	s15, [r3, #4]
 8002678:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800267c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002680:	edc7 7a04 	vstr	s15, [r7, #16]
    dq2q3 = dq2 * qr->q3;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	edd3 7a03 	vldr	s15, [r3, #12]
 800268a:	ed97 7a07 	vldr	s14, [r7, #28]
 800268e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002692:	edc7 7a03 	vstr	s15, [r7, #12]

    ea->thx = atan2(dq0q1+dq2q3, q0q0+q3q3-q1q1-q2q2);
 8002696:	ed97 7a04 	vldr	s14, [r7, #16]
 800269a:	edd7 7a03 	vldr	s15, [r7, #12]
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026a6:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 80026aa:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80026ae:	ee36 6a26 	vadd.f32	s12, s12, s13
 80026b2:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80026b6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80026ba:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80026be:	ee76 6a66 	vsub.f32	s13, s12, s13
 80026c2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80026c6:	eeb0 1b46 	vmov.f64	d1, d6
 80026ca:	eeb0 0b47 	vmov.f64	d0, d7
 80026ce:	f007 fa7f 	bl	8009bd0 <atan2>
 80026d2:	eeb0 7b40 	vmov.f64	d7, d0
 80026d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	edc3 7a00 	vstr	s15, [r3]
    ea->thy = asin(dq0q2-dq1q3);
 80026e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80026e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80026e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026f0:	eeb0 0b47 	vmov.f64	d0, d7
 80026f4:	f007 fa40 	bl	8009b78 <asin>
 80026f8:	eeb0 7b40 	vmov.f64	d7, d0
 80026fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	edc3 7a01 	vstr	s15, [r3, #4]
    
    

    //ea->thz = atan2(dq1q2+dq0q3, q0q0+q1q1-q2q2-q3q3);

}
 8002706:	bf00      	nop
 8002708:	3738      	adds	r7, #56	@ 0x38
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <get_target_euler>:
const float max_yaw_rad = PI*YAW_MAX_DEG/180.0f;
int t1;


void get_target_euler(Euler *euler_rc, Radio *rc_comm)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
    t1 = rc_comm->ELE;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002724:	ee17 2a90 	vmov	r2, s15
 8002728:	4b49      	ldr	r3, [pc, #292]	@ (8002850 <get_target_euler+0x140>)
 800272a:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 800272c:	4b48      	ldr	r3, [pc, #288]	@ (8002850 <get_target_euler+0x140>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002734:	dd04      	ble.n	8002740 <get_target_euler+0x30>
        t1 = RC_FULLSCALE;
 8002736:	4b46      	ldr	r3, [pc, #280]	@ (8002850 <get_target_euler+0x140>)
 8002738:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e007      	b.n	8002750 <get_target_euler+0x40>
    else if (t1 < -RC_FULLSCALE)
 8002740:	4b43      	ldr	r3, [pc, #268]	@ (8002850 <get_target_euler+0x140>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8002748:	da02      	bge.n	8002750 <get_target_euler+0x40>
        t1 = - RC_FULLSCALE;
 800274a:	4b41      	ldr	r3, [pc, #260]	@ (8002850 <get_target_euler+0x140>)
 800274c:	4a41      	ldr	r2, [pc, #260]	@ (8002854 <get_target_euler+0x144>)
 800274e:	601a      	str	r2, [r3, #0]
    euler_rc->thx = -t1 * max_pitch_rad / RC_FULLSCALE;
 8002750:	4b3f      	ldr	r3, [pc, #252]	@ (8002850 <get_target_euler+0x140>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	425b      	negs	r3, r3
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800275e:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002858 <get_target_euler+0x148>
 8002762:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002766:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800285c <get_target_euler+0x14c>
 800276a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm->AIL;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800277e:	ee17 2a90 	vmov	r2, s15
 8002782:	4b33      	ldr	r3, [pc, #204]	@ (8002850 <get_target_euler+0x140>)
 8002784:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8002786:	4b32      	ldr	r3, [pc, #200]	@ (8002850 <get_target_euler+0x140>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800278e:	dd04      	ble.n	800279a <get_target_euler+0x8a>
        t1 = RC_FULLSCALE;
 8002790:	4b2f      	ldr	r3, [pc, #188]	@ (8002850 <get_target_euler+0x140>)
 8002792:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e007      	b.n	80027aa <get_target_euler+0x9a>
    else if (t1 < -RC_FULLSCALE)
 800279a:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <get_target_euler+0x140>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80027a2:	da02      	bge.n	80027aa <get_target_euler+0x9a>
        t1 = - RC_FULLSCALE;
 80027a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002850 <get_target_euler+0x140>)
 80027a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002854 <get_target_euler+0x144>)
 80027a8:	601a      	str	r2, [r3, #0]
    euler_rc->thy = -t1 * max_roll_rad / RC_FULLSCALE;
 80027aa:	4b29      	ldr	r3, [pc, #164]	@ (8002850 <get_target_euler+0x140>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	425b      	negs	r3, r3
 80027b0:	ee07 3a90 	vmov	s15, r3
 80027b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002858 <get_target_euler+0x148>
 80027bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027c0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800285c <get_target_euler+0x14c>
 80027c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	edc3 7a01 	vstr	s15, [r3, #4]

    t1 = rc_comm->RUD;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80027d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d8:	ee17 2a90 	vmov	r2, s15
 80027dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <get_target_euler+0x140>)
 80027de:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 80027e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <get_target_euler+0x140>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027e8:	dd04      	ble.n	80027f4 <get_target_euler+0xe4>
        t1 = RC_FULLSCALE;
 80027ea:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <get_target_euler+0x140>)
 80027ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e007      	b.n	8002804 <get_target_euler+0xf4>
    else if (t1 < -RC_FULLSCALE)
 80027f4:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <get_target_euler+0x140>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80027fc:	da02      	bge.n	8002804 <get_target_euler+0xf4>
        t1 = - RC_FULLSCALE;
 80027fe:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <get_target_euler+0x140>)
 8002800:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <get_target_euler+0x144>)
 8002802:	601a      	str	r2, [r3, #0]

    if(t1 > YAW_DEAD_THR)
 8002804:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <get_target_euler+0x140>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800280c:	dd0a      	ble.n	8002824 <get_target_euler+0x114>
    {
        euler_rc->thz = euler_rc->thz + max_yaw_rad;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	edd3 7a02 	vldr	s15, [r3, #8]
 8002814:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002860 <get_target_euler+0x150>
 8002818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    else if(t1 < -YAW_DEAD_THR)
    {
        euler_rc->thz = euler_rc->thz - max_yaw_rad;
    }
}
 8002822:	e00e      	b.n	8002842 <get_target_euler+0x132>
    else if(t1 < -YAW_DEAD_THR)
 8002824:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <get_target_euler+0x140>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 800282c:	da09      	bge.n	8002842 <get_target_euler+0x132>
        euler_rc->thz = euler_rc->thz - max_yaw_rad;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	edd3 7a02 	vldr	s15, [r3, #8]
 8002834:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002860 <get_target_euler+0x150>
 8002838:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	24000444 	.word	0x24000444
 8002854:	fffffc18 	.word	0xfffffc18
 8002858:	3f060a92 	.word	0x3f060a92
 800285c:	447a0000 	.word	0x447a0000
 8002860:	3cab92a6 	.word	0x3cab92a6

08002864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <HAL_MspInit+0x30>)
 800286c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002870:	4a08      	ldr	r2, [pc, #32]	@ (8002894 <HAL_MspInit+0x30>)
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <HAL_MspInit+0x30>)
 800287c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	58024400 	.word	0x58024400

08002898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b0ba      	sub	sp, #232	@ 0xe8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	22c0      	movs	r2, #192	@ 0xc0
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f007 f92b 	bl	8009b14 <memset>
  if(hi2c->Instance==I2C4)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a27      	ldr	r2, [pc, #156]	@ (8002960 <HAL_I2C_MspInit+0xc8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d146      	bne.n	8002956 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80028c8:	f04f 0210 	mov.w	r2, #16
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028da:	f107 0310 	add.w	r3, r7, #16
 80028de:	4618      	mov	r0, r3
 80028e0:	f001 ffc2 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80028ea:	f7ff fd99 	bl	8002420 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002964 <HAL_I2C_MspInit+0xcc>)
 80028f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002964 <HAL_I2C_MspInit+0xcc>)
 80028f6:	f043 0320 	orr.w	r3, r3, #32
 80028fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80028fe:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <HAL_I2C_MspInit+0xcc>)
 8002900:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800290c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002910:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002914:	2312      	movs	r3, #18
 8002916:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002926:	2304      	movs	r3, #4
 8002928:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800292c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002930:	4619      	mov	r1, r3
 8002932:	480d      	ldr	r0, [pc, #52]	@ (8002968 <HAL_I2C_MspInit+0xd0>)
 8002934:	f000 fc82 	bl	800323c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002938:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <HAL_I2C_MspInit+0xcc>)
 800293a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800293e:	4a09      	ldr	r2, [pc, #36]	@ (8002964 <HAL_I2C_MspInit+0xcc>)
 8002940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002944:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <HAL_I2C_MspInit+0xcc>)
 800294a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800294e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002956:	bf00      	nop
 8002958:	37e8      	adds	r7, #232	@ 0xe8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	58001c00 	.word	0x58001c00
 8002964:	58024400 	.word	0x58024400
 8002968:	58021400 	.word	0x58021400

0800296c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b090      	sub	sp, #64	@ 0x40
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a82      	ldr	r2, [pc, #520]	@ (8002b94 <HAL_TIM_Base_MspInit+0x228>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d10f      	bne.n	80029ae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800298e:	4b82      	ldr	r3, [pc, #520]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002990:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002994:	4a80      	ldr	r2, [pc, #512]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 800299e:	4b7e      	ldr	r3, [pc, #504]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 80029a0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80029ac:	e0ee      	b.n	8002b8c <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM3)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7a      	ldr	r2, [pc, #488]	@ (8002b9c <HAL_TIM_Base_MspInit+0x230>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d136      	bne.n	8002a26 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029b8:	4b77      	ldr	r3, [pc, #476]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 80029ba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029be:	4a76      	ldr	r2, [pc, #472]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80029c8:	4b73      	ldr	r3, [pc, #460]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 80029ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d6:	4b70      	ldr	r3, [pc, #448]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 80029d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80029e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 80029e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	623b      	str	r3, [r7, #32]
 80029f2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029f4:	2310      	movs	r3, #16
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a04:	2302      	movs	r3, #2
 8002a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4864      	ldr	r0, [pc, #400]	@ (8002ba0 <HAL_TIM_Base_MspInit+0x234>)
 8002a10:	f000 fc14 	bl	800323c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	201d      	movs	r0, #29
 8002a1a:	f000 fbda 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a1e:	201d      	movs	r0, #29
 8002a20:	f000 fbf1 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 8002a24:	e0b2      	b.n	8002b8c <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM4)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba4 <HAL_TIM_Base_MspInit+0x238>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d136      	bne.n	8002a9e <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a30:	4b59      	ldr	r3, [pc, #356]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002a32:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002a36:	4a58      	ldr	r2, [pc, #352]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002a40:	4b55      	ldr	r3, [pc, #340]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002a42:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4e:	4b52      	ldr	r3, [pc, #328]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002a50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a54:	4a50      	ldr	r2, [pc, #320]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002a60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a6c:	2340      	movs	r3, #64	@ 0x40
 8002a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a70:	2302      	movs	r3, #2
 8002a72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a84:	4619      	mov	r1, r3
 8002a86:	4846      	ldr	r0, [pc, #280]	@ (8002ba0 <HAL_TIM_Base_MspInit+0x234>)
 8002a88:	f000 fbd8 	bl	800323c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	201e      	movs	r0, #30
 8002a92:	f000 fb9e 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a96:	201e      	movs	r0, #30
 8002a98:	f000 fbb5 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 8002a9c:	e076      	b.n	8002b8c <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM5)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a41      	ldr	r2, [pc, #260]	@ (8002ba8 <HAL_TIM_Base_MspInit+0x23c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d136      	bne.n	8002b16 <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002aaa:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002aae:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002ab0:	f043 0308 	orr.w	r3, r3, #8
 8002ab4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002ab8:	4b37      	ldr	r3, [pc, #220]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002aba:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	4b34      	ldr	r3, [pc, #208]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002ac8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002acc:	4a32      	ldr	r2, [pc, #200]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002ad6:	4b30      	ldr	r3, [pc, #192]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002ad8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002af4:	2302      	movs	r3, #2
 8002af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002afc:	4619      	mov	r1, r3
 8002afe:	482b      	ldr	r0, [pc, #172]	@ (8002bac <HAL_TIM_Base_MspInit+0x240>)
 8002b00:	f000 fb9c 	bl	800323c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002b04:	2200      	movs	r2, #0
 8002b06:	2100      	movs	r1, #0
 8002b08:	2032      	movs	r0, #50	@ 0x32
 8002b0a:	f000 fb62 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002b0e:	2032      	movs	r0, #50	@ 0x32
 8002b10:	f000 fb79 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 8002b14:	e03a      	b.n	8002b8c <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM15)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a25      	ldr	r2, [pc, #148]	@ (8002bb0 <HAL_TIM_Base_MspInit+0x244>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d135      	bne.n	8002b8c <HAL_TIM_Base_MspInit+0x220>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b20:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002b22:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002b26:	4a1c      	ldr	r2, [pc, #112]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b2c:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002b30:	4b19      	ldr	r3, [pc, #100]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002b32:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b3e:	4b16      	ldr	r3, [pc, #88]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002b40:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b44:	4a14      	ldr	r2, [pc, #80]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002b46:	f043 0310 	orr.w	r3, r3, #16
 8002b4a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b4e:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <HAL_TIM_Base_MspInit+0x22c>)
 8002b50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b5c:	2320      	movs	r3, #32
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b74:	4619      	mov	r1, r3
 8002b76:	480f      	ldr	r0, [pc, #60]	@ (8002bb4 <HAL_TIM_Base_MspInit+0x248>)
 8002b78:	f000 fb60 	bl	800323c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	2074      	movs	r0, #116	@ 0x74
 8002b82:	f000 fb26 	bl	80031d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002b86:	2074      	movs	r0, #116	@ 0x74
 8002b88:	f000 fb3d 	bl	8003206 <HAL_NVIC_EnableIRQ>
}
 8002b8c:	bf00      	nop
 8002b8e:	3740      	adds	r7, #64	@ 0x40
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40010000 	.word	0x40010000
 8002b98:	58024400 	.word	0x58024400
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	58020400 	.word	0x58020400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	58020000 	.word	0x58020000
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	58021000 	.word	0x58021000

08002bb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a13      	ldr	r2, [pc, #76]	@ (8002c24 <HAL_TIM_MspPostInit+0x6c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d11f      	bne.n	8002c1a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bda:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <HAL_TIM_MspPostInit+0x70>)
 8002bdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002be0:	4a11      	ldr	r2, [pc, #68]	@ (8002c28 <HAL_TIM_MspPostInit+0x70>)
 8002be2:	f043 0310 	orr.w	r3, r3, #16
 8002be6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002bea:	4b0f      	ldr	r3, [pc, #60]	@ (8002c28 <HAL_TIM_MspPostInit+0x70>)
 8002bec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002bf8:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002bfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	4619      	mov	r1, r3
 8002c14:	4805      	ldr	r0, [pc, #20]	@ (8002c2c <HAL_TIM_MspPostInit+0x74>)
 8002c16:	f000 fb11 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40010000 	.word	0x40010000
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	58021000 	.word	0x58021000

08002c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b0ba      	sub	sp, #232	@ 0xe8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	22c0      	movs	r2, #192	@ 0xc0
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f006 ff5f 	bl	8009b14 <memset>
  if(huart->Instance==USART3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a27      	ldr	r2, [pc, #156]	@ (8002cf8 <HAL_UART_MspInit+0xc8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d146      	bne.n	8002cee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c60:	f04f 0202 	mov.w	r2, #2
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c72:	f107 0310 	add.w	r3, r7, #16
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 fdf6 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c82:	f7ff fbcd 	bl	8002420 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c86:	4b1d      	ldr	r3, [pc, #116]	@ (8002cfc <HAL_UART_MspInit+0xcc>)
 8002c88:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8002cfc <HAL_UART_MspInit+0xcc>)
 8002c8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c92:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002c96:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_UART_MspInit+0xcc>)
 8002c98:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002c9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca4:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <HAL_UART_MspInit+0xcc>)
 8002ca6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002caa:	4a14      	ldr	r2, [pc, #80]	@ (8002cfc <HAL_UART_MspInit+0xcc>)
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002cb4:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <HAL_UART_MspInit+0xcc>)
 8002cb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002cc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cdc:	2307      	movs	r3, #7
 8002cde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ce2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4805      	ldr	r0, [pc, #20]	@ (8002d00 <HAL_UART_MspInit+0xd0>)
 8002cea:	f000 faa7 	bl	800323c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cee:	bf00      	nop
 8002cf0:	37e8      	adds	r7, #232	@ 0xe8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40004800 	.word	0x40004800
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	58020c00 	.word	0x58020c00

08002d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <NMI_Handler+0x4>

08002d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <HardFault_Handler+0x4>

08002d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <MemManage_Handler+0x4>

08002d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <BusFault_Handler+0x4>

08002d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <UsageFault_Handler+0x4>

08002d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d5a:	f000 f93f 	bl	8002fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d68:	4802      	ldr	r0, [pc, #8]	@ (8002d74 <TIM3_IRQHandler+0x10>)
 8002d6a:	f004 f909 	bl	8006f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	24000170 	.word	0x24000170

08002d78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d7c:	4802      	ldr	r0, [pc, #8]	@ (8002d88 <TIM4_IRQHandler+0x10>)
 8002d7e:	f004 f8ff 	bl	8006f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	240001bc 	.word	0x240001bc

08002d8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d90:	4802      	ldr	r0, [pc, #8]	@ (8002d9c <TIM5_IRQHandler+0x10>)
 8002d92:	f004 f8f5 	bl	8006f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	24000208 	.word	0x24000208

08002da0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002da4:	4802      	ldr	r0, [pc, #8]	@ (8002db0 <TIM15_IRQHandler+0x10>)
 8002da6:	f004 f8eb 	bl	8006f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	24000254 	.word	0x24000254

08002db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002db8:	4b32      	ldr	r3, [pc, #200]	@ (8002e84 <SystemInit+0xd0>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbe:	4a31      	ldr	r2, [pc, #196]	@ (8002e84 <SystemInit+0xd0>)
 8002dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e88 <SystemInit+0xd4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d807      	bhi.n	8002de4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e88 <SystemInit+0xd4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 030f 	bic.w	r3, r3, #15
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8002e88 <SystemInit+0xd4>)
 8002dde:	f043 0303 	orr.w	r3, r3, #3
 8002de2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002de4:	4b29      	ldr	r3, [pc, #164]	@ (8002e8c <SystemInit+0xd8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a28      	ldr	r2, [pc, #160]	@ (8002e8c <SystemInit+0xd8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002df0:	4b26      	ldr	r3, [pc, #152]	@ (8002e8c <SystemInit+0xd8>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002df6:	4b25      	ldr	r3, [pc, #148]	@ (8002e8c <SystemInit+0xd8>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4924      	ldr	r1, [pc, #144]	@ (8002e8c <SystemInit+0xd8>)
 8002dfc:	4b24      	ldr	r3, [pc, #144]	@ (8002e90 <SystemInit+0xdc>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002e02:	4b21      	ldr	r3, [pc, #132]	@ (8002e88 <SystemInit+0xd4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <SystemInit+0xd4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 030f 	bic.w	r3, r3, #15
 8002e16:	4a1c      	ldr	r2, [pc, #112]	@ (8002e88 <SystemInit+0xd4>)
 8002e18:	f043 0303 	orr.w	r3, r3, #3
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <SystemInit+0xd8>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002e24:	4b19      	ldr	r3, [pc, #100]	@ (8002e8c <SystemInit+0xd8>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002e2a:	4b18      	ldr	r3, [pc, #96]	@ (8002e8c <SystemInit+0xd8>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002e30:	4b16      	ldr	r3, [pc, #88]	@ (8002e8c <SystemInit+0xd8>)
 8002e32:	4a18      	ldr	r2, [pc, #96]	@ (8002e94 <SystemInit+0xe0>)
 8002e34:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <SystemInit+0xd8>)
 8002e38:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <SystemInit+0xe4>)
 8002e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002e3c:	4b13      	ldr	r3, [pc, #76]	@ (8002e8c <SystemInit+0xd8>)
 8002e3e:	4a17      	ldr	r2, [pc, #92]	@ (8002e9c <SystemInit+0xe8>)
 8002e40:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002e42:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <SystemInit+0xd8>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002e48:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <SystemInit+0xd8>)
 8002e4a:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <SystemInit+0xe8>)
 8002e4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e8c <SystemInit+0xd8>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e54:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <SystemInit+0xd8>)
 8002e56:	4a11      	ldr	r2, [pc, #68]	@ (8002e9c <SystemInit+0xe8>)
 8002e58:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <SystemInit+0xd8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e60:	4b0a      	ldr	r3, [pc, #40]	@ (8002e8c <SystemInit+0xd8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a09      	ldr	r2, [pc, #36]	@ (8002e8c <SystemInit+0xd8>)
 8002e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e6c:	4b07      	ldr	r3, [pc, #28]	@ (8002e8c <SystemInit+0xd8>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <SystemInit+0xec>)
 8002e74:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000ed00 	.word	0xe000ed00
 8002e88:	52002000 	.word	0x52002000
 8002e8c:	58024400 	.word	0x58024400
 8002e90:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e94:	02020200 	.word	0x02020200
 8002e98:	01ff0000 	.word	0x01ff0000
 8002e9c:	01010280 	.word	0x01010280
 8002ea0:	52004000 	.word	0x52004000

08002ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ea4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002edc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ea8:	f7ff ff84 	bl	8002db4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eac:	480c      	ldr	r0, [pc, #48]	@ (8002ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eae:	490d      	ldr	r1, [pc, #52]	@ (8002ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb4:	e002      	b.n	8002ebc <LoopCopyDataInit>

08002eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eba:	3304      	adds	r3, #4

08002ebc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec0:	d3f9      	bcc.n	8002eb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec8:	e001      	b.n	8002ece <LoopFillZerobss>

08002eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ecc:	3204      	adds	r2, #4

08002ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed0:	d3fb      	bcc.n	8002eca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ed2:	f006 fe2d 	bl	8009b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ed6:	f7fe fa57 	bl	8001388 <main>
  bx  lr
 8002eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002edc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002ee0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ee4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002ee8:	0800a278 	.word	0x0800a278
  ldr r2, =_sbss
 8002eec:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8002ef0:	24000584 	.word	0x24000584

08002ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef4:	e7fe      	b.n	8002ef4 <ADC_IRQHandler>
	...

08002ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002efe:	2003      	movs	r0, #3
 8002f00:	f000 f95c 	bl	80031bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002f04:	f001 fada 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b15      	ldr	r3, [pc, #84]	@ (8002f60 <HAL_Init+0x68>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	4913      	ldr	r1, [pc, #76]	@ (8002f64 <HAL_Init+0x6c>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f22:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <HAL_Init+0x68>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f64 <HAL_Init+0x6c>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	4a0b      	ldr	r2, [pc, #44]	@ (8002f68 <HAL_Init+0x70>)
 8002f3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f6c <HAL_Init+0x74>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f42:	2000      	movs	r0, #0
 8002f44:	f000 f814 	bl	8002f70 <HAL_InitTick>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e002      	b.n	8002f58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f52:	f7ff fc87 	bl	8002864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	58024400 	.word	0x58024400
 8002f64:	0800a1b8 	.word	0x0800a1b8
 8002f68:	24000008 	.word	0x24000008
 8002f6c:	24000004 	.word	0x24000004

08002f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f78:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <HAL_InitTick+0x60>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e021      	b.n	8002fc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f84:	4b13      	ldr	r3, [pc, #76]	@ (8002fd4 <HAL_InitTick+0x64>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <HAL_InitTick+0x60>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f941 	bl	8003222 <HAL_SYSTICK_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00e      	b.n	8002fc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d80a      	bhi.n	8002fc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fb8:	f000 f90b 	bl	80031d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fbc:	4a06      	ldr	r2, [pc, #24]	@ (8002fd8 <HAL_InitTick+0x68>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	24000010 	.word	0x24000010
 8002fd4:	24000004 	.word	0x24000004
 8002fd8:	2400000c 	.word	0x2400000c

08002fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_IncTick+0x20>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <HAL_IncTick+0x24>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	4a04      	ldr	r2, [pc, #16]	@ (8003000 <HAL_IncTick+0x24>)
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	24000010 	.word	0x24000010
 8003000:	24000448 	.word	0x24000448

08003004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return uwTick;
 8003008:	4b03      	ldr	r3, [pc, #12]	@ (8003018 <HAL_GetTick+0x14>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	24000448 	.word	0x24000448

0800301c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <__NVIC_SetPriorityGrouping+0x40>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003038:	4013      	ands	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <__NVIC_SetPriorityGrouping+0x44>)
 8003046:	4313      	orrs	r3, r2
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <__NVIC_SetPriorityGrouping+0x40>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00
 8003060:	05fa0000 	.word	0x05fa0000

08003064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003068:	4b04      	ldr	r3, [pc, #16]	@ (800307c <__NVIC_GetPriorityGrouping+0x18>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	f003 0307 	and.w	r3, r3, #7
}
 8003072:	4618      	mov	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800308a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800308e:	2b00      	cmp	r3, #0
 8003090:	db0b      	blt.n	80030aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	4907      	ldr	r1, [pc, #28]	@ (80030b8 <__NVIC_EnableIRQ+0x38>)
 800309a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2001      	movs	r0, #1
 80030a2:	fa00 f202 	lsl.w	r2, r0, r2
 80030a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	e000e100 	.word	0xe000e100

080030bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	6039      	str	r1, [r7, #0]
 80030c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	db0a      	blt.n	80030e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	490c      	ldr	r1, [pc, #48]	@ (8003108 <__NVIC_SetPriority+0x4c>)
 80030d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	440b      	add	r3, r1
 80030e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e4:	e00a      	b.n	80030fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	4908      	ldr	r1, [pc, #32]	@ (800310c <__NVIC_SetPriority+0x50>)
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	3b04      	subs	r3, #4
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	440b      	add	r3, r1
 80030fa:	761a      	strb	r2, [r3, #24]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000e100 	.word	0xe000e100
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	@ 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f1c3 0307 	rsb	r3, r3, #7
 800312a:	2b04      	cmp	r3, #4
 800312c:	bf28      	it	cs
 800312e:	2304      	movcs	r3, #4
 8003130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3304      	adds	r3, #4
 8003136:	2b06      	cmp	r3, #6
 8003138:	d902      	bls.n	8003140 <NVIC_EncodePriority+0x30>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3b03      	subs	r3, #3
 800313e:	e000      	b.n	8003142 <NVIC_EncodePriority+0x32>
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	401a      	ands	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003158:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa01 f303 	lsl.w	r3, r1, r3
 8003162:	43d9      	mvns	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	4313      	orrs	r3, r2
         );
}
 800316a:	4618      	mov	r0, r3
 800316c:	3724      	adds	r7, #36	@ 0x24
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003188:	d301      	bcc.n	800318e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800318a:	2301      	movs	r3, #1
 800318c:	e00f      	b.n	80031ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800318e:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <SysTick_Config+0x40>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003196:	210f      	movs	r1, #15
 8003198:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800319c:	f7ff ff8e 	bl	80030bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <SysTick_Config+0x40>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031a6:	4b04      	ldr	r3, [pc, #16]	@ (80031b8 <SysTick_Config+0x40>)
 80031a8:	2207      	movs	r2, #7
 80031aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	e000e010 	.word	0xe000e010

080031bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff29 	bl	800301c <__NVIC_SetPriorityGrouping>
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	4603      	mov	r3, r0
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031e0:	f7ff ff40 	bl	8003064 <__NVIC_GetPriorityGrouping>
 80031e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	6978      	ldr	r0, [r7, #20]
 80031ec:	f7ff ff90 	bl	8003110 <NVIC_EncodePriority>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff5f 	bl	80030bc <__NVIC_SetPriority>
}
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	4603      	mov	r3, r0
 800320e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff33 	bl	8003080 <__NVIC_EnableIRQ>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff ffa4 	bl	8003178 <SysTick_Config>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	@ 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800324a:	4b89      	ldr	r3, [pc, #548]	@ (8003470 <HAL_GPIO_Init+0x234>)
 800324c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800324e:	e194      	b.n	800357a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8186 	beq.w	8003574 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d005      	beq.n	8003280 <HAL_GPIO_Init+0x44>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d130      	bne.n	80032e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032b6:	2201      	movs	r2, #1
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 0201 	and.w	r2, r3, #1
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d017      	beq.n	800331e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	2203      	movs	r2, #3
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d123      	bne.n	8003372 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3208      	adds	r2, #8
 8003332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	08da      	lsrs	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3208      	adds	r2, #8
 800336c:	69b9      	ldr	r1, [r7, #24]
 800336e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2203      	movs	r2, #3
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0203 	and.w	r2, r3, #3
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80e0 	beq.w	8003574 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003474 <HAL_GPIO_Init+0x238>)
 80033b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80033ba:	4a2e      	ldr	r2, [pc, #184]	@ (8003474 <HAL_GPIO_Init+0x238>)
 80033bc:	f043 0302 	orr.w	r3, r3, #2
 80033c0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80033c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003474 <HAL_GPIO_Init+0x238>)
 80033c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033d2:	4a29      	ldr	r2, [pc, #164]	@ (8003478 <HAL_GPIO_Init+0x23c>)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	089b      	lsrs	r3, r3, #2
 80033d8:	3302      	adds	r3, #2
 80033da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	220f      	movs	r2, #15
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a20      	ldr	r2, [pc, #128]	@ (800347c <HAL_GPIO_Init+0x240>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d052      	beq.n	80034a4 <HAL_GPIO_Init+0x268>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a1f      	ldr	r2, [pc, #124]	@ (8003480 <HAL_GPIO_Init+0x244>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d031      	beq.n	800346a <HAL_GPIO_Init+0x22e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1e      	ldr	r2, [pc, #120]	@ (8003484 <HAL_GPIO_Init+0x248>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d02b      	beq.n	8003466 <HAL_GPIO_Init+0x22a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <HAL_GPIO_Init+0x24c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d025      	beq.n	8003462 <HAL_GPIO_Init+0x226>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a1c      	ldr	r2, [pc, #112]	@ (800348c <HAL_GPIO_Init+0x250>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01f      	beq.n	800345e <HAL_GPIO_Init+0x222>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a1b      	ldr	r2, [pc, #108]	@ (8003490 <HAL_GPIO_Init+0x254>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d019      	beq.n	800345a <HAL_GPIO_Init+0x21e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1a      	ldr	r2, [pc, #104]	@ (8003494 <HAL_GPIO_Init+0x258>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d013      	beq.n	8003456 <HAL_GPIO_Init+0x21a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a19      	ldr	r2, [pc, #100]	@ (8003498 <HAL_GPIO_Init+0x25c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00d      	beq.n	8003452 <HAL_GPIO_Init+0x216>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a18      	ldr	r2, [pc, #96]	@ (800349c <HAL_GPIO_Init+0x260>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <HAL_GPIO_Init+0x212>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a17      	ldr	r2, [pc, #92]	@ (80034a0 <HAL_GPIO_Init+0x264>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_GPIO_Init+0x20e>
 8003446:	2309      	movs	r3, #9
 8003448:	e02d      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800344a:	230a      	movs	r3, #10
 800344c:	e02b      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800344e:	2308      	movs	r3, #8
 8003450:	e029      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 8003452:	2307      	movs	r3, #7
 8003454:	e027      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 8003456:	2306      	movs	r3, #6
 8003458:	e025      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800345a:	2305      	movs	r3, #5
 800345c:	e023      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800345e:	2304      	movs	r3, #4
 8003460:	e021      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 8003462:	2303      	movs	r3, #3
 8003464:	e01f      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 8003466:	2302      	movs	r3, #2
 8003468:	e01d      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800346a:	2301      	movs	r3, #1
 800346c:	e01b      	b.n	80034a6 <HAL_GPIO_Init+0x26a>
 800346e:	bf00      	nop
 8003470:	58000080 	.word	0x58000080
 8003474:	58024400 	.word	0x58024400
 8003478:	58000400 	.word	0x58000400
 800347c:	58020000 	.word	0x58020000
 8003480:	58020400 	.word	0x58020400
 8003484:	58020800 	.word	0x58020800
 8003488:	58020c00 	.word	0x58020c00
 800348c:	58021000 	.word	0x58021000
 8003490:	58021400 	.word	0x58021400
 8003494:	58021800 	.word	0x58021800
 8003498:	58021c00 	.word	0x58021c00
 800349c:	58022000 	.word	0x58022000
 80034a0:	58022400 	.word	0x58022400
 80034a4:	2300      	movs	r3, #0
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	f002 0203 	and.w	r2, r2, #3
 80034ac:	0092      	lsls	r2, r2, #2
 80034ae:	4093      	lsls	r3, r2
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034b6:	4938      	ldr	r1, [pc, #224]	@ (8003598 <HAL_GPIO_Init+0x35c>)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003518:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	43db      	mvns	r3, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4013      	ands	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3301      	adds	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f ae63 	bne.w	8003250 <HAL_GPIO_Init+0x14>
  }
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	3724      	adds	r7, #36	@ 0x24
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	58000400 	.word	0x58000400

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035b8:	e003      	b.n	80035c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	041a      	lsls	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	619a      	str	r2, [r3, #24]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e08b      	b.n	80036fa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff f94e 	bl	8002898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	@ 0x24
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003620:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003630:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d107      	bne.n	800364a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	e006      	b.n	8003658 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003656:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d108      	bne.n	8003672 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	e007      	b.n	8003682 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003680:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b1d      	ldr	r3, [pc, #116]	@ (8003704 <HAL_I2C_Init+0x134>)
 800368e:	430b      	orrs	r3, r1
 8003690:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69d9      	ldr	r1, [r3, #28]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1a      	ldr	r2, [r3, #32]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	02008000 	.word	0x02008000

08003708 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b20      	cmp	r3, #32
 800371c:	d138      	bne.n	8003790 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003728:	2302      	movs	r3, #2
 800372a:	e032      	b.n	8003792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2224      	movs	r2, #36	@ 0x24
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800375a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800379e:	b480      	push	{r7}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d139      	bne.n	8003828 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037be:	2302      	movs	r3, #2
 80037c0:	e033      	b.n	800382a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2224      	movs	r2, #36	@ 0x24
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003828:	2302      	movs	r3, #2
  }
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003840:	4b29      	ldr	r3, [pc, #164]	@ (80038e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	2b06      	cmp	r3, #6
 800384a:	d00a      	beq.n	8003862 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800384c:	4b26      	ldr	r3, [pc, #152]	@ (80038e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e040      	b.n	80038e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e03e      	b.n	80038e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003862:	4b21      	ldr	r3, [pc, #132]	@ (80038e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800386a:	491f      	ldr	r1, [pc, #124]	@ (80038e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4313      	orrs	r3, r2
 8003870:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003872:	f7ff fbc7 	bl	8003004 <HAL_GetTick>
 8003876:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003878:	e009      	b.n	800388e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800387a:	f7ff fbc3 	bl	8003004 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003888:	d901      	bls.n	800388e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e028      	b.n	80038e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800388e:	4b16      	ldr	r3, [pc, #88]	@ (80038e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800389a:	d1ee      	bne.n	800387a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b1e      	cmp	r3, #30
 80038a0:	d008      	beq.n	80038b4 <HAL_PWREx_ConfigSupply+0x7c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80038a6:	d005      	beq.n	80038b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b1d      	cmp	r3, #29
 80038ac:	d002      	beq.n	80038b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b2d      	cmp	r3, #45	@ 0x2d
 80038b2:	d114      	bne.n	80038de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80038b4:	f7ff fba6 	bl	8003004 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80038ba:	e009      	b.n	80038d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038bc:	f7ff fba2 	bl	8003004 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038ca:	d901      	bls.n	80038d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e007      	b.n	80038e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80038d0:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038dc:	d1ee      	bne.n	80038bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	58024800 	.word	0x58024800

080038ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08c      	sub	sp, #48	@ 0x30
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f000 bc1f 	b.w	800413e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80b3 	beq.w	8003a74 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800390e:	4b95      	ldr	r3, [pc, #596]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003918:	4b92      	ldr	r3, [pc, #584]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800391e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003920:	2b10      	cmp	r3, #16
 8003922:	d007      	beq.n	8003934 <HAL_RCC_OscConfig+0x48>
 8003924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003926:	2b18      	cmp	r3, #24
 8003928:	d112      	bne.n	8003950 <HAL_RCC_OscConfig+0x64>
 800392a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392c:	f003 0303 	and.w	r3, r3, #3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d10d      	bne.n	8003950 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	4b8b      	ldr	r3, [pc, #556]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8098 	beq.w	8003a72 <HAL_RCC_OscConfig+0x186>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f040 8093 	bne.w	8003a72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e3f6      	b.n	800413e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0x7c>
 800395a:	4b82      	ldr	r3, [pc, #520]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a81      	ldr	r2, [pc, #516]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e058      	b.n	8003a1a <HAL_RCC_OscConfig+0x12e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d112      	bne.n	8003996 <HAL_RCC_OscConfig+0xaa>
 8003970:	4b7c      	ldr	r3, [pc, #496]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a7b      	ldr	r2, [pc, #492]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b79      	ldr	r3, [pc, #484]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a78      	ldr	r2, [pc, #480]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003982:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b76      	ldr	r3, [pc, #472]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a75      	ldr	r2, [pc, #468]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 800398e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e041      	b.n	8003a1a <HAL_RCC_OscConfig+0x12e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800399e:	d112      	bne.n	80039c6 <HAL_RCC_OscConfig+0xda>
 80039a0:	4b70      	ldr	r3, [pc, #448]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a6f      	ldr	r2, [pc, #444]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b6d      	ldr	r3, [pc, #436]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6c      	ldr	r2, [pc, #432]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039b2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a69      	ldr	r2, [pc, #420]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	e029      	b.n	8003a1a <HAL_RCC_OscConfig+0x12e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80039ce:	d112      	bne.n	80039f6 <HAL_RCC_OscConfig+0x10a>
 80039d0:	4b64      	ldr	r3, [pc, #400]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a63      	ldr	r2, [pc, #396]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	4b61      	ldr	r3, [pc, #388]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a60      	ldr	r2, [pc, #384]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	e011      	b.n	8003a1a <HAL_RCC_OscConfig+0x12e>
 80039f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a5a      	ldr	r2, [pc, #360]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 80039fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b58      	ldr	r3, [pc, #352]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a57      	ldr	r2, [pc, #348]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003a08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4b55      	ldr	r3, [pc, #340]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a54      	ldr	r2, [pc, #336]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003a14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d013      	beq.n	8003a4a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7ff faef 	bl	8003004 <HAL_GetTick>
 8003a26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2a:	f7ff faeb 	bl	8003004 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b64      	cmp	r3, #100	@ 0x64
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e380      	b.n	800413e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a3c:	4b49      	ldr	r3, [pc, #292]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x13e>
 8003a48:	e014      	b.n	8003a74 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7ff fadb 	bl	8003004 <HAL_GetTick>
 8003a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a52:	f7ff fad7 	bl	8003004 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b64      	cmp	r3, #100	@ 0x64
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e36c      	b.n	800413e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a64:	4b3f      	ldr	r3, [pc, #252]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x166>
 8003a70:	e000      	b.n	8003a74 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 808c 	beq.w	8003b9a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a82:	4b38      	ldr	r3, [pc, #224]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a8a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a8c:	4b35      	ldr	r3, [pc, #212]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d007      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x1bc>
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	2b18      	cmp	r3, #24
 8003a9c:	d137      	bne.n	8003b0e <HAL_RCC_OscConfig+0x222>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d132      	bne.n	8003b0e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x1d4>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e33e      	b.n	800413e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ac0:	4b28      	ldr	r3, [pc, #160]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 0219 	bic.w	r2, r3, #25
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4925      	ldr	r1, [pc, #148]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7ff fa97 	bl	8003004 <HAL_GetTick>
 8003ad6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ada:	f7ff fa93 	bl	8003004 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e328      	b.n	800413e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aec:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	4917      	ldr	r1, [pc, #92]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b0c:	e045      	b.n	8003b9a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d028      	beq.n	8003b68 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b16:	4b13      	ldr	r3, [pc, #76]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0219 	bic.w	r2, r3, #25
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4910      	ldr	r1, [pc, #64]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7ff fa6c 	bl	8003004 <HAL_GetTick>
 8003b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b30:	f7ff fa68 	bl	8003004 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e2fd      	b.n	800413e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b42:	4b08      	ldr	r3, [pc, #32]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4e:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	061b      	lsls	r3, r3, #24
 8003b5c:	4901      	ldr	r1, [pc, #4]	@ (8003b64 <HAL_RCC_OscConfig+0x278>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
 8003b62:	e01a      	b.n	8003b9a <HAL_RCC_OscConfig+0x2ae>
 8003b64:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b68:	4b97      	ldr	r3, [pc, #604]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a96      	ldr	r2, [pc, #600]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7ff fa46 	bl	8003004 <HAL_GetTick>
 8003b78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7c:	f7ff fa42 	bl	8003004 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e2d7      	b.n	800413e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b8e:	4b8e      	ldr	r3, [pc, #568]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d06a      	beq.n	8003c7c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba6:	4b88      	ldr	r3, [pc, #544]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bb0:	4b85      	ldr	r3, [pc, #532]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d007      	beq.n	8003bcc <HAL_RCC_OscConfig+0x2e0>
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b18      	cmp	r3, #24
 8003bc0:	d11b      	bne.n	8003bfa <HAL_RCC_OscConfig+0x30e>
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d116      	bne.n	8003bfa <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bcc:	4b7e      	ldr	r3, [pc, #504]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2f8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	2b80      	cmp	r3, #128	@ 0x80
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e2ac      	b.n	800413e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003be4:	4b78      	ldr	r3, [pc, #480]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	4975      	ldr	r1, [pc, #468]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bf8:	e040      	b.n	8003c7c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d023      	beq.n	8003c4a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c02:	4b71      	ldr	r3, [pc, #452]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a70      	ldr	r2, [pc, #448]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7ff f9f9 	bl	8003004 <HAL_GetTick>
 8003c12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c16:	f7ff f9f5 	bl	8003004 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e28a      	b.n	800413e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c28:	4b67      	ldr	r3, [pc, #412]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c34:	4b64      	ldr	r3, [pc, #400]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	4961      	ldr	r1, [pc, #388]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60cb      	str	r3, [r1, #12]
 8003c48:	e018      	b.n	8003c7c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003c50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7ff f9d5 	bl	8003004 <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c5e:	f7ff f9d1 	bl	8003004 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e266      	b.n	800413e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c70:	4b55      	ldr	r3, [pc, #340]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d036      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d019      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c90:	4b4d      	ldr	r3, [pc, #308]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c94:	4a4c      	ldr	r2, [pc, #304]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7ff f9b2 	bl	8003004 <HAL_GetTick>
 8003ca0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7ff f9ae 	bl	8003004 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e243      	b.n	800413e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cb6:	4b44      	ldr	r3, [pc, #272]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x3b8>
 8003cc2:	e018      	b.n	8003cf6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc4:	4b40      	ldr	r3, [pc, #256]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc8:	4a3f      	ldr	r2, [pc, #252]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7ff f998 	bl	8003004 <HAL_GetTick>
 8003cd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7ff f994 	bl	8003004 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e229      	b.n	800413e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cea:	4b37      	ldr	r3, [pc, #220]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d036      	beq.n	8003d70 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d019      	beq.n	8003d3e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003d10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d16:	f7ff f975 	bl	8003004 <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d1e:	f7ff f971 	bl	8003004 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e206      	b.n	800413e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d30:	4b25      	ldr	r3, [pc, #148]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x432>
 8003d3c:	e018      	b.n	8003d70 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d3e:	4b22      	ldr	r3, [pc, #136]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a21      	ldr	r2, [pc, #132]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003d44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d4a:	f7ff f95b 	bl	8003004 <HAL_GetTick>
 8003d4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d52:	f7ff f957 	bl	8003004 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1ec      	b.n	800413e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d64:	4b18      	ldr	r3, [pc, #96]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80af 	beq.w	8003edc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d7e:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <HAL_RCC_OscConfig+0x4e0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a12      	ldr	r2, [pc, #72]	@ (8003dcc <HAL_RCC_OscConfig+0x4e0>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d8a:	f7ff f93b 	bl	8003004 <HAL_GetTick>
 8003d8e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d92:	f7ff f937 	bl	8003004 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b64      	cmp	r3, #100	@ 0x64
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e1cc      	b.n	800413e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003da4:	4b09      	ldr	r3, [pc, #36]	@ (8003dcc <HAL_RCC_OscConfig+0x4e0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10b      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4e4>
 8003db8:	4b03      	ldr	r3, [pc, #12]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbc:	4a02      	ldr	r2, [pc, #8]	@ (8003dc8 <HAL_RCC_OscConfig+0x4dc>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc4:	e05b      	b.n	8003e7e <HAL_RCC_OscConfig+0x592>
 8003dc6:	bf00      	nop
 8003dc8:	58024400 	.word	0x58024400
 8003dcc:	58024800 	.word	0x58024800
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d112      	bne.n	8003dfe <HAL_RCC_OscConfig+0x512>
 8003dd8:	4b9d      	ldr	r3, [pc, #628]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ddc:	4a9c      	ldr	r2, [pc, #624]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de4:	4b9a      	ldr	r3, [pc, #616]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de8:	4a99      	ldr	r2, [pc, #612]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df0:	4b97      	ldr	r3, [pc, #604]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df4:	4a96      	ldr	r2, [pc, #600]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003df6:	f023 0304 	bic.w	r3, r3, #4
 8003dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfc:	e03f      	b.n	8003e7e <HAL_RCC_OscConfig+0x592>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d112      	bne.n	8003e2c <HAL_RCC_OscConfig+0x540>
 8003e06:	4b92      	ldr	r3, [pc, #584]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0a:	4a91      	ldr	r2, [pc, #580]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e0c:	f043 0304 	orr.w	r3, r3, #4
 8003e10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e12:	4b8f      	ldr	r3, [pc, #572]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	4a8e      	ldr	r2, [pc, #568]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1e:	4b8c      	ldr	r3, [pc, #560]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e22:	4a8b      	ldr	r2, [pc, #556]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2a:	e028      	b.n	8003e7e <HAL_RCC_OscConfig+0x592>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b85      	cmp	r3, #133	@ 0x85
 8003e32:	d112      	bne.n	8003e5a <HAL_RCC_OscConfig+0x56e>
 8003e34:	4b86      	ldr	r3, [pc, #536]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	4a85      	ldr	r2, [pc, #532]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e40:	4b83      	ldr	r3, [pc, #524]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e44:	4a82      	ldr	r2, [pc, #520]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4c:	4b80      	ldr	r3, [pc, #512]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e50:	4a7f      	ldr	r2, [pc, #508]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e58:	e011      	b.n	8003e7e <HAL_RCC_OscConfig+0x592>
 8003e5a:	4b7d      	ldr	r3, [pc, #500]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e66:	4b7a      	ldr	r3, [pc, #488]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a79      	ldr	r2, [pc, #484]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e72:	4b77      	ldr	r3, [pc, #476]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	4a76      	ldr	r2, [pc, #472]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003e78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d015      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7ff f8bd 	bl	8003004 <HAL_GetTick>
 8003e8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7ff f8b9 	bl	8003004 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e14c      	b.n	800413e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea4:	4b6a      	ldr	r3, [pc, #424]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ee      	beq.n	8003e8e <HAL_RCC_OscConfig+0x5a2>
 8003eb0:	e014      	b.n	8003edc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7ff f8a7 	bl	8003004 <HAL_GetTick>
 8003eb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7ff f8a3 	bl	8003004 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e136      	b.n	800413e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ed0:	4b5f      	ldr	r3, [pc, #380]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ee      	bne.n	8003eba <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 812b 	beq.w	800413c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ee6:	4b5a      	ldr	r3, [pc, #360]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eee:	2b18      	cmp	r3, #24
 8003ef0:	f000 80bb 	beq.w	800406a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	f040 8095 	bne.w	8004028 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efe:	4b54      	ldr	r3, [pc, #336]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a53      	ldr	r2, [pc, #332]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7ff f87b 	bl	8003004 <HAL_GetTick>
 8003f0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f12:	f7ff f877 	bl	8003004 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e10c      	b.n	800413e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f24:	4b4a      	ldr	r3, [pc, #296]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f30:	4b47      	ldr	r3, [pc, #284]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003f32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f34:	4b47      	ldr	r3, [pc, #284]	@ (8004054 <HAL_RCC_OscConfig+0x768>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	430a      	orrs	r2, r1
 8003f44:	4942      	ldr	r1, [pc, #264]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	025b      	lsls	r3, r3, #9
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	3b01      	subs	r3, #1
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	3b01      	subs	r3, #1
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f7a:	4935      	ldr	r1, [pc, #212]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f80:	4b33      	ldr	r3, [pc, #204]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	4a32      	ldr	r2, [pc, #200]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f8c:	4b30      	ldr	r3, [pc, #192]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f90:	4b31      	ldr	r3, [pc, #196]	@ (8004058 <HAL_RCC_OscConfig+0x76c>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f98:	00d2      	lsls	r2, r2, #3
 8003f9a:	492d      	ldr	r1, [pc, #180]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	f023 020c 	bic.w	r2, r3, #12
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	4928      	ldr	r1, [pc, #160]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fb2:	4b27      	ldr	r3, [pc, #156]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	f023 0202 	bic.w	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	4924      	ldr	r1, [pc, #144]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fc4:	4b22      	ldr	r3, [pc, #136]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	4a21      	ldr	r2, [pc, #132]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd0:	4b1f      	ldr	r3, [pc, #124]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fe2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fe8:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a15      	ldr	r2, [pc, #84]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7ff f800 	bl	8003004 <HAL_GetTick>
 8004004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004008:	f7fe fffc 	bl	8003004 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e091      	b.n	800413e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x71c>
 8004026:	e089      	b.n	800413c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004028:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a08      	ldr	r2, [pc, #32]	@ (8004050 <HAL_RCC_OscConfig+0x764>)
 800402e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fe ffe6 	bl	8003004 <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800403a:	e00f      	b.n	800405c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fe ffe2 	bl	8003004 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d908      	bls.n	800405c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e077      	b.n	800413e <HAL_RCC_OscConfig+0x852>
 800404e:	bf00      	nop
 8004050:	58024400 	.word	0x58024400
 8004054:	fffffc0c 	.word	0xfffffc0c
 8004058:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800405c:	4b3a      	ldr	r3, [pc, #232]	@ (8004148 <HAL_RCC_OscConfig+0x85c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e9      	bne.n	800403c <HAL_RCC_OscConfig+0x750>
 8004068:	e068      	b.n	800413c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800406a:	4b37      	ldr	r3, [pc, #220]	@ (8004148 <HAL_RCC_OscConfig+0x85c>)
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004070:	4b35      	ldr	r3, [pc, #212]	@ (8004148 <HAL_RCC_OscConfig+0x85c>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004074:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	2b01      	cmp	r3, #1
 800407c:	d031      	beq.n	80040e2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0203 	and.w	r2, r3, #3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d12a      	bne.n	80040e2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d122      	bne.n	80040e2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d11a      	bne.n	80040e2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	0a5b      	lsrs	r3, r3, #9
 80040b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d111      	bne.n	80040e2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d108      	bne.n	80040e2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	0e1b      	lsrs	r3, r3, #24
 80040d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040de:	429a      	cmp	r2, r3
 80040e0:	d001      	beq.n	80040e6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e02b      	b.n	800413e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040e6:	4b18      	ldr	r3, [pc, #96]	@ (8004148 <HAL_RCC_OscConfig+0x85c>)
 80040e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ea:	08db      	lsrs	r3, r3, #3
 80040ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040f0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d01f      	beq.n	800413c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040fc:	4b12      	ldr	r3, [pc, #72]	@ (8004148 <HAL_RCC_OscConfig+0x85c>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	4a11      	ldr	r2, [pc, #68]	@ (8004148 <HAL_RCC_OscConfig+0x85c>)
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004108:	f7fe ff7c 	bl	8003004 <HAL_GetTick>
 800410c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800410e:	bf00      	nop
 8004110:	f7fe ff78 	bl	8003004 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	4293      	cmp	r3, r2
 800411a:	d0f9      	beq.n	8004110 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800411c:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_RCC_OscConfig+0x85c>)
 800411e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004120:	4b0a      	ldr	r3, [pc, #40]	@ (800414c <HAL_RCC_OscConfig+0x860>)
 8004122:	4013      	ands	r3, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004128:	00d2      	lsls	r2, r2, #3
 800412a:	4907      	ldr	r1, [pc, #28]	@ (8004148 <HAL_RCC_OscConfig+0x85c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004130:	4b05      	ldr	r3, [pc, #20]	@ (8004148 <HAL_RCC_OscConfig+0x85c>)
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	4a04      	ldr	r2, [pc, #16]	@ (8004148 <HAL_RCC_OscConfig+0x85c>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3730      	adds	r7, #48	@ 0x30
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	58024400 	.word	0x58024400
 800414c:	ffff0007 	.word	0xffff0007

08004150 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e19c      	b.n	800449e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b8a      	ldr	r3, [pc, #552]	@ (8004390 <HAL_RCC_ClockConfig+0x240>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d910      	bls.n	8004194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b87      	ldr	r3, [pc, #540]	@ (8004390 <HAL_RCC_ClockConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 020f 	bic.w	r2, r3, #15
 800417a:	4985      	ldr	r1, [pc, #532]	@ (8004390 <HAL_RCC_ClockConfig+0x240>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b83      	ldr	r3, [pc, #524]	@ (8004390 <HAL_RCC_ClockConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e184      	b.n	800449e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d010      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d908      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041b0:	4b78      	ldr	r3, [pc, #480]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	4975      	ldr	r1, [pc, #468]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d010      	beq.n	80041f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	4b70      	ldr	r3, [pc, #448]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041da:	429a      	cmp	r2, r3
 80041dc:	d908      	bls.n	80041f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041de:	4b6d      	ldr	r3, [pc, #436]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	496a      	ldr	r1, [pc, #424]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d010      	beq.n	800421e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	4b64      	ldr	r3, [pc, #400]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004208:	429a      	cmp	r2, r3
 800420a:	d908      	bls.n	800421e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800420c:	4b61      	ldr	r3, [pc, #388]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	495e      	ldr	r1, [pc, #376]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 800421a:	4313      	orrs	r3, r2
 800421c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d010      	beq.n	800424c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69da      	ldr	r2, [r3, #28]
 800422e:	4b59      	ldr	r3, [pc, #356]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004236:	429a      	cmp	r2, r3
 8004238:	d908      	bls.n	800424c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800423a:	4b56      	ldr	r3, [pc, #344]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	4953      	ldr	r1, [pc, #332]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 8004248:	4313      	orrs	r3, r2
 800424a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d010      	beq.n	800427a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	4b4d      	ldr	r3, [pc, #308]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	429a      	cmp	r2, r3
 8004266:	d908      	bls.n	800427a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004268:	4b4a      	ldr	r3, [pc, #296]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f023 020f 	bic.w	r2, r3, #15
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	4947      	ldr	r1, [pc, #284]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 8004276:	4313      	orrs	r3, r2
 8004278:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d055      	beq.n	8004332 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004286:	4b43      	ldr	r3, [pc, #268]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4940      	ldr	r1, [pc, #256]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 8004294:	4313      	orrs	r3, r2
 8004296:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d107      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d121      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0f6      	b.n	800449e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042b8:	4b36      	ldr	r3, [pc, #216]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d115      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0ea      	b.n	800449e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042d0:	4b30      	ldr	r3, [pc, #192]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d109      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0de      	b.n	800449e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0d6      	b.n	800449e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042f0:	4b28      	ldr	r3, [pc, #160]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f023 0207 	bic.w	r2, r3, #7
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4925      	ldr	r1, [pc, #148]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004302:	f7fe fe7f 	bl	8003004 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004308:	e00a      	b.n	8004320 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430a:	f7fe fe7b 	bl	8003004 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004318:	4293      	cmp	r3, r2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e0be      	b.n	800449e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004320:	4b1c      	ldr	r3, [pc, #112]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	429a      	cmp	r2, r3
 8004330:	d1eb      	bne.n	800430a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d010      	beq.n	8004360 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	4b14      	ldr	r3, [pc, #80]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	429a      	cmp	r2, r3
 800434c:	d208      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434e:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	490e      	ldr	r1, [pc, #56]	@ (8004394 <HAL_RCC_ClockConfig+0x244>)
 800435c:	4313      	orrs	r3, r2
 800435e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004360:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <HAL_RCC_ClockConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d214      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436e:	4b08      	ldr	r3, [pc, #32]	@ (8004390 <HAL_RCC_ClockConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 020f 	bic.w	r2, r3, #15
 8004376:	4906      	ldr	r1, [pc, #24]	@ (8004390 <HAL_RCC_ClockConfig+0x240>)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	4b04      	ldr	r3, [pc, #16]	@ (8004390 <HAL_RCC_ClockConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d005      	beq.n	8004398 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e086      	b.n	800449e <HAL_RCC_ClockConfig+0x34e>
 8004390:	52002000 	.word	0x52002000
 8004394:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d010      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	4b3f      	ldr	r3, [pc, #252]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d208      	bcs.n	80043c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043b4:	4b3c      	ldr	r3, [pc, #240]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	4939      	ldr	r1, [pc, #228]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695a      	ldr	r2, [r3, #20]
 80043d6:	4b34      	ldr	r3, [pc, #208]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043de:	429a      	cmp	r2, r3
 80043e0:	d208      	bcs.n	80043f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043e2:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	492e      	ldr	r1, [pc, #184]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d010      	beq.n	8004422 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699a      	ldr	r2, [r3, #24]
 8004404:	4b28      	ldr	r3, [pc, #160]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800440c:	429a      	cmp	r2, r3
 800440e:	d208      	bcs.n	8004422 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004410:	4b25      	ldr	r3, [pc, #148]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	4922      	ldr	r1, [pc, #136]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 800441e:	4313      	orrs	r3, r2
 8004420:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d010      	beq.n	8004450 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	4b1d      	ldr	r3, [pc, #116]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800443a:	429a      	cmp	r2, r3
 800443c:	d208      	bcs.n	8004450 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800443e:	4b1a      	ldr	r3, [pc, #104]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	4917      	ldr	r1, [pc, #92]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 800444c:	4313      	orrs	r3, r2
 800444e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004450:	f000 f834 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b14      	ldr	r3, [pc, #80]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	4912      	ldr	r1, [pc, #72]	@ (80044ac <HAL_RCC_ClockConfig+0x35c>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800446e:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <HAL_RCC_ClockConfig+0x358>)
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	4a0d      	ldr	r2, [pc, #52]	@ (80044ac <HAL_RCC_ClockConfig+0x35c>)
 8004478:	5cd3      	ldrb	r3, [r2, r3]
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
 8004484:	4a0a      	ldr	r2, [pc, #40]	@ (80044b0 <HAL_RCC_ClockConfig+0x360>)
 8004486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004488:	4a0a      	ldr	r2, [pc, #40]	@ (80044b4 <HAL_RCC_ClockConfig+0x364>)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800448e:	4b0a      	ldr	r3, [pc, #40]	@ (80044b8 <HAL_RCC_ClockConfig+0x368>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe fd6c 	bl	8002f70 <HAL_InitTick>
 8004498:	4603      	mov	r3, r0
 800449a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	58024400 	.word	0x58024400
 80044ac:	0800a1b8 	.word	0x0800a1b8
 80044b0:	24000008 	.word	0x24000008
 80044b4:	24000004 	.word	0x24000004
 80044b8:	2400000c 	.word	0x2400000c

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	b089      	sub	sp, #36	@ 0x24
 80044c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044c2:	4bb3      	ldr	r3, [pc, #716]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ca:	2b18      	cmp	r3, #24
 80044cc:	f200 8155 	bhi.w	800477a <HAL_RCC_GetSysClockFreq+0x2be>
 80044d0:	a201      	add	r2, pc, #4	@ (adr r2, 80044d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	0800453d 	.word	0x0800453d
 80044dc:	0800477b 	.word	0x0800477b
 80044e0:	0800477b 	.word	0x0800477b
 80044e4:	0800477b 	.word	0x0800477b
 80044e8:	0800477b 	.word	0x0800477b
 80044ec:	0800477b 	.word	0x0800477b
 80044f0:	0800477b 	.word	0x0800477b
 80044f4:	0800477b 	.word	0x0800477b
 80044f8:	08004563 	.word	0x08004563
 80044fc:	0800477b 	.word	0x0800477b
 8004500:	0800477b 	.word	0x0800477b
 8004504:	0800477b 	.word	0x0800477b
 8004508:	0800477b 	.word	0x0800477b
 800450c:	0800477b 	.word	0x0800477b
 8004510:	0800477b 	.word	0x0800477b
 8004514:	0800477b 	.word	0x0800477b
 8004518:	08004569 	.word	0x08004569
 800451c:	0800477b 	.word	0x0800477b
 8004520:	0800477b 	.word	0x0800477b
 8004524:	0800477b 	.word	0x0800477b
 8004528:	0800477b 	.word	0x0800477b
 800452c:	0800477b 	.word	0x0800477b
 8004530:	0800477b 	.word	0x0800477b
 8004534:	0800477b 	.word	0x0800477b
 8004538:	0800456f 	.word	0x0800456f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800453c:	4b94      	ldr	r3, [pc, #592]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d009      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004548:	4b91      	ldr	r3, [pc, #580]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	4a90      	ldr	r2, [pc, #576]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
 8004558:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800455a:	e111      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800455c:	4b8d      	ldr	r3, [pc, #564]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800455e:	61bb      	str	r3, [r7, #24]
      break;
 8004560:	e10e      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004562:	4b8d      	ldr	r3, [pc, #564]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004564:	61bb      	str	r3, [r7, #24]
      break;
 8004566:	e10b      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004568:	4b8c      	ldr	r3, [pc, #560]	@ (800479c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800456a:	61bb      	str	r3, [r7, #24]
      break;
 800456c:	e108      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800456e:	4b88      	ldr	r3, [pc, #544]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004578:	4b85      	ldr	r3, [pc, #532]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	091b      	lsrs	r3, r3, #4
 800457e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004582:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004584:	4b82      	ldr	r3, [pc, #520]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800458e:	4b80      	ldr	r3, [pc, #512]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	08db      	lsrs	r3, r3, #3
 8004594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80e1 	beq.w	8004774 <HAL_RCC_GetSysClockFreq+0x2b8>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	f000 8083 	beq.w	80046c0 <HAL_RCC_GetSysClockFreq+0x204>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	f200 80a1 	bhi.w	8004704 <HAL_RCC_GetSysClockFreq+0x248>
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x114>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d056      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x1c0>
 80045ce:	e099      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d02d      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	08db      	lsrs	r3, r3, #3
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	4a6b      	ldr	r2, [pc, #428]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	ee07 3a90 	vmov	s15, r3
 80045fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004606:	4b62      	ldr	r3, [pc, #392]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004616:	ed97 6a02 	vldr	s12, [r7, #8]
 800461a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80047a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800461e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800462a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004632:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004636:	e087      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464a:	4b51      	ldr	r3, [pc, #324]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465a:	ed97 6a02 	vldr	s12, [r7, #8]
 800465e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80047a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800466e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800467a:	e065      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800468a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468e:	4b40      	ldr	r3, [pc, #256]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469e:	ed97 6a02 	vldr	s12, [r7, #8]
 80046a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80047a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046be:	e043      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80047ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80046ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80047a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004702:	e021      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	ee07 3a90 	vmov	s15, r3
 800470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004716:	4b1e      	ldr	r3, [pc, #120]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004726:	ed97 6a02 	vldr	s12, [r7, #8]
 800472a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80047a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800472e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800473a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004746:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004748:	4b11      	ldr	r3, [pc, #68]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	0a5b      	lsrs	r3, r3, #9
 800474e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004752:	3301      	adds	r3, #1
 8004754:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004760:	edd7 6a07 	vldr	s13, [r7, #28]
 8004764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476c:	ee17 3a90 	vmov	r3, s15
 8004770:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004772:	e005      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	61bb      	str	r3, [r7, #24]
      break;
 8004778:	e002      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800477a:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800477c:	61bb      	str	r3, [r7, #24]
      break;
 800477e:	bf00      	nop
  }

  return sysclockfreq;
 8004780:	69bb      	ldr	r3, [r7, #24]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3724      	adds	r7, #36	@ 0x24
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	58024400 	.word	0x58024400
 8004794:	03d09000 	.word	0x03d09000
 8004798:	003d0900 	.word	0x003d0900
 800479c:	007a1200 	.word	0x007a1200
 80047a0:	46000000 	.word	0x46000000
 80047a4:	4c742400 	.word	0x4c742400
 80047a8:	4a742400 	.word	0x4a742400
 80047ac:	4af42400 	.word	0x4af42400

080047b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80047b6:	f7ff fe81 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 80047ba:	4602      	mov	r2, r0
 80047bc:	4b10      	ldr	r3, [pc, #64]	@ (8004800 <HAL_RCC_GetHCLKFreq+0x50>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	490f      	ldr	r1, [pc, #60]	@ (8004804 <HAL_RCC_GetHCLKFreq+0x54>)
 80047c8:	5ccb      	ldrb	r3, [r1, r3]
 80047ca:	f003 031f 	and.w	r3, r3, #31
 80047ce:	fa22 f303 	lsr.w	r3, r2, r3
 80047d2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80047d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <HAL_RCC_GetHCLKFreq+0x50>)
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	4a09      	ldr	r2, [pc, #36]	@ (8004804 <HAL_RCC_GetHCLKFreq+0x54>)
 80047de:	5cd3      	ldrb	r3, [r2, r3]
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	4a07      	ldr	r2, [pc, #28]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x58>)
 80047ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047ee:	4a07      	ldr	r2, [pc, #28]	@ (800480c <HAL_RCC_GetHCLKFreq+0x5c>)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047f4:	4b04      	ldr	r3, [pc, #16]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x58>)
 80047f6:	681b      	ldr	r3, [r3, #0]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	58024400 	.word	0x58024400
 8004804:	0800a1b8 	.word	0x0800a1b8
 8004808:	24000008 	.word	0x24000008
 800480c:	24000004 	.word	0x24000004

08004810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004814:	f7ff ffcc 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4904      	ldr	r1, [pc, #16]	@ (8004838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	58024400 	.word	0x58024400
 8004838:	0800a1b8 	.word	0x0800a1b8

0800483c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004840:	f7ff ffb6 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4904      	ldr	r1, [pc, #16]	@ (8004864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	58024400 	.word	0x58024400
 8004864:	0800a1b8 	.word	0x0800a1b8

08004868 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b0c8      	sub	sp, #288	@ 0x120
 800486e:	af00      	add	r7, sp, #0
 8004870:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004874:	2300      	movs	r3, #0
 8004876:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800487a:	2300      	movs	r3, #0
 800487c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800488c:	2500      	movs	r5, #0
 800488e:	ea54 0305 	orrs.w	r3, r4, r5
 8004892:	d049      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800489a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800489e:	d02f      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048a4:	d828      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048aa:	d01a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048b0:	d822      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ba:	d007      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048bc:	e01c      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048be:	4ba7      	ldr	r3, [pc, #668]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	4aa6      	ldr	r2, [pc, #664]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048ca:	e01a      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d0:	3308      	adds	r3, #8
 80048d2:	2102      	movs	r1, #2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fc43 	bl	8006160 <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048e0:	e00f      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048e6:	3328      	adds	r3, #40	@ 0x28
 80048e8:	2102      	movs	r1, #2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 fcea 	bl	80062c4 <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048f6:	e004      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048fe:	e000      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004902:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10a      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800490a:	4b94      	ldr	r3, [pc, #592]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800490c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800490e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004918:	4a90      	ldr	r2, [pc, #576]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800491a:	430b      	orrs	r3, r1
 800491c:	6513      	str	r3, [r2, #80]	@ 0x50
 800491e:	e003      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004920:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004924:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004934:	f04f 0900 	mov.w	r9, #0
 8004938:	ea58 0309 	orrs.w	r3, r8, r9
 800493c:	d047      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800493e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004944:	2b04      	cmp	r3, #4
 8004946:	d82a      	bhi.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004948:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004965 	.word	0x08004965
 8004954:	08004973 	.word	0x08004973
 8004958:	08004989 	.word	0x08004989
 800495c:	080049a7 	.word	0x080049a7
 8004960:	080049a7 	.word	0x080049a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004964:	4b7d      	ldr	r3, [pc, #500]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	4a7c      	ldr	r2, [pc, #496]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800496a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800496e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004970:	e01a      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004976:	3308      	adds	r3, #8
 8004978:	2100      	movs	r1, #0
 800497a:	4618      	mov	r0, r3
 800497c:	f001 fbf0 	bl	8006160 <RCCEx_PLL2_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004986:	e00f      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800498c:	3328      	adds	r3, #40	@ 0x28
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f001 fc97 	bl	80062c4 <RCCEx_PLL3_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800499c:	e004      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80049a4:	e000      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049b0:	4b6a      	ldr	r3, [pc, #424]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b4:	f023 0107 	bic.w	r1, r3, #7
 80049b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049be:	4a67      	ldr	r2, [pc, #412]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80049c4:	e003      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80049ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80049da:	f04f 0b00 	mov.w	fp, #0
 80049de:	ea5a 030b 	orrs.w	r3, sl, fp
 80049e2:	d054      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80049e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80049ee:	d036      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80049f0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80049f4:	d82f      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049fa:	d032      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80049fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a00:	d829      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a04:	d02f      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004a06:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a08:	d825      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a0a:	2b80      	cmp	r3, #128	@ 0x80
 8004a0c:	d018      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004a0e:	2b80      	cmp	r3, #128	@ 0x80
 8004a10:	d821      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004a16:	2b40      	cmp	r3, #64	@ 0x40
 8004a18:	d007      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004a1a:	e01c      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a20:	4a4e      	ldr	r2, [pc, #312]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a28:	e01e      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a2e:	3308      	adds	r3, #8
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 fb94 	bl	8006160 <RCCEx_PLL2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a3e:	e013      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a44:	3328      	adds	r3, #40	@ 0x28
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 fc3b 	bl	80062c4 <RCCEx_PLL3_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004a54:	e008      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a5c:	e004      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004a70:	4b3a      	ldr	r3, [pc, #232]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a74:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7e:	4a37      	ldr	r2, [pc, #220]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a84:	e003      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004aa4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	d05c      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004ab8:	d03b      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004aba:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004abe:	d834      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ac4:	d037      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004ac6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aca:	d82e      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004acc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ad0:	d033      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ad2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ad6:	d828      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004adc:	d01a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae2:	d822      	bhi.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aec:	d007      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004aee:	e01c      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	4a19      	ldr	r2, [pc, #100]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004afc:	e01e      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b02:	3308      	adds	r3, #8
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fb2a 	bl	8006160 <RCCEx_PLL2_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004b12:	e013      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b18:	3328      	adds	r3, #40	@ 0x28
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fbd1 	bl	80062c4 <RCCEx_PLL3_Config>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004b28:	e008      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b30:	e004      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b32:	bf00      	nop
 8004b34:	e002      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b36:	bf00      	nop
 8004b38:	e000      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10d      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004b44:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b48:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b52:	4a02      	ldr	r2, [pc, #8]	@ (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b58:	e006      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004b5a:	bf00      	nop
 8004b5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b82:	460b      	mov	r3, r1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	d03a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b8e:	2b30      	cmp	r3, #48	@ 0x30
 8004b90:	d01f      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004b92:	2b30      	cmp	r3, #48	@ 0x30
 8004b94:	d819      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d00c      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d815      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d019      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d111      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba6:	4bae      	ldr	r3, [pc, #696]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	4aad      	ldr	r2, [pc, #692]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bb2:	e011      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bb8:	3308      	adds	r3, #8
 8004bba:	2102      	movs	r1, #2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 facf 	bl	8006160 <RCCEx_PLL2_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bc8:	e006      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bd0:	e002      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004bd2:	bf00      	nop
 8004bd4:	e000      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004be0:	4b9f      	ldr	r3, [pc, #636]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004be4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bee:	4a9c      	ldr	r2, [pc, #624]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bf4:	e003      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bfa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c14:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	d051      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c28:	d035      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004c2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c2e:	d82e      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c34:	d031      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004c36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c3a:	d828      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c40:	d01a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c46:	d822      	bhi.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004c4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c50:	d007      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004c52:	e01c      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c54:	4b82      	ldr	r3, [pc, #520]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	4a81      	ldr	r2, [pc, #516]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c60:	e01c      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c66:	3308      	adds	r3, #8
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fa78 	bl	8006160 <RCCEx_PLL2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c76:	e011      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c7c:	3328      	adds	r3, #40	@ 0x28
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 fb1f 	bl	80062c4 <RCCEx_PLL3_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c8c:	e006      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c94:	e002      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ca4:	4b6e      	ldr	r3, [pc, #440]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cb2:	4a6b      	ldr	r2, [pc, #428]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cb8:	e003      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004cce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004cd8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	d053      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ce6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cec:	d033      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004cee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf2:	d82c      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004cf4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cf8:	d02f      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004cfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cfe:	d826      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d04:	d02b      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d0a:	d820      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d10:	d012      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004d12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d16:	d81a      	bhi.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d022      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d20:	d115      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d26:	3308      	adds	r3, #8
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 fa18 	bl	8006160 <RCCEx_PLL2_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d36:	e015      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d3c:	3328      	adds	r3, #40	@ 0x28
 8004d3e:	2101      	movs	r1, #1
 8004d40:	4618      	mov	r0, r3
 8004d42:	f001 fabf 	bl	80062c4 <RCCEx_PLL3_Config>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d4c:	e00a      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d54:	e006      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d56:	bf00      	nop
 8004d58:	e004      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d70:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d7a:	4a39      	ldr	r2, [pc, #228]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d80:	e003      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d82:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d86:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004da0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4313      	orrs	r3, r2
 8004da8:	d060      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004db2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004db6:	d039      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004db8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004dbc:	d832      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dc2:	d035      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dc8:	d82c      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dce:	d031      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd4:	d826      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004dd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dda:	d02d      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004ddc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004de0:	d820      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004de2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004de6:	d012      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dec:	d81a      	bhi.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d024      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004df2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004df6:	d115      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 f9ad 	bl	8006160 <RCCEx_PLL2_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e0c:	e017      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e12:	3328      	adds	r3, #40	@ 0x28
 8004e14:	2101      	movs	r1, #1
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 fa54 	bl	80062c4 <RCCEx_PLL3_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e22:	e00c      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e2a:	e008      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e2c:	bf00      	nop
 8004e2e:	e006      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e30:	bf00      	nop
 8004e32:	e004      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e34:	bf00      	nop
 8004e36:	e002      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e38:	bf00      	nop
 8004e3a:	e000      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10e      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e46:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e56:	4a02      	ldr	r2, [pc, #8]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e5c:	e006      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e5e:	bf00      	nop
 8004e60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e74:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e86:	460b      	mov	r3, r1
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	d037      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e96:	d00e      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004e98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e9c:	d816      	bhi.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d018      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004ea2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ea6:	d111      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea8:	4bc4      	ldr	r3, [pc, #784]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	4ac3      	ldr	r2, [pc, #780]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004eb4:	e00f      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eba:	3308      	adds	r3, #8
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 f94e 	bl	8006160 <RCCEx_PLL2_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004eca:	e004      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ed2:	e000      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ede:	4bb7      	ldr	r3, [pc, #732]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004eea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eec:	4ab3      	ldr	r2, [pc, #716]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ef2:	e003      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ef8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	d039      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d81c      	bhi.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004f26:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f69 	.word	0x08004f69
 8004f30:	08004f3d 	.word	0x08004f3d
 8004f34:	08004f4b 	.word	0x08004f4b
 8004f38:	08004f69 	.word	0x08004f69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f3c:	4b9f      	ldr	r3, [pc, #636]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	4a9e      	ldr	r2, [pc, #632]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f48:	e00f      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f4e:	3308      	adds	r3, #8
 8004f50:	2102      	movs	r1, #2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 f904 	bl	8006160 <RCCEx_PLL2_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f5e:	e004      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f66:	e000      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f72:	4b92      	ldr	r3, [pc, #584]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f76:	f023 0103 	bic.w	r1, r3, #3
 8004f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f80:	4a8e      	ldr	r2, [pc, #568]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f82:	430b      	orrs	r3, r1
 8004f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f86:	e003      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fa6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004faa:	460b      	mov	r3, r1
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f000 8099 	beq.w	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb2:	4b83      	ldr	r3, [pc, #524]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a82      	ldr	r2, [pc, #520]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fbe:	f7fe f821 	bl	8003004 <HAL_GetTick>
 8004fc2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc6:	e00b      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc8:	f7fe f81c 	bl	8003004 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b64      	cmp	r3, #100	@ 0x64
 8004fd6:	d903      	bls.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004fde:	e005      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fe0:	4b77      	ldr	r3, [pc, #476]	@ (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0ed      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004fec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d173      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ff4:	4b71      	ldr	r3, [pc, #452]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005000:	4053      	eors	r3, r2
 8005002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d015      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800500a:	4b6c      	ldr	r3, [pc, #432]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800500c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005012:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005016:	4b69      	ldr	r3, [pc, #420]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501a:	4a68      	ldr	r2, [pc, #416]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005020:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005022:	4b66      	ldr	r3, [pc, #408]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005026:	4a65      	ldr	r2, [pc, #404]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800502c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800502e:	4a63      	ldr	r2, [pc, #396]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005034:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005036:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800503a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800503e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005042:	d118      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd ffde 	bl	8003004 <HAL_GetTick>
 8005048:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800504c:	e00d      	b.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504e:	f7fd ffd9 	bl	8003004 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005058:	1ad2      	subs	r2, r2, r3
 800505a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800505e:	429a      	cmp	r2, r3
 8005060:	d903      	bls.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005068:	e005      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800506a:	4b54      	ldr	r3, [pc, #336]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0eb      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005076:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800507a:	2b00      	cmp	r3, #0
 800507c:	d129      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800507e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800508a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800508e:	d10e      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005090:	4b4a      	ldr	r3, [pc, #296]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800509c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050a0:	091a      	lsrs	r2, r3, #4
 80050a2:	4b48      	ldr	r3, [pc, #288]	@ (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	4a45      	ldr	r2, [pc, #276]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6113      	str	r3, [r2, #16]
 80050ac:	e005      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x852>
 80050ae:	4b43      	ldr	r3, [pc, #268]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	4a42      	ldr	r2, [pc, #264]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050b8:	6113      	str	r3, [r2, #16]
 80050ba:	4b40      	ldr	r3, [pc, #256]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050bc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80050be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ca:	4a3c      	ldr	r2, [pc, #240]	@ (80051bc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050cc:	430b      	orrs	r3, r1
 80050ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d0:	e008      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80050da:	e003      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f002 0301 	and.w	r3, r2, #1
 80050f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050f4:	2300      	movs	r3, #0
 80050f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050fe:	460b      	mov	r3, r1
 8005100:	4313      	orrs	r3, r2
 8005102:	f000 8090 	beq.w	8005226 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800510a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800510e:	2b28      	cmp	r3, #40	@ 0x28
 8005110:	d870      	bhi.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005112:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	080051fd 	.word	0x080051fd
 800511c:	080051f5 	.word	0x080051f5
 8005120:	080051f5 	.word	0x080051f5
 8005124:	080051f5 	.word	0x080051f5
 8005128:	080051f5 	.word	0x080051f5
 800512c:	080051f5 	.word	0x080051f5
 8005130:	080051f5 	.word	0x080051f5
 8005134:	080051f5 	.word	0x080051f5
 8005138:	080051c9 	.word	0x080051c9
 800513c:	080051f5 	.word	0x080051f5
 8005140:	080051f5 	.word	0x080051f5
 8005144:	080051f5 	.word	0x080051f5
 8005148:	080051f5 	.word	0x080051f5
 800514c:	080051f5 	.word	0x080051f5
 8005150:	080051f5 	.word	0x080051f5
 8005154:	080051f5 	.word	0x080051f5
 8005158:	080051df 	.word	0x080051df
 800515c:	080051f5 	.word	0x080051f5
 8005160:	080051f5 	.word	0x080051f5
 8005164:	080051f5 	.word	0x080051f5
 8005168:	080051f5 	.word	0x080051f5
 800516c:	080051f5 	.word	0x080051f5
 8005170:	080051f5 	.word	0x080051f5
 8005174:	080051f5 	.word	0x080051f5
 8005178:	080051fd 	.word	0x080051fd
 800517c:	080051f5 	.word	0x080051f5
 8005180:	080051f5 	.word	0x080051f5
 8005184:	080051f5 	.word	0x080051f5
 8005188:	080051f5 	.word	0x080051f5
 800518c:	080051f5 	.word	0x080051f5
 8005190:	080051f5 	.word	0x080051f5
 8005194:	080051f5 	.word	0x080051f5
 8005198:	080051fd 	.word	0x080051fd
 800519c:	080051f5 	.word	0x080051f5
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	080051f5 	.word	0x080051f5
 80051a8:	080051f5 	.word	0x080051f5
 80051ac:	080051f5 	.word	0x080051f5
 80051b0:	080051f5 	.word	0x080051f5
 80051b4:	080051f5 	.word	0x080051f5
 80051b8:	080051fd 	.word	0x080051fd
 80051bc:	58024400 	.word	0x58024400
 80051c0:	58024800 	.word	0x58024800
 80051c4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051cc:	3308      	adds	r3, #8
 80051ce:	2101      	movs	r1, #1
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 ffc5 	bl	8006160 <RCCEx_PLL2_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051dc:	e00f      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051e2:	3328      	adds	r3, #40	@ 0x28
 80051e4:	2101      	movs	r1, #1
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 f86c 	bl	80062c4 <RCCEx_PLL3_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051f2:	e004      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80051fa:	e000      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80051fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005206:	4bc0      	ldr	r3, [pc, #768]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800520e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005216:	4abc      	ldr	r2, [pc, #752]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005218:	430b      	orrs	r3, r1
 800521a:	6553      	str	r3, [r2, #84]	@ 0x54
 800521c:	e003      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005222:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f002 0302 	and.w	r3, r2, #2
 8005232:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005236:	2300      	movs	r3, #0
 8005238:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800523c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005240:	460b      	mov	r3, r1
 8005242:	4313      	orrs	r3, r2
 8005244:	d043      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800524a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800524e:	2b05      	cmp	r3, #5
 8005250:	d824      	bhi.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8005252:	a201      	add	r2, pc, #4	@ (adr r2, 8005258 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	080052a5 	.word	0x080052a5
 800525c:	08005271 	.word	0x08005271
 8005260:	08005287 	.word	0x08005287
 8005264:	080052a5 	.word	0x080052a5
 8005268:	080052a5 	.word	0x080052a5
 800526c:	080052a5 	.word	0x080052a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005274:	3308      	adds	r3, #8
 8005276:	2101      	movs	r1, #1
 8005278:	4618      	mov	r0, r3
 800527a:	f000 ff71 	bl	8006160 <RCCEx_PLL2_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005284:	e00f      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800528a:	3328      	adds	r3, #40	@ 0x28
 800528c:	2101      	movs	r1, #1
 800528e:	4618      	mov	r0, r3
 8005290:	f001 f818 	bl	80062c4 <RCCEx_PLL3_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800529a:	e004      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80052a2:	e000      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80052a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052ae:	4b96      	ldr	r3, [pc, #600]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b2:	f023 0107 	bic.w	r1, r3, #7
 80052b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052be:	4a92      	ldr	r2, [pc, #584]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80052c0:	430b      	orrs	r3, r1
 80052c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80052c4:	e003      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80052ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f002 0304 	and.w	r3, r2, #4
 80052da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052de:	2300      	movs	r3, #0
 80052e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052e4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4313      	orrs	r3, r2
 80052ec:	d043      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052f6:	2b05      	cmp	r3, #5
 80052f8:	d824      	bhi.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80052fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	0800534d 	.word	0x0800534d
 8005304:	08005319 	.word	0x08005319
 8005308:	0800532f 	.word	0x0800532f
 800530c:	0800534d 	.word	0x0800534d
 8005310:	0800534d 	.word	0x0800534d
 8005314:	0800534d 	.word	0x0800534d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800531c:	3308      	adds	r3, #8
 800531e:	2101      	movs	r1, #1
 8005320:	4618      	mov	r0, r3
 8005322:	f000 ff1d 	bl	8006160 <RCCEx_PLL2_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800532c:	e00f      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800532e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005332:	3328      	adds	r3, #40	@ 0x28
 8005334:	2101      	movs	r1, #1
 8005336:	4618      	mov	r0, r3
 8005338:	f000 ffc4 	bl	80062c4 <RCCEx_PLL3_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005342:	e004      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800534a:	e000      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800534c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800534e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10b      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005356:	4b6c      	ldr	r3, [pc, #432]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535a:	f023 0107 	bic.w	r1, r3, #7
 800535e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005362:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005366:	4a68      	ldr	r2, [pc, #416]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005368:	430b      	orrs	r3, r1
 800536a:	6593      	str	r3, [r2, #88]	@ 0x58
 800536c:	e003      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005372:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f002 0320 	and.w	r3, r2, #32
 8005382:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800538c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005390:	460b      	mov	r3, r1
 8005392:	4313      	orrs	r3, r2
 8005394:	d055      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800539a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800539e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053a2:	d033      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80053a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053a8:	d82c      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ae:	d02f      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80053b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b4:	d826      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053ba:	d02b      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80053bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053c0:	d820      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053c6:	d012      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80053c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053cc:	d81a      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d022      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80053d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053d6:	d115      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053dc:	3308      	adds	r3, #8
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 febd 	bl	8006160 <RCCEx_PLL2_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053ec:	e015      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053f2:	3328      	adds	r3, #40	@ 0x28
 80053f4:	2102      	movs	r1, #2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 ff64 	bl	80062c4 <RCCEx_PLL3_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005402:	e00a      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800540a:	e006      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800540c:	bf00      	nop
 800540e:	e004      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005410:	bf00      	nop
 8005412:	e002      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005414:	bf00      	nop
 8005416:	e000      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005422:	4b39      	ldr	r3, [pc, #228]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005426:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800542a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800542e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005432:	4a35      	ldr	r2, [pc, #212]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005434:	430b      	orrs	r3, r1
 8005436:	6553      	str	r3, [r2, #84]	@ 0x54
 8005438:	e003      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800543e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800544e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005452:	2300      	movs	r3, #0
 8005454:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005458:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800545c:	460b      	mov	r3, r1
 800545e:	4313      	orrs	r3, r2
 8005460:	d058      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800546a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800546e:	d033      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005470:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005474:	d82c      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547a:	d02f      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800547c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005480:	d826      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005482:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005486:	d02b      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005488:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800548c:	d820      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800548e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005492:	d012      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8005494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005498:	d81a      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d022      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800549e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a2:	d115      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054a8:	3308      	adds	r3, #8
 80054aa:	2100      	movs	r1, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fe57 	bl	8006160 <RCCEx_PLL2_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054b8:	e015      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054be:	3328      	adds	r3, #40	@ 0x28
 80054c0:	2102      	movs	r1, #2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fefe 	bl	80062c4 <RCCEx_PLL3_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054ce:	e00a      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80054d6:	e006      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054d8:	bf00      	nop
 80054da:	e004      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054dc:	bf00      	nop
 80054de:	e002      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80054e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10e      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ee:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80054f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054fe:	4a02      	ldr	r2, [pc, #8]	@ (8005508 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005500:	430b      	orrs	r3, r1
 8005502:	6593      	str	r3, [r2, #88]	@ 0x58
 8005504:	e006      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8005506:	bf00      	nop
 8005508:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005510:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005524:	2300      	movs	r3, #0
 8005526:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800552a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800552e:	460b      	mov	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	d055      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005538:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800553c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005540:	d033      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005542:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005546:	d82c      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554c:	d02f      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800554e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005552:	d826      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005554:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005558:	d02b      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800555a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800555e:	d820      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005560:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005564:	d012      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8005566:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800556a:	d81a      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d022      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005574:	d115      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800557a:	3308      	adds	r3, #8
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f000 fdee 	bl	8006160 <RCCEx_PLL2_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800558a:	e015      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800558c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005590:	3328      	adds	r3, #40	@ 0x28
 8005592:	2102      	movs	r1, #2
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fe95 	bl	80062c4 <RCCEx_PLL3_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055a0:	e00a      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055aa:	bf00      	nop
 80055ac:	e004      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80055b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10b      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055c0:	4ba1      	ldr	r3, [pc, #644]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80055c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055d0:	4a9d      	ldr	r2, [pc, #628]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055d2:	430b      	orrs	r3, r1
 80055d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055d6:	e003      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80055e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	f002 0308 	and.w	r3, r2, #8
 80055ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055f0:	2300      	movs	r3, #0
 80055f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055fa:	460b      	mov	r3, r1
 80055fc:	4313      	orrs	r3, r2
 80055fe:	d01e      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800560c:	d10c      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800560e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005612:	3328      	adds	r3, #40	@ 0x28
 8005614:	2102      	movs	r1, #2
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fe54 	bl	80062c4 <RCCEx_PLL3_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005628:	4b87      	ldr	r3, [pc, #540]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800562a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005638:	4a83      	ldr	r2, [pc, #524]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800563a:	430b      	orrs	r3, r1
 800563c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800563e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f002 0310 	and.w	r3, r2, #16
 800564a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800564e:	2300      	movs	r3, #0
 8005650:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005654:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005658:	460b      	mov	r3, r1
 800565a:	4313      	orrs	r3, r2
 800565c:	d01e      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800565e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005662:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005666:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800566a:	d10c      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800566c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005670:	3328      	adds	r3, #40	@ 0x28
 8005672:	2102      	movs	r1, #2
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fe25 	bl	80062c4 <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005686:	4b70      	ldr	r3, [pc, #448]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800568e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005692:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005696:	4a6c      	ldr	r2, [pc, #432]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005698:	430b      	orrs	r3, r1
 800569a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800569c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80056a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056ac:	2300      	movs	r3, #0
 80056ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80056b6:	460b      	mov	r3, r1
 80056b8:	4313      	orrs	r3, r2
 80056ba:	d03e      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80056bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056c8:	d022      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80056ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056ce:	d81b      	bhi.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80056d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d8:	d00b      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80056da:	e015      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056e0:	3308      	adds	r3, #8
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fd3b 	bl	8006160 <RCCEx_PLL2_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056f0:	e00f      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056f6:	3328      	adds	r3, #40	@ 0x28
 80056f8:	2102      	movs	r1, #2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fde2 	bl	80062c4 <RCCEx_PLL3_Config>
 8005700:	4603      	mov	r3, r0
 8005702:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005706:	e004      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800570e:	e000      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005712:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10b      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800571a:	4b4b      	ldr	r3, [pc, #300]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800571c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800572a:	4a47      	ldr	r2, [pc, #284]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800572c:	430b      	orrs	r3, r1
 800572e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005730:	e003      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005732:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005736:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800573a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005746:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005748:	2300      	movs	r3, #0
 800574a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800574c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005750:	460b      	mov	r3, r1
 8005752:	4313      	orrs	r3, r2
 8005754:	d03b      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005762:	d01f      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8005764:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005768:	d818      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800576a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800576e:	d003      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005774:	d007      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8005776:	e011      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005778:	4b33      	ldr	r3, [pc, #204]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	4a32      	ldr	r2, [pc, #200]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800577e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005784:	e00f      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800578a:	3328      	adds	r3, #40	@ 0x28
 800578c:	2101      	movs	r1, #1
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fd98 	bl	80062c4 <RCCEx_PLL3_Config>
 8005794:	4603      	mov	r3, r0
 8005796:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800579a:	e004      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80057a2:	e000      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80057a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10b      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057ae:	4b26      	ldr	r3, [pc, #152]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057be:	4a22      	ldr	r2, [pc, #136]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057c0:	430b      	orrs	r3, r1
 80057c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80057c4:	e003      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80057ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057da:	673b      	str	r3, [r7, #112]	@ 0x70
 80057dc:	2300      	movs	r3, #0
 80057de:	677b      	str	r3, [r7, #116]	@ 0x74
 80057e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80057e4:	460b      	mov	r3, r1
 80057e6:	4313      	orrs	r3, r2
 80057e8:	d034      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80057f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057f8:	d007      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80057fa:	e011      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057fc:	4b12      	ldr	r3, [pc, #72]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005800:	4a11      	ldr	r2, [pc, #68]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005808:	e00e      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800580a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800580e:	3308      	adds	r3, #8
 8005810:	2102      	movs	r1, #2
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fca4 	bl	8006160 <RCCEx_PLL2_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800581e:	e003      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005828:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10d      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005830:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005834:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800583c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800583e:	4a02      	ldr	r2, [pc, #8]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005840:	430b      	orrs	r3, r1
 8005842:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005844:	e006      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005846:	bf00      	nop
 8005848:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005850:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005862:	2300      	movs	r3, #0
 8005864:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005866:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800586a:	460b      	mov	r3, r1
 800586c:	4313      	orrs	r3, r2
 800586e:	d00c      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005874:	3328      	adds	r3, #40	@ 0x28
 8005876:	2102      	movs	r1, #2
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fd23 	bl	80062c4 <RCCEx_PLL3_Config>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800588a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005896:	663b      	str	r3, [r7, #96]	@ 0x60
 8005898:	2300      	movs	r3, #0
 800589a:	667b      	str	r3, [r7, #100]	@ 0x64
 800589c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80058a0:	460b      	mov	r3, r1
 80058a2:	4313      	orrs	r3, r2
 80058a4:	d038      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80058a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b2:	d018      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80058b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b8:	d811      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80058ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058be:	d014      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80058c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c4:	d80b      	bhi.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d011      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80058ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ce:	d106      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d0:	4bc3      	ldr	r3, [pc, #780]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	4ac2      	ldr	r2, [pc, #776]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058dc:	e008      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058e4:	e004      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80058e6:	bf00      	nop
 80058e8:	e002      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80058ea:	bf00      	nop
 80058ec:	e000      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80058ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10b      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058f8:	4bb9      	ldr	r3, [pc, #740]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005908:	4ab5      	ldr	r2, [pc, #724]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800590a:	430b      	orrs	r3, r1
 800590c:	6553      	str	r3, [r2, #84]	@ 0x54
 800590e:	e003      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005910:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005914:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005918:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005924:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005926:	2300      	movs	r3, #0
 8005928:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800592a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800592e:	460b      	mov	r3, r1
 8005930:	4313      	orrs	r3, r2
 8005932:	d009      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005934:	4baa      	ldr	r3, [pc, #680]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005938:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800593c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005940:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005942:	4aa7      	ldr	r2, [pc, #668]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005944:	430b      	orrs	r3, r1
 8005946:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005954:	653b      	str	r3, [r7, #80]	@ 0x50
 8005956:	2300      	movs	r3, #0
 8005958:	657b      	str	r3, [r7, #84]	@ 0x54
 800595a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800595e:	460b      	mov	r3, r1
 8005960:	4313      	orrs	r3, r2
 8005962:	d009      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005964:	4b9e      	ldr	r3, [pc, #632]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005968:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800596c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005972:	4a9b      	ldr	r2, [pc, #620]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005974:	430b      	orrs	r3, r1
 8005976:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005984:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005986:	2300      	movs	r3, #0
 8005988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800598a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800598e:	460b      	mov	r3, r1
 8005990:	4313      	orrs	r3, r2
 8005992:	d009      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005994:	4b92      	ldr	r3, [pc, #584]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005998:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800599c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059a2:	4a8f      	ldr	r2, [pc, #572]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80059b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80059b6:	2300      	movs	r3, #0
 80059b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80059be:	460b      	mov	r3, r1
 80059c0:	4313      	orrs	r3, r2
 80059c2:	d00e      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059c4:	4b86      	ldr	r3, [pc, #536]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	4a85      	ldr	r2, [pc, #532]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059ce:	6113      	str	r3, [r2, #16]
 80059d0:	4b83      	ldr	r3, [pc, #524]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059d2:	6919      	ldr	r1, [r3, #16]
 80059d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059dc:	4a80      	ldr	r2, [pc, #512]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80059de:	430b      	orrs	r3, r1
 80059e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ea:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80059ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059f0:	2300      	movs	r3, #0
 80059f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059f8:	460b      	mov	r3, r1
 80059fa:	4313      	orrs	r3, r2
 80059fc:	d009      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059fe:	4b78      	ldr	r3, [pc, #480]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a02:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0c:	4a74      	ldr	r2, [pc, #464]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a20:	2300      	movs	r3, #0
 8005a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a24:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d00a      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a32:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3e:	4a68      	ldr	r2, [pc, #416]	@ (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a56:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	d011      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a64:	3308      	adds	r3, #8
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fb79 	bl	8006160 <RCCEx_PLL2_Config>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	6239      	str	r1, [r7, #32]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a96:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	d011      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fb59 	bl	8006160 <RCCEx_PLL2_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ac0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	2100      	movs	r1, #0
 8005ace:	61b9      	str	r1, [r7, #24]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ada:	460b      	mov	r3, r1
 8005adc:	4313      	orrs	r3, r2
 8005ade:	d011      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	2102      	movs	r1, #2
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fb39 	bl	8006160 <RCCEx_PLL2_Config>
 8005aee:	4603      	mov	r3, r0
 8005af0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005af4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	6139      	str	r1, [r7, #16]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	d011      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b24:	3328      	adds	r3, #40	@ 0x28
 8005b26:	2100      	movs	r1, #0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fbcb 	bl	80062c4 <RCCEx_PLL3_Config>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005b34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	d011      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b64:	3328      	adds	r3, #40	@ 0x28
 8005b66:	2101      	movs	r1, #1
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fbab 	bl	80062c4 <RCCEx_PLL3_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005b74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005b80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	6039      	str	r1, [r7, #0]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	d011      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ba4:	3328      	adds	r3, #40	@ 0x28
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fb8b 	bl	80062c4 <RCCEx_PLL3_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005bb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005bc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005bc4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e000      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bde:	bf00      	nop
 8005be0:	58024400 	.word	0x58024400

08005be4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005be8:	f7fe fde2 	bl	80047b0 <HAL_RCC_GetHCLKFreq>
 8005bec:	4602      	mov	r2, r0
 8005bee:	4b06      	ldr	r3, [pc, #24]	@ (8005c08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	4904      	ldr	r1, [pc, #16]	@ (8005c0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bfa:	5ccb      	ldrb	r3, [r1, r3]
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	0800a1b8 	.word	0x0800a1b8

08005c10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b089      	sub	sp, #36	@ 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c18:	4ba1      	ldr	r3, [pc, #644]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c22:	4b9f      	ldr	r3, [pc, #636]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c26:	0b1b      	lsrs	r3, r3, #12
 8005c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c2e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c32:	091b      	lsrs	r3, r3, #4
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c3a:	4b99      	ldr	r3, [pc, #612]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3e:	08db      	lsrs	r3, r3, #3
 8005c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8111 	beq.w	8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	f000 8083 	beq.w	8005d6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	f200 80a1 	bhi.w	8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d056      	beq.n	8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c7a:	e099      	b.n	8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c7c:	4b88      	ldr	r3, [pc, #544]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d02d      	beq.n	8005ce4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c88:	4b85      	ldr	r3, [pc, #532]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	08db      	lsrs	r3, r3, #3
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	4a84      	ldr	r2, [pc, #528]	@ (8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
 8005c98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ce2:	e087      	b.n	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d26:	e065      	b.n	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3a:	4b59      	ldr	r3, [pc, #356]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d6a:	e043      	b.n	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7e:	4b48      	ldr	r3, [pc, #288]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dae:	e021      	b.n	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc2:	4b37      	ldr	r3, [pc, #220]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005df2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005df4:	4b2a      	ldr	r3, [pc, #168]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	0a5b      	lsrs	r3, r3, #9
 8005dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1a:	ee17 2a90 	vmov	r2, s15
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e22:	4b1f      	ldr	r3, [pc, #124]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e48:	ee17 2a90 	vmov	r2, s15
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e50:	4b13      	ldr	r3, [pc, #76]	@ (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e54:	0e1b      	lsrs	r3, r3, #24
 8005e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e76:	ee17 2a90 	vmov	r2, s15
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e7e:	e008      	b.n	8005e92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	609a      	str	r2, [r3, #8]
}
 8005e92:	bf00      	nop
 8005e94:	3724      	adds	r7, #36	@ 0x24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	03d09000 	.word	0x03d09000
 8005ea8:	46000000 	.word	0x46000000
 8005eac:	4c742400 	.word	0x4c742400
 8005eb0:	4a742400 	.word	0x4a742400
 8005eb4:	4af42400 	.word	0x4af42400

08005eb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b089      	sub	sp, #36	@ 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005eca:	4b9f      	ldr	r3, [pc, #636]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	0d1b      	lsrs	r3, r3, #20
 8005ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ed6:	4b9c      	ldr	r3, [pc, #624]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eda:	0a1b      	lsrs	r3, r3, #8
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005ee2:	4b99      	ldr	r3, [pc, #612]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8111 	beq.w	8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	f000 8083 	beq.w	8006014 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	f200 80a1 	bhi.w	8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d056      	beq.n	8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f22:	e099      	b.n	8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f24:	4b88      	ldr	r3, [pc, #544]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d02d      	beq.n	8005f8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f30:	4b85      	ldr	r3, [pc, #532]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	08db      	lsrs	r3, r3, #3
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	4a84      	ldr	r2, [pc, #528]	@ (800614c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f8a:	e087      	b.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fce:	e065      	b.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006158 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	4b59      	ldr	r3, [pc, #356]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006012:	e043      	b.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800615c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b48      	ldr	r3, [pc, #288]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a03 	vldr	s12, [r7, #12]
 800603a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006056:	e021      	b.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006158 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b37      	ldr	r3, [pc, #220]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a03 	vldr	s12, [r7, #12]
 800607e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800609c:	4b2a      	ldr	r3, [pc, #168]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800609e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a0:	0a5b      	lsrs	r3, r3, #9
 80060a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c2:	ee17 2a90 	vmov	r2, s15
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80060ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ce:	0c1b      	lsrs	r3, r3, #16
 80060d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f0:	ee17 2a90 	vmov	r2, s15
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80060f8:	4b13      	ldr	r3, [pc, #76]	@ (8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fc:	0e1b      	lsrs	r3, r3, #24
 80060fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800610e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006112:	edd7 6a07 	vldr	s13, [r7, #28]
 8006116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800611a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800611e:	ee17 2a90 	vmov	r2, s15
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006126:	e008      	b.n	800613a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	609a      	str	r2, [r3, #8]
}
 800613a:	bf00      	nop
 800613c:	3724      	adds	r7, #36	@ 0x24
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	58024400 	.word	0x58024400
 800614c:	03d09000 	.word	0x03d09000
 8006150:	46000000 	.word	0x46000000
 8006154:	4c742400 	.word	0x4c742400
 8006158:	4a742400 	.word	0x4a742400
 800615c:	4af42400 	.word	0x4af42400

08006160 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800616e:	4b53      	ldr	r3, [pc, #332]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b03      	cmp	r3, #3
 8006178:	d101      	bne.n	800617e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e099      	b.n	80062b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800617e:	4b4f      	ldr	r3, [pc, #316]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a4e      	ldr	r2, [pc, #312]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006184:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800618a:	f7fc ff3b 	bl	8003004 <HAL_GetTick>
 800618e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006190:	e008      	b.n	80061a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006192:	f7fc ff37 	bl	8003004 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e086      	b.n	80062b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061a4:	4b45      	ldr	r3, [pc, #276]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1f0      	bne.n	8006192 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061b0:	4b42      	ldr	r3, [pc, #264]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	031b      	lsls	r3, r3, #12
 80061be:	493f      	ldr	r1, [pc, #252]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	025b      	lsls	r3, r3, #9
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	3b01      	subs	r3, #1
 80061e0:	041b      	lsls	r3, r3, #16
 80061e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	061b      	lsls	r3, r3, #24
 80061f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061f4:	4931      	ldr	r1, [pc, #196]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061fa:	4b30      	ldr	r3, [pc, #192]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	492d      	ldr	r1, [pc, #180]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006208:	4313      	orrs	r3, r2
 800620a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800620c:	4b2b      	ldr	r3, [pc, #172]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 800620e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006210:	f023 0220 	bic.w	r2, r3, #32
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	4928      	ldr	r1, [pc, #160]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 800621a:	4313      	orrs	r3, r2
 800621c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800621e:	4b27      	ldr	r3, [pc, #156]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	4a26      	ldr	r2, [pc, #152]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006224:	f023 0310 	bic.w	r3, r3, #16
 8006228:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800622a:	4b24      	ldr	r3, [pc, #144]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 800622c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800622e:	4b24      	ldr	r3, [pc, #144]	@ (80062c0 <RCCEx_PLL2_Config+0x160>)
 8006230:	4013      	ands	r3, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	69d2      	ldr	r2, [r2, #28]
 8006236:	00d2      	lsls	r2, r2, #3
 8006238:	4920      	ldr	r1, [pc, #128]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 800623a:	4313      	orrs	r3, r2
 800623c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800623e:	4b1f      	ldr	r3, [pc, #124]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006242:	4a1e      	ldr	r2, [pc, #120]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006244:	f043 0310 	orr.w	r3, r3, #16
 8006248:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d106      	bne.n	800625e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006250:	4b1a      	ldr	r3, [pc, #104]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006254:	4a19      	ldr	r2, [pc, #100]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800625a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800625c:	e00f      	b.n	800627e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d106      	bne.n	8006272 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006264:	4b15      	ldr	r3, [pc, #84]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006268:	4a14      	ldr	r2, [pc, #80]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 800626a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800626e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006270:	e005      	b.n	800627e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006272:	4b12      	ldr	r3, [pc, #72]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006276:	4a11      	ldr	r2, [pc, #68]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006278:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800627c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800627e:	4b0f      	ldr	r3, [pc, #60]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a0e      	ldr	r2, [pc, #56]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 8006284:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800628a:	f7fc febb 	bl	8003004 <HAL_GetTick>
 800628e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006290:	e008      	b.n	80062a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006292:	f7fc feb7 	bl	8003004 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e006      	b.n	80062b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062a4:	4b05      	ldr	r3, [pc, #20]	@ (80062bc <RCCEx_PLL2_Config+0x15c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0f0      	beq.n	8006292 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	58024400 	.word	0x58024400
 80062c0:	ffff0007 	.word	0xffff0007

080062c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062d2:	4b53      	ldr	r3, [pc, #332]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80062d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d101      	bne.n	80062e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e099      	b.n	8006416 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a4e      	ldr	r2, [pc, #312]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80062e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ee:	f7fc fe89 	bl	8003004 <HAL_GetTick>
 80062f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062f4:	e008      	b.n	8006308 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062f6:	f7fc fe85 	bl	8003004 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e086      	b.n	8006416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006308:	4b45      	ldr	r3, [pc, #276]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f0      	bne.n	80062f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006314:	4b42      	ldr	r3, [pc, #264]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	051b      	lsls	r3, r3, #20
 8006322:	493f      	ldr	r1, [pc, #252]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 8006324:	4313      	orrs	r3, r2
 8006326:	628b      	str	r3, [r1, #40]	@ 0x28
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	3b01      	subs	r3, #1
 800632e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	3b01      	subs	r3, #1
 8006338:	025b      	lsls	r3, r3, #9
 800633a:	b29b      	uxth	r3, r3
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	3b01      	subs	r3, #1
 8006344:	041b      	lsls	r3, r3, #16
 8006346:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	3b01      	subs	r3, #1
 8006352:	061b      	lsls	r3, r3, #24
 8006354:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006358:	4931      	ldr	r1, [pc, #196]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 800635a:	4313      	orrs	r3, r2
 800635c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800635e:	4b30      	ldr	r3, [pc, #192]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	492d      	ldr	r1, [pc, #180]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 800636c:	4313      	orrs	r3, r2
 800636e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006370:	4b2b      	ldr	r3, [pc, #172]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 8006372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006374:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	4928      	ldr	r1, [pc, #160]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 800637e:	4313      	orrs	r3, r2
 8006380:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006382:	4b27      	ldr	r3, [pc, #156]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 8006384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006386:	4a26      	ldr	r2, [pc, #152]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 8006388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800638c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800638e:	4b24      	ldr	r3, [pc, #144]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 8006390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006392:	4b24      	ldr	r3, [pc, #144]	@ (8006424 <RCCEx_PLL3_Config+0x160>)
 8006394:	4013      	ands	r3, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	69d2      	ldr	r2, [r2, #28]
 800639a:	00d2      	lsls	r2, r2, #3
 800639c:	4920      	ldr	r1, [pc, #128]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80063a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a6:	4a1e      	ldr	r2, [pc, #120]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80063a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80063b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b8:	4a19      	ldr	r2, [pc, #100]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80063ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80063be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063c0:	e00f      	b.n	80063e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d106      	bne.n	80063d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063c8:	4b15      	ldr	r3, [pc, #84]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	4a14      	ldr	r2, [pc, #80]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80063ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063d4:	e005      	b.n	80063e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063d6:	4b12      	ldr	r3, [pc, #72]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	4a11      	ldr	r2, [pc, #68]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80063dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a0e      	ldr	r2, [pc, #56]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 80063e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ee:	f7fc fe09 	bl	8003004 <HAL_GetTick>
 80063f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063f4:	e008      	b.n	8006408 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063f6:	f7fc fe05 	bl	8003004 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e006      	b.n	8006416 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006408:	4b05      	ldr	r3, [pc, #20]	@ (8006420 <RCCEx_PLL3_Config+0x15c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f0      	beq.n	80063f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	58024400 	.word	0x58024400
 8006424:	ffff0007 	.word	0xffff0007

08006428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e049      	b.n	80064ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fc fa8c 	bl	800296c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	4619      	mov	r1, r3
 8006466:	4610      	mov	r0, r2
 8006468:	f001 f9e8 	bl	800783c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e049      	b.n	800657c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d106      	bne.n	8006502 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f841 	bl	8006584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f001 f991 	bl	800783c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <HAL_TIM_PWM_Start+0x24>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	bf14      	ite	ne
 80065b4:	2301      	movne	r3, #1
 80065b6:	2300      	moveq	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	e03c      	b.n	8006636 <HAL_TIM_PWM_Start+0x9e>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d109      	bne.n	80065d6 <HAL_TIM_PWM_Start+0x3e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	bf14      	ite	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	2300      	moveq	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	e02f      	b.n	8006636 <HAL_TIM_PWM_Start+0x9e>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d109      	bne.n	80065f0 <HAL_TIM_PWM_Start+0x58>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	bf14      	ite	ne
 80065e8:	2301      	movne	r3, #1
 80065ea:	2300      	moveq	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	e022      	b.n	8006636 <HAL_TIM_PWM_Start+0x9e>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b0c      	cmp	r3, #12
 80065f4:	d109      	bne.n	800660a <HAL_TIM_PWM_Start+0x72>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b01      	cmp	r3, #1
 8006600:	bf14      	ite	ne
 8006602:	2301      	movne	r3, #1
 8006604:	2300      	moveq	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	e015      	b.n	8006636 <HAL_TIM_PWM_Start+0x9e>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b10      	cmp	r3, #16
 800660e:	d109      	bne.n	8006624 <HAL_TIM_PWM_Start+0x8c>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	bf14      	ite	ne
 800661c:	2301      	movne	r3, #1
 800661e:	2300      	moveq	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	e008      	b.n	8006636 <HAL_TIM_PWM_Start+0x9e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	bf14      	ite	ne
 8006630:	2301      	movne	r3, #1
 8006632:	2300      	moveq	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e0a1      	b.n	8006782 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <HAL_TIM_PWM_Start+0xb6>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800664c:	e023      	b.n	8006696 <HAL_TIM_PWM_Start+0xfe>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d104      	bne.n	800665e <HAL_TIM_PWM_Start+0xc6>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800665c:	e01b      	b.n	8006696 <HAL_TIM_PWM_Start+0xfe>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b08      	cmp	r3, #8
 8006662:	d104      	bne.n	800666e <HAL_TIM_PWM_Start+0xd6>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800666c:	e013      	b.n	8006696 <HAL_TIM_PWM_Start+0xfe>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b0c      	cmp	r3, #12
 8006672:	d104      	bne.n	800667e <HAL_TIM_PWM_Start+0xe6>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800667c:	e00b      	b.n	8006696 <HAL_TIM_PWM_Start+0xfe>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2b10      	cmp	r3, #16
 8006682:	d104      	bne.n	800668e <HAL_TIM_PWM_Start+0xf6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800668c:	e003      	b.n	8006696 <HAL_TIM_PWM_Start+0xfe>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2201      	movs	r2, #1
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 fefa 	bl	8008498 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a38      	ldr	r2, [pc, #224]	@ (800678c <HAL_TIM_PWM_Start+0x1f4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <HAL_TIM_PWM_Start+0x13e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a37      	ldr	r2, [pc, #220]	@ (8006790 <HAL_TIM_PWM_Start+0x1f8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00e      	beq.n	80066d6 <HAL_TIM_PWM_Start+0x13e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a35      	ldr	r2, [pc, #212]	@ (8006794 <HAL_TIM_PWM_Start+0x1fc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d009      	beq.n	80066d6 <HAL_TIM_PWM_Start+0x13e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a34      	ldr	r2, [pc, #208]	@ (8006798 <HAL_TIM_PWM_Start+0x200>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d004      	beq.n	80066d6 <HAL_TIM_PWM_Start+0x13e>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a32      	ldr	r2, [pc, #200]	@ (800679c <HAL_TIM_PWM_Start+0x204>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d101      	bne.n	80066da <HAL_TIM_PWM_Start+0x142>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <HAL_TIM_PWM_Start+0x144>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a25      	ldr	r2, [pc, #148]	@ (800678c <HAL_TIM_PWM_Start+0x1f4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d022      	beq.n	8006740 <HAL_TIM_PWM_Start+0x1a8>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006702:	d01d      	beq.n	8006740 <HAL_TIM_PWM_Start+0x1a8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a25      	ldr	r2, [pc, #148]	@ (80067a0 <HAL_TIM_PWM_Start+0x208>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d018      	beq.n	8006740 <HAL_TIM_PWM_Start+0x1a8>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a24      	ldr	r2, [pc, #144]	@ (80067a4 <HAL_TIM_PWM_Start+0x20c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <HAL_TIM_PWM_Start+0x1a8>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a22      	ldr	r2, [pc, #136]	@ (80067a8 <HAL_TIM_PWM_Start+0x210>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00e      	beq.n	8006740 <HAL_TIM_PWM_Start+0x1a8>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1a      	ldr	r2, [pc, #104]	@ (8006790 <HAL_TIM_PWM_Start+0x1f8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d009      	beq.n	8006740 <HAL_TIM_PWM_Start+0x1a8>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1e      	ldr	r2, [pc, #120]	@ (80067ac <HAL_TIM_PWM_Start+0x214>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d004      	beq.n	8006740 <HAL_TIM_PWM_Start+0x1a8>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a16      	ldr	r2, [pc, #88]	@ (8006794 <HAL_TIM_PWM_Start+0x1fc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d115      	bne.n	800676c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	4b1a      	ldr	r3, [pc, #104]	@ (80067b0 <HAL_TIM_PWM_Start+0x218>)
 8006748:	4013      	ands	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b06      	cmp	r3, #6
 8006750:	d015      	beq.n	800677e <HAL_TIM_PWM_Start+0x1e6>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006758:	d011      	beq.n	800677e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f042 0201 	orr.w	r2, r2, #1
 8006768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676a:	e008      	b.n	800677e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0201 	orr.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	e000      	b.n	8006780 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40010000 	.word	0x40010000
 8006790:	40010400 	.word	0x40010400
 8006794:	40014000 	.word	0x40014000
 8006798:	40014400 	.word	0x40014400
 800679c:	40014800 	.word	0x40014800
 80067a0:	40000400 	.word	0x40000400
 80067a4:	40000800 	.word	0x40000800
 80067a8:	40000c00 	.word	0x40000c00
 80067ac:	40001800 	.word	0x40001800
 80067b0:	00010007 	.word	0x00010007

080067b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e049      	b.n	800685a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d106      	bne.n	80067e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f841 	bl	8006862 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f001 f822 	bl	800783c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
	...

08006878 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d104      	bne.n	8006892 <HAL_TIM_IC_Start+0x1a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800688e:	b2db      	uxtb	r3, r3
 8006890:	e023      	b.n	80068da <HAL_TIM_IC_Start+0x62>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b04      	cmp	r3, #4
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_IC_Start+0x2a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	e01b      	b.n	80068da <HAL_TIM_IC_Start+0x62>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_IC_Start+0x3a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	e013      	b.n	80068da <HAL_TIM_IC_Start+0x62>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b0c      	cmp	r3, #12
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_IC_Start+0x4a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	e00b      	b.n	80068da <HAL_TIM_IC_Start+0x62>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d104      	bne.n	80068d2 <HAL_TIM_IC_Start+0x5a>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	e003      	b.n	80068da <HAL_TIM_IC_Start+0x62>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d104      	bne.n	80068ec <HAL_TIM_IC_Start+0x74>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e013      	b.n	8006914 <HAL_TIM_IC_Start+0x9c>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d104      	bne.n	80068fc <HAL_TIM_IC_Start+0x84>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	e00b      	b.n	8006914 <HAL_TIM_IC_Start+0x9c>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d104      	bne.n	800690c <HAL_TIM_IC_Start+0x94>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006908:	b2db      	uxtb	r3, r3
 800690a:	e003      	b.n	8006914 <HAL_TIM_IC_Start+0x9c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006912:	b2db      	uxtb	r3, r3
 8006914:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d102      	bne.n	8006922 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d001      	beq.n	8006926 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e097      	b.n	8006a56 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <HAL_TIM_IC_Start+0xbe>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006934:	e023      	b.n	800697e <HAL_TIM_IC_Start+0x106>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b04      	cmp	r3, #4
 800693a:	d104      	bne.n	8006946 <HAL_TIM_IC_Start+0xce>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006944:	e01b      	b.n	800697e <HAL_TIM_IC_Start+0x106>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d104      	bne.n	8006956 <HAL_TIM_IC_Start+0xde>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006954:	e013      	b.n	800697e <HAL_TIM_IC_Start+0x106>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b0c      	cmp	r3, #12
 800695a:	d104      	bne.n	8006966 <HAL_TIM_IC_Start+0xee>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006964:	e00b      	b.n	800697e <HAL_TIM_IC_Start+0x106>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b10      	cmp	r3, #16
 800696a:	d104      	bne.n	8006976 <HAL_TIM_IC_Start+0xfe>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006974:	e003      	b.n	800697e <HAL_TIM_IC_Start+0x106>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d104      	bne.n	800698e <HAL_TIM_IC_Start+0x116>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800698c:	e013      	b.n	80069b6 <HAL_TIM_IC_Start+0x13e>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b04      	cmp	r3, #4
 8006992:	d104      	bne.n	800699e <HAL_TIM_IC_Start+0x126>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800699c:	e00b      	b.n	80069b6 <HAL_TIM_IC_Start+0x13e>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d104      	bne.n	80069ae <HAL_TIM_IC_Start+0x136>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069ac:	e003      	b.n	80069b6 <HAL_TIM_IC_Start+0x13e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2202      	movs	r2, #2
 80069b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2201      	movs	r2, #1
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f001 fd6a 	bl	8008498 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a25      	ldr	r2, [pc, #148]	@ (8006a60 <HAL_TIM_IC_Start+0x1e8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d022      	beq.n	8006a14 <HAL_TIM_IC_Start+0x19c>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d6:	d01d      	beq.n	8006a14 <HAL_TIM_IC_Start+0x19c>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a21      	ldr	r2, [pc, #132]	@ (8006a64 <HAL_TIM_IC_Start+0x1ec>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d018      	beq.n	8006a14 <HAL_TIM_IC_Start+0x19c>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a20      	ldr	r2, [pc, #128]	@ (8006a68 <HAL_TIM_IC_Start+0x1f0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d013      	beq.n	8006a14 <HAL_TIM_IC_Start+0x19c>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1e      	ldr	r2, [pc, #120]	@ (8006a6c <HAL_TIM_IC_Start+0x1f4>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00e      	beq.n	8006a14 <HAL_TIM_IC_Start+0x19c>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006a70 <HAL_TIM_IC_Start+0x1f8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d009      	beq.n	8006a14 <HAL_TIM_IC_Start+0x19c>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1b      	ldr	r2, [pc, #108]	@ (8006a74 <HAL_TIM_IC_Start+0x1fc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_TIM_IC_Start+0x19c>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8006a78 <HAL_TIM_IC_Start+0x200>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d115      	bne.n	8006a40 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	4b18      	ldr	r3, [pc, #96]	@ (8006a7c <HAL_TIM_IC_Start+0x204>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b06      	cmp	r3, #6
 8006a24:	d015      	beq.n	8006a52 <HAL_TIM_IC_Start+0x1da>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a2c:	d011      	beq.n	8006a52 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0201 	orr.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3e:	e008      	b.n	8006a52 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	e000      	b.n	8006a54 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40000c00 	.word	0x40000c00
 8006a70:	40010400 	.word	0x40010400
 8006a74:	40001800 	.word	0x40001800
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	00010007 	.word	0x00010007

08006a80 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 fd00 	bl	8008498 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6a1a      	ldr	r2, [r3, #32]
 8006a9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10f      	bne.n	8006ac8 <HAL_TIM_IC_Stop+0x48>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6a1a      	ldr	r2, [r3, #32]
 8006aae:	f240 4344 	movw	r3, #1092	@ 0x444
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d107      	bne.n	8006ac8 <HAL_TIM_IC_Stop+0x48>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0201 	bic.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <HAL_TIM_IC_Stop+0x58>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ad6:	e023      	b.n	8006b20 <HAL_TIM_IC_Stop+0xa0>
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d104      	bne.n	8006ae8 <HAL_TIM_IC_Stop+0x68>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ae6:	e01b      	b.n	8006b20 <HAL_TIM_IC_Stop+0xa0>
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b08      	cmp	r3, #8
 8006aec:	d104      	bne.n	8006af8 <HAL_TIM_IC_Stop+0x78>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006af6:	e013      	b.n	8006b20 <HAL_TIM_IC_Stop+0xa0>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b0c      	cmp	r3, #12
 8006afc:	d104      	bne.n	8006b08 <HAL_TIM_IC_Stop+0x88>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b06:	e00b      	b.n	8006b20 <HAL_TIM_IC_Stop+0xa0>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	2b10      	cmp	r3, #16
 8006b0c:	d104      	bne.n	8006b18 <HAL_TIM_IC_Stop+0x98>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b16:	e003      	b.n	8006b20 <HAL_TIM_IC_Stop+0xa0>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d104      	bne.n	8006b30 <HAL_TIM_IC_Stop+0xb0>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b2e:	e013      	b.n	8006b58 <HAL_TIM_IC_Stop+0xd8>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d104      	bne.n	8006b40 <HAL_TIM_IC_Stop+0xc0>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b3e:	e00b      	b.n	8006b58 <HAL_TIM_IC_Stop+0xd8>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	d104      	bne.n	8006b50 <HAL_TIM_IC_Stop+0xd0>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b4e:	e003      	b.n	8006b58 <HAL_TIM_IC_Stop+0xd8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <HAL_TIM_IC_Start_IT+0x1e>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	e023      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x66>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d104      	bne.n	8006b92 <HAL_TIM_IC_Start_IT+0x2e>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	e01b      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x66>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d104      	bne.n	8006ba2 <HAL_TIM_IC_Start_IT+0x3e>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	e013      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x66>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_IC_Start_IT+0x4e>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	e00b      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x66>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_IC_Start_IT+0x5e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	e003      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x66>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d104      	bne.n	8006bdc <HAL_TIM_IC_Start_IT+0x78>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	e013      	b.n	8006c04 <HAL_TIM_IC_Start_IT+0xa0>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d104      	bne.n	8006bec <HAL_TIM_IC_Start_IT+0x88>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	e00b      	b.n	8006c04 <HAL_TIM_IC_Start_IT+0xa0>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	d104      	bne.n	8006bfc <HAL_TIM_IC_Start_IT+0x98>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	e003      	b.n	8006c04 <HAL_TIM_IC_Start_IT+0xa0>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d102      	bne.n	8006c12 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c0c:	7b7b      	ldrb	r3, [r7, #13]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d001      	beq.n	8006c16 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e0e2      	b.n	8006ddc <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <HAL_TIM_IC_Start_IT+0xc2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c24:	e023      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x10a>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d104      	bne.n	8006c36 <HAL_TIM_IC_Start_IT+0xd2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c34:	e01b      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x10a>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d104      	bne.n	8006c46 <HAL_TIM_IC_Start_IT+0xe2>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c44:	e013      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x10a>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b0c      	cmp	r3, #12
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_IC_Start_IT+0xf2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c54:	e00b      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x10a>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_IC_Start_IT+0x102>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c64:	e003      	b.n	8006c6e <HAL_TIM_IC_Start_IT+0x10a>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_IC_Start_IT+0x11a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c7c:	e013      	b.n	8006ca6 <HAL_TIM_IC_Start_IT+0x142>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d104      	bne.n	8006c8e <HAL_TIM_IC_Start_IT+0x12a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c8c:	e00b      	b.n	8006ca6 <HAL_TIM_IC_Start_IT+0x142>
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d104      	bne.n	8006c9e <HAL_TIM_IC_Start_IT+0x13a>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c9c:	e003      	b.n	8006ca6 <HAL_TIM_IC_Start_IT+0x142>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b0c      	cmp	r3, #12
 8006caa:	d841      	bhi.n	8006d30 <HAL_TIM_IC_Start_IT+0x1cc>
 8006cac:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb4 <HAL_TIM_IC_Start_IT+0x150>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006ce9 	.word	0x08006ce9
 8006cb8:	08006d31 	.word	0x08006d31
 8006cbc:	08006d31 	.word	0x08006d31
 8006cc0:	08006d31 	.word	0x08006d31
 8006cc4:	08006cfb 	.word	0x08006cfb
 8006cc8:	08006d31 	.word	0x08006d31
 8006ccc:	08006d31 	.word	0x08006d31
 8006cd0:	08006d31 	.word	0x08006d31
 8006cd4:	08006d0d 	.word	0x08006d0d
 8006cd8:	08006d31 	.word	0x08006d31
 8006cdc:	08006d31 	.word	0x08006d31
 8006ce0:	08006d31 	.word	0x08006d31
 8006ce4:	08006d1f 	.word	0x08006d1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0202 	orr.w	r2, r2, #2
 8006cf6:	60da      	str	r2, [r3, #12]
      break;
 8006cf8:	e01d      	b.n	8006d36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0204 	orr.w	r2, r2, #4
 8006d08:	60da      	str	r2, [r3, #12]
      break;
 8006d0a:	e014      	b.n	8006d36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f042 0208 	orr.w	r2, r2, #8
 8006d1a:	60da      	str	r2, [r3, #12]
      break;
 8006d1c:	e00b      	b.n	8006d36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 0210 	orr.w	r2, r2, #16
 8006d2c:	60da      	str	r2, [r3, #12]
      break;
 8006d2e:	e002      	b.n	8006d36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
      break;
 8006d34:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d14e      	bne.n	8006dda <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2201      	movs	r2, #1
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 fba7 	bl	8008498 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a25      	ldr	r2, [pc, #148]	@ (8006de4 <HAL_TIM_IC_Start_IT+0x280>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d022      	beq.n	8006d9a <HAL_TIM_IC_Start_IT+0x236>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d5c:	d01d      	beq.n	8006d9a <HAL_TIM_IC_Start_IT+0x236>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a21      	ldr	r2, [pc, #132]	@ (8006de8 <HAL_TIM_IC_Start_IT+0x284>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d018      	beq.n	8006d9a <HAL_TIM_IC_Start_IT+0x236>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dec <HAL_TIM_IC_Start_IT+0x288>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d013      	beq.n	8006d9a <HAL_TIM_IC_Start_IT+0x236>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1e      	ldr	r2, [pc, #120]	@ (8006df0 <HAL_TIM_IC_Start_IT+0x28c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d00e      	beq.n	8006d9a <HAL_TIM_IC_Start_IT+0x236>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <HAL_TIM_IC_Start_IT+0x290>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d009      	beq.n	8006d9a <HAL_TIM_IC_Start_IT+0x236>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8006df8 <HAL_TIM_IC_Start_IT+0x294>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d004      	beq.n	8006d9a <HAL_TIM_IC_Start_IT+0x236>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a19      	ldr	r2, [pc, #100]	@ (8006dfc <HAL_TIM_IC_Start_IT+0x298>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d115      	bne.n	8006dc6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	4b17      	ldr	r3, [pc, #92]	@ (8006e00 <HAL_TIM_IC_Start_IT+0x29c>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b06      	cmp	r3, #6
 8006daa:	d015      	beq.n	8006dd8 <HAL_TIM_IC_Start_IT+0x274>
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006db2:	d011      	beq.n	8006dd8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc4:	e008      	b.n	8006dd8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0201 	orr.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e000      	b.n	8006dda <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	40010000 	.word	0x40010000
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40000800 	.word	0x40000800
 8006df0:	40000c00 	.word	0x40000c00
 8006df4:	40010400 	.word	0x40010400
 8006df8:	40001800 	.word	0x40001800
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	00010007 	.word	0x00010007

08006e04 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b0c      	cmp	r3, #12
 8006e16:	d841      	bhi.n	8006e9c <HAL_TIM_IC_Stop_IT+0x98>
 8006e18:	a201      	add	r2, pc, #4	@ (adr r2, 8006e20 <HAL_TIM_IC_Stop_IT+0x1c>)
 8006e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1e:	bf00      	nop
 8006e20:	08006e55 	.word	0x08006e55
 8006e24:	08006e9d 	.word	0x08006e9d
 8006e28:	08006e9d 	.word	0x08006e9d
 8006e2c:	08006e9d 	.word	0x08006e9d
 8006e30:	08006e67 	.word	0x08006e67
 8006e34:	08006e9d 	.word	0x08006e9d
 8006e38:	08006e9d 	.word	0x08006e9d
 8006e3c:	08006e9d 	.word	0x08006e9d
 8006e40:	08006e79 	.word	0x08006e79
 8006e44:	08006e9d 	.word	0x08006e9d
 8006e48:	08006e9d 	.word	0x08006e9d
 8006e4c:	08006e9d 	.word	0x08006e9d
 8006e50:	08006e8b 	.word	0x08006e8b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0202 	bic.w	r2, r2, #2
 8006e62:	60da      	str	r2, [r3, #12]
      break;
 8006e64:	e01d      	b.n	8006ea2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0204 	bic.w	r2, r2, #4
 8006e74:	60da      	str	r2, [r3, #12]
      break;
 8006e76:	e014      	b.n	8006ea2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0208 	bic.w	r2, r2, #8
 8006e86:	60da      	str	r2, [r3, #12]
      break;
 8006e88:	e00b      	b.n	8006ea2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0210 	bic.w	r2, r2, #16
 8006e98:	60da      	str	r2, [r3, #12]
      break;
 8006e9a:	e002      	b.n	8006ea2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d166      	bne.n	8006f76 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2200      	movs	r2, #0
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 faf1 	bl	8008498 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6a1a      	ldr	r2, [r3, #32]
 8006ebc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10f      	bne.n	8006ee6 <HAL_TIM_IC_Stop_IT+0xe2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	f240 4344 	movw	r3, #1092	@ 0x444
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <HAL_TIM_IC_Stop_IT+0xe2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0201 	bic.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d104      	bne.n	8006ef6 <HAL_TIM_IC_Stop_IT+0xf2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ef4:	e023      	b.n	8006f3e <HAL_TIM_IC_Stop_IT+0x13a>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d104      	bne.n	8006f06 <HAL_TIM_IC_Stop_IT+0x102>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f04:	e01b      	b.n	8006f3e <HAL_TIM_IC_Stop_IT+0x13a>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d104      	bne.n	8006f16 <HAL_TIM_IC_Stop_IT+0x112>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f14:	e013      	b.n	8006f3e <HAL_TIM_IC_Stop_IT+0x13a>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b0c      	cmp	r3, #12
 8006f1a:	d104      	bne.n	8006f26 <HAL_TIM_IC_Stop_IT+0x122>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f24:	e00b      	b.n	8006f3e <HAL_TIM_IC_Stop_IT+0x13a>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d104      	bne.n	8006f36 <HAL_TIM_IC_Stop_IT+0x132>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f34:	e003      	b.n	8006f3e <HAL_TIM_IC_Stop_IT+0x13a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d104      	bne.n	8006f4e <HAL_TIM_IC_Stop_IT+0x14a>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f4c:	e013      	b.n	8006f76 <HAL_TIM_IC_Stop_IT+0x172>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d104      	bne.n	8006f5e <HAL_TIM_IC_Stop_IT+0x15a>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f5c:	e00b      	b.n	8006f76 <HAL_TIM_IC_Stop_IT+0x172>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d104      	bne.n	8006f6e <HAL_TIM_IC_Stop_IT+0x16a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f6c:	e003      	b.n	8006f76 <HAL_TIM_IC_Stop_IT+0x172>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d020      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01b      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0202 	mvn.w	r2, #2
 8006fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fb f894 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8006fd0:	e005      	b.n	8006fde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fc14 	bl	8007800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc1b 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d020      	beq.n	8007030 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d01b      	beq.n	8007030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0204 	mvn.w	r2, #4
 8007000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2202      	movs	r2, #2
 8007006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007012:	2b00      	cmp	r3, #0
 8007014:	d003      	beq.n	800701e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fb f86e 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 800701c:	e005      	b.n	800702a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fbee 	bl	8007800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fbf5 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d020      	beq.n	800707c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01b      	beq.n	800707c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f06f 0208 	mvn.w	r2, #8
 800704c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2204      	movs	r2, #4
 8007052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fb f848 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8007068:	e005      	b.n	8007076 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fbc8 	bl	8007800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fbcf 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 0310 	and.w	r3, r3, #16
 8007082:	2b00      	cmp	r3, #0
 8007084:	d020      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01b      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0210 	mvn.w	r2, #16
 8007098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2208      	movs	r2, #8
 800709e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fb f822 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 80070b4:	e005      	b.n	80070c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fba2 	bl	8007800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fba9 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00c      	beq.n	80070ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0201 	mvn.w	r2, #1
 80070e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fb80 	bl	80077ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00c      	beq.n	800711a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007106:	2b00      	cmp	r3, #0
 8007108:	d007      	beq.n	800711a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 fb09 	bl	800872c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00c      	beq.n	800713e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fb01 	bl	8008740 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00c      	beq.n	8007162 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714e:	2b00      	cmp	r3, #0
 8007150:	d007      	beq.n	8007162 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800715a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fb63 	bl	8007828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00c      	beq.n	8007186 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d007      	beq.n	8007186 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f06f 0220 	mvn.w	r2, #32
 800717e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fac9 	bl	8008718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007186:	bf00      	nop
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b086      	sub	sp, #24
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_TIM_IC_ConfigChannel+0x1e>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e088      	b.n	80072be <HAL_TIM_IC_ConfigChannel+0x130>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d11b      	bne.n	80071f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80071ca:	f000 ff9d 	bl	8008108 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	699a      	ldr	r2, [r3, #24]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 020c 	bic.w	r2, r2, #12
 80071dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6999      	ldr	r1, [r3, #24]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	619a      	str	r2, [r3, #24]
 80071f0:	e060      	b.n	80072b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d11c      	bne.n	8007232 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007208:	f001 f821 	bl	800824e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699a      	ldr	r2, [r3, #24]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800721a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6999      	ldr	r1, [r3, #24]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	021a      	lsls	r2, r3, #8
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	619a      	str	r2, [r3, #24]
 8007230:	e040      	b.n	80072b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b08      	cmp	r3, #8
 8007236:	d11b      	bne.n	8007270 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007248:	f001 f86e 	bl	8008328 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	69da      	ldr	r2, [r3, #28]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 020c 	bic.w	r2, r2, #12
 800725a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	69d9      	ldr	r1, [r3, #28]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	689a      	ldr	r2, [r3, #8]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	61da      	str	r2, [r3, #28]
 800726e:	e021      	b.n	80072b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b0c      	cmp	r3, #12
 8007274:	d11c      	bne.n	80072b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007286:	f001 f88b 	bl	80083a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007298:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69d9      	ldr	r1, [r3, #28]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	021a      	lsls	r2, r3, #8
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	61da      	str	r2, [r3, #28]
 80072ae:	e001      	b.n	80072b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072e2:	2302      	movs	r3, #2
 80072e4:	e0ff      	b.n	80074e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b14      	cmp	r3, #20
 80072f2:	f200 80f0 	bhi.w	80074d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80072f6:	a201      	add	r2, pc, #4	@ (adr r2, 80072fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fc:	08007351 	.word	0x08007351
 8007300:	080074d7 	.word	0x080074d7
 8007304:	080074d7 	.word	0x080074d7
 8007308:	080074d7 	.word	0x080074d7
 800730c:	08007391 	.word	0x08007391
 8007310:	080074d7 	.word	0x080074d7
 8007314:	080074d7 	.word	0x080074d7
 8007318:	080074d7 	.word	0x080074d7
 800731c:	080073d3 	.word	0x080073d3
 8007320:	080074d7 	.word	0x080074d7
 8007324:	080074d7 	.word	0x080074d7
 8007328:	080074d7 	.word	0x080074d7
 800732c:	08007413 	.word	0x08007413
 8007330:	080074d7 	.word	0x080074d7
 8007334:	080074d7 	.word	0x080074d7
 8007338:	080074d7 	.word	0x080074d7
 800733c:	08007455 	.word	0x08007455
 8007340:	080074d7 	.word	0x080074d7
 8007344:	080074d7 	.word	0x080074d7
 8007348:	080074d7 	.word	0x080074d7
 800734c:	08007495 	.word	0x08007495
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fb16 	bl	8007988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0208 	orr.w	r2, r2, #8
 800736a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0204 	bic.w	r2, r2, #4
 800737a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6999      	ldr	r1, [r3, #24]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	619a      	str	r2, [r3, #24]
      break;
 800738e:	e0a5      	b.n	80074dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fb86 	bl	8007aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6999      	ldr	r1, [r3, #24]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	021a      	lsls	r2, r3, #8
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	619a      	str	r2, [r3, #24]
      break;
 80073d0:	e084      	b.n	80074dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fbef 	bl	8007bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69da      	ldr	r2, [r3, #28]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0208 	orr.w	r2, r2, #8
 80073ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69da      	ldr	r2, [r3, #28]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 0204 	bic.w	r2, r2, #4
 80073fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69d9      	ldr	r1, [r3, #28]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	691a      	ldr	r2, [r3, #16]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	61da      	str	r2, [r3, #28]
      break;
 8007410:	e064      	b.n	80074dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68b9      	ldr	r1, [r7, #8]
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fc57 	bl	8007ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800742c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69da      	ldr	r2, [r3, #28]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800743c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69d9      	ldr	r1, [r3, #28]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	021a      	lsls	r2, r3, #8
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	61da      	str	r2, [r3, #28]
      break;
 8007452:	e043      	b.n	80074dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68b9      	ldr	r1, [r7, #8]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fca0 	bl	8007da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0208 	orr.w	r2, r2, #8
 800746e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0204 	bic.w	r2, r2, #4
 800747e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	691a      	ldr	r2, [r3, #16]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007492:	e023      	b.n	80074dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fce4 	bl	8007e68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	021a      	lsls	r2, r3, #8
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80074d4:	e002      	b.n	80074dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
      break;
 80074da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop

080074f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <HAL_TIM_ConfigClockSource+0x1c>
 8007508:	2302      	movs	r3, #2
 800750a:	e0dc      	b.n	80076c6 <HAL_TIM_ConfigClockSource+0x1d6>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	4b6a      	ldr	r3, [pc, #424]	@ (80076d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007528:	4013      	ands	r3, r2
 800752a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a64      	ldr	r2, [pc, #400]	@ (80076d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	f000 80a9 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x1aa>
 8007548:	4a62      	ldr	r2, [pc, #392]	@ (80076d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	f200 80ae 	bhi.w	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007550:	4a61      	ldr	r2, [pc, #388]	@ (80076d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007552:	4293      	cmp	r3, r2
 8007554:	f000 80a1 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x1aa>
 8007558:	4a5f      	ldr	r2, [pc, #380]	@ (80076d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	f200 80a6 	bhi.w	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007560:	4a5e      	ldr	r2, [pc, #376]	@ (80076dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007562:	4293      	cmp	r3, r2
 8007564:	f000 8099 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x1aa>
 8007568:	4a5c      	ldr	r2, [pc, #368]	@ (80076dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800756a:	4293      	cmp	r3, r2
 800756c:	f200 809e 	bhi.w	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007570:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007574:	f000 8091 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x1aa>
 8007578:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800757c:	f200 8096 	bhi.w	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007580:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007584:	f000 8089 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x1aa>
 8007588:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800758c:	f200 808e 	bhi.w	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 8007590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007594:	d03e      	beq.n	8007614 <HAL_TIM_ConfigClockSource+0x124>
 8007596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800759a:	f200 8087 	bhi.w	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 800759e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a2:	f000 8086 	beq.w	80076b2 <HAL_TIM_ConfigClockSource+0x1c2>
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075aa:	d87f      	bhi.n	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 80075ac:	2b70      	cmp	r3, #112	@ 0x70
 80075ae:	d01a      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0xf6>
 80075b0:	2b70      	cmp	r3, #112	@ 0x70
 80075b2:	d87b      	bhi.n	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 80075b4:	2b60      	cmp	r3, #96	@ 0x60
 80075b6:	d050      	beq.n	800765a <HAL_TIM_ConfigClockSource+0x16a>
 80075b8:	2b60      	cmp	r3, #96	@ 0x60
 80075ba:	d877      	bhi.n	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 80075bc:	2b50      	cmp	r3, #80	@ 0x50
 80075be:	d03c      	beq.n	800763a <HAL_TIM_ConfigClockSource+0x14a>
 80075c0:	2b50      	cmp	r3, #80	@ 0x50
 80075c2:	d873      	bhi.n	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 80075c4:	2b40      	cmp	r3, #64	@ 0x40
 80075c6:	d058      	beq.n	800767a <HAL_TIM_ConfigClockSource+0x18a>
 80075c8:	2b40      	cmp	r3, #64	@ 0x40
 80075ca:	d86f      	bhi.n	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 80075cc:	2b30      	cmp	r3, #48	@ 0x30
 80075ce:	d064      	beq.n	800769a <HAL_TIM_ConfigClockSource+0x1aa>
 80075d0:	2b30      	cmp	r3, #48	@ 0x30
 80075d2:	d86b      	bhi.n	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d060      	beq.n	800769a <HAL_TIM_ConfigClockSource+0x1aa>
 80075d8:	2b20      	cmp	r3, #32
 80075da:	d867      	bhi.n	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d05c      	beq.n	800769a <HAL_TIM_ConfigClockSource+0x1aa>
 80075e0:	2b10      	cmp	r3, #16
 80075e2:	d05a      	beq.n	800769a <HAL_TIM_ConfigClockSource+0x1aa>
 80075e4:	e062      	b.n	80076ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075f6:	f000 ff2f 	bl	8008458 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	609a      	str	r2, [r3, #8]
      break;
 8007612:	e04f      	b.n	80076b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007624:	f000 ff18 	bl	8008458 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007636:	609a      	str	r2, [r3, #8]
      break;
 8007638:	e03c      	b.n	80076b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007646:	461a      	mov	r2, r3
 8007648:	f000 fdd2 	bl	80081f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2150      	movs	r1, #80	@ 0x50
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fee2 	bl	800841c <TIM_ITRx_SetConfig>
      break;
 8007658:	e02c      	b.n	80076b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007666:	461a      	mov	r2, r3
 8007668:	f000 fe2e 	bl	80082c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2160      	movs	r1, #96	@ 0x60
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fed2 	bl	800841c <TIM_ITRx_SetConfig>
      break;
 8007678:	e01c      	b.n	80076b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007686:	461a      	mov	r2, r3
 8007688:	f000 fdb2 	bl	80081f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2140      	movs	r1, #64	@ 0x40
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fec2 	bl	800841c <TIM_ITRx_SetConfig>
      break;
 8007698:	e00c      	b.n	80076b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f000 feb9 	bl	800841c <TIM_ITRx_SetConfig>
      break;
 80076aa:	e003      	b.n	80076b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	73fb      	strb	r3, [r7, #15]
      break;
 80076b0:	e000      	b.n	80076b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80076b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	ffceff88 	.word	0xffceff88
 80076d4:	00100040 	.word	0x00100040
 80076d8:	00100030 	.word	0x00100030
 80076dc:	00100020 	.word	0x00100020

080076e0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e031      	b.n	800775c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fc12 	bl	8007f34 <TIM_SlaveTimer_SetConfig>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d009      	beq.n	800772a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e018      	b.n	800775c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007738:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68da      	ldr	r2, [r3, #12]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007748:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b0c      	cmp	r3, #12
 8007776:	d831      	bhi.n	80077dc <HAL_TIM_ReadCapturedValue+0x78>
 8007778:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <HAL_TIM_ReadCapturedValue+0x1c>)
 800777a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777e:	bf00      	nop
 8007780:	080077b5 	.word	0x080077b5
 8007784:	080077dd 	.word	0x080077dd
 8007788:	080077dd 	.word	0x080077dd
 800778c:	080077dd 	.word	0x080077dd
 8007790:	080077bf 	.word	0x080077bf
 8007794:	080077dd 	.word	0x080077dd
 8007798:	080077dd 	.word	0x080077dd
 800779c:	080077dd 	.word	0x080077dd
 80077a0:	080077c9 	.word	0x080077c9
 80077a4:	080077dd 	.word	0x080077dd
 80077a8:	080077dd 	.word	0x080077dd
 80077ac:	080077dd 	.word	0x080077dd
 80077b0:	080077d3 	.word	0x080077d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ba:	60fb      	str	r3, [r7, #12]

      break;
 80077bc:	e00f      	b.n	80077de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c4:	60fb      	str	r3, [r7, #12]

      break;
 80077c6:	e00a      	b.n	80077de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ce:	60fb      	str	r3, [r7, #12]

      break;
 80077d0:	e005      	b.n	80077de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d8:	60fb      	str	r3, [r7, #12]

      break;
 80077da:	e000      	b.n	80077de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80077dc:	bf00      	nop
  }

  return tmpreg;
 80077de:	68fb      	ldr	r3, [r7, #12]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a46      	ldr	r2, [pc, #280]	@ (8007968 <TIM_Base_SetConfig+0x12c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d013      	beq.n	800787c <TIM_Base_SetConfig+0x40>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785a:	d00f      	beq.n	800787c <TIM_Base_SetConfig+0x40>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a43      	ldr	r2, [pc, #268]	@ (800796c <TIM_Base_SetConfig+0x130>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00b      	beq.n	800787c <TIM_Base_SetConfig+0x40>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a42      	ldr	r2, [pc, #264]	@ (8007970 <TIM_Base_SetConfig+0x134>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d007      	beq.n	800787c <TIM_Base_SetConfig+0x40>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a41      	ldr	r2, [pc, #260]	@ (8007974 <TIM_Base_SetConfig+0x138>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d003      	beq.n	800787c <TIM_Base_SetConfig+0x40>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a40      	ldr	r2, [pc, #256]	@ (8007978 <TIM_Base_SetConfig+0x13c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d108      	bne.n	800788e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a35      	ldr	r2, [pc, #212]	@ (8007968 <TIM_Base_SetConfig+0x12c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d01f      	beq.n	80078d6 <TIM_Base_SetConfig+0x9a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800789c:	d01b      	beq.n	80078d6 <TIM_Base_SetConfig+0x9a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a32      	ldr	r2, [pc, #200]	@ (800796c <TIM_Base_SetConfig+0x130>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d017      	beq.n	80078d6 <TIM_Base_SetConfig+0x9a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a31      	ldr	r2, [pc, #196]	@ (8007970 <TIM_Base_SetConfig+0x134>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <TIM_Base_SetConfig+0x9a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a30      	ldr	r2, [pc, #192]	@ (8007974 <TIM_Base_SetConfig+0x138>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00f      	beq.n	80078d6 <TIM_Base_SetConfig+0x9a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a2f      	ldr	r2, [pc, #188]	@ (8007978 <TIM_Base_SetConfig+0x13c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00b      	beq.n	80078d6 <TIM_Base_SetConfig+0x9a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2e      	ldr	r2, [pc, #184]	@ (800797c <TIM_Base_SetConfig+0x140>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d007      	beq.n	80078d6 <TIM_Base_SetConfig+0x9a>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2d      	ldr	r2, [pc, #180]	@ (8007980 <TIM_Base_SetConfig+0x144>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <TIM_Base_SetConfig+0x9a>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2c      	ldr	r2, [pc, #176]	@ (8007984 <TIM_Base_SetConfig+0x148>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d108      	bne.n	80078e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a16      	ldr	r2, [pc, #88]	@ (8007968 <TIM_Base_SetConfig+0x12c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00f      	beq.n	8007934 <TIM_Base_SetConfig+0xf8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a18      	ldr	r2, [pc, #96]	@ (8007978 <TIM_Base_SetConfig+0x13c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d00b      	beq.n	8007934 <TIM_Base_SetConfig+0xf8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a17      	ldr	r2, [pc, #92]	@ (800797c <TIM_Base_SetConfig+0x140>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d007      	beq.n	8007934 <TIM_Base_SetConfig+0xf8>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a16      	ldr	r2, [pc, #88]	@ (8007980 <TIM_Base_SetConfig+0x144>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d003      	beq.n	8007934 <TIM_Base_SetConfig+0xf8>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a15      	ldr	r2, [pc, #84]	@ (8007984 <TIM_Base_SetConfig+0x148>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d103      	bne.n	800793c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b01      	cmp	r3, #1
 800794c:	d105      	bne.n	800795a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	f023 0201 	bic.w	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	611a      	str	r2, [r3, #16]
  }
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40010000 	.word	0x40010000
 800796c:	40000400 	.word	0x40000400
 8007970:	40000800 	.word	0x40000800
 8007974:	40000c00 	.word	0x40000c00
 8007978:	40010400 	.word	0x40010400
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800

08007988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	f023 0201 	bic.w	r2, r3, #1
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4b37      	ldr	r3, [pc, #220]	@ (8007a90 <TIM_OC1_SetConfig+0x108>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0303 	bic.w	r3, r3, #3
 80079be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f023 0302 	bic.w	r3, r3, #2
 80079d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4313      	orrs	r3, r2
 80079da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a2d      	ldr	r2, [pc, #180]	@ (8007a94 <TIM_OC1_SetConfig+0x10c>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d00f      	beq.n	8007a04 <TIM_OC1_SetConfig+0x7c>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a2c      	ldr	r2, [pc, #176]	@ (8007a98 <TIM_OC1_SetConfig+0x110>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00b      	beq.n	8007a04 <TIM_OC1_SetConfig+0x7c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a2b      	ldr	r2, [pc, #172]	@ (8007a9c <TIM_OC1_SetConfig+0x114>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d007      	beq.n	8007a04 <TIM_OC1_SetConfig+0x7c>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa0 <TIM_OC1_SetConfig+0x118>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d003      	beq.n	8007a04 <TIM_OC1_SetConfig+0x7c>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a29      	ldr	r2, [pc, #164]	@ (8007aa4 <TIM_OC1_SetConfig+0x11c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d10c      	bne.n	8007a1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f023 0308 	bic.w	r3, r3, #8
 8007a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f023 0304 	bic.w	r3, r3, #4
 8007a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a1c      	ldr	r2, [pc, #112]	@ (8007a94 <TIM_OC1_SetConfig+0x10c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00f      	beq.n	8007a46 <TIM_OC1_SetConfig+0xbe>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a1b      	ldr	r2, [pc, #108]	@ (8007a98 <TIM_OC1_SetConfig+0x110>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d00b      	beq.n	8007a46 <TIM_OC1_SetConfig+0xbe>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a1a      	ldr	r2, [pc, #104]	@ (8007a9c <TIM_OC1_SetConfig+0x114>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d007      	beq.n	8007a46 <TIM_OC1_SetConfig+0xbe>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a19      	ldr	r2, [pc, #100]	@ (8007aa0 <TIM_OC1_SetConfig+0x118>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d003      	beq.n	8007a46 <TIM_OC1_SetConfig+0xbe>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a18      	ldr	r2, [pc, #96]	@ (8007aa4 <TIM_OC1_SetConfig+0x11c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d111      	bne.n	8007a6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	621a      	str	r2, [r3, #32]
}
 8007a84:	bf00      	nop
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	fffeff8f 	.word	0xfffeff8f
 8007a94:	40010000 	.word	0x40010000
 8007a98:	40010400 	.word	0x40010400
 8007a9c:	40014000 	.word	0x40014000
 8007aa0:	40014400 	.word	0x40014400
 8007aa4:	40014800 	.word	0x40014800

08007aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	f023 0210 	bic.w	r2, r3, #16
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4b34      	ldr	r3, [pc, #208]	@ (8007ba4 <TIM_OC2_SetConfig+0xfc>)
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f023 0320 	bic.w	r3, r3, #32
 8007af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a29      	ldr	r2, [pc, #164]	@ (8007ba8 <TIM_OC2_SetConfig+0x100>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_OC2_SetConfig+0x68>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a28      	ldr	r2, [pc, #160]	@ (8007bac <TIM_OC2_SetConfig+0x104>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d10d      	bne.n	8007b2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	011b      	lsls	r3, r3, #4
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba8 <TIM_OC2_SetConfig+0x100>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d00f      	beq.n	8007b54 <TIM_OC2_SetConfig+0xac>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a1d      	ldr	r2, [pc, #116]	@ (8007bac <TIM_OC2_SetConfig+0x104>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d00b      	beq.n	8007b54 <TIM_OC2_SetConfig+0xac>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb0 <TIM_OC2_SetConfig+0x108>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d007      	beq.n	8007b54 <TIM_OC2_SetConfig+0xac>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb4 <TIM_OC2_SetConfig+0x10c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d003      	beq.n	8007b54 <TIM_OC2_SetConfig+0xac>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8007bb8 <TIM_OC2_SetConfig+0x110>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d113      	bne.n	8007b7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	621a      	str	r2, [r3, #32]
}
 8007b96:	bf00      	nop
 8007b98:	371c      	adds	r7, #28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	feff8fff 	.word	0xfeff8fff
 8007ba8:	40010000 	.word	0x40010000
 8007bac:	40010400 	.word	0x40010400
 8007bb0:	40014000 	.word	0x40014000
 8007bb4:	40014400 	.word	0x40014400
 8007bb8:	40014800 	.word	0x40014800

08007bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	4b33      	ldr	r3, [pc, #204]	@ (8007cb4 <TIM_OC3_SetConfig+0xf8>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a28      	ldr	r2, [pc, #160]	@ (8007cb8 <TIM_OC3_SetConfig+0xfc>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d003      	beq.n	8007c22 <TIM_OC3_SetConfig+0x66>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a27      	ldr	r2, [pc, #156]	@ (8007cbc <TIM_OC3_SetConfig+0x100>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d10d      	bne.n	8007c3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a1d      	ldr	r2, [pc, #116]	@ (8007cb8 <TIM_OC3_SetConfig+0xfc>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00f      	beq.n	8007c66 <TIM_OC3_SetConfig+0xaa>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1c      	ldr	r2, [pc, #112]	@ (8007cbc <TIM_OC3_SetConfig+0x100>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00b      	beq.n	8007c66 <TIM_OC3_SetConfig+0xaa>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1b      	ldr	r2, [pc, #108]	@ (8007cc0 <TIM_OC3_SetConfig+0x104>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d007      	beq.n	8007c66 <TIM_OC3_SetConfig+0xaa>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a1a      	ldr	r2, [pc, #104]	@ (8007cc4 <TIM_OC3_SetConfig+0x108>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_OC3_SetConfig+0xaa>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a19      	ldr	r2, [pc, #100]	@ (8007cc8 <TIM_OC3_SetConfig+0x10c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d113      	bne.n	8007c8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	621a      	str	r2, [r3, #32]
}
 8007ca8:	bf00      	nop
 8007caa:	371c      	adds	r7, #28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	fffeff8f 	.word	0xfffeff8f
 8007cb8:	40010000 	.word	0x40010000
 8007cbc:	40010400 	.word	0x40010400
 8007cc0:	40014000 	.word	0x40014000
 8007cc4:	40014400 	.word	0x40014400
 8007cc8:	40014800 	.word	0x40014800

08007ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4b24      	ldr	r3, [pc, #144]	@ (8007d88 <TIM_OC4_SetConfig+0xbc>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	031b      	lsls	r3, r3, #12
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a19      	ldr	r2, [pc, #100]	@ (8007d8c <TIM_OC4_SetConfig+0xc0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00f      	beq.n	8007d4c <TIM_OC4_SetConfig+0x80>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a18      	ldr	r2, [pc, #96]	@ (8007d90 <TIM_OC4_SetConfig+0xc4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00b      	beq.n	8007d4c <TIM_OC4_SetConfig+0x80>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a17      	ldr	r2, [pc, #92]	@ (8007d94 <TIM_OC4_SetConfig+0xc8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d007      	beq.n	8007d4c <TIM_OC4_SetConfig+0x80>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a16      	ldr	r2, [pc, #88]	@ (8007d98 <TIM_OC4_SetConfig+0xcc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d003      	beq.n	8007d4c <TIM_OC4_SetConfig+0x80>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a15      	ldr	r2, [pc, #84]	@ (8007d9c <TIM_OC4_SetConfig+0xd0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d109      	bne.n	8007d60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	019b      	lsls	r3, r3, #6
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	621a      	str	r2, [r3, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	feff8fff 	.word	0xfeff8fff
 8007d8c:	40010000 	.word	0x40010000
 8007d90:	40010400 	.word	0x40010400
 8007d94:	40014000 	.word	0x40014000
 8007d98:	40014400 	.word	0x40014400
 8007d9c:	40014800 	.word	0x40014800

08007da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4b21      	ldr	r3, [pc, #132]	@ (8007e50 <TIM_OC5_SetConfig+0xb0>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007de0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a18      	ldr	r2, [pc, #96]	@ (8007e54 <TIM_OC5_SetConfig+0xb4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d00f      	beq.n	8007e16 <TIM_OC5_SetConfig+0x76>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a17      	ldr	r2, [pc, #92]	@ (8007e58 <TIM_OC5_SetConfig+0xb8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00b      	beq.n	8007e16 <TIM_OC5_SetConfig+0x76>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a16      	ldr	r2, [pc, #88]	@ (8007e5c <TIM_OC5_SetConfig+0xbc>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d007      	beq.n	8007e16 <TIM_OC5_SetConfig+0x76>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a15      	ldr	r2, [pc, #84]	@ (8007e60 <TIM_OC5_SetConfig+0xc0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d003      	beq.n	8007e16 <TIM_OC5_SetConfig+0x76>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a14      	ldr	r2, [pc, #80]	@ (8007e64 <TIM_OC5_SetConfig+0xc4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d109      	bne.n	8007e2a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	021b      	lsls	r3, r3, #8
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	621a      	str	r2, [r3, #32]
}
 8007e44:	bf00      	nop
 8007e46:	371c      	adds	r7, #28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	fffeff8f 	.word	0xfffeff8f
 8007e54:	40010000 	.word	0x40010000
 8007e58:	40010400 	.word	0x40010400
 8007e5c:	40014000 	.word	0x40014000
 8007e60:	40014400 	.word	0x40014400
 8007e64:	40014800 	.word	0x40014800

08007e68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	4b22      	ldr	r3, [pc, #136]	@ (8007f1c <TIM_OC6_SetConfig+0xb4>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007eaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	051b      	lsls	r3, r3, #20
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a19      	ldr	r2, [pc, #100]	@ (8007f20 <TIM_OC6_SetConfig+0xb8>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00f      	beq.n	8007ee0 <TIM_OC6_SetConfig+0x78>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a18      	ldr	r2, [pc, #96]	@ (8007f24 <TIM_OC6_SetConfig+0xbc>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00b      	beq.n	8007ee0 <TIM_OC6_SetConfig+0x78>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a17      	ldr	r2, [pc, #92]	@ (8007f28 <TIM_OC6_SetConfig+0xc0>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d007      	beq.n	8007ee0 <TIM_OC6_SetConfig+0x78>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a16      	ldr	r2, [pc, #88]	@ (8007f2c <TIM_OC6_SetConfig+0xc4>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d003      	beq.n	8007ee0 <TIM_OC6_SetConfig+0x78>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a15      	ldr	r2, [pc, #84]	@ (8007f30 <TIM_OC6_SetConfig+0xc8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d109      	bne.n	8007ef4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	029b      	lsls	r3, r3, #10
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	621a      	str	r2, [r3, #32]
}
 8007f0e:	bf00      	nop
 8007f10:	371c      	adds	r7, #28
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	feff8fff 	.word	0xfeff8fff
 8007f20:	40010000 	.word	0x40010000
 8007f24:	40010400 	.word	0x40010400
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400
 8007f30:	40014800 	.word	0x40014800

08007f34 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	4b65      	ldr	r3, [pc, #404]	@ (80080e4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8007f4e:	4013      	ands	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4b62      	ldr	r3, [pc, #392]	@ (80080e8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	4a5c      	ldr	r2, [pc, #368]	@ (80080ec <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	f000 80ab 	beq.w	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007f82:	4a5a      	ldr	r2, [pc, #360]	@ (80080ec <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	f200 80a4 	bhi.w	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8007f8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f8e:	f000 80a3 	beq.w	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007f92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f96:	f200 809c 	bhi.w	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8007f9a:	4a55      	ldr	r2, [pc, #340]	@ (80080f0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	f000 809b 	beq.w	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007fa2:	4a53      	ldr	r2, [pc, #332]	@ (80080f0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	f200 8094 	bhi.w	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8007faa:	4a52      	ldr	r2, [pc, #328]	@ (80080f4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	f000 8093 	beq.w	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007fb2:	4a50      	ldr	r2, [pc, #320]	@ (80080f4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	f200 808c 	bhi.w	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8007fba:	4a4f      	ldr	r2, [pc, #316]	@ (80080f8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	f000 808b 	beq.w	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007fc2:	4a4d      	ldr	r2, [pc, #308]	@ (80080f8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	f200 8084 	bhi.w	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8007fca:	4a4c      	ldr	r2, [pc, #304]	@ (80080fc <TIM_SlaveTimer_SetConfig+0x1c8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	f000 8083 	beq.w	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80080fc <TIM_SlaveTimer_SetConfig+0x1c8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d87c      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8007fd8:	4a49      	ldr	r2, [pc, #292]	@ (8008100 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d07c      	beq.n	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007fde:	4a48      	ldr	r2, [pc, #288]	@ (8008100 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d876      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8007fe4:	4a47      	ldr	r2, [pc, #284]	@ (8008104 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d076      	beq.n	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007fea:	4a46      	ldr	r2, [pc, #280]	@ (8008104 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d870      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8007ff0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ff4:	d070      	beq.n	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8007ff6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007ffa:	d86a      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8007ffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008000:	d06a      	beq.n	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008006:	d864      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008008:	2b70      	cmp	r3, #112	@ 0x70
 800800a:	d01a      	beq.n	8008042 <TIM_SlaveTimer_SetConfig+0x10e>
 800800c:	2b70      	cmp	r3, #112	@ 0x70
 800800e:	d860      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008010:	2b60      	cmp	r3, #96	@ 0x60
 8008012:	d054      	beq.n	80080be <TIM_SlaveTimer_SetConfig+0x18a>
 8008014:	2b60      	cmp	r3, #96	@ 0x60
 8008016:	d85c      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008018:	2b50      	cmp	r3, #80	@ 0x50
 800801a:	d046      	beq.n	80080aa <TIM_SlaveTimer_SetConfig+0x176>
 800801c:	2b50      	cmp	r3, #80	@ 0x50
 800801e:	d858      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008020:	2b40      	cmp	r3, #64	@ 0x40
 8008022:	d019      	beq.n	8008058 <TIM_SlaveTimer_SetConfig+0x124>
 8008024:	2b40      	cmp	r3, #64	@ 0x40
 8008026:	d854      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008028:	2b30      	cmp	r3, #48	@ 0x30
 800802a:	d055      	beq.n	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800802c:	2b30      	cmp	r3, #48	@ 0x30
 800802e:	d850      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008030:	2b20      	cmp	r3, #32
 8008032:	d051      	beq.n	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008034:	2b20      	cmp	r3, #32
 8008036:	d84c      	bhi.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d04d      	beq.n	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800803c:	2b10      	cmp	r3, #16
 800803e:	d04b      	beq.n	80080d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008040:	e047      	b.n	80080d2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008052:	f000 fa01 	bl	8008458 <TIM_ETR_SetConfig>
      break;
 8008056:	e040      	b.n	80080da <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b05      	cmp	r3, #5
 800805e:	d101      	bne.n	8008064 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e03b      	b.n	80080dc <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6a1a      	ldr	r2, [r3, #32]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0201 	bic.w	r2, r2, #1
 800807a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800808a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	4313      	orrs	r3, r2
 8008096:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	621a      	str	r2, [r3, #32]
      break;
 80080a8:	e017      	b.n	80080da <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080b6:	461a      	mov	r2, r3
 80080b8:	f000 f89a 	bl	80081f0 <TIM_TI1_ConfigInputStage>
      break;
 80080bc:	e00d      	b.n	80080da <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ca:	461a      	mov	r2, r3
 80080cc:	f000 f8fc 	bl	80082c8 <TIM_TI2_ConfigInputStage>
      break;
 80080d0:	e003      	b.n	80080da <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	75fb      	strb	r3, [r7, #23]
      break;
 80080d6:	e000      	b.n	80080da <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80080d8:	bf00      	nop
  }

  return status;
 80080da:	7dfb      	ldrb	r3, [r7, #23]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	ffcfff8f 	.word	0xffcfff8f
 80080e8:	fffefff8 	.word	0xfffefff8
 80080ec:	00200010 	.word	0x00200010
 80080f0:	00100070 	.word	0x00100070
 80080f4:	00100060 	.word	0x00100060
 80080f8:	00100050 	.word	0x00100050
 80080fc:	00100040 	.word	0x00100040
 8008100:	00100030 	.word	0x00100030
 8008104:	00100020 	.word	0x00100020

08008108 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	f023 0201 	bic.w	r2, r3, #1
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4a28      	ldr	r2, [pc, #160]	@ (80081d4 <TIM_TI1_SetConfig+0xcc>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d01b      	beq.n	800816e <TIM_TI1_SetConfig+0x66>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800813c:	d017      	beq.n	800816e <TIM_TI1_SetConfig+0x66>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a25      	ldr	r2, [pc, #148]	@ (80081d8 <TIM_TI1_SetConfig+0xd0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d013      	beq.n	800816e <TIM_TI1_SetConfig+0x66>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4a24      	ldr	r2, [pc, #144]	@ (80081dc <TIM_TI1_SetConfig+0xd4>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00f      	beq.n	800816e <TIM_TI1_SetConfig+0x66>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4a23      	ldr	r2, [pc, #140]	@ (80081e0 <TIM_TI1_SetConfig+0xd8>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00b      	beq.n	800816e <TIM_TI1_SetConfig+0x66>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4a22      	ldr	r2, [pc, #136]	@ (80081e4 <TIM_TI1_SetConfig+0xdc>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d007      	beq.n	800816e <TIM_TI1_SetConfig+0x66>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4a21      	ldr	r2, [pc, #132]	@ (80081e8 <TIM_TI1_SetConfig+0xe0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d003      	beq.n	800816e <TIM_TI1_SetConfig+0x66>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a20      	ldr	r2, [pc, #128]	@ (80081ec <TIM_TI1_SetConfig+0xe4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d101      	bne.n	8008172 <TIM_TI1_SetConfig+0x6a>
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <TIM_TI1_SetConfig+0x6c>
 8008172:	2300      	movs	r3, #0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d008      	beq.n	800818a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f023 0303 	bic.w	r3, r3, #3
 800817e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4313      	orrs	r3, r2
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e003      	b.n	8008192 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f043 0301 	orr.w	r3, r3, #1
 8008190:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	011b      	lsls	r3, r3, #4
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f023 030a 	bic.w	r3, r3, #10
 80081ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f003 030a 	and.w	r3, r3, #10
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	621a      	str	r2, [r3, #32]
}
 80081c6:	bf00      	nop
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40010000 	.word	0x40010000
 80081d8:	40000400 	.word	0x40000400
 80081dc:	40000800 	.word	0x40000800
 80081e0:	40000c00 	.word	0x40000c00
 80081e4:	40010400 	.word	0x40010400
 80081e8:	40001800 	.word	0x40001800
 80081ec:	40014000 	.word	0x40014000

080081f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f023 0201 	bic.w	r2, r3, #1
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800821a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	011b      	lsls	r3, r3, #4
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	4313      	orrs	r3, r2
 8008224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f023 030a 	bic.w	r3, r3, #10
 800822c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	621a      	str	r2, [r3, #32]
}
 8008242:	bf00      	nop
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800824e:	b480      	push	{r7}
 8008250:	b087      	sub	sp, #28
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	607a      	str	r2, [r7, #4]
 800825a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f023 0210 	bic.w	r2, r3, #16
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800827a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	021b      	lsls	r3, r3, #8
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	4313      	orrs	r3, r2
 8008284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800828c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	031b      	lsls	r3, r3, #12
 8008292:	b29b      	uxth	r3, r3
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	621a      	str	r2, [r3, #32]
}
 80082bc:	bf00      	nop
 80082be:	371c      	adds	r7, #28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	f023 0210 	bic.w	r2, r3, #16
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	031b      	lsls	r3, r3, #12
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008304:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	011b      	lsls	r3, r3, #4
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	4313      	orrs	r3, r2
 800830e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	621a      	str	r2, [r3, #32]
}
 800831c:	bf00      	nop
 800831e:	371c      	adds	r7, #28
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a1b      	ldr	r3, [r3, #32]
 800833a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f023 0303 	bic.w	r3, r3, #3
 8008354:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4313      	orrs	r3, r2
 800835c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008364:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	b2db      	uxtb	r3, r3
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008378:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	021b      	lsls	r3, r3, #8
 800837e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	4313      	orrs	r3, r2
 8008386:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	621a      	str	r2, [r3, #32]
}
 8008394:	bf00      	nop
 8008396:	371c      	adds	r7, #28
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	031b      	lsls	r3, r3, #12
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80083f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	031b      	lsls	r3, r3, #12
 80083f8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
	...

0800841c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	4b09      	ldr	r3, [pc, #36]	@ (8008454 <TIM_ITRx_SetConfig+0x38>)
 8008430:	4013      	ands	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4313      	orrs	r3, r2
 800843a:	f043 0307 	orr.w	r3, r3, #7
 800843e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	609a      	str	r2, [r3, #8]
}
 8008446:	bf00      	nop
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	ffcfff8f 	.word	0xffcfff8f

08008458 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008472:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	021a      	lsls	r2, r3, #8
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	431a      	orrs	r2, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	4313      	orrs	r3, r2
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	609a      	str	r2, [r3, #8]
}
 800848c:	bf00      	nop
 800848e:	371c      	adds	r7, #28
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f003 031f 	and.w	r3, r3, #31
 80084aa:	2201      	movs	r2, #1
 80084ac:	fa02 f303 	lsl.w	r3, r2, r3
 80084b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6a1a      	ldr	r2, [r3, #32]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	43db      	mvns	r3, r3
 80084ba:	401a      	ands	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a1a      	ldr	r2, [r3, #32]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	fa01 f303 	lsl.w	r3, r1, r3
 80084d0:	431a      	orrs	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	621a      	str	r2, [r3, #32]
}
 80084d6:	bf00      	nop
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
	...

080084e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084f8:	2302      	movs	r3, #2
 80084fa:	e06d      	b.n	80085d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a30      	ldr	r2, [pc, #192]	@ (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d004      	beq.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a2f      	ldr	r2, [pc, #188]	@ (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d108      	bne.n	8008542 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008536:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	4313      	orrs	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008548:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	4313      	orrs	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a20      	ldr	r2, [pc, #128]	@ (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d022      	beq.n	80085ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800856e:	d01d      	beq.n	80085ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a1d      	ldr	r2, [pc, #116]	@ (80085ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d018      	beq.n	80085ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a1c      	ldr	r2, [pc, #112]	@ (80085f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d013      	beq.n	80085ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a1a      	ldr	r2, [pc, #104]	@ (80085f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00e      	beq.n	80085ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a15      	ldr	r2, [pc, #84]	@ (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d009      	beq.n	80085ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a16      	ldr	r2, [pc, #88]	@ (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d004      	beq.n	80085ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a15      	ldr	r2, [pc, #84]	@ (80085fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d10c      	bne.n	80085c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	40010000 	.word	0x40010000
 80085e8:	40010400 	.word	0x40010400
 80085ec:	40000400 	.word	0x40000400
 80085f0:	40000800 	.word	0x40000800
 80085f4:	40000c00 	.word	0x40000c00
 80085f8:	40001800 	.word	0x40001800
 80085fc:	40014000 	.word	0x40014000

08008600 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008614:	2b01      	cmp	r3, #1
 8008616:	d101      	bne.n	800861c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008618:	2302      	movs	r3, #2
 800861a:	e073      	b.n	8008704 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	4313      	orrs	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4313      	orrs	r3, r2
 800865a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	041b      	lsls	r3, r3, #16
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a19      	ldr	r2, [pc, #100]	@ (8008710 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a18      	ldr	r2, [pc, #96]	@ (8008714 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d11c      	bne.n	80086f2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c2:	051b      	lsls	r3, r3, #20
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	40010000 	.word	0x40010000
 8008714:	40010400 	.word	0x40010400

08008718 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e042      	b.n	80087ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800876c:	2b00      	cmp	r3, #0
 800876e:	d106      	bne.n	800877e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7fa fa59 	bl	8002c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2224      	movs	r2, #36	@ 0x24
 8008782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0201 	bic.w	r2, r2, #1
 8008794:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fe94 	bl	80094cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f825 	bl	80087f4 <UART_SetConfig>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d101      	bne.n	80087b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e01b      	b.n	80087ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f042 0201 	orr.w	r2, r2, #1
 80087e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 ff13 	bl	8009610 <UART_CheckIdleState>
 80087ea:	4603      	mov	r3, r0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087f8:	b092      	sub	sp, #72	@ 0x48
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	689a      	ldr	r2, [r3, #8]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	431a      	orrs	r2, r3
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	431a      	orrs	r2, r3
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	4313      	orrs	r3, r2
 800881a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	4bbe      	ldr	r3, [pc, #760]	@ (8008b1c <UART_SetConfig+0x328>)
 8008824:	4013      	ands	r3, r2
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	6812      	ldr	r2, [r2, #0]
 800882a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800882c:	430b      	orrs	r3, r1
 800882e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	68da      	ldr	r2, [r3, #12]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4ab3      	ldr	r2, [pc, #716]	@ (8008b20 <UART_SetConfig+0x32c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d004      	beq.n	8008860 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800885c:	4313      	orrs	r3, r2
 800885e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689a      	ldr	r2, [r3, #8]
 8008866:	4baf      	ldr	r3, [pc, #700]	@ (8008b24 <UART_SetConfig+0x330>)
 8008868:	4013      	ands	r3, r2
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	6812      	ldr	r2, [r2, #0]
 800886e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008870:	430b      	orrs	r3, r1
 8008872:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887a:	f023 010f 	bic.w	r1, r3, #15
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4aa6      	ldr	r2, [pc, #664]	@ (8008b28 <UART_SetConfig+0x334>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d177      	bne.n	8008984 <UART_SetConfig+0x190>
 8008894:	4ba5      	ldr	r3, [pc, #660]	@ (8008b2c <UART_SetConfig+0x338>)
 8008896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008898:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800889c:	2b28      	cmp	r3, #40	@ 0x28
 800889e:	d86d      	bhi.n	800897c <UART_SetConfig+0x188>
 80088a0:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <UART_SetConfig+0xb4>)
 80088a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a6:	bf00      	nop
 80088a8:	0800894d 	.word	0x0800894d
 80088ac:	0800897d 	.word	0x0800897d
 80088b0:	0800897d 	.word	0x0800897d
 80088b4:	0800897d 	.word	0x0800897d
 80088b8:	0800897d 	.word	0x0800897d
 80088bc:	0800897d 	.word	0x0800897d
 80088c0:	0800897d 	.word	0x0800897d
 80088c4:	0800897d 	.word	0x0800897d
 80088c8:	08008955 	.word	0x08008955
 80088cc:	0800897d 	.word	0x0800897d
 80088d0:	0800897d 	.word	0x0800897d
 80088d4:	0800897d 	.word	0x0800897d
 80088d8:	0800897d 	.word	0x0800897d
 80088dc:	0800897d 	.word	0x0800897d
 80088e0:	0800897d 	.word	0x0800897d
 80088e4:	0800897d 	.word	0x0800897d
 80088e8:	0800895d 	.word	0x0800895d
 80088ec:	0800897d 	.word	0x0800897d
 80088f0:	0800897d 	.word	0x0800897d
 80088f4:	0800897d 	.word	0x0800897d
 80088f8:	0800897d 	.word	0x0800897d
 80088fc:	0800897d 	.word	0x0800897d
 8008900:	0800897d 	.word	0x0800897d
 8008904:	0800897d 	.word	0x0800897d
 8008908:	08008965 	.word	0x08008965
 800890c:	0800897d 	.word	0x0800897d
 8008910:	0800897d 	.word	0x0800897d
 8008914:	0800897d 	.word	0x0800897d
 8008918:	0800897d 	.word	0x0800897d
 800891c:	0800897d 	.word	0x0800897d
 8008920:	0800897d 	.word	0x0800897d
 8008924:	0800897d 	.word	0x0800897d
 8008928:	0800896d 	.word	0x0800896d
 800892c:	0800897d 	.word	0x0800897d
 8008930:	0800897d 	.word	0x0800897d
 8008934:	0800897d 	.word	0x0800897d
 8008938:	0800897d 	.word	0x0800897d
 800893c:	0800897d 	.word	0x0800897d
 8008940:	0800897d 	.word	0x0800897d
 8008944:	0800897d 	.word	0x0800897d
 8008948:	08008975 	.word	0x08008975
 800894c:	2301      	movs	r3, #1
 800894e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008952:	e326      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008954:	2304      	movs	r3, #4
 8008956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800895a:	e322      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 800895c:	2308      	movs	r3, #8
 800895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008962:	e31e      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008964:	2310      	movs	r3, #16
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896a:	e31a      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 800896c:	2320      	movs	r3, #32
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008972:	e316      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008974:	2340      	movs	r3, #64	@ 0x40
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897a:	e312      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 800897c:	2380      	movs	r3, #128	@ 0x80
 800897e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008982:	e30e      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a69      	ldr	r2, [pc, #420]	@ (8008b30 <UART_SetConfig+0x33c>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d130      	bne.n	80089f0 <UART_SetConfig+0x1fc>
 800898e:	4b67      	ldr	r3, [pc, #412]	@ (8008b2c <UART_SetConfig+0x338>)
 8008990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b05      	cmp	r3, #5
 8008998:	d826      	bhi.n	80089e8 <UART_SetConfig+0x1f4>
 800899a:	a201      	add	r2, pc, #4	@ (adr r2, 80089a0 <UART_SetConfig+0x1ac>)
 800899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a0:	080089b9 	.word	0x080089b9
 80089a4:	080089c1 	.word	0x080089c1
 80089a8:	080089c9 	.word	0x080089c9
 80089ac:	080089d1 	.word	0x080089d1
 80089b0:	080089d9 	.word	0x080089d9
 80089b4:	080089e1 	.word	0x080089e1
 80089b8:	2300      	movs	r3, #0
 80089ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089be:	e2f0      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 80089c0:	2304      	movs	r3, #4
 80089c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089c6:	e2ec      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 80089c8:	2308      	movs	r3, #8
 80089ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ce:	e2e8      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 80089d0:	2310      	movs	r3, #16
 80089d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089d6:	e2e4      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 80089d8:	2320      	movs	r3, #32
 80089da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089de:	e2e0      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 80089e0:	2340      	movs	r3, #64	@ 0x40
 80089e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e6:	e2dc      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 80089e8:	2380      	movs	r3, #128	@ 0x80
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ee:	e2d8      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a4f      	ldr	r2, [pc, #316]	@ (8008b34 <UART_SetConfig+0x340>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d130      	bne.n	8008a5c <UART_SetConfig+0x268>
 80089fa:	4b4c      	ldr	r3, [pc, #304]	@ (8008b2c <UART_SetConfig+0x338>)
 80089fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089fe:	f003 0307 	and.w	r3, r3, #7
 8008a02:	2b05      	cmp	r3, #5
 8008a04:	d826      	bhi.n	8008a54 <UART_SetConfig+0x260>
 8008a06:	a201      	add	r2, pc, #4	@ (adr r2, 8008a0c <UART_SetConfig+0x218>)
 8008a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0c:	08008a25 	.word	0x08008a25
 8008a10:	08008a2d 	.word	0x08008a2d
 8008a14:	08008a35 	.word	0x08008a35
 8008a18:	08008a3d 	.word	0x08008a3d
 8008a1c:	08008a45 	.word	0x08008a45
 8008a20:	08008a4d 	.word	0x08008a4d
 8008a24:	2300      	movs	r3, #0
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2a:	e2ba      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008a2c:	2304      	movs	r3, #4
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a32:	e2b6      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008a34:	2308      	movs	r3, #8
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a3a:	e2b2      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008a3c:	2310      	movs	r3, #16
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a42:	e2ae      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008a44:	2320      	movs	r3, #32
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4a:	e2aa      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008a4c:	2340      	movs	r3, #64	@ 0x40
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a52:	e2a6      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008a54:	2380      	movs	r3, #128	@ 0x80
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5a:	e2a2      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a35      	ldr	r2, [pc, #212]	@ (8008b38 <UART_SetConfig+0x344>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d130      	bne.n	8008ac8 <UART_SetConfig+0x2d4>
 8008a66:	4b31      	ldr	r3, [pc, #196]	@ (8008b2c <UART_SetConfig+0x338>)
 8008a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	2b05      	cmp	r3, #5
 8008a70:	d826      	bhi.n	8008ac0 <UART_SetConfig+0x2cc>
 8008a72:	a201      	add	r2, pc, #4	@ (adr r2, 8008a78 <UART_SetConfig+0x284>)
 8008a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a78:	08008a91 	.word	0x08008a91
 8008a7c:	08008a99 	.word	0x08008a99
 8008a80:	08008aa1 	.word	0x08008aa1
 8008a84:	08008aa9 	.word	0x08008aa9
 8008a88:	08008ab1 	.word	0x08008ab1
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	2300      	movs	r3, #0
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a96:	e284      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008a98:	2304      	movs	r3, #4
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a9e:	e280      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008aa0:	2308      	movs	r3, #8
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aa6:	e27c      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008aa8:	2310      	movs	r3, #16
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aae:	e278      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008ab0:	2320      	movs	r3, #32
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab6:	e274      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008ab8:	2340      	movs	r3, #64	@ 0x40
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008abe:	e270      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008ac0:	2380      	movs	r3, #128	@ 0x80
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac6:	e26c      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1b      	ldr	r2, [pc, #108]	@ (8008b3c <UART_SetConfig+0x348>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d142      	bne.n	8008b58 <UART_SetConfig+0x364>
 8008ad2:	4b16      	ldr	r3, [pc, #88]	@ (8008b2c <UART_SetConfig+0x338>)
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	2b05      	cmp	r3, #5
 8008adc:	d838      	bhi.n	8008b50 <UART_SetConfig+0x35c>
 8008ade:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae4 <UART_SetConfig+0x2f0>)
 8008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae4:	08008afd 	.word	0x08008afd
 8008ae8:	08008b05 	.word	0x08008b05
 8008aec:	08008b0d 	.word	0x08008b0d
 8008af0:	08008b15 	.word	0x08008b15
 8008af4:	08008b41 	.word	0x08008b41
 8008af8:	08008b49 	.word	0x08008b49
 8008afc:	2300      	movs	r3, #0
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b02:	e24e      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008b04:	2304      	movs	r3, #4
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0a:	e24a      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008b0c:	2308      	movs	r3, #8
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b12:	e246      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008b14:	2310      	movs	r3, #16
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1a:	e242      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008b1c:	cfff69f3 	.word	0xcfff69f3
 8008b20:	58000c00 	.word	0x58000c00
 8008b24:	11fff4ff 	.word	0x11fff4ff
 8008b28:	40011000 	.word	0x40011000
 8008b2c:	58024400 	.word	0x58024400
 8008b30:	40004400 	.word	0x40004400
 8008b34:	40004800 	.word	0x40004800
 8008b38:	40004c00 	.word	0x40004c00
 8008b3c:	40005000 	.word	0x40005000
 8008b40:	2320      	movs	r3, #32
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b46:	e22c      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008b48:	2340      	movs	r3, #64	@ 0x40
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4e:	e228      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008b50:	2380      	movs	r3, #128	@ 0x80
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b56:	e224      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4ab1      	ldr	r2, [pc, #708]	@ (8008e24 <UART_SetConfig+0x630>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d176      	bne.n	8008c50 <UART_SetConfig+0x45c>
 8008b62:	4bb1      	ldr	r3, [pc, #708]	@ (8008e28 <UART_SetConfig+0x634>)
 8008b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b6a:	2b28      	cmp	r3, #40	@ 0x28
 8008b6c:	d86c      	bhi.n	8008c48 <UART_SetConfig+0x454>
 8008b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b74 <UART_SetConfig+0x380>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008c19 	.word	0x08008c19
 8008b78:	08008c49 	.word	0x08008c49
 8008b7c:	08008c49 	.word	0x08008c49
 8008b80:	08008c49 	.word	0x08008c49
 8008b84:	08008c49 	.word	0x08008c49
 8008b88:	08008c49 	.word	0x08008c49
 8008b8c:	08008c49 	.word	0x08008c49
 8008b90:	08008c49 	.word	0x08008c49
 8008b94:	08008c21 	.word	0x08008c21
 8008b98:	08008c49 	.word	0x08008c49
 8008b9c:	08008c49 	.word	0x08008c49
 8008ba0:	08008c49 	.word	0x08008c49
 8008ba4:	08008c49 	.word	0x08008c49
 8008ba8:	08008c49 	.word	0x08008c49
 8008bac:	08008c49 	.word	0x08008c49
 8008bb0:	08008c49 	.word	0x08008c49
 8008bb4:	08008c29 	.word	0x08008c29
 8008bb8:	08008c49 	.word	0x08008c49
 8008bbc:	08008c49 	.word	0x08008c49
 8008bc0:	08008c49 	.word	0x08008c49
 8008bc4:	08008c49 	.word	0x08008c49
 8008bc8:	08008c49 	.word	0x08008c49
 8008bcc:	08008c49 	.word	0x08008c49
 8008bd0:	08008c49 	.word	0x08008c49
 8008bd4:	08008c31 	.word	0x08008c31
 8008bd8:	08008c49 	.word	0x08008c49
 8008bdc:	08008c49 	.word	0x08008c49
 8008be0:	08008c49 	.word	0x08008c49
 8008be4:	08008c49 	.word	0x08008c49
 8008be8:	08008c49 	.word	0x08008c49
 8008bec:	08008c49 	.word	0x08008c49
 8008bf0:	08008c49 	.word	0x08008c49
 8008bf4:	08008c39 	.word	0x08008c39
 8008bf8:	08008c49 	.word	0x08008c49
 8008bfc:	08008c49 	.word	0x08008c49
 8008c00:	08008c49 	.word	0x08008c49
 8008c04:	08008c49 	.word	0x08008c49
 8008c08:	08008c49 	.word	0x08008c49
 8008c0c:	08008c49 	.word	0x08008c49
 8008c10:	08008c49 	.word	0x08008c49
 8008c14:	08008c41 	.word	0x08008c41
 8008c18:	2301      	movs	r3, #1
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e1c0      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008c20:	2304      	movs	r3, #4
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c26:	e1bc      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008c28:	2308      	movs	r3, #8
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2e:	e1b8      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008c30:	2310      	movs	r3, #16
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c36:	e1b4      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008c38:	2320      	movs	r3, #32
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3e:	e1b0      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008c40:	2340      	movs	r3, #64	@ 0x40
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c46:	e1ac      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008c48:	2380      	movs	r3, #128	@ 0x80
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e1a8      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a75      	ldr	r2, [pc, #468]	@ (8008e2c <UART_SetConfig+0x638>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d130      	bne.n	8008cbc <UART_SetConfig+0x4c8>
 8008c5a:	4b73      	ldr	r3, [pc, #460]	@ (8008e28 <UART_SetConfig+0x634>)
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	2b05      	cmp	r3, #5
 8008c64:	d826      	bhi.n	8008cb4 <UART_SetConfig+0x4c0>
 8008c66:	a201      	add	r2, pc, #4	@ (adr r2, 8008c6c <UART_SetConfig+0x478>)
 8008c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6c:	08008c85 	.word	0x08008c85
 8008c70:	08008c8d 	.word	0x08008c8d
 8008c74:	08008c95 	.word	0x08008c95
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008ca5 	.word	0x08008ca5
 8008c80:	08008cad 	.word	0x08008cad
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8a:	e18a      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c92:	e186      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008c94:	2308      	movs	r3, #8
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9a:	e182      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008c9c:	2310      	movs	r3, #16
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca2:	e17e      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008ca4:	2320      	movs	r3, #32
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008caa:	e17a      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008cac:	2340      	movs	r3, #64	@ 0x40
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb2:	e176      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008cb4:	2380      	movs	r3, #128	@ 0x80
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cba:	e172      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a5b      	ldr	r2, [pc, #364]	@ (8008e30 <UART_SetConfig+0x63c>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d130      	bne.n	8008d28 <UART_SetConfig+0x534>
 8008cc6:	4b58      	ldr	r3, [pc, #352]	@ (8008e28 <UART_SetConfig+0x634>)
 8008cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d826      	bhi.n	8008d20 <UART_SetConfig+0x52c>
 8008cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd8 <UART_SetConfig+0x4e4>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008cf1 	.word	0x08008cf1
 8008cdc:	08008cf9 	.word	0x08008cf9
 8008ce0:	08008d01 	.word	0x08008d01
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d19 	.word	0x08008d19
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf6:	e154      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfe:	e150      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008d00:	2308      	movs	r3, #8
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d06:	e14c      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008d08:	2310      	movs	r3, #16
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0e:	e148      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008d10:	2320      	movs	r3, #32
 8008d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d16:	e144      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008d18:	2340      	movs	r3, #64	@ 0x40
 8008d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1e:	e140      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008d20:	2380      	movs	r3, #128	@ 0x80
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d26:	e13c      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a41      	ldr	r2, [pc, #260]	@ (8008e34 <UART_SetConfig+0x640>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	f040 8082 	bne.w	8008e38 <UART_SetConfig+0x644>
 8008d34:	4b3c      	ldr	r3, [pc, #240]	@ (8008e28 <UART_SetConfig+0x634>)
 8008d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d3c:	2b28      	cmp	r3, #40	@ 0x28
 8008d3e:	d86d      	bhi.n	8008e1c <UART_SetConfig+0x628>
 8008d40:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <UART_SetConfig+0x554>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008ded 	.word	0x08008ded
 8008d4c:	08008e1d 	.word	0x08008e1d
 8008d50:	08008e1d 	.word	0x08008e1d
 8008d54:	08008e1d 	.word	0x08008e1d
 8008d58:	08008e1d 	.word	0x08008e1d
 8008d5c:	08008e1d 	.word	0x08008e1d
 8008d60:	08008e1d 	.word	0x08008e1d
 8008d64:	08008e1d 	.word	0x08008e1d
 8008d68:	08008df5 	.word	0x08008df5
 8008d6c:	08008e1d 	.word	0x08008e1d
 8008d70:	08008e1d 	.word	0x08008e1d
 8008d74:	08008e1d 	.word	0x08008e1d
 8008d78:	08008e1d 	.word	0x08008e1d
 8008d7c:	08008e1d 	.word	0x08008e1d
 8008d80:	08008e1d 	.word	0x08008e1d
 8008d84:	08008e1d 	.word	0x08008e1d
 8008d88:	08008dfd 	.word	0x08008dfd
 8008d8c:	08008e1d 	.word	0x08008e1d
 8008d90:	08008e1d 	.word	0x08008e1d
 8008d94:	08008e1d 	.word	0x08008e1d
 8008d98:	08008e1d 	.word	0x08008e1d
 8008d9c:	08008e1d 	.word	0x08008e1d
 8008da0:	08008e1d 	.word	0x08008e1d
 8008da4:	08008e1d 	.word	0x08008e1d
 8008da8:	08008e05 	.word	0x08008e05
 8008dac:	08008e1d 	.word	0x08008e1d
 8008db0:	08008e1d 	.word	0x08008e1d
 8008db4:	08008e1d 	.word	0x08008e1d
 8008db8:	08008e1d 	.word	0x08008e1d
 8008dbc:	08008e1d 	.word	0x08008e1d
 8008dc0:	08008e1d 	.word	0x08008e1d
 8008dc4:	08008e1d 	.word	0x08008e1d
 8008dc8:	08008e0d 	.word	0x08008e0d
 8008dcc:	08008e1d 	.word	0x08008e1d
 8008dd0:	08008e1d 	.word	0x08008e1d
 8008dd4:	08008e1d 	.word	0x08008e1d
 8008dd8:	08008e1d 	.word	0x08008e1d
 8008ddc:	08008e1d 	.word	0x08008e1d
 8008de0:	08008e1d 	.word	0x08008e1d
 8008de4:	08008e1d 	.word	0x08008e1d
 8008de8:	08008e15 	.word	0x08008e15
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df2:	e0d6      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008df4:	2304      	movs	r3, #4
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e0d2      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008dfc:	2308      	movs	r3, #8
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e0ce      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008e04:	2310      	movs	r3, #16
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e0ca      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008e0c:	2320      	movs	r3, #32
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e0c6      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008e14:	2340      	movs	r3, #64	@ 0x40
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e0c2      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008e1c:	2380      	movs	r3, #128	@ 0x80
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e0be      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008e24:	40011400 	.word	0x40011400
 8008e28:	58024400 	.word	0x58024400
 8008e2c:	40007800 	.word	0x40007800
 8008e30:	40007c00 	.word	0x40007c00
 8008e34:	40011800 	.word	0x40011800
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4aad      	ldr	r2, [pc, #692]	@ (80090f4 <UART_SetConfig+0x900>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d176      	bne.n	8008f30 <UART_SetConfig+0x73c>
 8008e42:	4bad      	ldr	r3, [pc, #692]	@ (80090f8 <UART_SetConfig+0x904>)
 8008e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e4a:	2b28      	cmp	r3, #40	@ 0x28
 8008e4c:	d86c      	bhi.n	8008f28 <UART_SetConfig+0x734>
 8008e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e54 <UART_SetConfig+0x660>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008ef9 	.word	0x08008ef9
 8008e58:	08008f29 	.word	0x08008f29
 8008e5c:	08008f29 	.word	0x08008f29
 8008e60:	08008f29 	.word	0x08008f29
 8008e64:	08008f29 	.word	0x08008f29
 8008e68:	08008f29 	.word	0x08008f29
 8008e6c:	08008f29 	.word	0x08008f29
 8008e70:	08008f29 	.word	0x08008f29
 8008e74:	08008f01 	.word	0x08008f01
 8008e78:	08008f29 	.word	0x08008f29
 8008e7c:	08008f29 	.word	0x08008f29
 8008e80:	08008f29 	.word	0x08008f29
 8008e84:	08008f29 	.word	0x08008f29
 8008e88:	08008f29 	.word	0x08008f29
 8008e8c:	08008f29 	.word	0x08008f29
 8008e90:	08008f29 	.word	0x08008f29
 8008e94:	08008f09 	.word	0x08008f09
 8008e98:	08008f29 	.word	0x08008f29
 8008e9c:	08008f29 	.word	0x08008f29
 8008ea0:	08008f29 	.word	0x08008f29
 8008ea4:	08008f29 	.word	0x08008f29
 8008ea8:	08008f29 	.word	0x08008f29
 8008eac:	08008f29 	.word	0x08008f29
 8008eb0:	08008f29 	.word	0x08008f29
 8008eb4:	08008f11 	.word	0x08008f11
 8008eb8:	08008f29 	.word	0x08008f29
 8008ebc:	08008f29 	.word	0x08008f29
 8008ec0:	08008f29 	.word	0x08008f29
 8008ec4:	08008f29 	.word	0x08008f29
 8008ec8:	08008f29 	.word	0x08008f29
 8008ecc:	08008f29 	.word	0x08008f29
 8008ed0:	08008f29 	.word	0x08008f29
 8008ed4:	08008f19 	.word	0x08008f19
 8008ed8:	08008f29 	.word	0x08008f29
 8008edc:	08008f29 	.word	0x08008f29
 8008ee0:	08008f29 	.word	0x08008f29
 8008ee4:	08008f29 	.word	0x08008f29
 8008ee8:	08008f29 	.word	0x08008f29
 8008eec:	08008f29 	.word	0x08008f29
 8008ef0:	08008f29 	.word	0x08008f29
 8008ef4:	08008f21 	.word	0x08008f21
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e050      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f00:	2304      	movs	r3, #4
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e04c      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f08:	2308      	movs	r3, #8
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e048      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f10:	2310      	movs	r3, #16
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f16:	e044      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f18:	2320      	movs	r3, #32
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1e:	e040      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f20:	2340      	movs	r3, #64	@ 0x40
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f26:	e03c      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f28:	2380      	movs	r3, #128	@ 0x80
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e038      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a71      	ldr	r2, [pc, #452]	@ (80090fc <UART_SetConfig+0x908>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d130      	bne.n	8008f9c <UART_SetConfig+0x7a8>
 8008f3a:	4b6f      	ldr	r3, [pc, #444]	@ (80090f8 <UART_SetConfig+0x904>)
 8008f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f3e:	f003 0307 	and.w	r3, r3, #7
 8008f42:	2b05      	cmp	r3, #5
 8008f44:	d826      	bhi.n	8008f94 <UART_SetConfig+0x7a0>
 8008f46:	a201      	add	r2, pc, #4	@ (adr r2, 8008f4c <UART_SetConfig+0x758>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008f65 	.word	0x08008f65
 8008f50:	08008f6d 	.word	0x08008f6d
 8008f54:	08008f75 	.word	0x08008f75
 8008f58:	08008f7d 	.word	0x08008f7d
 8008f5c:	08008f85 	.word	0x08008f85
 8008f60:	08008f8d 	.word	0x08008f8d
 8008f64:	2302      	movs	r3, #2
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6a:	e01a      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f6c:	2304      	movs	r3, #4
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f72:	e016      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f74:	2308      	movs	r3, #8
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7a:	e012      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f7c:	2310      	movs	r3, #16
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f82:	e00e      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f84:	2320      	movs	r3, #32
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8a:	e00a      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f8c:	2340      	movs	r3, #64	@ 0x40
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f92:	e006      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f94:	2380      	movs	r3, #128	@ 0x80
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e002      	b.n	8008fa2 <UART_SetConfig+0x7ae>
 8008f9c:	2380      	movs	r3, #128	@ 0x80
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a55      	ldr	r2, [pc, #340]	@ (80090fc <UART_SetConfig+0x908>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	f040 80f8 	bne.w	800919e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	2b20      	cmp	r3, #32
 8008fb4:	dc46      	bgt.n	8009044 <UART_SetConfig+0x850>
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	db75      	blt.n	80090a6 <UART_SetConfig+0x8b2>
 8008fba:	3b02      	subs	r3, #2
 8008fbc:	2b1e      	cmp	r3, #30
 8008fbe:	d872      	bhi.n	80090a6 <UART_SetConfig+0x8b2>
 8008fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc8 <UART_SetConfig+0x7d4>)
 8008fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc6:	bf00      	nop
 8008fc8:	0800904b 	.word	0x0800904b
 8008fcc:	080090a7 	.word	0x080090a7
 8008fd0:	08009053 	.word	0x08009053
 8008fd4:	080090a7 	.word	0x080090a7
 8008fd8:	080090a7 	.word	0x080090a7
 8008fdc:	080090a7 	.word	0x080090a7
 8008fe0:	08009063 	.word	0x08009063
 8008fe4:	080090a7 	.word	0x080090a7
 8008fe8:	080090a7 	.word	0x080090a7
 8008fec:	080090a7 	.word	0x080090a7
 8008ff0:	080090a7 	.word	0x080090a7
 8008ff4:	080090a7 	.word	0x080090a7
 8008ff8:	080090a7 	.word	0x080090a7
 8008ffc:	080090a7 	.word	0x080090a7
 8009000:	08009073 	.word	0x08009073
 8009004:	080090a7 	.word	0x080090a7
 8009008:	080090a7 	.word	0x080090a7
 800900c:	080090a7 	.word	0x080090a7
 8009010:	080090a7 	.word	0x080090a7
 8009014:	080090a7 	.word	0x080090a7
 8009018:	080090a7 	.word	0x080090a7
 800901c:	080090a7 	.word	0x080090a7
 8009020:	080090a7 	.word	0x080090a7
 8009024:	080090a7 	.word	0x080090a7
 8009028:	080090a7 	.word	0x080090a7
 800902c:	080090a7 	.word	0x080090a7
 8009030:	080090a7 	.word	0x080090a7
 8009034:	080090a7 	.word	0x080090a7
 8009038:	080090a7 	.word	0x080090a7
 800903c:	080090a7 	.word	0x080090a7
 8009040:	08009099 	.word	0x08009099
 8009044:	2b40      	cmp	r3, #64	@ 0x40
 8009046:	d02a      	beq.n	800909e <UART_SetConfig+0x8aa>
 8009048:	e02d      	b.n	80090a6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800904a:	f7fc fdcb 	bl	8005be4 <HAL_RCCEx_GetD3PCLK1Freq>
 800904e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009050:	e02f      	b.n	80090b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009056:	4618      	mov	r0, r3
 8009058:	f7fc fdda 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009060:	e027      	b.n	80090b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009062:	f107 0318 	add.w	r3, r7, #24
 8009066:	4618      	mov	r0, r3
 8009068:	f7fc ff26 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009070:	e01f      	b.n	80090b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009072:	4b21      	ldr	r3, [pc, #132]	@ (80090f8 <UART_SetConfig+0x904>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0320 	and.w	r3, r3, #32
 800907a:	2b00      	cmp	r3, #0
 800907c:	d009      	beq.n	8009092 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800907e:	4b1e      	ldr	r3, [pc, #120]	@ (80090f8 <UART_SetConfig+0x904>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	08db      	lsrs	r3, r3, #3
 8009084:	f003 0303 	and.w	r3, r3, #3
 8009088:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <UART_SetConfig+0x90c>)
 800908a:	fa22 f303 	lsr.w	r3, r2, r3
 800908e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009090:	e00f      	b.n	80090b2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009092:	4b1b      	ldr	r3, [pc, #108]	@ (8009100 <UART_SetConfig+0x90c>)
 8009094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009096:	e00c      	b.n	80090b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009098:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <UART_SetConfig+0x910>)
 800909a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800909c:	e009      	b.n	80090b2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800909e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090a4:	e005      	b.n	80090b2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80090b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 81ee 	beq.w	8009496 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090be:	4a12      	ldr	r2, [pc, #72]	@ (8009108 <UART_SetConfig+0x914>)
 80090c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090c4:	461a      	mov	r2, r3
 80090c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80090cc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	4613      	mov	r3, r2
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	4413      	add	r3, r2
 80090d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090da:	429a      	cmp	r2, r3
 80090dc:	d305      	bcc.n	80090ea <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d910      	bls.n	800910c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80090f0:	e1d1      	b.n	8009496 <UART_SetConfig+0xca2>
 80090f2:	bf00      	nop
 80090f4:	40011c00 	.word	0x40011c00
 80090f8:	58024400 	.word	0x58024400
 80090fc:	58000c00 	.word	0x58000c00
 8009100:	03d09000 	.word	0x03d09000
 8009104:	003d0900 	.word	0x003d0900
 8009108:	0800a1c8 	.word	0x0800a1c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800910c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800910e:	2200      	movs	r2, #0
 8009110:	60bb      	str	r3, [r7, #8]
 8009112:	60fa      	str	r2, [r7, #12]
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009118:	4ac0      	ldr	r2, [pc, #768]	@ (800941c <UART_SetConfig+0xc28>)
 800911a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800911e:	b29b      	uxth	r3, r3
 8009120:	2200      	movs	r2, #0
 8009122:	603b      	str	r3, [r7, #0]
 8009124:	607a      	str	r2, [r7, #4]
 8009126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800912a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800912e:	f7f7 f8df 	bl	80002f0 <__aeabi_uldivmod>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4610      	mov	r0, r2
 8009138:	4619      	mov	r1, r3
 800913a:	f04f 0200 	mov.w	r2, #0
 800913e:	f04f 0300 	mov.w	r3, #0
 8009142:	020b      	lsls	r3, r1, #8
 8009144:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009148:	0202      	lsls	r2, r0, #8
 800914a:	6979      	ldr	r1, [r7, #20]
 800914c:	6849      	ldr	r1, [r1, #4]
 800914e:	0849      	lsrs	r1, r1, #1
 8009150:	2000      	movs	r0, #0
 8009152:	460c      	mov	r4, r1
 8009154:	4605      	mov	r5, r0
 8009156:	eb12 0804 	adds.w	r8, r2, r4
 800915a:	eb43 0905 	adc.w	r9, r3, r5
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	469a      	mov	sl, r3
 8009166:	4693      	mov	fp, r2
 8009168:	4652      	mov	r2, sl
 800916a:	465b      	mov	r3, fp
 800916c:	4640      	mov	r0, r8
 800916e:	4649      	mov	r1, r9
 8009170:	f7f7 f8be 	bl	80002f0 <__aeabi_uldivmod>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4613      	mov	r3, r2
 800917a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800917c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009182:	d308      	bcc.n	8009196 <UART_SetConfig+0x9a2>
 8009184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800918a:	d204      	bcs.n	8009196 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009192:	60da      	str	r2, [r3, #12]
 8009194:	e17f      	b.n	8009496 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800919c:	e17b      	b.n	8009496 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091a6:	f040 80bd 	bne.w	8009324 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80091aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	dc48      	bgt.n	8009244 <UART_SetConfig+0xa50>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	db7b      	blt.n	80092ae <UART_SetConfig+0xaba>
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	d879      	bhi.n	80092ae <UART_SetConfig+0xaba>
 80091ba:	a201      	add	r2, pc, #4	@ (adr r2, 80091c0 <UART_SetConfig+0x9cc>)
 80091bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c0:	0800924b 	.word	0x0800924b
 80091c4:	08009253 	.word	0x08009253
 80091c8:	080092af 	.word	0x080092af
 80091cc:	080092af 	.word	0x080092af
 80091d0:	0800925b 	.word	0x0800925b
 80091d4:	080092af 	.word	0x080092af
 80091d8:	080092af 	.word	0x080092af
 80091dc:	080092af 	.word	0x080092af
 80091e0:	0800926b 	.word	0x0800926b
 80091e4:	080092af 	.word	0x080092af
 80091e8:	080092af 	.word	0x080092af
 80091ec:	080092af 	.word	0x080092af
 80091f0:	080092af 	.word	0x080092af
 80091f4:	080092af 	.word	0x080092af
 80091f8:	080092af 	.word	0x080092af
 80091fc:	080092af 	.word	0x080092af
 8009200:	0800927b 	.word	0x0800927b
 8009204:	080092af 	.word	0x080092af
 8009208:	080092af 	.word	0x080092af
 800920c:	080092af 	.word	0x080092af
 8009210:	080092af 	.word	0x080092af
 8009214:	080092af 	.word	0x080092af
 8009218:	080092af 	.word	0x080092af
 800921c:	080092af 	.word	0x080092af
 8009220:	080092af 	.word	0x080092af
 8009224:	080092af 	.word	0x080092af
 8009228:	080092af 	.word	0x080092af
 800922c:	080092af 	.word	0x080092af
 8009230:	080092af 	.word	0x080092af
 8009234:	080092af 	.word	0x080092af
 8009238:	080092af 	.word	0x080092af
 800923c:	080092af 	.word	0x080092af
 8009240:	080092a1 	.word	0x080092a1
 8009244:	2b40      	cmp	r3, #64	@ 0x40
 8009246:	d02e      	beq.n	80092a6 <UART_SetConfig+0xab2>
 8009248:	e031      	b.n	80092ae <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800924a:	f7fb fae1 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 800924e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009250:	e033      	b.n	80092ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009252:	f7fb faf3 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 8009256:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009258:	e02f      	b.n	80092ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800925a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800925e:	4618      	mov	r0, r3
 8009260:	f7fc fcd6 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009268:	e027      	b.n	80092ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800926a:	f107 0318 	add.w	r3, r7, #24
 800926e:	4618      	mov	r0, r3
 8009270:	f7fc fe22 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009278:	e01f      	b.n	80092ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800927a:	4b69      	ldr	r3, [pc, #420]	@ (8009420 <UART_SetConfig+0xc2c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0320 	and.w	r3, r3, #32
 8009282:	2b00      	cmp	r3, #0
 8009284:	d009      	beq.n	800929a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009286:	4b66      	ldr	r3, [pc, #408]	@ (8009420 <UART_SetConfig+0xc2c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	08db      	lsrs	r3, r3, #3
 800928c:	f003 0303 	and.w	r3, r3, #3
 8009290:	4a64      	ldr	r2, [pc, #400]	@ (8009424 <UART_SetConfig+0xc30>)
 8009292:	fa22 f303 	lsr.w	r3, r2, r3
 8009296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009298:	e00f      	b.n	80092ba <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800929a:	4b62      	ldr	r3, [pc, #392]	@ (8009424 <UART_SetConfig+0xc30>)
 800929c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800929e:	e00c      	b.n	80092ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092a0:	4b61      	ldr	r3, [pc, #388]	@ (8009428 <UART_SetConfig+0xc34>)
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a4:	e009      	b.n	80092ba <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ac:	e005      	b.n	80092ba <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80092b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 80ea 	beq.w	8009496 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c6:	4a55      	ldr	r2, [pc, #340]	@ (800941c <UART_SetConfig+0xc28>)
 80092c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092cc:	461a      	mov	r2, r3
 80092ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80092d4:	005a      	lsls	r2, r3, #1
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	085b      	lsrs	r3, r3, #1
 80092dc:	441a      	add	r2, r3
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ea:	2b0f      	cmp	r3, #15
 80092ec:	d916      	bls.n	800931c <UART_SetConfig+0xb28>
 80092ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092f4:	d212      	bcs.n	800931c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	f023 030f 	bic.w	r3, r3, #15
 80092fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009302:	085b      	lsrs	r3, r3, #1
 8009304:	b29b      	uxth	r3, r3
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	b29a      	uxth	r2, r3
 800930c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800930e:	4313      	orrs	r3, r2
 8009310:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009318:	60da      	str	r2, [r3, #12]
 800931a:	e0bc      	b.n	8009496 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009322:	e0b8      	b.n	8009496 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009324:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009328:	2b20      	cmp	r3, #32
 800932a:	dc4b      	bgt.n	80093c4 <UART_SetConfig+0xbd0>
 800932c:	2b00      	cmp	r3, #0
 800932e:	f2c0 8087 	blt.w	8009440 <UART_SetConfig+0xc4c>
 8009332:	2b20      	cmp	r3, #32
 8009334:	f200 8084 	bhi.w	8009440 <UART_SetConfig+0xc4c>
 8009338:	a201      	add	r2, pc, #4	@ (adr r2, 8009340 <UART_SetConfig+0xb4c>)
 800933a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933e:	bf00      	nop
 8009340:	080093cb 	.word	0x080093cb
 8009344:	080093d3 	.word	0x080093d3
 8009348:	08009441 	.word	0x08009441
 800934c:	08009441 	.word	0x08009441
 8009350:	080093db 	.word	0x080093db
 8009354:	08009441 	.word	0x08009441
 8009358:	08009441 	.word	0x08009441
 800935c:	08009441 	.word	0x08009441
 8009360:	080093eb 	.word	0x080093eb
 8009364:	08009441 	.word	0x08009441
 8009368:	08009441 	.word	0x08009441
 800936c:	08009441 	.word	0x08009441
 8009370:	08009441 	.word	0x08009441
 8009374:	08009441 	.word	0x08009441
 8009378:	08009441 	.word	0x08009441
 800937c:	08009441 	.word	0x08009441
 8009380:	080093fb 	.word	0x080093fb
 8009384:	08009441 	.word	0x08009441
 8009388:	08009441 	.word	0x08009441
 800938c:	08009441 	.word	0x08009441
 8009390:	08009441 	.word	0x08009441
 8009394:	08009441 	.word	0x08009441
 8009398:	08009441 	.word	0x08009441
 800939c:	08009441 	.word	0x08009441
 80093a0:	08009441 	.word	0x08009441
 80093a4:	08009441 	.word	0x08009441
 80093a8:	08009441 	.word	0x08009441
 80093ac:	08009441 	.word	0x08009441
 80093b0:	08009441 	.word	0x08009441
 80093b4:	08009441 	.word	0x08009441
 80093b8:	08009441 	.word	0x08009441
 80093bc:	08009441 	.word	0x08009441
 80093c0:	08009433 	.word	0x08009433
 80093c4:	2b40      	cmp	r3, #64	@ 0x40
 80093c6:	d037      	beq.n	8009438 <UART_SetConfig+0xc44>
 80093c8:	e03a      	b.n	8009440 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ca:	f7fb fa21 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 80093ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093d0:	e03c      	b.n	800944c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093d2:	f7fb fa33 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 80093d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093d8:	e038      	b.n	800944c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fc fc16 	bl	8005c10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e8:	e030      	b.n	800944c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ea:	f107 0318 	add.w	r3, r7, #24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fc fd62 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f8:	e028      	b.n	800944c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093fa:	4b09      	ldr	r3, [pc, #36]	@ (8009420 <UART_SetConfig+0xc2c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d012      	beq.n	800942c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009406:	4b06      	ldr	r3, [pc, #24]	@ (8009420 <UART_SetConfig+0xc2c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	08db      	lsrs	r3, r3, #3
 800940c:	f003 0303 	and.w	r3, r3, #3
 8009410:	4a04      	ldr	r2, [pc, #16]	@ (8009424 <UART_SetConfig+0xc30>)
 8009412:	fa22 f303 	lsr.w	r3, r2, r3
 8009416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009418:	e018      	b.n	800944c <UART_SetConfig+0xc58>
 800941a:	bf00      	nop
 800941c:	0800a1c8 	.word	0x0800a1c8
 8009420:	58024400 	.word	0x58024400
 8009424:	03d09000 	.word	0x03d09000
 8009428:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800942c:	4b24      	ldr	r3, [pc, #144]	@ (80094c0 <UART_SetConfig+0xccc>)
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009430:	e00c      	b.n	800944c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009432:	4b24      	ldr	r3, [pc, #144]	@ (80094c4 <UART_SetConfig+0xcd0>)
 8009434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009436:	e009      	b.n	800944c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009438:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800943c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800943e:	e005      	b.n	800944c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800944a:	bf00      	nop
    }

    if (pclk != 0U)
 800944c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d021      	beq.n	8009496 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009456:	4a1c      	ldr	r2, [pc, #112]	@ (80094c8 <UART_SetConfig+0xcd4>)
 8009458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800945c:	461a      	mov	r2, r3
 800945e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009460:	fbb3 f2f2 	udiv	r2, r3, r2
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	085b      	lsrs	r3, r3, #1
 800946a:	441a      	add	r2, r3
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	fbb2 f3f3 	udiv	r3, r2, r3
 8009474:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009478:	2b0f      	cmp	r3, #15
 800947a:	d909      	bls.n	8009490 <UART_SetConfig+0xc9c>
 800947c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009482:	d205      	bcs.n	8009490 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009486:	b29a      	uxth	r2, r3
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60da      	str	r2, [r3, #12]
 800948e:	e002      	b.n	8009496 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2201      	movs	r2, #1
 800949a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2200      	movs	r2, #0
 80094aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2200      	movs	r2, #0
 80094b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80094b2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3748      	adds	r7, #72	@ 0x48
 80094ba:	46bd      	mov	sp, r7
 80094bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094c0:	03d09000 	.word	0x03d09000
 80094c4:	003d0900 	.word	0x003d0900
 80094c8:	0800a1c8 	.word	0x0800a1c8

080094cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d8:	f003 0308 	and.w	r3, r3, #8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00a      	beq.n	80094f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	430a      	orrs	r2, r1
 8009538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953e:	f003 0304 	and.w	r3, r3, #4
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	430a      	orrs	r2, r1
 800955a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009560:	f003 0310 	and.w	r3, r3, #16
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00a      	beq.n	800957e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	430a      	orrs	r2, r1
 800959e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d01a      	beq.n	80095e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	430a      	orrs	r2, r1
 80095c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095ca:	d10a      	bne.n	80095e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	430a      	orrs	r2, r1
 8009602:	605a      	str	r2, [r3, #4]
  }
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b098      	sub	sp, #96	@ 0x60
 8009614:	af02      	add	r7, sp, #8
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009620:	f7f9 fcf0 	bl	8003004 <HAL_GetTick>
 8009624:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0308 	and.w	r3, r3, #8
 8009630:	2b08      	cmp	r3, #8
 8009632:	d12f      	bne.n	8009694 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009634:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800963c:	2200      	movs	r2, #0
 800963e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f88e 	bl	8009764 <UART_WaitOnFlagUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d022      	beq.n	8009694 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009656:	e853 3f00 	ldrex	r3, [r3]
 800965a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800965c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009662:	653b      	str	r3, [r7, #80]	@ 0x50
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	461a      	mov	r2, r3
 800966a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800966c:	647b      	str	r3, [r7, #68]	@ 0x44
 800966e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009674:	e841 2300 	strex	r3, r2, [r1]
 8009678:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800967a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e6      	bne.n	800964e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2220      	movs	r2, #32
 8009684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e063      	b.n	800975c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d149      	bne.n	8009736 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096aa:	2200      	movs	r2, #0
 80096ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f857 	bl	8009764 <UART_WaitOnFlagUntilTimeout>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d03c      	beq.n	8009736 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	623b      	str	r3, [r7, #32]
   return(result);
 80096ca:	6a3b      	ldr	r3, [r7, #32]
 80096cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096da:	633b      	str	r3, [r7, #48]	@ 0x30
 80096dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e6      	bne.n	80096bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3308      	adds	r3, #8
 80096f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f023 0301 	bic.w	r3, r3, #1
 8009704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800970e:	61fa      	str	r2, [r7, #28]
 8009710:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	69b9      	ldr	r1, [r7, #24]
 8009714:	69fa      	ldr	r2, [r7, #28]
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	617b      	str	r3, [r7, #20]
   return(result);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e5      	bne.n	80096ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2220      	movs	r2, #32
 8009726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009732:	2303      	movs	r3, #3
 8009734:	e012      	b.n	800975c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3758      	adds	r7, #88	@ 0x58
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	4613      	mov	r3, r2
 8009772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009774:	e04f      	b.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800977c:	d04b      	beq.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800977e:	f7f9 fc41 	bl	8003004 <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	69ba      	ldr	r2, [r7, #24]
 800978a:	429a      	cmp	r2, r3
 800978c:	d302      	bcc.n	8009794 <UART_WaitOnFlagUntilTimeout+0x30>
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e04e      	b.n	8009836 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0304 	and.w	r3, r3, #4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d037      	beq.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2b80      	cmp	r3, #128	@ 0x80
 80097aa:	d034      	beq.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2b40      	cmp	r3, #64	@ 0x40
 80097b0:	d031      	beq.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	f003 0308 	and.w	r3, r3, #8
 80097bc:	2b08      	cmp	r3, #8
 80097be:	d110      	bne.n	80097e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2208      	movs	r2, #8
 80097c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f000 f839 	bl	8009840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2208      	movs	r2, #8
 80097d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e029      	b.n	8009836 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69db      	ldr	r3, [r3, #28]
 80097e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097f0:	d111      	bne.n	8009816 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 f81f 	bl	8009840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2220      	movs	r2, #32
 8009806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e00f      	b.n	8009836 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69da      	ldr	r2, [r3, #28]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	4013      	ands	r3, r2
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	429a      	cmp	r2, r3
 8009824:	bf0c      	ite	eq
 8009826:	2301      	moveq	r3, #1
 8009828:	2300      	movne	r3, #0
 800982a:	b2db      	uxtb	r3, r3
 800982c:	461a      	mov	r2, r3
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	429a      	cmp	r2, r3
 8009832:	d0a0      	beq.n	8009776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009840:	b480      	push	{r7}
 8009842:	b095      	sub	sp, #84	@ 0x54
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009850:	e853 3f00 	ldrex	r3, [r3]
 8009854:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009858:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800985c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	461a      	mov	r2, r3
 8009864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009866:	643b      	str	r3, [r7, #64]	@ 0x40
 8009868:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800986c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e6      	bne.n	8009848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	61fb      	str	r3, [r7, #28]
   return(result);
 800988a:	69fa      	ldr	r2, [r7, #28]
 800988c:	4b1e      	ldr	r3, [pc, #120]	@ (8009908 <UART_EndRxTransfer+0xc8>)
 800988e:	4013      	ands	r3, r2
 8009890:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3308      	adds	r3, #8
 8009898:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800989a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800989c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e5      	bne.n	800987a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d118      	bne.n	80098e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	e853 3f00 	ldrex	r3, [r3]
 80098c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f023 0310 	bic.w	r3, r3, #16
 80098ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098d4:	61bb      	str	r3, [r7, #24]
 80098d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d8:	6979      	ldr	r1, [r7, #20]
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	e841 2300 	strex	r3, r2, [r1]
 80098e0:	613b      	str	r3, [r7, #16]
   return(result);
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1e6      	bne.n	80098b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2220      	movs	r2, #32
 80098ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80098fc:	bf00      	nop
 80098fe:	3754      	adds	r7, #84	@ 0x54
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	effffffe 	.word	0xeffffffe

0800990c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800991a:	2b01      	cmp	r3, #1
 800991c:	d101      	bne.n	8009922 <HAL_UARTEx_DisableFifoMode+0x16>
 800991e:	2302      	movs	r3, #2
 8009920:	e027      	b.n	8009972 <HAL_UARTEx_DisableFifoMode+0x66>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2224      	movs	r2, #36	@ 0x24
 800992e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 0201 	bic.w	r2, r2, #1
 8009948:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009950:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2220      	movs	r2, #32
 8009964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800998e:	2b01      	cmp	r3, #1
 8009990:	d101      	bne.n	8009996 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009992:	2302      	movs	r3, #2
 8009994:	e02d      	b.n	80099f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2224      	movs	r2, #36	@ 0x24
 80099a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0201 	bic.w	r2, r2, #1
 80099bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	430a      	orrs	r2, r1
 80099d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f850 	bl	8009a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a0e:	2302      	movs	r3, #2
 8009a10:	e02d      	b.n	8009a6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2224      	movs	r2, #36	@ 0x24
 8009a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 0201 	bic.w	r2, r2, #1
 8009a38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	430a      	orrs	r2, r1
 8009a4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f812 	bl	8009a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2220      	movs	r2, #32
 8009a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d108      	bne.n	8009a9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a98:	e031      	b.n	8009afe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a9a:	2310      	movs	r3, #16
 8009a9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a9e:	2310      	movs	r3, #16
 8009aa0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	0e5b      	lsrs	r3, r3, #25
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	f003 0307 	and.w	r3, r3, #7
 8009ab0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	0f5b      	lsrs	r3, r3, #29
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	f003 0307 	and.w	r3, r3, #7
 8009ac0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	7b3a      	ldrb	r2, [r7, #12]
 8009ac6:	4911      	ldr	r1, [pc, #68]	@ (8009b0c <UARTEx_SetNbDataToProcess+0x94>)
 8009ac8:	5c8a      	ldrb	r2, [r1, r2]
 8009aca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ace:	7b3a      	ldrb	r2, [r7, #12]
 8009ad0:	490f      	ldr	r1, [pc, #60]	@ (8009b10 <UARTEx_SetNbDataToProcess+0x98>)
 8009ad2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ad4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	7b7a      	ldrb	r2, [r7, #13]
 8009ae4:	4909      	ldr	r1, [pc, #36]	@ (8009b0c <UARTEx_SetNbDataToProcess+0x94>)
 8009ae6:	5c8a      	ldrb	r2, [r1, r2]
 8009ae8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009aec:	7b7a      	ldrb	r2, [r7, #13]
 8009aee:	4908      	ldr	r1, [pc, #32]	@ (8009b10 <UARTEx_SetNbDataToProcess+0x98>)
 8009af0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009af2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009afe:	bf00      	nop
 8009b00:	3714      	adds	r7, #20
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	0800a1e0 	.word	0x0800a1e0
 8009b10:	0800a1e8 	.word	0x0800a1e8

08009b14 <memset>:
 8009b14:	4402      	add	r2, r0
 8009b16:	4603      	mov	r3, r0
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d100      	bne.n	8009b1e <memset+0xa>
 8009b1c:	4770      	bx	lr
 8009b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b22:	e7f9      	b.n	8009b18 <memset+0x4>

08009b24 <__errno>:
 8009b24:	4b01      	ldr	r3, [pc, #4]	@ (8009b2c <__errno+0x8>)
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	24000014 	.word	0x24000014

08009b30 <__libc_init_array>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	4d0d      	ldr	r5, [pc, #52]	@ (8009b68 <__libc_init_array+0x38>)
 8009b34:	4c0d      	ldr	r4, [pc, #52]	@ (8009b6c <__libc_init_array+0x3c>)
 8009b36:	1b64      	subs	r4, r4, r5
 8009b38:	10a4      	asrs	r4, r4, #2
 8009b3a:	2600      	movs	r6, #0
 8009b3c:	42a6      	cmp	r6, r4
 8009b3e:	d109      	bne.n	8009b54 <__libc_init_array+0x24>
 8009b40:	4d0b      	ldr	r5, [pc, #44]	@ (8009b70 <__libc_init_array+0x40>)
 8009b42:	4c0c      	ldr	r4, [pc, #48]	@ (8009b74 <__libc_init_array+0x44>)
 8009b44:	f000 fb2a 	bl	800a19c <_init>
 8009b48:	1b64      	subs	r4, r4, r5
 8009b4a:	10a4      	asrs	r4, r4, #2
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	42a6      	cmp	r6, r4
 8009b50:	d105      	bne.n	8009b5e <__libc_init_array+0x2e>
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b58:	4798      	blx	r3
 8009b5a:	3601      	adds	r6, #1
 8009b5c:	e7ee      	b.n	8009b3c <__libc_init_array+0xc>
 8009b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b62:	4798      	blx	r3
 8009b64:	3601      	adds	r6, #1
 8009b66:	e7f2      	b.n	8009b4e <__libc_init_array+0x1e>
 8009b68:	0800a270 	.word	0x0800a270
 8009b6c:	0800a270 	.word	0x0800a270
 8009b70:	0800a270 	.word	0x0800a270
 8009b74:	0800a274 	.word	0x0800a274

08009b78 <asin>:
 8009b78:	b508      	push	{r3, lr}
 8009b7a:	ed2d 8b04 	vpush	{d8-d9}
 8009b7e:	eeb0 8b40 	vmov.f64	d8, d0
 8009b82:	f000 f839 	bl	8009bf8 <__ieee754_asin>
 8009b86:	eeb4 8b48 	vcmp.f64	d8, d8
 8009b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b8e:	eeb0 9b40 	vmov.f64	d9, d0
 8009b92:	d615      	bvs.n	8009bc0 <asin+0x48>
 8009b94:	eeb0 0b48 	vmov.f64	d0, d8
 8009b98:	f000 f81c 	bl	8009bd4 <fabs>
 8009b9c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8009ba0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba8:	dd0a      	ble.n	8009bc0 <asin+0x48>
 8009baa:	f7ff ffbb 	bl	8009b24 <__errno>
 8009bae:	ecbd 8b04 	vpop	{d8-d9}
 8009bb2:	2321      	movs	r3, #33	@ 0x21
 8009bb4:	6003      	str	r3, [r0, #0]
 8009bb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009bba:	4804      	ldr	r0, [pc, #16]	@ (8009bcc <asin+0x54>)
 8009bbc:	f000 b814 	b.w	8009be8 <nan>
 8009bc0:	eeb0 0b49 	vmov.f64	d0, d9
 8009bc4:	ecbd 8b04 	vpop	{d8-d9}
 8009bc8:	bd08      	pop	{r3, pc}
 8009bca:	bf00      	nop
 8009bcc:	0800a1f0 	.word	0x0800a1f0

08009bd0 <atan2>:
 8009bd0:	f000 b922 	b.w	8009e18 <__ieee754_atan2>

08009bd4 <fabs>:
 8009bd4:	ec51 0b10 	vmov	r0, r1, d0
 8009bd8:	4602      	mov	r2, r0
 8009bda:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009bde:	ec43 2b10 	vmov	d0, r2, r3
 8009be2:	4770      	bx	lr
 8009be4:	0000      	movs	r0, r0
	...

08009be8 <nan>:
 8009be8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009bf0 <nan+0x8>
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop
 8009bf0:	00000000 	.word	0x00000000
 8009bf4:	7ff80000 	.word	0x7ff80000

08009bf8 <__ieee754_asin>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	ee10 5a90 	vmov	r5, s1
 8009bfe:	4b82      	ldr	r3, [pc, #520]	@ (8009e08 <__ieee754_asin+0x210>)
 8009c00:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009c04:	429c      	cmp	r4, r3
 8009c06:	ed2d 8b06 	vpush	{d8-d10}
 8009c0a:	d919      	bls.n	8009c40 <__ieee754_asin+0x48>
 8009c0c:	ee10 3a10 	vmov	r3, s0
 8009c10:	f104 4440 	add.w	r4, r4, #3221225472	@ 0xc0000000
 8009c14:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8009c18:	431c      	orrs	r4, r3
 8009c1a:	d10c      	bne.n	8009c36 <__ieee754_asin+0x3e>
 8009c1c:	ed9f 7b5c 	vldr	d7, [pc, #368]	@ 8009d90 <__ieee754_asin+0x198>
 8009c20:	ed9f 6b5d 	vldr	d6, [pc, #372]	@ 8009d98 <__ieee754_asin+0x1a0>
 8009c24:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009c28:	eea0 7b06 	vfma.f64	d7, d0, d6
 8009c2c:	eeb0 0b47 	vmov.f64	d0, d7
 8009c30:	ecbd 8b06 	vpop	{d8-d10}
 8009c34:	bd38      	pop	{r3, r4, r5, pc}
 8009c36:	ee30 7b40 	vsub.f64	d7, d0, d0
 8009c3a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8009c3e:	e7f7      	b.n	8009c30 <__ieee754_asin+0x38>
 8009c40:	4b72      	ldr	r3, [pc, #456]	@ (8009e0c <__ieee754_asin+0x214>)
 8009c42:	eeb7 9b00 	vmov.f64	d9, #112	@ 0x3f800000  1.0
 8009c46:	429c      	cmp	r4, r3
 8009c48:	d80b      	bhi.n	8009c62 <__ieee754_asin+0x6a>
 8009c4a:	f1b4 5f79 	cmp.w	r4, #1044381696	@ 0x3e400000
 8009c4e:	d252      	bcs.n	8009cf6 <__ieee754_asin+0xfe>
 8009c50:	ed9f 7b53 	vldr	d7, [pc, #332]	@ 8009da0 <__ieee754_asin+0x1a8>
 8009c54:	ee30 7b07 	vadd.f64	d7, d0, d7
 8009c58:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8009c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c60:	dce6      	bgt.n	8009c30 <__ieee754_asin+0x38>
 8009c62:	f7ff ffb7 	bl	8009bd4 <fabs>
 8009c66:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8009c6a:	ee39 8b40 	vsub.f64	d8, d9, d0
 8009c6e:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8009da8 <__ieee754_asin+0x1b0>
 8009c72:	ee28 8b07 	vmul.f64	d8, d8, d7
 8009c76:	eeb0 0b48 	vmov.f64	d0, d8
 8009c7a:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8009db0 <__ieee754_asin+0x1b8>
 8009c7e:	eea8 6b07 	vfma.f64	d6, d8, d7
 8009c82:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8009db8 <__ieee754_asin+0x1c0>
 8009c86:	eea6 7b08 	vfma.f64	d7, d6, d8
 8009c8a:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8009dc0 <__ieee754_asin+0x1c8>
 8009c8e:	ed9f ab4e 	vldr	d10, [pc, #312]	@ 8009dc8 <__ieee754_asin+0x1d0>
 8009c92:	eea7 6b08 	vfma.f64	d6, d7, d8
 8009c96:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 8009dd0 <__ieee754_asin+0x1d8>
 8009c9a:	eea6 7b08 	vfma.f64	d7, d6, d8
 8009c9e:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8009dd8 <__ieee754_asin+0x1e0>
 8009ca2:	eea7 ab08 	vfma.f64	d10, d7, d8
 8009ca6:	ee2a ab08 	vmul.f64	d10, d10, d8
 8009caa:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8009de0 <__ieee754_asin+0x1e8>
 8009cae:	eea8 7b06 	vfma.f64	d7, d8, d6
 8009cb2:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8009de8 <__ieee754_asin+0x1f0>
 8009cb6:	eea7 6b08 	vfma.f64	d6, d7, d8
 8009cba:	ed9f 7b4d 	vldr	d7, [pc, #308]	@ 8009df0 <__ieee754_asin+0x1f8>
 8009cbe:	eea6 7b08 	vfma.f64	d7, d6, d8
 8009cc2:	eea7 9b08 	vfma.f64	d9, d7, d8
 8009cc6:	f000 fa65 	bl	800a194 <__ieee754_sqrt>
 8009cca:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 8009cce:	eeb0 4b00 	vmov.f64	d4, #0	@ 0x40000000  2.0
 8009cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8009e10 <__ieee754_asin+0x218>)
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	d93d      	bls.n	8009d54 <__ieee754_asin+0x15c>
 8009cd8:	eea0 0b05 	vfma.f64	d0, d0, d5
 8009cdc:	ed9f 7b46 	vldr	d7, [pc, #280]	@ 8009df8 <__ieee754_asin+0x200>
 8009ce0:	eea0 7b04 	vfma.f64	d7, d0, d4
 8009ce4:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8009d98 <__ieee754_asin+0x1a0>
 8009ce8:	ee30 0b47 	vsub.f64	d0, d0, d7
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	bfd8      	it	le
 8009cf0:	eeb1 0b40 	vnegle.f64	d0, d0
 8009cf4:	e79c      	b.n	8009c30 <__ieee754_asin+0x38>
 8009cf6:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8009db0 <__ieee754_asin+0x1b8>
 8009cfa:	ee20 7b00 	vmul.f64	d7, d0, d0
 8009cfe:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8009da8 <__ieee754_asin+0x1b0>
 8009d02:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009d06:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8009db8 <__ieee754_asin+0x1c0>
 8009d0a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8009d0e:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8009dc0 <__ieee754_asin+0x1c8>
 8009d12:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009d16:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8009dd0 <__ieee754_asin+0x1d8>
 8009d1a:	eea6 5b07 	vfma.f64	d5, d6, d7
 8009d1e:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8009dc8 <__ieee754_asin+0x1d0>
 8009d22:	ed9f 4b2d 	vldr	d4, [pc, #180]	@ 8009dd8 <__ieee754_asin+0x1e0>
 8009d26:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009d2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009d2e:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8009de0 <__ieee754_asin+0x1e8>
 8009d32:	eea7 5b04 	vfma.f64	d5, d7, d4
 8009d36:	ed9f 4b2c 	vldr	d4, [pc, #176]	@ 8009de8 <__ieee754_asin+0x1f0>
 8009d3a:	eea5 4b07 	vfma.f64	d4, d5, d7
 8009d3e:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 8009df0 <__ieee754_asin+0x1f8>
 8009d42:	eea4 5b07 	vfma.f64	d5, d4, d7
 8009d46:	eea5 9b07 	vfma.f64	d9, d5, d7
 8009d4a:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8009d4e:	eea0 0b07 	vfma.f64	d0, d0, d7
 8009d52:	e76d      	b.n	8009c30 <__ieee754_asin+0x38>
 8009d54:	ec53 2b10 	vmov	r2, r3, d0
 8009d58:	ee30 3b00 	vadd.f64	d3, d0, d0
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	ec43 2b16 	vmov	d6, r2, r3
 8009d62:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8009d90 <__ieee754_asin+0x198>
 8009d66:	ee30 0b06 	vadd.f64	d0, d0, d6
 8009d6a:	eea6 8b46 	vfms.f64	d8, d6, d6
 8009d6e:	ee88 2b00 	vdiv.f64	d2, d8, d0
 8009d72:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8009e00 <__ieee754_asin+0x208>
 8009d76:	eea2 7b44 	vfms.f64	d7, d2, d4
 8009d7a:	ee93 7b05 	vfnms.f64	d7, d3, d5
 8009d7e:	eeb0 5b40 	vmov.f64	d5, d0
 8009d82:	eea6 5b44 	vfms.f64	d5, d6, d4
 8009d86:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009d8a:	e7ad      	b.n	8009ce8 <__ieee754_asin+0xf0>
 8009d8c:	f3af 8000 	nop.w
 8009d90:	33145c07 	.word	0x33145c07
 8009d94:	3c91a626 	.word	0x3c91a626
 8009d98:	54442d18 	.word	0x54442d18
 8009d9c:	3ff921fb 	.word	0x3ff921fb
 8009da0:	8800759c 	.word	0x8800759c
 8009da4:	7e37e43c 	.word	0x7e37e43c
 8009da8:	7501b288 	.word	0x7501b288
 8009dac:	3f49efe0 	.word	0x3f49efe0
 8009db0:	0dfdf709 	.word	0x0dfdf709
 8009db4:	3f023de1 	.word	0x3f023de1
 8009db8:	b5688f3b 	.word	0xb5688f3b
 8009dbc:	bfa48228 	.word	0xbfa48228
 8009dc0:	0e884455 	.word	0x0e884455
 8009dc4:	3fc9c155 	.word	0x3fc9c155
 8009dc8:	55555555 	.word	0x55555555
 8009dcc:	3fc55555 	.word	0x3fc55555
 8009dd0:	03eb6f7d 	.word	0x03eb6f7d
 8009dd4:	bfd4d612 	.word	0xbfd4d612
 8009dd8:	b12e9282 	.word	0xb12e9282
 8009ddc:	3fb3b8c5 	.word	0x3fb3b8c5
 8009de0:	1b8d0159 	.word	0x1b8d0159
 8009de4:	bfe6066c 	.word	0xbfe6066c
 8009de8:	9c598ac8 	.word	0x9c598ac8
 8009dec:	40002ae5 	.word	0x40002ae5
 8009df0:	1c8a2d4b 	.word	0x1c8a2d4b
 8009df4:	c0033a27 	.word	0xc0033a27
 8009df8:	33145c07 	.word	0x33145c07
 8009dfc:	bc91a626 	.word	0xbc91a626
 8009e00:	54442d18 	.word	0x54442d18
 8009e04:	3fe921fb 	.word	0x3fe921fb
 8009e08:	3fefffff 	.word	0x3fefffff
 8009e0c:	3fdfffff 	.word	0x3fdfffff
 8009e10:	3fef3332 	.word	0x3fef3332
 8009e14:	00000000 	.word	0x00000000

08009e18 <__ieee754_atan2>:
 8009e18:	ee11 1a10 	vmov	r1, s2
 8009e1c:	eeb0 7b40 	vmov.f64	d7, d0
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	ee11 5a90 	vmov	r5, s3
 8009e26:	424b      	negs	r3, r1
 8009e28:	4f59      	ldr	r7, [pc, #356]	@ (8009f90 <__ieee754_atan2+0x178>)
 8009e2a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009e2e:	430b      	orrs	r3, r1
 8009e30:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009e34:	42bb      	cmp	r3, r7
 8009e36:	d80d      	bhi.n	8009e54 <__ieee754_atan2+0x3c>
 8009e38:	ee10 ca10 	vmov	ip, s0
 8009e3c:	ee17 6a90 	vmov	r6, s15
 8009e40:	f1cc 0000 	rsb	r0, ip, #0
 8009e44:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009e48:	ea40 000c 	orr.w	r0, r0, ip
 8009e4c:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 8009e50:	42b8      	cmp	r0, r7
 8009e52:	d904      	bls.n	8009e5e <__ieee754_atan2+0x46>
 8009e54:	ee37 7b01 	vadd.f64	d7, d7, d1
 8009e58:	eeb0 0b47 	vmov.f64	d0, d7
 8009e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e5e:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 8009e62:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009e66:	4308      	orrs	r0, r1
 8009e68:	d103      	bne.n	8009e72 <__ieee754_atan2+0x5a>
 8009e6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e6e:	f000 b897 	b.w	8009fa0 <atan>
 8009e72:	17ac      	asrs	r4, r5, #30
 8009e74:	f004 0402 	and.w	r4, r4, #2
 8009e78:	ea53 0c0c 	orrs.w	ip, r3, ip
 8009e7c:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 8009e80:	d107      	bne.n	8009e92 <__ieee754_atan2+0x7a>
 8009e82:	2c02      	cmp	r4, #2
 8009e84:	d05c      	beq.n	8009f40 <__ieee754_atan2+0x128>
 8009e86:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8009f58 <__ieee754_atan2+0x140>
 8009e8a:	2c03      	cmp	r4, #3
 8009e8c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8009e90:	e7e2      	b.n	8009e58 <__ieee754_atan2+0x40>
 8009e92:	4311      	orrs	r1, r2
 8009e94:	d107      	bne.n	8009ea6 <__ieee754_atan2+0x8e>
 8009e96:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 8009f60 <__ieee754_atan2+0x148>
 8009e9a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8009f68 <__ieee754_atan2+0x150>
 8009e9e:	2e00      	cmp	r6, #0
 8009ea0:	fe27 7b06 	vselge.f64	d7, d7, d6
 8009ea4:	e7d8      	b.n	8009e58 <__ieee754_atan2+0x40>
 8009ea6:	42ba      	cmp	r2, r7
 8009ea8:	d10f      	bne.n	8009eca <__ieee754_atan2+0xb2>
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8009eb0:	d107      	bne.n	8009ec2 <__ieee754_atan2+0xaa>
 8009eb2:	2c02      	cmp	r4, #2
 8009eb4:	d847      	bhi.n	8009f46 <__ieee754_atan2+0x12e>
 8009eb6:	4b37      	ldr	r3, [pc, #220]	@ (8009f94 <__ieee754_atan2+0x17c>)
 8009eb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ebc:	ed93 7b00 	vldr	d7, [r3]
 8009ec0:	e7ca      	b.n	8009e58 <__ieee754_atan2+0x40>
 8009ec2:	2c02      	cmp	r4, #2
 8009ec4:	d842      	bhi.n	8009f4c <__ieee754_atan2+0x134>
 8009ec6:	4b34      	ldr	r3, [pc, #208]	@ (8009f98 <__ieee754_atan2+0x180>)
 8009ec8:	e7f6      	b.n	8009eb8 <__ieee754_atan2+0xa0>
 8009eca:	42bb      	cmp	r3, r7
 8009ecc:	d0e3      	beq.n	8009e96 <__ieee754_atan2+0x7e>
 8009ece:	1a9b      	subs	r3, r3, r2
 8009ed0:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009ed4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009ed8:	da1a      	bge.n	8009f10 <__ieee754_atan2+0xf8>
 8009eda:	2d00      	cmp	r5, #0
 8009edc:	da01      	bge.n	8009ee2 <__ieee754_atan2+0xca>
 8009ede:	323c      	adds	r2, #60	@ 0x3c
 8009ee0:	db19      	blt.n	8009f16 <__ieee754_atan2+0xfe>
 8009ee2:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8009ee6:	f7ff fe75 	bl	8009bd4 <fabs>
 8009eea:	f000 f859 	bl	8009fa0 <atan>
 8009eee:	eeb0 7b40 	vmov.f64	d7, d0
 8009ef2:	2c01      	cmp	r4, #1
 8009ef4:	d012      	beq.n	8009f1c <__ieee754_atan2+0x104>
 8009ef6:	2c02      	cmp	r4, #2
 8009ef8:	d019      	beq.n	8009f2e <__ieee754_atan2+0x116>
 8009efa:	2c00      	cmp	r4, #0
 8009efc:	d0ac      	beq.n	8009e58 <__ieee754_atan2+0x40>
 8009efe:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8009f70 <__ieee754_atan2+0x158>
 8009f02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009f06:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8009f78 <__ieee754_atan2+0x160>
 8009f0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009f0e:	e7a3      	b.n	8009e58 <__ieee754_atan2+0x40>
 8009f10:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 8009f60 <__ieee754_atan2+0x148>
 8009f14:	e7ed      	b.n	8009ef2 <__ieee754_atan2+0xda>
 8009f16:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8009f80 <__ieee754_atan2+0x168>
 8009f1a:	e7ea      	b.n	8009ef2 <__ieee754_atan2+0xda>
 8009f1c:	ee17 1a90 	vmov	r1, s15
 8009f20:	ec53 2b17 	vmov	r2, r3, d7
 8009f24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f28:	ec43 2b17 	vmov	d7, r2, r3
 8009f2c:	e794      	b.n	8009e58 <__ieee754_atan2+0x40>
 8009f2e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8009f70 <__ieee754_atan2+0x158>
 8009f32:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009f36:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8009f78 <__ieee754_atan2+0x160>
 8009f3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009f3e:	e78b      	b.n	8009e58 <__ieee754_atan2+0x40>
 8009f40:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8009f78 <__ieee754_atan2+0x160>
 8009f44:	e788      	b.n	8009e58 <__ieee754_atan2+0x40>
 8009f46:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8009f88 <__ieee754_atan2+0x170>
 8009f4a:	e785      	b.n	8009e58 <__ieee754_atan2+0x40>
 8009f4c:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8009f80 <__ieee754_atan2+0x168>
 8009f50:	e782      	b.n	8009e58 <__ieee754_atan2+0x40>
 8009f52:	bf00      	nop
 8009f54:	f3af 8000 	nop.w
 8009f58:	54442d18 	.word	0x54442d18
 8009f5c:	c00921fb 	.word	0xc00921fb
 8009f60:	54442d18 	.word	0x54442d18
 8009f64:	3ff921fb 	.word	0x3ff921fb
 8009f68:	54442d18 	.word	0x54442d18
 8009f6c:	bff921fb 	.word	0xbff921fb
 8009f70:	33145c07 	.word	0x33145c07
 8009f74:	3ca1a626 	.word	0x3ca1a626
 8009f78:	54442d18 	.word	0x54442d18
 8009f7c:	400921fb 	.word	0x400921fb
	...
 8009f88:	54442d18 	.word	0x54442d18
 8009f8c:	3fe921fb 	.word	0x3fe921fb
 8009f90:	7ff00000 	.word	0x7ff00000
 8009f94:	0800a210 	.word	0x0800a210
 8009f98:	0800a1f8 	.word	0x0800a1f8
 8009f9c:	00000000 	.word	0x00000000

08009fa0 <atan>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	eeb0 7b40 	vmov.f64	d7, d0
 8009fa6:	ee17 5a90 	vmov	r5, s15
 8009faa:	4b73      	ldr	r3, [pc, #460]	@ (800a178 <atan+0x1d8>)
 8009fac:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009fb0:	429c      	cmp	r4, r3
 8009fb2:	d913      	bls.n	8009fdc <atan+0x3c>
 8009fb4:	4b71      	ldr	r3, [pc, #452]	@ (800a17c <atan+0x1dc>)
 8009fb6:	429c      	cmp	r4, r3
 8009fb8:	d803      	bhi.n	8009fc2 <atan+0x22>
 8009fba:	d107      	bne.n	8009fcc <atan+0x2c>
 8009fbc:	ee10 3a10 	vmov	r3, s0
 8009fc0:	b123      	cbz	r3, 8009fcc <atan+0x2c>
 8009fc2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009fc6:	eeb0 0b47 	vmov.f64	d0, d7
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800a108 <atan+0x168>
 8009fd0:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800a110 <atan+0x170>
 8009fd4:	2d00      	cmp	r5, #0
 8009fd6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8009fda:	e7f4      	b.n	8009fc6 <atan+0x26>
 8009fdc:	4b68      	ldr	r3, [pc, #416]	@ (800a180 <atan+0x1e0>)
 8009fde:	429c      	cmp	r4, r3
 8009fe0:	d811      	bhi.n	800a006 <atan+0x66>
 8009fe2:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009fe6:	429c      	cmp	r4, r3
 8009fe8:	d80a      	bhi.n	800a000 <atan+0x60>
 8009fea:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8009fee:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800a118 <atan+0x178>
 8009ff2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8009ff6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ffe:	dce2      	bgt.n	8009fc6 <atan+0x26>
 800a000:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a004:	e013      	b.n	800a02e <atan+0x8e>
 800a006:	f7ff fde5 	bl	8009bd4 <fabs>
 800a00a:	4b5e      	ldr	r3, [pc, #376]	@ (800a184 <atan+0x1e4>)
 800a00c:	429c      	cmp	r4, r3
 800a00e:	d84f      	bhi.n	800a0b0 <atan+0x110>
 800a010:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a014:	429c      	cmp	r4, r3
 800a016:	d841      	bhi.n	800a09c <atan+0xfc>
 800a018:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800a01c:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800a020:	2300      	movs	r3, #0
 800a022:	eea0 5b07 	vfma.f64	d5, d0, d7
 800a026:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a02a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800a02e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a120 <atan+0x180>
 800a032:	ee27 4b07 	vmul.f64	d4, d7, d7
 800a036:	ee24 5b04 	vmul.f64	d5, d4, d4
 800a03a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a128 <atan+0x188>
 800a03e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800a042:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800a130 <atan+0x190>
 800a046:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a04a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a138 <atan+0x198>
 800a04e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a052:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800a140 <atan+0x1a0>
 800a056:	eea3 6b05 	vfma.f64	d6, d3, d5
 800a05a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a148 <atan+0x1a8>
 800a05e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800a150 <atan+0x1b0>
 800a062:	eea6 3b05 	vfma.f64	d3, d6, d5
 800a066:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a158 <atan+0x1b8>
 800a06a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800a06e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a160 <atan+0x1c0>
 800a072:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a076:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800a168 <atan+0x1c8>
 800a07a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800a07e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a170 <atan+0x1d0>
 800a082:	1c5a      	adds	r2, r3, #1
 800a084:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a088:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a08c:	eea3 6b04 	vfma.f64	d6, d3, d4
 800a090:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a094:	d121      	bne.n	800a0da <atan+0x13a>
 800a096:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a09a:	e794      	b.n	8009fc6 <atan+0x26>
 800a09c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a0a6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a0aa:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800a0ae:	e7be      	b.n	800a02e <atan+0x8e>
 800a0b0:	4b35      	ldr	r3, [pc, #212]	@ (800a188 <atan+0x1e8>)
 800a0b2:	429c      	cmp	r4, r3
 800a0b4:	d20b      	bcs.n	800a0ce <atan+0x12e>
 800a0b6:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800a0ba:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a0be:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a0c2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a0cc:	e7af      	b.n	800a02e <atan+0x8e>
 800a0ce:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a0d8:	e7a9      	b.n	800a02e <atan+0x8e>
 800a0da:	4a2c      	ldr	r2, [pc, #176]	@ (800a18c <atan+0x1ec>)
 800a0dc:	492c      	ldr	r1, [pc, #176]	@ (800a190 <atan+0x1f0>)
 800a0de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a0e2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800a0e6:	ed93 5b00 	vldr	d5, [r3]
 800a0ea:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a0ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a0f2:	ed92 7b00 	vldr	d7, [r2]
 800a0f6:	2d00      	cmp	r5, #0
 800a0f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a0fc:	bfb8      	it	lt
 800a0fe:	eeb1 7b47 	vneglt.f64	d7, d7
 800a102:	e760      	b.n	8009fc6 <atan+0x26>
 800a104:	f3af 8000 	nop.w
 800a108:	54442d18 	.word	0x54442d18
 800a10c:	bff921fb 	.word	0xbff921fb
 800a110:	54442d18 	.word	0x54442d18
 800a114:	3ff921fb 	.word	0x3ff921fb
 800a118:	8800759c 	.word	0x8800759c
 800a11c:	7e37e43c 	.word	0x7e37e43c
 800a120:	e322da11 	.word	0xe322da11
 800a124:	3f90ad3a 	.word	0x3f90ad3a
 800a128:	24760deb 	.word	0x24760deb
 800a12c:	3fa97b4b 	.word	0x3fa97b4b
 800a130:	a0d03d51 	.word	0xa0d03d51
 800a134:	3fb10d66 	.word	0x3fb10d66
 800a138:	c54c206e 	.word	0xc54c206e
 800a13c:	3fb745cd 	.word	0x3fb745cd
 800a140:	920083ff 	.word	0x920083ff
 800a144:	3fc24924 	.word	0x3fc24924
 800a148:	5555550d 	.word	0x5555550d
 800a14c:	3fd55555 	.word	0x3fd55555
 800a150:	52defd9a 	.word	0x52defd9a
 800a154:	bfadde2d 	.word	0xbfadde2d
 800a158:	2c6a6c2f 	.word	0x2c6a6c2f
 800a15c:	bfa2b444 	.word	0xbfa2b444
 800a160:	af749a6d 	.word	0xaf749a6d
 800a164:	bfb3b0f2 	.word	0xbfb3b0f2
 800a168:	fe231671 	.word	0xfe231671
 800a16c:	bfbc71c6 	.word	0xbfbc71c6
 800a170:	9998ebc4 	.word	0x9998ebc4
 800a174:	bfc99999 	.word	0xbfc99999
 800a178:	440fffff 	.word	0x440fffff
 800a17c:	7ff00000 	.word	0x7ff00000
 800a180:	3fdbffff 	.word	0x3fdbffff
 800a184:	3ff2ffff 	.word	0x3ff2ffff
 800a188:	40038000 	.word	0x40038000
 800a18c:	0800a248 	.word	0x0800a248
 800a190:	0800a228 	.word	0x0800a228

0800a194 <__ieee754_sqrt>:
 800a194:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800a198:	4770      	bx	lr
	...

0800a19c <_init>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	bf00      	nop
 800a1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a2:	bc08      	pop	{r3}
 800a1a4:	469e      	mov	lr, r3
 800a1a6:	4770      	bx	lr

0800a1a8 <_fini>:
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1aa:	bf00      	nop
 800a1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ae:	bc08      	pop	{r3}
 800a1b0:	469e      	mov	lr, r3
 800a1b2:	4770      	bx	lr
