
Quadcopter_UniTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008354  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008600  08008600  00009600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008638  08008638  00009638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008640  08008640  00009640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008644  08008644  00009644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08008648  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000270  24000010  08008658  0000a010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000280  08008658  0000a280  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000154a2  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000257e  00000000  00000000  0001f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001058  00000000  00000000  00021a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000cd5  00000000  00000000  00022ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003026f  00000000  00000000  0002378d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000146d3  00000000  00000000  000539fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013edb5  00000000  00000000  000680cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a6e84  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004598  00000000  00000000  001a6ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001ab460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080085e8 	.word	0x080085e8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080085e8 	.word	0x080085e8

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fafc 	bl	8001bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f854 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fc4e 	bl	8000e88 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 fbf8 	bl	8000de0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80005f0:	f000 fc42 	bl	8000e78 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 80005f4:	f000 f8c4 	bl	8000780 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005f8:	f000 f970 	bl	80008dc <MX_TIM3_Init>
  MX_TIM4_Init();
 80005fc:	f000 fa0e 	bl	8000a1c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000600:	f000 faac 	bl	8000b5c <MX_TIM5_Init>
  MX_TIM15_Init();
 8000604:	f000 fb4a 	bl	8000c9c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000608:	2100      	movs	r1, #0
 800060a:	481b      	ldr	r0, [pc, #108]	@ (8000678 <main+0x9c>)
 800060c:	f004 fd02 	bl	8005014 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000610:	2104      	movs	r1, #4
 8000612:	4819      	ldr	r0, [pc, #100]	@ (8000678 <main+0x9c>)
 8000614:	f004 fcfe 	bl	8005014 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000618:	2108      	movs	r1, #8
 800061a:	4817      	ldr	r0, [pc, #92]	@ (8000678 <main+0x9c>)
 800061c:	f004 fcfa 	bl	8005014 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000620:	210c      	movs	r1, #12
 8000622:	4815      	ldr	r0, [pc, #84]	@ (8000678 <main+0x9c>)
 8000624:	f004 fcf6 	bl	8005014 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int count = 0;
  set_motor_pwm_zero( rc_comm_temp);
 8000628:	4814      	ldr	r0, [pc, #80]	@ (800067c <main+0xa0>)
 800062a:	f000 ffb9 	bl	80015a0 <set_motor_pwm_zero>
  set_motor_pwm(rc_comm_temp);
 800062e:	4813      	ldr	r0, [pc, #76]	@ (800067c <main+0xa0>)
 8000630:	f000 fef4 	bl	800141c <set_motor_pwm>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
		  }
	*/


		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000634:	2104      	movs	r1, #4
 8000636:	4812      	ldr	r0, [pc, #72]	@ (8000680 <main+0xa4>)
 8000638:	f004 fe5c 	bl	80052f4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800063c:	2100      	movs	r1, #0
 800063e:	4810      	ldr	r0, [pc, #64]	@ (8000680 <main+0xa4>)
 8000640:	f004 ffce 	bl	80055e0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8000644:	2104      	movs	r1, #4
 8000646:	480f      	ldr	r0, [pc, #60]	@ (8000684 <main+0xa8>)
 8000648:	f004 fe54 	bl	80052f4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800064c:	2100      	movs	r1, #0
 800064e:	480d      	ldr	r0, [pc, #52]	@ (8000684 <main+0xa8>)
 8000650:	f004 ffc6 	bl	80055e0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8000654:	2104      	movs	r1, #4
 8000656:	480c      	ldr	r0, [pc, #48]	@ (8000688 <main+0xac>)
 8000658:	f004 fe4c 	bl	80052f4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800065c:	2100      	movs	r1, #0
 800065e:	480a      	ldr	r0, [pc, #40]	@ (8000688 <main+0xac>)
 8000660:	f004 ffbe 	bl	80055e0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8000664:	2104      	movs	r1, #4
 8000666:	4809      	ldr	r0, [pc, #36]	@ (800068c <main+0xb0>)
 8000668:	f004 fe44 	bl	80052f4 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800066c:	2100      	movs	r1, #0
 800066e:	4807      	ldr	r0, [pc, #28]	@ (800068c <main+0xb0>)
 8000670:	f004 ffb6 	bl	80055e0 <HAL_TIM_IC_Start_IT>
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000674:	bf00      	nop
 8000676:	e7dd      	b.n	8000634 <main+0x58>
 8000678:	2400002c 	.word	0x2400002c
 800067c:	2400023c 	.word	0x2400023c
 8000680:	24000078 	.word	0x24000078
 8000684:	240000c4 	.word	0x240000c4
 8000688:	24000110 	.word	0x24000110
 800068c:	2400015c 	.word	0x2400015c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	@ 0x70
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800069a:	224c      	movs	r2, #76	@ 0x4c
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f007 ff76 	bl	8008590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2220      	movs	r2, #32
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f007 ff70 	bl	8008590 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006b0:	4b31      	ldr	r3, [pc, #196]	@ (8000778 <SystemClock_Config+0xe8>)
 80006b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006ba:	2004      	movs	r0, #4
 80006bc:	f001 fdfa 	bl	80022b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4b2d      	ldr	r3, [pc, #180]	@ (800077c <SystemClock_Config+0xec>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a2c      	ldr	r2, [pc, #176]	@ (800077c <SystemClock_Config+0xec>)
 80006ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b2a      	ldr	r3, [pc, #168]	@ (800077c <SystemClock_Config+0xec>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006dc:	bf00      	nop
 80006de:	4b27      	ldr	r3, [pc, #156]	@ (800077c <SystemClock_Config+0xec>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ea:	d1f8      	bne.n	80006de <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006ec:	2321      	movs	r3, #33	@ 0x21
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006f6:	2301      	movs	r3, #1
 80006f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000702:	2301      	movs	r3, #1
 8000704:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000706:	2325      	movs	r3, #37	@ 0x25
 8000708:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070e:	2304      	movs	r3, #4
 8000710:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000716:	230c      	movs	r3, #12
 8000718:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800071a:	2300      	movs	r3, #0
 800071c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800071e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000722:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fe1d 	bl	8002368 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000734:	f000 fe6c 	bl	8001410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	233f      	movs	r3, #63	@ 0x3f
 800073a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000748:	2340      	movs	r3, #64	@ 0x40
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800074c:	2340      	movs	r3, #64	@ 0x40
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000754:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000756:	2340      	movs	r3, #64	@ 0x40
 8000758:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2103      	movs	r1, #3
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fa34 	bl	8002bcc <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800076a:	f000 fe51 	bl	8001410 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	3770      	adds	r7, #112	@ 0x70
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	58024400 	.word	0x58024400
 800077c:	58024800 	.word	0x58024800

08000780 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09c      	sub	sp, #112	@ 0x70
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2234      	movs	r2, #52	@ 0x34
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f007 fee8 	bl	8008590 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c0:	4b44      	ldr	r3, [pc, #272]	@ (80008d4 <MX_TIM1_Init+0x154>)
 80007c2:	4a45      	ldr	r2, [pc, #276]	@ (80008d8 <MX_TIM1_Init+0x158>)
 80007c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 80007c6:	4b43      	ldr	r3, [pc, #268]	@ (80008d4 <MX_TIM1_Init+0x154>)
 80007c8:	f240 227f 	movw	r2, #639	@ 0x27f
 80007cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b41      	ldr	r3, [pc, #260]	@ (80008d4 <MX_TIM1_Init+0x154>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80007d4:	4b3f      	ldr	r3, [pc, #252]	@ (80008d4 <MX_TIM1_Init+0x154>)
 80007d6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80007da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b3d      	ldr	r3, [pc, #244]	@ (80008d4 <MX_TIM1_Init+0x154>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e2:	4b3c      	ldr	r3, [pc, #240]	@ (80008d4 <MX_TIM1_Init+0x154>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e8:	4b3a      	ldr	r3, [pc, #232]	@ (80008d4 <MX_TIM1_Init+0x154>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ee:	4839      	ldr	r0, [pc, #228]	@ (80008d4 <MX_TIM1_Init+0x154>)
 80007f0:	f004 fb58 	bl	8004ea4 <HAL_TIM_Base_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80007fa:	f000 fe09 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000802:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000804:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000808:	4619      	mov	r1, r3
 800080a:	4832      	ldr	r0, [pc, #200]	@ (80008d4 <MX_TIM1_Init+0x154>)
 800080c:	f005 fbae 	bl	8005f6c <HAL_TIM_ConfigClockSource>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000816:	f000 fdfb 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800081a:	482e      	ldr	r0, [pc, #184]	@ (80008d4 <MX_TIM1_Init+0x154>)
 800081c:	f004 fb99 	bl	8004f52 <HAL_TIM_PWM_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000826:	f000 fdf3 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000836:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800083a:	4619      	mov	r1, r3
 800083c:	4825      	ldr	r0, [pc, #148]	@ (80008d4 <MX_TIM1_Init+0x154>)
 800083e:	f006 fb8f 	bl	8006f60 <HAL_TIMEx_MasterConfigSynchronization>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000848:	f000 fde2 	bl	8001410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800084c:	2360      	movs	r3, #96	@ 0x60
 800084e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000854:	2300      	movs	r3, #0
 8000856:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000864:	2300      	movs	r3, #0
 8000866:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000868:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	4818      	ldr	r0, [pc, #96]	@ (80008d4 <MX_TIM1_Init+0x154>)
 8000872:	f005 fa67 	bl	8005d44 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800087c:	f000 fdc8 	bl	8001410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000894:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000898:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <MX_TIM1_Init+0x154>)
 80008b6:	f006 fbe1 	bl	800707c <HAL_TIMEx_ConfigBreakDeadTime>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008c0:	f000 fda6 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008c4:	4803      	ldr	r0, [pc, #12]	@ (80008d4 <MX_TIM1_Init+0x154>)
 80008c6:	f000 ffe9 	bl	800189c <HAL_TIM_MspPostInit>

}
 80008ca:	bf00      	nop
 80008cc:	3770      	adds	r7, #112	@ 0x70
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2400002c 	.word	0x2400002c
 80008d8:	40010000 	.word	0x40010000

080008dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b090      	sub	sp, #64	@ 0x40
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	463b      	mov	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000918:	4b3e      	ldr	r3, [pc, #248]	@ (8000a14 <MX_TIM3_Init+0x138>)
 800091a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a18 <MX_TIM3_Init+0x13c>)
 800091c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 800091e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a14 <MX_TIM3_Init+0x138>)
 8000920:	f240 227f 	movw	r2, #639	@ 0x27f
 8000924:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b3b      	ldr	r3, [pc, #236]	@ (8000a14 <MX_TIM3_Init+0x138>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800092c:	4b39      	ldr	r3, [pc, #228]	@ (8000a14 <MX_TIM3_Init+0x138>)
 800092e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000932:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b37      	ldr	r3, [pc, #220]	@ (8000a14 <MX_TIM3_Init+0x138>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b36      	ldr	r3, [pc, #216]	@ (8000a14 <MX_TIM3_Init+0x138>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000940:	4834      	ldr	r0, [pc, #208]	@ (8000a14 <MX_TIM3_Init+0x138>)
 8000942:	f004 faaf 	bl	8004ea4 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800094c:	f000 fd60 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000956:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800095a:	4619      	mov	r1, r3
 800095c:	482d      	ldr	r0, [pc, #180]	@ (8000a14 <MX_TIM3_Init+0x138>)
 800095e:	f005 fb05 	bl	8005f6c <HAL_TIM_ConfigClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000968:	f000 fd52 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800096c:	4829      	ldr	r0, [pc, #164]	@ (8000a14 <MX_TIM3_Init+0x138>)
 800096e:	f004 fc5f 	bl	8005230 <HAL_TIM_IC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000978:	f000 fd4a 	bl	8001410 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800097c:	2304      	movs	r3, #4
 800097e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000980:	2350      	movs	r3, #80	@ 0x50
 8000982:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	481f      	ldr	r0, [pc, #124]	@ (8000a14 <MX_TIM3_Init+0x138>)
 8000998:	f005 fbe0 	bl	800615c <HAL_TIM_SlaveConfigSynchro>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80009a2:	f000 fd35 	bl	8001410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009aa:	2301      	movs	r3, #1
 80009ac:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	2200      	movs	r2, #0
 80009bc:	4619      	mov	r1, r3
 80009be:	4815      	ldr	r0, [pc, #84]	@ (8000a14 <MX_TIM3_Init+0x138>)
 80009c0:	f005 f923 	bl	8005c0a <HAL_TIM_IC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80009ca:	f000 fd21 	bl	8001410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009ce:	2302      	movs	r3, #2
 80009d0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009d2:	2302      	movs	r3, #2
 80009d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2204      	movs	r2, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <MX_TIM3_Init+0x138>)
 80009e0:	f005 f913 	bl	8005c0a <HAL_TIM_IC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 80009ea:	f000 fd11 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_TIM3_Init+0x138>)
 80009fc:	f006 fab0 	bl	8006f60 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 8000a06:	f000 fd03 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3740      	adds	r7, #64	@ 0x40
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24000078 	.word	0x24000078
 8000a18:	40000400 	.word	0x40000400

08000a1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b090      	sub	sp, #64	@ 0x40
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a58:	4b3e      	ldr	r3, [pc, #248]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b58 <MX_TIM4_Init+0x13c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000a60:	f240 227f 	movw	r2, #639	@ 0x27f
 8000a64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b3b      	ldr	r3, [pc, #236]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a6c:	4b39      	ldr	r3, [pc, #228]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7a:	4b36      	ldr	r3, [pc, #216]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a80:	4834      	ldr	r0, [pc, #208]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000a82:	f004 fa0f 	bl	8004ea4 <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000a8c:	f000 fcc0 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a96:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	482d      	ldr	r0, [pc, #180]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000a9e:	f005 fa65 	bl	8005f6c <HAL_TIM_ConfigClockSource>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000aa8:	f000 fcb2 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000aac:	4829      	ldr	r0, [pc, #164]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000aae:	f004 fbbf 	bl	8005230 <HAL_TIM_IC_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000ab8:	f000 fcaa 	bl	8001410 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000abc:	2304      	movs	r3, #4
 8000abe:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ac0:	2350      	movs	r3, #80	@ 0x50
 8000ac2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481f      	ldr	r0, [pc, #124]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000ad8:	f005 fb40 	bl	800615c <HAL_TIM_SlaveConfigSynchro>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000ae2:	f000 fc95 	bl	8001410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000aea:	2301      	movs	r3, #1
 8000aec:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	4815      	ldr	r0, [pc, #84]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000b00:	f005 f883 	bl	8005c0a <HAL_TIM_IC_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8000b0a:	f000 fc81 	bl	8001410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b12:	2302      	movs	r3, #2
 8000b14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000b20:	f005 f873 	bl	8005c0a <HAL_TIM_IC_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8000b2a:	f000 fc71 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	@ (8000b54 <MX_TIM4_Init+0x138>)
 8000b3c:	f006 fa10 	bl	8006f60 <HAL_TIMEx_MasterConfigSynchronization>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 8000b46:	f000 fc63 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3740      	adds	r7, #64	@ 0x40
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	240000c4 	.word	0x240000c4
 8000b58:	40000800 	.word	0x40000800

08000b5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b090      	sub	sp, #64	@ 0x40
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b62:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b98:	4b3e      	ldr	r3, [pc, #248]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000b9a:	4a3f      	ldr	r2, [pc, #252]	@ (8000c98 <MX_TIM5_Init+0x13c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 639;
 8000b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000ba0:	f240 227f 	movw	r2, #639	@ 0x27f
 8000ba4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000bac:	4b39      	ldr	r3, [pc, #228]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000bae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bba:	4b36      	ldr	r3, [pc, #216]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000bc0:	4834      	ldr	r0, [pc, #208]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000bc2:	f004 f96f 	bl	8004ea4 <HAL_TIM_Base_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000bcc:	f000 fc20 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bda:	4619      	mov	r1, r3
 8000bdc:	482d      	ldr	r0, [pc, #180]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000bde:	f005 f9c5 	bl	8005f6c <HAL_TIM_ConfigClockSource>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000be8:	f000 fc12 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000bec:	4829      	ldr	r0, [pc, #164]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000bee:	f004 fb1f 	bl	8005230 <HAL_TIM_IC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000bf8:	f000 fc0a 	bl	8001410 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c00:	2350      	movs	r3, #80	@ 0x50
 8000c02:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	481f      	ldr	r0, [pc, #124]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000c18:	f005 faa0 	bl	800615c <HAL_TIM_SlaveConfigSynchro>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8000c22:	f000 fbf5 	bl	8001410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4815      	ldr	r0, [pc, #84]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000c40:	f004 ffe3 	bl	8005c0a <HAL_TIM_IC_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8000c4a:	f000 fbe1 	bl	8001410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c52:	2302      	movs	r3, #2
 8000c54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000c60:	f004 ffd3 	bl	8005c0a <HAL_TIM_IC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 8000c6a:	f000 fbd1 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	@ (8000c94 <MX_TIM5_Init+0x138>)
 8000c7c:	f006 f970 	bl	8006f60 <HAL_TIMEx_MasterConfigSynchronization>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM5_Init+0x12e>
  {
    Error_Handler();
 8000c86:	f000 fbc3 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3740      	adds	r7, #64	@ 0x40
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	24000110 	.word	0x24000110
 8000c98:	40000c00 	.word	0x40000c00

08000c9c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b090      	sub	sp, #64	@ 0x40
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000cda:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <MX_TIM15_Init+0x140>)
 8000cdc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 8000cde:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000ce0:	f240 227f 	movw	r2, #639	@ 0x27f
 8000ce4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000cec:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000cee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b38      	ldr	r3, [pc, #224]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000cfa:	4b37      	ldr	r3, [pc, #220]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d00:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d06:	4834      	ldr	r0, [pc, #208]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000d08:	f004 f8cc 	bl	8004ea4 <HAL_TIM_Base_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8000d12:	f000 fb7d 	bl	8001410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d20:	4619      	mov	r1, r3
 8000d22:	482d      	ldr	r0, [pc, #180]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000d24:	f005 f922 	bl	8005f6c <HAL_TIM_ConfigClockSource>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 8000d2e:	f000 fb6f 	bl	8001410 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000d32:	4829      	ldr	r0, [pc, #164]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000d34:	f004 fa7c 	bl	8005230 <HAL_TIM_IC_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8000d3e:	f000 fb67 	bl	8001410 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d42:	2304      	movs	r3, #4
 8000d44:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d46:	2350      	movs	r3, #80	@ 0x50
 8000d48:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481e      	ldr	r0, [pc, #120]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000d5e:	f005 f9fd 	bl	800615c <HAL_TIM_SlaveConfigSynchro>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000d68:	f000 fb52 	bl	8001410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d70:	2301      	movs	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	4814      	ldr	r0, [pc, #80]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000d86:	f004 ff40 	bl	8005c0a <HAL_TIM_IC_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8000d90:	f000 fb3e 	bl	8001410 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d94:	2302      	movs	r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2204      	movs	r2, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000da6:	f004 ff30 	bl	8005c0a <HAL_TIM_IC_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 8000db0:	f000 fb2e 	bl	8001410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_TIM15_Init+0x13c>)
 8000dc2:	f006 f8cd 	bl	8006f60 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 8000dcc:	f000 fb20 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	3740      	adds	r7, #64	@ 0x40
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2400015c 	.word	0x2400015c
 8000ddc:	40014000 	.word	0x40014000

08000de0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000de4:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000de6:	4a23      	ldr	r2, [pc, #140]	@ (8000e74 <MX_USART3_UART_Init+0x94>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dea:	4b21      	ldr	r3, [pc, #132]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000dec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000df0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e16:	4b16      	ldr	r3, [pc, #88]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e22:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e28:	4811      	ldr	r0, [pc, #68]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e2a:	f006 f9d1 	bl	80071d0 <HAL_UART_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e34:	f000 faec 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	480d      	ldr	r0, [pc, #52]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e3c:	f007 fadd 	bl	80083fa <HAL_UARTEx_SetTxFifoThreshold>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e46:	f000 fae3 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4808      	ldr	r0, [pc, #32]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e4e:	f007 fb12 	bl	8008476 <HAL_UARTEx_SetRxFifoThreshold>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e58:	f000 fada 	bl	8001410 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e5c:	4804      	ldr	r0, [pc, #16]	@ (8000e70 <MX_USART3_UART_Init+0x90>)
 8000e5e:	f007 fa93 	bl	8008388 <HAL_UARTEx_DisableFifoMode>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e68:	f000 fad2 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	240001a8 	.word	0x240001a8
 8000e74:	40004800 	.word	0x40004800

08000e78 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	@ 0x38
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9e:	4b80      	ldr	r3, [pc, #512]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000ea0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ea4:	4a7e      	ldr	r2, [pc, #504]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000eae:	4b7c      	ldr	r3, [pc, #496]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000eb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	623b      	str	r3, [r7, #32]
 8000eba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebc:	4b78      	ldr	r3, [pc, #480]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000ebe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ec2:	4a77      	ldr	r2, [pc, #476]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ecc:	4b74      	ldr	r3, [pc, #464]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000ece:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eda:	4b71      	ldr	r3, [pc, #452]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee0:	4a6f      	ldr	r2, [pc, #444]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000ee2:	f043 0320 	orr.w	r3, r3, #32
 8000ee6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000eea:	4b6d      	ldr	r3, [pc, #436]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000eec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef0:	f003 0320 	and.w	r3, r3, #32
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef8:	4b69      	ldr	r3, [pc, #420]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000efe:	4a68      	ldr	r2, [pc, #416]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f04:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f08:	4b65      	ldr	r3, [pc, #404]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b62      	ldr	r3, [pc, #392]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f18:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f1c:	4a60      	ldr	r2, [pc, #384]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f26:	4b5e      	ldr	r3, [pc, #376]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f28:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b5a      	ldr	r3, [pc, #360]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f3a:	4a59      	ldr	r2, [pc, #356]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f44:	4b56      	ldr	r3, [pc, #344]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	4b53      	ldr	r3, [pc, #332]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f58:	4a51      	ldr	r2, [pc, #324]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f62:	4b4f      	ldr	r3, [pc, #316]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f70:	4b4b      	ldr	r3, [pc, #300]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f76:	4a4a      	ldr	r2, [pc, #296]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f7c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f80:	4b47      	ldr	r3, [pc, #284]	@ (80010a0 <MX_GPIO_Init+0x218>)
 8000f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f94:	4843      	ldr	r0, [pc, #268]	@ (80010a4 <MX_GPIO_Init+0x21c>)
 8000f96:	f001 f973 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000fa0:	4841      	ldr	r0, [pc, #260]	@ (80010a8 <MX_GPIO_Init+0x220>)
 8000fa2:	f001 f96d 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2102      	movs	r1, #2
 8000faa:	4840      	ldr	r0, [pc, #256]	@ (80010ac <MX_GPIO_Init+0x224>)
 8000fac:	f001 f968 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	483a      	ldr	r0, [pc, #232]	@ (80010b0 <MX_GPIO_Init+0x228>)
 8000fc6:	f000 ffab 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4830      	ldr	r0, [pc, #192]	@ (80010a4 <MX_GPIO_Init+0x21c>)
 8000fe4:	f000 ff9c 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000fe8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4829      	ldr	r0, [pc, #164]	@ (80010a8 <MX_GPIO_Init+0x220>)
 8001002:	f000 ff8d 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001006:	2380      	movs	r3, #128	@ 0x80
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4826      	ldr	r0, [pc, #152]	@ (80010b4 <MX_GPIO_Init+0x22c>)
 800101c:	f000 ff80 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4820      	ldr	r0, [pc, #128]	@ (80010b8 <MX_GPIO_Init+0x230>)
 8001036:	f000 ff73 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800103a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800104c:	230a      	movs	r3, #10
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4818      	ldr	r0, [pc, #96]	@ (80010b8 <MX_GPIO_Init+0x230>)
 8001058:	f000 ff62 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800105c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	4810      	ldr	r0, [pc, #64]	@ (80010b8 <MX_GPIO_Init+0x230>)
 8001076:	f000 ff53 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800107a:	2302      	movs	r3, #2
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108e:	4619      	mov	r1, r3
 8001090:	4806      	ldr	r0, [pc, #24]	@ (80010ac <MX_GPIO_Init+0x224>)
 8001092:	f000 ff45 	bl	8001f20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001096:	bf00      	nop
 8001098:	3738      	adds	r7, #56	@ 0x38
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	58024400 	.word	0x58024400
 80010a4:	58021400 	.word	0x58021400
 80010a8:	58020400 	.word	0x58020400
 80010ac:	58021000 	.word	0x58021000
 80010b0:	58020800 	.word	0x58020800
 80010b4:	58021800 	.word	0x58021800
 80010b8:	58020000 	.word	0x58020000

080010bc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4ab2      	ldr	r2, [pc, #712]	@ (8001394 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d158      	bne.n	8001180 <HAL_TIM_IC_CaptureCallback+0xc4>
    {

        cycle_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010ce:	2100      	movs	r1, #0
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f005 f885 	bl	80061e0 <HAL_TIM_ReadCapturedValue>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4aaf      	ldr	r2, [pc, #700]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80010da:	6013      	str	r3, [r2, #0]
        period_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80010dc:	2104      	movs	r1, #4
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f005 f87e 	bl	80061e0 <HAL_TIM_ReadCapturedValue>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	461a      	mov	r2, r3
 80010f0:	4baa      	ldr	r3, [pc, #680]	@ (800139c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 80010f2:	601a      	str	r2, [r3, #0]
    	if (cycle_rc_0 > 1990 && cycle_rc_0 < 2010 && period_rc_0 > 0 && cycle_rc_0 > period_rc_0 ) {
 80010f4:	4ba8      	ldr	r3, [pc, #672]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d93f      	bls.n	8001180 <HAL_TIM_IC_CaptureCallback+0xc4>
 8001100:	4ba5      	ldr	r3, [pc, #660]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001108:	4293      	cmp	r3, r2
 800110a:	d839      	bhi.n	8001180 <HAL_TIM_IC_CaptureCallback+0xc4>
 800110c:	4ba3      	ldr	r3, [pc, #652]	@ (800139c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d035      	beq.n	8001180 <HAL_TIM_IC_CaptureCallback+0xc4>
 8001114:	4ba0      	ldr	r3, [pc, #640]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4ba0      	ldr	r3, [pc, #640]	@ (800139c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d92f      	bls.n	8001180 <HAL_TIM_IC_CaptureCallback+0xc4>
    		channel_mag_0 = (float) period_rc_0 / (float) cycle_rc_0;
 8001120:	4b9e      	ldr	r3, [pc, #632]	@ (800139c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800112c:	4b9a      	ldr	r3, [pc, #616]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113c:	4b98      	ldr	r3, [pc, #608]	@ (80013a0 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800113e:	edc3 7a00 	vstr	s15, [r3]
    		rc_comm_temp[0] = MOTOR_MAX_PWM_VALUE * channel_mag_0 + (1-channel_mag_0)*MOTOR_MIN_PWM_VALUE ;
 8001142:	4b97      	ldr	r3, [pc, #604]	@ (80013a0 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 80013a4 <HAL_TIM_IC_CaptureCallback+0x2e8>
 800114c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001150:	4b93      	ldr	r3, [pc, #588]	@ (80013a0 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800115a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800115e:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 80013dc <HAL_TIM_IC_CaptureCallback+0x320>
 8001162:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116a:	4b8f      	ldr	r3, [pc, #572]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800116c:	edc3 7a00 	vstr	s15, [r3]
    		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f004 fb84 	bl	8005880 <HAL_TIM_IC_Stop_IT>
    		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001178:	2104      	movs	r1, #4
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f004 f9be 	bl	80054fc <HAL_TIM_IC_Stop>

    	}
    }

    if (htim->Instance == TIM4)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a89      	ldr	r2, [pc, #548]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d158      	bne.n	800123c <HAL_TIM_IC_CaptureCallback+0x180>
    {

            cycle_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800118a:	2100      	movs	r1, #0
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f005 f827 	bl	80061e0 <HAL_TIM_ReadCapturedValue>
 8001192:	4603      	mov	r3, r0
 8001194:	4a86      	ldr	r2, [pc, #536]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001196:	6013      	str	r3, [r2, #0]
            period_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001198:	2104      	movs	r1, #4
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f005 f820 	bl	80061e0 <HAL_TIM_ReadCapturedValue>
 80011a0:	4602      	mov	r2, r0
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b81      	ldr	r3, [pc, #516]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80011ae:	601a      	str	r2, [r3, #0]
        	if (cycle_rc_1 > 1990 && cycle_rc_1 < 2010 && period_rc_1 > 0 && cycle_rc_1 > period_rc_1) {
 80011b0:	4b7f      	ldr	r3, [pc, #508]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d93f      	bls.n	800123c <HAL_TIM_IC_CaptureCallback+0x180>
 80011bc:	4b7c      	ldr	r3, [pc, #496]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d839      	bhi.n	800123c <HAL_TIM_IC_CaptureCallback+0x180>
 80011c8:	4b7a      	ldr	r3, [pc, #488]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d035      	beq.n	800123c <HAL_TIM_IC_CaptureCallback+0x180>
 80011d0:	4b77      	ldr	r3, [pc, #476]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b77      	ldr	r3, [pc, #476]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d92f      	bls.n	800123c <HAL_TIM_IC_CaptureCallback+0x180>
        		channel_mag_1 = (float) period_rc_1 / (float) cycle_rc_1;
 80011dc:	4b75      	ldr	r3, [pc, #468]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011e8:	4b71      	ldr	r3, [pc, #452]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f8:	4b6f      	ldr	r3, [pc, #444]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
        		rc_comm_temp[1] = MOTOR_MAX_PWM_VALUE * channel_mag_1 + (1-channel_mag_1)*MOTOR_MIN_PWM_VALUE ;
 80011fe:	4b6e      	ldr	r3, [pc, #440]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80013a4 <HAL_TIM_IC_CaptureCallback+0x2e8>
 8001208:	ee27 7a87 	vmul.f32	s14, s15, s14
 800120c:	4b6a      	ldr	r3, [pc, #424]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800121a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80013dc <HAL_TIM_IC_CaptureCallback+0x320>
 800121e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001226:	4b60      	ldr	r3, [pc, #384]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8001228:	edc3 7a01 	vstr	s15, [r3, #4]
        		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800122c:	2100      	movs	r1, #0
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f004 fb26 	bl	8005880 <HAL_TIM_IC_Stop_IT>
        		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001234:	2104      	movs	r1, #4
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f004 f960 	bl	80054fc <HAL_TIM_IC_Stop>

        	}
    }

    if (htim->Instance == TIM5)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a5e      	ldr	r2, [pc, #376]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0x300>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d158      	bne.n	80012f8 <HAL_TIM_IC_CaptureCallback+0x23c>
            {

                cycle_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001246:	2100      	movs	r1, #0
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f004 ffc9 	bl	80061e0 <HAL_TIM_ReadCapturedValue>
 800124e:	4603      	mov	r3, r0
 8001250:	4a5b      	ldr	r2, [pc, #364]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0x304>)
 8001252:	6013      	str	r3, [r2, #0]
                period_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001254:	2104      	movs	r1, #4
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f004 ffc2 	bl	80061e0 <HAL_TIM_ReadCapturedValue>
 800125c:	4602      	mov	r2, r0
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	461a      	mov	r2, r3
 8001268:	4b56      	ldr	r3, [pc, #344]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x308>)
 800126a:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_2 > 1990 && cycle_rc_2 < 2010 && period_rc_2 > 0 && cycle_rc_2 > period_rc_2) {
 800126c:	4b54      	ldr	r3, [pc, #336]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0x304>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001274:	4293      	cmp	r3, r2
 8001276:	d93f      	bls.n	80012f8 <HAL_TIM_IC_CaptureCallback+0x23c>
 8001278:	4b51      	ldr	r3, [pc, #324]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0x304>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001280:	4293      	cmp	r3, r2
 8001282:	d839      	bhi.n	80012f8 <HAL_TIM_IC_CaptureCallback+0x23c>
 8001284:	4b4f      	ldr	r3, [pc, #316]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d035      	beq.n	80012f8 <HAL_TIM_IC_CaptureCallback+0x23c>
 800128c:	4b4c      	ldr	r3, [pc, #304]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0x304>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b4c      	ldr	r3, [pc, #304]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x308>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d92f      	bls.n	80012f8 <HAL_TIM_IC_CaptureCallback+0x23c>
            		channel_mag_2 = (float) period_rc_2 / (float) cycle_rc_2;
 8001298:	4b4a      	ldr	r3, [pc, #296]	@ (80013c4 <HAL_TIM_IC_CaptureCallback+0x308>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012a4:	4b46      	ldr	r3, [pc, #280]	@ (80013c0 <HAL_TIM_IC_CaptureCallback+0x304>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b4:	4b44      	ldr	r3, [pc, #272]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x30c>)
 80012b6:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp[2] = MOTOR_MAX_PWM_VALUE * channel_mag_2 + (1-channel_mag_2)*MOTOR_MIN_PWM_VALUE ;
 80012ba:	4b43      	ldr	r3, [pc, #268]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x30c>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80013a4 <HAL_TIM_IC_CaptureCallback+0x2e8>
 80012c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012c8:	4b3f      	ldr	r3, [pc, #252]	@ (80013c8 <HAL_TIM_IC_CaptureCallback+0x30c>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012d6:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80013dc <HAL_TIM_IC_CaptureCallback+0x320>
 80012da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80012de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e2:	4b31      	ldr	r3, [pc, #196]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 80012e4:	edc3 7a02 	vstr	s15, [r3, #8]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80012e8:	2100      	movs	r1, #0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f004 fac8 	bl	8005880 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80012f0:	2104      	movs	r1, #4
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f004 f902 	bl	80054fc <HAL_TIM_IC_Stop>

            	}
            }
    if (htim->Instance == TIM15)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a33      	ldr	r2, [pc, #204]	@ (80013cc <HAL_TIM_IC_CaptureCallback+0x310>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d17f      	bne.n	8001402 <HAL_TIM_IC_CaptureCallback+0x346>
            {

                cycle_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001302:	2100      	movs	r1, #0
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f004 ff6b 	bl	80061e0 <HAL_TIM_ReadCapturedValue>
 800130a:	4603      	mov	r3, r0
 800130c:	4a30      	ldr	r2, [pc, #192]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x314>)
 800130e:	6013      	str	r3, [r2, #0]
                period_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001310:	2104      	movs	r1, #4
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f004 ff64 	bl	80061e0 <HAL_TIM_ReadCapturedValue>
 8001318:	4602      	mov	r2, r0
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	461a      	mov	r2, r3
 8001324:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001326:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_3 > 1990 && cycle_rc_3 < 2010 && period_rc_3 > 0 && cycle_rc_3 > period_rc_3) {
 8001328:	4b29      	ldr	r3, [pc, #164]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x314>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001330:	4293      	cmp	r3, r2
 8001332:	d966      	bls.n	8001402 <HAL_TIM_IC_CaptureCallback+0x346>
 8001334:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 800133c:	4293      	cmp	r3, r2
 800133e:	d860      	bhi.n	8001402 <HAL_TIM_IC_CaptureCallback+0x346>
 8001340:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d05c      	beq.n	8001402 <HAL_TIM_IC_CaptureCallback+0x346>
 8001348:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x314>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b21      	ldr	r3, [pc, #132]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x318>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d956      	bls.n	8001402 <HAL_TIM_IC_CaptureCallback+0x346>
            		channel_mag_3 = (float) period_rc_3 / (float) cycle_rc_3;
 8001354:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800136c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001370:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001372:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp[3] =  MOTOR_MAX_PWM_VALUE * channel_mag_3 + (1-channel_mag_3)*MOTOR_MIN_PWM_VALUE ;
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80013a4 <HAL_TIM_IC_CaptureCallback+0x2e8>
 8001380:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800138e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001392:	e025      	b.n	80013e0 <HAL_TIM_IC_CaptureCallback+0x324>
 8001394:	40000400 	.word	0x40000400
 8001398:	2400024c 	.word	0x2400024c
 800139c:	2400025c 	.word	0x2400025c
 80013a0:	2400026c 	.word	0x2400026c
 80013a4:	44d48000 	.word	0x44d48000
 80013a8:	2400023c 	.word	0x2400023c
 80013ac:	40000800 	.word	0x40000800
 80013b0:	24000250 	.word	0x24000250
 80013b4:	24000260 	.word	0x24000260
 80013b8:	24000270 	.word	0x24000270
 80013bc:	40000c00 	.word	0x40000c00
 80013c0:	24000254 	.word	0x24000254
 80013c4:	24000264 	.word	0x24000264
 80013c8:	24000274 	.word	0x24000274
 80013cc:	40014000 	.word	0x40014000
 80013d0:	24000258 	.word	0x24000258
 80013d4:	24000268 	.word	0x24000268
 80013d8:	24000278 	.word	0x24000278
 80013dc:	44548000 	.word	0x44548000
 80013e0:	ed5f 6a02 	vldr	s13, [pc, #-8]	@ 80013dc <HAL_TIM_IC_CaptureCallback+0x320>
 80013e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x350>)
 80013ee:	edc3 7a03 	vstr	s15, [r3, #12]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80013f2:	2100      	movs	r1, #0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f004 fa43 	bl	8005880 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80013fa:	2104      	movs	r1, #4
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f004 f87d 	bl	80054fc <HAL_TIM_IC_Stop>

            	}
            }


}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2400023c 	.word	0x2400023c

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <Error_Handler+0x8>

0800141c <set_motor_pwm>:


extern TIM_HandleTypeDef htim1;

void set_motor_pwm(float motor_pwm[])
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if (motor_pwm[0] >= MOTOR_MAX_PWM_VALUE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001594 <set_motor_pwm+0x178>
 800142e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	db05      	blt.n	8001444 <set_motor_pwm+0x28>
	  htim1.Instance->CCR1 = MOTOR_MAX_PWM_VALUE;
 8001438:	4b57      	ldr	r3, [pc, #348]	@ (8001598 <set_motor_pwm+0x17c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001440:	635a      	str	r2, [r3, #52]	@ 0x34
 8001442:	e019      	b.n	8001478 <set_motor_pwm+0x5c>
  else if (motor_pwm[0] <= MOTOR_MIN_PWM_VALUE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800159c <set_motor_pwm+0x180>
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	d805      	bhi.n	8001464 <set_motor_pwm+0x48>
	  htim1.Instance->CCR1 = MOTOR_MIN_PWM_VALUE;
 8001458:	4b4f      	ldr	r3, [pc, #316]	@ (8001598 <set_motor_pwm+0x17c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f240 3252 	movw	r2, #850	@ 0x352
 8001460:	635a      	str	r2, [r3, #52]	@ 0x34
 8001462:	e009      	b.n	8001478 <set_motor_pwm+0x5c>
  else
	  htim1.Instance->CCR1 = motor_pwm[0] ;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	4b4b      	ldr	r3, [pc, #300]	@ (8001598 <set_motor_pwm+0x17c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001472:	ee17 2a90 	vmov	r2, s15
 8001476:	635a      	str	r2, [r3, #52]	@ 0x34
  
  if (motor_pwm[1] >= MOTOR_MAX_PWM_VALUE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3304      	adds	r3, #4
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001594 <set_motor_pwm+0x178>
 8001484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	db05      	blt.n	800149a <set_motor_pwm+0x7e>
	  htim1.Instance->CCR2 = MOTOR_MAX_PWM_VALUE;
 800148e:	4b42      	ldr	r3, [pc, #264]	@ (8001598 <set_motor_pwm+0x17c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001496:	639a      	str	r2, [r3, #56]	@ 0x38
 8001498:	e01b      	b.n	80014d2 <set_motor_pwm+0xb6>
  else if (motor_pwm[1] <= MOTOR_MIN_PWM_VALUE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3304      	adds	r3, #4
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800159c <set_motor_pwm+0x180>
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	d805      	bhi.n	80014bc <set_motor_pwm+0xa0>
	  htim1.Instance->CCR2 = MOTOR_MIN_PWM_VALUE;
 80014b0:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <set_motor_pwm+0x17c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f240 3252 	movw	r2, #850	@ 0x352
 80014b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80014ba:	e00a      	b.n	80014d2 <set_motor_pwm+0xb6>
  else
	  htim1.Instance->CCR2 =  motor_pwm[1] ;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3304      	adds	r3, #4
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <set_motor_pwm+0x17c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014cc:	ee17 2a90 	vmov	r2, s15
 80014d0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  if (motor_pwm[2] >= MOTOR_MAX_PWM_VALUE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3308      	adds	r3, #8
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001594 <set_motor_pwm+0x178>
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	db05      	blt.n	80014f4 <set_motor_pwm+0xd8>
	  htim1.Instance->CCR3 = MOTOR_MAX_PWM_VALUE;
 80014e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <set_motor_pwm+0x17c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80014f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014f2:	e01b      	b.n	800152c <set_motor_pwm+0x110>
  else if (motor_pwm[2] <= MOTOR_MIN_PWM_VALUE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3308      	adds	r3, #8
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800159c <set_motor_pwm+0x180>
 8001500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	d805      	bhi.n	8001516 <set_motor_pwm+0xfa>
	  htim1.Instance->CCR3 = MOTOR_MIN_PWM_VALUE;
 800150a:	4b23      	ldr	r3, [pc, #140]	@ (8001598 <set_motor_pwm+0x17c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f240 3252 	movw	r2, #850	@ 0x352
 8001512:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001514:	e00a      	b.n	800152c <set_motor_pwm+0x110>
  else
	  htim1.Instance->CCR3 =  motor_pwm[2] ;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3308      	adds	r3, #8
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <set_motor_pwm+0x17c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001526:	ee17 2a90 	vmov	r2, s15
 800152a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  if (motor_pwm[3] >= MOTOR_MAX_PWM_VALUE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	330c      	adds	r3, #12
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001594 <set_motor_pwm+0x178>
 8001538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001540:	db05      	blt.n	800154e <set_motor_pwm+0x132>
	  htim1.Instance->CCR4 = MOTOR_MAX_PWM_VALUE;
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <set_motor_pwm+0x17c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800154a:	641a      	str	r2, [r3, #64]	@ 0x40
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM_VALUE)
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
  else
	  htim1.Instance->CCR4 = motor_pwm[3] ;
}
 800154c:	e01b      	b.n	8001586 <set_motor_pwm+0x16a>
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM_VALUE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	330c      	adds	r3, #12
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800159c <set_motor_pwm+0x180>
 800155a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001562:	d805      	bhi.n	8001570 <set_motor_pwm+0x154>
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <set_motor_pwm+0x17c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f240 3252 	movw	r2, #850	@ 0x352
 800156c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156e:	e00a      	b.n	8001586 <set_motor_pwm+0x16a>
	  htim1.Instance->CCR4 = motor_pwm[3] ;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	330c      	adds	r3, #12
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <set_motor_pwm+0x17c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001580:	ee17 2a90 	vmov	r2, s15
 8001584:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	44d48000 	.word	0x44d48000
 8001598:	2400002c 	.word	0x2400002c
 800159c:	44548000 	.word	0x44548000

080015a0 <set_motor_pwm_zero>:


void set_motor_pwm_zero(float motor_pwm[])
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  motor_pwm[0] = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
  motor_pwm[1] = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3304      	adds	r3, #4
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
  motor_pwm[2] = 0;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3308      	adds	r3, #8
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
  motor_pwm[3] = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	330c      	adds	r3, #12
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_MspInit+0x30>)
 80015e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80015e8:	4a08      	ldr	r2, [pc, #32]	@ (800160c <HAL_MspInit+0x30>)
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80015f2:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_MspInit+0x30>)
 80015f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	58024400 	.word	0x58024400

08001610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b092      	sub	sp, #72	@ 0x48
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a92      	ldr	r2, [pc, #584]	@ (8001878 <HAL_TIM_Base_MspInit+0x268>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d12f      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001632:	4b92      	ldr	r3, [pc, #584]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001634:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001638:	4a90      	ldr	r2, [pc, #576]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001642:	4b8e      	ldr	r3, [pc, #568]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001644:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	633b      	str	r3, [r7, #48]	@ 0x30
 800164e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001650:	4b8a      	ldr	r3, [pc, #552]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001652:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001656:	4a89      	ldr	r2, [pc, #548]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001660:	4b86      	ldr	r3, [pc, #536]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001662:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800166c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800166e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001672:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001680:	2301      	movs	r3, #1
 8001682:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001684:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001688:	4619      	mov	r1, r3
 800168a:	487d      	ldr	r0, [pc, #500]	@ (8001880 <HAL_TIM_Base_MspInit+0x270>)
 800168c:	f000 fc48 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001690:	e0ee      	b.n	8001870 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM3)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7b      	ldr	r2, [pc, #492]	@ (8001884 <HAL_TIM_Base_MspInit+0x274>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d136      	bne.n	800170a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169c:	4b77      	ldr	r3, [pc, #476]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 800169e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016a2:	4a76      	ldr	r2, [pc, #472]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80016ac:	4b73      	ldr	r3, [pc, #460]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 80016ae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b70      	ldr	r3, [pc, #448]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 80016bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016c0:	4a6e      	ldr	r2, [pc, #440]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016ca:	4b6c      	ldr	r3, [pc, #432]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 80016cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016d8:	2310      	movs	r3, #16
 80016da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016e8:	2302      	movs	r3, #2
 80016ea:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016f0:	4619      	mov	r1, r3
 80016f2:	4865      	ldr	r0, [pc, #404]	@ (8001888 <HAL_TIM_Base_MspInit+0x278>)
 80016f4:	f000 fc14 	bl	8001f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	201d      	movs	r0, #29
 80016fe:	f000 fbda 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001702:	201d      	movs	r0, #29
 8001704:	f000 fbf1 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 8001708:	e0b2      	b.n	8001870 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM4)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a5f      	ldr	r2, [pc, #380]	@ (800188c <HAL_TIM_Base_MspInit+0x27c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d136      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001714:	4b59      	ldr	r3, [pc, #356]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001716:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800171a:	4a58      	ldr	r2, [pc, #352]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001724:	4b55      	ldr	r3, [pc, #340]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001726:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b52      	ldr	r3, [pc, #328]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001734:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001738:	4a50      	ldr	r2, [pc, #320]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001742:	4b4e      	ldr	r3, [pc, #312]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001744:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001750:	2340      	movs	r3, #64	@ 0x40
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001760:	2302      	movs	r3, #2
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001768:	4619      	mov	r1, r3
 800176a:	4847      	ldr	r0, [pc, #284]	@ (8001888 <HAL_TIM_Base_MspInit+0x278>)
 800176c:	f000 fbd8 	bl	8001f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	201e      	movs	r0, #30
 8001776:	f000 fb9e 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800177a:	201e      	movs	r0, #30
 800177c:	f000 fbb5 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 8001780:	e076      	b.n	8001870 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM5)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a42      	ldr	r2, [pc, #264]	@ (8001890 <HAL_TIM_Base_MspInit+0x280>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d136      	bne.n	80017fa <HAL_TIM_Base_MspInit+0x1ea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800178c:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 800178e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001792:	4a3a      	ldr	r2, [pc, #232]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800179c:	4b37      	ldr	r3, [pc, #220]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 800179e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b34      	ldr	r3, [pc, #208]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 80017ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017b0:	4a32      	ldr	r2, [pc, #200]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017ba:	4b30      	ldr	r3, [pc, #192]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 80017bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017c8:	2301      	movs	r3, #1
 80017ca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80017d8:	2302      	movs	r3, #2
 80017da:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017e0:	4619      	mov	r1, r3
 80017e2:	482c      	ldr	r0, [pc, #176]	@ (8001894 <HAL_TIM_Base_MspInit+0x284>)
 80017e4:	f000 fb9c 	bl	8001f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	2032      	movs	r0, #50	@ 0x32
 80017ee:	f000 fb62 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80017f2:	2032      	movs	r0, #50	@ 0x32
 80017f4:	f000 fb79 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 80017f8:	e03a      	b.n	8001870 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM15)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a26      	ldr	r2, [pc, #152]	@ (8001898 <HAL_TIM_Base_MspInit+0x288>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d135      	bne.n	8001870 <HAL_TIM_Base_MspInit+0x260>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001804:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001806:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800180a:	4a1c      	ldr	r2, [pc, #112]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001810:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001816:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800181a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001822:	4b16      	ldr	r3, [pc, #88]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001824:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001828:	4a14      	ldr	r2, [pc, #80]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 800182a:	f043 0310 	orr.w	r3, r3, #16
 800182e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_TIM_Base_MspInit+0x26c>)
 8001834:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001840:	2320      	movs	r3, #32
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001850:	2304      	movs	r3, #4
 8001852:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001854:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001858:	4619      	mov	r1, r3
 800185a:	4809      	ldr	r0, [pc, #36]	@ (8001880 <HAL_TIM_Base_MspInit+0x270>)
 800185c:	f000 fb60 	bl	8001f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2074      	movs	r0, #116	@ 0x74
 8001866:	f000 fb26 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800186a:	2074      	movs	r0, #116	@ 0x74
 800186c:	f000 fb3d 	bl	8001eea <HAL_NVIC_EnableIRQ>
}
 8001870:	bf00      	nop
 8001872:	3748      	adds	r7, #72	@ 0x48
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40010000 	.word	0x40010000
 800187c:	58024400 	.word	0x58024400
 8001880:	58021000 	.word	0x58021000
 8001884:	40000400 	.word	0x40000400
 8001888:	58020400 	.word	0x58020400
 800188c:	40000800 	.word	0x40000800
 8001890:	40000c00 	.word	0x40000c00
 8001894:	58020000 	.word	0x58020000
 8001898:	40014000 	.word	0x40014000

0800189c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a13      	ldr	r2, [pc, #76]	@ (8001908 <HAL_TIM_MspPostInit+0x6c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d11f      	bne.n	80018fe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018be:	4b13      	ldr	r3, [pc, #76]	@ (800190c <HAL_TIM_MspPostInit+0x70>)
 80018c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018c4:	4a11      	ldr	r2, [pc, #68]	@ (800190c <HAL_TIM_MspPostInit+0x70>)
 80018c6:	f043 0310 	orr.w	r3, r3, #16
 80018ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018ce:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <HAL_TIM_MspPostInit+0x70>)
 80018d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <HAL_TIM_MspPostInit+0x74>)
 80018fa:	f000 fb11 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40010000 	.word	0x40010000
 800190c:	58024400 	.word	0x58024400
 8001910:	58021000 	.word	0x58021000

08001914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b0ba      	sub	sp, #232	@ 0xe8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	22c0      	movs	r2, #192	@ 0xc0
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f006 fe2b 	bl	8008590 <memset>
  if(huart->Instance==USART3)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a27      	ldr	r2, [pc, #156]	@ (80019dc <HAL_UART_MspInit+0xc8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d146      	bne.n	80019d2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001944:	f04f 0202 	mov.w	r2, #2
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4618      	mov	r0, r3
 800195c:	f001 fcc2 	bl	80032e4 <HAL_RCCEx_PeriphCLKConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001966:	f7ff fd53 	bl	8001410 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <HAL_UART_MspInit+0xcc>)
 800196c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001970:	4a1b      	ldr	r2, [pc, #108]	@ (80019e0 <HAL_UART_MspInit+0xcc>)
 8001972:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001976:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800197a:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_UART_MspInit+0xcc>)
 800197c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001980:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001988:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_UART_MspInit+0xcc>)
 800198a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800198e:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <HAL_UART_MspInit+0xcc>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_UART_MspInit+0xcc>)
 800199a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80019a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019c0:	2307      	movs	r3, #7
 80019c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <HAL_UART_MspInit+0xd0>)
 80019ce:	f000 faa7 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	37e8      	adds	r7, #232	@ 0xe8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40004800 	.word	0x40004800
 80019e0:	58024400 	.word	0x58024400
 80019e4:	58020c00 	.word	0x58020c00

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <NMI_Handler+0x4>

080019f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <MemManage_Handler+0x4>

08001a00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3e:	f000 f93f 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <TIM3_IRQHandler+0x10>)
 8001a4e:	f003 ffd5 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	24000078 	.word	0x24000078

08001a5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <TIM4_IRQHandler+0x10>)
 8001a62:	f003 ffcb 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	240000c4 	.word	0x240000c4

08001a70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <TIM5_IRQHandler+0x10>)
 8001a76:	f003 ffc1 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	24000110 	.word	0x24000110

08001a84 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <TIM15_IRQHandler+0x10>)
 8001a8a:	f003 ffb7 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2400015c 	.word	0x2400015c

08001a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a9c:	4b32      	ldr	r3, [pc, #200]	@ (8001b68 <SystemInit+0xd0>)
 8001a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa2:	4a31      	ldr	r2, [pc, #196]	@ (8001b68 <SystemInit+0xd0>)
 8001aa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <SystemInit+0xd4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d807      	bhi.n	8001ac8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b6c <SystemInit+0xd4>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 030f 	bic.w	r3, r3, #15
 8001ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b6c <SystemInit+0xd4>)
 8001ac2:	f043 0303 	orr.w	r3, r3, #3
 8001ac6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ac8:	4b29      	ldr	r3, [pc, #164]	@ (8001b70 <SystemInit+0xd8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a28      	ldr	r2, [pc, #160]	@ (8001b70 <SystemInit+0xd8>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ad4:	4b26      	ldr	r3, [pc, #152]	@ (8001b70 <SystemInit+0xd8>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ada:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <SystemInit+0xd8>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4924      	ldr	r1, [pc, #144]	@ (8001b70 <SystemInit+0xd8>)
 8001ae0:	4b24      	ldr	r3, [pc, #144]	@ (8001b74 <SystemInit+0xdc>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ae6:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <SystemInit+0xd4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001af2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <SystemInit+0xd4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 030f 	bic.w	r3, r3, #15
 8001afa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b6c <SystemInit+0xd4>)
 8001afc:	f043 0303 	orr.w	r3, r3, #3
 8001b00:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <SystemInit+0xd8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001b08:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <SystemInit+0xd8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001b0e:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <SystemInit+0xd8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b14:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <SystemInit+0xd8>)
 8001b16:	4a18      	ldr	r2, [pc, #96]	@ (8001b78 <SystemInit+0xe0>)
 8001b18:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <SystemInit+0xd8>)
 8001b1c:	4a17      	ldr	r2, [pc, #92]	@ (8001b7c <SystemInit+0xe4>)
 8001b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b20:	4b13      	ldr	r3, [pc, #76]	@ (8001b70 <SystemInit+0xd8>)
 8001b22:	4a17      	ldr	r2, [pc, #92]	@ (8001b80 <SystemInit+0xe8>)
 8001b24:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b26:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <SystemInit+0xd8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <SystemInit+0xd8>)
 8001b2e:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <SystemInit+0xe8>)
 8001b30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <SystemInit+0xd8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <SystemInit+0xd8>)
 8001b3a:	4a11      	ldr	r2, [pc, #68]	@ (8001b80 <SystemInit+0xe8>)
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <SystemInit+0xd8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <SystemInit+0xd8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <SystemInit+0xd8>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b50:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <SystemInit+0xd8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <SystemInit+0xec>)
 8001b58:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b5c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00
 8001b6c:	52002000 	.word	0x52002000
 8001b70:	58024400 	.word	0x58024400
 8001b74:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b78:	02020200 	.word	0x02020200
 8001b7c:	01ff0000 	.word	0x01ff0000
 8001b80:	01010280 	.word	0x01010280
 8001b84:	52004000 	.word	0x52004000

08001b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b8c:	f7ff ff84 	bl	8001a98 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b92:	490d      	ldr	r1, [pc, #52]	@ (8001bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b94:	4a0d      	ldr	r2, [pc, #52]	@ (8001bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bb6:	f006 fcf3 	bl	80085a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bba:	f7fe fd0f 	bl	80005dc <main>
  bx  lr
 8001bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001bc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bc8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001bcc:	08008648 	.word	0x08008648
  ldr r2, =_sbss
 8001bd0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001bd4:	24000280 	.word	0x24000280

08001bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC_IRQHandler>
	...

08001bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be2:	2003      	movs	r0, #3
 8001be4:	f000 f95c 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001be8:	f001 f9a6 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_Init+0x68>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	4913      	ldr	r1, [pc, #76]	@ (8001c48 <HAL_Init+0x6c>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c06:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <HAL_Init+0x68>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c48 <HAL_Init+0x6c>)
 8001c10:	5cd3      	ldrb	r3, [r2, r3]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c4c <HAL_Init+0x70>)
 8001c1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c20:	4a0b      	ldr	r2, [pc, #44]	@ (8001c50 <HAL_Init+0x74>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f814 	bl	8001c54 <HAL_InitTick>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e002      	b.n	8001c3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c36:	f7ff fcd1 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	58024400 	.word	0x58024400
 8001c48:	08008600 	.word	0x08008600
 8001c4c:	24000004 	.word	0x24000004
 8001c50:	24000000 	.word	0x24000000

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_InitTick+0x60>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e021      	b.n	8001cac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <HAL_InitTick+0x64>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <HAL_InitTick+0x60>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f941 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c9c:	f000 f90b 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	@ (8001cbc <HAL_InitTick+0x68>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	2400000c 	.word	0x2400000c
 8001cb8:	24000000 	.word	0x24000000
 8001cbc:	24000008 	.word	0x24000008

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	2400000c 	.word	0x2400000c
 8001ce4:	2400027c 	.word	0x2400027c

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	2400027c 	.word	0x2400027c

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <__NVIC_SetPriorityGrouping+0x40>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <__NVIC_SetPriorityGrouping+0x40>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00
 8001d44:	05fa0000 	.word	0x05fa0000

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db0b      	blt.n	8001d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4907      	ldr	r1, [pc, #28]	@ (8001d9c <__NVIC_EnableIRQ+0x38>)
 8001d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	2001      	movs	r0, #1
 8001d86:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000e100 	.word	0xe000e100

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	@ (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff29 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff40 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff90 	bl	8001df4 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5f 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff33 	bl	8001d64 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa4 	bl	8001e5c <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f2e:	4b89      	ldr	r3, [pc, #548]	@ (8002154 <HAL_GPIO_Init+0x234>)
 8001f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f32:	e194      	b.n	800225e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8186 	beq.w	8002258 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d005      	beq.n	8001f64 <HAL_GPIO_Init+0x44>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d130      	bne.n	8001fc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	f003 0201 	and.w	r2, r3, #1
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d017      	beq.n	8002002 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d123      	bne.n	8002056 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	69b9      	ldr	r1, [r7, #24]
 8002052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	2203      	movs	r2, #3
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0203 	and.w	r2, r3, #3
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80e0 	beq.w	8002258 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002098:	4b2f      	ldr	r3, [pc, #188]	@ (8002158 <HAL_GPIO_Init+0x238>)
 800209a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800209e:	4a2e      	ldr	r2, [pc, #184]	@ (8002158 <HAL_GPIO_Init+0x238>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80020a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <HAL_GPIO_Init+0x238>)
 80020aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b6:	4a29      	ldr	r2, [pc, #164]	@ (800215c <HAL_GPIO_Init+0x23c>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a20      	ldr	r2, [pc, #128]	@ (8002160 <HAL_GPIO_Init+0x240>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d052      	beq.n	8002188 <HAL_GPIO_Init+0x268>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002164 <HAL_GPIO_Init+0x244>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d031      	beq.n	800214e <HAL_GPIO_Init+0x22e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002168 <HAL_GPIO_Init+0x248>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d02b      	beq.n	800214a <HAL_GPIO_Init+0x22a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <HAL_GPIO_Init+0x24c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d025      	beq.n	8002146 <HAL_GPIO_Init+0x226>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002170 <HAL_GPIO_Init+0x250>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <HAL_GPIO_Init+0x222>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a1b      	ldr	r2, [pc, #108]	@ (8002174 <HAL_GPIO_Init+0x254>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x21e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a1a      	ldr	r2, [pc, #104]	@ (8002178 <HAL_GPIO_Init+0x258>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x21a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a19      	ldr	r2, [pc, #100]	@ (800217c <HAL_GPIO_Init+0x25c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x216>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a18      	ldr	r2, [pc, #96]	@ (8002180 <HAL_GPIO_Init+0x260>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x212>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a17      	ldr	r2, [pc, #92]	@ (8002184 <HAL_GPIO_Init+0x264>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x20e>
 800212a:	2309      	movs	r3, #9
 800212c:	e02d      	b.n	800218a <HAL_GPIO_Init+0x26a>
 800212e:	230a      	movs	r3, #10
 8002130:	e02b      	b.n	800218a <HAL_GPIO_Init+0x26a>
 8002132:	2308      	movs	r3, #8
 8002134:	e029      	b.n	800218a <HAL_GPIO_Init+0x26a>
 8002136:	2307      	movs	r3, #7
 8002138:	e027      	b.n	800218a <HAL_GPIO_Init+0x26a>
 800213a:	2306      	movs	r3, #6
 800213c:	e025      	b.n	800218a <HAL_GPIO_Init+0x26a>
 800213e:	2305      	movs	r3, #5
 8002140:	e023      	b.n	800218a <HAL_GPIO_Init+0x26a>
 8002142:	2304      	movs	r3, #4
 8002144:	e021      	b.n	800218a <HAL_GPIO_Init+0x26a>
 8002146:	2303      	movs	r3, #3
 8002148:	e01f      	b.n	800218a <HAL_GPIO_Init+0x26a>
 800214a:	2302      	movs	r3, #2
 800214c:	e01d      	b.n	800218a <HAL_GPIO_Init+0x26a>
 800214e:	2301      	movs	r3, #1
 8002150:	e01b      	b.n	800218a <HAL_GPIO_Init+0x26a>
 8002152:	bf00      	nop
 8002154:	58000080 	.word	0x58000080
 8002158:	58024400 	.word	0x58024400
 800215c:	58000400 	.word	0x58000400
 8002160:	58020000 	.word	0x58020000
 8002164:	58020400 	.word	0x58020400
 8002168:	58020800 	.word	0x58020800
 800216c:	58020c00 	.word	0x58020c00
 8002170:	58021000 	.word	0x58021000
 8002174:	58021400 	.word	0x58021400
 8002178:	58021800 	.word	0x58021800
 800217c:	58021c00 	.word	0x58021c00
 8002180:	58022000 	.word	0x58022000
 8002184:	58022400 	.word	0x58022400
 8002188:	2300      	movs	r3, #0
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	f002 0203 	and.w	r2, r2, #3
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	4093      	lsls	r3, r2
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800219a:	4938      	ldr	r1, [pc, #224]	@ (800227c <HAL_GPIO_Init+0x35c>)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3301      	adds	r3, #1
 800225c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	f47f ae63 	bne.w	8001f34 <HAL_GPIO_Init+0x14>
  }
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	3724      	adds	r7, #36	@ 0x24
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	58000400 	.word	0x58000400

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800229c:	e003      	b.n	80022a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022bc:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <HAL_PWREx_ConfigSupply+0xb0>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	2b06      	cmp	r3, #6
 80022c6:	d00a      	beq.n	80022de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022c8:	4b26      	ldr	r3, [pc, #152]	@ (8002364 <HAL_PWREx_ConfigSupply+0xb0>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e040      	b.n	800235c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e03e      	b.n	800235c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022de:	4b21      	ldr	r3, [pc, #132]	@ (8002364 <HAL_PWREx_ConfigSupply+0xb0>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80022e6:	491f      	ldr	r1, [pc, #124]	@ (8002364 <HAL_PWREx_ConfigSupply+0xb0>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022ee:	f7ff fcfb 	bl	8001ce8 <HAL_GetTick>
 80022f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022f4:	e009      	b.n	800230a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022f6:	f7ff fcf7 	bl	8001ce8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002304:	d901      	bls.n	800230a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e028      	b.n	800235c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800230a:	4b16      	ldr	r3, [pc, #88]	@ (8002364 <HAL_PWREx_ConfigSupply+0xb0>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002316:	d1ee      	bne.n	80022f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b1e      	cmp	r3, #30
 800231c:	d008      	beq.n	8002330 <HAL_PWREx_ConfigSupply+0x7c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b2e      	cmp	r3, #46	@ 0x2e
 8002322:	d005      	beq.n	8002330 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b1d      	cmp	r3, #29
 8002328:	d002      	beq.n	8002330 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b2d      	cmp	r3, #45	@ 0x2d
 800232e:	d114      	bne.n	800235a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002330:	f7ff fcda 	bl	8001ce8 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002336:	e009      	b.n	800234c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002338:	f7ff fcd6 	bl	8001ce8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002346:	d901      	bls.n	800234c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e007      	b.n	800235c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <HAL_PWREx_ConfigSupply+0xb0>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002358:	d1ee      	bne.n	8002338 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	58024800 	.word	0x58024800

08002368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	@ 0x30
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	f000 bc1f 	b.w	8002bba <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80b3 	beq.w	80024f0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238a:	4b95      	ldr	r3, [pc, #596]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002394:	4b92      	ldr	r3, [pc, #584]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800239a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239c:	2b10      	cmp	r3, #16
 800239e:	d007      	beq.n	80023b0 <HAL_RCC_OscConfig+0x48>
 80023a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a2:	2b18      	cmp	r3, #24
 80023a4:	d112      	bne.n	80023cc <HAL_RCC_OscConfig+0x64>
 80023a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d10d      	bne.n	80023cc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	4b8b      	ldr	r3, [pc, #556]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 8098 	beq.w	80024ee <HAL_RCC_OscConfig+0x186>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 8093 	bne.w	80024ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e3f6      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0x7c>
 80023d6:	4b82      	ldr	r3, [pc, #520]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a81      	ldr	r2, [pc, #516]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e058      	b.n	8002496 <HAL_RCC_OscConfig+0x12e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d112      	bne.n	8002412 <HAL_RCC_OscConfig+0xaa>
 80023ec:	4b7c      	ldr	r3, [pc, #496]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a7b      	ldr	r2, [pc, #492]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b79      	ldr	r3, [pc, #484]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a78      	ldr	r2, [pc, #480]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80023fe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b76      	ldr	r3, [pc, #472]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a75      	ldr	r2, [pc, #468]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e041      	b.n	8002496 <HAL_RCC_OscConfig+0x12e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800241a:	d112      	bne.n	8002442 <HAL_RCC_OscConfig+0xda>
 800241c:	4b70      	ldr	r3, [pc, #448]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a6f      	ldr	r2, [pc, #444]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002422:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b6d      	ldr	r3, [pc, #436]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a6c      	ldr	r2, [pc, #432]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800242e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b6a      	ldr	r3, [pc, #424]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a69      	ldr	r2, [pc, #420]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e029      	b.n	8002496 <HAL_RCC_OscConfig+0x12e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800244a:	d112      	bne.n	8002472 <HAL_RCC_OscConfig+0x10a>
 800244c:	4b64      	ldr	r3, [pc, #400]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a63      	ldr	r2, [pc, #396]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002452:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b61      	ldr	r3, [pc, #388]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a60      	ldr	r2, [pc, #384]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800245e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b5e      	ldr	r3, [pc, #376]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a5d      	ldr	r2, [pc, #372]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e011      	b.n	8002496 <HAL_RCC_OscConfig+0x12e>
 8002472:	4b5b      	ldr	r3, [pc, #364]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a5a      	ldr	r2, [pc, #360]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b58      	ldr	r3, [pc, #352]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a57      	ldr	r2, [pc, #348]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002484:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b55      	ldr	r3, [pc, #340]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a54      	ldr	r2, [pc, #336]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002490:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002494:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d013      	beq.n	80024c6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7ff fc23 	bl	8001ce8 <HAL_GetTick>
 80024a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a6:	f7ff fc1f 	bl	8001ce8 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b64      	cmp	r3, #100	@ 0x64
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e380      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b8:	4b49      	ldr	r3, [pc, #292]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x13e>
 80024c4:	e014      	b.n	80024f0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7ff fc0f 	bl	8001ce8 <HAL_GetTick>
 80024ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ce:	f7ff fc0b 	bl	8001ce8 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b64      	cmp	r3, #100	@ 0x64
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e36c      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024e0:	4b3f      	ldr	r3, [pc, #252]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f0      	bne.n	80024ce <HAL_RCC_OscConfig+0x166>
 80024ec:	e000      	b.n	80024f0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 808c 	beq.w	8002616 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fe:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002506:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002508:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_RCC_OscConfig+0x1bc>
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	2b18      	cmp	r3, #24
 8002518:	d137      	bne.n	800258a <HAL_RCC_OscConfig+0x222>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d132      	bne.n	800258a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002524:	4b2e      	ldr	r3, [pc, #184]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_OscConfig+0x1d4>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e33e      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800253c:	4b28      	ldr	r3, [pc, #160]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 0219 	bic.w	r2, r3, #25
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	4925      	ldr	r1, [pc, #148]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7ff fbcb 	bl	8001ce8 <HAL_GetTick>
 8002552:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002556:	f7ff fbc7 	bl	8001ce8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e328      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002568:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	4b1a      	ldr	r3, [pc, #104]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	4917      	ldr	r1, [pc, #92]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002588:	e045      	b.n	8002616 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d028      	beq.n	80025e4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 0219 	bic.w	r2, r3, #25
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4910      	ldr	r1, [pc, #64]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff fba0 	bl	8001ce8 <HAL_GetTick>
 80025a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff fb9c 	bl	8001ce8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e2fd      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025be:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ca:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	061b      	lsls	r3, r3, #24
 80025d8:	4901      	ldr	r1, [pc, #4]	@ (80025e0 <HAL_RCC_OscConfig+0x278>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
 80025de:	e01a      	b.n	8002616 <HAL_RCC_OscConfig+0x2ae>
 80025e0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e4:	4b97      	ldr	r3, [pc, #604]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a96      	ldr	r2, [pc, #600]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7ff fb7a 	bl	8001ce8 <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f8:	f7ff fb76 	bl	8001ce8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e2d7      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800260a:	4b8e      	ldr	r3, [pc, #568]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	d06a      	beq.n	80026f8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002622:	4b88      	ldr	r3, [pc, #544]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800262a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800262c:	4b85      	ldr	r3, [pc, #532]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 800262e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002630:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d007      	beq.n	8002648 <HAL_RCC_OscConfig+0x2e0>
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b18      	cmp	r3, #24
 800263c:	d11b      	bne.n	8002676 <HAL_RCC_OscConfig+0x30e>
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d116      	bne.n	8002676 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002648:	4b7e      	ldr	r3, [pc, #504]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_OscConfig+0x2f8>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b80      	cmp	r3, #128	@ 0x80
 800265a:	d001      	beq.n	8002660 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e2ac      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002660:	4b78      	ldr	r3, [pc, #480]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	4975      	ldr	r1, [pc, #468]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002670:	4313      	orrs	r3, r2
 8002672:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002674:	e040      	b.n	80026f8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d023      	beq.n	80026c6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800267e:	4b71      	ldr	r3, [pc, #452]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a70      	ldr	r2, [pc, #448]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7ff fb2d 	bl	8001ce8 <HAL_GetTick>
 800268e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002692:	f7ff fb29 	bl	8001ce8 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e28a      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026a4:	4b67      	ldr	r3, [pc, #412]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026b0:	4b64      	ldr	r3, [pc, #400]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	4961      	ldr	r1, [pc, #388]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60cb      	str	r3, [r1, #12]
 80026c4:	e018      	b.n	80026f8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80026cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7ff fb09 	bl	8001ce8 <HAL_GetTick>
 80026d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026da:	f7ff fb05 	bl	8001ce8 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e266      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026ec:	4b55      	ldr	r3, [pc, #340]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d036      	beq.n	8002772 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d019      	beq.n	8002740 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270c:	4b4d      	ldr	r3, [pc, #308]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 800270e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002710:	4a4c      	ldr	r2, [pc, #304]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7ff fae6 	bl	8001ce8 <HAL_GetTick>
 800271c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002720:	f7ff fae2 	bl	8001ce8 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e243      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002732:	4b44      	ldr	r3, [pc, #272]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x3b8>
 800273e:	e018      	b.n	8002772 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002740:	4b40      	ldr	r3, [pc, #256]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002744:	4a3f      	ldr	r2, [pc, #252]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7ff facc 	bl	8001ce8 <HAL_GetTick>
 8002750:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002754:	f7ff fac8 	bl	8001ce8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e229      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002766:	4b37      	ldr	r3, [pc, #220]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b00      	cmp	r3, #0
 800277c:	d036      	beq.n	80027ec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d019      	beq.n	80027ba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002786:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a2e      	ldr	r2, [pc, #184]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 800278c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002790:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002792:	f7ff faa9 	bl	8001ce8 <HAL_GetTick>
 8002796:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800279a:	f7ff faa5 	bl	8001ce8 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e206      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027ac:	4b25      	ldr	r3, [pc, #148]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x432>
 80027b8:	e018      	b.n	80027ec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ba:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a21      	ldr	r2, [pc, #132]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80027c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027c6:	f7ff fa8f 	bl	8001ce8 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ce:	f7ff fa8b 	bl	8001ce8 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1ec      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027e0:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80af 	beq.w	8002958 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027fa:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <HAL_RCC_OscConfig+0x4e0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a12      	ldr	r2, [pc, #72]	@ (8002848 <HAL_RCC_OscConfig+0x4e0>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002804:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002806:	f7ff fa6f 	bl	8001ce8 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7ff fa6b 	bl	8001ce8 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	@ 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e1cc      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002820:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_RCC_OscConfig+0x4e0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10b      	bne.n	800284c <HAL_RCC_OscConfig+0x4e4>
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a02      	ldr	r2, [pc, #8]	@ (8002844 <HAL_RCC_OscConfig+0x4dc>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002840:	e05b      	b.n	80028fa <HAL_RCC_OscConfig+0x592>
 8002842:	bf00      	nop
 8002844:	58024400 	.word	0x58024400
 8002848:	58024800 	.word	0x58024800
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d112      	bne.n	800287a <HAL_RCC_OscConfig+0x512>
 8002854:	4b9d      	ldr	r3, [pc, #628]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	4a9c      	ldr	r2, [pc, #624]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002860:	4b9a      	ldr	r3, [pc, #616]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002864:	4a99      	ldr	r2, [pc, #612]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800286a:	6713      	str	r3, [r2, #112]	@ 0x70
 800286c:	4b97      	ldr	r3, [pc, #604]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	4a96      	ldr	r2, [pc, #600]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	6713      	str	r3, [r2, #112]	@ 0x70
 8002878:	e03f      	b.n	80028fa <HAL_RCC_OscConfig+0x592>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d112      	bne.n	80028a8 <HAL_RCC_OscConfig+0x540>
 8002882:	4b92      	ldr	r3, [pc, #584]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	4a91      	ldr	r2, [pc, #580]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	@ 0x70
 800288e:	4b8f      	ldr	r3, [pc, #572]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002892:	4a8e      	ldr	r2, [pc, #568]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002894:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002898:	6713      	str	r3, [r2, #112]	@ 0x70
 800289a:	4b8c      	ldr	r3, [pc, #560]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289e:	4a8b      	ldr	r2, [pc, #556]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a6:	e028      	b.n	80028fa <HAL_RCC_OscConfig+0x592>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b85      	cmp	r3, #133	@ 0x85
 80028ae:	d112      	bne.n	80028d6 <HAL_RCC_OscConfig+0x56e>
 80028b0:	4b86      	ldr	r3, [pc, #536]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a85      	ldr	r2, [pc, #532]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028b6:	f043 0304 	orr.w	r3, r3, #4
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80028bc:	4b83      	ldr	r3, [pc, #524]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c0:	4a82      	ldr	r2, [pc, #520]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c8:	4b80      	ldr	r3, [pc, #512]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	4a7f      	ldr	r2, [pc, #508]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d4:	e011      	b.n	80028fa <HAL_RCC_OscConfig+0x592>
 80028d6:	4b7d      	ldr	r3, [pc, #500]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028da:	4a7c      	ldr	r2, [pc, #496]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e2:	4b7a      	ldr	r3, [pc, #488]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e6:	4a79      	ldr	r2, [pc, #484]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028e8:	f023 0304 	bic.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ee:	4b77      	ldr	r3, [pc, #476]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f2:	4a76      	ldr	r2, [pc, #472]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80028f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d015      	beq.n	800292e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7ff f9f1 	bl	8001ce8 <HAL_GetTick>
 8002906:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290a:	f7ff f9ed 	bl	8001ce8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e14c      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002920:	4b6a      	ldr	r3, [pc, #424]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ee      	beq.n	800290a <HAL_RCC_OscConfig+0x5a2>
 800292c:	e014      	b.n	8002958 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7ff f9db 	bl	8001ce8 <HAL_GetTick>
 8002932:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7ff f9d7 	bl	8001ce8 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e136      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800294c:	4b5f      	ldr	r3, [pc, #380]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1ee      	bne.n	8002936 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 812b 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002962:	4b5a      	ldr	r3, [pc, #360]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800296a:	2b18      	cmp	r3, #24
 800296c:	f000 80bb 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	2b02      	cmp	r3, #2
 8002976:	f040 8095 	bne.w	8002aa4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b54      	ldr	r3, [pc, #336]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a53      	ldr	r2, [pc, #332]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002980:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7ff f9af 	bl	8001ce8 <HAL_GetTick>
 800298a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298e:	f7ff f9ab 	bl	8001ce8 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e10c      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a0:	4b4a      	ldr	r3, [pc, #296]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ac:	4b47      	ldr	r3, [pc, #284]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80029ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029b0:	4b47      	ldr	r3, [pc, #284]	@ (8002ad0 <HAL_RCC_OscConfig+0x768>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	430a      	orrs	r2, r1
 80029c0:	4942      	ldr	r1, [pc, #264]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	3b01      	subs	r3, #1
 80029cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d4:	3b01      	subs	r3, #1
 80029d6:	025b      	lsls	r3, r3, #9
 80029d8:	b29b      	uxth	r3, r3
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e0:	3b01      	subs	r3, #1
 80029e2:	041b      	lsls	r3, r3, #16
 80029e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ee:	3b01      	subs	r3, #1
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029f6:	4935      	ldr	r1, [pc, #212]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80029fc:	4b33      	ldr	r3, [pc, #204]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	4a32      	ldr	r2, [pc, #200]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a08:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a0c:	4b31      	ldr	r3, [pc, #196]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a14:	00d2      	lsls	r2, r2, #3
 8002a16:	492d      	ldr	r1, [pc, #180]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	f023 020c 	bic.w	r2, r3, #12
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	4928      	ldr	r1, [pc, #160]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a2e:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	f023 0202 	bic.w	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3a:	4924      	ldr	r1, [pc, #144]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a40:	4b22      	ldr	r3, [pc, #136]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a44:	4a21      	ldr	r2, [pc, #132]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	4a1e      	ldr	r2, [pc, #120]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a58:	4b1c      	ldr	r3, [pc, #112]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a64:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	4a18      	ldr	r2, [pc, #96]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a70:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a15      	ldr	r2, [pc, #84]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7ff f934 	bl	8001ce8 <HAL_GetTick>
 8002a80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7ff f930 	bl	8001ce8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e091      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a96:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x71c>
 8002aa2:	e089      	b.n	8002bb8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a08      	ldr	r2, [pc, #32]	@ (8002acc <HAL_RCC_OscConfig+0x764>)
 8002aaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f91a 	bl	8001ce8 <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ab6:	e00f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7ff f916 	bl	8001ce8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d908      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e077      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
 8002aca:	bf00      	nop
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	fffffc0c 	.word	0xfffffc0c
 8002ad4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc4 <HAL_RCC_OscConfig+0x85c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e9      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x750>
 8002ae4:	e068      	b.n	8002bb8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ae6:	4b37      	ldr	r3, [pc, #220]	@ (8002bc4 <HAL_RCC_OscConfig+0x85c>)
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002aec:	4b35      	ldr	r3, [pc, #212]	@ (8002bc4 <HAL_RCC_OscConfig+0x85c>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d031      	beq.n	8002b5e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f003 0203 	and.w	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d12a      	bne.n	8002b5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d122      	bne.n	8002b5e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d11a      	bne.n	8002b5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	0a5b      	lsrs	r3, r3, #9
 8002b2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b34:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d111      	bne.n	8002b5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d108      	bne.n	8002b5e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	0e1b      	lsrs	r3, r3, #24
 8002b50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e02b      	b.n	8002bba <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b62:	4b18      	ldr	r3, [pc, #96]	@ (8002bc4 <HAL_RCC_OscConfig+0x85c>)
 8002b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b66:	08db      	lsrs	r3, r3, #3
 8002b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b6c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d01f      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b78:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <HAL_RCC_OscConfig+0x85c>)
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	4a11      	ldr	r2, [pc, #68]	@ (8002bc4 <HAL_RCC_OscConfig+0x85c>)
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
 8002b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b84:	f7ff f8b0 	bl	8001ce8 <HAL_GetTick>
 8002b88:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b8a:	bf00      	nop
 8002b8c:	f7ff f8ac 	bl	8001ce8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d0f9      	beq.n	8002b8c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b98:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <HAL_RCC_OscConfig+0x85c>)
 8002b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <HAL_RCC_OscConfig+0x860>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ba4:	00d2      	lsls	r2, r2, #3
 8002ba6:	4907      	ldr	r1, [pc, #28]	@ (8002bc4 <HAL_RCC_OscConfig+0x85c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <HAL_RCC_OscConfig+0x85c>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <HAL_RCC_OscConfig+0x85c>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3730      	adds	r7, #48	@ 0x30
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	ffff0007 	.word	0xffff0007

08002bcc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e19c      	b.n	8002f1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b8a      	ldr	r3, [pc, #552]	@ (8002e0c <HAL_RCC_ClockConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d910      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b87      	ldr	r3, [pc, #540]	@ (8002e0c <HAL_RCC_ClockConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 020f 	bic.w	r2, r3, #15
 8002bf6:	4985      	ldr	r1, [pc, #532]	@ (8002e0c <HAL_RCC_ClockConfig+0x240>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b83      	ldr	r3, [pc, #524]	@ (8002e0c <HAL_RCC_ClockConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e184      	b.n	8002f1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d010      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	4b7b      	ldr	r3, [pc, #492]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d908      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c2c:	4b78      	ldr	r3, [pc, #480]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	4975      	ldr	r1, [pc, #468]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d010      	beq.n	8002c6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	4b70      	ldr	r3, [pc, #448]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d908      	bls.n	8002c6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	496a      	ldr	r1, [pc, #424]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d010      	beq.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	4b64      	ldr	r3, [pc, #400]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d908      	bls.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c88:	4b61      	ldr	r3, [pc, #388]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	495e      	ldr	r1, [pc, #376]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d010      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d908      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cb6:	4b56      	ldr	r3, [pc, #344]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	4953      	ldr	r1, [pc, #332]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d908      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f023 020f 	bic.w	r2, r3, #15
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4947      	ldr	r1, [pc, #284]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d055      	beq.n	8002dae <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d02:	4b43      	ldr	r3, [pc, #268]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4940      	ldr	r1, [pc, #256]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d121      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0f6      	b.n	8002f1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d34:	4b36      	ldr	r3, [pc, #216]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d115      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0ea      	b.n	8002f1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d4c:	4b30      	ldr	r3, [pc, #192]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0de      	b.n	8002f1a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0d6      	b.n	8002f1a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d6c:	4b28      	ldr	r3, [pc, #160]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f023 0207 	bic.w	r2, r3, #7
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4925      	ldr	r1, [pc, #148]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7e:	f7fe ffb3 	bl	8001ce8 <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d86:	f7fe ffaf 	bl	8001ce8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0be      	b.n	8002f1a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d1eb      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d010      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d208      	bcs.n	8002ddc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dca:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f023 020f 	bic.w	r2, r3, #15
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	490e      	ldr	r1, [pc, #56]	@ (8002e10 <HAL_RCC_ClockConfig+0x244>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <HAL_RCC_ClockConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d214      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <HAL_RCC_ClockConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 020f 	bic.w	r2, r3, #15
 8002df2:	4906      	ldr	r1, [pc, #24]	@ (8002e0c <HAL_RCC_ClockConfig+0x240>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <HAL_RCC_ClockConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d005      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e086      	b.n	8002f1a <HAL_RCC_ClockConfig+0x34e>
 8002e0c:	52002000 	.word	0x52002000
 8002e10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	4b3f      	ldr	r3, [pc, #252]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d208      	bcs.n	8002e42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e30:	4b3c      	ldr	r3, [pc, #240]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	4939      	ldr	r1, [pc, #228]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d010      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	4b34      	ldr	r3, [pc, #208]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d208      	bcs.n	8002e70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e5e:	4b31      	ldr	r3, [pc, #196]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	492e      	ldr	r1, [pc, #184]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d010      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	4b28      	ldr	r3, [pc, #160]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d208      	bcs.n	8002e9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e8c:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4922      	ldr	r1, [pc, #136]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d208      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eba:	4b1a      	ldr	r3, [pc, #104]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4917      	ldr	r1, [pc, #92]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002ecc:	f000 f834 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b14      	ldr	r3, [pc, #80]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	0a1b      	lsrs	r3, r3, #8
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	4912      	ldr	r1, [pc, #72]	@ (8002f28 <HAL_RCC_ClockConfig+0x35c>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002eea:	4b0e      	ldr	r3, [pc, #56]	@ (8002f24 <HAL_RCC_ClockConfig+0x358>)
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8002f28 <HAL_RCC_ClockConfig+0x35c>)
 8002ef4:	5cd3      	ldrb	r3, [r2, r3]
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	4a0a      	ldr	r2, [pc, #40]	@ (8002f2c <HAL_RCC_ClockConfig+0x360>)
 8002f02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f04:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <HAL_RCC_ClockConfig+0x364>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f34 <HAL_RCC_ClockConfig+0x368>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fea0 	bl	8001c54 <HAL_InitTick>
 8002f14:	4603      	mov	r3, r0
 8002f16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	58024400 	.word	0x58024400
 8002f28:	08008600 	.word	0x08008600
 8002f2c:	24000004 	.word	0x24000004
 8002f30:	24000000 	.word	0x24000000
 8002f34:	24000008 	.word	0x24000008

08002f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	@ 0x24
 8002f3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f3e:	4bb3      	ldr	r3, [pc, #716]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f46:	2b18      	cmp	r3, #24
 8002f48:	f200 8155 	bhi.w	80031f6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002fb9 	.word	0x08002fb9
 8002f58:	080031f7 	.word	0x080031f7
 8002f5c:	080031f7 	.word	0x080031f7
 8002f60:	080031f7 	.word	0x080031f7
 8002f64:	080031f7 	.word	0x080031f7
 8002f68:	080031f7 	.word	0x080031f7
 8002f6c:	080031f7 	.word	0x080031f7
 8002f70:	080031f7 	.word	0x080031f7
 8002f74:	08002fdf 	.word	0x08002fdf
 8002f78:	080031f7 	.word	0x080031f7
 8002f7c:	080031f7 	.word	0x080031f7
 8002f80:	080031f7 	.word	0x080031f7
 8002f84:	080031f7 	.word	0x080031f7
 8002f88:	080031f7 	.word	0x080031f7
 8002f8c:	080031f7 	.word	0x080031f7
 8002f90:	080031f7 	.word	0x080031f7
 8002f94:	08002fe5 	.word	0x08002fe5
 8002f98:	080031f7 	.word	0x080031f7
 8002f9c:	080031f7 	.word	0x080031f7
 8002fa0:	080031f7 	.word	0x080031f7
 8002fa4:	080031f7 	.word	0x080031f7
 8002fa8:	080031f7 	.word	0x080031f7
 8002fac:	080031f7 	.word	0x080031f7
 8002fb0:	080031f7 	.word	0x080031f7
 8002fb4:	08002feb 	.word	0x08002feb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fb8:	4b94      	ldr	r3, [pc, #592]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fc4:	4b91      	ldr	r3, [pc, #580]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	08db      	lsrs	r3, r3, #3
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	4a90      	ldr	r2, [pc, #576]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fd6:	e111      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fd8:	4b8d      	ldr	r3, [pc, #564]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fda:	61bb      	str	r3, [r7, #24]
      break;
 8002fdc:	e10e      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fde:	4b8d      	ldr	r3, [pc, #564]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fe0:	61bb      	str	r3, [r7, #24]
      break;
 8002fe2:	e10b      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fe6:	61bb      	str	r3, [r7, #24]
      break;
 8002fe8:	e108      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fea:	4b88      	ldr	r3, [pc, #544]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ff4:	4b85      	ldr	r3, [pc, #532]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ffe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003000:	4b82      	ldr	r3, [pc, #520]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800300a:	4b80      	ldr	r3, [pc, #512]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800300e:	08db      	lsrs	r3, r3, #3
 8003010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003022:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80e1 	beq.w	80031f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b02      	cmp	r3, #2
 8003032:	f000 8083 	beq.w	800313c <HAL_RCC_GetSysClockFreq+0x204>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b02      	cmp	r3, #2
 800303a:	f200 80a1 	bhi.w	8003180 <HAL_RCC_GetSysClockFreq+0x248>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_RCC_GetSysClockFreq+0x114>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d056      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800304a:	e099      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800304c:	4b6f      	ldr	r3, [pc, #444]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b00      	cmp	r3, #0
 8003056:	d02d      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003058:	4b6c      	ldr	r3, [pc, #432]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	08db      	lsrs	r3, r3, #3
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	4a6b      	ldr	r2, [pc, #428]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003064:	fa22 f303 	lsr.w	r3, r2, r3
 8003068:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003082:	4b62      	ldr	r3, [pc, #392]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003092:	ed97 6a02 	vldr	s12, [r7, #8]
 8003096:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800321c <HAL_RCC_GetSysClockFreq+0x2e4>
 800309a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800309e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030b2:	e087      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c6:	4b51      	ldr	r3, [pc, #324]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800321c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030f6:	e065      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003102:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800310a:	4b40      	ldr	r3, [pc, #256]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003112:	ee07 3a90 	vmov	s15, r3
 8003116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800311a:	ed97 6a02 	vldr	s12, [r7, #8]
 800311e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800321c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800312a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800312e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800313a:	e043      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003146:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003228 <HAL_RCC_GetSysClockFreq+0x2f0>
 800314a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800314e:	4b2f      	ldr	r3, [pc, #188]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800315e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003162:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800321c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800316e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800317e:	e021      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2ec>
 800318e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003192:	4b1e      	ldr	r3, [pc, #120]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800321c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031c4:	4b11      	ldr	r3, [pc, #68]	@ (800320c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	0a5b      	lsrs	r3, r3, #9
 80031ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031ce:	3301      	adds	r3, #1
 80031d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80031e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e8:	ee17 3a90 	vmov	r3, s15
 80031ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031ee:	e005      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	61bb      	str	r3, [r7, #24]
      break;
 80031f4:	e002      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031f6:	4b07      	ldr	r3, [pc, #28]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031f8:	61bb      	str	r3, [r7, #24]
      break;
 80031fa:	bf00      	nop
  }

  return sysclockfreq;
 80031fc:	69bb      	ldr	r3, [r7, #24]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3724      	adds	r7, #36	@ 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	58024400 	.word	0x58024400
 8003210:	03d09000 	.word	0x03d09000
 8003214:	003d0900 	.word	0x003d0900
 8003218:	007a1200 	.word	0x007a1200
 800321c:	46000000 	.word	0x46000000
 8003220:	4c742400 	.word	0x4c742400
 8003224:	4a742400 	.word	0x4a742400
 8003228:	4af42400 	.word	0x4af42400

0800322c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003232:	f7ff fe81 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8003236:	4602      	mov	r2, r0
 8003238:	4b10      	ldr	r3, [pc, #64]	@ (800327c <HAL_RCC_GetHCLKFreq+0x50>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	490f      	ldr	r1, [pc, #60]	@ (8003280 <HAL_RCC_GetHCLKFreq+0x54>)
 8003244:	5ccb      	ldrb	r3, [r1, r3]
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003250:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <HAL_RCC_GetHCLKFreq+0x50>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	4a09      	ldr	r2, [pc, #36]	@ (8003280 <HAL_RCC_GetHCLKFreq+0x54>)
 800325a:	5cd3      	ldrb	r3, [r2, r3]
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	4a07      	ldr	r2, [pc, #28]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x58>)
 8003268:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800326a:	4a07      	ldr	r2, [pc, #28]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x5c>)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003270:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x58>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	58024400 	.word	0x58024400
 8003280:	08008600 	.word	0x08008600
 8003284:	24000004 	.word	0x24000004
 8003288:	24000000 	.word	0x24000000

0800328c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003290:	f7ff ffcc 	bl	800322c <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4904      	ldr	r1, [pc, #16]	@ (80032b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	58024400 	.word	0x58024400
 80032b4:	08008600 	.word	0x08008600

080032b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80032bc:	f7ff ffb6 	bl	800322c <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4904      	ldr	r1, [pc, #16]	@ (80032e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	58024400 	.word	0x58024400
 80032e0:	08008600 	.word	0x08008600

080032e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e8:	b0c8      	sub	sp, #288	@ 0x120
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f0:	2300      	movs	r3, #0
 80032f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003304:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003308:	2500      	movs	r5, #0
 800330a:	ea54 0305 	orrs.w	r3, r4, r5
 800330e:	d049      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003316:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800331a:	d02f      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800331c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003320:	d828      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003322:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003326:	d01a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003328:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800332c:	d822      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003332:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003336:	d007      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003338:	e01c      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800333a:	4ba7      	ldr	r3, [pc, #668]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800333c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333e:	4aa6      	ldr	r2, [pc, #664]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003344:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003346:	e01a      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800334c:	3308      	adds	r3, #8
 800334e:	2102      	movs	r1, #2
 8003350:	4618      	mov	r0, r3
 8003352:	f001 fc43 	bl	8004bdc <RCCEx_PLL2_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800335c:	e00f      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800335e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003362:	3328      	adds	r3, #40	@ 0x28
 8003364:	2102      	movs	r1, #2
 8003366:	4618      	mov	r0, r3
 8003368:	f001 fcea 	bl	8004d40 <RCCEx_PLL3_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003372:	e004      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800337a:	e000      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800337c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003386:	4b94      	ldr	r3, [pc, #592]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800338e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003394:	4a90      	ldr	r2, [pc, #576]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003396:	430b      	orrs	r3, r1
 8003398:	6513      	str	r3, [r2, #80]	@ 0x50
 800339a:	e003      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80033a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80033b0:	f04f 0900 	mov.w	r9, #0
 80033b4:	ea58 0309 	orrs.w	r3, r8, r9
 80033b8:	d047      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d82a      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033c4:	a201      	add	r2, pc, #4	@ (adr r2, 80033cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033e1 	.word	0x080033e1
 80033d0:	080033ef 	.word	0x080033ef
 80033d4:	08003405 	.word	0x08003405
 80033d8:	08003423 	.word	0x08003423
 80033dc:	08003423 	.word	0x08003423
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e0:	4b7d      	ldr	r3, [pc, #500]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	4a7c      	ldr	r2, [pc, #496]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ec:	e01a      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033f2:	3308      	adds	r3, #8
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 fbf0 	bl	8004bdc <RCCEx_PLL2_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003402:	e00f      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003408:	3328      	adds	r3, #40	@ 0x28
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fc97 	bl	8004d40 <RCCEx_PLL3_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003418:	e004      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003420:	e000      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003424:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800342c:	4b6a      	ldr	r3, [pc, #424]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800342e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003430:	f023 0107 	bic.w	r1, r3, #7
 8003434:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343a:	4a67      	ldr	r2, [pc, #412]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800343c:	430b      	orrs	r3, r1
 800343e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003442:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003446:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800344a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003456:	f04f 0b00 	mov.w	fp, #0
 800345a:	ea5a 030b 	orrs.w	r3, sl, fp
 800345e:	d054      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003466:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800346a:	d036      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800346c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003470:	d82f      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003476:	d032      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800347c:	d829      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800347e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003480:	d02f      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003482:	2bc0      	cmp	r3, #192	@ 0xc0
 8003484:	d825      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003486:	2b80      	cmp	r3, #128	@ 0x80
 8003488:	d018      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800348a:	2b80      	cmp	r3, #128	@ 0x80
 800348c:	d821      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003492:	2b40      	cmp	r3, #64	@ 0x40
 8003494:	d007      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003496:	e01c      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003498:	4b4f      	ldr	r3, [pc, #316]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	4a4e      	ldr	r2, [pc, #312]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800349e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80034a4:	e01e      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034aa:	3308      	adds	r3, #8
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 fb94 	bl	8004bdc <RCCEx_PLL2_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80034ba:	e013      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034c0:	3328      	adds	r3, #40	@ 0x28
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 fc3b 	bl	8004d40 <RCCEx_PLL3_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80034d0:	e008      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80034d8:	e004      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80034da:	bf00      	nop
 80034dc:	e002      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80034e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80034ec:	4b3a      	ldr	r3, [pc, #232]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80034f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fa:	4a37      	ldr	r2, [pc, #220]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003506:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800350a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003516:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003520:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003524:	460b      	mov	r3, r1
 8003526:	4313      	orrs	r3, r2
 8003528:	d05c      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800352a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800352e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003530:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003534:	d03b      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003536:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800353a:	d834      	bhi.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800353c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003540:	d037      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003546:	d82e      	bhi.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003548:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800354c:	d033      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800354e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003552:	d828      	bhi.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003558:	d01a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800355a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355e:	d822      	bhi.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003568:	d007      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800356a:	e01c      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356c:	4b1a      	ldr	r3, [pc, #104]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003578:	e01e      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800357a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800357e:	3308      	adds	r3, #8
 8003580:	2100      	movs	r1, #0
 8003582:	4618      	mov	r0, r3
 8003584:	f001 fb2a 	bl	8004bdc <RCCEx_PLL2_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800358e:	e013      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003594:	3328      	adds	r3, #40	@ 0x28
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fbd1 	bl	8004d40 <RCCEx_PLL3_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80035a4:	e008      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80035ac:	e004      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80035ae:	bf00      	nop
 80035b0:	e002      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80035b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10d      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80035c0:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80035c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ce:	4a02      	ldr	r2, [pc, #8]	@ (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80035d4:	e006      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80035d6:	bf00      	nop
 80035d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035fe:	460b      	mov	r3, r1
 8003600:	4313      	orrs	r3, r2
 8003602:	d03a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800360a:	2b30      	cmp	r3, #48	@ 0x30
 800360c:	d01f      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800360e:	2b30      	cmp	r3, #48	@ 0x30
 8003610:	d819      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003612:	2b20      	cmp	r3, #32
 8003614:	d00c      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003616:	2b20      	cmp	r3, #32
 8003618:	d815      	bhi.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d019      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800361e:	2b10      	cmp	r3, #16
 8003620:	d111      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003622:	4bae      	ldr	r3, [pc, #696]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	4aad      	ldr	r2, [pc, #692]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800362c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800362e:	e011      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003634:	3308      	adds	r3, #8
 8003636:	2102      	movs	r1, #2
 8003638:	4618      	mov	r0, r3
 800363a:	f001 facf 	bl	8004bdc <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003644:	e006      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800364c:	e002      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800364e:	bf00      	nop
 8003650:	e000      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003654:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800365c:	4b9f      	ldr	r3, [pc, #636]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800365e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003660:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003664:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	4a9c      	ldr	r2, [pc, #624]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800366c:	430b      	orrs	r3, r1
 800366e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003676:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800367a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003686:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003690:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003694:	460b      	mov	r3, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	d051      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800369a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800369e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036a4:	d035      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80036a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036aa:	d82e      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80036ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036b0:	d031      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80036b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036b6:	d828      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80036b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036bc:	d01a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80036be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c2:	d822      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80036c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036cc:	d007      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80036ce:	e01c      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d0:	4b82      	ldr	r3, [pc, #520]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	4a81      	ldr	r2, [pc, #516]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036dc:	e01c      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036e2:	3308      	adds	r3, #8
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 fa78 	bl	8004bdc <RCCEx_PLL2_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036f2:	e011      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036f8:	3328      	adds	r3, #40	@ 0x28
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fb1f 	bl	8004d40 <RCCEx_PLL3_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003708:	e006      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003718:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003720:	4b6e      	ldr	r3, [pc, #440]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003724:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003728:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800372c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372e:	4a6b      	ldr	r2, [pc, #428]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003730:	430b      	orrs	r3, r1
 8003732:	6513      	str	r3, [r2, #80]	@ 0x50
 8003734:	e003      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003736:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800373a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800373e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800374a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003754:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003758:	460b      	mov	r3, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	d053      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800375e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003768:	d033      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800376a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800376e:	d82c      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003770:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003774:	d02f      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003776:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800377a:	d826      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800377c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003780:	d02b      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003782:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003786:	d820      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800378c:	d012      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800378e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003792:	d81a      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d022      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379c:	d115      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800379e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037a2:	3308      	adds	r3, #8
 80037a4:	2101      	movs	r1, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fa18 	bl	8004bdc <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037b2:	e015      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037b8:	3328      	adds	r3, #40	@ 0x28
 80037ba:	2101      	movs	r1, #1
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 fabf 	bl	8004d40 <RCCEx_PLL3_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037c8:	e00a      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037d2:	bf00      	nop
 80037d4:	e004      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037d6:	bf00      	nop
 80037d8:	e002      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037da:	bf00      	nop
 80037dc:	e000      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80037de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037e8:	4b3c      	ldr	r3, [pc, #240]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037f6:	4a39      	ldr	r2, [pc, #228]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80037fc:	e003      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003802:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003812:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800381c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003820:	460b      	mov	r3, r1
 8003822:	4313      	orrs	r3, r2
 8003824:	d060      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003826:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800382a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800382e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003832:	d039      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003834:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003838:	d832      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800383a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800383e:	d035      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003840:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003844:	d82c      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800384a:	d031      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003850:	d826      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003852:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003856:	d02d      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003858:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800385c:	d820      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800385e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003862:	d012      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003868:	d81a      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d024      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800386e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003872:	d115      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003878:	3308      	adds	r3, #8
 800387a:	2101      	movs	r1, #1
 800387c:	4618      	mov	r0, r3
 800387e:	f001 f9ad 	bl	8004bdc <RCCEx_PLL2_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003888:	e017      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800388a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800388e:	3328      	adds	r3, #40	@ 0x28
 8003890:	2101      	movs	r1, #1
 8003892:	4618      	mov	r0, r3
 8003894:	f001 fa54 	bl	8004d40 <RCCEx_PLL3_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800389e:	e00c      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038a6:	e008      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038a8:	bf00      	nop
 80038aa:	e006      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038ac:	bf00      	nop
 80038ae:	e004      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038b0:	bf00      	nop
 80038b2:	e002      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038b4:	bf00      	nop
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10e      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038c2:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038d2:	4a02      	ldr	r2, [pc, #8]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80038da:	bf00      	nop
 80038dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003902:	460b      	mov	r3, r1
 8003904:	4313      	orrs	r3, r2
 8003906:	d037      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800390c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003912:	d00e      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003914:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003918:	d816      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800391e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003922:	d111      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003924:	4bc4      	ldr	r3, [pc, #784]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	4ac3      	ldr	r2, [pc, #780]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800392a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800392e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003930:	e00f      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003936:	3308      	adds	r3, #8
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f001 f94e 	bl	8004bdc <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003946:	e004      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800394e:	e000      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003952:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800395a:	4bb7      	ldr	r3, [pc, #732]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800395c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003968:	4ab3      	ldr	r2, [pc, #716]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800396a:	430b      	orrs	r3, r1
 800396c:	6513      	str	r3, [r2, #80]	@ 0x50
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003974:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800398e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003992:	460b      	mov	r3, r1
 8003994:	4313      	orrs	r3, r2
 8003996:	d039      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003998:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800399c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d81c      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80039a2:	a201      	add	r2, pc, #4	@ (adr r2, 80039a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	080039e5 	.word	0x080039e5
 80039ac:	080039b9 	.word	0x080039b9
 80039b0:	080039c7 	.word	0x080039c7
 80039b4:	080039e5 	.word	0x080039e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4b9f      	ldr	r3, [pc, #636]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	4a9e      	ldr	r2, [pc, #632]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039c4:	e00f      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ca:	3308      	adds	r3, #8
 80039cc:	2102      	movs	r1, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f904 	bl	8004bdc <RCCEx_PLL2_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039da:	e004      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80039e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039ee:	4b92      	ldr	r3, [pc, #584]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	f023 0103 	bic.w	r1, r3, #3
 80039f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fc:	4a8e      	ldr	r2, [pc, #568]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039fe:	430b      	orrs	r3, r1
 8003a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a02:	e003      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a22:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f000 8099 	beq.w	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a2e:	4b83      	ldr	r3, [pc, #524]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a82      	ldr	r2, [pc, #520]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3a:	f7fe f955 	bl	8001ce8 <HAL_GetTick>
 8003a3e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a42:	e00b      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a44:	f7fe f950 	bl	8001ce8 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	@ 0x64
 8003a52:	d903      	bls.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a5a:	e005      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5c:	4b77      	ldr	r3, [pc, #476]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ed      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003a68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d173      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a70:	4b71      	ldr	r3, [pc, #452]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a7c:	4053      	eors	r3, r2
 8003a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d015      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a86:	4b6c      	ldr	r3, [pc, #432]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a8e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a92:	4b69      	ldr	r3, [pc, #420]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a96:	4a68      	ldr	r2, [pc, #416]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9e:	4b66      	ldr	r3, [pc, #408]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa2:	4a65      	ldr	r2, [pc, #404]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aaa:	4a63      	ldr	r2, [pc, #396]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abe:	d118      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe f912 	bl	8001ce8 <HAL_GetTick>
 8003ac4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac8:	e00d      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fe f90d 	bl	8001ce8 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003ad4:	1ad2      	subs	r2, r2, r3
 8003ad6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d903      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003ae4:	e005      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ae6:	4b54      	ldr	r3, [pc, #336]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0eb      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003af2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d129      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003afe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b0a:	d10e      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b1c:	091a      	lsrs	r2, r3, #4
 8003b1e:	4b48      	ldr	r3, [pc, #288]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	4a45      	ldr	r2, [pc, #276]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6113      	str	r3, [r2, #16]
 8003b28:	e005      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003b2a:	4b43      	ldr	r3, [pc, #268]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	4a42      	ldr	r2, [pc, #264]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b34:	6113      	str	r3, [r2, #16]
 8003b36:	4b40      	ldr	r3, [pc, #256]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b46:	4a3c      	ldr	r2, [pc, #240]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4c:	e008      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b5c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f002 0301 	and.w	r3, r2, #1
 8003b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f000 8090 	beq.w	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b8a:	2b28      	cmp	r3, #40	@ 0x28
 8003b8c:	d870      	bhi.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003c79 	.word	0x08003c79
 8003b98:	08003c71 	.word	0x08003c71
 8003b9c:	08003c71 	.word	0x08003c71
 8003ba0:	08003c71 	.word	0x08003c71
 8003ba4:	08003c71 	.word	0x08003c71
 8003ba8:	08003c71 	.word	0x08003c71
 8003bac:	08003c71 	.word	0x08003c71
 8003bb0:	08003c71 	.word	0x08003c71
 8003bb4:	08003c45 	.word	0x08003c45
 8003bb8:	08003c71 	.word	0x08003c71
 8003bbc:	08003c71 	.word	0x08003c71
 8003bc0:	08003c71 	.word	0x08003c71
 8003bc4:	08003c71 	.word	0x08003c71
 8003bc8:	08003c71 	.word	0x08003c71
 8003bcc:	08003c71 	.word	0x08003c71
 8003bd0:	08003c71 	.word	0x08003c71
 8003bd4:	08003c5b 	.word	0x08003c5b
 8003bd8:	08003c71 	.word	0x08003c71
 8003bdc:	08003c71 	.word	0x08003c71
 8003be0:	08003c71 	.word	0x08003c71
 8003be4:	08003c71 	.word	0x08003c71
 8003be8:	08003c71 	.word	0x08003c71
 8003bec:	08003c71 	.word	0x08003c71
 8003bf0:	08003c71 	.word	0x08003c71
 8003bf4:	08003c79 	.word	0x08003c79
 8003bf8:	08003c71 	.word	0x08003c71
 8003bfc:	08003c71 	.word	0x08003c71
 8003c00:	08003c71 	.word	0x08003c71
 8003c04:	08003c71 	.word	0x08003c71
 8003c08:	08003c71 	.word	0x08003c71
 8003c0c:	08003c71 	.word	0x08003c71
 8003c10:	08003c71 	.word	0x08003c71
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003c71 	.word	0x08003c71
 8003c1c:	08003c71 	.word	0x08003c71
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003c71 	.word	0x08003c71
 8003c28:	08003c71 	.word	0x08003c71
 8003c2c:	08003c71 	.word	0x08003c71
 8003c30:	08003c71 	.word	0x08003c71
 8003c34:	08003c79 	.word	0x08003c79
 8003c38:	58024400 	.word	0x58024400
 8003c3c:	58024800 	.word	0x58024800
 8003c40:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c48:	3308      	adds	r3, #8
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 ffc5 	bl	8004bdc <RCCEx_PLL2_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c58:	e00f      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c5e:	3328      	adds	r3, #40	@ 0x28
 8003c60:	2101      	movs	r1, #1
 8003c62:	4618      	mov	r0, r3
 8003c64:	f001 f86c 	bl	8004d40 <RCCEx_PLL3_Config>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c6e:	e004      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c76:	e000      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10b      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c82:	4bc0      	ldr	r3, [pc, #768]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c92:	4abc      	ldr	r2, [pc, #752]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c9e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f002 0302 	and.w	r3, r2, #2
 8003cae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cb8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	d043      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d824      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003cce:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003d21 	.word	0x08003d21
 8003cd8:	08003ced 	.word	0x08003ced
 8003cdc:	08003d03 	.word	0x08003d03
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d21 	.word	0x08003d21
 8003ce8:	08003d21 	.word	0x08003d21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 ff71 	bl	8004bdc <RCCEx_PLL2_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d00:	e00f      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d06:	3328      	adds	r3, #40	@ 0x28
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 f818 	bl	8004d40 <RCCEx_PLL3_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d16:	e004      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d1e:	e000      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d2a:	4b96      	ldr	r3, [pc, #600]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2e:	f023 0107 	bic.w	r1, r3, #7
 8003d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d3a:	4a92      	ldr	r2, [pc, #584]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f002 0304 	and.w	r3, r2, #4
 8003d56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d60:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d043      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d824      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003d76:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003dc9 	.word	0x08003dc9
 8003d80:	08003d95 	.word	0x08003d95
 8003d84:	08003dab 	.word	0x08003dab
 8003d88:	08003dc9 	.word	0x08003dc9
 8003d8c:	08003dc9 	.word	0x08003dc9
 8003d90:	08003dc9 	.word	0x08003dc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d98:	3308      	adds	r3, #8
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 ff1d 	bl	8004bdc <RCCEx_PLL2_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003da8:	e00f      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dae:	3328      	adds	r3, #40	@ 0x28
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 ffc4 	bl	8004d40 <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	f023 0107 	bic.w	r1, r3, #7
 8003dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003de2:	4a68      	ldr	r2, [pc, #416]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de8:	e003      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f002 0320 	and.w	r3, r2, #32
 8003dfe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e02:	2300      	movs	r3, #0
 8003e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	d055      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e1e:	d033      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e24:	d82c      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2a:	d02f      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e30:	d826      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e36:	d02b      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003e38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e3c:	d820      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e42:	d012      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e48:	d81a      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d022      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e52:	d115      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e58:	3308      	adds	r3, #8
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 febd 	bl	8004bdc <RCCEx_PLL2_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e68:	e015      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e6e:	3328      	adds	r3, #40	@ 0x28
 8003e70:	2102      	movs	r1, #2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 ff64 	bl	8004d40 <RCCEx_PLL3_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e86:	e006      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e88:	bf00      	nop
 8003e8a:	e004      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e8c:	bf00      	nop
 8003e8e:	e002      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e90:	bf00      	nop
 8003e92:	e000      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e96:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e9e:	4b39      	ldr	r3, [pc, #228]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eae:	4a35      	ldr	r2, [pc, #212]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003eb4:	e003      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003eba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003eca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ed4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	d058      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ee2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ee6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eea:	d033      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003eec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ef0:	d82c      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef6:	d02f      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efc:	d826      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003efe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f02:	d02b      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003f04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f08:	d820      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f0e:	d012      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f14:	d81a      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d022      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1e:	d115      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f24:	3308      	adds	r3, #8
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fe57 	bl	8004bdc <RCCEx_PLL2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f34:	e015      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f3a:	3328      	adds	r3, #40	@ 0x28
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fefe 	bl	8004d40 <RCCEx_PLL3_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f52:	e006      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f54:	bf00      	nop
 8003f56:	e004      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e002      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f5c:	bf00      	nop
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10e      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f7a:	4a02      	ldr	r2, [pc, #8]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003f82:	bf00      	nop
 8003f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fa6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d055      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fb8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fbc:	d033      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003fbe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fc2:	d82c      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc8:	d02f      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fce:	d826      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003fd0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fd4:	d02b      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003fd6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fda:	d820      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe0:	d012      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe6:	d81a      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d022      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff0:	d115      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fdee 	bl	8004bdc <RCCEx_PLL2_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004006:	e015      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800400c:	3328      	adds	r3, #40	@ 0x28
 800400e:	2102      	movs	r1, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fe95 	bl	8004d40 <RCCEx_PLL3_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800401c:	e00a      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004024:	e006      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004026:	bf00      	nop
 8004028:	e004      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800402a:	bf00      	nop
 800402c:	e002      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004034:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800403c:	4ba1      	ldr	r3, [pc, #644]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004040:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004048:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800404c:	4a9d      	ldr	r2, [pc, #628]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800404e:	430b      	orrs	r3, r1
 8004050:	6593      	str	r3, [r2, #88]	@ 0x58
 8004052:	e003      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004058:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800405c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f002 0308 	and.w	r3, r2, #8
 8004068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004072:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004076:	460b      	mov	r3, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	d01e      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800407c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800408a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800408e:	3328      	adds	r3, #40	@ 0x28
 8004090:	2102      	movs	r1, #2
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fe54 	bl	8004d40 <RCCEx_PLL3_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040a4:	4b87      	ldr	r3, [pc, #540]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b4:	4a83      	ldr	r2, [pc, #524]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f002 0310 	and.w	r3, r2, #16
 80040c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040d4:	460b      	mov	r3, r1
 80040d6:	4313      	orrs	r3, r2
 80040d8:	d01e      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e6:	d10c      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fe25 	bl	8004d40 <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004102:	4b70      	ldr	r3, [pc, #448]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004106:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800410e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004112:	4a6c      	ldr	r2, [pc, #432]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004114:	430b      	orrs	r3, r1
 8004116:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004124:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800412e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004132:	460b      	mov	r3, r1
 8004134:	4313      	orrs	r3, r2
 8004136:	d03e      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800413c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004144:	d022      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800414a:	d81b      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004154:	d00b      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004156:	e015      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800415c:	3308      	adds	r3, #8
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fd3b 	bl	8004bdc <RCCEx_PLL2_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800416c:	e00f      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800416e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004172:	3328      	adds	r3, #40	@ 0x28
 8004174:	2102      	movs	r1, #2
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fde2 	bl	8004d40 <RCCEx_PLL3_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004182:	e004      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800418a:	e000      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800418c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004196:	4b4b      	ldr	r3, [pc, #300]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800419e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041a6:	4a47      	ldr	r2, [pc, #284]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ac:	e003      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80041c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041c4:	2300      	movs	r3, #0
 80041c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041cc:	460b      	mov	r3, r1
 80041ce:	4313      	orrs	r3, r2
 80041d0:	d03b      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041de:	d01f      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80041e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041e4:	d818      	bhi.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80041e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ea:	d003      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80041ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041f0:	d007      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80041f2:	e011      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f4:	4b33      	ldr	r3, [pc, #204]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	4a32      	ldr	r2, [pc, #200]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004200:	e00f      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004206:	3328      	adds	r3, #40	@ 0x28
 8004208:	2101      	movs	r1, #1
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fd98 	bl	8004d40 <RCCEx_PLL3_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004216:	e004      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800421e:	e000      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004222:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800422a:	4b26      	ldr	r3, [pc, #152]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800422c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423a:	4a22      	ldr	r2, [pc, #136]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800423c:	430b      	orrs	r3, r1
 800423e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004240:	e003      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004242:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004246:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800424a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004256:	673b      	str	r3, [r7, #112]	@ 0x70
 8004258:	2300      	movs	r3, #0
 800425a:	677b      	str	r3, [r7, #116]	@ 0x74
 800425c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004260:	460b      	mov	r3, r1
 8004262:	4313      	orrs	r3, r2
 8004264:	d034      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800426a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004274:	d007      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004276:	e011      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004278:	4b12      	ldr	r3, [pc, #72]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	4a11      	ldr	r2, [pc, #68]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800427e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004284:	e00e      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800428a:	3308      	adds	r3, #8
 800428c:	2102      	movs	r1, #2
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fca4 	bl	8004bdc <RCCEx_PLL2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800429a:	e003      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80042a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10d      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ba:	4a02      	ldr	r2, [pc, #8]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042bc:	430b      	orrs	r3, r1
 80042be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042c0:	e006      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80042c2:	bf00      	nop
 80042c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042de:	2300      	movs	r3, #0
 80042e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042e6:	460b      	mov	r3, r1
 80042e8:	4313      	orrs	r3, r2
 80042ea:	d00c      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042f0:	3328      	adds	r3, #40	@ 0x28
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fd23 	bl	8004d40 <RCCEx_PLL3_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d002      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004312:	663b      	str	r3, [r7, #96]	@ 0x60
 8004314:	2300      	movs	r3, #0
 8004316:	667b      	str	r3, [r7, #100]	@ 0x64
 8004318:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800431c:	460b      	mov	r3, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	d038      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800432e:	d018      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004330:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004334:	d811      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800433a:	d014      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800433c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004340:	d80b      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d011      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800434a:	d106      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800434c:	4bc3      	ldr	r3, [pc, #780]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004350:	4ac2      	ldr	r2, [pc, #776]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004358:	e008      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004360:	e004      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004362:	bf00      	nop
 8004364:	e002      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800436a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004374:	4bb9      	ldr	r3, [pc, #740]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004378:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800437c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004384:	4ab5      	ldr	r2, [pc, #724]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004386:	430b      	orrs	r3, r1
 8004388:	6553      	str	r3, [r2, #84]	@ 0x54
 800438a:	e003      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004390:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80043a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043a2:	2300      	movs	r3, #0
 80043a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043aa:	460b      	mov	r3, r1
 80043ac:	4313      	orrs	r3, r2
 80043ae:	d009      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043b0:	4baa      	ldr	r3, [pc, #680]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043be:	4aa7      	ldr	r2, [pc, #668]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80043d2:	2300      	movs	r3, #0
 80043d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80043d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80043da:	460b      	mov	r3, r1
 80043dc:	4313      	orrs	r3, r2
 80043de:	d009      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e0:	4b9e      	ldr	r3, [pc, #632]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ee:	4a9b      	ldr	r2, [pc, #620]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80043f0:	430b      	orrs	r3, r1
 80043f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80043f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004402:	2300      	movs	r3, #0
 8004404:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004406:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800440a:	460b      	mov	r3, r1
 800440c:	4313      	orrs	r3, r2
 800440e:	d009      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004410:	4b92      	ldr	r3, [pc, #584]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004414:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800441c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800441e:	4a8f      	ldr	r2, [pc, #572]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004420:	430b      	orrs	r3, r1
 8004422:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004430:	643b      	str	r3, [r7, #64]	@ 0x40
 8004432:	2300      	movs	r3, #0
 8004434:	647b      	str	r3, [r7, #68]	@ 0x44
 8004436:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800443a:	460b      	mov	r3, r1
 800443c:	4313      	orrs	r3, r2
 800443e:	d00e      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004440:	4b86      	ldr	r3, [pc, #536]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	4a85      	ldr	r2, [pc, #532]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004446:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800444a:	6113      	str	r3, [r2, #16]
 800444c:	4b83      	ldr	r3, [pc, #524]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800444e:	6919      	ldr	r1, [r3, #16]
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004454:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004458:	4a80      	ldr	r2, [pc, #512]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800445e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800446a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800446c:	2300      	movs	r3, #0
 800446e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004470:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004474:	460b      	mov	r3, r1
 8004476:	4313      	orrs	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800447a:	4b78      	ldr	r3, [pc, #480]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800447c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004482:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	4a74      	ldr	r2, [pc, #464]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800448a:	430b      	orrs	r3, r1
 800448c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800448e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800449a:	633b      	str	r3, [r7, #48]	@ 0x30
 800449c:	2300      	movs	r3, #0
 800449e:	637b      	str	r3, [r7, #52]	@ 0x34
 80044a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80044a4:	460b      	mov	r3, r1
 80044a6:	4313      	orrs	r3, r2
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044aa:	4b6c      	ldr	r3, [pc, #432]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ae:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80044b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ba:	4a68      	ldr	r2, [pc, #416]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044bc:	430b      	orrs	r3, r1
 80044be:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	2100      	movs	r1, #0
 80044ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d011      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044e0:	3308      	adds	r3, #8
 80044e2:	2100      	movs	r1, #0
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fb79 	bl	8004bdc <RCCEx_PLL2_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80044f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	2100      	movs	r1, #0
 800450a:	6239      	str	r1, [r7, #32]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
 8004512:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d011      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800451c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004520:	3308      	adds	r3, #8
 8004522:	2101      	movs	r1, #1
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fb59 	bl	8004bdc <RCCEx_PLL2_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004530:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004538:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800453c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	2100      	movs	r1, #0
 800454a:	61b9      	str	r1, [r7, #24]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004556:	460b      	mov	r3, r1
 8004558:	4313      	orrs	r3, r2
 800455a:	d011      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800455c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004560:	3308      	adds	r3, #8
 8004562:	2102      	movs	r1, #2
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fb39 	bl	8004bdc <RCCEx_PLL2_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004570:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800457c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004580:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	2100      	movs	r1, #0
 800458a:	6139      	str	r1, [r7, #16]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004596:	460b      	mov	r3, r1
 8004598:	4313      	orrs	r3, r2
 800459a:	d011      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800459c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045a0:	3328      	adds	r3, #40	@ 0x28
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fbcb 	bl	8004d40 <RCCEx_PLL3_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80045b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80045c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	2100      	movs	r1, #0
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045d6:	460b      	mov	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	d011      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045e0:	3328      	adds	r3, #40	@ 0x28
 80045e2:	2101      	movs	r1, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fbab 	bl	8004d40 <RCCEx_PLL3_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80045f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80045fc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004600:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	2100      	movs	r1, #0
 800460a:	6039      	str	r1, [r7, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004616:	460b      	mov	r3, r1
 8004618:	4313      	orrs	r3, r2
 800461a:	d011      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800461c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004620:	3328      	adds	r3, #40	@ 0x28
 8004622:	2102      	movs	r1, #2
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fb8b 	bl	8004d40 <RCCEx_PLL3_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004630:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800463c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004640:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
}
 800464e:	4618      	mov	r0, r3
 8004650:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004654:	46bd      	mov	sp, r7
 8004656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800465a:	bf00      	nop
 800465c:	58024400 	.word	0x58024400

08004660 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004664:	f7fe fde2 	bl	800322c <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4904      	ldr	r1, [pc, #16]	@ (8004688 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004680:	4618      	mov	r0, r3
 8004682:	bd80      	pop	{r7, pc}
 8004684:	58024400 	.word	0x58024400
 8004688:	08008600 	.word	0x08008600

0800468c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	@ 0x24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004694:	4ba1      	ldr	r3, [pc, #644]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800469e:	4b9f      	ldr	r3, [pc, #636]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	0b1b      	lsrs	r3, r3, #12
 80046a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046aa:	4b9c      	ldr	r3, [pc, #624]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80046b6:	4b99      	ldr	r3, [pc, #612]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ba:	08db      	lsrs	r3, r3, #3
 80046bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8111 	beq.w	80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	f000 8083 	beq.w	80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f200 80a1 	bhi.w	800482c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d056      	beq.n	80047a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046f6:	e099      	b.n	800482c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046f8:	4b88      	ldr	r3, [pc, #544]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02d      	beq.n	8004760 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004704:	4b85      	ldr	r3, [pc, #532]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	08db      	lsrs	r3, r3, #3
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	4a84      	ldr	r2, [pc, #528]	@ (8004920 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
 8004714:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472e:	4b7b      	ldr	r3, [pc, #492]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004742:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800475e:	e087      	b.n	8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004928 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800476e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004772:	4b6a      	ldr	r3, [pc, #424]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004782:	ed97 6a03 	vldr	s12, [r7, #12]
 8004786:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800478a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047a2:	e065      	b.n	8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800492c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b6:	4b59      	ldr	r3, [pc, #356]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047e6:	e043      	b.n	8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004930 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fa:	4b48      	ldr	r3, [pc, #288]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480a:	ed97 6a03 	vldr	s12, [r7, #12]
 800480e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800481e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482a:	e021      	b.n	8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800492c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800483a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483e:	4b37      	ldr	r3, [pc, #220]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004852:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800486e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004870:	4b2a      	ldr	r3, [pc, #168]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	0a5b      	lsrs	r3, r3, #9
 8004876:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800488a:	edd7 6a07 	vldr	s13, [r7, #28]
 800488e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004896:	ee17 2a90 	vmov	r2, s15
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800489e:	4b1f      	ldr	r3, [pc, #124]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80048bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c4:	ee17 2a90 	vmov	r2, s15
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80048cc:	4b13      	ldr	r3, [pc, #76]	@ (800491c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d0:	0e1b      	lsrs	r3, r3, #24
 80048d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f2:	ee17 2a90 	vmov	r2, s15
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048fa:	e008      	b.n	800490e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	609a      	str	r2, [r3, #8]
}
 800490e:	bf00      	nop
 8004910:	3724      	adds	r7, #36	@ 0x24
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	58024400 	.word	0x58024400
 8004920:	03d09000 	.word	0x03d09000
 8004924:	46000000 	.word	0x46000000
 8004928:	4c742400 	.word	0x4c742400
 800492c:	4a742400 	.word	0x4a742400
 8004930:	4af42400 	.word	0x4af42400

08004934 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	@ 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800493c:	4ba1      	ldr	r3, [pc, #644]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004946:	4b9f      	ldr	r3, [pc, #636]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	0d1b      	lsrs	r3, r3, #20
 800494c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004950:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004952:	4b9c      	ldr	r3, [pc, #624]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800495e:	4b99      	ldr	r3, [pc, #612]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004962:	08db      	lsrs	r3, r3, #3
 8004964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8111 	beq.w	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b02      	cmp	r3, #2
 8004986:	f000 8083 	beq.w	8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b02      	cmp	r3, #2
 800498e:	f200 80a1 	bhi.w	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d056      	beq.n	8004a4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800499e:	e099      	b.n	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a0:	4b88      	ldr	r3, [pc, #544]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02d      	beq.n	8004a08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049ac:	4b85      	ldr	r3, [pc, #532]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	08db      	lsrs	r3, r3, #3
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	4a84      	ldr	r2, [pc, #528]	@ (8004bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
 80049bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	ee07 3a90 	vmov	s15, r3
 80049c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d6:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a06:	e087      	b.n	8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4a:	e065      	b.n	8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5e:	4b59      	ldr	r3, [pc, #356]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a8e:	e043      	b.n	8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa2:	4b48      	ldr	r3, [pc, #288]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad2:	e021      	b.n	8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	4b37      	ldr	r3, [pc, #220]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b18:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	0a5b      	lsrs	r3, r3, #9
 8004b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b3e:	ee17 2a90 	vmov	r2, s15
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b46:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	0c1b      	lsrs	r3, r3, #16
 8004b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b50:	ee07 3a90 	vmov	s15, r3
 8004b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b6c:	ee17 2a90 	vmov	r2, s15
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b74:	4b13      	ldr	r3, [pc, #76]	@ (8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b9a:	ee17 2a90 	vmov	r2, s15
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
}
 8004bb6:	bf00      	nop
 8004bb8:	3724      	adds	r7, #36	@ 0x24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	58024400 	.word	0x58024400
 8004bc8:	03d09000 	.word	0x03d09000
 8004bcc:	46000000 	.word	0x46000000
 8004bd0:	4c742400 	.word	0x4c742400
 8004bd4:	4a742400 	.word	0x4a742400
 8004bd8:	4af42400 	.word	0x4af42400

08004bdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bea:	4b53      	ldr	r3, [pc, #332]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d101      	bne.n	8004bfa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e099      	b.n	8004d2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a4e      	ldr	r2, [pc, #312]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004c00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c06:	f7fd f86f 	bl	8001ce8 <HAL_GetTick>
 8004c0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c0c:	e008      	b.n	8004c20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c0e:	f7fd f86b 	bl	8001ce8 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e086      	b.n	8004d2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c20:	4b45      	ldr	r3, [pc, #276]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f0      	bne.n	8004c0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004c2c:	4b42      	ldr	r3, [pc, #264]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	031b      	lsls	r3, r3, #12
 8004c3a:	493f      	ldr	r1, [pc, #252]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	025b      	lsls	r3, r3, #9
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c70:	4931      	ldr	r1, [pc, #196]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c76:	4b30      	ldr	r3, [pc, #192]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	492d      	ldr	r1, [pc, #180]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c88:	4b2b      	ldr	r3, [pc, #172]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	f023 0220 	bic.w	r2, r3, #32
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	4928      	ldr	r1, [pc, #160]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c9a:	4b27      	ldr	r3, [pc, #156]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9e:	4a26      	ldr	r2, [pc, #152]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	f023 0310 	bic.w	r3, r3, #16
 8004ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ca6:	4b24      	ldr	r3, [pc, #144]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004caa:	4b24      	ldr	r3, [pc, #144]	@ (8004d3c <RCCEx_PLL2_Config+0x160>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	69d2      	ldr	r2, [r2, #28]
 8004cb2:	00d2      	lsls	r2, r2, #3
 8004cb4:	4920      	ldr	r1, [pc, #128]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cba:	4b1f      	ldr	r3, [pc, #124]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004cc0:	f043 0310 	orr.w	r3, r3, #16
 8004cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	4a19      	ldr	r2, [pc, #100]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004cd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cd8:	e00f      	b.n	8004cfa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d106      	bne.n	8004cee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ce0:	4b15      	ldr	r3, [pc, #84]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cec:	e005      	b.n	8004cfa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cee:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	4a11      	ldr	r2, [pc, #68]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004cf4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004d00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d06:	f7fc ffef 	bl	8001ce8 <HAL_GetTick>
 8004d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d0c:	e008      	b.n	8004d20 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d0e:	f7fc ffeb 	bl	8001ce8 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e006      	b.n	8004d2e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d20:	4b05      	ldr	r3, [pc, #20]	@ (8004d38 <RCCEx_PLL2_Config+0x15c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	58024400 	.word	0x58024400
 8004d3c:	ffff0007 	.word	0xffff0007

08004d40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d4e:	4b53      	ldr	r3, [pc, #332]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d101      	bne.n	8004d5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e099      	b.n	8004e92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a4e      	ldr	r2, [pc, #312]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6a:	f7fc ffbd 	bl	8001ce8 <HAL_GetTick>
 8004d6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d70:	e008      	b.n	8004d84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d72:	f7fc ffb9 	bl	8001ce8 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e086      	b.n	8004e92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d84:	4b45      	ldr	r3, [pc, #276]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f0      	bne.n	8004d72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d90:	4b42      	ldr	r3, [pc, #264]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d94:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	051b      	lsls	r3, r3, #20
 8004d9e:	493f      	ldr	r1, [pc, #252]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	025b      	lsls	r3, r3, #9
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	041b      	lsls	r3, r3, #16
 8004dc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	061b      	lsls	r3, r3, #24
 8004dd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dd4:	4931      	ldr	r1, [pc, #196]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004dda:	4b30      	ldr	r3, [pc, #192]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	492d      	ldr	r1, [pc, #180]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004dec:	4b2b      	ldr	r3, [pc, #172]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	4928      	ldr	r1, [pc, #160]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dfe:	4b27      	ldr	r3, [pc, #156]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	4a26      	ldr	r2, [pc, #152]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e0a:	4b24      	ldr	r3, [pc, #144]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ea0 <RCCEx_PLL3_Config+0x160>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	69d2      	ldr	r2, [r2, #28]
 8004e16:	00d2      	lsls	r2, r2, #3
 8004e18:	4920      	ldr	r1, [pc, #128]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	4a1e      	ldr	r2, [pc, #120]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d106      	bne.n	8004e3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e30:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	4a19      	ldr	r2, [pc, #100]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e3c:	e00f      	b.n	8004e5e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d106      	bne.n	8004e52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e44:	4b15      	ldr	r3, [pc, #84]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	4a14      	ldr	r2, [pc, #80]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e50:	e005      	b.n	8004e5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e52:	4b12      	ldr	r3, [pc, #72]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	4a11      	ldr	r2, [pc, #68]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a0e      	ldr	r2, [pc, #56]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e6a:	f7fc ff3d 	bl	8001ce8 <HAL_GetTick>
 8004e6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e70:	e008      	b.n	8004e84 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e72:	f7fc ff39 	bl	8001ce8 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e006      	b.n	8004e92 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e84:	4b05      	ldr	r3, [pc, #20]	@ (8004e9c <RCCEx_PLL3_Config+0x15c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	58024400 	.word	0x58024400
 8004ea0:	ffff0007 	.word	0xffff0007

08004ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e049      	b.n	8004f4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7fc fba0 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	f001 f9e8 	bl	80062b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e049      	b.n	8004ff8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f841 	bl	8005000 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f001 f991 	bl	80062b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <HAL_TIM_PWM_Start+0x24>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	bf14      	ite	ne
 8005030:	2301      	movne	r3, #1
 8005032:	2300      	moveq	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	e03c      	b.n	80050b2 <HAL_TIM_PWM_Start+0x9e>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b04      	cmp	r3, #4
 800503c:	d109      	bne.n	8005052 <HAL_TIM_PWM_Start+0x3e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	bf14      	ite	ne
 800504a:	2301      	movne	r3, #1
 800504c:	2300      	moveq	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	e02f      	b.n	80050b2 <HAL_TIM_PWM_Start+0x9e>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d109      	bne.n	800506c <HAL_TIM_PWM_Start+0x58>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	e022      	b.n	80050b2 <HAL_TIM_PWM_Start+0x9e>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b0c      	cmp	r3, #12
 8005070:	d109      	bne.n	8005086 <HAL_TIM_PWM_Start+0x72>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	bf14      	ite	ne
 800507e:	2301      	movne	r3, #1
 8005080:	2300      	moveq	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e015      	b.n	80050b2 <HAL_TIM_PWM_Start+0x9e>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b10      	cmp	r3, #16
 800508a:	d109      	bne.n	80050a0 <HAL_TIM_PWM_Start+0x8c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e008      	b.n	80050b2 <HAL_TIM_PWM_Start+0x9e>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	bf14      	ite	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	2300      	moveq	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e0a1      	b.n	80051fe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <HAL_TIM_PWM_Start+0xb6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050c8:	e023      	b.n	8005112 <HAL_TIM_PWM_Start+0xfe>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d104      	bne.n	80050da <HAL_TIM_PWM_Start+0xc6>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d8:	e01b      	b.n	8005112 <HAL_TIM_PWM_Start+0xfe>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d104      	bne.n	80050ea <HAL_TIM_PWM_Start+0xd6>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050e8:	e013      	b.n	8005112 <HAL_TIM_PWM_Start+0xfe>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b0c      	cmp	r3, #12
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Start+0xe6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050f8:	e00b      	b.n	8005112 <HAL_TIM_PWM_Start+0xfe>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b10      	cmp	r3, #16
 80050fe:	d104      	bne.n	800510a <HAL_TIM_PWM_Start+0xf6>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005108:	e003      	b.n	8005112 <HAL_TIM_PWM_Start+0xfe>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2201      	movs	r2, #1
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f001 fefa 	bl	8006f14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a38      	ldr	r2, [pc, #224]	@ (8005208 <HAL_TIM_PWM_Start+0x1f4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <HAL_TIM_PWM_Start+0x13e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a37      	ldr	r2, [pc, #220]	@ (800520c <HAL_TIM_PWM_Start+0x1f8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00e      	beq.n	8005152 <HAL_TIM_PWM_Start+0x13e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a35      	ldr	r2, [pc, #212]	@ (8005210 <HAL_TIM_PWM_Start+0x1fc>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d009      	beq.n	8005152 <HAL_TIM_PWM_Start+0x13e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a34      	ldr	r2, [pc, #208]	@ (8005214 <HAL_TIM_PWM_Start+0x200>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <HAL_TIM_PWM_Start+0x13e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a32      	ldr	r2, [pc, #200]	@ (8005218 <HAL_TIM_PWM_Start+0x204>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d101      	bne.n	8005156 <HAL_TIM_PWM_Start+0x142>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <HAL_TIM_PWM_Start+0x144>
 8005156:	2300      	movs	r3, #0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800516a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a25      	ldr	r2, [pc, #148]	@ (8005208 <HAL_TIM_PWM_Start+0x1f4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d022      	beq.n	80051bc <HAL_TIM_PWM_Start+0x1a8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517e:	d01d      	beq.n	80051bc <HAL_TIM_PWM_Start+0x1a8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a25      	ldr	r2, [pc, #148]	@ (800521c <HAL_TIM_PWM_Start+0x208>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <HAL_TIM_PWM_Start+0x1a8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a24      	ldr	r2, [pc, #144]	@ (8005220 <HAL_TIM_PWM_Start+0x20c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d013      	beq.n	80051bc <HAL_TIM_PWM_Start+0x1a8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a22      	ldr	r2, [pc, #136]	@ (8005224 <HAL_TIM_PWM_Start+0x210>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_TIM_PWM_Start+0x1a8>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1a      	ldr	r2, [pc, #104]	@ (800520c <HAL_TIM_PWM_Start+0x1f8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_TIM_PWM_Start+0x1a8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005228 <HAL_TIM_PWM_Start+0x214>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIM_PWM_Start+0x1a8>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a16      	ldr	r2, [pc, #88]	@ (8005210 <HAL_TIM_PWM_Start+0x1fc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d115      	bne.n	80051e8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	4b1a      	ldr	r3, [pc, #104]	@ (800522c <HAL_TIM_PWM_Start+0x218>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d015      	beq.n	80051fa <HAL_TIM_PWM_Start+0x1e6>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d4:	d011      	beq.n	80051fa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	e008      	b.n	80051fa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e000      	b.n	80051fc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40010400 	.word	0x40010400
 8005210:	40014000 	.word	0x40014000
 8005214:	40014400 	.word	0x40014400
 8005218:	40014800 	.word	0x40014800
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40001800 	.word	0x40001800
 800522c:	00010007 	.word	0x00010007

08005230 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e049      	b.n	80052d6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f841 	bl	80052de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3304      	adds	r3, #4
 800526c:	4619      	mov	r1, r3
 800526e:	4610      	mov	r0, r2
 8005270:	f001 f822 	bl	80062b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_TIM_IC_Start+0x1a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e023      	b.n	8005356 <HAL_TIM_IC_Start+0x62>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d104      	bne.n	800531e <HAL_TIM_IC_Start+0x2a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800531a:	b2db      	uxtb	r3, r3
 800531c:	e01b      	b.n	8005356 <HAL_TIM_IC_Start+0x62>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d104      	bne.n	800532e <HAL_TIM_IC_Start+0x3a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800532a:	b2db      	uxtb	r3, r3
 800532c:	e013      	b.n	8005356 <HAL_TIM_IC_Start+0x62>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d104      	bne.n	800533e <HAL_TIM_IC_Start+0x4a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533a:	b2db      	uxtb	r3, r3
 800533c:	e00b      	b.n	8005356 <HAL_TIM_IC_Start+0x62>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b10      	cmp	r3, #16
 8005342:	d104      	bne.n	800534e <HAL_TIM_IC_Start+0x5a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800534a:	b2db      	uxtb	r3, r3
 800534c:	e003      	b.n	8005356 <HAL_TIM_IC_Start+0x62>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005354:	b2db      	uxtb	r3, r3
 8005356:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d104      	bne.n	8005368 <HAL_TIM_IC_Start+0x74>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005364:	b2db      	uxtb	r3, r3
 8005366:	e013      	b.n	8005390 <HAL_TIM_IC_Start+0x9c>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b04      	cmp	r3, #4
 800536c:	d104      	bne.n	8005378 <HAL_TIM_IC_Start+0x84>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005374:	b2db      	uxtb	r3, r3
 8005376:	e00b      	b.n	8005390 <HAL_TIM_IC_Start+0x9c>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b08      	cmp	r3, #8
 800537c:	d104      	bne.n	8005388 <HAL_TIM_IC_Start+0x94>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e003      	b.n	8005390 <HAL_TIM_IC_Start+0x9c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800538e:	b2db      	uxtb	r3, r3
 8005390:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d102      	bne.n	800539e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005398:	7bbb      	ldrb	r3, [r7, #14]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d001      	beq.n	80053a2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e097      	b.n	80054d2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_IC_Start+0xbe>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053b0:	e023      	b.n	80053fa <HAL_TIM_IC_Start+0x106>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_IC_Start+0xce>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c0:	e01b      	b.n	80053fa <HAL_TIM_IC_Start+0x106>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_IC_Start+0xde>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053d0:	e013      	b.n	80053fa <HAL_TIM_IC_Start+0x106>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b0c      	cmp	r3, #12
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_IC_Start+0xee>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053e0:	e00b      	b.n	80053fa <HAL_TIM_IC_Start+0x106>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_IC_Start+0xfe>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053f0:	e003      	b.n	80053fa <HAL_TIM_IC_Start+0x106>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d104      	bne.n	800540a <HAL_TIM_IC_Start+0x116>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005408:	e013      	b.n	8005432 <HAL_TIM_IC_Start+0x13e>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b04      	cmp	r3, #4
 800540e:	d104      	bne.n	800541a <HAL_TIM_IC_Start+0x126>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005418:	e00b      	b.n	8005432 <HAL_TIM_IC_Start+0x13e>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d104      	bne.n	800542a <HAL_TIM_IC_Start+0x136>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005428:	e003      	b.n	8005432 <HAL_TIM_IC_Start+0x13e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2201      	movs	r2, #1
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f001 fd6a 	bl	8006f14 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a25      	ldr	r2, [pc, #148]	@ (80054dc <HAL_TIM_IC_Start+0x1e8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d022      	beq.n	8005490 <HAL_TIM_IC_Start+0x19c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005452:	d01d      	beq.n	8005490 <HAL_TIM_IC_Start+0x19c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a21      	ldr	r2, [pc, #132]	@ (80054e0 <HAL_TIM_IC_Start+0x1ec>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d018      	beq.n	8005490 <HAL_TIM_IC_Start+0x19c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a20      	ldr	r2, [pc, #128]	@ (80054e4 <HAL_TIM_IC_Start+0x1f0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d013      	beq.n	8005490 <HAL_TIM_IC_Start+0x19c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1e      	ldr	r2, [pc, #120]	@ (80054e8 <HAL_TIM_IC_Start+0x1f4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00e      	beq.n	8005490 <HAL_TIM_IC_Start+0x19c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <HAL_TIM_IC_Start+0x1f8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d009      	beq.n	8005490 <HAL_TIM_IC_Start+0x19c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1b      	ldr	r2, [pc, #108]	@ (80054f0 <HAL_TIM_IC_Start+0x1fc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d004      	beq.n	8005490 <HAL_TIM_IC_Start+0x19c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1a      	ldr	r2, [pc, #104]	@ (80054f4 <HAL_TIM_IC_Start+0x200>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d115      	bne.n	80054bc <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	4b18      	ldr	r3, [pc, #96]	@ (80054f8 <HAL_TIM_IC_Start+0x204>)
 8005498:	4013      	ands	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b06      	cmp	r3, #6
 80054a0:	d015      	beq.n	80054ce <HAL_TIM_IC_Start+0x1da>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a8:	d011      	beq.n	80054ce <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ba:	e008      	b.n	80054ce <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	e000      	b.n	80054d0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40010000 	.word	0x40010000
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40010400 	.word	0x40010400
 80054f0:	40001800 	.word	0x40001800
 80054f4:	40014000 	.word	0x40014000
 80054f8:	00010007 	.word	0x00010007

080054fc <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f001 fd00 	bl	8006f14 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10f      	bne.n	8005544 <HAL_TIM_IC_Stop+0x48>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a1a      	ldr	r2, [r3, #32]
 800552a:	f240 4344 	movw	r3, #1092	@ 0x444
 800552e:	4013      	ands	r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <HAL_TIM_IC_Stop+0x48>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <HAL_TIM_IC_Stop+0x58>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005552:	e023      	b.n	800559c <HAL_TIM_IC_Stop+0xa0>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b04      	cmp	r3, #4
 8005558:	d104      	bne.n	8005564 <HAL_TIM_IC_Stop+0x68>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005562:	e01b      	b.n	800559c <HAL_TIM_IC_Stop+0xa0>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b08      	cmp	r3, #8
 8005568:	d104      	bne.n	8005574 <HAL_TIM_IC_Stop+0x78>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005572:	e013      	b.n	800559c <HAL_TIM_IC_Stop+0xa0>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b0c      	cmp	r3, #12
 8005578:	d104      	bne.n	8005584 <HAL_TIM_IC_Stop+0x88>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005582:	e00b      	b.n	800559c <HAL_TIM_IC_Stop+0xa0>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b10      	cmp	r3, #16
 8005588:	d104      	bne.n	8005594 <HAL_TIM_IC_Stop+0x98>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005592:	e003      	b.n	800559c <HAL_TIM_IC_Stop+0xa0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <HAL_TIM_IC_Stop+0xb0>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055aa:	e013      	b.n	80055d4 <HAL_TIM_IC_Stop+0xd8>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d104      	bne.n	80055bc <HAL_TIM_IC_Stop+0xc0>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055ba:	e00b      	b.n	80055d4 <HAL_TIM_IC_Stop+0xd8>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d104      	bne.n	80055cc <HAL_TIM_IC_Stop+0xd0>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055ca:	e003      	b.n	80055d4 <HAL_TIM_IC_Stop+0xd8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_IC_Start_IT+0x1e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	e023      	b.n	8005646 <HAL_TIM_IC_Start_IT+0x66>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Start_IT+0x2e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e01b      	b.n	8005646 <HAL_TIM_IC_Start_IT+0x66>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d104      	bne.n	800561e <HAL_TIM_IC_Start_IT+0x3e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800561a:	b2db      	uxtb	r3, r3
 800561c:	e013      	b.n	8005646 <HAL_TIM_IC_Start_IT+0x66>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d104      	bne.n	800562e <HAL_TIM_IC_Start_IT+0x4e>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800562a:	b2db      	uxtb	r3, r3
 800562c:	e00b      	b.n	8005646 <HAL_TIM_IC_Start_IT+0x66>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b10      	cmp	r3, #16
 8005632:	d104      	bne.n	800563e <HAL_TIM_IC_Start_IT+0x5e>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800563a:	b2db      	uxtb	r3, r3
 800563c:	e003      	b.n	8005646 <HAL_TIM_IC_Start_IT+0x66>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005644:	b2db      	uxtb	r3, r3
 8005646:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <HAL_TIM_IC_Start_IT+0x78>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005654:	b2db      	uxtb	r3, r3
 8005656:	e013      	b.n	8005680 <HAL_TIM_IC_Start_IT+0xa0>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b04      	cmp	r3, #4
 800565c:	d104      	bne.n	8005668 <HAL_TIM_IC_Start_IT+0x88>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005664:	b2db      	uxtb	r3, r3
 8005666:	e00b      	b.n	8005680 <HAL_TIM_IC_Start_IT+0xa0>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b08      	cmp	r3, #8
 800566c:	d104      	bne.n	8005678 <HAL_TIM_IC_Start_IT+0x98>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005674:	b2db      	uxtb	r3, r3
 8005676:	e003      	b.n	8005680 <HAL_TIM_IC_Start_IT+0xa0>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800567e:	b2db      	uxtb	r3, r3
 8005680:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005682:	7bbb      	ldrb	r3, [r7, #14]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d102      	bne.n	800568e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005688:	7b7b      	ldrb	r3, [r7, #13]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d001      	beq.n	8005692 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0e2      	b.n	8005858 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d104      	bne.n	80056a2 <HAL_TIM_IC_Start_IT+0xc2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056a0:	e023      	b.n	80056ea <HAL_TIM_IC_Start_IT+0x10a>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d104      	bne.n	80056b2 <HAL_TIM_IC_Start_IT+0xd2>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056b0:	e01b      	b.n	80056ea <HAL_TIM_IC_Start_IT+0x10a>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d104      	bne.n	80056c2 <HAL_TIM_IC_Start_IT+0xe2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056c0:	e013      	b.n	80056ea <HAL_TIM_IC_Start_IT+0x10a>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	d104      	bne.n	80056d2 <HAL_TIM_IC_Start_IT+0xf2>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056d0:	e00b      	b.n	80056ea <HAL_TIM_IC_Start_IT+0x10a>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d104      	bne.n	80056e2 <HAL_TIM_IC_Start_IT+0x102>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056e0:	e003      	b.n	80056ea <HAL_TIM_IC_Start_IT+0x10a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2202      	movs	r2, #2
 80056e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <HAL_TIM_IC_Start_IT+0x11a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056f8:	e013      	b.n	8005722 <HAL_TIM_IC_Start_IT+0x142>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d104      	bne.n	800570a <HAL_TIM_IC_Start_IT+0x12a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005708:	e00b      	b.n	8005722 <HAL_TIM_IC_Start_IT+0x142>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b08      	cmp	r3, #8
 800570e:	d104      	bne.n	800571a <HAL_TIM_IC_Start_IT+0x13a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005718:	e003      	b.n	8005722 <HAL_TIM_IC_Start_IT+0x142>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b0c      	cmp	r3, #12
 8005726:	d841      	bhi.n	80057ac <HAL_TIM_IC_Start_IT+0x1cc>
 8005728:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <HAL_TIM_IC_Start_IT+0x150>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	08005765 	.word	0x08005765
 8005734:	080057ad 	.word	0x080057ad
 8005738:	080057ad 	.word	0x080057ad
 800573c:	080057ad 	.word	0x080057ad
 8005740:	08005777 	.word	0x08005777
 8005744:	080057ad 	.word	0x080057ad
 8005748:	080057ad 	.word	0x080057ad
 800574c:	080057ad 	.word	0x080057ad
 8005750:	08005789 	.word	0x08005789
 8005754:	080057ad 	.word	0x080057ad
 8005758:	080057ad 	.word	0x080057ad
 800575c:	080057ad 	.word	0x080057ad
 8005760:	0800579b 	.word	0x0800579b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0202 	orr.w	r2, r2, #2
 8005772:	60da      	str	r2, [r3, #12]
      break;
 8005774:	e01d      	b.n	80057b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0204 	orr.w	r2, r2, #4
 8005784:	60da      	str	r2, [r3, #12]
      break;
 8005786:	e014      	b.n	80057b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0208 	orr.w	r2, r2, #8
 8005796:	60da      	str	r2, [r3, #12]
      break;
 8005798:	e00b      	b.n	80057b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0210 	orr.w	r2, r2, #16
 80057a8:	60da      	str	r2, [r3, #12]
      break;
 80057aa:	e002      	b.n	80057b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
      break;
 80057b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d14e      	bne.n	8005856 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2201      	movs	r2, #1
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 fba7 	bl	8006f14 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a25      	ldr	r2, [pc, #148]	@ (8005860 <HAL_TIM_IC_Start_IT+0x280>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d022      	beq.n	8005816 <HAL_TIM_IC_Start_IT+0x236>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d8:	d01d      	beq.n	8005816 <HAL_TIM_IC_Start_IT+0x236>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a21      	ldr	r2, [pc, #132]	@ (8005864 <HAL_TIM_IC_Start_IT+0x284>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d018      	beq.n	8005816 <HAL_TIM_IC_Start_IT+0x236>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005868 <HAL_TIM_IC_Start_IT+0x288>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <HAL_TIM_IC_Start_IT+0x236>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a1e      	ldr	r2, [pc, #120]	@ (800586c <HAL_TIM_IC_Start_IT+0x28c>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00e      	beq.n	8005816 <HAL_TIM_IC_Start_IT+0x236>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005870 <HAL_TIM_IC_Start_IT+0x290>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d009      	beq.n	8005816 <HAL_TIM_IC_Start_IT+0x236>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1b      	ldr	r2, [pc, #108]	@ (8005874 <HAL_TIM_IC_Start_IT+0x294>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_TIM_IC_Start_IT+0x236>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a19      	ldr	r2, [pc, #100]	@ (8005878 <HAL_TIM_IC_Start_IT+0x298>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d115      	bne.n	8005842 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	4b17      	ldr	r3, [pc, #92]	@ (800587c <HAL_TIM_IC_Start_IT+0x29c>)
 800581e:	4013      	ands	r3, r2
 8005820:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b06      	cmp	r3, #6
 8005826:	d015      	beq.n	8005854 <HAL_TIM_IC_Start_IT+0x274>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800582e:	d011      	beq.n	8005854 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005840:	e008      	b.n	8005854 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0201 	orr.w	r2, r2, #1
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e000      	b.n	8005856 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005856:	7bfb      	ldrb	r3, [r7, #15]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40010000 	.word	0x40010000
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800
 800586c:	40000c00 	.word	0x40000c00
 8005870:	40010400 	.word	0x40010400
 8005874:	40001800 	.word	0x40001800
 8005878:	40014000 	.word	0x40014000
 800587c:	00010007 	.word	0x00010007

08005880 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b0c      	cmp	r3, #12
 8005892:	d841      	bhi.n	8005918 <HAL_TIM_IC_Stop_IT+0x98>
 8005894:	a201      	add	r2, pc, #4	@ (adr r2, 800589c <HAL_TIM_IC_Stop_IT+0x1c>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	080058d1 	.word	0x080058d1
 80058a0:	08005919 	.word	0x08005919
 80058a4:	08005919 	.word	0x08005919
 80058a8:	08005919 	.word	0x08005919
 80058ac:	080058e3 	.word	0x080058e3
 80058b0:	08005919 	.word	0x08005919
 80058b4:	08005919 	.word	0x08005919
 80058b8:	08005919 	.word	0x08005919
 80058bc:	080058f5 	.word	0x080058f5
 80058c0:	08005919 	.word	0x08005919
 80058c4:	08005919 	.word	0x08005919
 80058c8:	08005919 	.word	0x08005919
 80058cc:	08005907 	.word	0x08005907
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0202 	bic.w	r2, r2, #2
 80058de:	60da      	str	r2, [r3, #12]
      break;
 80058e0:	e01d      	b.n	800591e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0204 	bic.w	r2, r2, #4
 80058f0:	60da      	str	r2, [r3, #12]
      break;
 80058f2:	e014      	b.n	800591e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0208 	bic.w	r2, r2, #8
 8005902:	60da      	str	r2, [r3, #12]
      break;
 8005904:	e00b      	b.n	800591e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0210 	bic.w	r2, r2, #16
 8005914:	60da      	str	r2, [r3, #12]
      break;
 8005916:	e002      	b.n	800591e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
      break;
 800591c:	bf00      	nop
  }

  if (status == HAL_OK)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d166      	bne.n	80059f2 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	6839      	ldr	r1, [r7, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f001 faf1 	bl	8006f14 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1a      	ldr	r2, [r3, #32]
 8005938:	f241 1311 	movw	r3, #4369	@ 0x1111
 800593c:	4013      	ands	r3, r2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10f      	bne.n	8005962 <HAL_TIM_IC_Stop_IT+0xe2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6a1a      	ldr	r2, [r3, #32]
 8005948:	f240 4344 	movw	r3, #1092	@ 0x444
 800594c:	4013      	ands	r3, r2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d107      	bne.n	8005962 <HAL_TIM_IC_Stop_IT+0xe2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0201 	bic.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d104      	bne.n	8005972 <HAL_TIM_IC_Stop_IT+0xf2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005970:	e023      	b.n	80059ba <HAL_TIM_IC_Stop_IT+0x13a>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b04      	cmp	r3, #4
 8005976:	d104      	bne.n	8005982 <HAL_TIM_IC_Stop_IT+0x102>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005980:	e01b      	b.n	80059ba <HAL_TIM_IC_Stop_IT+0x13a>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b08      	cmp	r3, #8
 8005986:	d104      	bne.n	8005992 <HAL_TIM_IC_Stop_IT+0x112>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005990:	e013      	b.n	80059ba <HAL_TIM_IC_Stop_IT+0x13a>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b0c      	cmp	r3, #12
 8005996:	d104      	bne.n	80059a2 <HAL_TIM_IC_Stop_IT+0x122>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059a0:	e00b      	b.n	80059ba <HAL_TIM_IC_Stop_IT+0x13a>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_IC_Stop_IT+0x132>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059b0:	e003      	b.n	80059ba <HAL_TIM_IC_Stop_IT+0x13a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <HAL_TIM_IC_Stop_IT+0x14a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059c8:	e013      	b.n	80059f2 <HAL_TIM_IC_Stop_IT+0x172>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d104      	bne.n	80059da <HAL_TIM_IC_Stop_IT+0x15a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059d8:	e00b      	b.n	80059f2 <HAL_TIM_IC_Stop_IT+0x172>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d104      	bne.n	80059ea <HAL_TIM_IC_Stop_IT+0x16a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059e8:	e003      	b.n	80059f2 <HAL_TIM_IC_Stop_IT+0x172>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d020      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01b      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0202 	mvn.w	r2, #2
 8005a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fb fb38 	bl	80010bc <HAL_TIM_IC_CaptureCallback>
 8005a4c:	e005      	b.n	8005a5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fc14 	bl	800627c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fc1b 	bl	8006290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d020      	beq.n	8005aac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01b      	beq.n	8005aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0204 	mvn.w	r2, #4
 8005a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fb fb12 	bl	80010bc <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fbee 	bl	800627c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fbf5 	bl	8006290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d020      	beq.n	8005af8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0208 	mvn.w	r2, #8
 8005ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2204      	movs	r2, #4
 8005ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fb faec 	bl	80010bc <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fbc8 	bl	800627c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fbcf 	bl	8006290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d020      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01b      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0210 	mvn.w	r2, #16
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fb fac6 	bl	80010bc <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fba2 	bl	800627c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fba9 	bl	8006290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0201 	mvn.w	r2, #1
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fb80 	bl	8006268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d104      	bne.n	8005b7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00c      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fb09 	bl	80071a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00c      	beq.n	8005bba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 fb01 	bl	80071bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00c      	beq.n	8005bde <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fb63 	bl	80062a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00c      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f06f 0220 	mvn.w	r2, #32
 8005bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 fac9 	bl	8007194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e088      	b.n	8005d3a <HAL_TIM_IC_ConfigChannel+0x130>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d11b      	bne.n	8005c6e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005c46:	f000 ff9d 	bl	8006b84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699a      	ldr	r2, [r3, #24]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 020c 	bic.w	r2, r2, #12
 8005c58:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6999      	ldr	r1, [r3, #24]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	619a      	str	r2, [r3, #24]
 8005c6c:	e060      	b.n	8005d30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d11c      	bne.n	8005cae <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005c84:	f001 f821 	bl	8006cca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c96:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6999      	ldr	r1, [r3, #24]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	021a      	lsls	r2, r3, #8
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	619a      	str	r2, [r3, #24]
 8005cac:	e040      	b.n	8005d30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d11b      	bne.n	8005cec <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005cc4:	f001 f86e 	bl	8006da4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 020c 	bic.w	r2, r2, #12
 8005cd6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69d9      	ldr	r1, [r3, #28]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	61da      	str	r2, [r3, #28]
 8005cea:	e021      	b.n	8005d30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b0c      	cmp	r3, #12
 8005cf0:	d11c      	bne.n	8005d2c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d02:	f001 f88b 	bl	8006e1c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d14:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69d9      	ldr	r1, [r3, #28]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	021a      	lsls	r2, r3, #8
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	61da      	str	r2, [r3, #28]
 8005d2a:	e001      	b.n	8005d30 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e0ff      	b.n	8005f62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b14      	cmp	r3, #20
 8005d6e:	f200 80f0 	bhi.w	8005f52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d72:	a201      	add	r2, pc, #4	@ (adr r2, 8005d78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005dcd 	.word	0x08005dcd
 8005d7c:	08005f53 	.word	0x08005f53
 8005d80:	08005f53 	.word	0x08005f53
 8005d84:	08005f53 	.word	0x08005f53
 8005d88:	08005e0d 	.word	0x08005e0d
 8005d8c:	08005f53 	.word	0x08005f53
 8005d90:	08005f53 	.word	0x08005f53
 8005d94:	08005f53 	.word	0x08005f53
 8005d98:	08005e4f 	.word	0x08005e4f
 8005d9c:	08005f53 	.word	0x08005f53
 8005da0:	08005f53 	.word	0x08005f53
 8005da4:	08005f53 	.word	0x08005f53
 8005da8:	08005e8f 	.word	0x08005e8f
 8005dac:	08005f53 	.word	0x08005f53
 8005db0:	08005f53 	.word	0x08005f53
 8005db4:	08005f53 	.word	0x08005f53
 8005db8:	08005ed1 	.word	0x08005ed1
 8005dbc:	08005f53 	.word	0x08005f53
 8005dc0:	08005f53 	.word	0x08005f53
 8005dc4:	08005f53 	.word	0x08005f53
 8005dc8:	08005f11 	.word	0x08005f11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fb16 	bl	8006404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0208 	orr.w	r2, r2, #8
 8005de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0204 	bic.w	r2, r2, #4
 8005df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6999      	ldr	r1, [r3, #24]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	619a      	str	r2, [r3, #24]
      break;
 8005e0a:	e0a5      	b.n	8005f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fb86 	bl	8006524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6999      	ldr	r1, [r3, #24]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	021a      	lsls	r2, r3, #8
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	619a      	str	r2, [r3, #24]
      break;
 8005e4c:	e084      	b.n	8005f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fbef 	bl	8006638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0208 	orr.w	r2, r2, #8
 8005e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0204 	bic.w	r2, r2, #4
 8005e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69d9      	ldr	r1, [r3, #28]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	61da      	str	r2, [r3, #28]
      break;
 8005e8c:	e064      	b.n	8005f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fc57 	bl	8006748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69d9      	ldr	r1, [r3, #28]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	021a      	lsls	r2, r3, #8
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	61da      	str	r2, [r3, #28]
      break;
 8005ece:	e043      	b.n	8005f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fca0 	bl	800681c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0208 	orr.w	r2, r2, #8
 8005eea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0204 	bic.w	r2, r2, #4
 8005efa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f0e:	e023      	b.n	8005f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fce4 	bl	80068e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	021a      	lsls	r2, r3, #8
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005f50:	e002      	b.n	8005f58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	75fb      	strb	r3, [r7, #23]
      break;
 8005f56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop

08005f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_TIM_ConfigClockSource+0x1c>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e0dc      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x1d6>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800614c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a64      	ldr	r2, [pc, #400]	@ (8006150 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	f000 80a9 	beq.w	8006116 <HAL_TIM_ConfigClockSource+0x1aa>
 8005fc4:	4a62      	ldr	r2, [pc, #392]	@ (8006150 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	f200 80ae 	bhi.w	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8005fcc:	4a61      	ldr	r2, [pc, #388]	@ (8006154 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	f000 80a1 	beq.w	8006116 <HAL_TIM_ConfigClockSource+0x1aa>
 8005fd4:	4a5f      	ldr	r2, [pc, #380]	@ (8006154 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	f200 80a6 	bhi.w	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8005fdc:	4a5e      	ldr	r2, [pc, #376]	@ (8006158 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	f000 8099 	beq.w	8006116 <HAL_TIM_ConfigClockSource+0x1aa>
 8005fe4:	4a5c      	ldr	r2, [pc, #368]	@ (8006158 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	f200 809e 	bhi.w	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8005fec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ff0:	f000 8091 	beq.w	8006116 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ff4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ff8:	f200 8096 	bhi.w	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8005ffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006000:	f000 8089 	beq.w	8006116 <HAL_TIM_ConfigClockSource+0x1aa>
 8006004:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006008:	f200 808e 	bhi.w	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 800600c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006010:	d03e      	beq.n	8006090 <HAL_TIM_ConfigClockSource+0x124>
 8006012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006016:	f200 8087 	bhi.w	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 800601a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800601e:	f000 8086 	beq.w	800612e <HAL_TIM_ConfigClockSource+0x1c2>
 8006022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006026:	d87f      	bhi.n	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8006028:	2b70      	cmp	r3, #112	@ 0x70
 800602a:	d01a      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0xf6>
 800602c:	2b70      	cmp	r3, #112	@ 0x70
 800602e:	d87b      	bhi.n	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8006030:	2b60      	cmp	r3, #96	@ 0x60
 8006032:	d050      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x16a>
 8006034:	2b60      	cmp	r3, #96	@ 0x60
 8006036:	d877      	bhi.n	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8006038:	2b50      	cmp	r3, #80	@ 0x50
 800603a:	d03c      	beq.n	80060b6 <HAL_TIM_ConfigClockSource+0x14a>
 800603c:	2b50      	cmp	r3, #80	@ 0x50
 800603e:	d873      	bhi.n	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8006040:	2b40      	cmp	r3, #64	@ 0x40
 8006042:	d058      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0x18a>
 8006044:	2b40      	cmp	r3, #64	@ 0x40
 8006046:	d86f      	bhi.n	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8006048:	2b30      	cmp	r3, #48	@ 0x30
 800604a:	d064      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0x1aa>
 800604c:	2b30      	cmp	r3, #48	@ 0x30
 800604e:	d86b      	bhi.n	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8006050:	2b20      	cmp	r3, #32
 8006052:	d060      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0x1aa>
 8006054:	2b20      	cmp	r3, #32
 8006056:	d867      	bhi.n	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d05c      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0x1aa>
 800605c:	2b10      	cmp	r3, #16
 800605e:	d05a      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0x1aa>
 8006060:	e062      	b.n	8006128 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006072:	f000 ff2f 	bl	8006ed4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	609a      	str	r2, [r3, #8]
      break;
 800608e:	e04f      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80060a0:	f000 ff18 	bl	8006ed4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060b2:	609a      	str	r2, [r3, #8]
      break;
 80060b4:	e03c      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c2:	461a      	mov	r2, r3
 80060c4:	f000 fdd2 	bl	8006c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2150      	movs	r1, #80	@ 0x50
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fee2 	bl	8006e98 <TIM_ITRx_SetConfig>
      break;
 80060d4:	e02c      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060e2:	461a      	mov	r2, r3
 80060e4:	f000 fe2e 	bl	8006d44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2160      	movs	r1, #96	@ 0x60
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fed2 	bl	8006e98 <TIM_ITRx_SetConfig>
      break;
 80060f4:	e01c      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006102:	461a      	mov	r2, r3
 8006104:	f000 fdb2 	bl	8006c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2140      	movs	r1, #64	@ 0x40
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fec2 	bl	8006e98 <TIM_ITRx_SetConfig>
      break;
 8006114:	e00c      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f000 feb9 	bl	8006e98 <TIM_ITRx_SetConfig>
      break;
 8006126:	e003      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
      break;
 800612c:	e000      	b.n	8006130 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800612e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006140:	7bfb      	ldrb	r3, [r7, #15]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	ffceff88 	.word	0xffceff88
 8006150:	00100040 	.word	0x00100040
 8006154:	00100030 	.word	0x00100030
 8006158:	00100020 	.word	0x00100020

0800615c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006170:	2302      	movs	r3, #2
 8006172:	e031      	b.n	80061d8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fc12 	bl	80069b0 <TIM_SlaveTimer_SetConfig>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e018      	b.n	80061d8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061b4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80061c4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b0c      	cmp	r3, #12
 80061f2:	d831      	bhi.n	8006258 <HAL_TIM_ReadCapturedValue+0x78>
 80061f4:	a201      	add	r2, pc, #4	@ (adr r2, 80061fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	08006231 	.word	0x08006231
 8006200:	08006259 	.word	0x08006259
 8006204:	08006259 	.word	0x08006259
 8006208:	08006259 	.word	0x08006259
 800620c:	0800623b 	.word	0x0800623b
 8006210:	08006259 	.word	0x08006259
 8006214:	08006259 	.word	0x08006259
 8006218:	08006259 	.word	0x08006259
 800621c:	08006245 	.word	0x08006245
 8006220:	08006259 	.word	0x08006259
 8006224:	08006259 	.word	0x08006259
 8006228:	08006259 	.word	0x08006259
 800622c:	0800624f 	.word	0x0800624f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006236:	60fb      	str	r3, [r7, #12]

      break;
 8006238:	e00f      	b.n	800625a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006240:	60fb      	str	r3, [r7, #12]

      break;
 8006242:	e00a      	b.n	800625a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624a:	60fb      	str	r3, [r7, #12]

      break;
 800624c:	e005      	b.n	800625a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	60fb      	str	r3, [r7, #12]

      break;
 8006256:	e000      	b.n	800625a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006258:	bf00      	nop
  }

  return tmpreg;
 800625a:	68fb      	ldr	r3, [r7, #12]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a46      	ldr	r2, [pc, #280]	@ (80063e4 <TIM_Base_SetConfig+0x12c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <TIM_Base_SetConfig+0x40>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d6:	d00f      	beq.n	80062f8 <TIM_Base_SetConfig+0x40>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a43      	ldr	r2, [pc, #268]	@ (80063e8 <TIM_Base_SetConfig+0x130>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00b      	beq.n	80062f8 <TIM_Base_SetConfig+0x40>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a42      	ldr	r2, [pc, #264]	@ (80063ec <TIM_Base_SetConfig+0x134>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_Base_SetConfig+0x40>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a41      	ldr	r2, [pc, #260]	@ (80063f0 <TIM_Base_SetConfig+0x138>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_Base_SetConfig+0x40>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a40      	ldr	r2, [pc, #256]	@ (80063f4 <TIM_Base_SetConfig+0x13c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d108      	bne.n	800630a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a35      	ldr	r2, [pc, #212]	@ (80063e4 <TIM_Base_SetConfig+0x12c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d01f      	beq.n	8006352 <TIM_Base_SetConfig+0x9a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006318:	d01b      	beq.n	8006352 <TIM_Base_SetConfig+0x9a>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a32      	ldr	r2, [pc, #200]	@ (80063e8 <TIM_Base_SetConfig+0x130>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d017      	beq.n	8006352 <TIM_Base_SetConfig+0x9a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a31      	ldr	r2, [pc, #196]	@ (80063ec <TIM_Base_SetConfig+0x134>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d013      	beq.n	8006352 <TIM_Base_SetConfig+0x9a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a30      	ldr	r2, [pc, #192]	@ (80063f0 <TIM_Base_SetConfig+0x138>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00f      	beq.n	8006352 <TIM_Base_SetConfig+0x9a>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a2f      	ldr	r2, [pc, #188]	@ (80063f4 <TIM_Base_SetConfig+0x13c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d00b      	beq.n	8006352 <TIM_Base_SetConfig+0x9a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2e      	ldr	r2, [pc, #184]	@ (80063f8 <TIM_Base_SetConfig+0x140>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d007      	beq.n	8006352 <TIM_Base_SetConfig+0x9a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a2d      	ldr	r2, [pc, #180]	@ (80063fc <TIM_Base_SetConfig+0x144>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d003      	beq.n	8006352 <TIM_Base_SetConfig+0x9a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a2c      	ldr	r2, [pc, #176]	@ (8006400 <TIM_Base_SetConfig+0x148>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d108      	bne.n	8006364 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a16      	ldr	r2, [pc, #88]	@ (80063e4 <TIM_Base_SetConfig+0x12c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00f      	beq.n	80063b0 <TIM_Base_SetConfig+0xf8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a18      	ldr	r2, [pc, #96]	@ (80063f4 <TIM_Base_SetConfig+0x13c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00b      	beq.n	80063b0 <TIM_Base_SetConfig+0xf8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a17      	ldr	r2, [pc, #92]	@ (80063f8 <TIM_Base_SetConfig+0x140>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d007      	beq.n	80063b0 <TIM_Base_SetConfig+0xf8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a16      	ldr	r2, [pc, #88]	@ (80063fc <TIM_Base_SetConfig+0x144>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_Base_SetConfig+0xf8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a15      	ldr	r2, [pc, #84]	@ (8006400 <TIM_Base_SetConfig+0x148>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d103      	bne.n	80063b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d105      	bne.n	80063d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	f023 0201 	bic.w	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	611a      	str	r2, [r3, #16]
  }
}
 80063d6:	bf00      	nop
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40000c00 	.word	0x40000c00
 80063f4:	40010400 	.word	0x40010400
 80063f8:	40014000 	.word	0x40014000
 80063fc:	40014400 	.word	0x40014400
 8006400:	40014800 	.word	0x40014800

08006404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f023 0201 	bic.w	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4b37      	ldr	r3, [pc, #220]	@ (800650c <TIM_OC1_SetConfig+0x108>)
 8006430:	4013      	ands	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f023 0302 	bic.w	r3, r3, #2
 800644c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a2d      	ldr	r2, [pc, #180]	@ (8006510 <TIM_OC1_SetConfig+0x10c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00f      	beq.n	8006480 <TIM_OC1_SetConfig+0x7c>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a2c      	ldr	r2, [pc, #176]	@ (8006514 <TIM_OC1_SetConfig+0x110>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_OC1_SetConfig+0x7c>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a2b      	ldr	r2, [pc, #172]	@ (8006518 <TIM_OC1_SetConfig+0x114>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_OC1_SetConfig+0x7c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a2a      	ldr	r2, [pc, #168]	@ (800651c <TIM_OC1_SetConfig+0x118>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_OC1_SetConfig+0x7c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a29      	ldr	r2, [pc, #164]	@ (8006520 <TIM_OC1_SetConfig+0x11c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10c      	bne.n	800649a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f023 0308 	bic.w	r3, r3, #8
 8006486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f023 0304 	bic.w	r3, r3, #4
 8006498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a1c      	ldr	r2, [pc, #112]	@ (8006510 <TIM_OC1_SetConfig+0x10c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00f      	beq.n	80064c2 <TIM_OC1_SetConfig+0xbe>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006514 <TIM_OC1_SetConfig+0x110>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00b      	beq.n	80064c2 <TIM_OC1_SetConfig+0xbe>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006518 <TIM_OC1_SetConfig+0x114>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d007      	beq.n	80064c2 <TIM_OC1_SetConfig+0xbe>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a19      	ldr	r2, [pc, #100]	@ (800651c <TIM_OC1_SetConfig+0x118>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d003      	beq.n	80064c2 <TIM_OC1_SetConfig+0xbe>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a18      	ldr	r2, [pc, #96]	@ (8006520 <TIM_OC1_SetConfig+0x11c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d111      	bne.n	80064e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	621a      	str	r2, [r3, #32]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	fffeff8f 	.word	0xfffeff8f
 8006510:	40010000 	.word	0x40010000
 8006514:	40010400 	.word	0x40010400
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800

08006524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	f023 0210 	bic.w	r2, r3, #16
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4b34      	ldr	r3, [pc, #208]	@ (8006620 <TIM_OC2_SetConfig+0xfc>)
 8006550:	4013      	ands	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800655a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 0320 	bic.w	r3, r3, #32
 800656e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a29      	ldr	r2, [pc, #164]	@ (8006624 <TIM_OC2_SetConfig+0x100>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_OC2_SetConfig+0x68>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a28      	ldr	r2, [pc, #160]	@ (8006628 <TIM_OC2_SetConfig+0x104>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d10d      	bne.n	80065a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006624 <TIM_OC2_SetConfig+0x100>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00f      	beq.n	80065d0 <TIM_OC2_SetConfig+0xac>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006628 <TIM_OC2_SetConfig+0x104>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00b      	beq.n	80065d0 <TIM_OC2_SetConfig+0xac>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a1c      	ldr	r2, [pc, #112]	@ (800662c <TIM_OC2_SetConfig+0x108>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d007      	beq.n	80065d0 <TIM_OC2_SetConfig+0xac>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006630 <TIM_OC2_SetConfig+0x10c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d003      	beq.n	80065d0 <TIM_OC2_SetConfig+0xac>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006634 <TIM_OC2_SetConfig+0x110>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d113      	bne.n	80065f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	feff8fff 	.word	0xfeff8fff
 8006624:	40010000 	.word	0x40010000
 8006628:	40010400 	.word	0x40010400
 800662c:	40014000 	.word	0x40014000
 8006630:	40014400 	.word	0x40014400
 8006634:	40014800 	.word	0x40014800

08006638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4b33      	ldr	r3, [pc, #204]	@ (8006730 <TIM_OC3_SetConfig+0xf8>)
 8006664:	4013      	ands	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0303 	bic.w	r3, r3, #3
 800666e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a28      	ldr	r2, [pc, #160]	@ (8006734 <TIM_OC3_SetConfig+0xfc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_OC3_SetConfig+0x66>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a27      	ldr	r2, [pc, #156]	@ (8006738 <TIM_OC3_SetConfig+0x100>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d10d      	bne.n	80066ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006734 <TIM_OC3_SetConfig+0xfc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00f      	beq.n	80066e2 <TIM_OC3_SetConfig+0xaa>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006738 <TIM_OC3_SetConfig+0x100>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00b      	beq.n	80066e2 <TIM_OC3_SetConfig+0xaa>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a1b      	ldr	r2, [pc, #108]	@ (800673c <TIM_OC3_SetConfig+0x104>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d007      	beq.n	80066e2 <TIM_OC3_SetConfig+0xaa>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006740 <TIM_OC3_SetConfig+0x108>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d003      	beq.n	80066e2 <TIM_OC3_SetConfig+0xaa>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a19      	ldr	r2, [pc, #100]	@ (8006744 <TIM_OC3_SetConfig+0x10c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d113      	bne.n	800670a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	fffeff8f 	.word	0xfffeff8f
 8006734:	40010000 	.word	0x40010000
 8006738:	40010400 	.word	0x40010400
 800673c:	40014000 	.word	0x40014000
 8006740:	40014400 	.word	0x40014400
 8006744:	40014800 	.word	0x40014800

08006748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4b24      	ldr	r3, [pc, #144]	@ (8006804 <TIM_OC4_SetConfig+0xbc>)
 8006774:	4013      	ands	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800677e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	031b      	lsls	r3, r3, #12
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a19      	ldr	r2, [pc, #100]	@ (8006808 <TIM_OC4_SetConfig+0xc0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00f      	beq.n	80067c8 <TIM_OC4_SetConfig+0x80>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a18      	ldr	r2, [pc, #96]	@ (800680c <TIM_OC4_SetConfig+0xc4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00b      	beq.n	80067c8 <TIM_OC4_SetConfig+0x80>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a17      	ldr	r2, [pc, #92]	@ (8006810 <TIM_OC4_SetConfig+0xc8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d007      	beq.n	80067c8 <TIM_OC4_SetConfig+0x80>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a16      	ldr	r2, [pc, #88]	@ (8006814 <TIM_OC4_SetConfig+0xcc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_OC4_SetConfig+0x80>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a15      	ldr	r2, [pc, #84]	@ (8006818 <TIM_OC4_SetConfig+0xd0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d109      	bne.n	80067dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	019b      	lsls	r3, r3, #6
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	feff8fff 	.word	0xfeff8fff
 8006808:	40010000 	.word	0x40010000
 800680c:	40010400 	.word	0x40010400
 8006810:	40014000 	.word	0x40014000
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800

0800681c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b480      	push	{r7}
 800681e:	b087      	sub	sp, #28
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4b21      	ldr	r3, [pc, #132]	@ (80068cc <TIM_OC5_SetConfig+0xb0>)
 8006848:	4013      	ands	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800685c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	041b      	lsls	r3, r3, #16
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a18      	ldr	r2, [pc, #96]	@ (80068d0 <TIM_OC5_SetConfig+0xb4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00f      	beq.n	8006892 <TIM_OC5_SetConfig+0x76>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a17      	ldr	r2, [pc, #92]	@ (80068d4 <TIM_OC5_SetConfig+0xb8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00b      	beq.n	8006892 <TIM_OC5_SetConfig+0x76>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a16      	ldr	r2, [pc, #88]	@ (80068d8 <TIM_OC5_SetConfig+0xbc>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d007      	beq.n	8006892 <TIM_OC5_SetConfig+0x76>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a15      	ldr	r2, [pc, #84]	@ (80068dc <TIM_OC5_SetConfig+0xc0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_OC5_SetConfig+0x76>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a14      	ldr	r2, [pc, #80]	@ (80068e0 <TIM_OC5_SetConfig+0xc4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d109      	bne.n	80068a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006898:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	021b      	lsls	r3, r3, #8
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	621a      	str	r2, [r3, #32]
}
 80068c0:	bf00      	nop
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	fffeff8f 	.word	0xfffeff8f
 80068d0:	40010000 	.word	0x40010000
 80068d4:	40010400 	.word	0x40010400
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40014400 	.word	0x40014400
 80068e0:	40014800 	.word	0x40014800

080068e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4b22      	ldr	r3, [pc, #136]	@ (8006998 <TIM_OC6_SetConfig+0xb4>)
 8006910:	4013      	ands	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	021b      	lsls	r3, r3, #8
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006926:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	051b      	lsls	r3, r3, #20
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a19      	ldr	r2, [pc, #100]	@ (800699c <TIM_OC6_SetConfig+0xb8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00f      	beq.n	800695c <TIM_OC6_SetConfig+0x78>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a18      	ldr	r2, [pc, #96]	@ (80069a0 <TIM_OC6_SetConfig+0xbc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00b      	beq.n	800695c <TIM_OC6_SetConfig+0x78>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a17      	ldr	r2, [pc, #92]	@ (80069a4 <TIM_OC6_SetConfig+0xc0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <TIM_OC6_SetConfig+0x78>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a16      	ldr	r2, [pc, #88]	@ (80069a8 <TIM_OC6_SetConfig+0xc4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC6_SetConfig+0x78>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a15      	ldr	r2, [pc, #84]	@ (80069ac <TIM_OC6_SetConfig+0xc8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d109      	bne.n	8006970 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006962:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	029b      	lsls	r3, r3, #10
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	feff8fff 	.word	0xfeff8fff
 800699c:	40010000 	.word	0x40010000
 80069a0:	40010400 	.word	0x40010400
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	40014800 	.word	0x40014800

080069b0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4b65      	ldr	r3, [pc, #404]	@ (8006b60 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4b62      	ldr	r3, [pc, #392]	@ (8006b64 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80069dc:	4013      	ands	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4a5c      	ldr	r2, [pc, #368]	@ (8006b68 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	f000 80ab 	beq.w	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 80069fe:	4a5a      	ldr	r2, [pc, #360]	@ (8006b68 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	f200 80a4 	bhi.w	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a0a:	f000 80a3 	beq.w	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006a0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a12:	f200 809c 	bhi.w	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a16:	4a55      	ldr	r2, [pc, #340]	@ (8006b6c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	f000 809b 	beq.w	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006a1e:	4a53      	ldr	r2, [pc, #332]	@ (8006b6c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	f200 8094 	bhi.w	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a26:	4a52      	ldr	r2, [pc, #328]	@ (8006b70 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	f000 8093 	beq.w	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006a2e:	4a50      	ldr	r2, [pc, #320]	@ (8006b70 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	f200 808c 	bhi.w	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a36:	4a4f      	ldr	r2, [pc, #316]	@ (8006b74 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	f000 808b 	beq.w	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006a3e:	4a4d      	ldr	r2, [pc, #308]	@ (8006b74 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	f200 8084 	bhi.w	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a46:	4a4c      	ldr	r2, [pc, #304]	@ (8006b78 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	f000 8083 	beq.w	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8006b78 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d87c      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a54:	4a49      	ldr	r2, [pc, #292]	@ (8006b7c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d07c      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006a5a:	4a48      	ldr	r2, [pc, #288]	@ (8006b7c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d876      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a60:	4a47      	ldr	r2, [pc, #284]	@ (8006b80 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d076      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006a66:	4a46      	ldr	r2, [pc, #280]	@ (8006b80 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d870      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006a70:	d070      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006a72:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006a76:	d86a      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a7c:	d06a      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a82:	d864      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a84:	2b70      	cmp	r3, #112	@ 0x70
 8006a86:	d01a      	beq.n	8006abe <TIM_SlaveTimer_SetConfig+0x10e>
 8006a88:	2b70      	cmp	r3, #112	@ 0x70
 8006a8a:	d860      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a8c:	2b60      	cmp	r3, #96	@ 0x60
 8006a8e:	d054      	beq.n	8006b3a <TIM_SlaveTimer_SetConfig+0x18a>
 8006a90:	2b60      	cmp	r3, #96	@ 0x60
 8006a92:	d85c      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a94:	2b50      	cmp	r3, #80	@ 0x50
 8006a96:	d046      	beq.n	8006b26 <TIM_SlaveTimer_SetConfig+0x176>
 8006a98:	2b50      	cmp	r3, #80	@ 0x50
 8006a9a:	d858      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006a9c:	2b40      	cmp	r3, #64	@ 0x40
 8006a9e:	d019      	beq.n	8006ad4 <TIM_SlaveTimer_SetConfig+0x124>
 8006aa0:	2b40      	cmp	r3, #64	@ 0x40
 8006aa2:	d854      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006aa4:	2b30      	cmp	r3, #48	@ 0x30
 8006aa6:	d055      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006aa8:	2b30      	cmp	r3, #48	@ 0x30
 8006aaa:	d850      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d051      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d84c      	bhi.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d04d      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006ab8:	2b10      	cmp	r3, #16
 8006aba:	d04b      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006abc:	e047      	b.n	8006b4e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006ace:	f000 fa01 	bl	8006ed4 <TIM_ETR_SetConfig>
      break;
 8006ad2:	e040      	b.n	8006b56 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b05      	cmp	r3, #5
 8006ada:	d101      	bne.n	8006ae0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e03b      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6a1a      	ldr	r2, [r3, #32]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0201 	bic.w	r2, r2, #1
 8006af6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b06:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	621a      	str	r2, [r3, #32]
      break;
 8006b24:	e017      	b.n	8006b56 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b32:	461a      	mov	r2, r3
 8006b34:	f000 f89a 	bl	8006c6c <TIM_TI1_ConfigInputStage>
      break;
 8006b38:	e00d      	b.n	8006b56 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b46:	461a      	mov	r2, r3
 8006b48:	f000 f8fc 	bl	8006d44 <TIM_TI2_ConfigInputStage>
      break;
 8006b4c:	e003      	b.n	8006b56 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	75fb      	strb	r3, [r7, #23]
      break;
 8006b52:	e000      	b.n	8006b56 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8006b54:	bf00      	nop
  }

  return status;
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	ffcfff8f 	.word	0xffcfff8f
 8006b64:	fffefff8 	.word	0xfffefff8
 8006b68:	00200010 	.word	0x00200010
 8006b6c:	00100070 	.word	0x00100070
 8006b70:	00100060 	.word	0x00100060
 8006b74:	00100050 	.word	0x00100050
 8006b78:	00100040 	.word	0x00100040
 8006b7c:	00100030 	.word	0x00100030
 8006b80:	00100020 	.word	0x00100020

08006b84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	f023 0201 	bic.w	r2, r3, #1
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4a28      	ldr	r2, [pc, #160]	@ (8006c50 <TIM_TI1_SetConfig+0xcc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d01b      	beq.n	8006bea <TIM_TI1_SetConfig+0x66>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb8:	d017      	beq.n	8006bea <TIM_TI1_SetConfig+0x66>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a25      	ldr	r2, [pc, #148]	@ (8006c54 <TIM_TI1_SetConfig+0xd0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <TIM_TI1_SetConfig+0x66>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4a24      	ldr	r2, [pc, #144]	@ (8006c58 <TIM_TI1_SetConfig+0xd4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00f      	beq.n	8006bea <TIM_TI1_SetConfig+0x66>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4a23      	ldr	r2, [pc, #140]	@ (8006c5c <TIM_TI1_SetConfig+0xd8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <TIM_TI1_SetConfig+0x66>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4a22      	ldr	r2, [pc, #136]	@ (8006c60 <TIM_TI1_SetConfig+0xdc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d007      	beq.n	8006bea <TIM_TI1_SetConfig+0x66>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4a21      	ldr	r2, [pc, #132]	@ (8006c64 <TIM_TI1_SetConfig+0xe0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <TIM_TI1_SetConfig+0x66>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a20      	ldr	r2, [pc, #128]	@ (8006c68 <TIM_TI1_SetConfig+0xe4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d101      	bne.n	8006bee <TIM_TI1_SetConfig+0x6a>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e000      	b.n	8006bf0 <TIM_TI1_SetConfig+0x6c>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d008      	beq.n	8006c06 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f023 0303 	bic.w	r3, r3, #3
 8006bfa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e003      	b.n	8006c0e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f023 030a 	bic.w	r3, r3, #10
 8006c28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f003 030a 	and.w	r3, r3, #10
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	621a      	str	r2, [r3, #32]
}
 8006c42:	bf00      	nop
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	40010000 	.word	0x40010000
 8006c54:	40000400 	.word	0x40000400
 8006c58:	40000800 	.word	0x40000800
 8006c5c:	40000c00 	.word	0x40000c00
 8006c60:	40010400 	.word	0x40010400
 8006c64:	40001800 	.word	0x40001800
 8006c68:	40014000 	.word	0x40014000

08006c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f023 0201 	bic.w	r2, r3, #1
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f023 030a 	bic.w	r3, r3, #10
 8006ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	621a      	str	r2, [r3, #32]
}
 8006cbe:	bf00      	nop
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b087      	sub	sp, #28
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	60b9      	str	r1, [r7, #8]
 8006cd4:	607a      	str	r2, [r7, #4]
 8006cd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f023 0210 	bic.w	r2, r3, #16
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	031b      	lsls	r3, r3, #12
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	621a      	str	r2, [r3, #32]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	f023 0210 	bic.w	r2, r3, #16
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	031b      	lsls	r3, r3, #12
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	621a      	str	r2, [r3, #32]
}
 8006d98:	bf00      	nop
 8006d9a:	371c      	adds	r7, #28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f023 0303 	bic.w	r3, r3, #3
 8006dd0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006de0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	011b      	lsls	r3, r3, #4
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006df4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	021b      	lsls	r3, r3, #8
 8006dfa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e48:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e5a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	031b      	lsls	r3, r3, #12
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006e6e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	031b      	lsls	r3, r3, #12
 8006e74:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ed0 <TIM_ITRx_SetConfig+0x38>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f043 0307 	orr.w	r3, r3, #7
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	609a      	str	r2, [r3, #8]
}
 8006ec2:	bf00      	nop
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	ffcfff8f 	.word	0xffcfff8f

08006ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	021a      	lsls	r2, r3, #8
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	609a      	str	r2, [r3, #8]
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	2201      	movs	r2, #1
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6a1a      	ldr	r2, [r3, #32]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	43db      	mvns	r3, r3
 8006f36:	401a      	ands	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1a      	ldr	r2, [r3, #32]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f003 031f 	and.w	r3, r3, #31
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	621a      	str	r2, [r3, #32]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
	...

08006f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e06d      	b.n	8007054 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a30      	ldr	r2, [pc, #192]	@ (8007060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2f      	ldr	r2, [pc, #188]	@ (8007064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d108      	bne.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a20      	ldr	r2, [pc, #128]	@ (8007060 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d022      	beq.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fea:	d01d      	beq.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d018      	beq.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d013      	beq.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1a      	ldr	r2, [pc, #104]	@ (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00e      	beq.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a15      	ldr	r2, [pc, #84]	@ (8007064 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d009      	beq.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a16      	ldr	r2, [pc, #88]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d004      	beq.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a15      	ldr	r2, [pc, #84]	@ (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d10c      	bne.n	8007042 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800702e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	4313      	orrs	r3, r2
 8007038:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	40010000 	.word	0x40010000
 8007064:	40010400 	.word	0x40010400
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40001800 	.word	0x40001800
 8007078:	40014000 	.word	0x40014000

0800707c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007094:	2302      	movs	r3, #2
 8007096:	e073      	b.n	8007180 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	041b      	lsls	r3, r3, #16
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a19      	ldr	r2, [pc, #100]	@ (800718c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a18      	ldr	r2, [pc, #96]	@ (8007190 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d11c      	bne.n	800716e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	051b      	lsls	r3, r3, #20
 8007140:	4313      	orrs	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40010000 	.word	0x40010000
 8007190:	40010400 	.word	0x40010400

08007194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e042      	b.n	8007268 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d106      	bne.n	80071fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fa fb8d 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2224      	movs	r2, #36	@ 0x24
 80071fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0201 	bic.w	r2, r2, #1
 8007210:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fe94 	bl	8007f48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f825 	bl	8007270 <UART_SetConfig>
 8007226:	4603      	mov	r3, r0
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e01b      	b.n	8007268 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800723e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800724e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0201 	orr.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 ff13 	bl	800808c <UART_CheckIdleState>
 8007266:	4603      	mov	r3, r0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007274:	b092      	sub	sp, #72	@ 0x48
 8007276:	af00      	add	r7, sp, #0
 8007278:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	431a      	orrs	r2, r3
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	431a      	orrs	r2, r3
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	4313      	orrs	r3, r2
 8007296:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4bbe      	ldr	r3, [pc, #760]	@ (8007598 <UART_SetConfig+0x328>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	6812      	ldr	r2, [r2, #0]
 80072a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4ab3      	ldr	r2, [pc, #716]	@ (800759c <UART_SetConfig+0x32c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d004      	beq.n	80072dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072d8:	4313      	orrs	r3, r2
 80072da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	4baf      	ldr	r3, [pc, #700]	@ (80075a0 <UART_SetConfig+0x330>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	6812      	ldr	r2, [r2, #0]
 80072ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072ec:	430b      	orrs	r3, r1
 80072ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	f023 010f 	bic.w	r1, r3, #15
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4aa6      	ldr	r2, [pc, #664]	@ (80075a4 <UART_SetConfig+0x334>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d177      	bne.n	8007400 <UART_SetConfig+0x190>
 8007310:	4ba5      	ldr	r3, [pc, #660]	@ (80075a8 <UART_SetConfig+0x338>)
 8007312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007314:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007318:	2b28      	cmp	r3, #40	@ 0x28
 800731a:	d86d      	bhi.n	80073f8 <UART_SetConfig+0x188>
 800731c:	a201      	add	r2, pc, #4	@ (adr r2, 8007324 <UART_SetConfig+0xb4>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	080073c9 	.word	0x080073c9
 8007328:	080073f9 	.word	0x080073f9
 800732c:	080073f9 	.word	0x080073f9
 8007330:	080073f9 	.word	0x080073f9
 8007334:	080073f9 	.word	0x080073f9
 8007338:	080073f9 	.word	0x080073f9
 800733c:	080073f9 	.word	0x080073f9
 8007340:	080073f9 	.word	0x080073f9
 8007344:	080073d1 	.word	0x080073d1
 8007348:	080073f9 	.word	0x080073f9
 800734c:	080073f9 	.word	0x080073f9
 8007350:	080073f9 	.word	0x080073f9
 8007354:	080073f9 	.word	0x080073f9
 8007358:	080073f9 	.word	0x080073f9
 800735c:	080073f9 	.word	0x080073f9
 8007360:	080073f9 	.word	0x080073f9
 8007364:	080073d9 	.word	0x080073d9
 8007368:	080073f9 	.word	0x080073f9
 800736c:	080073f9 	.word	0x080073f9
 8007370:	080073f9 	.word	0x080073f9
 8007374:	080073f9 	.word	0x080073f9
 8007378:	080073f9 	.word	0x080073f9
 800737c:	080073f9 	.word	0x080073f9
 8007380:	080073f9 	.word	0x080073f9
 8007384:	080073e1 	.word	0x080073e1
 8007388:	080073f9 	.word	0x080073f9
 800738c:	080073f9 	.word	0x080073f9
 8007390:	080073f9 	.word	0x080073f9
 8007394:	080073f9 	.word	0x080073f9
 8007398:	080073f9 	.word	0x080073f9
 800739c:	080073f9 	.word	0x080073f9
 80073a0:	080073f9 	.word	0x080073f9
 80073a4:	080073e9 	.word	0x080073e9
 80073a8:	080073f9 	.word	0x080073f9
 80073ac:	080073f9 	.word	0x080073f9
 80073b0:	080073f9 	.word	0x080073f9
 80073b4:	080073f9 	.word	0x080073f9
 80073b8:	080073f9 	.word	0x080073f9
 80073bc:	080073f9 	.word	0x080073f9
 80073c0:	080073f9 	.word	0x080073f9
 80073c4:	080073f1 	.word	0x080073f1
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ce:	e326      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80073d0:	2304      	movs	r3, #4
 80073d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d6:	e322      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80073d8:	2308      	movs	r3, #8
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073de:	e31e      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80073e0:	2310      	movs	r3, #16
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e6:	e31a      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80073e8:	2320      	movs	r3, #32
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ee:	e316      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80073f0:	2340      	movs	r3, #64	@ 0x40
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f6:	e312      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80073f8:	2380      	movs	r3, #128	@ 0x80
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fe:	e30e      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a69      	ldr	r2, [pc, #420]	@ (80075ac <UART_SetConfig+0x33c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d130      	bne.n	800746c <UART_SetConfig+0x1fc>
 800740a:	4b67      	ldr	r3, [pc, #412]	@ (80075a8 <UART_SetConfig+0x338>)
 800740c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	2b05      	cmp	r3, #5
 8007414:	d826      	bhi.n	8007464 <UART_SetConfig+0x1f4>
 8007416:	a201      	add	r2, pc, #4	@ (adr r2, 800741c <UART_SetConfig+0x1ac>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007435 	.word	0x08007435
 8007420:	0800743d 	.word	0x0800743d
 8007424:	08007445 	.word	0x08007445
 8007428:	0800744d 	.word	0x0800744d
 800742c:	08007455 	.word	0x08007455
 8007430:	0800745d 	.word	0x0800745d
 8007434:	2300      	movs	r3, #0
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743a:	e2f0      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007442:	e2ec      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744a:	e2e8      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007452:	e2e4      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007454:	2320      	movs	r3, #32
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745a:	e2e0      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800745c:	2340      	movs	r3, #64	@ 0x40
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007462:	e2dc      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007464:	2380      	movs	r3, #128	@ 0x80
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746a:	e2d8      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a4f      	ldr	r2, [pc, #316]	@ (80075b0 <UART_SetConfig+0x340>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d130      	bne.n	80074d8 <UART_SetConfig+0x268>
 8007476:	4b4c      	ldr	r3, [pc, #304]	@ (80075a8 <UART_SetConfig+0x338>)
 8007478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	2b05      	cmp	r3, #5
 8007480:	d826      	bhi.n	80074d0 <UART_SetConfig+0x260>
 8007482:	a201      	add	r2, pc, #4	@ (adr r2, 8007488 <UART_SetConfig+0x218>)
 8007484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007488:	080074a1 	.word	0x080074a1
 800748c:	080074a9 	.word	0x080074a9
 8007490:	080074b1 	.word	0x080074b1
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074c1 	.word	0x080074c1
 800749c:	080074c9 	.word	0x080074c9
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a6:	e2ba      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ae:	e2b6      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e2b2      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e2ae      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80074c0:	2320      	movs	r3, #32
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e2aa      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80074c8:	2340      	movs	r3, #64	@ 0x40
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e2a6      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80074d0:	2380      	movs	r3, #128	@ 0x80
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e2a2      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a35      	ldr	r2, [pc, #212]	@ (80075b4 <UART_SetConfig+0x344>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d130      	bne.n	8007544 <UART_SetConfig+0x2d4>
 80074e2:	4b31      	ldr	r3, [pc, #196]	@ (80075a8 <UART_SetConfig+0x338>)
 80074e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	d826      	bhi.n	800753c <UART_SetConfig+0x2cc>
 80074ee:	a201      	add	r2, pc, #4	@ (adr r2, 80074f4 <UART_SetConfig+0x284>)
 80074f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f4:	0800750d 	.word	0x0800750d
 80074f8:	08007515 	.word	0x08007515
 80074fc:	0800751d 	.word	0x0800751d
 8007500:	08007525 	.word	0x08007525
 8007504:	0800752d 	.word	0x0800752d
 8007508:	08007535 	.word	0x08007535
 800750c:	2300      	movs	r3, #0
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007512:	e284      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007514:	2304      	movs	r3, #4
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751a:	e280      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800751c:	2308      	movs	r3, #8
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e27c      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007524:	2310      	movs	r3, #16
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e278      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800752c:	2320      	movs	r3, #32
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e274      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007534:	2340      	movs	r3, #64	@ 0x40
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e270      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800753c:	2380      	movs	r3, #128	@ 0x80
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e26c      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1b      	ldr	r2, [pc, #108]	@ (80075b8 <UART_SetConfig+0x348>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d142      	bne.n	80075d4 <UART_SetConfig+0x364>
 800754e:	4b16      	ldr	r3, [pc, #88]	@ (80075a8 <UART_SetConfig+0x338>)
 8007550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	2b05      	cmp	r3, #5
 8007558:	d838      	bhi.n	80075cc <UART_SetConfig+0x35c>
 800755a:	a201      	add	r2, pc, #4	@ (adr r2, 8007560 <UART_SetConfig+0x2f0>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	08007579 	.word	0x08007579
 8007564:	08007581 	.word	0x08007581
 8007568:	08007589 	.word	0x08007589
 800756c:	08007591 	.word	0x08007591
 8007570:	080075bd 	.word	0x080075bd
 8007574:	080075c5 	.word	0x080075c5
 8007578:	2300      	movs	r3, #0
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757e:	e24e      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007580:	2304      	movs	r3, #4
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007586:	e24a      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007588:	2308      	movs	r3, #8
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e246      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007590:	2310      	movs	r3, #16
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e242      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007598:	cfff69f3 	.word	0xcfff69f3
 800759c:	58000c00 	.word	0x58000c00
 80075a0:	11fff4ff 	.word	0x11fff4ff
 80075a4:	40011000 	.word	0x40011000
 80075a8:	58024400 	.word	0x58024400
 80075ac:	40004400 	.word	0x40004400
 80075b0:	40004800 	.word	0x40004800
 80075b4:	40004c00 	.word	0x40004c00
 80075b8:	40005000 	.word	0x40005000
 80075bc:	2320      	movs	r3, #32
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c2:	e22c      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80075c4:	2340      	movs	r3, #64	@ 0x40
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ca:	e228      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80075cc:	2380      	movs	r3, #128	@ 0x80
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d2:	e224      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4ab1      	ldr	r2, [pc, #708]	@ (80078a0 <UART_SetConfig+0x630>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d176      	bne.n	80076cc <UART_SetConfig+0x45c>
 80075de:	4bb1      	ldr	r3, [pc, #708]	@ (80078a4 <UART_SetConfig+0x634>)
 80075e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075e6:	2b28      	cmp	r3, #40	@ 0x28
 80075e8:	d86c      	bhi.n	80076c4 <UART_SetConfig+0x454>
 80075ea:	a201      	add	r2, pc, #4	@ (adr r2, 80075f0 <UART_SetConfig+0x380>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	08007695 	.word	0x08007695
 80075f4:	080076c5 	.word	0x080076c5
 80075f8:	080076c5 	.word	0x080076c5
 80075fc:	080076c5 	.word	0x080076c5
 8007600:	080076c5 	.word	0x080076c5
 8007604:	080076c5 	.word	0x080076c5
 8007608:	080076c5 	.word	0x080076c5
 800760c:	080076c5 	.word	0x080076c5
 8007610:	0800769d 	.word	0x0800769d
 8007614:	080076c5 	.word	0x080076c5
 8007618:	080076c5 	.word	0x080076c5
 800761c:	080076c5 	.word	0x080076c5
 8007620:	080076c5 	.word	0x080076c5
 8007624:	080076c5 	.word	0x080076c5
 8007628:	080076c5 	.word	0x080076c5
 800762c:	080076c5 	.word	0x080076c5
 8007630:	080076a5 	.word	0x080076a5
 8007634:	080076c5 	.word	0x080076c5
 8007638:	080076c5 	.word	0x080076c5
 800763c:	080076c5 	.word	0x080076c5
 8007640:	080076c5 	.word	0x080076c5
 8007644:	080076c5 	.word	0x080076c5
 8007648:	080076c5 	.word	0x080076c5
 800764c:	080076c5 	.word	0x080076c5
 8007650:	080076ad 	.word	0x080076ad
 8007654:	080076c5 	.word	0x080076c5
 8007658:	080076c5 	.word	0x080076c5
 800765c:	080076c5 	.word	0x080076c5
 8007660:	080076c5 	.word	0x080076c5
 8007664:	080076c5 	.word	0x080076c5
 8007668:	080076c5 	.word	0x080076c5
 800766c:	080076c5 	.word	0x080076c5
 8007670:	080076b5 	.word	0x080076b5
 8007674:	080076c5 	.word	0x080076c5
 8007678:	080076c5 	.word	0x080076c5
 800767c:	080076c5 	.word	0x080076c5
 8007680:	080076c5 	.word	0x080076c5
 8007684:	080076c5 	.word	0x080076c5
 8007688:	080076c5 	.word	0x080076c5
 800768c:	080076c5 	.word	0x080076c5
 8007690:	080076bd 	.word	0x080076bd
 8007694:	2301      	movs	r3, #1
 8007696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769a:	e1c0      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800769c:	2304      	movs	r3, #4
 800769e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a2:	e1bc      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80076a4:	2308      	movs	r3, #8
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076aa:	e1b8      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80076ac:	2310      	movs	r3, #16
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e1b4      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80076b4:	2320      	movs	r3, #32
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ba:	e1b0      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80076bc:	2340      	movs	r3, #64	@ 0x40
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c2:	e1ac      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80076c4:	2380      	movs	r3, #128	@ 0x80
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ca:	e1a8      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a75      	ldr	r2, [pc, #468]	@ (80078a8 <UART_SetConfig+0x638>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d130      	bne.n	8007738 <UART_SetConfig+0x4c8>
 80076d6:	4b73      	ldr	r3, [pc, #460]	@ (80078a4 <UART_SetConfig+0x634>)
 80076d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076da:	f003 0307 	and.w	r3, r3, #7
 80076de:	2b05      	cmp	r3, #5
 80076e0:	d826      	bhi.n	8007730 <UART_SetConfig+0x4c0>
 80076e2:	a201      	add	r2, pc, #4	@ (adr r2, 80076e8 <UART_SetConfig+0x478>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	08007701 	.word	0x08007701
 80076ec:	08007709 	.word	0x08007709
 80076f0:	08007711 	.word	0x08007711
 80076f4:	08007719 	.word	0x08007719
 80076f8:	08007721 	.word	0x08007721
 80076fc:	08007729 	.word	0x08007729
 8007700:	2300      	movs	r3, #0
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007706:	e18a      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007708:	2304      	movs	r3, #4
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770e:	e186      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007710:	2308      	movs	r3, #8
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e182      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007718:	2310      	movs	r3, #16
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e17e      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007720:	2320      	movs	r3, #32
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007726:	e17a      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007728:	2340      	movs	r3, #64	@ 0x40
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772e:	e176      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007730:	2380      	movs	r3, #128	@ 0x80
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007736:	e172      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a5b      	ldr	r2, [pc, #364]	@ (80078ac <UART_SetConfig+0x63c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d130      	bne.n	80077a4 <UART_SetConfig+0x534>
 8007742:	4b58      	ldr	r3, [pc, #352]	@ (80078a4 <UART_SetConfig+0x634>)
 8007744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b05      	cmp	r3, #5
 800774c:	d826      	bhi.n	800779c <UART_SetConfig+0x52c>
 800774e:	a201      	add	r2, pc, #4	@ (adr r2, 8007754 <UART_SetConfig+0x4e4>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	0800776d 	.word	0x0800776d
 8007758:	08007775 	.word	0x08007775
 800775c:	0800777d 	.word	0x0800777d
 8007760:	08007785 	.word	0x08007785
 8007764:	0800778d 	.word	0x0800778d
 8007768:	08007795 	.word	0x08007795
 800776c:	2300      	movs	r3, #0
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007772:	e154      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007774:	2304      	movs	r3, #4
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777a:	e150      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800777c:	2308      	movs	r3, #8
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e14c      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007784:	2310      	movs	r3, #16
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e148      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800778c:	2320      	movs	r3, #32
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e144      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007794:	2340      	movs	r3, #64	@ 0x40
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e140      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800779c:	2380      	movs	r3, #128	@ 0x80
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e13c      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a41      	ldr	r2, [pc, #260]	@ (80078b0 <UART_SetConfig+0x640>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	f040 8082 	bne.w	80078b4 <UART_SetConfig+0x644>
 80077b0:	4b3c      	ldr	r3, [pc, #240]	@ (80078a4 <UART_SetConfig+0x634>)
 80077b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077b8:	2b28      	cmp	r3, #40	@ 0x28
 80077ba:	d86d      	bhi.n	8007898 <UART_SetConfig+0x628>
 80077bc:	a201      	add	r2, pc, #4	@ (adr r2, 80077c4 <UART_SetConfig+0x554>)
 80077be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	08007869 	.word	0x08007869
 80077c8:	08007899 	.word	0x08007899
 80077cc:	08007899 	.word	0x08007899
 80077d0:	08007899 	.word	0x08007899
 80077d4:	08007899 	.word	0x08007899
 80077d8:	08007899 	.word	0x08007899
 80077dc:	08007899 	.word	0x08007899
 80077e0:	08007899 	.word	0x08007899
 80077e4:	08007871 	.word	0x08007871
 80077e8:	08007899 	.word	0x08007899
 80077ec:	08007899 	.word	0x08007899
 80077f0:	08007899 	.word	0x08007899
 80077f4:	08007899 	.word	0x08007899
 80077f8:	08007899 	.word	0x08007899
 80077fc:	08007899 	.word	0x08007899
 8007800:	08007899 	.word	0x08007899
 8007804:	08007879 	.word	0x08007879
 8007808:	08007899 	.word	0x08007899
 800780c:	08007899 	.word	0x08007899
 8007810:	08007899 	.word	0x08007899
 8007814:	08007899 	.word	0x08007899
 8007818:	08007899 	.word	0x08007899
 800781c:	08007899 	.word	0x08007899
 8007820:	08007899 	.word	0x08007899
 8007824:	08007881 	.word	0x08007881
 8007828:	08007899 	.word	0x08007899
 800782c:	08007899 	.word	0x08007899
 8007830:	08007899 	.word	0x08007899
 8007834:	08007899 	.word	0x08007899
 8007838:	08007899 	.word	0x08007899
 800783c:	08007899 	.word	0x08007899
 8007840:	08007899 	.word	0x08007899
 8007844:	08007889 	.word	0x08007889
 8007848:	08007899 	.word	0x08007899
 800784c:	08007899 	.word	0x08007899
 8007850:	08007899 	.word	0x08007899
 8007854:	08007899 	.word	0x08007899
 8007858:	08007899 	.word	0x08007899
 800785c:	08007899 	.word	0x08007899
 8007860:	08007899 	.word	0x08007899
 8007864:	08007891 	.word	0x08007891
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786e:	e0d6      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007870:	2304      	movs	r3, #4
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007876:	e0d2      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007878:	2308      	movs	r3, #8
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787e:	e0ce      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007880:	2310      	movs	r3, #16
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007886:	e0ca      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007888:	2320      	movs	r3, #32
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788e:	e0c6      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007890:	2340      	movs	r3, #64	@ 0x40
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007896:	e0c2      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007898:	2380      	movs	r3, #128	@ 0x80
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789e:	e0be      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80078a0:	40011400 	.word	0x40011400
 80078a4:	58024400 	.word	0x58024400
 80078a8:	40007800 	.word	0x40007800
 80078ac:	40007c00 	.word	0x40007c00
 80078b0:	40011800 	.word	0x40011800
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4aad      	ldr	r2, [pc, #692]	@ (8007b70 <UART_SetConfig+0x900>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d176      	bne.n	80079ac <UART_SetConfig+0x73c>
 80078be:	4bad      	ldr	r3, [pc, #692]	@ (8007b74 <UART_SetConfig+0x904>)
 80078c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078c6:	2b28      	cmp	r3, #40	@ 0x28
 80078c8:	d86c      	bhi.n	80079a4 <UART_SetConfig+0x734>
 80078ca:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <UART_SetConfig+0x660>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	08007975 	.word	0x08007975
 80078d4:	080079a5 	.word	0x080079a5
 80078d8:	080079a5 	.word	0x080079a5
 80078dc:	080079a5 	.word	0x080079a5
 80078e0:	080079a5 	.word	0x080079a5
 80078e4:	080079a5 	.word	0x080079a5
 80078e8:	080079a5 	.word	0x080079a5
 80078ec:	080079a5 	.word	0x080079a5
 80078f0:	0800797d 	.word	0x0800797d
 80078f4:	080079a5 	.word	0x080079a5
 80078f8:	080079a5 	.word	0x080079a5
 80078fc:	080079a5 	.word	0x080079a5
 8007900:	080079a5 	.word	0x080079a5
 8007904:	080079a5 	.word	0x080079a5
 8007908:	080079a5 	.word	0x080079a5
 800790c:	080079a5 	.word	0x080079a5
 8007910:	08007985 	.word	0x08007985
 8007914:	080079a5 	.word	0x080079a5
 8007918:	080079a5 	.word	0x080079a5
 800791c:	080079a5 	.word	0x080079a5
 8007920:	080079a5 	.word	0x080079a5
 8007924:	080079a5 	.word	0x080079a5
 8007928:	080079a5 	.word	0x080079a5
 800792c:	080079a5 	.word	0x080079a5
 8007930:	0800798d 	.word	0x0800798d
 8007934:	080079a5 	.word	0x080079a5
 8007938:	080079a5 	.word	0x080079a5
 800793c:	080079a5 	.word	0x080079a5
 8007940:	080079a5 	.word	0x080079a5
 8007944:	080079a5 	.word	0x080079a5
 8007948:	080079a5 	.word	0x080079a5
 800794c:	080079a5 	.word	0x080079a5
 8007950:	08007995 	.word	0x08007995
 8007954:	080079a5 	.word	0x080079a5
 8007958:	080079a5 	.word	0x080079a5
 800795c:	080079a5 	.word	0x080079a5
 8007960:	080079a5 	.word	0x080079a5
 8007964:	080079a5 	.word	0x080079a5
 8007968:	080079a5 	.word	0x080079a5
 800796c:	080079a5 	.word	0x080079a5
 8007970:	0800799d 	.word	0x0800799d
 8007974:	2301      	movs	r3, #1
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e050      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800797c:	2304      	movs	r3, #4
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e04c      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007984:	2308      	movs	r3, #8
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e048      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800798c:	2310      	movs	r3, #16
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e044      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007994:	2320      	movs	r3, #32
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e040      	b.n	8007a1e <UART_SetConfig+0x7ae>
 800799c:	2340      	movs	r3, #64	@ 0x40
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e03c      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80079a4:	2380      	movs	r3, #128	@ 0x80
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e038      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a71      	ldr	r2, [pc, #452]	@ (8007b78 <UART_SetConfig+0x908>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d130      	bne.n	8007a18 <UART_SetConfig+0x7a8>
 80079b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007b74 <UART_SetConfig+0x904>)
 80079b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	2b05      	cmp	r3, #5
 80079c0:	d826      	bhi.n	8007a10 <UART_SetConfig+0x7a0>
 80079c2:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <UART_SetConfig+0x758>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	080079e1 	.word	0x080079e1
 80079cc:	080079e9 	.word	0x080079e9
 80079d0:	080079f1 	.word	0x080079f1
 80079d4:	080079f9 	.word	0x080079f9
 80079d8:	08007a01 	.word	0x08007a01
 80079dc:	08007a09 	.word	0x08007a09
 80079e0:	2302      	movs	r3, #2
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e01a      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80079e8:	2304      	movs	r3, #4
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e016      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80079f0:	2308      	movs	r3, #8
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e012      	b.n	8007a1e <UART_SetConfig+0x7ae>
 80079f8:	2310      	movs	r3, #16
 80079fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fe:	e00e      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007a00:	2320      	movs	r3, #32
 8007a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a06:	e00a      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007a08:	2340      	movs	r3, #64	@ 0x40
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e006      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007a10:	2380      	movs	r3, #128	@ 0x80
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a16:	e002      	b.n	8007a1e <UART_SetConfig+0x7ae>
 8007a18:	2380      	movs	r3, #128	@ 0x80
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a55      	ldr	r2, [pc, #340]	@ (8007b78 <UART_SetConfig+0x908>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	f040 80f8 	bne.w	8007c1a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	dc46      	bgt.n	8007ac0 <UART_SetConfig+0x850>
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	db75      	blt.n	8007b22 <UART_SetConfig+0x8b2>
 8007a36:	3b02      	subs	r3, #2
 8007a38:	2b1e      	cmp	r3, #30
 8007a3a:	d872      	bhi.n	8007b22 <UART_SetConfig+0x8b2>
 8007a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <UART_SetConfig+0x7d4>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007ac7 	.word	0x08007ac7
 8007a48:	08007b23 	.word	0x08007b23
 8007a4c:	08007acf 	.word	0x08007acf
 8007a50:	08007b23 	.word	0x08007b23
 8007a54:	08007b23 	.word	0x08007b23
 8007a58:	08007b23 	.word	0x08007b23
 8007a5c:	08007adf 	.word	0x08007adf
 8007a60:	08007b23 	.word	0x08007b23
 8007a64:	08007b23 	.word	0x08007b23
 8007a68:	08007b23 	.word	0x08007b23
 8007a6c:	08007b23 	.word	0x08007b23
 8007a70:	08007b23 	.word	0x08007b23
 8007a74:	08007b23 	.word	0x08007b23
 8007a78:	08007b23 	.word	0x08007b23
 8007a7c:	08007aef 	.word	0x08007aef
 8007a80:	08007b23 	.word	0x08007b23
 8007a84:	08007b23 	.word	0x08007b23
 8007a88:	08007b23 	.word	0x08007b23
 8007a8c:	08007b23 	.word	0x08007b23
 8007a90:	08007b23 	.word	0x08007b23
 8007a94:	08007b23 	.word	0x08007b23
 8007a98:	08007b23 	.word	0x08007b23
 8007a9c:	08007b23 	.word	0x08007b23
 8007aa0:	08007b23 	.word	0x08007b23
 8007aa4:	08007b23 	.word	0x08007b23
 8007aa8:	08007b23 	.word	0x08007b23
 8007aac:	08007b23 	.word	0x08007b23
 8007ab0:	08007b23 	.word	0x08007b23
 8007ab4:	08007b23 	.word	0x08007b23
 8007ab8:	08007b23 	.word	0x08007b23
 8007abc:	08007b15 	.word	0x08007b15
 8007ac0:	2b40      	cmp	r3, #64	@ 0x40
 8007ac2:	d02a      	beq.n	8007b1a <UART_SetConfig+0x8aa>
 8007ac4:	e02d      	b.n	8007b22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ac6:	f7fc fdcb 	bl	8004660 <HAL_RCCEx_GetD3PCLK1Freq>
 8007aca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007acc:	e02f      	b.n	8007b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fc fdda 	bl	800468c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007adc:	e027      	b.n	8007b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ade:	f107 0318 	add.w	r3, r7, #24
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fc ff26 	bl	8004934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aec:	e01f      	b.n	8007b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aee:	4b21      	ldr	r3, [pc, #132]	@ (8007b74 <UART_SetConfig+0x904>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d009      	beq.n	8007b0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007afa:	4b1e      	ldr	r3, [pc, #120]	@ (8007b74 <UART_SetConfig+0x904>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	08db      	lsrs	r3, r3, #3
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	4a1d      	ldr	r2, [pc, #116]	@ (8007b7c <UART_SetConfig+0x90c>)
 8007b06:	fa22 f303 	lsr.w	r3, r2, r3
 8007b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b0c:	e00f      	b.n	8007b2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8007b7c <UART_SetConfig+0x90c>)
 8007b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b12:	e00c      	b.n	8007b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b14:	4b1a      	ldr	r3, [pc, #104]	@ (8007b80 <UART_SetConfig+0x910>)
 8007b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b18:	e009      	b.n	8007b2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b20:	e005      	b.n	8007b2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 81ee 	beq.w	8007f12 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3a:	4a12      	ldr	r2, [pc, #72]	@ (8007b84 <UART_SetConfig+0x914>)
 8007b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b48:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	4413      	add	r3, r2
 8007b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d305      	bcc.n	8007b66 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d910      	bls.n	8007b88 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b6c:	e1d1      	b.n	8007f12 <UART_SetConfig+0xca2>
 8007b6e:	bf00      	nop
 8007b70:	40011c00 	.word	0x40011c00
 8007b74:	58024400 	.word	0x58024400
 8007b78:	58000c00 	.word	0x58000c00
 8007b7c:	03d09000 	.word	0x03d09000
 8007b80:	003d0900 	.word	0x003d0900
 8007b84:	08008610 	.word	0x08008610
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	60bb      	str	r3, [r7, #8]
 8007b8e:	60fa      	str	r2, [r7, #12]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b94:	4ac0      	ldr	r2, [pc, #768]	@ (8007e98 <UART_SetConfig+0xc28>)
 8007b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	607a      	str	r2, [r7, #4]
 8007ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007baa:	f7f8 fb9f 	bl	80002ec <__aeabi_uldivmod>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	f04f 0300 	mov.w	r3, #0
 8007bbe:	020b      	lsls	r3, r1, #8
 8007bc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bc4:	0202      	lsls	r2, r0, #8
 8007bc6:	6979      	ldr	r1, [r7, #20]
 8007bc8:	6849      	ldr	r1, [r1, #4]
 8007bca:	0849      	lsrs	r1, r1, #1
 8007bcc:	2000      	movs	r0, #0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	eb12 0804 	adds.w	r8, r2, r4
 8007bd6:	eb43 0905 	adc.w	r9, r3, r5
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	469a      	mov	sl, r3
 8007be2:	4693      	mov	fp, r2
 8007be4:	4652      	mov	r2, sl
 8007be6:	465b      	mov	r3, fp
 8007be8:	4640      	mov	r0, r8
 8007bea:	4649      	mov	r1, r9
 8007bec:	f7f8 fb7e 	bl	80002ec <__aeabi_uldivmod>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bfe:	d308      	bcc.n	8007c12 <UART_SetConfig+0x9a2>
 8007c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c06:	d204      	bcs.n	8007c12 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c0e:	60da      	str	r2, [r3, #12]
 8007c10:	e17f      	b.n	8007f12 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c18:	e17b      	b.n	8007f12 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c22:	f040 80bd 	bne.w	8007da0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007c26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c2a:	2b20      	cmp	r3, #32
 8007c2c:	dc48      	bgt.n	8007cc0 <UART_SetConfig+0xa50>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	db7b      	blt.n	8007d2a <UART_SetConfig+0xaba>
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d879      	bhi.n	8007d2a <UART_SetConfig+0xaba>
 8007c36:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <UART_SetConfig+0x9cc>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007cc7 	.word	0x08007cc7
 8007c40:	08007ccf 	.word	0x08007ccf
 8007c44:	08007d2b 	.word	0x08007d2b
 8007c48:	08007d2b 	.word	0x08007d2b
 8007c4c:	08007cd7 	.word	0x08007cd7
 8007c50:	08007d2b 	.word	0x08007d2b
 8007c54:	08007d2b 	.word	0x08007d2b
 8007c58:	08007d2b 	.word	0x08007d2b
 8007c5c:	08007ce7 	.word	0x08007ce7
 8007c60:	08007d2b 	.word	0x08007d2b
 8007c64:	08007d2b 	.word	0x08007d2b
 8007c68:	08007d2b 	.word	0x08007d2b
 8007c6c:	08007d2b 	.word	0x08007d2b
 8007c70:	08007d2b 	.word	0x08007d2b
 8007c74:	08007d2b 	.word	0x08007d2b
 8007c78:	08007d2b 	.word	0x08007d2b
 8007c7c:	08007cf7 	.word	0x08007cf7
 8007c80:	08007d2b 	.word	0x08007d2b
 8007c84:	08007d2b 	.word	0x08007d2b
 8007c88:	08007d2b 	.word	0x08007d2b
 8007c8c:	08007d2b 	.word	0x08007d2b
 8007c90:	08007d2b 	.word	0x08007d2b
 8007c94:	08007d2b 	.word	0x08007d2b
 8007c98:	08007d2b 	.word	0x08007d2b
 8007c9c:	08007d2b 	.word	0x08007d2b
 8007ca0:	08007d2b 	.word	0x08007d2b
 8007ca4:	08007d2b 	.word	0x08007d2b
 8007ca8:	08007d2b 	.word	0x08007d2b
 8007cac:	08007d2b 	.word	0x08007d2b
 8007cb0:	08007d2b 	.word	0x08007d2b
 8007cb4:	08007d2b 	.word	0x08007d2b
 8007cb8:	08007d2b 	.word	0x08007d2b
 8007cbc:	08007d1d 	.word	0x08007d1d
 8007cc0:	2b40      	cmp	r3, #64	@ 0x40
 8007cc2:	d02e      	beq.n	8007d22 <UART_SetConfig+0xab2>
 8007cc4:	e031      	b.n	8007d2a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc6:	f7fb fae1 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8007cca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ccc:	e033      	b.n	8007d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cce:	f7fb faf3 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 8007cd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cd4:	e02f      	b.n	8007d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fc fcd6 	bl	800468c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce4:	e027      	b.n	8007d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ce6:	f107 0318 	add.w	r3, r7, #24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fc fe22 	bl	8004934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf4:	e01f      	b.n	8007d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf6:	4b69      	ldr	r3, [pc, #420]	@ (8007e9c <UART_SetConfig+0xc2c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d009      	beq.n	8007d16 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d02:	4b66      	ldr	r3, [pc, #408]	@ (8007e9c <UART_SetConfig+0xc2c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	08db      	lsrs	r3, r3, #3
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	4a64      	ldr	r2, [pc, #400]	@ (8007ea0 <UART_SetConfig+0xc30>)
 8007d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d14:	e00f      	b.n	8007d36 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007d16:	4b62      	ldr	r3, [pc, #392]	@ (8007ea0 <UART_SetConfig+0xc30>)
 8007d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1a:	e00c      	b.n	8007d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d1c:	4b61      	ldr	r3, [pc, #388]	@ (8007ea4 <UART_SetConfig+0xc34>)
 8007d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d20:	e009      	b.n	8007d36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d28:	e005      	b.n	8007d36 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 80ea 	beq.w	8007f12 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d42:	4a55      	ldr	r2, [pc, #340]	@ (8007e98 <UART_SetConfig+0xc28>)
 8007d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d50:	005a      	lsls	r2, r3, #1
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	085b      	lsrs	r3, r3, #1
 8007d58:	441a      	add	r2, r3
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d66:	2b0f      	cmp	r3, #15
 8007d68:	d916      	bls.n	8007d98 <UART_SetConfig+0xb28>
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d70:	d212      	bcs.n	8007d98 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	f023 030f 	bic.w	r3, r3, #15
 8007d7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7e:	085b      	lsrs	r3, r3, #1
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d94:	60da      	str	r2, [r3, #12]
 8007d96:	e0bc      	b.n	8007f12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d9e:	e0b8      	b.n	8007f12 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007da0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	dc4b      	bgt.n	8007e40 <UART_SetConfig+0xbd0>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f2c0 8087 	blt.w	8007ebc <UART_SetConfig+0xc4c>
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	f200 8084 	bhi.w	8007ebc <UART_SetConfig+0xc4c>
 8007db4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dbc <UART_SetConfig+0xb4c>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007e47 	.word	0x08007e47
 8007dc0:	08007e4f 	.word	0x08007e4f
 8007dc4:	08007ebd 	.word	0x08007ebd
 8007dc8:	08007ebd 	.word	0x08007ebd
 8007dcc:	08007e57 	.word	0x08007e57
 8007dd0:	08007ebd 	.word	0x08007ebd
 8007dd4:	08007ebd 	.word	0x08007ebd
 8007dd8:	08007ebd 	.word	0x08007ebd
 8007ddc:	08007e67 	.word	0x08007e67
 8007de0:	08007ebd 	.word	0x08007ebd
 8007de4:	08007ebd 	.word	0x08007ebd
 8007de8:	08007ebd 	.word	0x08007ebd
 8007dec:	08007ebd 	.word	0x08007ebd
 8007df0:	08007ebd 	.word	0x08007ebd
 8007df4:	08007ebd 	.word	0x08007ebd
 8007df8:	08007ebd 	.word	0x08007ebd
 8007dfc:	08007e77 	.word	0x08007e77
 8007e00:	08007ebd 	.word	0x08007ebd
 8007e04:	08007ebd 	.word	0x08007ebd
 8007e08:	08007ebd 	.word	0x08007ebd
 8007e0c:	08007ebd 	.word	0x08007ebd
 8007e10:	08007ebd 	.word	0x08007ebd
 8007e14:	08007ebd 	.word	0x08007ebd
 8007e18:	08007ebd 	.word	0x08007ebd
 8007e1c:	08007ebd 	.word	0x08007ebd
 8007e20:	08007ebd 	.word	0x08007ebd
 8007e24:	08007ebd 	.word	0x08007ebd
 8007e28:	08007ebd 	.word	0x08007ebd
 8007e2c:	08007ebd 	.word	0x08007ebd
 8007e30:	08007ebd 	.word	0x08007ebd
 8007e34:	08007ebd 	.word	0x08007ebd
 8007e38:	08007ebd 	.word	0x08007ebd
 8007e3c:	08007eaf 	.word	0x08007eaf
 8007e40:	2b40      	cmp	r3, #64	@ 0x40
 8007e42:	d037      	beq.n	8007eb4 <UART_SetConfig+0xc44>
 8007e44:	e03a      	b.n	8007ebc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e46:	f7fb fa21 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8007e4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e4c:	e03c      	b.n	8007ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e4e:	f7fb fa33 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 8007e52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e54:	e038      	b.n	8007ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fc fc16 	bl	800468c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e64:	e030      	b.n	8007ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e66:	f107 0318 	add.w	r3, r7, #24
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fc fd62 	bl	8004934 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e74:	e028      	b.n	8007ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e76:	4b09      	ldr	r3, [pc, #36]	@ (8007e9c <UART_SetConfig+0xc2c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0320 	and.w	r3, r3, #32
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d012      	beq.n	8007ea8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e82:	4b06      	ldr	r3, [pc, #24]	@ (8007e9c <UART_SetConfig+0xc2c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	08db      	lsrs	r3, r3, #3
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	4a04      	ldr	r2, [pc, #16]	@ (8007ea0 <UART_SetConfig+0xc30>)
 8007e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e94:	e018      	b.n	8007ec8 <UART_SetConfig+0xc58>
 8007e96:	bf00      	nop
 8007e98:	08008610 	.word	0x08008610
 8007e9c:	58024400 	.word	0x58024400
 8007ea0:	03d09000 	.word	0x03d09000
 8007ea4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007ea8:	4b24      	ldr	r3, [pc, #144]	@ (8007f3c <UART_SetConfig+0xccc>)
 8007eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eac:	e00c      	b.n	8007ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007eae:	4b24      	ldr	r3, [pc, #144]	@ (8007f40 <UART_SetConfig+0xcd0>)
 8007eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eb2:	e009      	b.n	8007ec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eba:	e005      	b.n	8007ec8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ec6:	bf00      	nop
    }

    if (pclk != 0U)
 8007ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d021      	beq.n	8007f12 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8007f44 <UART_SetConfig+0xcd4>)
 8007ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007edc:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	085b      	lsrs	r3, r3, #1
 8007ee6:	441a      	add	r2, r3
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef4:	2b0f      	cmp	r3, #15
 8007ef6:	d909      	bls.n	8007f0c <UART_SetConfig+0xc9c>
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007efa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007efe:	d205      	bcs.n	8007f0c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	e002      	b.n	8007f12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2200      	movs	r2, #0
 8007f26:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f2e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3748      	adds	r7, #72	@ 0x48
 8007f36:	46bd      	mov	sp, r7
 8007f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f3c:	03d09000 	.word	0x03d09000
 8007f40:	003d0900 	.word	0x003d0900
 8007f44:	08008610 	.word	0x08008610

08007f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00a      	beq.n	8007ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01a      	beq.n	800805e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008046:	d10a      	bne.n	800805e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	605a      	str	r2, [r3, #4]
  }
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b098      	sub	sp, #96	@ 0x60
 8008090:	af02      	add	r7, sp, #8
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800809c:	f7f9 fe24 	bl	8001ce8 <HAL_GetTick>
 80080a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d12f      	bne.n	8008110 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080b8:	2200      	movs	r2, #0
 80080ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f88e 	bl	80081e0 <UART_WaitOnFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d022      	beq.n	8008110 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080de:	653b      	str	r3, [r7, #80]	@ 0x50
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80080ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e6      	bne.n	80080ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e063      	b.n	80081d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b04      	cmp	r3, #4
 800811c:	d149      	bne.n	80081b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800811e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008126:	2200      	movs	r2, #0
 8008128:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f857 	bl	80081e0 <UART_WaitOnFlagUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d03c      	beq.n	80081b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	623b      	str	r3, [r7, #32]
   return(result);
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800814c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008156:	633b      	str	r3, [r7, #48]	@ 0x30
 8008158:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800815c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e6      	bne.n	8008138 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3308      	adds	r3, #8
 8008170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	60fb      	str	r3, [r7, #12]
   return(result);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f023 0301 	bic.w	r3, r3, #1
 8008180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800818a:	61fa      	str	r2, [r7, #28]
 800818c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	69b9      	ldr	r1, [r7, #24]
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	617b      	str	r3, [r7, #20]
   return(result);
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e5      	bne.n	800816a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e012      	b.n	80081d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3758      	adds	r7, #88	@ 0x58
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	4613      	mov	r3, r2
 80081ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f0:	e04f      	b.n	8008292 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081f8:	d04b      	beq.n	8008292 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fa:	f7f9 fd75 	bl	8001ce8 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	429a      	cmp	r2, r3
 8008208:	d302      	bcc.n	8008210 <UART_WaitOnFlagUntilTimeout+0x30>
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e04e      	b.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0304 	and.w	r3, r3, #4
 800821e:	2b00      	cmp	r3, #0
 8008220:	d037      	beq.n	8008292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b80      	cmp	r3, #128	@ 0x80
 8008226:	d034      	beq.n	8008292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b40      	cmp	r3, #64	@ 0x40
 800822c:	d031      	beq.n	8008292 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b08      	cmp	r3, #8
 800823a:	d110      	bne.n	800825e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2208      	movs	r2, #8
 8008242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 f839 	bl	80082bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2208      	movs	r2, #8
 800824e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e029      	b.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800826c:	d111      	bne.n	8008292 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 f81f 	bl	80082bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2220      	movs	r2, #32
 8008282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e00f      	b.n	80082b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69da      	ldr	r2, [r3, #28]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4013      	ands	r3, r2
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	429a      	cmp	r2, r3
 80082a0:	bf0c      	ite	eq
 80082a2:	2301      	moveq	r3, #1
 80082a4:	2300      	movne	r3, #0
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	79fb      	ldrb	r3, [r7, #7]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d0a0      	beq.n	80081f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
	...

080082bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082bc:	b480      	push	{r7}
 80082be:	b095      	sub	sp, #84	@ 0x54
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80082e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e6      	bne.n	80082c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3308      	adds	r3, #8
 80082fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	61fb      	str	r3, [r7, #28]
   return(result);
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	4b1e      	ldr	r3, [pc, #120]	@ (8008384 <UART_EndRxTransfer+0xc8>)
 800830a:	4013      	ands	r3, r2
 800830c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008318:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800831c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e5      	bne.n	80082f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800832e:	2b01      	cmp	r3, #1
 8008330:	d118      	bne.n	8008364 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f023 0310 	bic.w	r3, r3, #16
 8008346:	647b      	str	r3, [r7, #68]	@ 0x44
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	461a      	mov	r2, r3
 800834e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	6979      	ldr	r1, [r7, #20]
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	613b      	str	r3, [r7, #16]
   return(result);
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e6      	bne.n	8008332 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2220      	movs	r2, #32
 8008368:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008378:	bf00      	nop
 800837a:	3754      	adds	r7, #84	@ 0x54
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	effffffe 	.word	0xeffffffe

08008388 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008396:	2b01      	cmp	r3, #1
 8008398:	d101      	bne.n	800839e <HAL_UARTEx_DisableFifoMode+0x16>
 800839a:	2302      	movs	r3, #2
 800839c:	e027      	b.n	80083ee <HAL_UARTEx_DisableFifoMode+0x66>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2224      	movs	r2, #36	@ 0x24
 80083aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0201 	bic.w	r2, r2, #1
 80083c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80083cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800840a:	2b01      	cmp	r3, #1
 800840c:	d101      	bne.n	8008412 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800840e:	2302      	movs	r3, #2
 8008410:	e02d      	b.n	800846e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2224      	movs	r2, #36	@ 0x24
 800841e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f022 0201 	bic.w	r2, r2, #1
 8008438:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f850 	bl	80084f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2220      	movs	r2, #32
 8008460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008486:	2b01      	cmp	r3, #1
 8008488:	d101      	bne.n	800848e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800848a:	2302      	movs	r3, #2
 800848c:	e02d      	b.n	80084ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2224      	movs	r2, #36	@ 0x24
 800849a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0201 	bic.w	r2, r2, #1
 80084b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f812 	bl	80084f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2220      	movs	r2, #32
 80084dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
	...

080084f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008500:	2b00      	cmp	r3, #0
 8008502:	d108      	bne.n	8008516 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008514:	e031      	b.n	800857a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008516:	2310      	movs	r3, #16
 8008518:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800851a:	2310      	movs	r3, #16
 800851c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	0e5b      	lsrs	r3, r3, #25
 8008526:	b2db      	uxtb	r3, r3
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	0f5b      	lsrs	r3, r3, #29
 8008536:	b2db      	uxtb	r3, r3
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	7b3a      	ldrb	r2, [r7, #12]
 8008542:	4911      	ldr	r1, [pc, #68]	@ (8008588 <UARTEx_SetNbDataToProcess+0x94>)
 8008544:	5c8a      	ldrb	r2, [r1, r2]
 8008546:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800854a:	7b3a      	ldrb	r2, [r7, #12]
 800854c:	490f      	ldr	r1, [pc, #60]	@ (800858c <UARTEx_SetNbDataToProcess+0x98>)
 800854e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008550:	fb93 f3f2 	sdiv	r3, r3, r2
 8008554:	b29a      	uxth	r2, r3
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	7b7a      	ldrb	r2, [r7, #13]
 8008560:	4909      	ldr	r1, [pc, #36]	@ (8008588 <UARTEx_SetNbDataToProcess+0x94>)
 8008562:	5c8a      	ldrb	r2, [r1, r2]
 8008564:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008568:	7b7a      	ldrb	r2, [r7, #13]
 800856a:	4908      	ldr	r1, [pc, #32]	@ (800858c <UARTEx_SetNbDataToProcess+0x98>)
 800856c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800856e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008572:	b29a      	uxth	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	08008628 	.word	0x08008628
 800858c:	08008630 	.word	0x08008630

08008590 <memset>:
 8008590:	4402      	add	r2, r0
 8008592:	4603      	mov	r3, r0
 8008594:	4293      	cmp	r3, r2
 8008596:	d100      	bne.n	800859a <memset+0xa>
 8008598:	4770      	bx	lr
 800859a:	f803 1b01 	strb.w	r1, [r3], #1
 800859e:	e7f9      	b.n	8008594 <memset+0x4>

080085a0 <__libc_init_array>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	4d0d      	ldr	r5, [pc, #52]	@ (80085d8 <__libc_init_array+0x38>)
 80085a4:	4c0d      	ldr	r4, [pc, #52]	@ (80085dc <__libc_init_array+0x3c>)
 80085a6:	1b64      	subs	r4, r4, r5
 80085a8:	10a4      	asrs	r4, r4, #2
 80085aa:	2600      	movs	r6, #0
 80085ac:	42a6      	cmp	r6, r4
 80085ae:	d109      	bne.n	80085c4 <__libc_init_array+0x24>
 80085b0:	4d0b      	ldr	r5, [pc, #44]	@ (80085e0 <__libc_init_array+0x40>)
 80085b2:	4c0c      	ldr	r4, [pc, #48]	@ (80085e4 <__libc_init_array+0x44>)
 80085b4:	f000 f818 	bl	80085e8 <_init>
 80085b8:	1b64      	subs	r4, r4, r5
 80085ba:	10a4      	asrs	r4, r4, #2
 80085bc:	2600      	movs	r6, #0
 80085be:	42a6      	cmp	r6, r4
 80085c0:	d105      	bne.n	80085ce <__libc_init_array+0x2e>
 80085c2:	bd70      	pop	{r4, r5, r6, pc}
 80085c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c8:	4798      	blx	r3
 80085ca:	3601      	adds	r6, #1
 80085cc:	e7ee      	b.n	80085ac <__libc_init_array+0xc>
 80085ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d2:	4798      	blx	r3
 80085d4:	3601      	adds	r6, #1
 80085d6:	e7f2      	b.n	80085be <__libc_init_array+0x1e>
 80085d8:	08008640 	.word	0x08008640
 80085dc:	08008640 	.word	0x08008640
 80085e0:	08008640 	.word	0x08008640
 80085e4:	08008644 	.word	0x08008644

080085e8 <_init>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr

080085f4 <_fini>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr
