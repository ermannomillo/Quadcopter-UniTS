
Quadcopter_UniTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e74  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800a128  0800a128  0000b128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1d0  0800a1d0  0000b1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1d8  0800a1d8  0000b1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a1dc  0800a1dc  0000b1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a1e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004ac  24000064  0800a244  0000c064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000510  0800a244  0000c510  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019c0f  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002eca  00000000  00000000  00025ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001408  00000000  00000000  00028b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fbe  00000000  00000000  00029f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003d47  00000000  00000000  0002af36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b634  00000000  00000000  0002ec7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140657  00000000  00000000  0004a2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0018a908  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005770  00000000  00000000  0018a94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001900bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a10c 	.word	0x0800a10c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	0800a10c 	.word	0x0800a10c

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <filter_compute_gravity_angles>:
#include "math.h"
#include "main.h"

extern float dt;

void filter_compute_gravity_angles(float gx, float gy, float gz, int euler[3]) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	ed2d 8b02 	vpush	{d8}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80005ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80005f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80005f6:	6038      	str	r0, [r7, #0]
    float roll  = atan2(gy, gz);
 80005f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80005fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000600:	edd7 6a01 	vldr	s13, [r7, #4]
 8000604:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000608:	eeb0 1b46 	vmov.f64	d1, d6
 800060c:	eeb0 0b47 	vmov.f64	d0, d7
 8000610:	f009 fb8e 	bl	8009d30 <atan2>
 8000614:	eeb0 7b40 	vmov.f64	d7, d0
 8000618:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800061c:	edc7 7a05 	vstr	s15, [r7, #20]
    float pitch = atan2(-gx, sqrt(gy * gy + gz * gz));
 8000620:	edd7 7a03 	vldr	s15, [r7, #12]
 8000624:	eef1 7a67 	vneg.f32	s15, s15
 8000628:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800062c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000630:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000634:	edd7 7a01 	vldr	s15, [r7, #4]
 8000638:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800063c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000640:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000644:	eeb0 0b47 	vmov.f64	d0, d7
 8000648:	f009 fb76 	bl	8009d38 <sqrt>
 800064c:	eeb0 7b40 	vmov.f64	d7, d0
 8000650:	eeb0 1b47 	vmov.f64	d1, d7
 8000654:	eeb0 0b48 	vmov.f64	d0, d8
 8000658:	f009 fb6a 	bl	8009d30 <atan2>
 800065c:	eeb0 7b40 	vmov.f64	d7, d0
 8000660:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000664:	edc7 7a04 	vstr	s15, [r7, #16]

    euler[0] = (int)(roll * RAD_TO_MDEG);
 8000668:	edd7 7a05 	vldr	s15, [r7, #20]
 800066c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80006a8 <filter_compute_gravity_angles+0xc8>
 8000670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000678:	ee17 2a90 	vmov	r2, s15
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	601a      	str	r2, [r3, #0]
    euler[1] = (int)(pitch * RAD_TO_MDEG);
 8000680:	edd7 7a04 	vldr	s15, [r7, #16]
 8000684:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80006a8 <filter_compute_gravity_angles+0xc8>
 8000688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	3304      	adds	r3, #4
 8000690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000694:	ee17 2a90 	vmov	r2, s15
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	ecbd 8b02 	vpop	{d8}
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	475fcfcd 	.word	0x475fcfcd

080006ac <filter_integrate_gyro>:

void filter_integrate_gyro(int gyro[3], int gyro_delta[3], int euler_est[3], int* prev_tick_ms) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
    int now = HAL_GetTick();
 80006ba:	f002 f8a7 	bl	800280c <HAL_GetTick>
 80006be:	4603      	mov	r3, r0
 80006c0:	61bb      	str	r3, [r7, #24]
    dt = (now - *prev_tick_ms) / 1000.0f;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	69ba      	ldr	r2, [r7, #24]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	ee07 3a90 	vmov	s15, r3
 80006ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006d2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800077c <filter_integrate_gyro+0xd0>
 80006d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <filter_integrate_gyro+0xd4>)
 80006dc:	edc3 7a00 	vstr	s15, [r3]
    *prev_tick_ms = now;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	69ba      	ldr	r2, [r7, #24]
 80006e4:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 3; i++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
 80006ea:	e03e      	b.n	800076a <filter_integrate_gyro+0xbe>
    	float gyro_scaled = gyro[i] * SCALING;
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	ee07 3a90 	vmov	s15, r3
 80006fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006fe:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000784 <filter_integrate_gyro+0xd8>
 8000702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000706:	edc7 7a05 	vstr	s15, [r7, #20]
    	float gyro_delta_scaled = gyro_delta[i] * SCALING;
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	4413      	add	r3, r2
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	ee07 3a90 	vmov	s15, r3
 8000718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000784 <filter_integrate_gyro+0xd8>
 8000720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000724:	edc7 7a04 	vstr	s15, [r7, #16]
    	euler_est[i] += (int)((gyro_scaled + gyro_delta_scaled / 2.0f) * dt);
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	4413      	add	r3, r2
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	edd7 7a04 	vldr	s15, [r7, #16]
 8000736:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800073a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800073e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000742:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <filter_integrate_gyro+0xd4>)
 8000748:	edd3 7a00 	vldr	s15, [r3]
 800074c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000754:	ee17 0a90 	vmov	r0, s15
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	440b      	add	r3, r1
 8000760:	4402      	add	r2, r0
 8000762:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	3301      	adds	r3, #1
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	2b02      	cmp	r3, #2
 800076e:	ddbd      	ble.n	80006ec <filter_integrate_gyro+0x40>
    }
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3720      	adds	r7, #32
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	447a0000 	.word	0x447a0000
 8000780:	2400036c 	.word	0x2400036c
 8000784:	40f42400 	.word	0x40f42400

08000788 <filter_fuse_angles>:

void filter_fuse_angles(int acc_euler[3], int euler_est[3], float alpha) {
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i = 0; i < 2; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e02b      	b.n	80007f4 <filter_fuse_angles+0x6c>
        euler_est[i] = (int)(alpha * acc_euler[i] + (1.0f - alpha) * euler_est[i]);
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	ee07 3a90 	vmov	s15, r3
 80007aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80007b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80007ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80007be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	4413      	add	r3, r2
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	ee07 3a90 	vmov	s15, r3
 80007d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80007d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	68ba      	ldr	r2, [r7, #8]
 80007e2:	4413      	add	r3, r2
 80007e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007e8:	ee17 2a90 	vmov	r2, s15
 80007ec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 2; i++) {
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	ddd0      	ble.n	800079c <filter_fuse_angles+0x14>
    }
}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	371c      	adds	r7, #28
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <imu_init>:

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart3;

void imu_init()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af02      	add	r7, sp, #8
    unsigned char data[2];
    data[0]=0x6b;
 800080e:	236b      	movs	r3, #107	@ 0x6b
 8000810:	713b      	strb	r3, [r7, #4]
    data[1]=0;
 8000812:	2300      	movs	r3, #0
 8000814:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&hi2c1, IMU_ADDR_8, data, 2, 1000);
 8000816:	1d3a      	adds	r2, r7, #4
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2302      	movs	r3, #2
 8000820:	21d0      	movs	r1, #208	@ 0xd0
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <imu_init+0x30>)
 8000824:	f002 fb98 	bl	8002f58 <HAL_I2C_Master_Transmit>
    HAL_Delay(300);
 8000828:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800082c:	f001 fffa 	bl	8002824 <HAL_Delay>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000080 	.word	0x24000080

0800083c <imu_read_word>:

short int imu_read_word(uint8_t reg_addr) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af02      	add	r7, sp, #8
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	unsigned char data[2];
    HAL_I2C_Master_Transmit(&hi2c1, IMU_ADDR_8, &reg_addr, 1, 1000);
 8000846:	1dfa      	adds	r2, r7, #7
 8000848:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2301      	movs	r3, #1
 8000850:	21d0      	movs	r1, #208	@ 0xd0
 8000852:	480c      	ldr	r0, [pc, #48]	@ (8000884 <imu_read_word+0x48>)
 8000854:	f002 fb80 	bl	8002f58 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, IMU_ADDR_8, data, 2, 1000);
 8000858:	f107 020c 	add.w	r2, r7, #12
 800085c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2302      	movs	r3, #2
 8000864:	21d0      	movs	r1, #208	@ 0xd0
 8000866:	4807      	ldr	r0, [pc, #28]	@ (8000884 <imu_read_word+0x48>)
 8000868:	f002 fc8e 	bl	8003188 <HAL_I2C_Master_Receive>
    return (short int)(data[0] << 8) | data[1];
 800086c:	7b3b      	ldrb	r3, [r7, #12]
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	b21a      	sxth	r2, r3
 8000872:	7b7b      	ldrb	r3, [r7, #13]
 8000874:	b21b      	sxth	r3, r3
 8000876:	4313      	orrs	r3, r2
 8000878:	b21b      	sxth	r3, r3
}
 800087a:	4618      	mov	r0, r3
 800087c:	3710      	adds	r7, #16
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	24000080 	.word	0x24000080

08000888 <imu_read_all>:

void imu_read_all(short int data[7]) {
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
    int reg = IMU_REG;
 8000890:	233b      	movs	r3, #59	@ 0x3b
 8000892:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 7; i++) {
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	e010      	b.n	80008bc <imu_read_all+0x34>
        data[i] = imu_read_word(reg);
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	b2d9      	uxtb	r1, r3
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	18d4      	adds	r4, r2, r3
 80008a6:	4608      	mov	r0, r1
 80008a8:	f7ff ffc8 	bl	800083c <imu_read_word>
 80008ac:	4603      	mov	r3, r0
 80008ae:	8023      	strh	r3, [r4, #0]
        reg += 2;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	3302      	adds	r3, #2
 80008b4:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 7; i++) {
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b06      	cmp	r3, #6
 80008c0:	ddeb      	ble.n	800089a <imu_read_all+0x12>
    }
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3714      	adds	r7, #20
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd90      	pop	{r4, r7, pc}

080008cc <imu_calibrate>:

void imu_calibrate(int euler_offset[2], int gyro_offset[3]) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b090      	sub	sp, #64	@ 0x40
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
    long int euler_sum[2] = {0};
 80008d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
    long int gyro_sum[3] = {0};
 80008e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
    short int data[7];
    int euler[3];

    for (int i = 0; i < 100; i++) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80008f0:	e045      	b.n	800097e <imu_calibrate+0xb2>
        imu_read_all(data);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ffc6 	bl	8000888 <imu_read_all>
        filter_compute_gravity_angles(data[0], data[1], data[2], euler);
 80008fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000908:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800090c:	ee07 3a10 	vmov	s14, r3
 8000910:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000914:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000918:	ee06 3a90 	vmov	s13, r3
 800091c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	4618      	mov	r0, r3
 8000926:	eeb0 1a66 	vmov.f32	s2, s13
 800092a:	eef0 0a47 	vmov.f32	s1, s14
 800092e:	eeb0 0a67 	vmov.f32	s0, s15
 8000932:	f7ff fe55 	bl	80005e0 <filter_compute_gravity_angles>

        if (euler[0] > 0) euler[0] -= 360000;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	2b00      	cmp	r3, #0
 800093a:	dd03      	ble.n	8000944 <imu_calibrate+0x78>
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	4b2a      	ldr	r3, [pc, #168]	@ (80009e8 <imu_calibrate+0x11c>)
 8000940:	4413      	add	r3, r2
 8000942:	60bb      	str	r3, [r7, #8]

        euler_sum[0] += euler[0];
 8000944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	4413      	add	r3, r2
 800094a:	633b      	str	r3, [r7, #48]	@ 0x30
        euler_sum[1] += euler[1];
 800094c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4413      	add	r3, r2
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34

        gyro_sum[0] += data[4];
 8000954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000956:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800095a:	4413      	add	r3, r2
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
        gyro_sum[1] += data[5];
 800095e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000960:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000964:	4413      	add	r3, r2
 8000966:	62bb      	str	r3, [r7, #40]	@ 0x28
        gyro_sum[2] += data[6];
 8000968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800096e:	4413      	add	r3, r2
 8000970:	62fb      	str	r3, [r7, #44]	@ 0x2c

        HAL_Delay(10);
 8000972:	200a      	movs	r0, #10
 8000974:	f001 ff56 	bl	8002824 <HAL_Delay>
    for (int i = 0; i < 100; i++) {
 8000978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800097a:	3301      	adds	r3, #1
 800097c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800097e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000980:	2b63      	cmp	r3, #99	@ 0x63
 8000982:	ddb6      	ble.n	80008f2 <imu_calibrate+0x26>
    }

    euler_offset[0] = euler_sum[0] / 100;
 8000984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000986:	4a19      	ldr	r2, [pc, #100]	@ (80009ec <imu_calibrate+0x120>)
 8000988:	fb82 1203 	smull	r1, r2, r2, r3
 800098c:	1152      	asrs	r2, r2, #5
 800098e:	17db      	asrs	r3, r3, #31
 8000990:	1ad2      	subs	r2, r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	601a      	str	r2, [r3, #0]
    euler_offset[1] = euler_sum[1] / 100;
 8000996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	3204      	adds	r2, #4
 800099c:	4913      	ldr	r1, [pc, #76]	@ (80009ec <imu_calibrate+0x120>)
 800099e:	fb81 0103 	smull	r0, r1, r1, r3
 80009a2:	1149      	asrs	r1, r1, #5
 80009a4:	17db      	asrs	r3, r3, #31
 80009a6:	1acb      	subs	r3, r1, r3
 80009a8:	6013      	str	r3, [r2, #0]

    for (int i = 0; i < 3; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009ae:	e013      	b.n	80009d8 <imu_calibrate+0x10c>
        gyro_offset[i] = gyro_sum[i] / 100;
 80009b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	3340      	adds	r3, #64	@ 0x40
 80009b6:	443b      	add	r3, r7
 80009b8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80009bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80009be:	0092      	lsls	r2, r2, #2
 80009c0:	6839      	ldr	r1, [r7, #0]
 80009c2:	440a      	add	r2, r1
 80009c4:	4909      	ldr	r1, [pc, #36]	@ (80009ec <imu_calibrate+0x120>)
 80009c6:	fb81 0103 	smull	r0, r1, r1, r3
 80009ca:	1149      	asrs	r1, r1, #5
 80009cc:	17db      	asrs	r3, r3, #31
 80009ce:	1acb      	subs	r3, r1, r3
 80009d0:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 3; i++) {
 80009d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009d4:	3301      	adds	r3, #1
 80009d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009da:	2b02      	cmp	r3, #2
 80009dc:	dde8      	ble.n	80009b0 <imu_calibrate+0xe4>
    }

}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3740      	adds	r7, #64	@ 0x40
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	fffa81c0 	.word	0xfffa81c0
 80009ec:	51eb851f 	.word	0x51eb851f

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	rc_ref_euler.pitch =  0;
 80009f6:	4ba3      	ldr	r3, [pc, #652]	@ (8000c84 <main+0x294>)
 80009f8:	f04f 0200 	mov.w	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
	rc_ref_euler.roll =  0;
 80009fe:	4ba1      	ldr	r3, [pc, #644]	@ (8000c84 <main+0x294>)
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
	rc_ref_euler.yaw =  0;
 8000a06:	4b9f      	ldr	r3, [pc, #636]	@ (8000c84 <main+0x294>)
 8000a08:	f04f 0200 	mov.w	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]

	imu_est_euler.pitch =  0;
 8000a0e:	4b9e      	ldr	r3, [pc, #632]	@ (8000c88 <main+0x298>)
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
	imu_est_euler.roll =  0;
 8000a16:	4b9c      	ldr	r3, [pc, #624]	@ (8000c88 <main+0x298>)
 8000a18:	f04f 0200 	mov.w	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	imu_est_euler.yaw =  0;
 8000a1e:	4b9a      	ldr	r3, [pc, #616]	@ (8000c88 <main+0x298>)
 8000a20:	f04f 0200 	mov.w	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]

	rc_comm_temp.AIL = 0;
 8000a26:	4b99      	ldr	r3, [pc, #612]	@ (8000c8c <main+0x29c>)
 8000a28:	f04f 0200 	mov.w	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
	rc_comm_temp.ELE = 0;
 8000a2e:	4b97      	ldr	r3, [pc, #604]	@ (8000c8c <main+0x29c>)
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
	rc_comm_temp.RUD = 0;
 8000a36:	4b95      	ldr	r3, [pc, #596]	@ (8000c8c <main+0x29c>)
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
	rc_comm_temp.THR = 0;
 8000a3e:	4b93      	ldr	r3, [pc, #588]	@ (8000c8c <main+0x29c>)
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < 3; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	e037      	b.n	8000abc <main+0xcc>
		euler_est[i] = 0;
 8000a4c:	4a90      	ldr	r2, [pc, #576]	@ (8000c90 <main+0x2a0>)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2100      	movs	r1, #0
 8000a52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		control_error.p_error[i] = 0;
 8000a56:	4a8f      	ldr	r2, [pc, #572]	@ (8000c94 <main+0x2a4>)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	f04f 0200 	mov.w	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
		control_error.i_error[i] = 0;
 8000a64:	4a8b      	ldr	r2, [pc, #556]	@ (8000c94 <main+0x2a4>)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3302      	adds	r3, #2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	3304      	adds	r3, #4
 8000a70:	f04f 0200 	mov.w	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
		control_error.d_error[i] = 0;
 8000a76:	4a87      	ldr	r2, [pc, #540]	@ (8000c94 <main+0x2a4>)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3306      	adds	r3, #6
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	4413      	add	r3, r2
 8000a80:	f04f 0200 	mov.w	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
		former_error.p_error[i] = 0;
 8000a86:	4a84      	ldr	r2, [pc, #528]	@ (8000c98 <main+0x2a8>)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
		former_error.i_error[i] = 0;
 8000a94:	4a80      	ldr	r2, [pc, #512]	@ (8000c98 <main+0x2a8>)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3302      	adds	r3, #2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
		former_error.d_error[i] = 0;
 8000aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8000c98 <main+0x2a8>)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3306      	adds	r3, #6
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	4413      	add	r3, r2
 8000ab0:	f04f 0200 	mov.w	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	ddc4      	ble.n	8000a4c <main+0x5c>
	}

	motor_throttle = 0;
 8000ac2:	4b76      	ldr	r3, [pc, #472]	@ (8000c9c <main+0x2ac>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	801a      	strh	r2, [r3, #0]
	dt = 1;
 8000ac8:	4b75      	ldr	r3, [pc, #468]	@ (8000ca0 <main+0x2b0>)
 8000aca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000ace:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad0:	f001 fe16 	bl	8002700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad4:	f000 f970 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f000 fdce 	bl	8001678 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000adc:	f000 fd78 	bl	80015d0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000ae0:	f000 fdc2 	bl	8001668 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000ae4:	f000 fa20 	bl	8000f28 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ae8:	f000 faf0 	bl	80010cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000aec:	f000 fb8e 	bl	800120c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000af0:	f000 fc2c 	bl	800134c <MX_TIM5_Init>
  MX_TIM15_Init();
 8000af4:	f000 fcca 	bl	800148c <MX_TIM15_Init>
  MX_I2C1_Init();
 8000af8:	f000 f9d6 	bl	8000ea8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000afc:	2100      	movs	r1, #0
 8000afe:	4869      	ldr	r0, [pc, #420]	@ (8000ca4 <main+0x2b4>)
 8000b00:	f005 fe26 	bl	8006750 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b04:	2104      	movs	r1, #4
 8000b06:	4867      	ldr	r0, [pc, #412]	@ (8000ca4 <main+0x2b4>)
 8000b08:	f005 fe22 	bl	8006750 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000b0c:	2108      	movs	r1, #8
 8000b0e:	4865      	ldr	r0, [pc, #404]	@ (8000ca4 <main+0x2b4>)
 8000b10:	f005 fe1e 	bl	8006750 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000b14:	210c      	movs	r1, #12
 8000b16:	4863      	ldr	r0, [pc, #396]	@ (8000ca4 <main+0x2b4>)
 8000b18:	f005 fe1a 	bl	8006750 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4862      	ldr	r0, [pc, #392]	@ (8000ca8 <main+0x2b8>)
 8000b20:	f005 ff86 	bl	8006a30 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000b24:	2100      	movs	r1, #0
 8000b26:	4860      	ldr	r0, [pc, #384]	@ (8000ca8 <main+0x2b8>)
 8000b28:	f006 f8f8 	bl	8006d1c <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	485f      	ldr	r0, [pc, #380]	@ (8000cac <main+0x2bc>)
 8000b30:	f005 ff7e 	bl	8006a30 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000b34:	2100      	movs	r1, #0
 8000b36:	485d      	ldr	r0, [pc, #372]	@ (8000cac <main+0x2bc>)
 8000b38:	f006 f8f0 	bl	8006d1c <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	485c      	ldr	r0, [pc, #368]	@ (8000cb0 <main+0x2c0>)
 8000b40:	f005 ff76 	bl	8006a30 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000b44:	2100      	movs	r1, #0
 8000b46:	485a      	ldr	r0, [pc, #360]	@ (8000cb0 <main+0x2c0>)
 8000b48:	f006 f8e8 	bl	8006d1c <HAL_TIM_IC_Start_IT>

  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4859      	ldr	r0, [pc, #356]	@ (8000cb4 <main+0x2c4>)
 8000b50:	f005 ff6e 	bl	8006a30 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000b54:	2100      	movs	r1, #0
 8000b56:	4857      	ldr	r0, [pc, #348]	@ (8000cb4 <main+0x2c4>)
 8000b58:	f006 f8e0 	bl	8006d1c <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);  // 1ms if period is 2000 ticks
 8000b5c:	4b51      	ldr	r3, [pc, #324]	@ (8000ca4 <main+0x2b4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2264      	movs	r2, #100	@ 0x64
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8000b64:	4b4f      	ldr	r3, [pc, #316]	@ (8000ca4 <main+0x2b4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2264      	movs	r2, #100	@ 0x64
 8000b6a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 100);
 8000b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca4 <main+0x2b4>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2264      	movs	r2, #100	@ 0x64
 8000b72:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100);
 8000b74:	4b4b      	ldr	r3, [pc, #300]	@ (8000ca4 <main+0x2b4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2264      	movs	r2, #100	@ 0x64
 8000b7a:	641a      	str	r2, [r3, #64]	@ 0x40

     HAL_Delay(3000);  // Wait for ESC to initialize
 8000b7c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000b80:	f001 fe50 	bl	8002824 <HAL_Delay>

     // Optional: set mid-throttle (1.5 ms pulse width)
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 150);  // 1.5ms
 8000b84:	4b47      	ldr	r3, [pc, #284]	@ (8000ca4 <main+0x2b4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2296      	movs	r2, #150	@ 0x96
 8000b8a:	635a      	str	r2, [r3, #52]	@ 0x34
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 150);
 8000b8c:	4b45      	ldr	r3, [pc, #276]	@ (8000ca4 <main+0x2b4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2296      	movs	r2, #150	@ 0x96
 8000b92:	639a      	str	r2, [r3, #56]	@ 0x38
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 150);
 8000b94:	4b43      	ldr	r3, [pc, #268]	@ (8000ca4 <main+0x2b4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2296      	movs	r2, #150	@ 0x96
 8000b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
     __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 150);
 8000b9c:	4b41      	ldr	r3, [pc, #260]	@ (8000ca4 <main+0x2b4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2296      	movs	r2, #150	@ 0x96
 8000ba2:	641a      	str	r2, [r3, #64]	@ 0x40


  set_motor_pwm_zero(motor_pwm);
 8000ba4:	4844      	ldr	r0, [pc, #272]	@ (8000cb8 <main+0x2c8>)
 8000ba6:	f001 f8dd 	bl	8001d64 <set_motor_pwm_zero>
  set_motor_pwm(motor_pwm);
 8000baa:	4843      	ldr	r0, [pc, #268]	@ (8000cb8 <main+0x2c8>)
 8000bac:	f001 f868 	bl	8001c80 <set_motor_pwm>


  imu_init();
 8000bb0:	f7ff fe2a 	bl	8000808 <imu_init>
  orientation_init();
 8000bb4:	f001 f8f0 	bl	8001d98 <orientation_init>

    /* USER CODE BEGIN 3 */


	  	  // Reactivate Radio interrupts
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000bb8:	2104      	movs	r1, #4
 8000bba:	483b      	ldr	r0, [pc, #236]	@ (8000ca8 <main+0x2b8>)
 8000bbc:	f005 ff38 	bl	8006a30 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4839      	ldr	r0, [pc, #228]	@ (8000ca8 <main+0x2b8>)
 8000bc4:	f006 f8aa 	bl	8006d1c <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8000bc8:	2104      	movs	r1, #4
 8000bca:	4838      	ldr	r0, [pc, #224]	@ (8000cac <main+0x2bc>)
 8000bcc:	f005 ff30 	bl	8006a30 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4836      	ldr	r0, [pc, #216]	@ (8000cac <main+0x2bc>)
 8000bd4:	f006 f8a2 	bl	8006d1c <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4835      	ldr	r0, [pc, #212]	@ (8000cb0 <main+0x2c0>)
 8000bdc:	f005 ff28 	bl	8006a30 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000be0:	2100      	movs	r1, #0
 8000be2:	4833      	ldr	r0, [pc, #204]	@ (8000cb0 <main+0x2c0>)
 8000be4:	f006 f89a 	bl	8006d1c <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8000be8:	2104      	movs	r1, #4
 8000bea:	4832      	ldr	r0, [pc, #200]	@ (8000cb4 <main+0x2c4>)
 8000bec:	f005 ff20 	bl	8006a30 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4830      	ldr	r0, [pc, #192]	@ (8000cb4 <main+0x2c4>)
 8000bf4:	f006 f892 	bl	8006d1c <HAL_TIM_IC_Start_IT>

		  // Target euler angles: PID reference
		  get_target_euler(&rc_ref_euler, &rc_comm_temp);
 8000bf8:	4924      	ldr	r1, [pc, #144]	@ (8000c8c <main+0x29c>)
 8000bfa:	4822      	ldr	r0, [pc, #136]	@ (8000c84 <main+0x294>)
 8000bfc:	f001 f96a 	bl	8001ed4 <get_target_euler>
		  orientation_update(euler_est);
 8000c00:	4823      	ldr	r0, [pc, #140]	@ (8000c90 <main+0x2a0>)
 8000c02:	f001 f8dd 	bl	8001dc0 <orientation_update>

		  imu_est_euler.roll  = euler_est[0];
 8000c06:	4b22      	ldr	r3, [pc, #136]	@ (8000c90 <main+0x2a0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	ee07 3a90 	vmov	s15, r3
 8000c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c12:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <main+0x298>)
 8000c14:	edc3 7a01 	vstr	s15, [r3, #4]
		  imu_est_euler.pitch = euler_est[1];
 8000c18:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <main+0x2a0>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <main+0x298>)
 8000c26:	edc3 7a00 	vstr	s15, [r3]
		  imu_est_euler.yaw   = euler_est[2];
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <main+0x2a0>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <main+0x298>)
 8000c38:	edc3 7a02 	vstr	s15, [r3, #8]

		  control_error.p_error[0] = rc_ref_euler.roll - imu_est_euler.roll;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <main+0x294>)
 8000c3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <main+0x298>)
 8000c44:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <main+0x2a4>)
 8000c4e:	edc3 7a00 	vstr	s15, [r3]
		  control_error.p_error[1] = rc_ref_euler.pitch - imu_est_euler.pitch;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <main+0x294>)
 8000c54:	ed93 7a00 	vldr	s14, [r3]
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <main+0x298>)
 8000c5a:	edd3 7a00 	vldr	s15, [r3]
 8000c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <main+0x2a4>)
 8000c64:	edc3 7a01 	vstr	s15, [r3, #4]
		  control_error.p_error[2] = rc_ref_euler.yaw - imu_est_euler.yaw;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <main+0x294>)
 8000c6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <main+0x298>)
 8000c70:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <main+0x2a4>)
 8000c7a:	edc3 7a02 	vstr	s15, [r3, #8]

		  for (int i = 0; i < 3; i++) {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	e050      	b.n	8000d26 <main+0x336>
 8000c84:	240002f4 	.word	0x240002f4
 8000c88:	24000300 	.word	0x24000300
 8000c8c:	240002e4 	.word	0x240002e4
 8000c90:	2400035c 	.word	0x2400035c
 8000c94:	24000314 	.word	0x24000314
 8000c98:	24000338 	.word	0x24000338
 8000c9c:	24000368 	.word	0x24000368
 8000ca0:	2400036c 	.word	0x2400036c
 8000ca4:	240000d4 	.word	0x240000d4
 8000ca8:	24000120 	.word	0x24000120
 8000cac:	2400016c 	.word	0x2400016c
 8000cb0:	240001b8 	.word	0x240001b8
 8000cb4:	24000204 	.word	0x24000204
 8000cb8:	2400030c 	.word	0x2400030c
		  			  control_error.d_error[i] = control_error.p_error[i] - former_error.p_error[i];
 8000cbc:	4a37      	ldr	r2, [pc, #220]	@ (8000d9c <main+0x3ac>)
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	ed93 7a00 	vldr	s14, [r3]
 8000cc8:	4a35      	ldr	r2, [pc, #212]	@ (8000da0 <main+0x3b0>)
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	edd3 7a00 	vldr	s15, [r3]
 8000cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd8:	4a30      	ldr	r2, [pc, #192]	@ (8000d9c <main+0x3ac>)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3306      	adds	r3, #6
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	edc3 7a00 	vstr	s15, [r3]
		  			  control_error.i_error[i] += control_error.p_error[i] * dt;
 8000ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8000d9c <main+0x3ac>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	3302      	adds	r3, #2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	ed93 7a00 	vldr	s14, [r3]
 8000cf6:	4a29      	ldr	r2, [pc, #164]	@ (8000d9c <main+0x3ac>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	edd3 6a00 	vldr	s13, [r3]
 8000d02:	4b28      	ldr	r3, [pc, #160]	@ (8000da4 <main+0x3b4>)
 8000d04:	edd3 7a00 	vldr	s15, [r3]
 8000d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d10:	4a22      	ldr	r2, [pc, #136]	@ (8000d9c <main+0x3ac>)
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	3302      	adds	r3, #2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	edc3 7a00 	vstr	s15, [r3]
		  for (int i = 0; i < 3; i++) {
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	ddc7      	ble.n	8000cbc <main+0x2cc>
		  		  }
		  // Update former errors
		  		  for (int i = 0; i < 3; i++) {
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	e01a      	b.n	8000d68 <main+0x378>
		  			  former_error.p_error[i] = control_error.p_error[i];
 8000d32:	4a1a      	ldr	r2, [pc, #104]	@ (8000d9c <main+0x3ac>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4918      	ldr	r1, [pc, #96]	@ (8000da0 <main+0x3b0>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	440b      	add	r3, r1
 8000d44:	601a      	str	r2, [r3, #0]
		  		      former_error.i_error[i] = control_error.i_error[i];
 8000d46:	4a15      	ldr	r2, [pc, #84]	@ (8000d9c <main+0x3ac>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	3304      	adds	r3, #4
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4912      	ldr	r1, [pc, #72]	@ (8000da0 <main+0x3b0>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3302      	adds	r3, #2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	3304      	adds	r3, #4
 8000d60:	601a      	str	r2, [r3, #0]
		  		  for (int i = 0; i < 3; i++) {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3301      	adds	r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	dde1      	ble.n	8000d32 <main+0x342>
		  		  }

		  motor_throttle = 0.80f *rc_comm_temp.THR + MOTOR_MIN_PWM;  // Scaled throttle
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <main+0x3b8>)
 8000d70:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d74:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000dac <main+0x3bc>
 8000d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d7c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000db0 <main+0x3c0>
 8000d80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d88:	ee17 3a90 	vmov	r3, s15
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <main+0x3c4>)
 8000d90:	801a      	strh	r2, [r3, #0]


		  HAL_Delay(100);
 8000d92:	2064      	movs	r0, #100	@ 0x64
 8000d94:	f001 fd46 	bl	8002824 <HAL_Delay>
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000d98:	e70e      	b.n	8000bb8 <main+0x1c8>
 8000d9a:	bf00      	nop
 8000d9c:	24000314 	.word	0x24000314
 8000da0:	24000338 	.word	0x24000338
 8000da4:	2400036c 	.word	0x2400036c
 8000da8:	240002e4 	.word	0x240002e4
 8000dac:	3f4ccccd 	.word	0x3f4ccccd
 8000db0:	42d20000 	.word	0x42d20000
 8000db4:	24000368 	.word	0x24000368

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b09c      	sub	sp, #112	@ 0x70
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc2:	224c      	movs	r2, #76	@ 0x4c
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 ff80 	bl	8009ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2220      	movs	r2, #32
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f008 ff7a 	bl	8009ccc <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000dd8:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <SystemClock_Config+0xe8>)
 8000dda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dde:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000de2:	2004      	movs	r0, #4
 8000de4:	f002 fe04 	bl	80039f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000de8:	2300      	movs	r3, #0
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <SystemClock_Config+0xec>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a2c      	ldr	r2, [pc, #176]	@ (8000ea4 <SystemClock_Config+0xec>)
 8000df2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <SystemClock_Config+0xec>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e04:	bf00      	nop
 8000e06:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <SystemClock_Config+0xec>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e12:	d1f8      	bne.n	8000e06 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e14:	2321      	movs	r3, #33	@ 0x21
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	2302      	movs	r3, #2
 8000e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000e2e:	2325      	movs	r3, #37	@ 0x25
 8000e30:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e36:	2304      	movs	r3, #4
 8000e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e3e:	230c      	movs	r3, #12
 8000e40:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000e46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 fe27 	bl	8003aa4 <HAL_RCC_OscConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000e5c:	f000 ff0a 	bl	8001c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e60:	233f      	movs	r3, #63	@ 0x3f
 8000e62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e64:	2303      	movs	r3, #3
 8000e66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e70:	2340      	movs	r3, #64	@ 0x40
 8000e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e74:	2340      	movs	r3, #64	@ 0x40
 8000e76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e7c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e7e:	2340      	movs	r3, #64	@ 0x40
 8000e80:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2103      	movs	r1, #3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fa3e 	bl	8004308 <HAL_RCC_ClockConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000e92:	f000 feef 	bl	8001c74 <Error_Handler>
  }
}
 8000e96:	bf00      	nop
 8000e98:	3770      	adds	r7, #112	@ 0x70
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58024800 	.word	0x58024800

08000ea8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eac:	4b1b      	ldr	r3, [pc, #108]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000eae:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <MX_I2C1_Init+0x78>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702787;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f24 <MX_I2C1_Init+0x7c>)
 8000eb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ee2:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000ee4:	f001 ff9c 	bl	8002e20 <HAL_I2C_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eee:	f000 fec1 	bl	8001c74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4809      	ldr	r0, [pc, #36]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000ef6:	f002 fce3 	bl	80038c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f00:	f000 feb8 	bl	8001c74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f04:	2100      	movs	r1, #0
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_I2C1_Init+0x74>)
 8000f08:	f002 fd25 	bl	8003956 <HAL_I2CEx_ConfigDigitalFilter>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f12:	f000 feaf 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000080 	.word	0x24000080
 8000f20:	40005400 	.word	0x40005400
 8000f24:	00702787 	.word	0x00702787

08000f28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b09c      	sub	sp, #112	@ 0x70
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]
 8000f5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2234      	movs	r2, #52	@ 0x34
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f008 feb2 	bl	8009ccc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f68:	4b56      	ldr	r3, [pc, #344]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000f6a:	4a57      	ldr	r2, [pc, #348]	@ (80010c8 <MX_TIM1_Init+0x1a0>)
 8000f6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1499;
 8000f6e:	4b55      	ldr	r3, [pc, #340]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000f70:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000f74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b53      	ldr	r3, [pc, #332]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000f7c:	4b51      	ldr	r3, [pc, #324]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000f7e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000f82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f84:	4b4f      	ldr	r3, [pc, #316]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f8a:	4b4e      	ldr	r3, [pc, #312]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b4c      	ldr	r3, [pc, #304]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f96:	484b      	ldr	r0, [pc, #300]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000f98:	f005 fb22 	bl	80065e0 <HAL_TIM_Base_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000fa2:	f000 fe67 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000faa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fac:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4844      	ldr	r0, [pc, #272]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000fb4:	f006 fb78 	bl	80076a8 <HAL_TIM_ConfigClockSource>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000fbe:	f000 fe59 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fc2:	4840      	ldr	r0, [pc, #256]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000fc4:	f005 fb63 	bl	800668e <HAL_TIM_PWM_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000fce:	f000 fe51 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4837      	ldr	r0, [pc, #220]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8000fe6:	f007 fb59 	bl	800869c <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000ff0:	f000 fe40 	bl	8001c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff4:	2360      	movs	r3, #96	@ 0x60
 8000ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001000:	2300      	movs	r3, #0
 8001002:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	482a      	ldr	r0, [pc, #168]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 800101a:	f006 fa31 	bl	8007480 <HAL_TIM_PWM_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001024:	f000 fe26 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001028:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800102c:	2204      	movs	r2, #4
 800102e:	4619      	mov	r1, r3
 8001030:	4824      	ldr	r0, [pc, #144]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8001032:	f006 fa25 	bl	8007480 <HAL_TIM_PWM_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800103c:	f000 fe1a 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001040:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001044:	2208      	movs	r2, #8
 8001046:	4619      	mov	r1, r3
 8001048:	481e      	ldr	r0, [pc, #120]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 800104a:	f006 fa19 	bl	8007480 <HAL_TIM_PWM_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001054:	f000 fe0e 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001058:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800105c:	220c      	movs	r2, #12
 800105e:	4619      	mov	r1, r3
 8001060:	4818      	ldr	r0, [pc, #96]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 8001062:	f006 fa0d 	bl	8007480 <HAL_TIM_PWM_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800106c:	f000 fe02 	bl	8001c74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001084:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001088:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001092:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 80010a6:	f007 fb87 	bl	80087b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80010b0:	f000 fde0 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <MX_TIM1_Init+0x19c>)
 80010b6:	f001 f983 	bl	80023c0 <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3770      	adds	r7, #112	@ 0x70
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	240000d4 	.word	0x240000d4
 80010c8:	40010000 	.word	0x40010000

080010cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b090      	sub	sp, #64	@ 0x40
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001108:	4b3e      	ldr	r3, [pc, #248]	@ (8001204 <MX_TIM3_Init+0x138>)
 800110a:	4a3f      	ldr	r2, [pc, #252]	@ (8001208 <MX_TIM3_Init+0x13c>)
 800110c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 800110e:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <MX_TIM3_Init+0x138>)
 8001110:	f240 227f 	movw	r2, #639	@ 0x27f
 8001114:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b3b      	ldr	r3, [pc, #236]	@ (8001204 <MX_TIM3_Init+0x138>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800111c:	4b39      	ldr	r3, [pc, #228]	@ (8001204 <MX_TIM3_Init+0x138>)
 800111e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001122:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001124:	4b37      	ldr	r3, [pc, #220]	@ (8001204 <MX_TIM3_Init+0x138>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112a:	4b36      	ldr	r3, [pc, #216]	@ (8001204 <MX_TIM3_Init+0x138>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001130:	4834      	ldr	r0, [pc, #208]	@ (8001204 <MX_TIM3_Init+0x138>)
 8001132:	f005 fa55 	bl	80065e0 <HAL_TIM_Base_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800113c:	f000 fd9a 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001144:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001146:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800114a:	4619      	mov	r1, r3
 800114c:	482d      	ldr	r0, [pc, #180]	@ (8001204 <MX_TIM3_Init+0x138>)
 800114e:	f006 faab 	bl	80076a8 <HAL_TIM_ConfigClockSource>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001158:	f000 fd8c 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800115c:	4829      	ldr	r0, [pc, #164]	@ (8001204 <MX_TIM3_Init+0x138>)
 800115e:	f005 fc05 	bl	800696c <HAL_TIM_IC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001168:	f000 fd84 	bl	8001c74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800116c:	2304      	movs	r3, #4
 800116e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001170:	2350      	movs	r3, #80	@ 0x50
 8001172:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	481f      	ldr	r0, [pc, #124]	@ (8001204 <MX_TIM3_Init+0x138>)
 8001188:	f006 fb86 	bl	8007898 <HAL_TIM_SlaveConfigSynchro>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001192:	f000 fd6f 	bl	8001c74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800119a:	2301      	movs	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4815      	ldr	r0, [pc, #84]	@ (8001204 <MX_TIM3_Init+0x138>)
 80011b0:	f006 f8c9 	bl	8007346 <HAL_TIM_IC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80011ba:	f000 fd5b 	bl	8001c74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011be:	2302      	movs	r3, #2
 80011c0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011c2:	2302      	movs	r3, #2
 80011c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2204      	movs	r2, #4
 80011cc:	4619      	mov	r1, r3
 80011ce:	480d      	ldr	r0, [pc, #52]	@ (8001204 <MX_TIM3_Init+0x138>)
 80011d0:	f006 f8b9 	bl	8007346 <HAL_TIM_IC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 80011da:	f000 fd4b 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_TIM3_Init+0x138>)
 80011ec:	f007 fa56 	bl	800869c <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 80011f6:	f000 fd3d 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3740      	adds	r7, #64	@ 0x40
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	24000120 	.word	0x24000120
 8001208:	40000400 	.word	0x40000400

0800120c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b090      	sub	sp, #64	@ 0x40
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001248:	4b3e      	ldr	r3, [pc, #248]	@ (8001344 <MX_TIM4_Init+0x138>)
 800124a:	4a3f      	ldr	r2, [pc, #252]	@ (8001348 <MX_TIM4_Init+0x13c>)
 800124c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 800124e:	4b3d      	ldr	r3, [pc, #244]	@ (8001344 <MX_TIM4_Init+0x138>)
 8001250:	f240 227f 	movw	r2, #639	@ 0x27f
 8001254:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b3b      	ldr	r3, [pc, #236]	@ (8001344 <MX_TIM4_Init+0x138>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800125c:	4b39      	ldr	r3, [pc, #228]	@ (8001344 <MX_TIM4_Init+0x138>)
 800125e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001262:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b37      	ldr	r3, [pc, #220]	@ (8001344 <MX_TIM4_Init+0x138>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b36      	ldr	r3, [pc, #216]	@ (8001344 <MX_TIM4_Init+0x138>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001270:	4834      	ldr	r0, [pc, #208]	@ (8001344 <MX_TIM4_Init+0x138>)
 8001272:	f005 f9b5 	bl	80065e0 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 800127c:	f000 fcfa 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001284:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001286:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800128a:	4619      	mov	r1, r3
 800128c:	482d      	ldr	r0, [pc, #180]	@ (8001344 <MX_TIM4_Init+0x138>)
 800128e:	f006 fa0b 	bl	80076a8 <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001298:	f000 fcec 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800129c:	4829      	ldr	r0, [pc, #164]	@ (8001344 <MX_TIM4_Init+0x138>)
 800129e:	f005 fb65 	bl	800696c <HAL_TIM_IC_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80012a8:	f000 fce4 	bl	8001c74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80012ac:	2304      	movs	r3, #4
 80012ae:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80012b0:	2350      	movs	r3, #80	@ 0x50
 80012b2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	481f      	ldr	r0, [pc, #124]	@ (8001344 <MX_TIM4_Init+0x138>)
 80012c8:	f006 fae6 	bl	8007898 <HAL_TIM_SlaveConfigSynchro>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80012d2:	f000 fccf 	bl	8001c74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012da:	2301      	movs	r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	4815      	ldr	r0, [pc, #84]	@ (8001344 <MX_TIM4_Init+0x138>)
 80012f0:	f006 f829 	bl	8007346 <HAL_TIM_IC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 80012fa:	f000 fcbb 	bl	8001c74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012fe:	2302      	movs	r3, #2
 8001300:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001302:	2302      	movs	r3, #2
 8001304:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2204      	movs	r2, #4
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	@ (8001344 <MX_TIM4_Init+0x138>)
 8001310:	f006 f819 	bl	8007346 <HAL_TIM_IC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 800131a:	f000 fcab 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131e:	2300      	movs	r3, #0
 8001320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <MX_TIM4_Init+0x138>)
 800132c:	f007 f9b6 	bl	800869c <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 8001336:	f000 fc9d 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3740      	adds	r7, #64	@ 0x40
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2400016c 	.word	0x2400016c
 8001348:	40000800 	.word	0x40000800

0800134c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b090      	sub	sp, #64	@ 0x40
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137e:	463b      	mov	r3, r7
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001388:	4b3e      	ldr	r3, [pc, #248]	@ (8001484 <MX_TIM5_Init+0x138>)
 800138a:	4a3f      	ldr	r2, [pc, #252]	@ (8001488 <MX_TIM5_Init+0x13c>)
 800138c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 639;
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <MX_TIM5_Init+0x138>)
 8001390:	f240 227f 	movw	r2, #639	@ 0x27f
 8001394:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b3b      	ldr	r3, [pc, #236]	@ (8001484 <MX_TIM5_Init+0x138>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800139c:	4b39      	ldr	r3, [pc, #228]	@ (8001484 <MX_TIM5_Init+0x138>)
 800139e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013a2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b37      	ldr	r3, [pc, #220]	@ (8001484 <MX_TIM5_Init+0x138>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013aa:	4b36      	ldr	r3, [pc, #216]	@ (8001484 <MX_TIM5_Init+0x138>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013b0:	4834      	ldr	r0, [pc, #208]	@ (8001484 <MX_TIM5_Init+0x138>)
 80013b2:	f005 f915 	bl	80065e0 <HAL_TIM_Base_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80013bc:	f000 fc5a 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013ca:	4619      	mov	r1, r3
 80013cc:	482d      	ldr	r0, [pc, #180]	@ (8001484 <MX_TIM5_Init+0x138>)
 80013ce:	f006 f96b 	bl	80076a8 <HAL_TIM_ConfigClockSource>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80013d8:	f000 fc4c 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80013dc:	4829      	ldr	r0, [pc, #164]	@ (8001484 <MX_TIM5_Init+0x138>)
 80013de:	f005 fac5 	bl	800696c <HAL_TIM_IC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 80013e8:	f000 fc44 	bl	8001c74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013ec:	2304      	movs	r3, #4
 80013ee:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013f0:	2350      	movs	r3, #80	@ 0x50
 80013f2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	481f      	ldr	r0, [pc, #124]	@ (8001484 <MX_TIM5_Init+0x138>)
 8001408:	f006 fa46 	bl	8007898 <HAL_TIM_SlaveConfigSynchro>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8001412:	f000 fc2f 	bl	8001c74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800141a:	2301      	movs	r3, #1
 800141c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2200      	movs	r2, #0
 800142c:	4619      	mov	r1, r3
 800142e:	4815      	ldr	r0, [pc, #84]	@ (8001484 <MX_TIM5_Init+0x138>)
 8001430:	f005 ff89 	bl	8007346 <HAL_TIM_IC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 800143a:	f000 fc1b 	bl	8001c74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800143e:	2302      	movs	r3, #2
 8001440:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001442:	2302      	movs	r3, #2
 8001444:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	2204      	movs	r2, #4
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	@ (8001484 <MX_TIM5_Init+0x138>)
 8001450:	f005 ff79 	bl	8007346 <HAL_TIM_IC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 800145a:	f000 fc0b 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	@ (8001484 <MX_TIM5_Init+0x138>)
 800146c:	f007 f916 	bl	800869c <HAL_TIMEx_MasterConfigSynchronization>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM5_Init+0x12e>
  {
    Error_Handler();
 8001476:	f000 fbfd 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3740      	adds	r7, #64	@ 0x40
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	240001b8 	.word	0x240001b8
 8001488:	40000c00 	.word	0x40000c00

0800148c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b090      	sub	sp, #64	@ 0x40
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014c8:	4b3f      	ldr	r3, [pc, #252]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 80014ca:	4a40      	ldr	r2, [pc, #256]	@ (80015cc <MX_TIM15_Init+0x140>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 80014ce:	4b3e      	ldr	r3, [pc, #248]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 80014d0:	f240 227f 	movw	r2, #639	@ 0x27f
 80014d4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b3c      	ldr	r3, [pc, #240]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80014dc:	4b3a      	ldr	r3, [pc, #232]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 80014de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b38      	ldr	r3, [pc, #224]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80014ea:	4b37      	ldr	r3, [pc, #220]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b35      	ldr	r3, [pc, #212]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80014f6:	4834      	ldr	r0, [pc, #208]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 80014f8:	f005 f872 	bl	80065e0 <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8001502:	f000 fbb7 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800150c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001510:	4619      	mov	r1, r3
 8001512:	482d      	ldr	r0, [pc, #180]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 8001514:	f006 f8c8 	bl	80076a8 <HAL_TIM_ConfigClockSource>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 800151e:	f000 fba9 	bl	8001c74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001522:	4829      	ldr	r0, [pc, #164]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 8001524:	f005 fa22 	bl	800696c <HAL_TIM_IC_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 800152e:	f000 fba1 	bl	8001c74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001532:	2304      	movs	r3, #4
 8001534:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001536:	2350      	movs	r3, #80	@ 0x50
 8001538:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	481e      	ldr	r0, [pc, #120]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 800154e:	f006 f9a3 	bl	8007898 <HAL_TIM_SlaveConfigSynchro>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001558:	f000 fb8c 	bl	8001c74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001560:	2301      	movs	r3, #1
 8001562:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2200      	movs	r2, #0
 8001572:	4619      	mov	r1, r3
 8001574:	4814      	ldr	r0, [pc, #80]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 8001576:	f005 fee6 	bl	8007346 <HAL_TIM_IC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001580:	f000 fb78 	bl	8001c74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001584:	2302      	movs	r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001588:	2302      	movs	r3, #2
 800158a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2204      	movs	r2, #4
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 8001596:	f005 fed6 	bl	8007346 <HAL_TIM_IC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 80015a0:	f000 fb68 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_TIM15_Init+0x13c>)
 80015b2:	f007 f873 	bl	800869c <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 80015bc:	f000 fb5a 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3740      	adds	r7, #64	@ 0x40
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	24000204 	.word	0x24000204
 80015cc:	40014000 	.word	0x40014000

080015d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015d4:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 80015d6:	4a23      	ldr	r2, [pc, #140]	@ (8001664 <MX_USART3_UART_Init+0x94>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001606:	4b16      	ldr	r3, [pc, #88]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800160c:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001618:	4811      	ldr	r0, [pc, #68]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 800161a:	f007 f977 	bl	800890c <HAL_UART_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001624:	f000 fb26 	bl	8001c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	480d      	ldr	r0, [pc, #52]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 800162c:	f008 fa83 	bl	8009b36 <HAL_UARTEx_SetTxFifoThreshold>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001636:	f000 fb1d 	bl	8001c74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163a:	2100      	movs	r1, #0
 800163c:	4808      	ldr	r0, [pc, #32]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 800163e:	f008 fab8 	bl	8009bb2 <HAL_UARTEx_SetRxFifoThreshold>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001648:	f000 fb14 	bl	8001c74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	@ (8001660 <MX_USART3_UART_Init+0x90>)
 800164e:	f008 fa39 	bl	8009ac4 <HAL_UARTEx_DisableFifoMode>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001658:	f000 fb0c 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	24000250 	.word	0x24000250
 8001664:	40004800 	.word	0x40004800

08001668 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	@ 0x38
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800168e:	4b80      	ldr	r3, [pc, #512]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001690:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001694:	4a7e      	ldr	r2, [pc, #504]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800169e:	4b7c      	ldr	r3, [pc, #496]	@ (8001890 <MX_GPIO_Init+0x218>)
 80016a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	4b78      	ldr	r3, [pc, #480]	@ (8001890 <MX_GPIO_Init+0x218>)
 80016ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016b2:	4a77      	ldr	r2, [pc, #476]	@ (8001890 <MX_GPIO_Init+0x218>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016bc:	4b74      	ldr	r3, [pc, #464]	@ (8001890 <MX_GPIO_Init+0x218>)
 80016be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ca:	4b71      	ldr	r3, [pc, #452]	@ (8001890 <MX_GPIO_Init+0x218>)
 80016cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016d0:	4a6f      	ldr	r2, [pc, #444]	@ (8001890 <MX_GPIO_Init+0x218>)
 80016d2:	f043 0320 	orr.w	r3, r3, #32
 80016d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016da:	4b6d      	ldr	r3, [pc, #436]	@ (8001890 <MX_GPIO_Init+0x218>)
 80016dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e8:	4b69      	ldr	r3, [pc, #420]	@ (8001890 <MX_GPIO_Init+0x218>)
 80016ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016ee:	4a68      	ldr	r2, [pc, #416]	@ (8001890 <MX_GPIO_Init+0x218>)
 80016f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016f4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80016f8:	4b65      	ldr	r3, [pc, #404]	@ (8001890 <MX_GPIO_Init+0x218>)
 80016fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80016fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b62      	ldr	r3, [pc, #392]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001708:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800170c:	4a60      	ldr	r2, [pc, #384]	@ (8001890 <MX_GPIO_Init+0x218>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001716:	4b5e      	ldr	r3, [pc, #376]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001718:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	4b5a      	ldr	r3, [pc, #360]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001726:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800172a:	4a59      	ldr	r2, [pc, #356]	@ (8001890 <MX_GPIO_Init+0x218>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001734:	4b56      	ldr	r3, [pc, #344]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001736:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001742:	4b53      	ldr	r3, [pc, #332]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001744:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001748:	4a51      	ldr	r2, [pc, #324]	@ (8001890 <MX_GPIO_Init+0x218>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001752:	4b4f      	ldr	r3, [pc, #316]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001754:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001760:	4b4b      	ldr	r3, [pc, #300]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001762:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001766:	4a4a      	ldr	r2, [pc, #296]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001768:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800176c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001770:	4b47      	ldr	r3, [pc, #284]	@ (8001890 <MX_GPIO_Init+0x218>)
 8001772:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001784:	4843      	ldr	r0, [pc, #268]	@ (8001894 <MX_GPIO_Init+0x21c>)
 8001786:	f001 fb31 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001790:	4841      	ldr	r0, [pc, #260]	@ (8001898 <MX_GPIO_Init+0x220>)
 8001792:	f001 fb2b 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2102      	movs	r1, #2
 800179a:	4840      	ldr	r0, [pc, #256]	@ (800189c <MX_GPIO_Init+0x224>)
 800179c:	f001 fb26 	bl	8002dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	483a      	ldr	r0, [pc, #232]	@ (80018a0 <MX_GPIO_Init+0x228>)
 80017b6:	f001 f969 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80017ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	4830      	ldr	r0, [pc, #192]	@ (8001894 <MX_GPIO_Init+0x21c>)
 80017d4:	f001 f95a 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80017d8:	f244 0301 	movw	r3, #16385	@ 0x4001
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	4829      	ldr	r0, [pc, #164]	@ (8001898 <MX_GPIO_Init+0x220>)
 80017f2:	f001 f94b 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4826      	ldr	r0, [pc, #152]	@ (80018a4 <MX_GPIO_Init+0x22c>)
 800180c:	f001 f93e 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001810:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	4820      	ldr	r0, [pc, #128]	@ (80018a8 <MX_GPIO_Init+0x230>)
 8001826:	f001 f931 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800182a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800183c:	230a      	movs	r3, #10
 800183e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	4818      	ldr	r0, [pc, #96]	@ (80018a8 <MX_GPIO_Init+0x230>)
 8001848:	f001 f920 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800184c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001862:	4619      	mov	r1, r3
 8001864:	4810      	ldr	r0, [pc, #64]	@ (80018a8 <MX_GPIO_Init+0x230>)
 8001866:	f001 f911 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800186a:	2302      	movs	r3, #2
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187e:	4619      	mov	r1, r3
 8001880:	4806      	ldr	r0, [pc, #24]	@ (800189c <MX_GPIO_Init+0x224>)
 8001882:	f001 f903 	bl	8002a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001886:	bf00      	nop
 8001888:	3738      	adds	r7, #56	@ 0x38
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	58024400 	.word	0x58024400
 8001894:	58021400 	.word	0x58021400
 8001898:	58020400 	.word	0x58020400
 800189c:	58021000 	.word	0x58021000
 80018a0:	58020800 	.word	0x58020800
 80018a4:	58021800 	.word	0x58021800
 80018a8:	58020000 	.word	0x58020000
 80018ac:	00000000 	.word	0x00000000

080018b0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4ab8      	ldr	r2, [pc, #736]	@ (8001ba0 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d161      	bne.n	8001986 <HAL_TIM_IC_CaptureCallback+0xd6>
    {

        cycle_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80018c2:	2100      	movs	r1, #0
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f006 f829 	bl	800791c <HAL_TIM_ReadCapturedValue>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4ab5      	ldr	r2, [pc, #724]	@ (8001ba4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80018ce:	6013      	str	r3, [r2, #0]
        period_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80018d0:	2104      	movs	r1, #4
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f006 f822 	bl	800791c <HAL_TIM_ReadCapturedValue>
 80018d8:	4602      	mov	r2, r0
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	461a      	mov	r2, r3
 80018e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ba8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 80018e6:	601a      	str	r2, [r3, #0]
    	if (cycle_rc_0 > 4300 && cycle_rc_0 < 4380 && period_rc_0 > 0 && cycle_rc_0 > period_rc_0 ) {
 80018e8:	4bae      	ldr	r3, [pc, #696]	@ (8001ba4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d948      	bls.n	8001986 <HAL_TIM_IC_CaptureCallback+0xd6>
 80018f4:	4bab      	ldr	r3, [pc, #684]	@ (8001ba4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f241 121b 	movw	r2, #4379	@ 0x111b
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d842      	bhi.n	8001986 <HAL_TIM_IC_CaptureCallback+0xd6>
 8001900:	4ba9      	ldr	r3, [pc, #676]	@ (8001ba8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d03e      	beq.n	8001986 <HAL_TIM_IC_CaptureCallback+0xd6>
 8001908:	4ba6      	ldr	r3, [pc, #664]	@ (8001ba4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4ba6      	ldr	r3, [pc, #664]	@ (8001ba8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d938      	bls.n	8001986 <HAL_TIM_IC_CaptureCallback+0xd6>
    		channel_mag_0 = ((float) period_rc_0 / (float) cycle_rc_0 - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 8001914:	4ba4      	ldr	r3, [pc, #656]	@ (8001ba8 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001920:	4ba0      	ldr	r3, [pc, #640]	@ (8001ba4 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800192c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001930:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001934:	ed9f 6b94 	vldr	d6, [pc, #592]	@ 8001b88 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001938:	ee37 6b46 	vsub.f64	d6, d7, d6
 800193c:	ed9f 5b94 	vldr	d5, [pc, #592]	@ 8001b90 <HAL_TIM_IC_CaptureCallback+0x2e0>
 8001940:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001944:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001948:	4b98      	ldr	r3, [pc, #608]	@ (8001bac <HAL_TIM_IC_CaptureCallback+0x2fc>)
 800194a:	edc3 7a00 	vstr	s15, [r3]
    		rc_comm_temp.AIL = (channel_mag_0 - 0.5) * 2 * RC_FULLSCALE;
 800194e:	4b97      	ldr	r3, [pc, #604]	@ (8001bac <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001958:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800195c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001960:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001964:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 8001b98 <HAL_TIM_IC_CaptureCallback+0x2e8>
 8001968:	ee27 7b06 	vmul.f64	d7, d7, d6
 800196c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001970:	4b8f      	ldr	r3, [pc, #572]	@ (8001bb0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001972:	edc3 7a00 	vstr	s15, [r3]
    		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001976:	2100      	movs	r1, #0
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f005 fb1f 	bl	8006fbc <HAL_TIM_IC_Stop_IT>
    		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 800197e:	2104      	movs	r1, #4
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f005 f959 	bl	8006c38 <HAL_TIM_IC_Stop>

    	}
    }

    if (htim->Instance == TIM4)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a8a      	ldr	r2, [pc, #552]	@ (8001bb4 <HAL_TIM_IC_CaptureCallback+0x304>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d161      	bne.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x1a4>
    {

            cycle_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001990:	2100      	movs	r1, #0
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f005 ffc2 	bl	800791c <HAL_TIM_ReadCapturedValue>
 8001998:	4603      	mov	r3, r0
 800199a:	4a87      	ldr	r2, [pc, #540]	@ (8001bb8 <HAL_TIM_IC_CaptureCallback+0x308>)
 800199c:	6013      	str	r3, [r2, #0]
            period_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 800199e:	2104      	movs	r1, #4
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f005 ffbb 	bl	800791c <HAL_TIM_ReadCapturedValue>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b82      	ldr	r3, [pc, #520]	@ (8001bbc <HAL_TIM_IC_CaptureCallback+0x30c>)
 80019b4:	601a      	str	r2, [r3, #0]
        	if (cycle_rc_1 > 4300 && cycle_rc_1 < 4380 && period_rc_1 > 0 && cycle_rc_1 > period_rc_1) {
 80019b6:	4b80      	ldr	r3, [pc, #512]	@ (8001bb8 <HAL_TIM_IC_CaptureCallback+0x308>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 80019be:	4293      	cmp	r3, r2
 80019c0:	d948      	bls.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x1a4>
 80019c2:	4b7d      	ldr	r3, [pc, #500]	@ (8001bb8 <HAL_TIM_IC_CaptureCallback+0x308>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f241 121b 	movw	r2, #4379	@ 0x111b
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d842      	bhi.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x1a4>
 80019ce:	4b7b      	ldr	r3, [pc, #492]	@ (8001bbc <HAL_TIM_IC_CaptureCallback+0x30c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d03e      	beq.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x1a4>
 80019d6:	4b78      	ldr	r3, [pc, #480]	@ (8001bb8 <HAL_TIM_IC_CaptureCallback+0x308>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b78      	ldr	r3, [pc, #480]	@ (8001bbc <HAL_TIM_IC_CaptureCallback+0x30c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d938      	bls.n	8001a54 <HAL_TIM_IC_CaptureCallback+0x1a4>
        		channel_mag_1 = ((float) period_rc_1 / (float) cycle_rc_1  - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 80019e2:	4b76      	ldr	r3, [pc, #472]	@ (8001bbc <HAL_TIM_IC_CaptureCallback+0x30c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019ee:	4b72      	ldr	r3, [pc, #456]	@ (8001bb8 <HAL_TIM_IC_CaptureCallback+0x308>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a02:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8001b88 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001a06:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001a0a:	ed9f 5b61 	vldr	d5, [pc, #388]	@ 8001b90 <HAL_TIM_IC_CaptureCallback+0x2e0>
 8001a0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a16:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc0 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001a18:	edc3 7a00 	vstr	s15, [r3]
        		rc_comm_temp.ELE = (channel_mag_1 - 0.5) * 2 * RC_FULLSCALE;
 8001a1c:	4b68      	ldr	r3, [pc, #416]	@ (8001bc0 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a26:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001a2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a32:	ed9f 6b59 	vldr	d6, [pc, #356]	@ 8001b98 <HAL_TIM_IC_CaptureCallback+0x2e8>
 8001a36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001a40:	edc3 7a01 	vstr	s15, [r3, #4]
        		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001a44:	2100      	movs	r1, #0
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f005 fab8 	bl	8006fbc <HAL_TIM_IC_Stop_IT>
        		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001a4c:	2104      	movs	r1, #4
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f005 f8f2 	bl	8006c38 <HAL_TIM_IC_Stop>

        	}
    }

    if (htim->Instance == TIM5)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a5a      	ldr	r2, [pc, #360]	@ (8001bc4 <HAL_TIM_IC_CaptureCallback+0x314>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d161      	bne.n	8001b22 <HAL_TIM_IC_CaptureCallback+0x272>
            {

                cycle_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f005 ff5b 	bl	800791c <HAL_TIM_ReadCapturedValue>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a57      	ldr	r2, [pc, #348]	@ (8001bc8 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001a6a:	6013      	str	r3, [r2, #0]
                period_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f005 ff54 	bl	800791c <HAL_TIM_ReadCapturedValue>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b52      	ldr	r3, [pc, #328]	@ (8001bcc <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001a82:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_2 > 4300 && cycle_rc_2 < 4380 && period_rc_2 > 0 && cycle_rc_2 > period_rc_2) {
 8001a84:	4b50      	ldr	r3, [pc, #320]	@ (8001bc8 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d948      	bls.n	8001b22 <HAL_TIM_IC_CaptureCallback+0x272>
 8001a90:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc8 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f241 121b 	movw	r2, #4379	@ 0x111b
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d842      	bhi.n	8001b22 <HAL_TIM_IC_CaptureCallback+0x272>
 8001a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001bcc <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d03e      	beq.n	8001b22 <HAL_TIM_IC_CaptureCallback+0x272>
 8001aa4:	4b48      	ldr	r3, [pc, #288]	@ (8001bc8 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b48      	ldr	r3, [pc, #288]	@ (8001bcc <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d938      	bls.n	8001b22 <HAL_TIM_IC_CaptureCallback+0x272>
            		channel_mag_2 = ((float) period_rc_2 / (float) cycle_rc_2  - MIN_DUTY) / (MAX_DUTY - MIN_DUTY);
 8001ab0:	4b46      	ldr	r3, [pc, #280]	@ (8001bcc <HAL_TIM_IC_CaptureCallback+0x31c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001abc:	4b42      	ldr	r3, [pc, #264]	@ (8001bc8 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ad0:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8001b88 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001ad4:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001ad8:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 8001b90 <HAL_TIM_IC_CaptureCallback+0x2e0>
 8001adc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ae0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd0 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001ae6:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp.RUD = (channel_mag_2 - 0.5) * 2 * RC_FULLSCALE;
 8001aea:	4b39      	ldr	r3, [pc, #228]	@ (8001bd0 <HAL_TIM_IC_CaptureCallback+0x320>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001af8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001afc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b00:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8001b98 <HAL_TIM_IC_CaptureCallback+0x2e8>
 8001b04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b08:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b0c:	4b28      	ldr	r3, [pc, #160]	@ (8001bb0 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001b0e:	edc3 7a03 	vstr	s15, [r3, #12]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001b12:	2100      	movs	r1, #0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f005 fa51 	bl	8006fbc <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f005 f88b 	bl	8006c38 <HAL_TIM_IC_Stop>

            	}
            }
    if (htim->Instance == TIM15)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a2b      	ldr	r2, [pc, #172]	@ (8001bd4 <HAL_TIM_IC_CaptureCallback+0x324>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	f040 808c 	bne.w	8001c46 <HAL_TIM_IC_CaptureCallback+0x396>
            {

                cycle_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f005 fef3 	bl	800791c <HAL_TIM_ReadCapturedValue>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a27      	ldr	r2, [pc, #156]	@ (8001bd8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001b3a:	6013      	str	r3, [r2, #0]
                period_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f005 feec 	bl	800791c <HAL_TIM_ReadCapturedValue>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001b52:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_3 > 4300 && cycle_rc_3 < 4380 && period_rc_3 > 0 && cycle_rc_3 > period_rc_3) {
 8001b54:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f241 02cc 	movw	r2, #4300	@ 0x10cc
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d972      	bls.n	8001c46 <HAL_TIM_IC_CaptureCallback+0x396>
 8001b60:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f241 121b 	movw	r2, #4379	@ 0x111b
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d86c      	bhi.n	8001c46 <HAL_TIM_IC_CaptureCallback+0x396>
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bdc <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d068      	beq.n	8001c46 <HAL_TIM_IC_CaptureCallback+0x396>
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_TIM_IC_CaptureCallback+0x328>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <HAL_TIM_IC_CaptureCallback+0x32c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d962      	bls.n	8001c46 <HAL_TIM_IC_CaptureCallback+0x396>
 8001b80:	e02e      	b.n	8001be0 <HAL_TIM_IC_CaptureCallback+0x330>
 8001b82:	bf00      	nop
 8001b84:	f3af 8000 	nop.w
 8001b88:	147ae148 	.word	0x147ae148
 8001b8c:	3fe147ae 	.word	0x3fe147ae
 8001b90:	ae147ae0 	.word	0xae147ae0
 8001b94:	3fdae147 	.word	0x3fdae147
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	408f4000 	.word	0x408f4000
 8001ba0:	40000400 	.word	0x40000400
 8001ba4:	24000370 	.word	0x24000370
 8001ba8:	24000380 	.word	0x24000380
 8001bac:	24000390 	.word	0x24000390
 8001bb0:	240002e4 	.word	0x240002e4
 8001bb4:	40000800 	.word	0x40000800
 8001bb8:	24000374 	.word	0x24000374
 8001bbc:	24000384 	.word	0x24000384
 8001bc0:	24000394 	.word	0x24000394
 8001bc4:	40000c00 	.word	0x40000c00
 8001bc8:	24000378 	.word	0x24000378
 8001bcc:	24000388 	.word	0x24000388
 8001bd0:	24000398 	.word	0x24000398
 8001bd4:	40014000 	.word	0x40014000
 8001bd8:	2400037c 	.word	0x2400037c
 8001bdc:	2400038c 	.word	0x2400038c
            		channel_mag_3 = ((float) period_rc_3 / (float) cycle_rc_3  - MIN_DUTY) / (MAX_DUTY - MIN_DUTY) - 0.125;
 8001be0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bec:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <HAL_TIM_IC_CaptureCallback+0x3b4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c00:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8001c50 <HAL_TIM_IC_CaptureCallback+0x3a0>
 8001c04:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001c08:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 8001c58 <HAL_TIM_IC_CaptureCallback+0x3a8>
 8001c0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c10:	eeb4 6b00 	vmov.f64	d6, #64	@ 0x3e000000  0.125
 8001c14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <HAL_TIM_IC_CaptureCallback+0x3b8>)
 8001c1e:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp.THR =  channel_mag_3 * RC_FULLSCALE;
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <HAL_TIM_IC_CaptureCallback+0x3b8>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001c6c <HAL_TIM_IC_CaptureCallback+0x3bc>
 8001c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c30:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001c32:	edc3 7a02 	vstr	s15, [r3, #8]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001c36:	2100      	movs	r1, #0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f005 f9bf 	bl	8006fbc <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001c3e:	2104      	movs	r1, #4
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f004 fff9 	bl	8006c38 <HAL_TIM_IC_Stop>

            	}
            }


}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	147ae148 	.word	0x147ae148
 8001c54:	3fe147ae 	.word	0x3fe147ae
 8001c58:	ae147ae0 	.word	0xae147ae0
 8001c5c:	3fdae147 	.word	0x3fdae147
 8001c60:	2400038c 	.word	0x2400038c
 8001c64:	2400037c 	.word	0x2400037c
 8001c68:	2400039c 	.word	0x2400039c
 8001c6c:	447a0000 	.word	0x447a0000
 8001c70:	240002e4 	.word	0x240002e4

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
}
 8001c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <Error_Handler+0x8>

08001c80 <set_motor_pwm>:


extern TIM_HandleTypeDef htim1;

void set_motor_pwm(uint16_t motor_pwm[])
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if (motor_pwm[0] >= MOTOR_MAX_PWM)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	2bdc      	cmp	r3, #220	@ 0xdc
 8001c8e:	d904      	bls.n	8001c9a <set_motor_pwm+0x1a>
	  htim1.Instance->CCR1 = MOTOR_MAX_PWM;
 8001c90:	4b33      	ldr	r3, [pc, #204]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	22dd      	movs	r2, #221	@ 0xdd
 8001c96:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c98:	e00d      	b.n	8001cb6 <set_motor_pwm+0x36>
  else if (motor_pwm[0] <= MOTOR_MIN_PWM)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	2b69      	cmp	r3, #105	@ 0x69
 8001ca0:	d804      	bhi.n	8001cac <set_motor_pwm+0x2c>
	  htim1.Instance->CCR1 = MOTOR_MIN_PWM;
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2269      	movs	r2, #105	@ 0x69
 8001ca8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001caa:	e004      	b.n	8001cb6 <set_motor_pwm+0x36>
  else
	  htim1.Instance->CCR1 = motor_pwm[0] ;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	881a      	ldrh	r2, [r3, #0]
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	635a      	str	r2, [r3, #52]	@ 0x34
  
  if (motor_pwm[1] >= MOTOR_MAX_PWM)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	2bdc      	cmp	r3, #220	@ 0xdc
 8001cbe:	d904      	bls.n	8001cca <set_motor_pwm+0x4a>
	  htim1.Instance->CCR2 = MOTOR_MAX_PWM;
 8001cc0:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	22dd      	movs	r2, #221	@ 0xdd
 8001cc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cc8:	e00f      	b.n	8001cea <set_motor_pwm+0x6a>
  else if (motor_pwm[1] <= MOTOR_MIN_PWM)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3302      	adds	r3, #2
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	2b69      	cmp	r3, #105	@ 0x69
 8001cd2:	d804      	bhi.n	8001cde <set_motor_pwm+0x5e>
	  htim1.Instance->CCR2 = MOTOR_MIN_PWM;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2269      	movs	r2, #105	@ 0x69
 8001cda:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cdc:	e005      	b.n	8001cea <set_motor_pwm+0x6a>
  else
	  htim1.Instance->CCR2 =  motor_pwm[1] ;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	881a      	ldrh	r2, [r3, #0]
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  if (motor_pwm[2] >= MOTOR_MAX_PWM)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3304      	adds	r3, #4
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	2bdc      	cmp	r3, #220	@ 0xdc
 8001cf2:	d904      	bls.n	8001cfe <set_motor_pwm+0x7e>
	  htim1.Instance->CCR3 = MOTOR_MAX_PWM;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	22dd      	movs	r2, #221	@ 0xdd
 8001cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cfc:	e00f      	b.n	8001d1e <set_motor_pwm+0x9e>
  else if (motor_pwm[2] <= MOTOR_MIN_PWM)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3304      	adds	r3, #4
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	2b69      	cmp	r3, #105	@ 0x69
 8001d06:	d804      	bhi.n	8001d12 <set_motor_pwm+0x92>
	  htim1.Instance->CCR3 = MOTOR_MIN_PWM;
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2269      	movs	r2, #105	@ 0x69
 8001d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d10:	e005      	b.n	8001d1e <set_motor_pwm+0x9e>
  else
	  htim1.Instance->CCR3 =  motor_pwm[2] ;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3304      	adds	r3, #4
 8001d16:	881a      	ldrh	r2, [r3, #0]
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  if (motor_pwm[3] >= MOTOR_MAX_PWM)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3306      	adds	r3, #6
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	2bdc      	cmp	r3, #220	@ 0xdc
 8001d26:	d904      	bls.n	8001d32 <set_motor_pwm+0xb2>
	  htim1.Instance->CCR4 = MOTOR_MAX_PWM;
 8001d28:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	22dd      	movs	r2, #221	@ 0xdd
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM)
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM;
  else
	  htim1.Instance->CCR4 = motor_pwm[3] ;
}
 8001d30:	e00f      	b.n	8001d52 <set_motor_pwm+0xd2>
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3306      	adds	r3, #6
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	2b69      	cmp	r3, #105	@ 0x69
 8001d3a:	d804      	bhi.n	8001d46 <set_motor_pwm+0xc6>
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2269      	movs	r2, #105	@ 0x69
 8001d42:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001d44:	e005      	b.n	8001d52 <set_motor_pwm+0xd2>
	  htim1.Instance->CCR4 = motor_pwm[3] ;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3306      	adds	r3, #6
 8001d4a:	881a      	ldrh	r2, [r3, #0]
 8001d4c:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <set_motor_pwm+0xe0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	240000d4 	.word	0x240000d4

08001d64 <set_motor_pwm_zero>:


void set_motor_pwm_zero(uint16_t motor_pwm[])
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  motor_pwm[0] = 0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
  motor_pwm[1] = 0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3302      	adds	r3, #2
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
  motor_pwm[2] = 0;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	801a      	strh	r2, [r3, #0]
  motor_pwm[3] = 0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3306      	adds	r3, #6
 8001d86:	2200      	movs	r2, #0
 8001d88:	801a      	strh	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <orientation_init>:
static int gyro_data[3];
static int gyro_delta[3];
static int prev_tick_ms = 0;
static float alpha = 1.0;

void orientation_init(void) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
    imu_calibrate(euler_offset, gyro_offset);
 8001d9c:	4905      	ldr	r1, [pc, #20]	@ (8001db4 <orientation_init+0x1c>)
 8001d9e:	4806      	ldr	r0, [pc, #24]	@ (8001db8 <orientation_init+0x20>)
 8001da0:	f7fe fd94 	bl	80008cc <imu_calibrate>
    prev_tick_ms = HAL_GetTick();
 8001da4:	f000 fd32 	bl	800280c <HAL_GetTick>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <orientation_init+0x24>)
 8001dae:	601a      	str	r2, [r3, #0]
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	240003a8 	.word	0x240003a8
 8001db8:	240003a0 	.word	0x240003a0
 8001dbc:	240003cc 	.word	0x240003cc

08001dc0 <orientation_update>:

void orientation_update(int euler_est[3]){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	short int imu_raw[7];
    int acc_euler[3];

    imu_read_all(imu_raw);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fd5b 	bl	8000888 <imu_read_all>
    filter_compute_gravity_angles(imu_raw[0], imu_raw[1], imu_raw[2], acc_euler);
 8001dd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001de2:	ee07 3a10 	vmov	s14, r3
 8001de6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001dee:	ee06 3a90 	vmov	s13, r3
 8001df2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	eeb0 1a66 	vmov.f32	s2, s13
 8001e00:	eef0 0a47 	vmov.f32	s1, s14
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	f7fe fbea 	bl	80005e0 <filter_compute_gravity_angles>

    if (acc_euler[0] > 0) acc_euler[0] -= 360000;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	dd03      	ble.n	8001e1a <orientation_update+0x5a>
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	4b28      	ldr	r3, [pc, #160]	@ (8001eb8 <orientation_update+0xf8>)
 8001e16:	4413      	add	r3, r2
 8001e18:	60bb      	str	r3, [r7, #8]

    acc_euler[0] -= euler_offset[0];
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <orientation_update+0xfc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	60bb      	str	r3, [r7, #8]
    acc_euler[1] -= euler_offset[1];
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4b25      	ldr	r3, [pc, #148]	@ (8001ebc <orientation_update+0xfc>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < 3; i++) {
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e32:	e029      	b.n	8001e88 <orientation_update+0xc8>
        gyro_delta[i] = imu_raw[4 + i] - gyro_offset[i] - gyro_data[i];
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	3304      	adds	r3, #4
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	3328      	adds	r3, #40	@ 0x28
 8001e3c:	443b      	add	r3, r7
 8001e3e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec0 <orientation_update+0x100>)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4c:	1aca      	subs	r2, r1, r3
 8001e4e:	491d      	ldr	r1, [pc, #116]	@ (8001ec4 <orientation_update+0x104>)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e56:	1ad2      	subs	r2, r2, r3
 8001e58:	491b      	ldr	r1, [pc, #108]	@ (8001ec8 <orientation_update+0x108>)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        gyro_data[i]  = imu_raw[4 + i] - gyro_offset[i];
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	3304      	adds	r3, #4
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	3328      	adds	r3, #40	@ 0x28
 8001e68:	443b      	add	r3, r7
 8001e6a:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4a13      	ldr	r2, [pc, #76]	@ (8001ec0 <orientation_update+0x100>)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e78:	1aca      	subs	r2, r1, r3
 8001e7a:	4912      	ldr	r1, [pc, #72]	@ (8001ec4 <orientation_update+0x104>)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	3301      	adds	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	ddd2      	ble.n	8001e34 <orientation_update+0x74>
    }

    filter_integrate_gyro(gyro_data, gyro_delta, euler_est, &prev_tick_ms);
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <orientation_update+0x10c>)
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	490d      	ldr	r1, [pc, #52]	@ (8001ec8 <orientation_update+0x108>)
 8001e94:	480b      	ldr	r0, [pc, #44]	@ (8001ec4 <orientation_update+0x104>)
 8001e96:	f7fe fc09 	bl	80006ac <filter_integrate_gyro>
    filter_fuse_angles(acc_euler, euler_est, alpha);
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <orientation_update+0x110>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fc6c 	bl	8000788 <filter_fuse_angles>
}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	@ 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	fffa81c0 	.word	0xfffa81c0
 8001ebc:	240003a0 	.word	0x240003a0
 8001ec0:	240003a8 	.word	0x240003a8
 8001ec4:	240003b4 	.word	0x240003b4
 8001ec8:	240003c0 	.word	0x240003c0
 8001ecc:	240003cc 	.word	0x240003cc
 8001ed0:	24000000 	.word	0x24000000

08001ed4 <get_target_euler>:
const float max_yaw_rad = PI*YAW_MAX_DEG/180.0f;
int t1;


void get_target_euler(Euler *euler_rc, Radio *rc_comm)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
    t1 = rc_comm->ELE;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee8:	ee17 2a90 	vmov	r2, s15
 8001eec:	4b59      	ldr	r3, [pc, #356]	@ (8002054 <get_target_euler+0x180>)
 8001eee:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8001ef0:	4b58      	ldr	r3, [pc, #352]	@ (8002054 <get_target_euler+0x180>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ef8:	dd04      	ble.n	8001f04 <get_target_euler+0x30>
        t1 = RC_FULLSCALE;
 8001efa:	4b56      	ldr	r3, [pc, #344]	@ (8002054 <get_target_euler+0x180>)
 8001efc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e007      	b.n	8001f14 <get_target_euler+0x40>
    else if (t1 < -RC_FULLSCALE)
 8001f04:	4b53      	ldr	r3, [pc, #332]	@ (8002054 <get_target_euler+0x180>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001f0c:	da02      	bge.n	8001f14 <get_target_euler+0x40>
        t1 = - RC_FULLSCALE;
 8001f0e:	4b51      	ldr	r3, [pc, #324]	@ (8002054 <get_target_euler+0x180>)
 8001f10:	4a51      	ldr	r2, [pc, #324]	@ (8002058 <get_target_euler+0x184>)
 8001f12:	601a      	str	r2, [r3, #0]
    euler_rc->pitch =  (int)( (-t1 * max_pitch_rad / RC_FULLSCALE) * RAD_TO_MDEG);
 8001f14:	4b4f      	ldr	r3, [pc, #316]	@ (8002054 <get_target_euler+0x180>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	425b      	negs	r3, r3
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f22:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800205c <get_target_euler+0x188>
 8001f26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f2a:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002060 <get_target_euler+0x18c>
 8001f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f32:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002064 <get_target_euler+0x190>
 8001f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm->AIL;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f52:	ee17 2a90 	vmov	r2, s15
 8001f56:	4b3f      	ldr	r3, [pc, #252]	@ (8002054 <get_target_euler+0x180>)
 8001f58:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002054 <get_target_euler+0x180>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f62:	dd04      	ble.n	8001f6e <get_target_euler+0x9a>
        t1 = RC_FULLSCALE;
 8001f64:	4b3b      	ldr	r3, [pc, #236]	@ (8002054 <get_target_euler+0x180>)
 8001f66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e007      	b.n	8001f7e <get_target_euler+0xaa>
    else if (t1 < -RC_FULLSCALE)
 8001f6e:	4b39      	ldr	r3, [pc, #228]	@ (8002054 <get_target_euler+0x180>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001f76:	da02      	bge.n	8001f7e <get_target_euler+0xaa>
        t1 = - RC_FULLSCALE;
 8001f78:	4b36      	ldr	r3, [pc, #216]	@ (8002054 <get_target_euler+0x180>)
 8001f7a:	4a37      	ldr	r2, [pc, #220]	@ (8002058 <get_target_euler+0x184>)
 8001f7c:	601a      	str	r2, [r3, #0]
    euler_rc->roll =  (int)((-t1 * max_roll_rad / RC_FULLSCALE) * RAD_TO_MDEG);
 8001f7e:	4b35      	ldr	r3, [pc, #212]	@ (8002054 <get_target_euler+0x180>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	425b      	negs	r3, r3
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800205c <get_target_euler+0x188>
 8001f90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f94:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002060 <get_target_euler+0x18c>
 8001f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002064 <get_target_euler+0x190>
 8001fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	edc3 7a01 	vstr	s15, [r3, #4]

    t1 = rc_comm->RUD;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fbc:	ee17 2a90 	vmov	r2, s15
 8001fc0:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <get_target_euler+0x180>)
 8001fc2:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8001fc4:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <get_target_euler+0x180>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fcc:	dd04      	ble.n	8001fd8 <get_target_euler+0x104>
        t1 = RC_FULLSCALE;
 8001fce:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <get_target_euler+0x180>)
 8001fd0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e007      	b.n	8001fe8 <get_target_euler+0x114>
    else if (t1 < -RC_FULLSCALE)
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <get_target_euler+0x180>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001fe0:	da02      	bge.n	8001fe8 <get_target_euler+0x114>
        t1 = - RC_FULLSCALE;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <get_target_euler+0x180>)
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <get_target_euler+0x184>)
 8001fe6:	601a      	str	r2, [r3, #0]

    if(t1 > YAW_DEAD_THR)
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <get_target_euler+0x180>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001ff0:	dd12      	ble.n	8002018 <get_target_euler+0x144>
    {
        euler_rc->yaw = euler_rc->yaw +  (int)(max_yaw_rad * RAD_TO_MDEG);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ff8:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002068 <get_target_euler+0x194>
 8001ffc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002064 <get_target_euler+0x190>
 8002000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    else if(t1 < -YAW_DEAD_THR)
    {
        euler_rc->yaw =  euler_rc->yaw -  (int)(max_yaw_rad * RAD_TO_MDEG);
    }
}
 8002016:	e016      	b.n	8002046 <get_target_euler+0x172>
    else if(t1 < -YAW_DEAD_THR)
 8002018:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <get_target_euler+0x180>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002020:	da11      	bge.n	8002046 <get_target_euler+0x172>
        euler_rc->yaw =  euler_rc->yaw -  (int)(max_yaw_rad * RAD_TO_MDEG);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	ed93 7a02 	vldr	s14, [r3, #8]
 8002028:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8002068 <get_target_euler+0x194>
 800202c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8002064 <get_target_euler+0x190>
 8002030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002034:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800203c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	240003d0 	.word	0x240003d0
 8002058:	fffffc18 	.word	0xfffffc18
 800205c:	3f060a92 	.word	0x3f060a92
 8002060:	447a0000 	.word	0x447a0000
 8002064:	475fcfcd 	.word	0x475fcfcd
 8002068:	3cab92a6 	.word	0x3cab92a6

0800206c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <HAL_MspInit+0x30>)
 8002074:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002078:	4a08      	ldr	r2, [pc, #32]	@ (800209c <HAL_MspInit+0x30>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002082:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_MspInit+0x30>)
 8002084:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	58024400 	.word	0x58024400

080020a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0ba      	sub	sp, #232	@ 0xe8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	22c0      	movs	r2, #192	@ 0xc0
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f007 fe03 	bl	8009ccc <memset>
  if(hi2c->Instance==I2C1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a27      	ldr	r2, [pc, #156]	@ (8002168 <HAL_I2C_MspInit+0xc8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d146      	bne.n	800215e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020d0:	f04f 0208 	mov.w	r2, #8
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 fc9a 	bl	8004a20 <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80020f2:	f7ff fdbf 	bl	8001c74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HAL_I2C_MspInit+0xcc>)
 80020f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80020fc:	4a1b      	ldr	r2, [pc, #108]	@ (800216c <HAL_I2C_MspInit+0xcc>)
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002106:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_I2C_MspInit+0xcc>)
 8002108:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002114:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002118:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211c:	2312      	movs	r3, #18
 800211e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800212e:	2304      	movs	r3, #4
 8002130:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002138:	4619      	mov	r1, r3
 800213a:	480d      	ldr	r0, [pc, #52]	@ (8002170 <HAL_I2C_MspInit+0xd0>)
 800213c:	f000 fca6 	bl	8002a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <HAL_I2C_MspInit+0xcc>)
 8002142:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002146:	4a09      	ldr	r2, [pc, #36]	@ (800216c <HAL_I2C_MspInit+0xcc>)
 8002148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800214c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <HAL_I2C_MspInit+0xcc>)
 8002152:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002156:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800215e:	bf00      	nop
 8002160:	37e8      	adds	r7, #232	@ 0xe8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40005400 	.word	0x40005400
 800216c:	58024400 	.word	0x58024400
 8002170:	58020400 	.word	0x58020400

08002174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b090      	sub	sp, #64	@ 0x40
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a82      	ldr	r2, [pc, #520]	@ (800239c <HAL_TIM_Base_MspInit+0x228>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d10f      	bne.n	80021b6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002196:	4b82      	ldr	r3, [pc, #520]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 8002198:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800219c:	4a80      	ldr	r2, [pc, #512]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80021a6:	4b7e      	ldr	r3, [pc, #504]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80021a8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80021b4:	e0ee      	b.n	8002394 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7a      	ldr	r2, [pc, #488]	@ (80023a4 <HAL_TIM_Base_MspInit+0x230>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d136      	bne.n	800222e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021c0:	4b77      	ldr	r3, [pc, #476]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80021c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80021c6:	4a76      	ldr	r2, [pc, #472]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80021d0:	4b73      	ldr	r3, [pc, #460]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80021d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	4b70      	ldr	r3, [pc, #448]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80021e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021e4:	4a6e      	ldr	r2, [pc, #440]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80021e6:	f043 0302 	orr.w	r3, r3, #2
 80021ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80021ee:	4b6c      	ldr	r3, [pc, #432]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80021f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021fc:	2310      	movs	r3, #16
 80021fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800220c:	2302      	movs	r3, #2
 800220e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002214:	4619      	mov	r1, r3
 8002216:	4864      	ldr	r0, [pc, #400]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 8002218:	f000 fc38 	bl	8002a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	201d      	movs	r0, #29
 8002222:	f000 fbfe 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002226:	201d      	movs	r0, #29
 8002228:	f000 fc15 	bl	8002a56 <HAL_NVIC_EnableIRQ>
}
 800222c:	e0b2      	b.n	8002394 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM4)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a5e      	ldr	r2, [pc, #376]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d136      	bne.n	80022a6 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002238:	4b59      	ldr	r3, [pc, #356]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 800223a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800223e:	4a58      	ldr	r2, [pc, #352]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002248:	4b55      	ldr	r3, [pc, #340]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 800224a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002256:	4b52      	ldr	r3, [pc, #328]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 8002258:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800225c:	4a50      	ldr	r2, [pc, #320]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 800225e:	f043 0302 	orr.w	r3, r3, #2
 8002262:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002266:	4b4e      	ldr	r3, [pc, #312]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 8002268:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002274:	2340      	movs	r3, #64	@ 0x40
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002284:	2302      	movs	r3, #2
 8002286:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002288:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800228c:	4619      	mov	r1, r3
 800228e:	4846      	ldr	r0, [pc, #280]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 8002290:	f000 fbfc 	bl	8002a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002294:	2200      	movs	r2, #0
 8002296:	2100      	movs	r1, #0
 8002298:	201e      	movs	r0, #30
 800229a:	f000 fbc2 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800229e:	201e      	movs	r0, #30
 80022a0:	f000 fbd9 	bl	8002a56 <HAL_NVIC_EnableIRQ>
}
 80022a4:	e076      	b.n	8002394 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM5)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a41      	ldr	r2, [pc, #260]	@ (80023b0 <HAL_TIM_Base_MspInit+0x23c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d136      	bne.n	800231e <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022b0:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80022b2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80022b6:	4a3a      	ldr	r2, [pc, #232]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80022c0:	4b37      	ldr	r3, [pc, #220]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80022c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	4b34      	ldr	r3, [pc, #208]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80022d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022d4:	4a32      	ldr	r2, [pc, #200]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80022de:	4b30      	ldr	r3, [pc, #192]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 80022e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022ec:	2301      	movs	r3, #1
 80022ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022fc:	2302      	movs	r3, #2
 80022fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002304:	4619      	mov	r1, r3
 8002306:	482b      	ldr	r0, [pc, #172]	@ (80023b4 <HAL_TIM_Base_MspInit+0x240>)
 8002308:	f000 fbc0 	bl	8002a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	2032      	movs	r0, #50	@ 0x32
 8002312:	f000 fb86 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002316:	2032      	movs	r0, #50	@ 0x32
 8002318:	f000 fb9d 	bl	8002a56 <HAL_NVIC_EnableIRQ>
}
 800231c:	e03a      	b.n	8002394 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM15)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a25      	ldr	r2, [pc, #148]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d135      	bne.n	8002394 <HAL_TIM_Base_MspInit+0x220>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002328:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 800232a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800232e:	4a1c      	ldr	r2, [pc, #112]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002334:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002338:	4b19      	ldr	r3, [pc, #100]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 800233a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800233e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002346:	4b16      	ldr	r3, [pc, #88]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 8002348:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800234c:	4a14      	ldr	r2, [pc, #80]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 800234e:	f043 0310 	orr.w	r3, r3, #16
 8002352:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002356:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_TIM_Base_MspInit+0x22c>)
 8002358:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002364:	2320      	movs	r3, #32
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002374:	2304      	movs	r3, #4
 8002376:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002378:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800237c:	4619      	mov	r1, r3
 800237e:	480f      	ldr	r0, [pc, #60]	@ (80023bc <HAL_TIM_Base_MspInit+0x248>)
 8002380:	f000 fb84 	bl	8002a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	2074      	movs	r0, #116	@ 0x74
 800238a:	f000 fb4a 	bl	8002a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800238e:	2074      	movs	r0, #116	@ 0x74
 8002390:	f000 fb61 	bl	8002a56 <HAL_NVIC_EnableIRQ>
}
 8002394:	bf00      	nop
 8002396:	3740      	adds	r7, #64	@ 0x40
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40010000 	.word	0x40010000
 80023a0:	58024400 	.word	0x58024400
 80023a4:	40000400 	.word	0x40000400
 80023a8:	58020400 	.word	0x58020400
 80023ac:	40000800 	.word	0x40000800
 80023b0:	40000c00 	.word	0x40000c00
 80023b4:	58020000 	.word	0x58020000
 80023b8:	40014000 	.word	0x40014000
 80023bc:	58021000 	.word	0x58021000

080023c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a13      	ldr	r2, [pc, #76]	@ (800242c <HAL_TIM_MspPostInit+0x6c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d11f      	bne.n	8002422 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023e2:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <HAL_TIM_MspPostInit+0x70>)
 80023e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023e8:	4a11      	ldr	r2, [pc, #68]	@ (8002430 <HAL_TIM_MspPostInit+0x70>)
 80023ea:	f043 0310 	orr.w	r3, r3, #16
 80023ee:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80023f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <HAL_TIM_MspPostInit+0x70>)
 80023f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8002400:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002404:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002412:	2301      	movs	r3, #1
 8002414:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	4619      	mov	r1, r3
 800241c:	4805      	ldr	r0, [pc, #20]	@ (8002434 <HAL_TIM_MspPostInit+0x74>)
 800241e:	f000 fb35 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002422:	bf00      	nop
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000
 8002430:	58024400 	.word	0x58024400
 8002434:	58021000 	.word	0x58021000

08002438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b0ba      	sub	sp, #232	@ 0xe8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	22c0      	movs	r2, #192	@ 0xc0
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f007 fc37 	bl	8009ccc <memset>
  if(huart->Instance==USART3)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a27      	ldr	r2, [pc, #156]	@ (8002500 <HAL_UART_MspInit+0xc8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d146      	bne.n	80024f6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002468:	f04f 0202 	mov.w	r2, #2
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800247a:	f107 0310 	add.w	r3, r7, #16
 800247e:	4618      	mov	r0, r3
 8002480:	f002 face 	bl	8004a20 <HAL_RCCEx_PeriphCLKConfig>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800248a:	f7ff fbf3 	bl	8001c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800248e:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <HAL_UART_MspInit+0xcc>)
 8002490:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002494:	4a1b      	ldr	r2, [pc, #108]	@ (8002504 <HAL_UART_MspInit+0xcc>)
 8002496:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800249e:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_UART_MspInit+0xcc>)
 80024a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80024a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ac:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_UART_MspInit+0xcc>)
 80024ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024b2:	4a14      	ldr	r2, [pc, #80]	@ (8002504 <HAL_UART_MspInit+0xcc>)
 80024b4:	f043 0308 	orr.w	r3, r3, #8
 80024b8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_UART_MspInit+0xcc>)
 80024be:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80024ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024e4:	2307      	movs	r3, #7
 80024e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	@ (8002508 <HAL_UART_MspInit+0xd0>)
 80024f2:	f000 facb 	bl	8002a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024f6:	bf00      	nop
 80024f8:	37e8      	adds	r7, #232	@ 0xe8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40004800 	.word	0x40004800
 8002504:	58024400 	.word	0x58024400
 8002508:	58020c00 	.word	0x58020c00

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <NMI_Handler+0x4>

08002514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <HardFault_Handler+0x4>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <MemManage_Handler+0x4>

08002524 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <UsageFault_Handler+0x4>

08002534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002562:	f000 f93f 	bl	80027e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002570:	4802      	ldr	r0, [pc, #8]	@ (800257c <TIM3_IRQHandler+0x10>)
 8002572:	f004 fde1 	bl	8007138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	24000120 	.word	0x24000120

08002580 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002584:	4802      	ldr	r0, [pc, #8]	@ (8002590 <TIM4_IRQHandler+0x10>)
 8002586:	f004 fdd7 	bl	8007138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	2400016c 	.word	0x2400016c

08002594 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002598:	4802      	ldr	r0, [pc, #8]	@ (80025a4 <TIM5_IRQHandler+0x10>)
 800259a:	f004 fdcd 	bl	8007138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	240001b8 	.word	0x240001b8

080025a8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80025ac:	4802      	ldr	r0, [pc, #8]	@ (80025b8 <TIM15_IRQHandler+0x10>)
 80025ae:	f004 fdc3 	bl	8007138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	24000204 	.word	0x24000204

080025bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025c0:	4b32      	ldr	r3, [pc, #200]	@ (800268c <SystemInit+0xd0>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	4a31      	ldr	r2, [pc, #196]	@ (800268c <SystemInit+0xd0>)
 80025c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002690 <SystemInit+0xd4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d807      	bhi.n	80025ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002690 <SystemInit+0xd4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 030f 	bic.w	r3, r3, #15
 80025e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002690 <SystemInit+0xd4>)
 80025e6:	f043 0303 	orr.w	r3, r3, #3
 80025ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025ec:	4b29      	ldr	r3, [pc, #164]	@ (8002694 <SystemInit+0xd8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a28      	ldr	r2, [pc, #160]	@ (8002694 <SystemInit+0xd8>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025f8:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <SystemInit+0xd8>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025fe:	4b25      	ldr	r3, [pc, #148]	@ (8002694 <SystemInit+0xd8>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4924      	ldr	r1, [pc, #144]	@ (8002694 <SystemInit+0xd8>)
 8002604:	4b24      	ldr	r3, [pc, #144]	@ (8002698 <SystemInit+0xdc>)
 8002606:	4013      	ands	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800260a:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <SystemInit+0xd4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002616:	4b1e      	ldr	r3, [pc, #120]	@ (8002690 <SystemInit+0xd4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 030f 	bic.w	r3, r3, #15
 800261e:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <SystemInit+0xd4>)
 8002620:	f043 0303 	orr.w	r3, r3, #3
 8002624:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002626:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <SystemInit+0xd8>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800262c:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <SystemInit+0xd8>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002632:	4b18      	ldr	r3, [pc, #96]	@ (8002694 <SystemInit+0xd8>)
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002638:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <SystemInit+0xd8>)
 800263a:	4a18      	ldr	r2, [pc, #96]	@ (800269c <SystemInit+0xe0>)
 800263c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <SystemInit+0xd8>)
 8002640:	4a17      	ldr	r2, [pc, #92]	@ (80026a0 <SystemInit+0xe4>)
 8002642:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002644:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <SystemInit+0xd8>)
 8002646:	4a17      	ldr	r2, [pc, #92]	@ (80026a4 <SystemInit+0xe8>)
 8002648:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <SystemInit+0xd8>)
 800264c:	2200      	movs	r2, #0
 800264e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002650:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <SystemInit+0xd8>)
 8002652:	4a14      	ldr	r2, [pc, #80]	@ (80026a4 <SystemInit+0xe8>)
 8002654:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002656:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <SystemInit+0xd8>)
 8002658:	2200      	movs	r2, #0
 800265a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800265c:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <SystemInit+0xd8>)
 800265e:	4a11      	ldr	r2, [pc, #68]	@ (80026a4 <SystemInit+0xe8>)
 8002660:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002662:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <SystemInit+0xd8>)
 8002664:	2200      	movs	r2, #0
 8002666:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002668:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <SystemInit+0xd8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a09      	ldr	r2, [pc, #36]	@ (8002694 <SystemInit+0xd8>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002672:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002674:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <SystemInit+0xd8>)
 8002676:	2200      	movs	r2, #0
 8002678:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800267a:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <SystemInit+0xec>)
 800267c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002680:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00
 8002690:	52002000 	.word	0x52002000
 8002694:	58024400 	.word	0x58024400
 8002698:	eaf6ed7f 	.word	0xeaf6ed7f
 800269c:	02020200 	.word	0x02020200
 80026a0:	01ff0000 	.word	0x01ff0000
 80026a4:	01010280 	.word	0x01010280
 80026a8:	52004000 	.word	0x52004000

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026b0:	f7ff ff84 	bl	80025bc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026b4:	480c      	ldr	r0, [pc, #48]	@ (80026e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026b6:	490d      	ldr	r1, [pc, #52]	@ (80026ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026bc:	e002      	b.n	80026c4 <LoopCopyDataInit>

080026be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026c2:	3304      	adds	r3, #4

080026c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80026c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c8:	d3f9      	bcc.n	80026be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ca:	4a0a      	ldr	r2, [pc, #40]	@ (80026f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026cc:	4c0a      	ldr	r4, [pc, #40]	@ (80026f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d0:	e001      	b.n	80026d6 <LoopFillZerobss>

080026d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d4:	3204      	adds	r2, #4

080026d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d8:	d3fb      	bcc.n	80026d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026da:	f007 fb05 	bl	8009ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026de:	f7fe f987 	bl	80009f0 <main>
  bx  lr
 80026e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026e4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80026e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026ec:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80026f0:	0800a1e0 	.word	0x0800a1e0
  ldr r2, =_sbss
 80026f4:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80026f8:	24000510 	.word	0x24000510

080026fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <ADC_IRQHandler>
	...

08002700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002706:	2003      	movs	r0, #3
 8002708:	f000 f980 	bl	8002a0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800270c:	f001 ffb2 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_Init+0x68>)
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	4913      	ldr	r1, [pc, #76]	@ (800276c <HAL_Init+0x6c>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800272a:	4b0f      	ldr	r3, [pc, #60]	@ (8002768 <HAL_Init+0x68>)
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	4a0e      	ldr	r2, [pc, #56]	@ (800276c <HAL_Init+0x6c>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
 8002740:	4a0b      	ldr	r2, [pc, #44]	@ (8002770 <HAL_Init+0x70>)
 8002742:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002744:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <HAL_Init+0x74>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800274a:	2000      	movs	r0, #0
 800274c:	f000 f814 	bl	8002778 <HAL_InitTick>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e002      	b.n	8002760 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800275a:	f7ff fc87 	bl	800206c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	58024400 	.word	0x58024400
 800276c:	0800a128 	.word	0x0800a128
 8002770:	24000008 	.word	0x24000008
 8002774:	24000004 	.word	0x24000004

08002778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002780:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_InitTick+0x60>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e021      	b.n	80027d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800278c:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <HAL_InitTick+0x64>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <HAL_InitTick+0x60>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800279a:	fbb3 f3f1 	udiv	r3, r3, r1
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f965 	bl	8002a72 <HAL_SYSTICK_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00e      	b.n	80027d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b0f      	cmp	r3, #15
 80027b6:	d80a      	bhi.n	80027ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b8:	2200      	movs	r2, #0
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027c0:	f000 f92f 	bl	8002a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027c4:	4a06      	ldr	r2, [pc, #24]	@ (80027e0 <HAL_InitTick+0x68>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e000      	b.n	80027d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	24000010 	.word	0x24000010
 80027dc:	24000004 	.word	0x24000004
 80027e0:	2400000c 	.word	0x2400000c

080027e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_IncTick+0x20>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_IncTick+0x24>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <HAL_IncTick+0x24>)
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	24000010 	.word	0x24000010
 8002808:	240003d4 	.word	0x240003d4

0800280c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return uwTick;
 8002810:	4b03      	ldr	r3, [pc, #12]	@ (8002820 <HAL_GetTick+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	240003d4 	.word	0x240003d4

08002824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff ffee 	bl	800280c <HAL_GetTick>
 8002830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800283c:	d005      	beq.n	800284a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800283e:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <HAL_Delay+0x44>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800284a:	bf00      	nop
 800284c:	f7ff ffde 	bl	800280c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	429a      	cmp	r2, r3
 800285a:	d8f7      	bhi.n	800284c <HAL_Delay+0x28>
  {
  }
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	24000010 	.word	0x24000010

0800286c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <__NVIC_SetPriorityGrouping+0x40>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002888:	4013      	ands	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002896:	4313      	orrs	r3, r2
 8002898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289a:	4a04      	ldr	r2, [pc, #16]	@ (80028ac <__NVIC_SetPriorityGrouping+0x40>)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	60d3      	str	r3, [r2, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00
 80028b0:	05fa0000 	.word	0x05fa0000

080028b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b8:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <__NVIC_GetPriorityGrouping+0x18>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	f003 0307 	and.w	r3, r3, #7
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	db0b      	blt.n	80028fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	f003 021f 	and.w	r2, r3, #31
 80028e8:	4907      	ldr	r1, [pc, #28]	@ (8002908 <__NVIC_EnableIRQ+0x38>)
 80028ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	2001      	movs	r0, #1
 80028f2:	fa00 f202 	lsl.w	r2, r0, r2
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	@ (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	@ (800295c <__NVIC_SetPriority+0x50>)
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	@ 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	@ 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029d8:	d301      	bcc.n	80029de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029da:	2301      	movs	r3, #1
 80029dc:	e00f      	b.n	80029fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029de:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <SysTick_Config+0x40>)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e6:	210f      	movs	r1, #15
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029ec:	f7ff ff8e 	bl	800290c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f0:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <SysTick_Config+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f6:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <SysTick_Config+0x40>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	e000e010 	.word	0xe000e010

08002a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff ff29 	bl	800286c <__NVIC_SetPriorityGrouping>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a30:	f7ff ff40 	bl	80028b4 <__NVIC_GetPriorityGrouping>
 8002a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff90 	bl	8002960 <NVIC_EncodePriority>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff5f 	bl	800290c <__NVIC_SetPriority>
}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff33 	bl	80028d0 <__NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff ffa4 	bl	80029c8 <SysTick_Config>
 8002a80:	4603      	mov	r3, r0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	@ 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a9a:	4b89      	ldr	r3, [pc, #548]	@ (8002cc0 <HAL_GPIO_Init+0x234>)
 8002a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a9e:	e194      	b.n	8002dca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8186 	beq.w	8002dc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d005      	beq.n	8002ad0 <HAL_GPIO_Init+0x44>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d130      	bne.n	8002b32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b06:	2201      	movs	r2, #1
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	f003 0201 	and.w	r2, r3, #1
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d017      	beq.n	8002b6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	2203      	movs	r2, #3
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d123      	bne.n	8002bc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	08da      	lsrs	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3208      	adds	r2, #8
 8002b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3208      	adds	r2, #8
 8002bbc:	69b9      	ldr	r1, [r7, #24]
 8002bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2203      	movs	r2, #3
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0203 	and.w	r2, r3, #3
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 80e0 	beq.w	8002dc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c04:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc4 <HAL_GPIO_Init+0x238>)
 8002c06:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8002cc4 <HAL_GPIO_Init+0x238>)
 8002c0c:	f043 0302 	orr.w	r3, r3, #2
 8002c10:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002c14:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_GPIO_Init+0x238>)
 8002c16:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c22:	4a29      	ldr	r2, [pc, #164]	@ (8002cc8 <HAL_GPIO_Init+0x23c>)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a20      	ldr	r2, [pc, #128]	@ (8002ccc <HAL_GPIO_Init+0x240>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d052      	beq.n	8002cf4 <HAL_GPIO_Init+0x268>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1f      	ldr	r2, [pc, #124]	@ (8002cd0 <HAL_GPIO_Init+0x244>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d031      	beq.n	8002cba <HAL_GPIO_Init+0x22e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd4 <HAL_GPIO_Init+0x248>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d02b      	beq.n	8002cb6 <HAL_GPIO_Init+0x22a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd8 <HAL_GPIO_Init+0x24c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d025      	beq.n	8002cb2 <HAL_GPIO_Init+0x226>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1c      	ldr	r2, [pc, #112]	@ (8002cdc <HAL_GPIO_Init+0x250>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01f      	beq.n	8002cae <HAL_GPIO_Init+0x222>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ce0 <HAL_GPIO_Init+0x254>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d019      	beq.n	8002caa <HAL_GPIO_Init+0x21e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a1a      	ldr	r2, [pc, #104]	@ (8002ce4 <HAL_GPIO_Init+0x258>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_GPIO_Init+0x21a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a19      	ldr	r2, [pc, #100]	@ (8002ce8 <HAL_GPIO_Init+0x25c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00d      	beq.n	8002ca2 <HAL_GPIO_Init+0x216>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a18      	ldr	r2, [pc, #96]	@ (8002cec <HAL_GPIO_Init+0x260>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d007      	beq.n	8002c9e <HAL_GPIO_Init+0x212>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a17      	ldr	r2, [pc, #92]	@ (8002cf0 <HAL_GPIO_Init+0x264>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <HAL_GPIO_Init+0x20e>
 8002c96:	2309      	movs	r3, #9
 8002c98:	e02d      	b.n	8002cf6 <HAL_GPIO_Init+0x26a>
 8002c9a:	230a      	movs	r3, #10
 8002c9c:	e02b      	b.n	8002cf6 <HAL_GPIO_Init+0x26a>
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	e029      	b.n	8002cf6 <HAL_GPIO_Init+0x26a>
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	e027      	b.n	8002cf6 <HAL_GPIO_Init+0x26a>
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e025      	b.n	8002cf6 <HAL_GPIO_Init+0x26a>
 8002caa:	2305      	movs	r3, #5
 8002cac:	e023      	b.n	8002cf6 <HAL_GPIO_Init+0x26a>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e021      	b.n	8002cf6 <HAL_GPIO_Init+0x26a>
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e01f      	b.n	8002cf6 <HAL_GPIO_Init+0x26a>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e01d      	b.n	8002cf6 <HAL_GPIO_Init+0x26a>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e01b      	b.n	8002cf6 <HAL_GPIO_Init+0x26a>
 8002cbe:	bf00      	nop
 8002cc0:	58000080 	.word	0x58000080
 8002cc4:	58024400 	.word	0x58024400
 8002cc8:	58000400 	.word	0x58000400
 8002ccc:	58020000 	.word	0x58020000
 8002cd0:	58020400 	.word	0x58020400
 8002cd4:	58020800 	.word	0x58020800
 8002cd8:	58020c00 	.word	0x58020c00
 8002cdc:	58021000 	.word	0x58021000
 8002ce0:	58021400 	.word	0x58021400
 8002ce4:	58021800 	.word	0x58021800
 8002ce8:	58021c00 	.word	0x58021c00
 8002cec:	58022000 	.word	0x58022000
 8002cf0:	58022400 	.word	0x58022400
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	f002 0203 	and.w	r2, r2, #3
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	4093      	lsls	r3, r2
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d06:	4938      	ldr	r1, [pc, #224]	@ (8002de8 <HAL_GPIO_Init+0x35c>)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f47f ae63 	bne.w	8002aa0 <HAL_GPIO_Init+0x14>
  }
}
 8002dda:	bf00      	nop
 8002ddc:	bf00      	nop
 8002dde:	3724      	adds	r7, #36	@ 0x24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	58000400 	.word	0x58000400

08002dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	807b      	strh	r3, [r7, #2]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dfc:	787b      	ldrb	r3, [r7, #1]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e02:	887a      	ldrh	r2, [r7, #2]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e08:	e003      	b.n	8002e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e0a:	887b      	ldrh	r3, [r7, #2]
 8002e0c:	041a      	lsls	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	619a      	str	r2, [r3, #24]
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e08b      	b.n	8002f4a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff f92a 	bl	80020a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2224      	movs	r2, #36	@ 0x24
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d107      	bne.n	8002e9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e006      	b.n	8002ea8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ea6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d108      	bne.n	8002ec2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	e007      	b.n	8002ed2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ed0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <HAL_I2C_Init+0x134>)
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ef0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691a      	ldr	r2, [r3, #16]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69d9      	ldr	r1, [r3, #28]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	02008000 	.word	0x02008000

08002f58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	461a      	mov	r2, r3
 8002f64:	460b      	mov	r3, r1
 8002f66:	817b      	strh	r3, [r7, #10]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	f040 80fd 	bne.w	8003174 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_I2C_Master_Transmit+0x30>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0f6      	b.n	8003176 <HAL_I2C_Master_Transmit+0x21e>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f90:	f7ff fc3c 	bl	800280c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2319      	movs	r3, #25
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fa0a 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0e1      	b.n	8003176 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2221      	movs	r2, #33	@ 0x21
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	893a      	ldrh	r2, [r7, #8]
 8002fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2bff      	cmp	r3, #255	@ 0xff
 8002fe2:	d906      	bls.n	8002ff2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	22ff      	movs	r2, #255	@ 0xff
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002fea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e007      	b.n	8003002 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ffc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003000:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003006:	2b00      	cmp	r3, #0
 8003008:	d024      	beq.n	8003054 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303e:	b2db      	uxtb	r3, r3
 8003040:	3301      	adds	r3, #1
 8003042:	b2da      	uxtb	r2, r3
 8003044:	8979      	ldrh	r1, [r7, #10]
 8003046:	4b4e      	ldr	r3, [pc, #312]	@ (8003180 <HAL_I2C_Master_Transmit+0x228>)
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fc05 	bl	800385c <I2C_TransferConfig>
 8003052:	e066      	b.n	8003122 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003058:	b2da      	uxtb	r2, r3
 800305a:	8979      	ldrh	r1, [r7, #10]
 800305c:	4b48      	ldr	r3, [pc, #288]	@ (8003180 <HAL_I2C_Master_Transmit+0x228>)
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fbfa 	bl	800385c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003068:	e05b      	b.n	8003122 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	6a39      	ldr	r1, [r7, #32]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f9fd 	bl	800346e <I2C_WaitOnTXISFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e07b      	b.n	8003176 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d034      	beq.n	8003122 <HAL_I2C_Master_Transmit+0x1ca>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d130      	bne.n	8003122 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2180      	movs	r1, #128	@ 0x80
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f976 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e04d      	b.n	8003176 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2bff      	cmp	r3, #255	@ 0xff
 80030e2:	d90e      	bls.n	8003102 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	22ff      	movs	r2, #255	@ 0xff
 80030e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	8979      	ldrh	r1, [r7, #10]
 80030f2:	2300      	movs	r3, #0
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fbae 	bl	800385c <I2C_TransferConfig>
 8003100:	e00f      	b.n	8003122 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	b2da      	uxtb	r2, r3
 8003112:	8979      	ldrh	r1, [r7, #10]
 8003114:	2300      	movs	r3, #0
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fb9d 	bl	800385c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d19e      	bne.n	800306a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	6a39      	ldr	r1, [r7, #32]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f9e3 	bl	80034fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e01a      	b.n	8003176 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2220      	movs	r2, #32
 8003146:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <HAL_I2C_Master_Transmit+0x22c>)
 8003154:	400b      	ands	r3, r1
 8003156:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	80002000 	.word	0x80002000
 8003184:	fe00e800 	.word	0xfe00e800

08003188 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	461a      	mov	r2, r3
 8003194:	460b      	mov	r3, r1
 8003196:	817b      	strh	r3, [r7, #10]
 8003198:	4613      	mov	r3, r2
 800319a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	f040 80db 	bne.w	8003360 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_I2C_Master_Receive+0x30>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0d4      	b.n	8003362 <HAL_I2C_Master_Receive+0x1da>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031c0:	f7ff fb24 	bl	800280c <HAL_GetTick>
 80031c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2319      	movs	r3, #25
 80031cc:	2201      	movs	r2, #1
 80031ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 f8f2 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0bf      	b.n	8003362 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2222      	movs	r2, #34	@ 0x22
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2210      	movs	r2, #16
 80031ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	893a      	ldrh	r2, [r7, #8]
 8003202:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	2bff      	cmp	r3, #255	@ 0xff
 8003212:	d90e      	bls.n	8003232 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	22ff      	movs	r2, #255	@ 0xff
 8003218:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321e:	b2da      	uxtb	r2, r3
 8003220:	8979      	ldrh	r1, [r7, #10]
 8003222:	4b52      	ldr	r3, [pc, #328]	@ (800336c <HAL_I2C_Master_Receive+0x1e4>)
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fb16 	bl	800385c <I2C_TransferConfig>
 8003230:	e06d      	b.n	800330e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003240:	b2da      	uxtb	r2, r3
 8003242:	8979      	ldrh	r1, [r7, #10]
 8003244:	4b49      	ldr	r3, [pc, #292]	@ (800336c <HAL_I2C_Master_Receive+0x1e4>)
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fb05 	bl	800385c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003252:	e05c      	b.n	800330e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6a39      	ldr	r1, [r7, #32]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f993 	bl	8003584 <I2C_WaitOnRXNEFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e07c      	b.n	8003362 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d034      	beq.n	800330e <HAL_I2C_Master_Receive+0x186>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d130      	bne.n	800330e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	2200      	movs	r2, #0
 80032b4:	2180      	movs	r1, #128	@ 0x80
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f880 	bl	80033bc <I2C_WaitOnFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e04d      	b.n	8003362 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2bff      	cmp	r3, #255	@ 0xff
 80032ce:	d90e      	bls.n	80032ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	22ff      	movs	r2, #255	@ 0xff
 80032d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	8979      	ldrh	r1, [r7, #10]
 80032de:	2300      	movs	r3, #0
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fab8 	bl	800385c <I2C_TransferConfig>
 80032ec:	e00f      	b.n	800330e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	2300      	movs	r3, #0
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 faa7 	bl	800385c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d19d      	bne.n	8003254 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	6a39      	ldr	r1, [r7, #32]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f8ed 	bl	80034fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e01a      	b.n	8003362 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2220      	movs	r2, #32
 8003332:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <HAL_I2C_Master_Receive+0x1e8>)
 8003340:	400b      	ands	r3, r1
 8003342:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	80002400 	.word	0x80002400
 8003370:	fe00e800 	.word	0xfe00e800

08003374 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b02      	cmp	r3, #2
 8003388:	d103      	bne.n	8003392 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2200      	movs	r2, #0
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d007      	beq.n	80033b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	619a      	str	r2, [r3, #24]
  }
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033cc:	e03b      	b.n	8003446 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	6839      	ldr	r1, [r7, #0]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f962 	bl	800369c <I2C_IsErrorOccurred>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e041      	b.n	8003466 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033e8:	d02d      	beq.n	8003446 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7ff fa0f 	bl	800280c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <I2C_WaitOnFlagUntilTimeout+0x44>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d122      	bne.n	8003446 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4013      	ands	r3, r2
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	429a      	cmp	r2, r3
 800341c:	d113      	bne.n	8003446 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e00f      	b.n	8003466 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4013      	ands	r3, r2
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	429a      	cmp	r2, r3
 8003462:	d0b4      	beq.n	80033ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800347a:	e033      	b.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f90b 	bl	800369c <I2C_IsErrorOccurred>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e031      	b.n	80034f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003496:	d025      	beq.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	f7ff f9b8 	bl	800280c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d302      	bcc.n	80034ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11a      	bne.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d013      	beq.n	80034e4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e007      	b.n	80034f4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d1c4      	bne.n	800347c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003508:	e02f      	b.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f8c4 	bl	800369c <I2C_IsErrorOccurred>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e02d      	b.n	800357a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351e:	f7ff f975 	bl	800280c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d302      	bcc.n	8003534 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d11a      	bne.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b20      	cmp	r3, #32
 8003540:	d013      	beq.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e007      	b.n	800357a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b20      	cmp	r3, #32
 8003576:	d1c8      	bne.n	800350a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
	...

08003584 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003594:	e071      	b.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f87e 	bl	800369c <I2C_IsErrorOccurred>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d13b      	bne.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d138      	bne.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d105      	bne.n	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d121      	bne.n	800362a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2210      	movs	r2, #16
 80035ec:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2204      	movs	r2, #4
 80035f2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2220      	movs	r2, #32
 80035fa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4b24      	ldr	r3, [pc, #144]	@ (8003698 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003608:	400b      	ands	r3, r1
 800360a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
 8003628:	e002      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003630:	f7ff f8ec 	bl	800280c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	d302      	bcc.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d119      	bne.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d116      	bne.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	d00f      	beq.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d002      	beq.n	800368e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003688:	7dfb      	ldrb	r3, [r7, #23]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d083      	beq.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800368e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	fe00e800 	.word	0xfe00e800

0800369c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d068      	beq.n	800379a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2210      	movs	r2, #16
 80036ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036d0:	e049      	b.n	8003766 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036d8:	d045      	beq.n	8003766 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036da:	f7ff f897 	bl	800280c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <I2C_IsErrorOccurred+0x54>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d13a      	bne.n	8003766 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003702:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800370e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003712:	d121      	bne.n	8003758 <I2C_IsErrorOccurred+0xbc>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800371a:	d01d      	beq.n	8003758 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b20      	cmp	r3, #32
 8003720:	d01a      	beq.n	8003758 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003730:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003732:	f7ff f86b 	bl	800280c <HAL_GetTick>
 8003736:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003738:	e00e      	b.n	8003758 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800373a:	f7ff f867 	bl	800280c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b19      	cmp	r3, #25
 8003746:	d907      	bls.n	8003758 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	f043 0320 	orr.w	r3, r3, #32
 800374e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003756:	e006      	b.n	8003766 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b20      	cmp	r3, #32
 8003764:	d1e9      	bne.n	800373a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b20      	cmp	r3, #32
 8003772:	d003      	beq.n	800377c <I2C_IsErrorOccurred+0xe0>
 8003774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0aa      	beq.n	80036d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800377c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003780:	2b00      	cmp	r3, #0
 8003782:	d103      	bne.n	800378c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2220      	movs	r2, #32
 800378a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	f043 0304 	orr.w	r3, r3, #4
 8003792:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f043 0308 	orr.w	r3, r3, #8
 80037d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f043 0302 	orr.w	r3, r3, #2
 80037f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01c      	beq.n	800384a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff fdaf 	bl	8003374 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b0d      	ldr	r3, [pc, #52]	@ (8003858 <I2C_IsErrorOccurred+0x1bc>)
 8003822:	400b      	ands	r3, r1
 8003824:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	431a      	orrs	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800384a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800384e:	4618      	mov	r0, r3
 8003850:	3728      	adds	r7, #40	@ 0x28
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	fe00e800 	.word	0xfe00e800

0800385c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	817b      	strh	r3, [r7, #10]
 800386a:	4613      	mov	r3, r2
 800386c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800386e:	897b      	ldrh	r3, [r7, #10]
 8003870:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003874:	7a7b      	ldrb	r3, [r7, #9]
 8003876:	041b      	lsls	r3, r3, #16
 8003878:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800387c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	4313      	orrs	r3, r2
 8003886:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800388a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	0d5b      	lsrs	r3, r3, #21
 8003896:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800389a:	4b08      	ldr	r3, [pc, #32]	@ (80038bc <I2C_TransferConfig+0x60>)
 800389c:	430b      	orrs	r3, r1
 800389e:	43db      	mvns	r3, r3
 80038a0:	ea02 0103 	and.w	r1, r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038ae:	bf00      	nop
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	03ff63ff 	.word	0x03ff63ff

080038c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d138      	bne.n	8003948 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e032      	b.n	800394a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2224      	movs	r2, #36	@ 0x24
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003912:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e000      	b.n	800394a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
  }
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b20      	cmp	r3, #32
 800396a:	d139      	bne.n	80039e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003976:	2302      	movs	r3, #2
 8003978:	e033      	b.n	80039e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2224      	movs	r2, #36	@ 0x24
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	e000      	b.n	80039e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039e0:	2302      	movs	r3, #2
  }
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80039f8:	4b29      	ldr	r3, [pc, #164]	@ (8003aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	2b06      	cmp	r3, #6
 8003a02:	d00a      	beq.n	8003a1a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a04:	4b26      	ldr	r3, [pc, #152]	@ (8003aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d001      	beq.n	8003a16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e040      	b.n	8003a98 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e03e      	b.n	8003a98 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a1a:	4b21      	ldr	r3, [pc, #132]	@ (8003aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003a22:	491f      	ldr	r1, [pc, #124]	@ (8003aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a2a:	f7fe feef 	bl	800280c <HAL_GetTick>
 8003a2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a30:	e009      	b.n	8003a46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a32:	f7fe feeb 	bl	800280c <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a40:	d901      	bls.n	8003a46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e028      	b.n	8003a98 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a46:	4b16      	ldr	r3, [pc, #88]	@ (8003aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a52:	d1ee      	bne.n	8003a32 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b1e      	cmp	r3, #30
 8003a58:	d008      	beq.n	8003a6c <HAL_PWREx_ConfigSupply+0x7c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a5e:	d005      	beq.n	8003a6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b1d      	cmp	r3, #29
 8003a64:	d002      	beq.n	8003a6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b2d      	cmp	r3, #45	@ 0x2d
 8003a6a:	d114      	bne.n	8003a96 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003a6c:	f7fe fece 	bl	800280c <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a72:	e009      	b.n	8003a88 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a74:	f7fe feca 	bl	800280c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a82:	d901      	bls.n	8003a88 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e007      	b.n	8003a98 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a94:	d1ee      	bne.n	8003a74 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	58024800 	.word	0x58024800

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08c      	sub	sp, #48	@ 0x30
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f000 bc1f 	b.w	80042f6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80b3 	beq.w	8003c2c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac6:	4b95      	ldr	r3, [pc, #596]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ad0:	4b92      	ldr	r3, [pc, #584]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad8:	2b10      	cmp	r3, #16
 8003ada:	d007      	beq.n	8003aec <HAL_RCC_OscConfig+0x48>
 8003adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ade:	2b18      	cmp	r3, #24
 8003ae0:	d112      	bne.n	8003b08 <HAL_RCC_OscConfig+0x64>
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d10d      	bne.n	8003b08 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	4b8b      	ldr	r3, [pc, #556]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 8098 	beq.w	8003c2a <HAL_RCC_OscConfig+0x186>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f040 8093 	bne.w	8003c2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e3f6      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b10:	d106      	bne.n	8003b20 <HAL_RCC_OscConfig+0x7c>
 8003b12:	4b82      	ldr	r3, [pc, #520]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a81      	ldr	r2, [pc, #516]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e058      	b.n	8003bd2 <HAL_RCC_OscConfig+0x12e>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d112      	bne.n	8003b4e <HAL_RCC_OscConfig+0xaa>
 8003b28:	4b7c      	ldr	r3, [pc, #496]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a7b      	ldr	r2, [pc, #492]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b79      	ldr	r3, [pc, #484]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a78      	ldr	r2, [pc, #480]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b3a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b76      	ldr	r3, [pc, #472]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a75      	ldr	r2, [pc, #468]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e041      	b.n	8003bd2 <HAL_RCC_OscConfig+0x12e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b56:	d112      	bne.n	8003b7e <HAL_RCC_OscConfig+0xda>
 8003b58:	4b70      	ldr	r3, [pc, #448]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6f      	ldr	r2, [pc, #444]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b6d      	ldr	r3, [pc, #436]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6c      	ldr	r2, [pc, #432]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b6a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b6a      	ldr	r3, [pc, #424]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a69      	ldr	r2, [pc, #420]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	e029      	b.n	8003bd2 <HAL_RCC_OscConfig+0x12e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003b86:	d112      	bne.n	8003bae <HAL_RCC_OscConfig+0x10a>
 8003b88:	4b64      	ldr	r3, [pc, #400]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a63      	ldr	r2, [pc, #396]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b61      	ldr	r3, [pc, #388]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a60      	ldr	r2, [pc, #384]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a5d      	ldr	r2, [pc, #372]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e011      	b.n	8003bd2 <HAL_RCC_OscConfig+0x12e>
 8003bae:	4b5b      	ldr	r3, [pc, #364]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a5a      	ldr	r2, [pc, #360]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b58      	ldr	r3, [pc, #352]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a57      	ldr	r2, [pc, #348]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003bc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b55      	ldr	r3, [pc, #340]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a54      	ldr	r2, [pc, #336]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003bcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003bd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d013      	beq.n	8003c02 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fe fe17 	bl	800280c <HAL_GetTick>
 8003bde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be2:	f7fe fe13 	bl	800280c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b64      	cmp	r3, #100	@ 0x64
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e380      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bf4:	4b49      	ldr	r3, [pc, #292]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x13e>
 8003c00:	e014      	b.n	8003c2c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c02:	f7fe fe03 	bl	800280c <HAL_GetTick>
 8003c06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0a:	f7fe fdff 	bl	800280c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b64      	cmp	r3, #100	@ 0x64
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e36c      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1f0      	bne.n	8003c0a <HAL_RCC_OscConfig+0x166>
 8003c28:	e000      	b.n	8003c2c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 808c 	beq.w	8003d52 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c3a:	4b38      	ldr	r3, [pc, #224]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c42:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c44:	4b35      	ldr	r3, [pc, #212]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c48:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <HAL_RCC_OscConfig+0x1bc>
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	2b18      	cmp	r3, #24
 8003c54:	d137      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x222>
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d132      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c60:	4b2e      	ldr	r3, [pc, #184]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_OscConfig+0x1d4>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e33e      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c78:	4b28      	ldr	r3, [pc, #160]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 0219 	bic.w	r2, r3, #25
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4925      	ldr	r1, [pc, #148]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fe fdbf 	bl	800280c <HAL_GetTick>
 8003c8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c92:	f7fe fdbb 	bl	800280c <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e328      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f0      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	061b      	lsls	r3, r3, #24
 8003cbe:	4917      	ldr	r1, [pc, #92]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc4:	e045      	b.n	8003d52 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d028      	beq.n	8003d20 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cce:	4b13      	ldr	r3, [pc, #76]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 0219 	bic.w	r2, r3, #25
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4910      	ldr	r1, [pc, #64]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce0:	f7fe fd94 	bl	800280c <HAL_GetTick>
 8003ce4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce8:	f7fe fd90 	bl	800280c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e2fd      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cfa:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	061b      	lsls	r3, r3, #24
 8003d14:	4901      	ldr	r1, [pc, #4]	@ (8003d1c <HAL_RCC_OscConfig+0x278>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
 8003d1a:	e01a      	b.n	8003d52 <HAL_RCC_OscConfig+0x2ae>
 8003d1c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d20:	4b97      	ldr	r3, [pc, #604]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a96      	ldr	r2, [pc, #600]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fd6e 	bl	800280c <HAL_GetTick>
 8003d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d34:	f7fe fd6a 	bl	800280c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e2d7      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d46:	4b8e      	ldr	r3, [pc, #568]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d06a      	beq.n	8003e34 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5e:	4b88      	ldr	r3, [pc, #544]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d68:	4b85      	ldr	r3, [pc, #532]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d007      	beq.n	8003d84 <HAL_RCC_OscConfig+0x2e0>
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b18      	cmp	r3, #24
 8003d78:	d11b      	bne.n	8003db2 <HAL_RCC_OscConfig+0x30e>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d116      	bne.n	8003db2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d84:	4b7e      	ldr	r3, [pc, #504]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_OscConfig+0x2f8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	2b80      	cmp	r3, #128	@ 0x80
 8003d96:	d001      	beq.n	8003d9c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e2ac      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d9c:	4b78      	ldr	r3, [pc, #480]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	061b      	lsls	r3, r3, #24
 8003daa:	4975      	ldr	r1, [pc, #468]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003db0:	e040      	b.n	8003e34 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d023      	beq.n	8003e02 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003dba:	4b71      	ldr	r3, [pc, #452]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a70      	ldr	r2, [pc, #448]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fd21 	bl	800280c <HAL_GetTick>
 8003dca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dce:	f7fe fd1d 	bl	800280c <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e28a      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003de0:	4b67      	ldr	r3, [pc, #412]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dec:	4b64      	ldr	r3, [pc, #400]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	4961      	ldr	r1, [pc, #388]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60cb      	str	r3, [r1, #12]
 8003e00:	e018      	b.n	8003e34 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e02:	4b5f      	ldr	r3, [pc, #380]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a5e      	ldr	r2, [pc, #376]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fcfd 	bl	800280c <HAL_GetTick>
 8003e12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e16:	f7fe fcf9 	bl	800280c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e266      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e28:	4b55      	ldr	r3, [pc, #340]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d036      	beq.n	8003eae <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d019      	beq.n	8003e7c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e48:	4b4d      	ldr	r3, [pc, #308]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e4c:	4a4c      	ldr	r2, [pc, #304]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fe fcda 	bl	800280c <HAL_GetTick>
 8003e58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e5c:	f7fe fcd6 	bl	800280c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e243      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e6e:	4b44      	ldr	r3, [pc, #272]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x3b8>
 8003e7a:	e018      	b.n	8003eae <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7c:	4b40      	ldr	r3, [pc, #256]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e80:	4a3f      	ldr	r2, [pc, #252]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003e82:	f023 0301 	bic.w	r3, r3, #1
 8003e86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fe fcc0 	bl	800280c <HAL_GetTick>
 8003e8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e90:	f7fe fcbc 	bl	800280c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e229      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ea2:	4b37      	ldr	r3, [pc, #220]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d036      	beq.n	8003f28 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d019      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ecc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ece:	f7fe fc9d 	bl	800280c <HAL_GetTick>
 8003ed2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ed6:	f7fe fc99 	bl	800280c <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e206      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ee8:	4b25      	ldr	r3, [pc, #148]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f0      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x432>
 8003ef4:	e018      	b.n	8003f28 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ef6:	4b22      	ldr	r3, [pc, #136]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a21      	ldr	r2, [pc, #132]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003efc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f02:	f7fe fc83 	bl	800280c <HAL_GetTick>
 8003f06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f0a:	f7fe fc7f 	bl	800280c <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e1ec      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f1c:	4b18      	ldr	r3, [pc, #96]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f0      	bne.n	8003f0a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80af 	beq.w	8004094 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f36:	4b13      	ldr	r3, [pc, #76]	@ (8003f84 <HAL_RCC_OscConfig+0x4e0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	@ (8003f84 <HAL_RCC_OscConfig+0x4e0>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f42:	f7fe fc63 	bl	800280c <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4a:	f7fe fc5f 	bl	800280c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b64      	cmp	r3, #100	@ 0x64
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e1cc      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <HAL_RCC_OscConfig+0x4e0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10b      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4e4>
 8003f70:	4b03      	ldr	r3, [pc, #12]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f74:	4a02      	ldr	r2, [pc, #8]	@ (8003f80 <HAL_RCC_OscConfig+0x4dc>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7c:	e05b      	b.n	8004036 <HAL_RCC_OscConfig+0x592>
 8003f7e:	bf00      	nop
 8003f80:	58024400 	.word	0x58024400
 8003f84:	58024800 	.word	0x58024800
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d112      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x512>
 8003f90:	4b9d      	ldr	r3, [pc, #628]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f94:	4a9c      	ldr	r2, [pc, #624]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9c:	4b9a      	ldr	r3, [pc, #616]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4a99      	ldr	r2, [pc, #612]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003fa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa8:	4b97      	ldr	r3, [pc, #604]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fac:	4a96      	ldr	r2, [pc, #600]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003fae:	f023 0304 	bic.w	r3, r3, #4
 8003fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb4:	e03f      	b.n	8004036 <HAL_RCC_OscConfig+0x592>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b05      	cmp	r3, #5
 8003fbc:	d112      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x540>
 8003fbe:	4b92      	ldr	r3, [pc, #584]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	4a91      	ldr	r2, [pc, #580]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fca:	4b8f      	ldr	r3, [pc, #572]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fce:	4a8e      	ldr	r2, [pc, #568]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd6:	4b8c      	ldr	r3, [pc, #560]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fda:	4a8b      	ldr	r2, [pc, #556]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe2:	e028      	b.n	8004036 <HAL_RCC_OscConfig+0x592>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b85      	cmp	r3, #133	@ 0x85
 8003fea:	d112      	bne.n	8004012 <HAL_RCC_OscConfig+0x56e>
 8003fec:	4b86      	ldr	r3, [pc, #536]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff0:	4a85      	ldr	r2, [pc, #532]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff8:	4b83      	ldr	r3, [pc, #524]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffc:	4a82      	ldr	r2, [pc, #520]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8003ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004002:	6713      	str	r3, [r2, #112]	@ 0x70
 8004004:	4b80      	ldr	r3, [pc, #512]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004008:	4a7f      	ldr	r2, [pc, #508]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004010:	e011      	b.n	8004036 <HAL_RCC_OscConfig+0x592>
 8004012:	4b7d      	ldr	r3, [pc, #500]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004016:	4a7c      	ldr	r2, [pc, #496]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	6713      	str	r3, [r2, #112]	@ 0x70
 800401e:	4b7a      	ldr	r3, [pc, #488]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004022:	4a79      	ldr	r2, [pc, #484]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004024:	f023 0304 	bic.w	r3, r3, #4
 8004028:	6713      	str	r3, [r2, #112]	@ 0x70
 800402a:	4b77      	ldr	r3, [pc, #476]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	4a76      	ldr	r2, [pc, #472]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004030:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004034:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d015      	beq.n	800406a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fe fbe5 	bl	800280c <HAL_GetTick>
 8004042:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fe fbe1 	bl	800280c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e14c      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800405c:	4b6a      	ldr	r3, [pc, #424]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RCC_OscConfig+0x5a2>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406a:	f7fe fbcf 	bl	800280c <HAL_GetTick>
 800406e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe fbcb 	bl	800280c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e136      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004088:	4b5f      	ldr	r3, [pc, #380]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ee      	bne.n	8004072 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 812b 	beq.w	80042f4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800409e:	4b5a      	ldr	r3, [pc, #360]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040a6:	2b18      	cmp	r3, #24
 80040a8:	f000 80bb 	beq.w	8004222 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	f040 8095 	bne.w	80041e0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b6:	4b54      	ldr	r3, [pc, #336]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a53      	ldr	r2, [pc, #332]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80040bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fe fba3 	bl	800280c <HAL_GetTick>
 80040c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe fb9f 	bl	800280c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e10c      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e8:	4b47      	ldr	r3, [pc, #284]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80040ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040ec:	4b47      	ldr	r3, [pc, #284]	@ (800420c <HAL_RCC_OscConfig+0x768>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040f8:	0112      	lsls	r2, r2, #4
 80040fa:	430a      	orrs	r2, r1
 80040fc:	4942      	ldr	r1, [pc, #264]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	628b      	str	r3, [r1, #40]	@ 0x28
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	3b01      	subs	r3, #1
 8004108:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004110:	3b01      	subs	r3, #1
 8004112:	025b      	lsls	r3, r3, #9
 8004114:	b29b      	uxth	r3, r3
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411c:	3b01      	subs	r3, #1
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412a:	3b01      	subs	r3, #1
 800412c:	061b      	lsls	r3, r3, #24
 800412e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004132:	4935      	ldr	r1, [pc, #212]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004134:	4313      	orrs	r3, r2
 8004136:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004138:	4b33      	ldr	r3, [pc, #204]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800413a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413c:	4a32      	ldr	r2, [pc, #200]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004144:	4b30      	ldr	r3, [pc, #192]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004148:	4b31      	ldr	r3, [pc, #196]	@ (8004210 <HAL_RCC_OscConfig+0x76c>)
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004150:	00d2      	lsls	r2, r2, #3
 8004152:	492d      	ldr	r1, [pc, #180]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004154:	4313      	orrs	r3, r2
 8004156:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004158:	4b2b      	ldr	r3, [pc, #172]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	f023 020c 	bic.w	r2, r3, #12
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	4928      	ldr	r1, [pc, #160]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004166:	4313      	orrs	r3, r2
 8004168:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800416a:	4b27      	ldr	r3, [pc, #156]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800416c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416e:	f023 0202 	bic.w	r2, r3, #2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	4924      	ldr	r1, [pc, #144]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004178:	4313      	orrs	r3, r2
 800417a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800417c:	4b22      	ldr	r3, [pc, #136]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	4a21      	ldr	r2, [pc, #132]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004188:	4b1f      	ldr	r3, [pc, #124]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	4a1e      	ldr	r2, [pc, #120]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800418e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004194:	4b1c      	ldr	r3, [pc, #112]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	4a1b      	ldr	r2, [pc, #108]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 800419a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800419e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041a0:	4b19      	ldr	r3, [pc, #100]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	4a18      	ldr	r2, [pc, #96]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ac:	4b16      	ldr	r3, [pc, #88]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a15      	ldr	r2, [pc, #84]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80041b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fe fb28 	bl	800280c <HAL_GetTick>
 80041bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe fb24 	bl	800280c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e091      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x71c>
 80041de:	e089      	b.n	80042f4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e0:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a08      	ldr	r2, [pc, #32]	@ (8004208 <HAL_RCC_OscConfig+0x764>)
 80041e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fe fb0e 	bl	800280c <HAL_GetTick>
 80041f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041f2:	e00f      	b.n	8004214 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fe fb0a 	bl	800280c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d908      	bls.n	8004214 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e077      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
 8004206:	bf00      	nop
 8004208:	58024400 	.word	0x58024400
 800420c:	fffffc0c 	.word	0xfffffc0c
 8004210:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004214:	4b3a      	ldr	r3, [pc, #232]	@ (8004300 <HAL_RCC_OscConfig+0x85c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e9      	bne.n	80041f4 <HAL_RCC_OscConfig+0x750>
 8004220:	e068      	b.n	80042f4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004222:	4b37      	ldr	r3, [pc, #220]	@ (8004300 <HAL_RCC_OscConfig+0x85c>)
 8004224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004226:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004228:	4b35      	ldr	r3, [pc, #212]	@ (8004300 <HAL_RCC_OscConfig+0x85c>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	2b01      	cmp	r3, #1
 8004234:	d031      	beq.n	800429a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f003 0203 	and.w	r2, r3, #3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004240:	429a      	cmp	r2, r3
 8004242:	d12a      	bne.n	800429a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d122      	bne.n	800429a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d11a      	bne.n	800429a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	0a5b      	lsrs	r3, r3, #9
 8004268:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004270:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d111      	bne.n	800429a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d108      	bne.n	800429a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	0e1b      	lsrs	r3, r3, #24
 800428c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004294:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004296:	429a      	cmp	r2, r3
 8004298:	d001      	beq.n	800429e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e02b      	b.n	80042f6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800429e:	4b18      	ldr	r3, [pc, #96]	@ (8004300 <HAL_RCC_OscConfig+0x85c>)
 80042a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a2:	08db      	lsrs	r3, r3, #3
 80042a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042a8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d01f      	beq.n	80042f4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042b4:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <HAL_RCC_OscConfig+0x85c>)
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	4a11      	ldr	r2, [pc, #68]	@ (8004300 <HAL_RCC_OscConfig+0x85c>)
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042c0:	f7fe faa4 	bl	800280c <HAL_GetTick>
 80042c4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042c6:	bf00      	nop
 80042c8:	f7fe faa0 	bl	800280c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d0f9      	beq.n	80042c8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004300 <HAL_RCC_OscConfig+0x85c>)
 80042d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004304 <HAL_RCC_OscConfig+0x860>)
 80042da:	4013      	ands	r3, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042e0:	00d2      	lsls	r2, r2, #3
 80042e2:	4907      	ldr	r1, [pc, #28]	@ (8004300 <HAL_RCC_OscConfig+0x85c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80042e8:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <HAL_RCC_OscConfig+0x85c>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	4a04      	ldr	r2, [pc, #16]	@ (8004300 <HAL_RCC_OscConfig+0x85c>)
 80042ee:	f043 0301 	orr.w	r3, r3, #1
 80042f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3730      	adds	r7, #48	@ 0x30
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	58024400 	.word	0x58024400
 8004304:	ffff0007 	.word	0xffff0007

08004308 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e19c      	b.n	8004656 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800431c:	4b8a      	ldr	r3, [pc, #552]	@ (8004548 <HAL_RCC_ClockConfig+0x240>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d910      	bls.n	800434c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4b87      	ldr	r3, [pc, #540]	@ (8004548 <HAL_RCC_ClockConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 020f 	bic.w	r2, r3, #15
 8004332:	4985      	ldr	r1, [pc, #532]	@ (8004548 <HAL_RCC_ClockConfig+0x240>)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433a:	4b83      	ldr	r3, [pc, #524]	@ (8004548 <HAL_RCC_ClockConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d001      	beq.n	800434c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e184      	b.n	8004656 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d010      	beq.n	800437a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	4b7b      	ldr	r3, [pc, #492]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004364:	429a      	cmp	r2, r3
 8004366:	d908      	bls.n	800437a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004368:	4b78      	ldr	r3, [pc, #480]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	4975      	ldr	r1, [pc, #468]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 8004376:	4313      	orrs	r3, r2
 8004378:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d010      	beq.n	80043a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	4b70      	ldr	r3, [pc, #448]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004392:	429a      	cmp	r2, r3
 8004394:	d908      	bls.n	80043a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004396:	4b6d      	ldr	r3, [pc, #436]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	496a      	ldr	r1, [pc, #424]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d010      	beq.n	80043d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	4b64      	ldr	r3, [pc, #400]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d908      	bls.n	80043d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043c4:	4b61      	ldr	r3, [pc, #388]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	495e      	ldr	r1, [pc, #376]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d010      	beq.n	8004404 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	4b59      	ldr	r3, [pc, #356]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d908      	bls.n	8004404 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043f2:	4b56      	ldr	r3, [pc, #344]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	4953      	ldr	r1, [pc, #332]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 8004400:	4313      	orrs	r3, r2
 8004402:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	4b4d      	ldr	r3, [pc, #308]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	429a      	cmp	r2, r3
 800441e:	d908      	bls.n	8004432 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004420:	4b4a      	ldr	r3, [pc, #296]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f023 020f 	bic.w	r2, r3, #15
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4947      	ldr	r1, [pc, #284]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 800442e:	4313      	orrs	r3, r2
 8004430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d055      	beq.n	80044ea <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800443e:	4b43      	ldr	r3, [pc, #268]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4940      	ldr	r1, [pc, #256]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 800444c:	4313      	orrs	r3, r2
 800444e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d107      	bne.n	8004468 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004458:	4b3c      	ldr	r3, [pc, #240]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d121      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0f6      	b.n	8004656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d107      	bne.n	8004480 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004470:	4b36      	ldr	r3, [pc, #216]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d115      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0ea      	b.n	8004656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d107      	bne.n	8004498 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004488:	4b30      	ldr	r3, [pc, #192]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0de      	b.n	8004656 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004498:	4b2c      	ldr	r3, [pc, #176]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0d6      	b.n	8004656 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044a8:	4b28      	ldr	r3, [pc, #160]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f023 0207 	bic.w	r2, r3, #7
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4925      	ldr	r1, [pc, #148]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ba:	f7fe f9a7 	bl	800280c <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c2:	f7fe f9a3 	bl	800280c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e0be      	b.n	8004656 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d8:	4b1c      	ldr	r3, [pc, #112]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d1eb      	bne.n	80044c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d010      	beq.n	8004518 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	4b14      	ldr	r3, [pc, #80]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	429a      	cmp	r2, r3
 8004504:	d208      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004506:	4b11      	ldr	r3, [pc, #68]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f023 020f 	bic.w	r2, r3, #15
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	490e      	ldr	r1, [pc, #56]	@ (800454c <HAL_RCC_ClockConfig+0x244>)
 8004514:	4313      	orrs	r3, r2
 8004516:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004518:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <HAL_RCC_ClockConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d214      	bcs.n	8004550 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b08      	ldr	r3, [pc, #32]	@ (8004548 <HAL_RCC_ClockConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f023 020f 	bic.w	r2, r3, #15
 800452e:	4906      	ldr	r1, [pc, #24]	@ (8004548 <HAL_RCC_ClockConfig+0x240>)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	4313      	orrs	r3, r2
 8004534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004536:	4b04      	ldr	r3, [pc, #16]	@ (8004548 <HAL_RCC_ClockConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d005      	beq.n	8004550 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e086      	b.n	8004656 <HAL_RCC_ClockConfig+0x34e>
 8004548:	52002000 	.word	0x52002000
 800454c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d010      	beq.n	800457e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	4b3f      	ldr	r3, [pc, #252]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004568:	429a      	cmp	r2, r3
 800456a:	d208      	bcs.n	800457e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800456c:	4b3c      	ldr	r3, [pc, #240]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	4939      	ldr	r1, [pc, #228]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 800457a:	4313      	orrs	r3, r2
 800457c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d010      	beq.n	80045ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695a      	ldr	r2, [r3, #20]
 800458e:	4b34      	ldr	r3, [pc, #208]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004596:	429a      	cmp	r2, r3
 8004598:	d208      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800459a:	4b31      	ldr	r3, [pc, #196]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	492e      	ldr	r1, [pc, #184]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d010      	beq.n	80045da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	4b28      	ldr	r3, [pc, #160]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d208      	bcs.n	80045da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045c8:	4b25      	ldr	r3, [pc, #148]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	4922      	ldr	r1, [pc, #136]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d208      	bcs.n	8004608 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80045f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	4917      	ldr	r1, [pc, #92]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 8004604:	4313      	orrs	r3, r2
 8004606:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004608:	f000 f834 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 800460c:	4602      	mov	r2, r0
 800460e:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	0a1b      	lsrs	r3, r3, #8
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	4912      	ldr	r1, [pc, #72]	@ (8004664 <HAL_RCC_ClockConfig+0x35c>)
 800461a:	5ccb      	ldrb	r3, [r1, r3]
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004626:	4b0e      	ldr	r3, [pc, #56]	@ (8004660 <HAL_RCC_ClockConfig+0x358>)
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	4a0d      	ldr	r2, [pc, #52]	@ (8004664 <HAL_RCC_ClockConfig+0x35c>)
 8004630:	5cd3      	ldrb	r3, [r2, r3]
 8004632:	f003 031f 	and.w	r3, r3, #31
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
 800463c:	4a0a      	ldr	r2, [pc, #40]	@ (8004668 <HAL_RCC_ClockConfig+0x360>)
 800463e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004640:	4a0a      	ldr	r2, [pc, #40]	@ (800466c <HAL_RCC_ClockConfig+0x364>)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004646:	4b0a      	ldr	r3, [pc, #40]	@ (8004670 <HAL_RCC_ClockConfig+0x368>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe f894 	bl	8002778 <HAL_InitTick>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	58024400 	.word	0x58024400
 8004664:	0800a128 	.word	0x0800a128
 8004668:	24000008 	.word	0x24000008
 800466c:	24000004 	.word	0x24000004
 8004670:	2400000c 	.word	0x2400000c

08004674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	b480      	push	{r7}
 8004676:	b089      	sub	sp, #36	@ 0x24
 8004678:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800467a:	4bb3      	ldr	r3, [pc, #716]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004682:	2b18      	cmp	r3, #24
 8004684:	f200 8155 	bhi.w	8004932 <HAL_RCC_GetSysClockFreq+0x2be>
 8004688:	a201      	add	r2, pc, #4	@ (adr r2, 8004690 <HAL_RCC_GetSysClockFreq+0x1c>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046f5 	.word	0x080046f5
 8004694:	08004933 	.word	0x08004933
 8004698:	08004933 	.word	0x08004933
 800469c:	08004933 	.word	0x08004933
 80046a0:	08004933 	.word	0x08004933
 80046a4:	08004933 	.word	0x08004933
 80046a8:	08004933 	.word	0x08004933
 80046ac:	08004933 	.word	0x08004933
 80046b0:	0800471b 	.word	0x0800471b
 80046b4:	08004933 	.word	0x08004933
 80046b8:	08004933 	.word	0x08004933
 80046bc:	08004933 	.word	0x08004933
 80046c0:	08004933 	.word	0x08004933
 80046c4:	08004933 	.word	0x08004933
 80046c8:	08004933 	.word	0x08004933
 80046cc:	08004933 	.word	0x08004933
 80046d0:	08004721 	.word	0x08004721
 80046d4:	08004933 	.word	0x08004933
 80046d8:	08004933 	.word	0x08004933
 80046dc:	08004933 	.word	0x08004933
 80046e0:	08004933 	.word	0x08004933
 80046e4:	08004933 	.word	0x08004933
 80046e8:	08004933 	.word	0x08004933
 80046ec:	08004933 	.word	0x08004933
 80046f0:	08004727 	.word	0x08004727
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046f4:	4b94      	ldr	r3, [pc, #592]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0320 	and.w	r3, r3, #32
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d009      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004700:	4b91      	ldr	r3, [pc, #580]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	08db      	lsrs	r3, r3, #3
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	4a90      	ldr	r2, [pc, #576]	@ (800494c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
 8004710:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004712:	e111      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004714:	4b8d      	ldr	r3, [pc, #564]	@ (800494c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004716:	61bb      	str	r3, [r7, #24]
      break;
 8004718:	e10e      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800471a:	4b8d      	ldr	r3, [pc, #564]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800471c:	61bb      	str	r3, [r7, #24]
      break;
 800471e:	e10b      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004720:	4b8c      	ldr	r3, [pc, #560]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004722:	61bb      	str	r3, [r7, #24]
      break;
 8004724:	e108      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004726:	4b88      	ldr	r3, [pc, #544]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004730:	4b85      	ldr	r3, [pc, #532]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800473a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800473c:	4b82      	ldr	r3, [pc, #520]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004746:	4b80      	ldr	r3, [pc, #512]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800474a:	08db      	lsrs	r3, r3, #3
 800474c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80e1 	beq.w	800492c <HAL_RCC_GetSysClockFreq+0x2b8>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b02      	cmp	r3, #2
 800476e:	f000 8083 	beq.w	8004878 <HAL_RCC_GetSysClockFreq+0x204>
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2b02      	cmp	r3, #2
 8004776:	f200 80a1 	bhi.w	80048bc <HAL_RCC_GetSysClockFreq+0x248>
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x114>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d056      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004786:	e099      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004788:	4b6f      	ldr	r3, [pc, #444]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d02d      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004794:	4b6c      	ldr	r3, [pc, #432]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	08db      	lsrs	r3, r3, #3
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	4a6b      	ldr	r2, [pc, #428]	@ (800494c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
 80047a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	ee07 3a90 	vmov	s15, r3
 80047ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047be:	4b62      	ldr	r3, [pc, #392]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80047d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80047ee:	e087      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800495c <HAL_RCC_GetSysClockFreq+0x2e8>
 80047fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004802:	4b51      	ldr	r3, [pc, #324]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004812:	ed97 6a02 	vldr	s12, [r7, #8]
 8004816:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800481a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004832:	e065      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004960 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004846:	4b40      	ldr	r3, [pc, #256]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004856:	ed97 6a02 	vldr	s12, [r7, #8]
 800485a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004958 <HAL_RCC_GetSysClockFreq+0x2e4>
 800485e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800486a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004872:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004876:	e043      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004964 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488a:	4b2f      	ldr	r3, [pc, #188]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489a:	ed97 6a02 	vldr	s12, [r7, #8]
 800489e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048ba:	e021      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004960 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048de:	ed97 6a02 	vldr	s12, [r7, #8]
 80048e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004958 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004900:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004904:	0a5b      	lsrs	r3, r3, #9
 8004906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800490a:	3301      	adds	r3, #1
 800490c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004918:	edd7 6a07 	vldr	s13, [r7, #28]
 800491c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004924:	ee17 3a90 	vmov	r3, s15
 8004928:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800492a:	e005      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
      break;
 8004930:	e002      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004932:	4b07      	ldr	r3, [pc, #28]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004934:	61bb      	str	r3, [r7, #24]
      break;
 8004936:	bf00      	nop
  }

  return sysclockfreq;
 8004938:	69bb      	ldr	r3, [r7, #24]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3724      	adds	r7, #36	@ 0x24
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	58024400 	.word	0x58024400
 800494c:	03d09000 	.word	0x03d09000
 8004950:	003d0900 	.word	0x003d0900
 8004954:	007a1200 	.word	0x007a1200
 8004958:	46000000 	.word	0x46000000
 800495c:	4c742400 	.word	0x4c742400
 8004960:	4a742400 	.word	0x4a742400
 8004964:	4af42400 	.word	0x4af42400

08004968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800496e:	f7ff fe81 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8004972:	4602      	mov	r2, r0
 8004974:	4b10      	ldr	r3, [pc, #64]	@ (80049b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	0a1b      	lsrs	r3, r3, #8
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	490f      	ldr	r1, [pc, #60]	@ (80049bc <HAL_RCC_GetHCLKFreq+0x54>)
 8004980:	5ccb      	ldrb	r3, [r1, r3]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	fa22 f303 	lsr.w	r3, r2, r3
 800498a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800498c:	4b0a      	ldr	r3, [pc, #40]	@ (80049b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <HAL_RCC_GetHCLKFreq+0x54>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	4a07      	ldr	r2, [pc, #28]	@ (80049c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80049a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049a6:	4a07      	ldr	r2, [pc, #28]	@ (80049c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049ac:	4b04      	ldr	r3, [pc, #16]	@ (80049c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80049ae:	681b      	ldr	r3, [r3, #0]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	58024400 	.word	0x58024400
 80049bc:	0800a128 	.word	0x0800a128
 80049c0:	24000008 	.word	0x24000008
 80049c4:	24000004 	.word	0x24000004

080049c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80049cc:	f7ff ffcc 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	4904      	ldr	r1, [pc, #16]	@ (80049f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049de:	5ccb      	ldrb	r3, [r1, r3]
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	58024400 	.word	0x58024400
 80049f0:	0800a128 	.word	0x0800a128

080049f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80049f8:	f7ff ffb6 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	0a1b      	lsrs	r3, r3, #8
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4904      	ldr	r1, [pc, #16]	@ (8004a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	0800a128 	.word	0x0800a128

08004a20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a24:	b0c8      	sub	sp, #288	@ 0x120
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004a44:	2500      	movs	r5, #0
 8004a46:	ea54 0305 	orrs.w	r3, r4, r5
 8004a4a:	d049      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a56:	d02f      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a5c:	d828      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a62:	d01a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a68:	d822      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a72:	d007      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a74:	e01c      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a76:	4ba7      	ldr	r3, [pc, #668]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7a:	4aa6      	ldr	r2, [pc, #664]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a82:	e01a      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a88:	3308      	adds	r3, #8
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fc43 	bl	8006318 <RCCEx_PLL2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a98:	e00f      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a9e:	3328      	adds	r3, #40	@ 0x28
 8004aa0:	2102      	movs	r1, #2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 fcea 	bl	800647c <RCCEx_PLL3_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004aae:	e004      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ac2:	4b94      	ldr	r3, [pc, #592]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ad0:	4a90      	ldr	r2, [pc, #576]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ad6:	e003      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004adc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004aec:	f04f 0900 	mov.w	r9, #0
 8004af0:	ea58 0309 	orrs.w	r3, r8, r9
 8004af4:	d047      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d82a      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004b00:	a201      	add	r2, pc, #4	@ (adr r2, 8004b08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b06:	bf00      	nop
 8004b08:	08004b1d 	.word	0x08004b1d
 8004b0c:	08004b2b 	.word	0x08004b2b
 8004b10:	08004b41 	.word	0x08004b41
 8004b14:	08004b5f 	.word	0x08004b5f
 8004b18:	08004b5f 	.word	0x08004b5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1c:	4b7d      	ldr	r3, [pc, #500]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b20:	4a7c      	ldr	r2, [pc, #496]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b28:	e01a      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b2e:	3308      	adds	r3, #8
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 fbf0 	bl	8006318 <RCCEx_PLL2_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b3e:	e00f      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b44:	3328      	adds	r3, #40	@ 0x28
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f001 fc97 	bl	800647c <RCCEx_PLL3_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b54:	e004      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004b5c:	e000      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b68:	4b6a      	ldr	r3, [pc, #424]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6c:	f023 0107 	bic.w	r1, r3, #7
 8004b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b76:	4a67      	ldr	r2, [pc, #412]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b7c:	e003      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004b92:	f04f 0b00 	mov.w	fp, #0
 8004b96:	ea5a 030b 	orrs.w	r3, sl, fp
 8004b9a:	d054      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8004b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004ba6:	d036      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004ba8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004bac:	d82f      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb2:	d032      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004bb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb8:	d829      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004bba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bbc:	d02f      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8004bbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bc0:	d825      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004bc2:	2b80      	cmp	r3, #128	@ 0x80
 8004bc4:	d018      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004bc6:	2b80      	cmp	r3, #128	@ 0x80
 8004bc8:	d821      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8004bce:	2b40      	cmp	r3, #64	@ 0x40
 8004bd0:	d007      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004bd2:	e01c      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004be0:	e01e      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004be6:	3308      	adds	r3, #8
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 fb94 	bl	8006318 <RCCEx_PLL2_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004bf6:	e013      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bfc:	3328      	adds	r3, #40	@ 0x28
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 fc3b 	bl	800647c <RCCEx_PLL3_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004c0c:	e008      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c14:	e004      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004c16:	bf00      	nop
 8004c18:	e002      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004c28:	4b3a      	ldr	r3, [pc, #232]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c2c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c36:	4a37      	ldr	r2, [pc, #220]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c3c:	e003      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c42:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004c52:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c56:	2300      	movs	r3, #0
 8004c58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004c60:	460b      	mov	r3, r1
 8004c62:	4313      	orrs	r3, r2
 8004c64:	d05c      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8004c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c6c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c70:	d03b      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004c72:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c76:	d834      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c7c:	d037      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8004c7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c82:	d82e      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c84:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c88:	d033      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004c8a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c8e:	d828      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c94:	d01a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c9a:	d822      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca4:	d007      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004ca6:	e01c      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	4a19      	ldr	r2, [pc, #100]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004cb4:	e01e      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cba:	3308      	adds	r3, #8
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fb2a 	bl	8006318 <RCCEx_PLL2_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004cca:	e013      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd0:	3328      	adds	r3, #40	@ 0x28
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fbd1 	bl	800647c <RCCEx_PLL3_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004ce8:	e004      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004cea:	bf00      	nop
 8004cec:	e002      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004cee:	bf00      	nop
 8004cf0:	e000      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d00:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0a:	4a02      	ldr	r2, [pc, #8]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d10:	e006      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004d12:	bf00      	nop
 8004d14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d1c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d30:	2300      	movs	r3, #0
 8004d32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004d36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	d03a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d46:	2b30      	cmp	r3, #48	@ 0x30
 8004d48:	d01f      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004d4a:	2b30      	cmp	r3, #48	@ 0x30
 8004d4c:	d819      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d00c      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d815      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d019      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d111      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d5e:	4bae      	ldr	r3, [pc, #696]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	4aad      	ldr	r2, [pc, #692]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d6a:	e011      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d70:	3308      	adds	r3, #8
 8004d72:	2102      	movs	r1, #2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f001 facf 	bl	8006318 <RCCEx_PLL2_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004d80:	e006      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d88:	e002      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d98:	4b9f      	ldr	r3, [pc, #636]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d9c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da6:	4a9c      	ldr	r2, [pc, #624]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004da8:	430b      	orrs	r3, r1
 8004daa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dac:	e003      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004db2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004dc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004dcc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	d051      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004dda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ddc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004de0:	d035      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004de2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004de6:	d82e      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004de8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004dec:	d031      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004dee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004df2:	d828      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df8:	d01a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dfe:	d822      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e08:	d007      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004e0a:	e01c      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e0c:	4b82      	ldr	r3, [pc, #520]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	4a81      	ldr	r2, [pc, #516]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e18:	e01c      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e1e:	3308      	adds	r3, #8
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f001 fa78 	bl	8006318 <RCCEx_PLL2_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e2e:	e011      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e34:	3328      	adds	r3, #40	@ 0x28
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 fb1f 	bl	800647c <RCCEx_PLL3_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004e44:	e006      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e4c:	e002      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004e5c:	4b6e      	ldr	r3, [pc, #440]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e6a:	4a6b      	ldr	r2, [pc, #428]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e70:	e003      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e72:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e76:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e94:	460b      	mov	r3, r1
 8004e96:	4313      	orrs	r3, r2
 8004e98:	d053      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ea4:	d033      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004ea6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eaa:	d82c      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004eac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004eb0:	d02f      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004eb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004eb6:	d826      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004eb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ebc:	d02b      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004ebe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ec2:	d820      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004ec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ec8:	d012      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004eca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ece:	d81a      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d022      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed8:	d115      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ede:	3308      	adds	r3, #8
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 fa18 	bl	8006318 <RCCEx_PLL2_Config>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004eee:	e015      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ef4:	3328      	adds	r3, #40	@ 0x28
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 fabf 	bl	800647c <RCCEx_PLL3_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004f04:	e00a      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f0c:	e006      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004f0e:	bf00      	nop
 8004f10:	e004      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004f24:	4b3c      	ldr	r3, [pc, #240]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f32:	4a39      	ldr	r2, [pc, #228]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f38:	e003      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f52:	2300      	movs	r3, #0
 8004f54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f58:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	d060      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f6a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004f6e:	d039      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004f70:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004f74:	d832      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f7a:	d035      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f80:	d82c      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f86:	d031      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8c:	d826      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f92:	d02d      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004f94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f98:	d820      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f9e:	d012      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fa4:	d81a      	bhi.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d024      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004faa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fae:	d115      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fb4:	3308      	adds	r3, #8
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 f9ad 	bl	8006318 <RCCEx_PLL2_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fc4:	e017      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fca:	3328      	adds	r3, #40	@ 0x28
 8004fcc:	2101      	movs	r1, #1
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 fa54 	bl	800647c <RCCEx_PLL3_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004fda:	e00c      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fe4:	bf00      	nop
 8004fe6:	e006      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fe8:	bf00      	nop
 8004fea:	e004      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004fec:	bf00      	nop
 8004fee:	e002      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ff0:	bf00      	nop
 8004ff2:	e000      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10e      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ffe:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005002:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005006:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800500a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800500e:	4a02      	ldr	r2, [pc, #8]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005010:	430b      	orrs	r3, r1
 8005012:	6593      	str	r3, [r2, #88]	@ 0x58
 8005014:	e006      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005020:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005034:	2300      	movs	r3, #0
 8005036:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800503a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800503e:	460b      	mov	r3, r1
 8005040:	4313      	orrs	r3, r2
 8005042:	d037      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005048:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800504a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800504e:	d00e      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005054:	d816      	bhi.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d018      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800505a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800505e:	d111      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005060:	4bc4      	ldr	r3, [pc, #784]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	4ac3      	ldr	r2, [pc, #780]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800506a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800506c:	e00f      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800506e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005072:	3308      	adds	r3, #8
 8005074:	2101      	movs	r1, #1
 8005076:	4618      	mov	r0, r3
 8005078:	f001 f94e 	bl	8006318 <RCCEx_PLL2_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005082:	e004      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800508a:	e000      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800508c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800508e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005096:	4bb7      	ldr	r3, [pc, #732]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800509a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800509e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050a4:	4ab3      	ldr	r2, [pc, #716]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050a6:	430b      	orrs	r3, r1
 80050a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80050aa:	e003      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80050b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80050b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80050c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80050ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4313      	orrs	r3, r2
 80050d2:	d039      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80050d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d81c      	bhi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80050de:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	08005121 	.word	0x08005121
 80050e8:	080050f5 	.word	0x080050f5
 80050ec:	08005103 	.word	0x08005103
 80050f0:	08005121 	.word	0x08005121
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f4:	4b9f      	ldr	r3, [pc, #636]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f8:	4a9e      	ldr	r2, [pc, #632]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005100:	e00f      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005106:	3308      	adds	r3, #8
 8005108:	2102      	movs	r1, #2
 800510a:	4618      	mov	r0, r3
 800510c:	f001 f904 	bl	8006318 <RCCEx_PLL2_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005116:	e004      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800511e:	e000      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005122:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10a      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800512a:	4b92      	ldr	r3, [pc, #584]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800512c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512e:	f023 0103 	bic.w	r1, r3, #3
 8005132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005138:	4a8e      	ldr	r2, [pc, #568]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800513a:	430b      	orrs	r3, r1
 800513c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800513e:	e003      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005144:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005154:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005158:	2300      	movs	r3, #0
 800515a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800515e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005162:	460b      	mov	r3, r1
 8005164:	4313      	orrs	r3, r2
 8005166:	f000 8099 	beq.w	800529c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800516a:	4b83      	ldr	r3, [pc, #524]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a82      	ldr	r2, [pc, #520]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005174:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005176:	f7fd fb49 	bl	800280c <HAL_GetTick>
 800517a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800517e:	e00b      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005180:	f7fd fb44 	bl	800280c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b64      	cmp	r3, #100	@ 0x64
 800518e:	d903      	bls.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005196:	e005      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005198:	4b77      	ldr	r3, [pc, #476]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0ed      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80051a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d173      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80051ac:	4b71      	ldr	r3, [pc, #452]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80051b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051b8:	4053      	eors	r3, r2
 80051ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d015      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051c2:	4b6c      	ldr	r3, [pc, #432]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051ce:	4b69      	ldr	r3, [pc, #420]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	4a68      	ldr	r2, [pc, #416]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051da:	4b66      	ldr	r3, [pc, #408]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	4a65      	ldr	r2, [pc, #404]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051e6:	4a63      	ldr	r2, [pc, #396]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80051e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051fa:	d118      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fd fb06 	bl	800280c <HAL_GetTick>
 8005200:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005204:	e00d      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f7fd fb01 	bl	800280c <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005210:	1ad2      	subs	r2, r2, r3
 8005212:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005216:	429a      	cmp	r2, r3
 8005218:	d903      	bls.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8005220:	e005      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005222:	4b54      	ldr	r3, [pc, #336]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0eb      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800522e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005232:	2b00      	cmp	r3, #0
 8005234:	d129      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005236:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800523a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800523e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005246:	d10e      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005248:	4b4a      	ldr	r3, [pc, #296]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005258:	091a      	lsrs	r2, r3, #4
 800525a:	4b48      	ldr	r3, [pc, #288]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800525c:	4013      	ands	r3, r2
 800525e:	4a45      	ldr	r2, [pc, #276]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005260:	430b      	orrs	r3, r1
 8005262:	6113      	str	r3, [r2, #16]
 8005264:	e005      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005266:	4b43      	ldr	r3, [pc, #268]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	4a42      	ldr	r2, [pc, #264]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800526c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005270:	6113      	str	r3, [r2, #16]
 8005272:	4b40      	ldr	r3, [pc, #256]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005274:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005276:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800527a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800527e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005282:	4a3c      	ldr	r2, [pc, #240]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005284:	430b      	orrs	r3, r1
 8005286:	6713      	str	r3, [r2, #112]	@ 0x70
 8005288:	e008      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800528a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800528e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005292:	e003      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005294:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005298:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800529c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f002 0301 	and.w	r3, r2, #1
 80052a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ac:	2300      	movs	r3, #0
 80052ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f000 8090 	beq.w	80053de <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80052be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052c6:	2b28      	cmp	r3, #40	@ 0x28
 80052c8:	d870      	bhi.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80052ca:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80052cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d0:	080053b5 	.word	0x080053b5
 80052d4:	080053ad 	.word	0x080053ad
 80052d8:	080053ad 	.word	0x080053ad
 80052dc:	080053ad 	.word	0x080053ad
 80052e0:	080053ad 	.word	0x080053ad
 80052e4:	080053ad 	.word	0x080053ad
 80052e8:	080053ad 	.word	0x080053ad
 80052ec:	080053ad 	.word	0x080053ad
 80052f0:	08005381 	.word	0x08005381
 80052f4:	080053ad 	.word	0x080053ad
 80052f8:	080053ad 	.word	0x080053ad
 80052fc:	080053ad 	.word	0x080053ad
 8005300:	080053ad 	.word	0x080053ad
 8005304:	080053ad 	.word	0x080053ad
 8005308:	080053ad 	.word	0x080053ad
 800530c:	080053ad 	.word	0x080053ad
 8005310:	08005397 	.word	0x08005397
 8005314:	080053ad 	.word	0x080053ad
 8005318:	080053ad 	.word	0x080053ad
 800531c:	080053ad 	.word	0x080053ad
 8005320:	080053ad 	.word	0x080053ad
 8005324:	080053ad 	.word	0x080053ad
 8005328:	080053ad 	.word	0x080053ad
 800532c:	080053ad 	.word	0x080053ad
 8005330:	080053b5 	.word	0x080053b5
 8005334:	080053ad 	.word	0x080053ad
 8005338:	080053ad 	.word	0x080053ad
 800533c:	080053ad 	.word	0x080053ad
 8005340:	080053ad 	.word	0x080053ad
 8005344:	080053ad 	.word	0x080053ad
 8005348:	080053ad 	.word	0x080053ad
 800534c:	080053ad 	.word	0x080053ad
 8005350:	080053b5 	.word	0x080053b5
 8005354:	080053ad 	.word	0x080053ad
 8005358:	080053ad 	.word	0x080053ad
 800535c:	080053ad 	.word	0x080053ad
 8005360:	080053ad 	.word	0x080053ad
 8005364:	080053ad 	.word	0x080053ad
 8005368:	080053ad 	.word	0x080053ad
 800536c:	080053ad 	.word	0x080053ad
 8005370:	080053b5 	.word	0x080053b5
 8005374:	58024400 	.word	0x58024400
 8005378:	58024800 	.word	0x58024800
 800537c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005384:	3308      	adds	r3, #8
 8005386:	2101      	movs	r1, #1
 8005388:	4618      	mov	r0, r3
 800538a:	f000 ffc5 	bl	8006318 <RCCEx_PLL2_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005394:	e00f      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800539a:	3328      	adds	r3, #40	@ 0x28
 800539c:	2101      	movs	r1, #1
 800539e:	4618      	mov	r0, r3
 80053a0:	f001 f86c 	bl	800647c <RCCEx_PLL3_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80053aa:	e004      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053b2:	e000      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80053b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053be:	4bc0      	ldr	r3, [pc, #768]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80053c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ce:	4abc      	ldr	r2, [pc, #752]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80053d4:	e003      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80053da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f002 0302 	and.w	r3, r2, #2
 80053ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053ee:	2300      	movs	r3, #0
 80053f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80053f4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80053f8:	460b      	mov	r3, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	d043      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80053fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005406:	2b05      	cmp	r3, #5
 8005408:	d824      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800540a:	a201      	add	r2, pc, #4	@ (adr r2, 8005410 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	0800545d 	.word	0x0800545d
 8005414:	08005429 	.word	0x08005429
 8005418:	0800543f 	.word	0x0800543f
 800541c:	0800545d 	.word	0x0800545d
 8005420:	0800545d 	.word	0x0800545d
 8005424:	0800545d 	.word	0x0800545d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800542c:	3308      	adds	r3, #8
 800542e:	2101      	movs	r1, #1
 8005430:	4618      	mov	r0, r3
 8005432:	f000 ff71 	bl	8006318 <RCCEx_PLL2_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800543c:	e00f      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800543e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005442:	3328      	adds	r3, #40	@ 0x28
 8005444:	2101      	movs	r1, #1
 8005446:	4618      	mov	r0, r3
 8005448:	f001 f818 	bl	800647c <RCCEx_PLL3_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005452:	e004      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800545c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005466:	4b96      	ldr	r3, [pc, #600]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	f023 0107 	bic.w	r1, r3, #7
 800546e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005476:	4a92      	ldr	r2, [pc, #584]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005478:	430b      	orrs	r3, r1
 800547a:	6553      	str	r3, [r2, #84]	@ 0x54
 800547c:	e003      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005482:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f002 0304 	and.w	r3, r2, #4
 8005492:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005496:	2300      	movs	r3, #0
 8005498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800549c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4313      	orrs	r3, r2
 80054a4:	d043      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80054a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d824      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80054b2:	a201      	add	r2, pc, #4	@ (adr r2, 80054b8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	08005505 	.word	0x08005505
 80054bc:	080054d1 	.word	0x080054d1
 80054c0:	080054e7 	.word	0x080054e7
 80054c4:	08005505 	.word	0x08005505
 80054c8:	08005505 	.word	0x08005505
 80054cc:	08005505 	.word	0x08005505
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054d4:	3308      	adds	r3, #8
 80054d6:	2101      	movs	r1, #1
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 ff1d 	bl	8006318 <RCCEx_PLL2_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054e4:	e00f      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054ea:	3328      	adds	r3, #40	@ 0x28
 80054ec:	2101      	movs	r1, #1
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 ffc4 	bl	800647c <RCCEx_PLL3_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80054fa:	e004      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005502:	e000      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005506:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10b      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800550e:	4b6c      	ldr	r3, [pc, #432]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005512:	f023 0107 	bic.w	r1, r3, #7
 8005516:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800551a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800551e:	4a68      	ldr	r2, [pc, #416]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005520:	430b      	orrs	r3, r1
 8005522:	6593      	str	r3, [r2, #88]	@ 0x58
 8005524:	e003      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005526:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800552a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800552e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f002 0320 	and.w	r3, r2, #32
 800553a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800553e:	2300      	movs	r3, #0
 8005540:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005544:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005548:	460b      	mov	r3, r1
 800554a:	4313      	orrs	r3, r2
 800554c:	d055      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800554e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005552:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800555a:	d033      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800555c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005560:	d82c      	bhi.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005566:	d02f      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556c:	d826      	bhi.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800556e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005572:	d02b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005574:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005578:	d820      	bhi.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800557a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800557e:	d012      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8005580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005584:	d81a      	bhi.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d022      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800558a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800558e:	d115      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005590:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005594:	3308      	adds	r3, #8
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f000 febd 	bl	8006318 <RCCEx_PLL2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80055a4:	e015      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055aa:	3328      	adds	r3, #40	@ 0x28
 80055ac:	2102      	movs	r1, #2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 ff64 	bl	800647c <RCCEx_PLL3_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80055ba:	e00a      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80055c2:	e006      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80055c4:	bf00      	nop
 80055c6:	e004      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80055c8:	bf00      	nop
 80055ca:	e002      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80055cc:	bf00      	nop
 80055ce:	e000      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80055d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055da:	4b39      	ldr	r3, [pc, #228]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80055e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055ea:	4a35      	ldr	r2, [pc, #212]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80055ec:	430b      	orrs	r3, r1
 80055ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80055f0:	e003      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80055f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80055fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005602:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800560a:	2300      	movs	r3, #0
 800560c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005610:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005614:	460b      	mov	r3, r1
 8005616:	4313      	orrs	r3, r2
 8005618:	d058      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800561a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800561e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005622:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005626:	d033      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005628:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800562c:	d82c      	bhi.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005632:	d02f      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005638:	d826      	bhi.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800563a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800563e:	d02b      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005640:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005644:	d820      	bhi.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005646:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800564a:	d012      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800564c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005650:	d81a      	bhi.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d022      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800565a:	d115      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800565c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005660:	3308      	adds	r3, #8
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fe57 	bl	8006318 <RCCEx_PLL2_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005670:	e015      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005676:	3328      	adds	r3, #40	@ 0x28
 8005678:	2102      	movs	r1, #2
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fefe 	bl	800647c <RCCEx_PLL3_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005686:	e00a      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800568e:	e006      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005690:	bf00      	nop
 8005692:	e004      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005694:	bf00      	nop
 8005696:	e002      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005698:	bf00      	nop
 800569a:	e000      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800569c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800569e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10e      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056a6:	4b06      	ldr	r3, [pc, #24]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056aa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80056ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056b6:	4a02      	ldr	r2, [pc, #8]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80056bc:	e006      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80056be:	bf00      	nop
 80056c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056c8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80056d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056dc:	2300      	movs	r3, #0
 80056de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80056e6:	460b      	mov	r3, r1
 80056e8:	4313      	orrs	r3, r2
 80056ea:	d055      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80056ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056f4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80056f8:	d033      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80056fa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80056fe:	d82c      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005700:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005704:	d02f      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800570a:	d826      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800570c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005710:	d02b      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005712:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005716:	d820      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800571c:	d012      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800571e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005722:	d81a      	bhi.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d022      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800572c:	d115      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800572e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005732:	3308      	adds	r3, #8
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fdee 	bl	8006318 <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005742:	e015      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005748:	3328      	adds	r3, #40	@ 0x28
 800574a:	2102      	movs	r1, #2
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fe95 	bl	800647c <RCCEx_PLL3_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005758:	e00a      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005760:	e006      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005762:	bf00      	nop
 8005764:	e004      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800576e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005770:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10b      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005778:	4ba1      	ldr	r3, [pc, #644]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800577a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800577c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005784:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005788:	4a9d      	ldr	r2, [pc, #628]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800578a:	430b      	orrs	r3, r1
 800578c:	6593      	str	r3, [r2, #88]	@ 0x58
 800578e:	e003      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005790:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005794:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	f002 0308 	and.w	r3, r2, #8
 80057a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057a8:	2300      	movs	r3, #0
 80057aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80057b2:	460b      	mov	r3, r1
 80057b4:	4313      	orrs	r3, r2
 80057b6:	d01e      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80057b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057c4:	d10c      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ca:	3328      	adds	r3, #40	@ 0x28
 80057cc:	2102      	movs	r1, #2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fe54 	bl	800647c <RCCEx_PLL3_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057e0:	4b87      	ldr	r3, [pc, #540]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057f0:	4a83      	ldr	r2, [pc, #524]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f002 0310 	and.w	r3, r2, #16
 8005802:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005806:	2300      	movs	r3, #0
 8005808:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800580c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005810:	460b      	mov	r3, r1
 8005812:	4313      	orrs	r3, r2
 8005814:	d01e      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005816:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800581a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800581e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005822:	d10c      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005828:	3328      	adds	r3, #40	@ 0x28
 800582a:	2102      	movs	r1, #2
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fe25 	bl	800647c <RCCEx_PLL3_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800583e:	4b70      	ldr	r3, [pc, #448]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005842:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800584a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800584e:	4a6c      	ldr	r2, [pc, #432]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005850:	430b      	orrs	r3, r1
 8005852:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005860:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005864:	2300      	movs	r3, #0
 8005866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800586a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800586e:	460b      	mov	r3, r1
 8005870:	4313      	orrs	r3, r2
 8005872:	d03e      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800587c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005880:	d022      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8005882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005886:	d81b      	bhi.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800588c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005890:	d00b      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005892:	e015      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005898:	3308      	adds	r3, #8
 800589a:	2100      	movs	r1, #0
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fd3b 	bl	8006318 <RCCEx_PLL2_Config>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80058a8:	e00f      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058ae:	3328      	adds	r3, #40	@ 0x28
 80058b0:	2102      	movs	r1, #2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fde2 	bl	800647c <RCCEx_PLL3_Config>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80058be:	e004      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80058c6:	e000      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80058c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80058da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058e2:	4a47      	ldr	r2, [pc, #284]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80058e4:	430b      	orrs	r3, r1
 80058e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80058e8:	e003      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80058ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80058fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005900:	2300      	movs	r3, #0
 8005902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005904:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005908:	460b      	mov	r3, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	d03b      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800590e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005916:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800591a:	d01f      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800591c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005920:	d818      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005926:	d003      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005928:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800592c:	d007      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800592e:	e011      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005930:	4b33      	ldr	r3, [pc, #204]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	4a32      	ldr	r2, [pc, #200]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800593a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800593c:	e00f      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800593e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005942:	3328      	adds	r3, #40	@ 0x28
 8005944:	2101      	movs	r1, #1
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fd98 	bl	800647c <RCCEx_PLL3_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005952:	e004      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800595a:	e000      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800595c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10b      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005966:	4b26      	ldr	r3, [pc, #152]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800596e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005976:	4a22      	ldr	r2, [pc, #136]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005978:	430b      	orrs	r3, r1
 800597a:	6553      	str	r3, [r2, #84]	@ 0x54
 800597c:	e003      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005982:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005992:	673b      	str	r3, [r7, #112]	@ 0x70
 8005994:	2300      	movs	r3, #0
 8005996:	677b      	str	r3, [r7, #116]	@ 0x74
 8005998:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	d034      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80059a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80059ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b0:	d007      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80059b2:	e011      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b4:	4b12      	ldr	r3, [pc, #72]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b8:	4a11      	ldr	r2, [pc, #68]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059c0:	e00e      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059c6:	3308      	adds	r3, #8
 80059c8:	2102      	movs	r1, #2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fca4 	bl	8006318 <RCCEx_PLL2_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80059d6:	e003      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80059de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10d      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059e8:	4b05      	ldr	r3, [pc, #20]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f6:	4a02      	ldr	r2, [pc, #8]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059f8:	430b      	orrs	r3, r1
 80059fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059fc:	e006      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80059fe:	bf00      	nop
 8005a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005a18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a1e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005a22:	460b      	mov	r3, r1
 8005a24:	4313      	orrs	r3, r2
 8005a26:	d00c      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a2c:	3328      	adds	r3, #40	@ 0x28
 8005a2e:	2102      	movs	r1, #2
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fd23 	bl	800647c <RCCEx_PLL3_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005a4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a50:	2300      	movs	r3, #0
 8005a52:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	d038      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a6a:	d018      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8005a6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a70:	d811      	bhi.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005a72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a76:	d014      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8005a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a7c:	d80b      	bhi.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d011      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8005a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a86:	d106      	bne.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a88:	4bc3      	ldr	r3, [pc, #780]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8c:	4ac2      	ldr	r2, [pc, #776]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a94:	e008      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005a9c:	e004      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005a9e:	bf00      	nop
 8005aa0:	e002      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005aa2:	bf00      	nop
 8005aa4:	e000      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10b      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ab0:	4bb9      	ldr	r3, [pc, #740]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac0:	4ab5      	ldr	r2, [pc, #724]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ac6:	e003      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005acc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ade:	2300      	movs	r3, #0
 8005ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ae2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	d009      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005aec:	4baa      	ldr	r3, [pc, #680]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005af8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005afa:	4aa7      	ldr	r2, [pc, #668]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b08:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005b0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b0e:	2300      	movs	r3, #0
 8005b10:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b12:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005b16:	460b      	mov	r3, r1
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	d009      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b1c:	4b9e      	ldr	r3, [pc, #632]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b20:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2a:	4a9b      	ldr	r2, [pc, #620]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b3e:	2300      	movs	r3, #0
 8005b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	d009      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005b4c:	4b92      	ldr	r3, [pc, #584]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b50:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8005b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b5a:	4a8f      	ldr	r2, [pc, #572]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b6e:	2300      	movs	r3, #0
 8005b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005b76:	460b      	mov	r3, r1
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b7c:	4b86      	ldr	r3, [pc, #536]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	4a85      	ldr	r2, [pc, #532]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b86:	6113      	str	r3, [r2, #16]
 8005b88:	4b83      	ldr	r3, [pc, #524]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b8a:	6919      	ldr	r1, [r3, #16]
 8005b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b94:	4a80      	ldr	r2, [pc, #512]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005b96:	430b      	orrs	r3, r1
 8005b98:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ba8:	2300      	movs	r3, #0
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005bb6:	4b78      	ldr	r3, [pc, #480]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc4:	4a74      	ldr	r2, [pc, #464]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bd8:	2300      	movs	r3, #0
 8005bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bdc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005be0:	460b      	mov	r3, r1
 8005be2:	4313      	orrs	r3, r2
 8005be4:	d00a      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005be6:	4b6c      	ldr	r3, [pc, #432]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bf6:	4a68      	ldr	r2, [pc, #416]	@ (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	2100      	movs	r1, #0
 8005c06:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c0e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005c12:	460b      	mov	r3, r1
 8005c14:	4313      	orrs	r3, r2
 8005c16:	d011      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fb79 	bl	8006318 <RCCEx_PLL2_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	2100      	movs	r1, #0
 8005c46:	6239      	str	r1, [r7, #32]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c52:	460b      	mov	r3, r1
 8005c54:	4313      	orrs	r3, r2
 8005c56:	d011      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	2101      	movs	r1, #1
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fb59 	bl	8006318 <RCCEx_PLL2_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005c78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	2100      	movs	r1, #0
 8005c86:	61b9      	str	r1, [r7, #24]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c92:	460b      	mov	r3, r1
 8005c94:	4313      	orrs	r3, r2
 8005c96:	d011      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	2102      	movs	r1, #2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fb39 	bl	8006318 <RCCEx_PLL2_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005cac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cb8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	6139      	str	r1, [r7, #16]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	d011      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005cdc:	3328      	adds	r3, #40	@ 0x28
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fbcb 	bl	800647c <RCCEx_PLL3_Config>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005cec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005cf8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	2100      	movs	r1, #0
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d12:	460b      	mov	r3, r1
 8005d14:	4313      	orrs	r3, r2
 8005d16:	d011      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d1c:	3328      	adds	r3, #40	@ 0x28
 8005d1e:	2101      	movs	r1, #1
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fbab 	bl	800647c <RCCEx_PLL3_Config>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005d2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	2100      	movs	r1, #0
 8005d46:	6039      	str	r1, [r7, #0]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	607b      	str	r3, [r7, #4]
 8005d4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d52:	460b      	mov	r3, r1
 8005d54:	4313      	orrs	r3, r2
 8005d56:	d011      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d5c:	3328      	adds	r3, #40	@ 0x28
 8005d5e:	2102      	movs	r1, #2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fb8b 	bl	800647c <RCCEx_PLL3_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005d6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005d78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005d7c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d101      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005d90:	46bd      	mov	sp, r7
 8005d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d96:	bf00      	nop
 8005d98:	58024400 	.word	0x58024400

08005d9c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005da0:	f7fe fde2 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 8005da4:	4602      	mov	r2, r0
 8005da6:	4b06      	ldr	r3, [pc, #24]	@ (8005dc0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	091b      	lsrs	r3, r3, #4
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	4904      	ldr	r1, [pc, #16]	@ (8005dc4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005db2:	5ccb      	ldrb	r3, [r1, r3]
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	58024400 	.word	0x58024400
 8005dc4:	0800a128 	.word	0x0800a128

08005dc8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b089      	sub	sp, #36	@ 0x24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dd0:	4ba1      	ldr	r3, [pc, #644]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005dda:	4b9f      	ldr	r3, [pc, #636]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dde:	0b1b      	lsrs	r3, r3, #12
 8005de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005de4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005de6:	4b9c      	ldr	r3, [pc, #624]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dea:	091b      	lsrs	r3, r3, #4
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005df2:	4b99      	ldr	r3, [pc, #612]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df6:	08db      	lsrs	r3, r3, #3
 8005df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 8111 	beq.w	8006038 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	f000 8083 	beq.w	8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	f200 80a1 	bhi.w	8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d056      	beq.n	8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005e32:	e099      	b.n	8005f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e34:	4b88      	ldr	r3, [pc, #544]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d02d      	beq.n	8005e9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e40:	4b85      	ldr	r3, [pc, #532]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	08db      	lsrs	r3, r3, #3
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	4a84      	ldr	r2, [pc, #528]	@ (800605c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	ee07 3a90 	vmov	s15, r3
 8005e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6a:	4b7b      	ldr	r3, [pc, #492]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e9a:	e087      	b.n	8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eae:	4b6a      	ldr	r3, [pc, #424]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ede:	e065      	b.n	8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef2:	4b59      	ldr	r3, [pc, #356]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f22:	e043      	b.n	8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800606c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b48      	ldr	r3, [pc, #288]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f66:	e021      	b.n	8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b37      	ldr	r3, [pc, #220]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005faa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005fac:	4b2a      	ldr	r3, [pc, #168]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb0:	0a5b      	lsrs	r3, r3, #9
 8005fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd2:	ee17 2a90 	vmov	r2, s15
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005fda:	4b1f      	ldr	r3, [pc, #124]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fde:	0c1b      	lsrs	r3, r3, #16
 8005fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fe4:	ee07 3a90 	vmov	s15, r3
 8005fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ff4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006000:	ee17 2a90 	vmov	r2, s15
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006008:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600c:	0e1b      	lsrs	r3, r3, #24
 800600e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800601e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006022:	edd7 6a07 	vldr	s13, [r7, #28]
 8006026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800602a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800602e:	ee17 2a90 	vmov	r2, s15
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006036:	e008      	b.n	800604a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	609a      	str	r2, [r3, #8]
}
 800604a:	bf00      	nop
 800604c:	3724      	adds	r7, #36	@ 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	58024400 	.word	0x58024400
 800605c:	03d09000 	.word	0x03d09000
 8006060:	46000000 	.word	0x46000000
 8006064:	4c742400 	.word	0x4c742400
 8006068:	4a742400 	.word	0x4a742400
 800606c:	4af42400 	.word	0x4af42400

08006070 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006070:	b480      	push	{r7}
 8006072:	b089      	sub	sp, #36	@ 0x24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006078:	4ba1      	ldr	r3, [pc, #644]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006082:	4b9f      	ldr	r3, [pc, #636]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006086:	0d1b      	lsrs	r3, r3, #20
 8006088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800608c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800608e:	4b9c      	ldr	r3, [pc, #624]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	0a1b      	lsrs	r3, r3, #8
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800609a:	4b99      	ldr	r3, [pc, #612]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800609c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609e:	08db      	lsrs	r3, r3, #3
 80060a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	fb02 f303 	mul.w	r3, r2, r3
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8111 	beq.w	80062e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	f000 8083 	beq.w	80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	f200 80a1 	bhi.w	8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d056      	beq.n	8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80060da:	e099      	b.n	8006210 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060dc:	4b88      	ldr	r3, [pc, #544]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d02d      	beq.n	8006144 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060e8:	4b85      	ldr	r3, [pc, #532]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	08db      	lsrs	r3, r3, #3
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	4a84      	ldr	r2, [pc, #528]	@ (8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80060f4:	fa22 f303 	lsr.w	r3, r2, r3
 80060f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	ee07 3a90 	vmov	s15, r3
 8006100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006112:	4b7b      	ldr	r3, [pc, #492]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006122:	ed97 6a03 	vldr	s12, [r7, #12]
 8006126:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800612a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800612e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800613a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006142:	e087      	b.n	8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800630c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006156:	4b6a      	ldr	r3, [pc, #424]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006166:	ed97 6a03 	vldr	s12, [r7, #12]
 800616a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800616e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800617a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800617e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006186:	e065      	b.n	8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006192:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800619a:	4b59      	ldr	r3, [pc, #356]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800619c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ca:	e043      	b.n	8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	ee07 3a90 	vmov	s15, r3
 80061d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80061da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061de:	4b48      	ldr	r3, [pc, #288]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80061f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800620a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800620e:	e021      	b.n	8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800621e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006222:	4b37      	ldr	r3, [pc, #220]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006232:	ed97 6a03 	vldr	s12, [r7, #12]
 8006236:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006308 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800623a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006252:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006254:	4b2a      	ldr	r3, [pc, #168]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006258:	0a5b      	lsrs	r3, r3, #9
 800625a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800625e:	ee07 3a90 	vmov	s15, r3
 8006262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800626a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800626e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800627a:	ee17 2a90 	vmov	r2, s15
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006282:	4b1f      	ldr	r3, [pc, #124]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006286:	0c1b      	lsrs	r3, r3, #16
 8006288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800628c:	ee07 3a90 	vmov	s15, r3
 8006290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006294:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006298:	ee37 7a87 	vadd.f32	s14, s15, s14
 800629c:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062a8:	ee17 2a90 	vmov	r2, s15
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80062b0:	4b13      	ldr	r3, [pc, #76]	@ (8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b4:	0e1b      	lsrs	r3, r3, #24
 80062b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ba:	ee07 3a90 	vmov	s15, r3
 80062be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d6:	ee17 2a90 	vmov	r2, s15
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062de:	e008      	b.n	80062f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	609a      	str	r2, [r3, #8]
}
 80062f2:	bf00      	nop
 80062f4:	3724      	adds	r7, #36	@ 0x24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	58024400 	.word	0x58024400
 8006304:	03d09000 	.word	0x03d09000
 8006308:	46000000 	.word	0x46000000
 800630c:	4c742400 	.word	0x4c742400
 8006310:	4a742400 	.word	0x4a742400
 8006314:	4af42400 	.word	0x4af42400

08006318 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006326:	4b53      	ldr	r3, [pc, #332]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 8006328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	2b03      	cmp	r3, #3
 8006330:	d101      	bne.n	8006336 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e099      	b.n	800646a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006336:	4b4f      	ldr	r3, [pc, #316]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a4e      	ldr	r2, [pc, #312]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 800633c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006342:	f7fc fa63 	bl	800280c <HAL_GetTick>
 8006346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006348:	e008      	b.n	800635c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800634a:	f7fc fa5f 	bl	800280c <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e086      	b.n	800646a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800635c:	4b45      	ldr	r3, [pc, #276]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1f0      	bne.n	800634a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006368:	4b42      	ldr	r3, [pc, #264]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	493f      	ldr	r1, [pc, #252]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 8006378:	4313      	orrs	r3, r2
 800637a:	628b      	str	r3, [r1, #40]	@ 0x28
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	3b01      	subs	r3, #1
 8006382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	3b01      	subs	r3, #1
 800638c:	025b      	lsls	r3, r3, #9
 800638e:	b29b      	uxth	r3, r3
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	3b01      	subs	r3, #1
 8006398:	041b      	lsls	r3, r3, #16
 800639a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800639e:	431a      	orrs	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	061b      	lsls	r3, r3, #24
 80063a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063ac:	4931      	ldr	r1, [pc, #196]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80063b2:	4b30      	ldr	r3, [pc, #192]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	492d      	ldr	r1, [pc, #180]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80063c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c8:	f023 0220 	bic.w	r2, r3, #32
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	4928      	ldr	r1, [pc, #160]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80063d6:	4b27      	ldr	r3, [pc, #156]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063da:	4a26      	ldr	r2, [pc, #152]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063dc:	f023 0310 	bic.w	r3, r3, #16
 80063e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80063e2:	4b24      	ldr	r3, [pc, #144]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063e6:	4b24      	ldr	r3, [pc, #144]	@ (8006478 <RCCEx_PLL2_Config+0x160>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	69d2      	ldr	r2, [r2, #28]
 80063ee:	00d2      	lsls	r2, r2, #3
 80063f0:	4920      	ldr	r1, [pc, #128]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80063f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 80063fc:	f043 0310 	orr.w	r3, r3, #16
 8006400:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d106      	bne.n	8006416 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006408:	4b1a      	ldr	r3, [pc, #104]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	4a19      	ldr	r2, [pc, #100]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 800640e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006412:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006414:	e00f      	b.n	8006436 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d106      	bne.n	800642a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800641c:	4b15      	ldr	r3, [pc, #84]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 800641e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006420:	4a14      	ldr	r2, [pc, #80]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 8006422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006426:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006428:	e005      	b.n	8006436 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800642a:	4b12      	ldr	r3, [pc, #72]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	4a11      	ldr	r2, [pc, #68]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 8006430:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006434:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006436:	4b0f      	ldr	r3, [pc, #60]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a0e      	ldr	r2, [pc, #56]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 800643c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006442:	f7fc f9e3 	bl	800280c <HAL_GetTick>
 8006446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006448:	e008      	b.n	800645c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800644a:	f7fc f9df 	bl	800280c <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e006      	b.n	800646a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800645c:	4b05      	ldr	r3, [pc, #20]	@ (8006474 <RCCEx_PLL2_Config+0x15c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006468:	7bfb      	ldrb	r3, [r7, #15]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	58024400 	.word	0x58024400
 8006478:	ffff0007 	.word	0xffff0007

0800647c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800648a:	4b53      	ldr	r3, [pc, #332]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 800648c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	2b03      	cmp	r3, #3
 8006494:	d101      	bne.n	800649a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e099      	b.n	80065ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800649a:	4b4f      	ldr	r3, [pc, #316]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a4e      	ldr	r2, [pc, #312]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 80064a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a6:	f7fc f9b1 	bl	800280c <HAL_GetTick>
 80064aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064ac:	e008      	b.n	80064c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064ae:	f7fc f9ad 	bl	800280c <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e086      	b.n	80065ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064c0:	4b45      	ldr	r3, [pc, #276]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1f0      	bne.n	80064ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80064cc:	4b42      	ldr	r3, [pc, #264]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 80064ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	051b      	lsls	r3, r3, #20
 80064da:	493f      	ldr	r1, [pc, #252]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	628b      	str	r3, [r1, #40]	@ 0x28
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	025b      	lsls	r3, r3, #9
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	3b01      	subs	r3, #1
 800650a:	061b      	lsls	r3, r3, #24
 800650c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006510:	4931      	ldr	r1, [pc, #196]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006512:	4313      	orrs	r3, r2
 8006514:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006516:	4b30      	ldr	r3, [pc, #192]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	492d      	ldr	r1, [pc, #180]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006524:	4313      	orrs	r3, r2
 8006526:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006528:	4b2b      	ldr	r3, [pc, #172]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	4928      	ldr	r1, [pc, #160]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006536:	4313      	orrs	r3, r2
 8006538:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800653a:	4b27      	ldr	r3, [pc, #156]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	4a26      	ldr	r2, [pc, #152]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006544:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006546:	4b24      	ldr	r3, [pc, #144]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800654a:	4b24      	ldr	r3, [pc, #144]	@ (80065dc <RCCEx_PLL3_Config+0x160>)
 800654c:	4013      	ands	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	69d2      	ldr	r2, [r2, #28]
 8006552:	00d2      	lsls	r2, r2, #3
 8006554:	4920      	ldr	r1, [pc, #128]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006556:	4313      	orrs	r3, r2
 8006558:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800655a:	4b1f      	ldr	r3, [pc, #124]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	4a1e      	ldr	r2, [pc, #120]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006564:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800656c:	4b1a      	ldr	r3, [pc, #104]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 800656e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006570:	4a19      	ldr	r2, [pc, #100]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006572:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006576:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006578:	e00f      	b.n	800659a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d106      	bne.n	800658e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006580:	4b15      	ldr	r3, [pc, #84]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006584:	4a14      	ldr	r2, [pc, #80]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006586:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800658a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800658c:	e005      	b.n	800659a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800658e:	4b12      	ldr	r3, [pc, #72]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	4a11      	ldr	r2, [pc, #68]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 8006594:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006598:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800659a:	4b0f      	ldr	r3, [pc, #60]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a0e      	ldr	r2, [pc, #56]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 80065a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a6:	f7fc f931 	bl	800280c <HAL_GetTick>
 80065aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065ac:	e008      	b.n	80065c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80065ae:	f7fc f92d 	bl	800280c <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e006      	b.n	80065ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80065c0:	4b05      	ldr	r3, [pc, #20]	@ (80065d8 <RCCEx_PLL3_Config+0x15c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f0      	beq.n	80065ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	ffff0007 	.word	0xffff0007

080065e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e049      	b.n	8006686 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fb fdb4 	bl	8002174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f001 f9e8 	bl	80079f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e049      	b.n	8006734 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d106      	bne.n	80066ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f841 	bl	800673c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4619      	mov	r1, r3
 80066cc:	4610      	mov	r0, r2
 80066ce:	f001 f991 	bl	80079f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <HAL_TIM_PWM_Start+0x24>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b01      	cmp	r3, #1
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	e03c      	b.n	80067ee <HAL_TIM_PWM_Start+0x9e>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b04      	cmp	r3, #4
 8006778:	d109      	bne.n	800678e <HAL_TIM_PWM_Start+0x3e>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	bf14      	ite	ne
 8006786:	2301      	movne	r3, #1
 8006788:	2300      	moveq	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	e02f      	b.n	80067ee <HAL_TIM_PWM_Start+0x9e>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b08      	cmp	r3, #8
 8006792:	d109      	bne.n	80067a8 <HAL_TIM_PWM_Start+0x58>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	bf14      	ite	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	2300      	moveq	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	e022      	b.n	80067ee <HAL_TIM_PWM_Start+0x9e>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b0c      	cmp	r3, #12
 80067ac:	d109      	bne.n	80067c2 <HAL_TIM_PWM_Start+0x72>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	bf14      	ite	ne
 80067ba:	2301      	movne	r3, #1
 80067bc:	2300      	moveq	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	e015      	b.n	80067ee <HAL_TIM_PWM_Start+0x9e>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b10      	cmp	r3, #16
 80067c6:	d109      	bne.n	80067dc <HAL_TIM_PWM_Start+0x8c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	e008      	b.n	80067ee <HAL_TIM_PWM_Start+0x9e>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	bf14      	ite	ne
 80067e8:	2301      	movne	r3, #1
 80067ea:	2300      	moveq	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e0a1      	b.n	800693a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <HAL_TIM_PWM_Start+0xb6>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006804:	e023      	b.n	800684e <HAL_TIM_PWM_Start+0xfe>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d104      	bne.n	8006816 <HAL_TIM_PWM_Start+0xc6>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006814:	e01b      	b.n	800684e <HAL_TIM_PWM_Start+0xfe>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b08      	cmp	r3, #8
 800681a:	d104      	bne.n	8006826 <HAL_TIM_PWM_Start+0xd6>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006824:	e013      	b.n	800684e <HAL_TIM_PWM_Start+0xfe>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b0c      	cmp	r3, #12
 800682a:	d104      	bne.n	8006836 <HAL_TIM_PWM_Start+0xe6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006834:	e00b      	b.n	800684e <HAL_TIM_PWM_Start+0xfe>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b10      	cmp	r3, #16
 800683a:	d104      	bne.n	8006846 <HAL_TIM_PWM_Start+0xf6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006844:	e003      	b.n	800684e <HAL_TIM_PWM_Start+0xfe>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2201      	movs	r2, #1
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f001 fefa 	bl	8008650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a38      	ldr	r2, [pc, #224]	@ (8006944 <HAL_TIM_PWM_Start+0x1f4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d013      	beq.n	800688e <HAL_TIM_PWM_Start+0x13e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a37      	ldr	r2, [pc, #220]	@ (8006948 <HAL_TIM_PWM_Start+0x1f8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00e      	beq.n	800688e <HAL_TIM_PWM_Start+0x13e>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a35      	ldr	r2, [pc, #212]	@ (800694c <HAL_TIM_PWM_Start+0x1fc>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d009      	beq.n	800688e <HAL_TIM_PWM_Start+0x13e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a34      	ldr	r2, [pc, #208]	@ (8006950 <HAL_TIM_PWM_Start+0x200>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d004      	beq.n	800688e <HAL_TIM_PWM_Start+0x13e>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a32      	ldr	r2, [pc, #200]	@ (8006954 <HAL_TIM_PWM_Start+0x204>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d101      	bne.n	8006892 <HAL_TIM_PWM_Start+0x142>
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <HAL_TIM_PWM_Start+0x144>
 8006892:	2300      	movs	r3, #0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a25      	ldr	r2, [pc, #148]	@ (8006944 <HAL_TIM_PWM_Start+0x1f4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d022      	beq.n	80068f8 <HAL_TIM_PWM_Start+0x1a8>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ba:	d01d      	beq.n	80068f8 <HAL_TIM_PWM_Start+0x1a8>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a25      	ldr	r2, [pc, #148]	@ (8006958 <HAL_TIM_PWM_Start+0x208>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d018      	beq.n	80068f8 <HAL_TIM_PWM_Start+0x1a8>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a24      	ldr	r2, [pc, #144]	@ (800695c <HAL_TIM_PWM_Start+0x20c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d013      	beq.n	80068f8 <HAL_TIM_PWM_Start+0x1a8>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a22      	ldr	r2, [pc, #136]	@ (8006960 <HAL_TIM_PWM_Start+0x210>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00e      	beq.n	80068f8 <HAL_TIM_PWM_Start+0x1a8>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1a      	ldr	r2, [pc, #104]	@ (8006948 <HAL_TIM_PWM_Start+0x1f8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d009      	beq.n	80068f8 <HAL_TIM_PWM_Start+0x1a8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006964 <HAL_TIM_PWM_Start+0x214>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d004      	beq.n	80068f8 <HAL_TIM_PWM_Start+0x1a8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a16      	ldr	r2, [pc, #88]	@ (800694c <HAL_TIM_PWM_Start+0x1fc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d115      	bne.n	8006924 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006968 <HAL_TIM_PWM_Start+0x218>)
 8006900:	4013      	ands	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b06      	cmp	r3, #6
 8006908:	d015      	beq.n	8006936 <HAL_TIM_PWM_Start+0x1e6>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006910:	d011      	beq.n	8006936 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006922:	e008      	b.n	8006936 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0201 	orr.w	r2, r2, #1
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e000      	b.n	8006938 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40010400 	.word	0x40010400
 800694c:	40014000 	.word	0x40014000
 8006950:	40014400 	.word	0x40014400
 8006954:	40014800 	.word	0x40014800
 8006958:	40000400 	.word	0x40000400
 800695c:	40000800 	.word	0x40000800
 8006960:	40000c00 	.word	0x40000c00
 8006964:	40001800 	.word	0x40001800
 8006968:	00010007 	.word	0x00010007

0800696c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e049      	b.n	8006a12 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f841 	bl	8006a1a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3304      	adds	r3, #4
 80069a8:	4619      	mov	r1, r3
 80069aa:	4610      	mov	r0, r2
 80069ac:	f001 f822 	bl	80079f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
	...

08006a30 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d104      	bne.n	8006a4a <HAL_TIM_IC_Start+0x1a>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	e023      	b.n	8006a92 <HAL_TIM_IC_Start+0x62>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d104      	bne.n	8006a5a <HAL_TIM_IC_Start+0x2a>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	e01b      	b.n	8006a92 <HAL_TIM_IC_Start+0x62>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d104      	bne.n	8006a6a <HAL_TIM_IC_Start+0x3a>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	e013      	b.n	8006a92 <HAL_TIM_IC_Start+0x62>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b0c      	cmp	r3, #12
 8006a6e:	d104      	bne.n	8006a7a <HAL_TIM_IC_Start+0x4a>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	e00b      	b.n	8006a92 <HAL_TIM_IC_Start+0x62>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b10      	cmp	r3, #16
 8006a7e:	d104      	bne.n	8006a8a <HAL_TIM_IC_Start+0x5a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	e003      	b.n	8006a92 <HAL_TIM_IC_Start+0x62>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d104      	bne.n	8006aa4 <HAL_TIM_IC_Start+0x74>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	e013      	b.n	8006acc <HAL_TIM_IC_Start+0x9c>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d104      	bne.n	8006ab4 <HAL_TIM_IC_Start+0x84>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	e00b      	b.n	8006acc <HAL_TIM_IC_Start+0x9c>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d104      	bne.n	8006ac4 <HAL_TIM_IC_Start+0x94>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	e003      	b.n	8006acc <HAL_TIM_IC_Start+0x9c>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d102      	bne.n	8006ada <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d001      	beq.n	8006ade <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e097      	b.n	8006c0e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <HAL_TIM_IC_Start+0xbe>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006aec:	e023      	b.n	8006b36 <HAL_TIM_IC_Start+0x106>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d104      	bne.n	8006afe <HAL_TIM_IC_Start+0xce>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006afc:	e01b      	b.n	8006b36 <HAL_TIM_IC_Start+0x106>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d104      	bne.n	8006b0e <HAL_TIM_IC_Start+0xde>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b0c:	e013      	b.n	8006b36 <HAL_TIM_IC_Start+0x106>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b0c      	cmp	r3, #12
 8006b12:	d104      	bne.n	8006b1e <HAL_TIM_IC_Start+0xee>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b1c:	e00b      	b.n	8006b36 <HAL_TIM_IC_Start+0x106>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b10      	cmp	r3, #16
 8006b22:	d104      	bne.n	8006b2e <HAL_TIM_IC_Start+0xfe>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b2c:	e003      	b.n	8006b36 <HAL_TIM_IC_Start+0x106>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <HAL_TIM_IC_Start+0x116>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b44:	e013      	b.n	8006b6e <HAL_TIM_IC_Start+0x13e>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d104      	bne.n	8006b56 <HAL_TIM_IC_Start+0x126>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b54:	e00b      	b.n	8006b6e <HAL_TIM_IC_Start+0x13e>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	d104      	bne.n	8006b66 <HAL_TIM_IC_Start+0x136>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b64:	e003      	b.n	8006b6e <HAL_TIM_IC_Start+0x13e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2201      	movs	r2, #1
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 fd6a 	bl	8008650 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a25      	ldr	r2, [pc, #148]	@ (8006c18 <HAL_TIM_IC_Start+0x1e8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d022      	beq.n	8006bcc <HAL_TIM_IC_Start+0x19c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8e:	d01d      	beq.n	8006bcc <HAL_TIM_IC_Start+0x19c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a21      	ldr	r2, [pc, #132]	@ (8006c1c <HAL_TIM_IC_Start+0x1ec>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d018      	beq.n	8006bcc <HAL_TIM_IC_Start+0x19c>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a20      	ldr	r2, [pc, #128]	@ (8006c20 <HAL_TIM_IC_Start+0x1f0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d013      	beq.n	8006bcc <HAL_TIM_IC_Start+0x19c>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8006c24 <HAL_TIM_IC_Start+0x1f4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00e      	beq.n	8006bcc <HAL_TIM_IC_Start+0x19c>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c28 <HAL_TIM_IC_Start+0x1f8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d009      	beq.n	8006bcc <HAL_TIM_IC_Start+0x19c>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c2c <HAL_TIM_IC_Start+0x1fc>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d004      	beq.n	8006bcc <HAL_TIM_IC_Start+0x19c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8006c30 <HAL_TIM_IC_Start+0x200>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d115      	bne.n	8006bf8 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	4b18      	ldr	r3, [pc, #96]	@ (8006c34 <HAL_TIM_IC_Start+0x204>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b06      	cmp	r3, #6
 8006bdc:	d015      	beq.n	8006c0a <HAL_TIM_IC_Start+0x1da>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006be4:	d011      	beq.n	8006c0a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0201 	orr.w	r2, r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf6:	e008      	b.n	8006c0a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	e000      	b.n	8006c0c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40000400 	.word	0x40000400
 8006c20:	40000800 	.word	0x40000800
 8006c24:	40000c00 	.word	0x40000c00
 8006c28:	40010400 	.word	0x40010400
 8006c2c:	40001800 	.word	0x40001800
 8006c30:	40014000 	.word	0x40014000
 8006c34:	00010007 	.word	0x00010007

08006c38 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2200      	movs	r2, #0
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 fd00 	bl	8008650 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6a1a      	ldr	r2, [r3, #32]
 8006c56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10f      	bne.n	8006c80 <HAL_TIM_IC_Stop+0x48>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a1a      	ldr	r2, [r3, #32]
 8006c66:	f240 4344 	movw	r3, #1092	@ 0x444
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d107      	bne.n	8006c80 <HAL_TIM_IC_Stop+0x48>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0201 	bic.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d104      	bne.n	8006c90 <HAL_TIM_IC_Stop+0x58>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c8e:	e023      	b.n	8006cd8 <HAL_TIM_IC_Stop+0xa0>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d104      	bne.n	8006ca0 <HAL_TIM_IC_Stop+0x68>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c9e:	e01b      	b.n	8006cd8 <HAL_TIM_IC_Stop+0xa0>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d104      	bne.n	8006cb0 <HAL_TIM_IC_Stop+0x78>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cae:	e013      	b.n	8006cd8 <HAL_TIM_IC_Stop+0xa0>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b0c      	cmp	r3, #12
 8006cb4:	d104      	bne.n	8006cc0 <HAL_TIM_IC_Stop+0x88>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cbe:	e00b      	b.n	8006cd8 <HAL_TIM_IC_Stop+0xa0>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d104      	bne.n	8006cd0 <HAL_TIM_IC_Stop+0x98>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cce:	e003      	b.n	8006cd8 <HAL_TIM_IC_Stop+0xa0>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <HAL_TIM_IC_Stop+0xb0>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ce6:	e013      	b.n	8006d10 <HAL_TIM_IC_Stop+0xd8>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d104      	bne.n	8006cf8 <HAL_TIM_IC_Stop+0xc0>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cf6:	e00b      	b.n	8006d10 <HAL_TIM_IC_Stop+0xd8>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d104      	bne.n	8006d08 <HAL_TIM_IC_Stop+0xd0>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d06:	e003      	b.n	8006d10 <HAL_TIM_IC_Stop+0xd8>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d104      	bne.n	8006d3a <HAL_TIM_IC_Start_IT+0x1e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	e023      	b.n	8006d82 <HAL_TIM_IC_Start_IT+0x66>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d104      	bne.n	8006d4a <HAL_TIM_IC_Start_IT+0x2e>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	e01b      	b.n	8006d82 <HAL_TIM_IC_Start_IT+0x66>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d104      	bne.n	8006d5a <HAL_TIM_IC_Start_IT+0x3e>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	e013      	b.n	8006d82 <HAL_TIM_IC_Start_IT+0x66>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b0c      	cmp	r3, #12
 8006d5e:	d104      	bne.n	8006d6a <HAL_TIM_IC_Start_IT+0x4e>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	e00b      	b.n	8006d82 <HAL_TIM_IC_Start_IT+0x66>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d104      	bne.n	8006d7a <HAL_TIM_IC_Start_IT+0x5e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	e003      	b.n	8006d82 <HAL_TIM_IC_Start_IT+0x66>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d104      	bne.n	8006d94 <HAL_TIM_IC_Start_IT+0x78>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	e013      	b.n	8006dbc <HAL_TIM_IC_Start_IT+0xa0>
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d104      	bne.n	8006da4 <HAL_TIM_IC_Start_IT+0x88>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	e00b      	b.n	8006dbc <HAL_TIM_IC_Start_IT+0xa0>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b08      	cmp	r3, #8
 8006da8:	d104      	bne.n	8006db4 <HAL_TIM_IC_Start_IT+0x98>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	e003      	b.n	8006dbc <HAL_TIM_IC_Start_IT+0xa0>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d102      	bne.n	8006dca <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dc4:	7b7b      	ldrb	r3, [r7, #13]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d001      	beq.n	8006dce <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e0e2      	b.n	8006f94 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <HAL_TIM_IC_Start_IT+0xc2>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ddc:	e023      	b.n	8006e26 <HAL_TIM_IC_Start_IT+0x10a>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d104      	bne.n	8006dee <HAL_TIM_IC_Start_IT+0xd2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dec:	e01b      	b.n	8006e26 <HAL_TIM_IC_Start_IT+0x10a>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d104      	bne.n	8006dfe <HAL_TIM_IC_Start_IT+0xe2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dfc:	e013      	b.n	8006e26 <HAL_TIM_IC_Start_IT+0x10a>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b0c      	cmp	r3, #12
 8006e02:	d104      	bne.n	8006e0e <HAL_TIM_IC_Start_IT+0xf2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e0c:	e00b      	b.n	8006e26 <HAL_TIM_IC_Start_IT+0x10a>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d104      	bne.n	8006e1e <HAL_TIM_IC_Start_IT+0x102>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2202      	movs	r2, #2
 8006e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e1c:	e003      	b.n	8006e26 <HAL_TIM_IC_Start_IT+0x10a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <HAL_TIM_IC_Start_IT+0x11a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e34:	e013      	b.n	8006e5e <HAL_TIM_IC_Start_IT+0x142>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d104      	bne.n	8006e46 <HAL_TIM_IC_Start_IT+0x12a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e44:	e00b      	b.n	8006e5e <HAL_TIM_IC_Start_IT+0x142>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_IC_Start_IT+0x13a>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e54:	e003      	b.n	8006e5e <HAL_TIM_IC_Start_IT+0x142>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b0c      	cmp	r3, #12
 8006e62:	d841      	bhi.n	8006ee8 <HAL_TIM_IC_Start_IT+0x1cc>
 8006e64:	a201      	add	r2, pc, #4	@ (adr r2, 8006e6c <HAL_TIM_IC_Start_IT+0x150>)
 8006e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6a:	bf00      	nop
 8006e6c:	08006ea1 	.word	0x08006ea1
 8006e70:	08006ee9 	.word	0x08006ee9
 8006e74:	08006ee9 	.word	0x08006ee9
 8006e78:	08006ee9 	.word	0x08006ee9
 8006e7c:	08006eb3 	.word	0x08006eb3
 8006e80:	08006ee9 	.word	0x08006ee9
 8006e84:	08006ee9 	.word	0x08006ee9
 8006e88:	08006ee9 	.word	0x08006ee9
 8006e8c:	08006ec5 	.word	0x08006ec5
 8006e90:	08006ee9 	.word	0x08006ee9
 8006e94:	08006ee9 	.word	0x08006ee9
 8006e98:	08006ee9 	.word	0x08006ee9
 8006e9c:	08006ed7 	.word	0x08006ed7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0202 	orr.w	r2, r2, #2
 8006eae:	60da      	str	r2, [r3, #12]
      break;
 8006eb0:	e01d      	b.n	8006eee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0204 	orr.w	r2, r2, #4
 8006ec0:	60da      	str	r2, [r3, #12]
      break;
 8006ec2:	e014      	b.n	8006eee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0208 	orr.w	r2, r2, #8
 8006ed2:	60da      	str	r2, [r3, #12]
      break;
 8006ed4:	e00b      	b.n	8006eee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 0210 	orr.w	r2, r2, #16
 8006ee4:	60da      	str	r2, [r3, #12]
      break;
 8006ee6:	e002      	b.n	8006eee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	73fb      	strb	r3, [r7, #15]
      break;
 8006eec:	bf00      	nop
  }

  if (status == HAL_OK)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d14e      	bne.n	8006f92 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f001 fba7 	bl	8008650 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a25      	ldr	r2, [pc, #148]	@ (8006f9c <HAL_TIM_IC_Start_IT+0x280>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d022      	beq.n	8006f52 <HAL_TIM_IC_Start_IT+0x236>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f14:	d01d      	beq.n	8006f52 <HAL_TIM_IC_Start_IT+0x236>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a21      	ldr	r2, [pc, #132]	@ (8006fa0 <HAL_TIM_IC_Start_IT+0x284>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d018      	beq.n	8006f52 <HAL_TIM_IC_Start_IT+0x236>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1f      	ldr	r2, [pc, #124]	@ (8006fa4 <HAL_TIM_IC_Start_IT+0x288>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d013      	beq.n	8006f52 <HAL_TIM_IC_Start_IT+0x236>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fa8 <HAL_TIM_IC_Start_IT+0x28c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00e      	beq.n	8006f52 <HAL_TIM_IC_Start_IT+0x236>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1c      	ldr	r2, [pc, #112]	@ (8006fac <HAL_TIM_IC_Start_IT+0x290>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d009      	beq.n	8006f52 <HAL_TIM_IC_Start_IT+0x236>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb0 <HAL_TIM_IC_Start_IT+0x294>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d004      	beq.n	8006f52 <HAL_TIM_IC_Start_IT+0x236>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a19      	ldr	r2, [pc, #100]	@ (8006fb4 <HAL_TIM_IC_Start_IT+0x298>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d115      	bne.n	8006f7e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	4b17      	ldr	r3, [pc, #92]	@ (8006fb8 <HAL_TIM_IC_Start_IT+0x29c>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2b06      	cmp	r3, #6
 8006f62:	d015      	beq.n	8006f90 <HAL_TIM_IC_Start_IT+0x274>
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f6a:	d011      	beq.n	8006f90 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0201 	orr.w	r2, r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7c:	e008      	b.n	8006f90 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f042 0201 	orr.w	r2, r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	e000      	b.n	8006f92 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f90:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40010000 	.word	0x40010000
 8006fa0:	40000400 	.word	0x40000400
 8006fa4:	40000800 	.word	0x40000800
 8006fa8:	40000c00 	.word	0x40000c00
 8006fac:	40010400 	.word	0x40010400
 8006fb0:	40001800 	.word	0x40001800
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	00010007 	.word	0x00010007

08006fbc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b0c      	cmp	r3, #12
 8006fce:	d841      	bhi.n	8007054 <HAL_TIM_IC_Stop_IT+0x98>
 8006fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <HAL_TIM_IC_Stop_IT+0x1c>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	0800700d 	.word	0x0800700d
 8006fdc:	08007055 	.word	0x08007055
 8006fe0:	08007055 	.word	0x08007055
 8006fe4:	08007055 	.word	0x08007055
 8006fe8:	0800701f 	.word	0x0800701f
 8006fec:	08007055 	.word	0x08007055
 8006ff0:	08007055 	.word	0x08007055
 8006ff4:	08007055 	.word	0x08007055
 8006ff8:	08007031 	.word	0x08007031
 8006ffc:	08007055 	.word	0x08007055
 8007000:	08007055 	.word	0x08007055
 8007004:	08007055 	.word	0x08007055
 8007008:	08007043 	.word	0x08007043
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 0202 	bic.w	r2, r2, #2
 800701a:	60da      	str	r2, [r3, #12]
      break;
 800701c:	e01d      	b.n	800705a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0204 	bic.w	r2, r2, #4
 800702c:	60da      	str	r2, [r3, #12]
      break;
 800702e:	e014      	b.n	800705a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0208 	bic.w	r2, r2, #8
 800703e:	60da      	str	r2, [r3, #12]
      break;
 8007040:	e00b      	b.n	800705a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0210 	bic.w	r2, r2, #16
 8007050:	60da      	str	r2, [r3, #12]
      break;
 8007052:	e002      	b.n	800705a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	73fb      	strb	r3, [r7, #15]
      break;
 8007058:	bf00      	nop
  }

  if (status == HAL_OK)
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d166      	bne.n	800712e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2200      	movs	r2, #0
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f001 faf1 	bl	8008650 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6a1a      	ldr	r2, [r3, #32]
 8007074:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007078:	4013      	ands	r3, r2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10f      	bne.n	800709e <HAL_TIM_IC_Stop_IT+0xe2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6a1a      	ldr	r2, [r3, #32]
 8007084:	f240 4344 	movw	r3, #1092	@ 0x444
 8007088:	4013      	ands	r3, r2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d107      	bne.n	800709e <HAL_TIM_IC_Stop_IT+0xe2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_IC_Stop_IT+0xf2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070ac:	e023      	b.n	80070f6 <HAL_TIM_IC_Stop_IT+0x13a>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d104      	bne.n	80070be <HAL_TIM_IC_Stop_IT+0x102>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070bc:	e01b      	b.n	80070f6 <HAL_TIM_IC_Stop_IT+0x13a>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d104      	bne.n	80070ce <HAL_TIM_IC_Stop_IT+0x112>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070cc:	e013      	b.n	80070f6 <HAL_TIM_IC_Stop_IT+0x13a>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b0c      	cmp	r3, #12
 80070d2:	d104      	bne.n	80070de <HAL_TIM_IC_Stop_IT+0x122>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070dc:	e00b      	b.n	80070f6 <HAL_TIM_IC_Stop_IT+0x13a>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	d104      	bne.n	80070ee <HAL_TIM_IC_Stop_IT+0x132>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070ec:	e003      	b.n	80070f6 <HAL_TIM_IC_Stop_IT+0x13a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <HAL_TIM_IC_Stop_IT+0x14a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007104:	e013      	b.n	800712e <HAL_TIM_IC_Stop_IT+0x172>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b04      	cmp	r3, #4
 800710a:	d104      	bne.n	8007116 <HAL_TIM_IC_Stop_IT+0x15a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007114:	e00b      	b.n	800712e <HAL_TIM_IC_Stop_IT+0x172>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b08      	cmp	r3, #8
 800711a:	d104      	bne.n	8007126 <HAL_TIM_IC_Stop_IT+0x16a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007124:	e003      	b.n	800712e <HAL_TIM_IC_Stop_IT+0x172>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d020      	beq.n	800719c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01b      	beq.n	800719c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f06f 0202 	mvn.w	r2, #2
 800716c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7fa fb94 	bl	80018b0 <HAL_TIM_IC_CaptureCallback>
 8007188:	e005      	b.n	8007196 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fc14 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fc1b 	bl	80079cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d020      	beq.n	80071e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01b      	beq.n	80071e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0204 	mvn.w	r2, #4
 80071b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2202      	movs	r2, #2
 80071be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fa fb6e 	bl	80018b0 <HAL_TIM_IC_CaptureCallback>
 80071d4:	e005      	b.n	80071e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fbee 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fbf5 	bl	80079cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d020      	beq.n	8007234 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01b      	beq.n	8007234 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f06f 0208 	mvn.w	r2, #8
 8007204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2204      	movs	r2, #4
 800720a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fa fb48 	bl	80018b0 <HAL_TIM_IC_CaptureCallback>
 8007220:	e005      	b.n	800722e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fbc8 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fbcf 	bl	80079cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f003 0310 	and.w	r3, r3, #16
 800723a:	2b00      	cmp	r3, #0
 800723c:	d020      	beq.n	8007280 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01b      	beq.n	8007280 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f06f 0210 	mvn.w	r2, #16
 8007250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2208      	movs	r2, #8
 8007256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fa fb22 	bl	80018b0 <HAL_TIM_IC_CaptureCallback>
 800726c:	e005      	b.n	800727a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fba2 	bl	80079b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fba9 	bl	80079cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00c      	beq.n	80072a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b00      	cmp	r3, #0
 8007292:	d007      	beq.n	80072a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0201 	mvn.w	r2, #1
 800729c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fb80 	bl	80079a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00c      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d007      	beq.n	80072d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80072ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 fb09 	bl	80088e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00c      	beq.n	80072f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80072ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 fb01 	bl	80088f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00c      	beq.n	800731a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007306:	2b00      	cmp	r3, #0
 8007308:	d007      	beq.n	800731a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fb63 	bl	80079e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00c      	beq.n	800733e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0320 	and.w	r3, r3, #32
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f06f 0220 	mvn.w	r2, #32
 8007336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 fac9 	bl	80088d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800733e:	bf00      	nop
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007360:	2302      	movs	r3, #2
 8007362:	e088      	b.n	8007476 <HAL_TIM_IC_ConfigChannel+0x130>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d11b      	bne.n	80073aa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007382:	f000 ff9d 	bl	80082c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 020c 	bic.w	r2, r2, #12
 8007394:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6999      	ldr	r1, [r3, #24]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	619a      	str	r2, [r3, #24]
 80073a8:	e060      	b.n	800746c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d11c      	bne.n	80073ea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80073c0:	f001 f821 	bl	8008406 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80073d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6999      	ldr	r1, [r3, #24]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	021a      	lsls	r2, r3, #8
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	619a      	str	r2, [r3, #24]
 80073e8:	e040      	b.n	800746c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	d11b      	bne.n	8007428 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007400:	f001 f86e 	bl	80084e0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	69da      	ldr	r2, [r3, #28]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 020c 	bic.w	r2, r2, #12
 8007412:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	69d9      	ldr	r1, [r3, #28]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	61da      	str	r2, [r3, #28]
 8007426:	e021      	b.n	800746c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b0c      	cmp	r3, #12
 800742c:	d11c      	bne.n	8007468 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800743e:	f001 f88b 	bl	8008558 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69da      	ldr	r2, [r3, #28]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007450:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69d9      	ldr	r1, [r3, #28]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	021a      	lsls	r2, r3, #8
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	61da      	str	r2, [r3, #28]
 8007466:	e001      	b.n	800746c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800749a:	2302      	movs	r3, #2
 800749c:	e0ff      	b.n	800769e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b14      	cmp	r3, #20
 80074aa:	f200 80f0 	bhi.w	800768e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80074ae:	a201      	add	r2, pc, #4	@ (adr r2, 80074b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b4:	08007509 	.word	0x08007509
 80074b8:	0800768f 	.word	0x0800768f
 80074bc:	0800768f 	.word	0x0800768f
 80074c0:	0800768f 	.word	0x0800768f
 80074c4:	08007549 	.word	0x08007549
 80074c8:	0800768f 	.word	0x0800768f
 80074cc:	0800768f 	.word	0x0800768f
 80074d0:	0800768f 	.word	0x0800768f
 80074d4:	0800758b 	.word	0x0800758b
 80074d8:	0800768f 	.word	0x0800768f
 80074dc:	0800768f 	.word	0x0800768f
 80074e0:	0800768f 	.word	0x0800768f
 80074e4:	080075cb 	.word	0x080075cb
 80074e8:	0800768f 	.word	0x0800768f
 80074ec:	0800768f 	.word	0x0800768f
 80074f0:	0800768f 	.word	0x0800768f
 80074f4:	0800760d 	.word	0x0800760d
 80074f8:	0800768f 	.word	0x0800768f
 80074fc:	0800768f 	.word	0x0800768f
 8007500:	0800768f 	.word	0x0800768f
 8007504:	0800764d 	.word	0x0800764d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68b9      	ldr	r1, [r7, #8]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fb16 	bl	8007b40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0208 	orr.w	r2, r2, #8
 8007522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0204 	bic.w	r2, r2, #4
 8007532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6999      	ldr	r1, [r3, #24]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	691a      	ldr	r2, [r3, #16]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	619a      	str	r2, [r3, #24]
      break;
 8007546:	e0a5      	b.n	8007694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68b9      	ldr	r1, [r7, #8]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fb86 	bl	8007c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699a      	ldr	r2, [r3, #24]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	6999      	ldr	r1, [r3, #24]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	021a      	lsls	r2, r3, #8
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	619a      	str	r2, [r3, #24]
      break;
 8007588:	e084      	b.n	8007694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68b9      	ldr	r1, [r7, #8]
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fbef 	bl	8007d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69da      	ldr	r2, [r3, #28]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0208 	orr.w	r2, r2, #8
 80075a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0204 	bic.w	r2, r2, #4
 80075b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69d9      	ldr	r1, [r3, #28]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	61da      	str	r2, [r3, #28]
      break;
 80075c8:	e064      	b.n	8007694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fc57 	bl	8007e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69da      	ldr	r2, [r3, #28]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69d9      	ldr	r1, [r3, #28]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	021a      	lsls	r2, r3, #8
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	61da      	str	r2, [r3, #28]
      break;
 800760a:	e043      	b.n	8007694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fca0 	bl	8007f58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0208 	orr.w	r2, r2, #8
 8007626:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0204 	bic.w	r2, r2, #4
 8007636:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800764a:	e023      	b.n	8007694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68b9      	ldr	r1, [r7, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f000 fce4 	bl	8008020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007666:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007676:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	021a      	lsls	r2, r3, #8
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800768c:	e002      	b.n	8007694 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	75fb      	strb	r3, [r7, #23]
      break;
 8007692:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop

080076a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_TIM_ConfigClockSource+0x1c>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e0dc      	b.n	800787e <HAL_TIM_ConfigClockSource+0x1d6>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	4b6a      	ldr	r3, [pc, #424]	@ (8007888 <HAL_TIM_ConfigClockSource+0x1e0>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a64      	ldr	r2, [pc, #400]	@ (800788c <HAL_TIM_ConfigClockSource+0x1e4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	f000 80a9 	beq.w	8007852 <HAL_TIM_ConfigClockSource+0x1aa>
 8007700:	4a62      	ldr	r2, [pc, #392]	@ (800788c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	f200 80ae 	bhi.w	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 8007708:	4a61      	ldr	r2, [pc, #388]	@ (8007890 <HAL_TIM_ConfigClockSource+0x1e8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	f000 80a1 	beq.w	8007852 <HAL_TIM_ConfigClockSource+0x1aa>
 8007710:	4a5f      	ldr	r2, [pc, #380]	@ (8007890 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	f200 80a6 	bhi.w	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 8007718:	4a5e      	ldr	r2, [pc, #376]	@ (8007894 <HAL_TIM_ConfigClockSource+0x1ec>)
 800771a:	4293      	cmp	r3, r2
 800771c:	f000 8099 	beq.w	8007852 <HAL_TIM_ConfigClockSource+0x1aa>
 8007720:	4a5c      	ldr	r2, [pc, #368]	@ (8007894 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007722:	4293      	cmp	r3, r2
 8007724:	f200 809e 	bhi.w	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 8007728:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800772c:	f000 8091 	beq.w	8007852 <HAL_TIM_ConfigClockSource+0x1aa>
 8007730:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007734:	f200 8096 	bhi.w	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 8007738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800773c:	f000 8089 	beq.w	8007852 <HAL_TIM_ConfigClockSource+0x1aa>
 8007740:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007744:	f200 808e 	bhi.w	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 8007748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800774c:	d03e      	beq.n	80077cc <HAL_TIM_ConfigClockSource+0x124>
 800774e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007752:	f200 8087 	bhi.w	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 8007756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800775a:	f000 8086 	beq.w	800786a <HAL_TIM_ConfigClockSource+0x1c2>
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007762:	d87f      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 8007764:	2b70      	cmp	r3, #112	@ 0x70
 8007766:	d01a      	beq.n	800779e <HAL_TIM_ConfigClockSource+0xf6>
 8007768:	2b70      	cmp	r3, #112	@ 0x70
 800776a:	d87b      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 800776c:	2b60      	cmp	r3, #96	@ 0x60
 800776e:	d050      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0x16a>
 8007770:	2b60      	cmp	r3, #96	@ 0x60
 8007772:	d877      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 8007774:	2b50      	cmp	r3, #80	@ 0x50
 8007776:	d03c      	beq.n	80077f2 <HAL_TIM_ConfigClockSource+0x14a>
 8007778:	2b50      	cmp	r3, #80	@ 0x50
 800777a:	d873      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 800777c:	2b40      	cmp	r3, #64	@ 0x40
 800777e:	d058      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x18a>
 8007780:	2b40      	cmp	r3, #64	@ 0x40
 8007782:	d86f      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 8007784:	2b30      	cmp	r3, #48	@ 0x30
 8007786:	d064      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x1aa>
 8007788:	2b30      	cmp	r3, #48	@ 0x30
 800778a:	d86b      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 800778c:	2b20      	cmp	r3, #32
 800778e:	d060      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x1aa>
 8007790:	2b20      	cmp	r3, #32
 8007792:	d867      	bhi.n	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d05c      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x1aa>
 8007798:	2b10      	cmp	r3, #16
 800779a:	d05a      	beq.n	8007852 <HAL_TIM_ConfigClockSource+0x1aa>
 800779c:	e062      	b.n	8007864 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077ae:	f000 ff2f 	bl	8008610 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80077c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	609a      	str	r2, [r3, #8]
      break;
 80077ca:	e04f      	b.n	800786c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077dc:	f000 ff18 	bl	8008610 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077ee:	609a      	str	r2, [r3, #8]
      break;
 80077f0:	e03c      	b.n	800786c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fe:	461a      	mov	r2, r3
 8007800:	f000 fdd2 	bl	80083a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2150      	movs	r1, #80	@ 0x50
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fee2 	bl	80085d4 <TIM_ITRx_SetConfig>
      break;
 8007810:	e02c      	b.n	800786c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800781e:	461a      	mov	r2, r3
 8007820:	f000 fe2e 	bl	8008480 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2160      	movs	r1, #96	@ 0x60
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fed2 	bl	80085d4 <TIM_ITRx_SetConfig>
      break;
 8007830:	e01c      	b.n	800786c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800783e:	461a      	mov	r2, r3
 8007840:	f000 fdb2 	bl	80083a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2140      	movs	r1, #64	@ 0x40
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fec2 	bl	80085d4 <TIM_ITRx_SetConfig>
      break;
 8007850:	e00c      	b.n	800786c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4619      	mov	r1, r3
 800785c:	4610      	mov	r0, r2
 800785e:	f000 feb9 	bl	80085d4 <TIM_ITRx_SetConfig>
      break;
 8007862:	e003      	b.n	800786c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	73fb      	strb	r3, [r7, #15]
      break;
 8007868:	e000      	b.n	800786c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800786a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	ffceff88 	.word	0xffceff88
 800788c:	00100040 	.word	0x00100040
 8007890:	00100030 	.word	0x00100030
 8007894:	00100020 	.word	0x00100020

08007898 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e031      	b.n	8007914 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fc12 	bl	80080ec <TIM_SlaveTimer_SetConfig>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d009      	beq.n	80078e2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e018      	b.n	8007914 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078f0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68da      	ldr	r2, [r3, #12]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007900:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b0c      	cmp	r3, #12
 800792e:	d831      	bhi.n	8007994 <HAL_TIM_ReadCapturedValue+0x78>
 8007930:	a201      	add	r2, pc, #4	@ (adr r2, 8007938 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	0800796d 	.word	0x0800796d
 800793c:	08007995 	.word	0x08007995
 8007940:	08007995 	.word	0x08007995
 8007944:	08007995 	.word	0x08007995
 8007948:	08007977 	.word	0x08007977
 800794c:	08007995 	.word	0x08007995
 8007950:	08007995 	.word	0x08007995
 8007954:	08007995 	.word	0x08007995
 8007958:	08007981 	.word	0x08007981
 800795c:	08007995 	.word	0x08007995
 8007960:	08007995 	.word	0x08007995
 8007964:	08007995 	.word	0x08007995
 8007968:	0800798b 	.word	0x0800798b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007972:	60fb      	str	r3, [r7, #12]

      break;
 8007974:	e00f      	b.n	8007996 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797c:	60fb      	str	r3, [r7, #12]

      break;
 800797e:	e00a      	b.n	8007996 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007986:	60fb      	str	r3, [r7, #12]

      break;
 8007988:	e005      	b.n	8007996 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007990:	60fb      	str	r3, [r7, #12]

      break;
 8007992:	e000      	b.n	8007996 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007994:	bf00      	nop
  }

  return tmpreg;
 8007996:	68fb      	ldr	r3, [r7, #12]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a46      	ldr	r2, [pc, #280]	@ (8007b20 <TIM_Base_SetConfig+0x12c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d013      	beq.n	8007a34 <TIM_Base_SetConfig+0x40>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a12:	d00f      	beq.n	8007a34 <TIM_Base_SetConfig+0x40>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a43      	ldr	r2, [pc, #268]	@ (8007b24 <TIM_Base_SetConfig+0x130>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00b      	beq.n	8007a34 <TIM_Base_SetConfig+0x40>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a42      	ldr	r2, [pc, #264]	@ (8007b28 <TIM_Base_SetConfig+0x134>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d007      	beq.n	8007a34 <TIM_Base_SetConfig+0x40>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a41      	ldr	r2, [pc, #260]	@ (8007b2c <TIM_Base_SetConfig+0x138>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_Base_SetConfig+0x40>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a40      	ldr	r2, [pc, #256]	@ (8007b30 <TIM_Base_SetConfig+0x13c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d108      	bne.n	8007a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a35      	ldr	r2, [pc, #212]	@ (8007b20 <TIM_Base_SetConfig+0x12c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d01f      	beq.n	8007a8e <TIM_Base_SetConfig+0x9a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a54:	d01b      	beq.n	8007a8e <TIM_Base_SetConfig+0x9a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a32      	ldr	r2, [pc, #200]	@ (8007b24 <TIM_Base_SetConfig+0x130>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d017      	beq.n	8007a8e <TIM_Base_SetConfig+0x9a>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a31      	ldr	r2, [pc, #196]	@ (8007b28 <TIM_Base_SetConfig+0x134>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d013      	beq.n	8007a8e <TIM_Base_SetConfig+0x9a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a30      	ldr	r2, [pc, #192]	@ (8007b2c <TIM_Base_SetConfig+0x138>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00f      	beq.n	8007a8e <TIM_Base_SetConfig+0x9a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a2f      	ldr	r2, [pc, #188]	@ (8007b30 <TIM_Base_SetConfig+0x13c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d00b      	beq.n	8007a8e <TIM_Base_SetConfig+0x9a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a2e      	ldr	r2, [pc, #184]	@ (8007b34 <TIM_Base_SetConfig+0x140>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d007      	beq.n	8007a8e <TIM_Base_SetConfig+0x9a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a2d      	ldr	r2, [pc, #180]	@ (8007b38 <TIM_Base_SetConfig+0x144>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d003      	beq.n	8007a8e <TIM_Base_SetConfig+0x9a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a2c      	ldr	r2, [pc, #176]	@ (8007b3c <TIM_Base_SetConfig+0x148>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d108      	bne.n	8007aa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a16      	ldr	r2, [pc, #88]	@ (8007b20 <TIM_Base_SetConfig+0x12c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00f      	beq.n	8007aec <TIM_Base_SetConfig+0xf8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a18      	ldr	r2, [pc, #96]	@ (8007b30 <TIM_Base_SetConfig+0x13c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00b      	beq.n	8007aec <TIM_Base_SetConfig+0xf8>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a17      	ldr	r2, [pc, #92]	@ (8007b34 <TIM_Base_SetConfig+0x140>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d007      	beq.n	8007aec <TIM_Base_SetConfig+0xf8>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a16      	ldr	r2, [pc, #88]	@ (8007b38 <TIM_Base_SetConfig+0x144>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_Base_SetConfig+0xf8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a15      	ldr	r2, [pc, #84]	@ (8007b3c <TIM_Base_SetConfig+0x148>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d103      	bne.n	8007af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	691a      	ldr	r2, [r3, #16]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d105      	bne.n	8007b12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	f023 0201 	bic.w	r2, r3, #1
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	611a      	str	r2, [r3, #16]
  }
}
 8007b12:	bf00      	nop
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	40010000 	.word	0x40010000
 8007b24:	40000400 	.word	0x40000400
 8007b28:	40000800 	.word	0x40000800
 8007b2c:	40000c00 	.word	0x40000c00
 8007b30:	40010400 	.word	0x40010400
 8007b34:	40014000 	.word	0x40014000
 8007b38:	40014400 	.word	0x40014400
 8007b3c:	40014800 	.word	0x40014800

08007b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	f023 0201 	bic.w	r2, r3, #1
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4b37      	ldr	r3, [pc, #220]	@ (8007c48 <TIM_OC1_SetConfig+0x108>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	f023 0302 	bic.w	r3, r3, #2
 8007b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a2d      	ldr	r2, [pc, #180]	@ (8007c4c <TIM_OC1_SetConfig+0x10c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00f      	beq.n	8007bbc <TIM_OC1_SetConfig+0x7c>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8007c50 <TIM_OC1_SetConfig+0x110>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00b      	beq.n	8007bbc <TIM_OC1_SetConfig+0x7c>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8007c54 <TIM_OC1_SetConfig+0x114>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d007      	beq.n	8007bbc <TIM_OC1_SetConfig+0x7c>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a2a      	ldr	r2, [pc, #168]	@ (8007c58 <TIM_OC1_SetConfig+0x118>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC1_SetConfig+0x7c>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a29      	ldr	r2, [pc, #164]	@ (8007c5c <TIM_OC1_SetConfig+0x11c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d10c      	bne.n	8007bd6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f023 0308 	bic.w	r3, r3, #8
 8007bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f023 0304 	bic.w	r3, r3, #4
 8007bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8007c4c <TIM_OC1_SetConfig+0x10c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00f      	beq.n	8007bfe <TIM_OC1_SetConfig+0xbe>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c50 <TIM_OC1_SetConfig+0x110>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00b      	beq.n	8007bfe <TIM_OC1_SetConfig+0xbe>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a1a      	ldr	r2, [pc, #104]	@ (8007c54 <TIM_OC1_SetConfig+0x114>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d007      	beq.n	8007bfe <TIM_OC1_SetConfig+0xbe>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a19      	ldr	r2, [pc, #100]	@ (8007c58 <TIM_OC1_SetConfig+0x118>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d003      	beq.n	8007bfe <TIM_OC1_SetConfig+0xbe>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a18      	ldr	r2, [pc, #96]	@ (8007c5c <TIM_OC1_SetConfig+0x11c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d111      	bne.n	8007c22 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	621a      	str	r2, [r3, #32]
}
 8007c3c:	bf00      	nop
 8007c3e:	371c      	adds	r7, #28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr
 8007c48:	fffeff8f 	.word	0xfffeff8f
 8007c4c:	40010000 	.word	0x40010000
 8007c50:	40010400 	.word	0x40010400
 8007c54:	40014000 	.word	0x40014000
 8007c58:	40014400 	.word	0x40014400
 8007c5c:	40014800 	.word	0x40014800

08007c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f023 0210 	bic.w	r2, r3, #16
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4b34      	ldr	r3, [pc, #208]	@ (8007d5c <TIM_OC2_SetConfig+0xfc>)
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f023 0320 	bic.w	r3, r3, #32
 8007caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	011b      	lsls	r3, r3, #4
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a29      	ldr	r2, [pc, #164]	@ (8007d60 <TIM_OC2_SetConfig+0x100>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_OC2_SetConfig+0x68>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a28      	ldr	r2, [pc, #160]	@ (8007d64 <TIM_OC2_SetConfig+0x104>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d10d      	bne.n	8007ce4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ce2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d60 <TIM_OC2_SetConfig+0x100>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00f      	beq.n	8007d0c <TIM_OC2_SetConfig+0xac>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a1d      	ldr	r2, [pc, #116]	@ (8007d64 <TIM_OC2_SetConfig+0x104>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d00b      	beq.n	8007d0c <TIM_OC2_SetConfig+0xac>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8007d68 <TIM_OC2_SetConfig+0x108>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d007      	beq.n	8007d0c <TIM_OC2_SetConfig+0xac>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8007d6c <TIM_OC2_SetConfig+0x10c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d003      	beq.n	8007d0c <TIM_OC2_SetConfig+0xac>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a1a      	ldr	r2, [pc, #104]	@ (8007d70 <TIM_OC2_SetConfig+0x110>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d113      	bne.n	8007d34 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	621a      	str	r2, [r3, #32]
}
 8007d4e:	bf00      	nop
 8007d50:	371c      	adds	r7, #28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	feff8fff 	.word	0xfeff8fff
 8007d60:	40010000 	.word	0x40010000
 8007d64:	40010400 	.word	0x40010400
 8007d68:	40014000 	.word	0x40014000
 8007d6c:	40014400 	.word	0x40014400
 8007d70:	40014800 	.word	0x40014800

08007d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b087      	sub	sp, #28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4b33      	ldr	r3, [pc, #204]	@ (8007e6c <TIM_OC3_SetConfig+0xf8>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0303 	bic.w	r3, r3, #3
 8007daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	021b      	lsls	r3, r3, #8
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a28      	ldr	r2, [pc, #160]	@ (8007e70 <TIM_OC3_SetConfig+0xfc>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d003      	beq.n	8007dda <TIM_OC3_SetConfig+0x66>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a27      	ldr	r2, [pc, #156]	@ (8007e74 <TIM_OC3_SetConfig+0x100>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d10d      	bne.n	8007df6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e70 <TIM_OC3_SetConfig+0xfc>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00f      	beq.n	8007e1e <TIM_OC3_SetConfig+0xaa>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a1c      	ldr	r2, [pc, #112]	@ (8007e74 <TIM_OC3_SetConfig+0x100>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00b      	beq.n	8007e1e <TIM_OC3_SetConfig+0xaa>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a1b      	ldr	r2, [pc, #108]	@ (8007e78 <TIM_OC3_SetConfig+0x104>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d007      	beq.n	8007e1e <TIM_OC3_SetConfig+0xaa>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a1a      	ldr	r2, [pc, #104]	@ (8007e7c <TIM_OC3_SetConfig+0x108>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d003      	beq.n	8007e1e <TIM_OC3_SetConfig+0xaa>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a19      	ldr	r2, [pc, #100]	@ (8007e80 <TIM_OC3_SetConfig+0x10c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d113      	bne.n	8007e46 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	621a      	str	r2, [r3, #32]
}
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	fffeff8f 	.word	0xfffeff8f
 8007e70:	40010000 	.word	0x40010000
 8007e74:	40010400 	.word	0x40010400
 8007e78:	40014000 	.word	0x40014000
 8007e7c:	40014400 	.word	0x40014400
 8007e80:	40014800 	.word	0x40014800

08007e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4b24      	ldr	r3, [pc, #144]	@ (8007f40 <TIM_OC4_SetConfig+0xbc>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	021b      	lsls	r3, r3, #8
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	031b      	lsls	r3, r3, #12
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a19      	ldr	r2, [pc, #100]	@ (8007f44 <TIM_OC4_SetConfig+0xc0>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00f      	beq.n	8007f04 <TIM_OC4_SetConfig+0x80>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a18      	ldr	r2, [pc, #96]	@ (8007f48 <TIM_OC4_SetConfig+0xc4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00b      	beq.n	8007f04 <TIM_OC4_SetConfig+0x80>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a17      	ldr	r2, [pc, #92]	@ (8007f4c <TIM_OC4_SetConfig+0xc8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d007      	beq.n	8007f04 <TIM_OC4_SetConfig+0x80>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a16      	ldr	r2, [pc, #88]	@ (8007f50 <TIM_OC4_SetConfig+0xcc>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d003      	beq.n	8007f04 <TIM_OC4_SetConfig+0x80>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a15      	ldr	r2, [pc, #84]	@ (8007f54 <TIM_OC4_SetConfig+0xd0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d109      	bne.n	8007f18 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	019b      	lsls	r3, r3, #6
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	621a      	str	r2, [r3, #32]
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	feff8fff 	.word	0xfeff8fff
 8007f44:	40010000 	.word	0x40010000
 8007f48:	40010400 	.word	0x40010400
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40014400 	.word	0x40014400
 8007f54:	40014800 	.word	0x40014800

08007f58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4b21      	ldr	r3, [pc, #132]	@ (8008008 <TIM_OC5_SetConfig+0xb0>)
 8007f84:	4013      	ands	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a18      	ldr	r2, [pc, #96]	@ (800800c <TIM_OC5_SetConfig+0xb4>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00f      	beq.n	8007fce <TIM_OC5_SetConfig+0x76>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a17      	ldr	r2, [pc, #92]	@ (8008010 <TIM_OC5_SetConfig+0xb8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00b      	beq.n	8007fce <TIM_OC5_SetConfig+0x76>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a16      	ldr	r2, [pc, #88]	@ (8008014 <TIM_OC5_SetConfig+0xbc>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d007      	beq.n	8007fce <TIM_OC5_SetConfig+0x76>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a15      	ldr	r2, [pc, #84]	@ (8008018 <TIM_OC5_SetConfig+0xc0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d003      	beq.n	8007fce <TIM_OC5_SetConfig+0x76>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a14      	ldr	r2, [pc, #80]	@ (800801c <TIM_OC5_SetConfig+0xc4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d109      	bne.n	8007fe2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	021b      	lsls	r3, r3, #8
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	621a      	str	r2, [r3, #32]
}
 8007ffc:	bf00      	nop
 8007ffe:	371c      	adds	r7, #28
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	fffeff8f 	.word	0xfffeff8f
 800800c:	40010000 	.word	0x40010000
 8008010:	40010400 	.word	0x40010400
 8008014:	40014000 	.word	0x40014000
 8008018:	40014400 	.word	0x40014400
 800801c:	40014800 	.word	0x40014800

08008020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4b22      	ldr	r3, [pc, #136]	@ (80080d4 <TIM_OC6_SetConfig+0xb4>)
 800804c:	4013      	ands	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	051b      	lsls	r3, r3, #20
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a19      	ldr	r2, [pc, #100]	@ (80080d8 <TIM_OC6_SetConfig+0xb8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d00f      	beq.n	8008098 <TIM_OC6_SetConfig+0x78>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a18      	ldr	r2, [pc, #96]	@ (80080dc <TIM_OC6_SetConfig+0xbc>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00b      	beq.n	8008098 <TIM_OC6_SetConfig+0x78>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a17      	ldr	r2, [pc, #92]	@ (80080e0 <TIM_OC6_SetConfig+0xc0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d007      	beq.n	8008098 <TIM_OC6_SetConfig+0x78>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a16      	ldr	r2, [pc, #88]	@ (80080e4 <TIM_OC6_SetConfig+0xc4>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_OC6_SetConfig+0x78>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a15      	ldr	r2, [pc, #84]	@ (80080e8 <TIM_OC6_SetConfig+0xc8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d109      	bne.n	80080ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800809e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	029b      	lsls	r3, r3, #10
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	621a      	str	r2, [r3, #32]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	feff8fff 	.word	0xfeff8fff
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40010400 	.word	0x40010400
 80080e0:	40014000 	.word	0x40014000
 80080e4:	40014400 	.word	0x40014400
 80080e8:	40014800 	.word	0x40014800

080080ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4b65      	ldr	r3, [pc, #404]	@ (800829c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008106:	4013      	ands	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4b62      	ldr	r3, [pc, #392]	@ (80082a0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008118:	4013      	ands	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4a5c      	ldr	r2, [pc, #368]	@ (80082a4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008134:	4293      	cmp	r3, r2
 8008136:	f000 80ab 	beq.w	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 800813a:	4a5a      	ldr	r2, [pc, #360]	@ (80082a4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800813c:	4293      	cmp	r3, r2
 800813e:	f200 80a4 	bhi.w	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 8008142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008146:	f000 80a3 	beq.w	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 800814a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800814e:	f200 809c 	bhi.w	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 8008152:	4a55      	ldr	r2, [pc, #340]	@ (80082a8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	f000 809b 	beq.w	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 800815a:	4a53      	ldr	r2, [pc, #332]	@ (80082a8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800815c:	4293      	cmp	r3, r2
 800815e:	f200 8094 	bhi.w	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 8008162:	4a52      	ldr	r2, [pc, #328]	@ (80082ac <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008164:	4293      	cmp	r3, r2
 8008166:	f000 8093 	beq.w	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 800816a:	4a50      	ldr	r2, [pc, #320]	@ (80082ac <TIM_SlaveTimer_SetConfig+0x1c0>)
 800816c:	4293      	cmp	r3, r2
 800816e:	f200 808c 	bhi.w	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 8008172:	4a4f      	ldr	r2, [pc, #316]	@ (80082b0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8008174:	4293      	cmp	r3, r2
 8008176:	f000 808b 	beq.w	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 800817a:	4a4d      	ldr	r2, [pc, #308]	@ (80082b0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	f200 8084 	bhi.w	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 8008182:	4a4c      	ldr	r2, [pc, #304]	@ (80082b4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8008184:	4293      	cmp	r3, r2
 8008186:	f000 8083 	beq.w	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 800818a:	4a4a      	ldr	r2, [pc, #296]	@ (80082b4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d87c      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 8008190:	4a49      	ldr	r2, [pc, #292]	@ (80082b8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d07c      	beq.n	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008196:	4a48      	ldr	r2, [pc, #288]	@ (80082b8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d876      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 800819c:	4a47      	ldr	r2, [pc, #284]	@ (80082bc <TIM_SlaveTimer_SetConfig+0x1d0>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d076      	beq.n	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 80081a2:	4a46      	ldr	r2, [pc, #280]	@ (80082bc <TIM_SlaveTimer_SetConfig+0x1d0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d870      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 80081a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081ac:	d070      	beq.n	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 80081ae:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80081b2:	d86a      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 80081b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b8:	d06a      	beq.n	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 80081ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081be:	d864      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 80081c0:	2b70      	cmp	r3, #112	@ 0x70
 80081c2:	d01a      	beq.n	80081fa <TIM_SlaveTimer_SetConfig+0x10e>
 80081c4:	2b70      	cmp	r3, #112	@ 0x70
 80081c6:	d860      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 80081c8:	2b60      	cmp	r3, #96	@ 0x60
 80081ca:	d054      	beq.n	8008276 <TIM_SlaveTimer_SetConfig+0x18a>
 80081cc:	2b60      	cmp	r3, #96	@ 0x60
 80081ce:	d85c      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 80081d0:	2b50      	cmp	r3, #80	@ 0x50
 80081d2:	d046      	beq.n	8008262 <TIM_SlaveTimer_SetConfig+0x176>
 80081d4:	2b50      	cmp	r3, #80	@ 0x50
 80081d6:	d858      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 80081d8:	2b40      	cmp	r3, #64	@ 0x40
 80081da:	d019      	beq.n	8008210 <TIM_SlaveTimer_SetConfig+0x124>
 80081dc:	2b40      	cmp	r3, #64	@ 0x40
 80081de:	d854      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 80081e0:	2b30      	cmp	r3, #48	@ 0x30
 80081e2:	d055      	beq.n	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 80081e4:	2b30      	cmp	r3, #48	@ 0x30
 80081e6:	d850      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d051      	beq.n	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 80081ec:	2b20      	cmp	r3, #32
 80081ee:	d84c      	bhi.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d04d      	beq.n	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 80081f4:	2b10      	cmp	r3, #16
 80081f6:	d04b      	beq.n	8008290 <TIM_SlaveTimer_SetConfig+0x1a4>
 80081f8:	e047      	b.n	800828a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800820a:	f000 fa01 	bl	8008610 <TIM_ETR_SetConfig>
      break;
 800820e:	e040      	b.n	8008292 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b05      	cmp	r3, #5
 8008216:	d101      	bne.n	800821c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e03b      	b.n	8008294 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6a1a      	ldr	r2, [r3, #32]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0201 	bic.w	r2, r2, #1
 8008232:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008242:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	011b      	lsls	r3, r3, #4
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	4313      	orrs	r3, r2
 800824e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	621a      	str	r2, [r3, #32]
      break;
 8008260:	e017      	b.n	8008292 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800826e:	461a      	mov	r2, r3
 8008270:	f000 f89a 	bl	80083a8 <TIM_TI1_ConfigInputStage>
      break;
 8008274:	e00d      	b.n	8008292 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008282:	461a      	mov	r2, r3
 8008284:	f000 f8fc 	bl	8008480 <TIM_TI2_ConfigInputStage>
      break;
 8008288:	e003      	b.n	8008292 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	75fb      	strb	r3, [r7, #23]
      break;
 800828e:	e000      	b.n	8008292 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8008290:	bf00      	nop
  }

  return status;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	ffcfff8f 	.word	0xffcfff8f
 80082a0:	fffefff8 	.word	0xfffefff8
 80082a4:	00200010 	.word	0x00200010
 80082a8:	00100070 	.word	0x00100070
 80082ac:	00100060 	.word	0x00100060
 80082b0:	00100050 	.word	0x00100050
 80082b4:	00100040 	.word	0x00100040
 80082b8:	00100030 	.word	0x00100030
 80082bc:	00100020 	.word	0x00100020

080082c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	f023 0201 	bic.w	r2, r3, #1
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a28      	ldr	r2, [pc, #160]	@ (800838c <TIM_TI1_SetConfig+0xcc>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d01b      	beq.n	8008326 <TIM_TI1_SetConfig+0x66>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082f4:	d017      	beq.n	8008326 <TIM_TI1_SetConfig+0x66>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4a25      	ldr	r2, [pc, #148]	@ (8008390 <TIM_TI1_SetConfig+0xd0>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d013      	beq.n	8008326 <TIM_TI1_SetConfig+0x66>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4a24      	ldr	r2, [pc, #144]	@ (8008394 <TIM_TI1_SetConfig+0xd4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00f      	beq.n	8008326 <TIM_TI1_SetConfig+0x66>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4a23      	ldr	r2, [pc, #140]	@ (8008398 <TIM_TI1_SetConfig+0xd8>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00b      	beq.n	8008326 <TIM_TI1_SetConfig+0x66>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4a22      	ldr	r2, [pc, #136]	@ (800839c <TIM_TI1_SetConfig+0xdc>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d007      	beq.n	8008326 <TIM_TI1_SetConfig+0x66>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4a21      	ldr	r2, [pc, #132]	@ (80083a0 <TIM_TI1_SetConfig+0xe0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d003      	beq.n	8008326 <TIM_TI1_SetConfig+0x66>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4a20      	ldr	r2, [pc, #128]	@ (80083a4 <TIM_TI1_SetConfig+0xe4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d101      	bne.n	800832a <TIM_TI1_SetConfig+0x6a>
 8008326:	2301      	movs	r3, #1
 8008328:	e000      	b.n	800832c <TIM_TI1_SetConfig+0x6c>
 800832a:	2300      	movs	r3, #0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d008      	beq.n	8008342 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f023 0303 	bic.w	r3, r3, #3
 8008336:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	e003      	b.n	800834a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f043 0301 	orr.w	r3, r3, #1
 8008348:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	011b      	lsls	r3, r3, #4
 8008356:	b2db      	uxtb	r3, r3
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	4313      	orrs	r3, r2
 800835c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f023 030a 	bic.w	r3, r3, #10
 8008364:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f003 030a 	and.w	r3, r3, #10
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	621a      	str	r2, [r3, #32]
}
 800837e:	bf00      	nop
 8008380:	371c      	adds	r7, #28
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40010000 	.word	0x40010000
 8008390:	40000400 	.word	0x40000400
 8008394:	40000800 	.word	0x40000800
 8008398:	40000c00 	.word	0x40000c00
 800839c:	40010400 	.word	0x40010400
 80083a0:	40001800 	.word	0x40001800
 80083a4:	40014000 	.word	0x40014000

080083a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f023 0201 	bic.w	r2, r3, #1
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f023 030a 	bic.w	r3, r3, #10
 80083e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	621a      	str	r2, [r3, #32]
}
 80083fa:	bf00      	nop
 80083fc:	371c      	adds	r7, #28
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008406:	b480      	push	{r7}
 8008408:	b087      	sub	sp, #28
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	607a      	str	r2, [r7, #4]
 8008412:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	f023 0210 	bic.w	r2, r3, #16
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	4313      	orrs	r3, r2
 800843c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	031b      	lsls	r3, r3, #12
 800844a:	b29b      	uxth	r3, r3
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	4313      	orrs	r3, r2
 8008450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008458:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	011b      	lsls	r3, r3, #4
 800845e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	4313      	orrs	r3, r2
 8008466:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	621a      	str	r2, [r3, #32]
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f023 0210 	bic.w	r2, r3, #16
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	031b      	lsls	r3, r3, #12
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	621a      	str	r2, [r3, #32]
}
 80084d4:	bf00      	nop
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f023 0303 	bic.w	r3, r3, #3
 800850c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800851c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	011b      	lsls	r3, r3, #4
 8008522:	b2db      	uxtb	r3, r3
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	4313      	orrs	r3, r2
 8008528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008530:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	021b      	lsls	r3, r3, #8
 8008536:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	621a      	str	r2, [r3, #32]
}
 800854c:	bf00      	nop
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6a1b      	ldr	r3, [r3, #32]
 8008570:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008584:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	4313      	orrs	r3, r2
 800858e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008596:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	031b      	lsls	r3, r3, #12
 800859c:	b29b      	uxth	r3, r3
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80085aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	031b      	lsls	r3, r3, #12
 80085b0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	621a      	str	r2, [r3, #32]
}
 80085c6:	bf00      	nop
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
	...

080085d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4b09      	ldr	r3, [pc, #36]	@ (800860c <TIM_ITRx_SetConfig+0x38>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f043 0307 	orr.w	r3, r3, #7
 80085f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	609a      	str	r2, [r3, #8]
}
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	ffcfff8f 	.word	0xffcfff8f

08008610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800862a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	021a      	lsls	r2, r3, #8
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	431a      	orrs	r2, r3
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4313      	orrs	r3, r2
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	4313      	orrs	r3, r2
 800863c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	609a      	str	r2, [r3, #8]
}
 8008644:	bf00      	nop
 8008646:	371c      	adds	r7, #28
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 031f 	and.w	r3, r3, #31
 8008662:	2201      	movs	r2, #1
 8008664:	fa02 f303 	lsl.w	r3, r2, r3
 8008668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a1a      	ldr	r2, [r3, #32]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	43db      	mvns	r3, r3
 8008672:	401a      	ands	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6a1a      	ldr	r2, [r3, #32]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	fa01 f303 	lsl.w	r3, r1, r3
 8008688:	431a      	orrs	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	621a      	str	r2, [r3, #32]
}
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
	...

0800869c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e06d      	b.n	8008790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a30      	ldr	r2, [pc, #192]	@ (800879c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d004      	beq.n	80086e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a2f      	ldr	r2, [pc, #188]	@ (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d108      	bne.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80086ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008700:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a20      	ldr	r2, [pc, #128]	@ (800879c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d022      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008726:	d01d      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a1d      	ldr	r2, [pc, #116]	@ (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d018      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d013      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a1a      	ldr	r2, [pc, #104]	@ (80087ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00e      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a15      	ldr	r2, [pc, #84]	@ (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d009      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a16      	ldr	r2, [pc, #88]	@ (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d004      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a15      	ldr	r2, [pc, #84]	@ (80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d10c      	bne.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800876a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	4313      	orrs	r3, r2
 8008774:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	40010000 	.word	0x40010000
 80087a0:	40010400 	.word	0x40010400
 80087a4:	40000400 	.word	0x40000400
 80087a8:	40000800 	.word	0x40000800
 80087ac:	40000c00 	.word	0x40000c00
 80087b0:	40001800 	.word	0x40001800
 80087b4:	40014000 	.word	0x40014000

080087b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e073      	b.n	80088bc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	041b      	lsls	r3, r3, #16
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	4313      	orrs	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a19      	ldr	r2, [pc, #100]	@ (80088c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d004      	beq.n	8008870 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a18      	ldr	r2, [pc, #96]	@ (80088cc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d11c      	bne.n	80088aa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887a:	051b      	lsls	r3, r3, #20
 800887c:	4313      	orrs	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008898:	4313      	orrs	r3, r2
 800889a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	40010000 	.word	0x40010000
 80088cc:	40010400 	.word	0x40010400

080088d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e042      	b.n	80089a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008924:	2b00      	cmp	r3, #0
 8008926:	d106      	bne.n	8008936 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7f9 fd81 	bl	8002438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2224      	movs	r2, #36	@ 0x24
 800893a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0201 	bic.w	r2, r2, #1
 800894c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fe94 	bl	8009684 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f825 	bl	80089ac <UART_SetConfig>
 8008962:	4603      	mov	r3, r0
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e01b      	b.n	80089a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800897a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689a      	ldr	r2, [r3, #8]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800898a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0201 	orr.w	r2, r2, #1
 800899a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 ff13 	bl	80097c8 <UART_CheckIdleState>
 80089a2:	4603      	mov	r3, r0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089b0:	b092      	sub	sp, #72	@ 0x48
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	431a      	orrs	r2, r3
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	431a      	orrs	r2, r3
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	4bbe      	ldr	r3, [pc, #760]	@ (8008cd4 <UART_SetConfig+0x328>)
 80089dc:	4013      	ands	r3, r2
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	6812      	ldr	r2, [r2, #0]
 80089e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089e4:	430b      	orrs	r3, r1
 80089e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4ab3      	ldr	r2, [pc, #716]	@ (8008cd8 <UART_SetConfig+0x32c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d004      	beq.n	8008a18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a14:	4313      	orrs	r3, r2
 8008a16:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689a      	ldr	r2, [r3, #8]
 8008a1e:	4baf      	ldr	r3, [pc, #700]	@ (8008cdc <UART_SetConfig+0x330>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a32:	f023 010f 	bic.w	r1, r3, #15
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4aa6      	ldr	r2, [pc, #664]	@ (8008ce0 <UART_SetConfig+0x334>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d177      	bne.n	8008b3c <UART_SetConfig+0x190>
 8008a4c:	4ba5      	ldr	r3, [pc, #660]	@ (8008ce4 <UART_SetConfig+0x338>)
 8008a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a54:	2b28      	cmp	r3, #40	@ 0x28
 8008a56:	d86d      	bhi.n	8008b34 <UART_SetConfig+0x188>
 8008a58:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <UART_SetConfig+0xb4>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008b05 	.word	0x08008b05
 8008a64:	08008b35 	.word	0x08008b35
 8008a68:	08008b35 	.word	0x08008b35
 8008a6c:	08008b35 	.word	0x08008b35
 8008a70:	08008b35 	.word	0x08008b35
 8008a74:	08008b35 	.word	0x08008b35
 8008a78:	08008b35 	.word	0x08008b35
 8008a7c:	08008b35 	.word	0x08008b35
 8008a80:	08008b0d 	.word	0x08008b0d
 8008a84:	08008b35 	.word	0x08008b35
 8008a88:	08008b35 	.word	0x08008b35
 8008a8c:	08008b35 	.word	0x08008b35
 8008a90:	08008b35 	.word	0x08008b35
 8008a94:	08008b35 	.word	0x08008b35
 8008a98:	08008b35 	.word	0x08008b35
 8008a9c:	08008b35 	.word	0x08008b35
 8008aa0:	08008b15 	.word	0x08008b15
 8008aa4:	08008b35 	.word	0x08008b35
 8008aa8:	08008b35 	.word	0x08008b35
 8008aac:	08008b35 	.word	0x08008b35
 8008ab0:	08008b35 	.word	0x08008b35
 8008ab4:	08008b35 	.word	0x08008b35
 8008ab8:	08008b35 	.word	0x08008b35
 8008abc:	08008b35 	.word	0x08008b35
 8008ac0:	08008b1d 	.word	0x08008b1d
 8008ac4:	08008b35 	.word	0x08008b35
 8008ac8:	08008b35 	.word	0x08008b35
 8008acc:	08008b35 	.word	0x08008b35
 8008ad0:	08008b35 	.word	0x08008b35
 8008ad4:	08008b35 	.word	0x08008b35
 8008ad8:	08008b35 	.word	0x08008b35
 8008adc:	08008b35 	.word	0x08008b35
 8008ae0:	08008b25 	.word	0x08008b25
 8008ae4:	08008b35 	.word	0x08008b35
 8008ae8:	08008b35 	.word	0x08008b35
 8008aec:	08008b35 	.word	0x08008b35
 8008af0:	08008b35 	.word	0x08008b35
 8008af4:	08008b35 	.word	0x08008b35
 8008af8:	08008b35 	.word	0x08008b35
 8008afc:	08008b35 	.word	0x08008b35
 8008b00:	08008b2d 	.word	0x08008b2d
 8008b04:	2301      	movs	r3, #1
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0a:	e326      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b12:	e322      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b14:	2308      	movs	r3, #8
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1a:	e31e      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b1c:	2310      	movs	r3, #16
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b22:	e31a      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b24:	2320      	movs	r3, #32
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b2a:	e316      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b2c:	2340      	movs	r3, #64	@ 0x40
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b32:	e312      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b34:	2380      	movs	r3, #128	@ 0x80
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3a:	e30e      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a69      	ldr	r2, [pc, #420]	@ (8008ce8 <UART_SetConfig+0x33c>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d130      	bne.n	8008ba8 <UART_SetConfig+0x1fc>
 8008b46:	4b67      	ldr	r3, [pc, #412]	@ (8008ce4 <UART_SetConfig+0x338>)
 8008b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b4a:	f003 0307 	and.w	r3, r3, #7
 8008b4e:	2b05      	cmp	r3, #5
 8008b50:	d826      	bhi.n	8008ba0 <UART_SetConfig+0x1f4>
 8008b52:	a201      	add	r2, pc, #4	@ (adr r2, 8008b58 <UART_SetConfig+0x1ac>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008b71 	.word	0x08008b71
 8008b5c:	08008b79 	.word	0x08008b79
 8008b60:	08008b81 	.word	0x08008b81
 8008b64:	08008b89 	.word	0x08008b89
 8008b68:	08008b91 	.word	0x08008b91
 8008b6c:	08008b99 	.word	0x08008b99
 8008b70:	2300      	movs	r3, #0
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b76:	e2f0      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7e:	e2ec      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b80:	2308      	movs	r3, #8
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b86:	e2e8      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b88:	2310      	movs	r3, #16
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8e:	e2e4      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b90:	2320      	movs	r3, #32
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b96:	e2e0      	b.n	800915a <UART_SetConfig+0x7ae>
 8008b98:	2340      	movs	r3, #64	@ 0x40
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9e:	e2dc      	b.n	800915a <UART_SetConfig+0x7ae>
 8008ba0:	2380      	movs	r3, #128	@ 0x80
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba6:	e2d8      	b.n	800915a <UART_SetConfig+0x7ae>
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a4f      	ldr	r2, [pc, #316]	@ (8008cec <UART_SetConfig+0x340>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d130      	bne.n	8008c14 <UART_SetConfig+0x268>
 8008bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8008ce4 <UART_SetConfig+0x338>)
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	d826      	bhi.n	8008c0c <UART_SetConfig+0x260>
 8008bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <UART_SetConfig+0x218>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008bdd 	.word	0x08008bdd
 8008bc8:	08008be5 	.word	0x08008be5
 8008bcc:	08008bed 	.word	0x08008bed
 8008bd0:	08008bf5 	.word	0x08008bf5
 8008bd4:	08008bfd 	.word	0x08008bfd
 8008bd8:	08008c05 	.word	0x08008c05
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be2:	e2ba      	b.n	800915a <UART_SetConfig+0x7ae>
 8008be4:	2304      	movs	r3, #4
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bea:	e2b6      	b.n	800915a <UART_SetConfig+0x7ae>
 8008bec:	2308      	movs	r3, #8
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf2:	e2b2      	b.n	800915a <UART_SetConfig+0x7ae>
 8008bf4:	2310      	movs	r3, #16
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfa:	e2ae      	b.n	800915a <UART_SetConfig+0x7ae>
 8008bfc:	2320      	movs	r3, #32
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c02:	e2aa      	b.n	800915a <UART_SetConfig+0x7ae>
 8008c04:	2340      	movs	r3, #64	@ 0x40
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0a:	e2a6      	b.n	800915a <UART_SetConfig+0x7ae>
 8008c0c:	2380      	movs	r3, #128	@ 0x80
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c12:	e2a2      	b.n	800915a <UART_SetConfig+0x7ae>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a35      	ldr	r2, [pc, #212]	@ (8008cf0 <UART_SetConfig+0x344>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d130      	bne.n	8008c80 <UART_SetConfig+0x2d4>
 8008c1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ce4 <UART_SetConfig+0x338>)
 8008c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c22:	f003 0307 	and.w	r3, r3, #7
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	d826      	bhi.n	8008c78 <UART_SetConfig+0x2cc>
 8008c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <UART_SetConfig+0x284>)
 8008c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c30:	08008c49 	.word	0x08008c49
 8008c34:	08008c51 	.word	0x08008c51
 8008c38:	08008c59 	.word	0x08008c59
 8008c3c:	08008c61 	.word	0x08008c61
 8008c40:	08008c69 	.word	0x08008c69
 8008c44:	08008c71 	.word	0x08008c71
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e284      	b.n	800915a <UART_SetConfig+0x7ae>
 8008c50:	2304      	movs	r3, #4
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c56:	e280      	b.n	800915a <UART_SetConfig+0x7ae>
 8008c58:	2308      	movs	r3, #8
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e27c      	b.n	800915a <UART_SetConfig+0x7ae>
 8008c60:	2310      	movs	r3, #16
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e278      	b.n	800915a <UART_SetConfig+0x7ae>
 8008c68:	2320      	movs	r3, #32
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e274      	b.n	800915a <UART_SetConfig+0x7ae>
 8008c70:	2340      	movs	r3, #64	@ 0x40
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e270      	b.n	800915a <UART_SetConfig+0x7ae>
 8008c78:	2380      	movs	r3, #128	@ 0x80
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e26c      	b.n	800915a <UART_SetConfig+0x7ae>
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a1b      	ldr	r2, [pc, #108]	@ (8008cf4 <UART_SetConfig+0x348>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d142      	bne.n	8008d10 <UART_SetConfig+0x364>
 8008c8a:	4b16      	ldr	r3, [pc, #88]	@ (8008ce4 <UART_SetConfig+0x338>)
 8008c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c8e:	f003 0307 	and.w	r3, r3, #7
 8008c92:	2b05      	cmp	r3, #5
 8008c94:	d838      	bhi.n	8008d08 <UART_SetConfig+0x35c>
 8008c96:	a201      	add	r2, pc, #4	@ (adr r2, 8008c9c <UART_SetConfig+0x2f0>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cb5 	.word	0x08008cb5
 8008ca0:	08008cbd 	.word	0x08008cbd
 8008ca4:	08008cc5 	.word	0x08008cc5
 8008ca8:	08008ccd 	.word	0x08008ccd
 8008cac:	08008cf9 	.word	0x08008cf9
 8008cb0:	08008d01 	.word	0x08008d01
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cba:	e24e      	b.n	800915a <UART_SetConfig+0x7ae>
 8008cbc:	2304      	movs	r3, #4
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e24a      	b.n	800915a <UART_SetConfig+0x7ae>
 8008cc4:	2308      	movs	r3, #8
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e246      	b.n	800915a <UART_SetConfig+0x7ae>
 8008ccc:	2310      	movs	r3, #16
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e242      	b.n	800915a <UART_SetConfig+0x7ae>
 8008cd4:	cfff69f3 	.word	0xcfff69f3
 8008cd8:	58000c00 	.word	0x58000c00
 8008cdc:	11fff4ff 	.word	0x11fff4ff
 8008ce0:	40011000 	.word	0x40011000
 8008ce4:	58024400 	.word	0x58024400
 8008ce8:	40004400 	.word	0x40004400
 8008cec:	40004800 	.word	0x40004800
 8008cf0:	40004c00 	.word	0x40004c00
 8008cf4:	40005000 	.word	0x40005000
 8008cf8:	2320      	movs	r3, #32
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfe:	e22c      	b.n	800915a <UART_SetConfig+0x7ae>
 8008d00:	2340      	movs	r3, #64	@ 0x40
 8008d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d06:	e228      	b.n	800915a <UART_SetConfig+0x7ae>
 8008d08:	2380      	movs	r3, #128	@ 0x80
 8008d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0e:	e224      	b.n	800915a <UART_SetConfig+0x7ae>
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4ab1      	ldr	r2, [pc, #708]	@ (8008fdc <UART_SetConfig+0x630>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d176      	bne.n	8008e08 <UART_SetConfig+0x45c>
 8008d1a:	4bb1      	ldr	r3, [pc, #708]	@ (8008fe0 <UART_SetConfig+0x634>)
 8008d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d22:	2b28      	cmp	r3, #40	@ 0x28
 8008d24:	d86c      	bhi.n	8008e00 <UART_SetConfig+0x454>
 8008d26:	a201      	add	r2, pc, #4	@ (adr r2, 8008d2c <UART_SetConfig+0x380>)
 8008d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2c:	08008dd1 	.word	0x08008dd1
 8008d30:	08008e01 	.word	0x08008e01
 8008d34:	08008e01 	.word	0x08008e01
 8008d38:	08008e01 	.word	0x08008e01
 8008d3c:	08008e01 	.word	0x08008e01
 8008d40:	08008e01 	.word	0x08008e01
 8008d44:	08008e01 	.word	0x08008e01
 8008d48:	08008e01 	.word	0x08008e01
 8008d4c:	08008dd9 	.word	0x08008dd9
 8008d50:	08008e01 	.word	0x08008e01
 8008d54:	08008e01 	.word	0x08008e01
 8008d58:	08008e01 	.word	0x08008e01
 8008d5c:	08008e01 	.word	0x08008e01
 8008d60:	08008e01 	.word	0x08008e01
 8008d64:	08008e01 	.word	0x08008e01
 8008d68:	08008e01 	.word	0x08008e01
 8008d6c:	08008de1 	.word	0x08008de1
 8008d70:	08008e01 	.word	0x08008e01
 8008d74:	08008e01 	.word	0x08008e01
 8008d78:	08008e01 	.word	0x08008e01
 8008d7c:	08008e01 	.word	0x08008e01
 8008d80:	08008e01 	.word	0x08008e01
 8008d84:	08008e01 	.word	0x08008e01
 8008d88:	08008e01 	.word	0x08008e01
 8008d8c:	08008de9 	.word	0x08008de9
 8008d90:	08008e01 	.word	0x08008e01
 8008d94:	08008e01 	.word	0x08008e01
 8008d98:	08008e01 	.word	0x08008e01
 8008d9c:	08008e01 	.word	0x08008e01
 8008da0:	08008e01 	.word	0x08008e01
 8008da4:	08008e01 	.word	0x08008e01
 8008da8:	08008e01 	.word	0x08008e01
 8008dac:	08008df1 	.word	0x08008df1
 8008db0:	08008e01 	.word	0x08008e01
 8008db4:	08008e01 	.word	0x08008e01
 8008db8:	08008e01 	.word	0x08008e01
 8008dbc:	08008e01 	.word	0x08008e01
 8008dc0:	08008e01 	.word	0x08008e01
 8008dc4:	08008e01 	.word	0x08008e01
 8008dc8:	08008e01 	.word	0x08008e01
 8008dcc:	08008df9 	.word	0x08008df9
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dd6:	e1c0      	b.n	800915a <UART_SetConfig+0x7ae>
 8008dd8:	2304      	movs	r3, #4
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dde:	e1bc      	b.n	800915a <UART_SetConfig+0x7ae>
 8008de0:	2308      	movs	r3, #8
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de6:	e1b8      	b.n	800915a <UART_SetConfig+0x7ae>
 8008de8:	2310      	movs	r3, #16
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dee:	e1b4      	b.n	800915a <UART_SetConfig+0x7ae>
 8008df0:	2320      	movs	r3, #32
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df6:	e1b0      	b.n	800915a <UART_SetConfig+0x7ae>
 8008df8:	2340      	movs	r3, #64	@ 0x40
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfe:	e1ac      	b.n	800915a <UART_SetConfig+0x7ae>
 8008e00:	2380      	movs	r3, #128	@ 0x80
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e06:	e1a8      	b.n	800915a <UART_SetConfig+0x7ae>
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a75      	ldr	r2, [pc, #468]	@ (8008fe4 <UART_SetConfig+0x638>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d130      	bne.n	8008e74 <UART_SetConfig+0x4c8>
 8008e12:	4b73      	ldr	r3, [pc, #460]	@ (8008fe0 <UART_SetConfig+0x634>)
 8008e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d826      	bhi.n	8008e6c <UART_SetConfig+0x4c0>
 8008e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e24 <UART_SetConfig+0x478>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008e3d 	.word	0x08008e3d
 8008e28:	08008e45 	.word	0x08008e45
 8008e2c:	08008e4d 	.word	0x08008e4d
 8008e30:	08008e55 	.word	0x08008e55
 8008e34:	08008e5d 	.word	0x08008e5d
 8008e38:	08008e65 	.word	0x08008e65
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e18a      	b.n	800915a <UART_SetConfig+0x7ae>
 8008e44:	2304      	movs	r3, #4
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e186      	b.n	800915a <UART_SetConfig+0x7ae>
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e182      	b.n	800915a <UART_SetConfig+0x7ae>
 8008e54:	2310      	movs	r3, #16
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5a:	e17e      	b.n	800915a <UART_SetConfig+0x7ae>
 8008e5c:	2320      	movs	r3, #32
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e62:	e17a      	b.n	800915a <UART_SetConfig+0x7ae>
 8008e64:	2340      	movs	r3, #64	@ 0x40
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6a:	e176      	b.n	800915a <UART_SetConfig+0x7ae>
 8008e6c:	2380      	movs	r3, #128	@ 0x80
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e172      	b.n	800915a <UART_SetConfig+0x7ae>
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a5b      	ldr	r2, [pc, #364]	@ (8008fe8 <UART_SetConfig+0x63c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d130      	bne.n	8008ee0 <UART_SetConfig+0x534>
 8008e7e:	4b58      	ldr	r3, [pc, #352]	@ (8008fe0 <UART_SetConfig+0x634>)
 8008e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	2b05      	cmp	r3, #5
 8008e88:	d826      	bhi.n	8008ed8 <UART_SetConfig+0x52c>
 8008e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <UART_SetConfig+0x4e4>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008ea9 	.word	0x08008ea9
 8008e94:	08008eb1 	.word	0x08008eb1
 8008e98:	08008eb9 	.word	0x08008eb9
 8008e9c:	08008ec1 	.word	0x08008ec1
 8008ea0:	08008ec9 	.word	0x08008ec9
 8008ea4:	08008ed1 	.word	0x08008ed1
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eae:	e154      	b.n	800915a <UART_SetConfig+0x7ae>
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb6:	e150      	b.n	800915a <UART_SetConfig+0x7ae>
 8008eb8:	2308      	movs	r3, #8
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ebe:	e14c      	b.n	800915a <UART_SetConfig+0x7ae>
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec6:	e148      	b.n	800915a <UART_SetConfig+0x7ae>
 8008ec8:	2320      	movs	r3, #32
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ece:	e144      	b.n	800915a <UART_SetConfig+0x7ae>
 8008ed0:	2340      	movs	r3, #64	@ 0x40
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed6:	e140      	b.n	800915a <UART_SetConfig+0x7ae>
 8008ed8:	2380      	movs	r3, #128	@ 0x80
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e13c      	b.n	800915a <UART_SetConfig+0x7ae>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a41      	ldr	r2, [pc, #260]	@ (8008fec <UART_SetConfig+0x640>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	f040 8082 	bne.w	8008ff0 <UART_SetConfig+0x644>
 8008eec:	4b3c      	ldr	r3, [pc, #240]	@ (8008fe0 <UART_SetConfig+0x634>)
 8008eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ef4:	2b28      	cmp	r3, #40	@ 0x28
 8008ef6:	d86d      	bhi.n	8008fd4 <UART_SetConfig+0x628>
 8008ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8008f00 <UART_SetConfig+0x554>)
 8008efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efe:	bf00      	nop
 8008f00:	08008fa5 	.word	0x08008fa5
 8008f04:	08008fd5 	.word	0x08008fd5
 8008f08:	08008fd5 	.word	0x08008fd5
 8008f0c:	08008fd5 	.word	0x08008fd5
 8008f10:	08008fd5 	.word	0x08008fd5
 8008f14:	08008fd5 	.word	0x08008fd5
 8008f18:	08008fd5 	.word	0x08008fd5
 8008f1c:	08008fd5 	.word	0x08008fd5
 8008f20:	08008fad 	.word	0x08008fad
 8008f24:	08008fd5 	.word	0x08008fd5
 8008f28:	08008fd5 	.word	0x08008fd5
 8008f2c:	08008fd5 	.word	0x08008fd5
 8008f30:	08008fd5 	.word	0x08008fd5
 8008f34:	08008fd5 	.word	0x08008fd5
 8008f38:	08008fd5 	.word	0x08008fd5
 8008f3c:	08008fd5 	.word	0x08008fd5
 8008f40:	08008fb5 	.word	0x08008fb5
 8008f44:	08008fd5 	.word	0x08008fd5
 8008f48:	08008fd5 	.word	0x08008fd5
 8008f4c:	08008fd5 	.word	0x08008fd5
 8008f50:	08008fd5 	.word	0x08008fd5
 8008f54:	08008fd5 	.word	0x08008fd5
 8008f58:	08008fd5 	.word	0x08008fd5
 8008f5c:	08008fd5 	.word	0x08008fd5
 8008f60:	08008fbd 	.word	0x08008fbd
 8008f64:	08008fd5 	.word	0x08008fd5
 8008f68:	08008fd5 	.word	0x08008fd5
 8008f6c:	08008fd5 	.word	0x08008fd5
 8008f70:	08008fd5 	.word	0x08008fd5
 8008f74:	08008fd5 	.word	0x08008fd5
 8008f78:	08008fd5 	.word	0x08008fd5
 8008f7c:	08008fd5 	.word	0x08008fd5
 8008f80:	08008fc5 	.word	0x08008fc5
 8008f84:	08008fd5 	.word	0x08008fd5
 8008f88:	08008fd5 	.word	0x08008fd5
 8008f8c:	08008fd5 	.word	0x08008fd5
 8008f90:	08008fd5 	.word	0x08008fd5
 8008f94:	08008fd5 	.word	0x08008fd5
 8008f98:	08008fd5 	.word	0x08008fd5
 8008f9c:	08008fd5 	.word	0x08008fd5
 8008fa0:	08008fcd 	.word	0x08008fcd
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008faa:	e0d6      	b.n	800915a <UART_SetConfig+0x7ae>
 8008fac:	2304      	movs	r3, #4
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb2:	e0d2      	b.n	800915a <UART_SetConfig+0x7ae>
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fba:	e0ce      	b.n	800915a <UART_SetConfig+0x7ae>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc2:	e0ca      	b.n	800915a <UART_SetConfig+0x7ae>
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fca:	e0c6      	b.n	800915a <UART_SetConfig+0x7ae>
 8008fcc:	2340      	movs	r3, #64	@ 0x40
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd2:	e0c2      	b.n	800915a <UART_SetConfig+0x7ae>
 8008fd4:	2380      	movs	r3, #128	@ 0x80
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e0be      	b.n	800915a <UART_SetConfig+0x7ae>
 8008fdc:	40011400 	.word	0x40011400
 8008fe0:	58024400 	.word	0x58024400
 8008fe4:	40007800 	.word	0x40007800
 8008fe8:	40007c00 	.word	0x40007c00
 8008fec:	40011800 	.word	0x40011800
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4aad      	ldr	r2, [pc, #692]	@ (80092ac <UART_SetConfig+0x900>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d176      	bne.n	80090e8 <UART_SetConfig+0x73c>
 8008ffa:	4bad      	ldr	r3, [pc, #692]	@ (80092b0 <UART_SetConfig+0x904>)
 8008ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ffe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009002:	2b28      	cmp	r3, #40	@ 0x28
 8009004:	d86c      	bhi.n	80090e0 <UART_SetConfig+0x734>
 8009006:	a201      	add	r2, pc, #4	@ (adr r2, 800900c <UART_SetConfig+0x660>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	080090b1 	.word	0x080090b1
 8009010:	080090e1 	.word	0x080090e1
 8009014:	080090e1 	.word	0x080090e1
 8009018:	080090e1 	.word	0x080090e1
 800901c:	080090e1 	.word	0x080090e1
 8009020:	080090e1 	.word	0x080090e1
 8009024:	080090e1 	.word	0x080090e1
 8009028:	080090e1 	.word	0x080090e1
 800902c:	080090b9 	.word	0x080090b9
 8009030:	080090e1 	.word	0x080090e1
 8009034:	080090e1 	.word	0x080090e1
 8009038:	080090e1 	.word	0x080090e1
 800903c:	080090e1 	.word	0x080090e1
 8009040:	080090e1 	.word	0x080090e1
 8009044:	080090e1 	.word	0x080090e1
 8009048:	080090e1 	.word	0x080090e1
 800904c:	080090c1 	.word	0x080090c1
 8009050:	080090e1 	.word	0x080090e1
 8009054:	080090e1 	.word	0x080090e1
 8009058:	080090e1 	.word	0x080090e1
 800905c:	080090e1 	.word	0x080090e1
 8009060:	080090e1 	.word	0x080090e1
 8009064:	080090e1 	.word	0x080090e1
 8009068:	080090e1 	.word	0x080090e1
 800906c:	080090c9 	.word	0x080090c9
 8009070:	080090e1 	.word	0x080090e1
 8009074:	080090e1 	.word	0x080090e1
 8009078:	080090e1 	.word	0x080090e1
 800907c:	080090e1 	.word	0x080090e1
 8009080:	080090e1 	.word	0x080090e1
 8009084:	080090e1 	.word	0x080090e1
 8009088:	080090e1 	.word	0x080090e1
 800908c:	080090d1 	.word	0x080090d1
 8009090:	080090e1 	.word	0x080090e1
 8009094:	080090e1 	.word	0x080090e1
 8009098:	080090e1 	.word	0x080090e1
 800909c:	080090e1 	.word	0x080090e1
 80090a0:	080090e1 	.word	0x080090e1
 80090a4:	080090e1 	.word	0x080090e1
 80090a8:	080090e1 	.word	0x080090e1
 80090ac:	080090d9 	.word	0x080090d9
 80090b0:	2301      	movs	r3, #1
 80090b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b6:	e050      	b.n	800915a <UART_SetConfig+0x7ae>
 80090b8:	2304      	movs	r3, #4
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090be:	e04c      	b.n	800915a <UART_SetConfig+0x7ae>
 80090c0:	2308      	movs	r3, #8
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c6:	e048      	b.n	800915a <UART_SetConfig+0x7ae>
 80090c8:	2310      	movs	r3, #16
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ce:	e044      	b.n	800915a <UART_SetConfig+0x7ae>
 80090d0:	2320      	movs	r3, #32
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d6:	e040      	b.n	800915a <UART_SetConfig+0x7ae>
 80090d8:	2340      	movs	r3, #64	@ 0x40
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090de:	e03c      	b.n	800915a <UART_SetConfig+0x7ae>
 80090e0:	2380      	movs	r3, #128	@ 0x80
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e6:	e038      	b.n	800915a <UART_SetConfig+0x7ae>
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a71      	ldr	r2, [pc, #452]	@ (80092b4 <UART_SetConfig+0x908>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d130      	bne.n	8009154 <UART_SetConfig+0x7a8>
 80090f2:	4b6f      	ldr	r3, [pc, #444]	@ (80092b0 <UART_SetConfig+0x904>)
 80090f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090f6:	f003 0307 	and.w	r3, r3, #7
 80090fa:	2b05      	cmp	r3, #5
 80090fc:	d826      	bhi.n	800914c <UART_SetConfig+0x7a0>
 80090fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009104 <UART_SetConfig+0x758>)
 8009100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009104:	0800911d 	.word	0x0800911d
 8009108:	08009125 	.word	0x08009125
 800910c:	0800912d 	.word	0x0800912d
 8009110:	08009135 	.word	0x08009135
 8009114:	0800913d 	.word	0x0800913d
 8009118:	08009145 	.word	0x08009145
 800911c:	2302      	movs	r3, #2
 800911e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009122:	e01a      	b.n	800915a <UART_SetConfig+0x7ae>
 8009124:	2304      	movs	r3, #4
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912a:	e016      	b.n	800915a <UART_SetConfig+0x7ae>
 800912c:	2308      	movs	r3, #8
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009132:	e012      	b.n	800915a <UART_SetConfig+0x7ae>
 8009134:	2310      	movs	r3, #16
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800913a:	e00e      	b.n	800915a <UART_SetConfig+0x7ae>
 800913c:	2320      	movs	r3, #32
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009142:	e00a      	b.n	800915a <UART_SetConfig+0x7ae>
 8009144:	2340      	movs	r3, #64	@ 0x40
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800914a:	e006      	b.n	800915a <UART_SetConfig+0x7ae>
 800914c:	2380      	movs	r3, #128	@ 0x80
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009152:	e002      	b.n	800915a <UART_SetConfig+0x7ae>
 8009154:	2380      	movs	r3, #128	@ 0x80
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a55      	ldr	r2, [pc, #340]	@ (80092b4 <UART_SetConfig+0x908>)
 8009160:	4293      	cmp	r3, r2
 8009162:	f040 80f8 	bne.w	8009356 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009166:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800916a:	2b20      	cmp	r3, #32
 800916c:	dc46      	bgt.n	80091fc <UART_SetConfig+0x850>
 800916e:	2b02      	cmp	r3, #2
 8009170:	db75      	blt.n	800925e <UART_SetConfig+0x8b2>
 8009172:	3b02      	subs	r3, #2
 8009174:	2b1e      	cmp	r3, #30
 8009176:	d872      	bhi.n	800925e <UART_SetConfig+0x8b2>
 8009178:	a201      	add	r2, pc, #4	@ (adr r2, 8009180 <UART_SetConfig+0x7d4>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	08009203 	.word	0x08009203
 8009184:	0800925f 	.word	0x0800925f
 8009188:	0800920b 	.word	0x0800920b
 800918c:	0800925f 	.word	0x0800925f
 8009190:	0800925f 	.word	0x0800925f
 8009194:	0800925f 	.word	0x0800925f
 8009198:	0800921b 	.word	0x0800921b
 800919c:	0800925f 	.word	0x0800925f
 80091a0:	0800925f 	.word	0x0800925f
 80091a4:	0800925f 	.word	0x0800925f
 80091a8:	0800925f 	.word	0x0800925f
 80091ac:	0800925f 	.word	0x0800925f
 80091b0:	0800925f 	.word	0x0800925f
 80091b4:	0800925f 	.word	0x0800925f
 80091b8:	0800922b 	.word	0x0800922b
 80091bc:	0800925f 	.word	0x0800925f
 80091c0:	0800925f 	.word	0x0800925f
 80091c4:	0800925f 	.word	0x0800925f
 80091c8:	0800925f 	.word	0x0800925f
 80091cc:	0800925f 	.word	0x0800925f
 80091d0:	0800925f 	.word	0x0800925f
 80091d4:	0800925f 	.word	0x0800925f
 80091d8:	0800925f 	.word	0x0800925f
 80091dc:	0800925f 	.word	0x0800925f
 80091e0:	0800925f 	.word	0x0800925f
 80091e4:	0800925f 	.word	0x0800925f
 80091e8:	0800925f 	.word	0x0800925f
 80091ec:	0800925f 	.word	0x0800925f
 80091f0:	0800925f 	.word	0x0800925f
 80091f4:	0800925f 	.word	0x0800925f
 80091f8:	08009251 	.word	0x08009251
 80091fc:	2b40      	cmp	r3, #64	@ 0x40
 80091fe:	d02a      	beq.n	8009256 <UART_SetConfig+0x8aa>
 8009200:	e02d      	b.n	800925e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009202:	f7fc fdcb 	bl	8005d9c <HAL_RCCEx_GetD3PCLK1Freq>
 8009206:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009208:	e02f      	b.n	800926a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800920a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800920e:	4618      	mov	r0, r3
 8009210:	f7fc fdda 	bl	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009218:	e027      	b.n	800926a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800921a:	f107 0318 	add.w	r3, r7, #24
 800921e:	4618      	mov	r0, r3
 8009220:	f7fc ff26 	bl	8006070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009228:	e01f      	b.n	800926a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800922a:	4b21      	ldr	r3, [pc, #132]	@ (80092b0 <UART_SetConfig+0x904>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b00      	cmp	r3, #0
 8009234:	d009      	beq.n	800924a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009236:	4b1e      	ldr	r3, [pc, #120]	@ (80092b0 <UART_SetConfig+0x904>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	08db      	lsrs	r3, r3, #3
 800923c:	f003 0303 	and.w	r3, r3, #3
 8009240:	4a1d      	ldr	r2, [pc, #116]	@ (80092b8 <UART_SetConfig+0x90c>)
 8009242:	fa22 f303 	lsr.w	r3, r2, r3
 8009246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009248:	e00f      	b.n	800926a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800924a:	4b1b      	ldr	r3, [pc, #108]	@ (80092b8 <UART_SetConfig+0x90c>)
 800924c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800924e:	e00c      	b.n	800926a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009250:	4b1a      	ldr	r3, [pc, #104]	@ (80092bc <UART_SetConfig+0x910>)
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009254:	e009      	b.n	800926a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800925a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800925c:	e005      	b.n	800926a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800926a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 81ee 	beq.w	800964e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009276:	4a12      	ldr	r2, [pc, #72]	@ (80092c0 <UART_SetConfig+0x914>)
 8009278:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800927c:	461a      	mov	r2, r3
 800927e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009280:	fbb3 f3f2 	udiv	r3, r3, r2
 8009284:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	4613      	mov	r3, r2
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	4413      	add	r3, r2
 8009290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009292:	429a      	cmp	r2, r3
 8009294:	d305      	bcc.n	80092a2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800929c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800929e:	429a      	cmp	r2, r3
 80092a0:	d910      	bls.n	80092c4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092a8:	e1d1      	b.n	800964e <UART_SetConfig+0xca2>
 80092aa:	bf00      	nop
 80092ac:	40011c00 	.word	0x40011c00
 80092b0:	58024400 	.word	0x58024400
 80092b4:	58000c00 	.word	0x58000c00
 80092b8:	03d09000 	.word	0x03d09000
 80092bc:	003d0900 	.word	0x003d0900
 80092c0:	0800a138 	.word	0x0800a138
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c6:	2200      	movs	r2, #0
 80092c8:	60bb      	str	r3, [r7, #8]
 80092ca:	60fa      	str	r2, [r7, #12]
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d0:	4ac0      	ldr	r2, [pc, #768]	@ (80095d4 <UART_SetConfig+0xc28>)
 80092d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2200      	movs	r2, #0
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	607a      	str	r2, [r7, #4]
 80092de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80092e6:	f7f7 f803 	bl	80002f0 <__aeabi_uldivmod>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	4610      	mov	r0, r2
 80092f0:	4619      	mov	r1, r3
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	020b      	lsls	r3, r1, #8
 80092fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009300:	0202      	lsls	r2, r0, #8
 8009302:	6979      	ldr	r1, [r7, #20]
 8009304:	6849      	ldr	r1, [r1, #4]
 8009306:	0849      	lsrs	r1, r1, #1
 8009308:	2000      	movs	r0, #0
 800930a:	460c      	mov	r4, r1
 800930c:	4605      	mov	r5, r0
 800930e:	eb12 0804 	adds.w	r8, r2, r4
 8009312:	eb43 0905 	adc.w	r9, r3, r5
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	469a      	mov	sl, r3
 800931e:	4693      	mov	fp, r2
 8009320:	4652      	mov	r2, sl
 8009322:	465b      	mov	r3, fp
 8009324:	4640      	mov	r0, r8
 8009326:	4649      	mov	r1, r9
 8009328:	f7f6 ffe2 	bl	80002f0 <__aeabi_uldivmod>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	4613      	mov	r3, r2
 8009332:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009336:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800933a:	d308      	bcc.n	800934e <UART_SetConfig+0x9a2>
 800933c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009342:	d204      	bcs.n	800934e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800934a:	60da      	str	r2, [r3, #12]
 800934c:	e17f      	b.n	800964e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009354:	e17b      	b.n	800964e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800935e:	f040 80bd 	bne.w	80094dc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009362:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009366:	2b20      	cmp	r3, #32
 8009368:	dc48      	bgt.n	80093fc <UART_SetConfig+0xa50>
 800936a:	2b00      	cmp	r3, #0
 800936c:	db7b      	blt.n	8009466 <UART_SetConfig+0xaba>
 800936e:	2b20      	cmp	r3, #32
 8009370:	d879      	bhi.n	8009466 <UART_SetConfig+0xaba>
 8009372:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <UART_SetConfig+0x9cc>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	08009403 	.word	0x08009403
 800937c:	0800940b 	.word	0x0800940b
 8009380:	08009467 	.word	0x08009467
 8009384:	08009467 	.word	0x08009467
 8009388:	08009413 	.word	0x08009413
 800938c:	08009467 	.word	0x08009467
 8009390:	08009467 	.word	0x08009467
 8009394:	08009467 	.word	0x08009467
 8009398:	08009423 	.word	0x08009423
 800939c:	08009467 	.word	0x08009467
 80093a0:	08009467 	.word	0x08009467
 80093a4:	08009467 	.word	0x08009467
 80093a8:	08009467 	.word	0x08009467
 80093ac:	08009467 	.word	0x08009467
 80093b0:	08009467 	.word	0x08009467
 80093b4:	08009467 	.word	0x08009467
 80093b8:	08009433 	.word	0x08009433
 80093bc:	08009467 	.word	0x08009467
 80093c0:	08009467 	.word	0x08009467
 80093c4:	08009467 	.word	0x08009467
 80093c8:	08009467 	.word	0x08009467
 80093cc:	08009467 	.word	0x08009467
 80093d0:	08009467 	.word	0x08009467
 80093d4:	08009467 	.word	0x08009467
 80093d8:	08009467 	.word	0x08009467
 80093dc:	08009467 	.word	0x08009467
 80093e0:	08009467 	.word	0x08009467
 80093e4:	08009467 	.word	0x08009467
 80093e8:	08009467 	.word	0x08009467
 80093ec:	08009467 	.word	0x08009467
 80093f0:	08009467 	.word	0x08009467
 80093f4:	08009467 	.word	0x08009467
 80093f8:	08009459 	.word	0x08009459
 80093fc:	2b40      	cmp	r3, #64	@ 0x40
 80093fe:	d02e      	beq.n	800945e <UART_SetConfig+0xab2>
 8009400:	e031      	b.n	8009466 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009402:	f7fb fae1 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 8009406:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009408:	e033      	b.n	8009472 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800940a:	f7fb faf3 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 800940e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009410:	e02f      	b.n	8009472 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009416:	4618      	mov	r0, r3
 8009418:	f7fc fcd6 	bl	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800941c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009420:	e027      	b.n	8009472 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009422:	f107 0318 	add.w	r3, r7, #24
 8009426:	4618      	mov	r0, r3
 8009428:	f7fc fe22 	bl	8006070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009430:	e01f      	b.n	8009472 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009432:	4b69      	ldr	r3, [pc, #420]	@ (80095d8 <UART_SetConfig+0xc2c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d009      	beq.n	8009452 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800943e:	4b66      	ldr	r3, [pc, #408]	@ (80095d8 <UART_SetConfig+0xc2c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	08db      	lsrs	r3, r3, #3
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	4a64      	ldr	r2, [pc, #400]	@ (80095dc <UART_SetConfig+0xc30>)
 800944a:	fa22 f303 	lsr.w	r3, r2, r3
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009450:	e00f      	b.n	8009472 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009452:	4b62      	ldr	r3, [pc, #392]	@ (80095dc <UART_SetConfig+0xc30>)
 8009454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009456:	e00c      	b.n	8009472 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009458:	4b61      	ldr	r3, [pc, #388]	@ (80095e0 <UART_SetConfig+0xc34>)
 800945a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800945c:	e009      	b.n	8009472 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800945e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009464:	e005      	b.n	8009472 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 80ea 	beq.w	800964e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947e:	4a55      	ldr	r2, [pc, #340]	@ (80095d4 <UART_SetConfig+0xc28>)
 8009480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009484:	461a      	mov	r2, r3
 8009486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009488:	fbb3 f3f2 	udiv	r3, r3, r2
 800948c:	005a      	lsls	r2, r3, #1
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	085b      	lsrs	r3, r3, #1
 8009494:	441a      	add	r2, r3
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	fbb2 f3f3 	udiv	r3, r2, r3
 800949e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a2:	2b0f      	cmp	r3, #15
 80094a4:	d916      	bls.n	80094d4 <UART_SetConfig+0xb28>
 80094a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094ac:	d212      	bcs.n	80094d4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	f023 030f 	bic.w	r3, r3, #15
 80094b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ba:	085b      	lsrs	r3, r3, #1
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f003 0307 	and.w	r3, r3, #7
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80094c6:	4313      	orrs	r3, r2
 80094c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80094d0:	60da      	str	r2, [r3, #12]
 80094d2:	e0bc      	b.n	800964e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094da:	e0b8      	b.n	800964e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	dc4b      	bgt.n	800957c <UART_SetConfig+0xbd0>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f2c0 8087 	blt.w	80095f8 <UART_SetConfig+0xc4c>
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	f200 8084 	bhi.w	80095f8 <UART_SetConfig+0xc4c>
 80094f0:	a201      	add	r2, pc, #4	@ (adr r2, 80094f8 <UART_SetConfig+0xb4c>)
 80094f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f6:	bf00      	nop
 80094f8:	08009583 	.word	0x08009583
 80094fc:	0800958b 	.word	0x0800958b
 8009500:	080095f9 	.word	0x080095f9
 8009504:	080095f9 	.word	0x080095f9
 8009508:	08009593 	.word	0x08009593
 800950c:	080095f9 	.word	0x080095f9
 8009510:	080095f9 	.word	0x080095f9
 8009514:	080095f9 	.word	0x080095f9
 8009518:	080095a3 	.word	0x080095a3
 800951c:	080095f9 	.word	0x080095f9
 8009520:	080095f9 	.word	0x080095f9
 8009524:	080095f9 	.word	0x080095f9
 8009528:	080095f9 	.word	0x080095f9
 800952c:	080095f9 	.word	0x080095f9
 8009530:	080095f9 	.word	0x080095f9
 8009534:	080095f9 	.word	0x080095f9
 8009538:	080095b3 	.word	0x080095b3
 800953c:	080095f9 	.word	0x080095f9
 8009540:	080095f9 	.word	0x080095f9
 8009544:	080095f9 	.word	0x080095f9
 8009548:	080095f9 	.word	0x080095f9
 800954c:	080095f9 	.word	0x080095f9
 8009550:	080095f9 	.word	0x080095f9
 8009554:	080095f9 	.word	0x080095f9
 8009558:	080095f9 	.word	0x080095f9
 800955c:	080095f9 	.word	0x080095f9
 8009560:	080095f9 	.word	0x080095f9
 8009564:	080095f9 	.word	0x080095f9
 8009568:	080095f9 	.word	0x080095f9
 800956c:	080095f9 	.word	0x080095f9
 8009570:	080095f9 	.word	0x080095f9
 8009574:	080095f9 	.word	0x080095f9
 8009578:	080095eb 	.word	0x080095eb
 800957c:	2b40      	cmp	r3, #64	@ 0x40
 800957e:	d037      	beq.n	80095f0 <UART_SetConfig+0xc44>
 8009580:	e03a      	b.n	80095f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009582:	f7fb fa21 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 8009586:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009588:	e03c      	b.n	8009604 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800958a:	f7fb fa33 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 800958e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009590:	e038      	b.n	8009604 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009596:	4618      	mov	r0, r3
 8009598:	f7fc fc16 	bl	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800959c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a0:	e030      	b.n	8009604 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095a2:	f107 0318 	add.w	r3, r7, #24
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fc fd62 	bl	8006070 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095b0:	e028      	b.n	8009604 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095b2:	4b09      	ldr	r3, [pc, #36]	@ (80095d8 <UART_SetConfig+0xc2c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0320 	and.w	r3, r3, #32
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d012      	beq.n	80095e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095be:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <UART_SetConfig+0xc2c>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	08db      	lsrs	r3, r3, #3
 80095c4:	f003 0303 	and.w	r3, r3, #3
 80095c8:	4a04      	ldr	r2, [pc, #16]	@ (80095dc <UART_SetConfig+0xc30>)
 80095ca:	fa22 f303 	lsr.w	r3, r2, r3
 80095ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095d0:	e018      	b.n	8009604 <UART_SetConfig+0xc58>
 80095d2:	bf00      	nop
 80095d4:	0800a138 	.word	0x0800a138
 80095d8:	58024400 	.word	0x58024400
 80095dc:	03d09000 	.word	0x03d09000
 80095e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80095e4:	4b24      	ldr	r3, [pc, #144]	@ (8009678 <UART_SetConfig+0xccc>)
 80095e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095e8:	e00c      	b.n	8009604 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095ea:	4b24      	ldr	r3, [pc, #144]	@ (800967c <UART_SetConfig+0xcd0>)
 80095ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095ee:	e009      	b.n	8009604 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f6:	e005      	b.n	8009604 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009602:	bf00      	nop
    }

    if (pclk != 0U)
 8009604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d021      	beq.n	800964e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960e:	4a1c      	ldr	r2, [pc, #112]	@ (8009680 <UART_SetConfig+0xcd4>)
 8009610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009614:	461a      	mov	r2, r3
 8009616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009618:	fbb3 f2f2 	udiv	r2, r3, r2
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	085b      	lsrs	r3, r3, #1
 8009622:	441a      	add	r2, r3
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	fbb2 f3f3 	udiv	r3, r2, r3
 800962c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800962e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009630:	2b0f      	cmp	r3, #15
 8009632:	d909      	bls.n	8009648 <UART_SetConfig+0xc9c>
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800963a:	d205      	bcs.n	8009648 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800963c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963e:	b29a      	uxth	r2, r3
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	60da      	str	r2, [r3, #12]
 8009646:	e002      	b.n	800964e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2201      	movs	r2, #1
 8009652:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2201      	movs	r2, #1
 800965a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2200      	movs	r2, #0
 8009662:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2200      	movs	r2, #0
 8009668:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800966a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800966e:	4618      	mov	r0, r3
 8009670:	3748      	adds	r7, #72	@ 0x48
 8009672:	46bd      	mov	sp, r7
 8009674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009678:	03d09000 	.word	0x03d09000
 800967c:	003d0900 	.word	0x003d0900
 8009680:	0800a138 	.word	0x0800a138

08009684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009690:	f003 0308 	and.w	r3, r3, #8
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00a      	beq.n	80096ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	430a      	orrs	r2, r1
 80096ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00a      	beq.n	80096d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	430a      	orrs	r2, r1
 80096ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d4:	f003 0302 	and.w	r3, r3, #2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00a      	beq.n	80096f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f6:	f003 0304 	and.w	r3, r3, #4
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	430a      	orrs	r2, r1
 8009712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009718:	f003 0310 	and.w	r3, r3, #16
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00a      	beq.n	8009736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	430a      	orrs	r2, r1
 8009734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973a:	f003 0320 	and.w	r3, r3, #32
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00a      	beq.n	8009758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01a      	beq.n	800979a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800977e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009782:	d10a      	bne.n	800979a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	430a      	orrs	r2, r1
 80097ba:	605a      	str	r2, [r3, #4]
  }
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b098      	sub	sp, #96	@ 0x60
 80097cc:	af02      	add	r7, sp, #8
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097d8:	f7f9 f818 	bl	800280c <HAL_GetTick>
 80097dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0308 	and.w	r3, r3, #8
 80097e8:	2b08      	cmp	r3, #8
 80097ea:	d12f      	bne.n	800984c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097f4:	2200      	movs	r2, #0
 80097f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f88e 	bl	800991c <UART_WaitOnFlagUntilTimeout>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d022      	beq.n	800984c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980e:	e853 3f00 	ldrex	r3, [r3]
 8009812:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800981a:	653b      	str	r3, [r7, #80]	@ 0x50
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	461a      	mov	r2, r3
 8009822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009824:	647b      	str	r3, [r7, #68]	@ 0x44
 8009826:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009828:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800982a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e6      	bne.n	8009806 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2220      	movs	r2, #32
 800983c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009848:	2303      	movs	r3, #3
 800984a:	e063      	b.n	8009914 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0304 	and.w	r3, r3, #4
 8009856:	2b04      	cmp	r3, #4
 8009858:	d149      	bne.n	80098ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800985a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009862:	2200      	movs	r2, #0
 8009864:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f857 	bl	800991c <UART_WaitOnFlagUntilTimeout>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d03c      	beq.n	80098ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	623b      	str	r3, [r7, #32]
   return(result);
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009888:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009892:	633b      	str	r3, [r7, #48]	@ 0x30
 8009894:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800989a:	e841 2300 	strex	r3, r2, [r1]
 800989e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1e6      	bne.n	8009874 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3308      	adds	r3, #8
 80098ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	e853 3f00 	ldrex	r3, [r3]
 80098b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f023 0301 	bic.w	r3, r3, #1
 80098bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3308      	adds	r3, #8
 80098c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098c6:	61fa      	str	r2, [r7, #28]
 80098c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ca:	69b9      	ldr	r1, [r7, #24]
 80098cc:	69fa      	ldr	r2, [r7, #28]
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	617b      	str	r3, [r7, #20]
   return(result);
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1e5      	bne.n	80098a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2220      	movs	r2, #32
 80098de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e012      	b.n	8009914 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2220      	movs	r2, #32
 80098f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3758      	adds	r7, #88	@ 0x58
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	4613      	mov	r3, r2
 800992a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800992c:	e04f      	b.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009934:	d04b      	beq.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009936:	f7f8 ff69 	bl	800280c <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	429a      	cmp	r2, r3
 8009944:	d302      	bcc.n	800994c <UART_WaitOnFlagUntilTimeout+0x30>
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800994c:	2303      	movs	r3, #3
 800994e:	e04e      	b.n	80099ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0304 	and.w	r3, r3, #4
 800995a:	2b00      	cmp	r3, #0
 800995c:	d037      	beq.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	2b80      	cmp	r3, #128	@ 0x80
 8009962:	d034      	beq.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2b40      	cmp	r3, #64	@ 0x40
 8009968:	d031      	beq.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	f003 0308 	and.w	r3, r3, #8
 8009974:	2b08      	cmp	r3, #8
 8009976:	d110      	bne.n	800999a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2208      	movs	r2, #8
 800997e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 f839 	bl	80099f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2208      	movs	r2, #8
 800998a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e029      	b.n	80099ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099a8:	d111      	bne.n	80099ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 f81f 	bl	80099f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2220      	movs	r2, #32
 80099be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e00f      	b.n	80099ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	69da      	ldr	r2, [r3, #28]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	4013      	ands	r3, r2
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	429a      	cmp	r2, r3
 80099dc:	bf0c      	ite	eq
 80099de:	2301      	moveq	r3, #1
 80099e0:	2300      	movne	r3, #0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	461a      	mov	r2, r3
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d0a0      	beq.n	800992e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b095      	sub	sp, #84	@ 0x54
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a08:	e853 3f00 	ldrex	r3, [r3]
 8009a0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a20:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a26:	e841 2300 	strex	r3, r2, [r1]
 8009a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1e6      	bne.n	8009a00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3308      	adds	r3, #8
 8009a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a42:	69fa      	ldr	r2, [r7, #28]
 8009a44:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac0 <UART_EndRxTransfer+0xc8>)
 8009a46:	4013      	ands	r3, r2
 8009a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3308      	adds	r3, #8
 8009a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e5      	bne.n	8009a32 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d118      	bne.n	8009aa0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	f023 0310 	bic.w	r3, r3, #16
 8009a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a8c:	61bb      	str	r3, [r7, #24]
 8009a8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6979      	ldr	r1, [r7, #20]
 8009a92:	69ba      	ldr	r2, [r7, #24]
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	613b      	str	r3, [r7, #16]
   return(result);
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e6      	bne.n	8009a6e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009ab4:	bf00      	nop
 8009ab6:	3754      	adds	r7, #84	@ 0x54
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	effffffe 	.word	0xeffffffe

08009ac4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d101      	bne.n	8009ada <HAL_UARTEx_DisableFifoMode+0x16>
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	e027      	b.n	8009b2a <HAL_UARTEx_DisableFifoMode+0x66>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2224      	movs	r2, #36	@ 0x24
 8009ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 0201 	bic.w	r2, r2, #1
 8009b00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009b08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2220      	movs	r2, #32
 8009b1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d101      	bne.n	8009b4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e02d      	b.n	8009baa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2224      	movs	r2, #36	@ 0x24
 8009b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f022 0201 	bic.w	r2, r2, #1
 8009b74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f850 	bl	8009c30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b084      	sub	sp, #16
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e02d      	b.n	8009c26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2224      	movs	r2, #36	@ 0x24
 8009bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f022 0201 	bic.w	r2, r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f812 	bl	8009c30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2220      	movs	r2, #32
 8009c18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d108      	bne.n	8009c52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c50:	e031      	b.n	8009cb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c52:	2310      	movs	r3, #16
 8009c54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c56:	2310      	movs	r3, #16
 8009c58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	0e5b      	lsrs	r3, r3, #25
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	f003 0307 	and.w	r3, r3, #7
 8009c68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	0f5b      	lsrs	r3, r3, #29
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	f003 0307 	and.w	r3, r3, #7
 8009c78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	7b3a      	ldrb	r2, [r7, #12]
 8009c7e:	4911      	ldr	r1, [pc, #68]	@ (8009cc4 <UARTEx_SetNbDataToProcess+0x94>)
 8009c80:	5c8a      	ldrb	r2, [r1, r2]
 8009c82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c86:	7b3a      	ldrb	r2, [r7, #12]
 8009c88:	490f      	ldr	r1, [pc, #60]	@ (8009cc8 <UARTEx_SetNbDataToProcess+0x98>)
 8009c8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	7b7a      	ldrb	r2, [r7, #13]
 8009c9c:	4909      	ldr	r1, [pc, #36]	@ (8009cc4 <UARTEx_SetNbDataToProcess+0x94>)
 8009c9e:	5c8a      	ldrb	r2, [r1, r2]
 8009ca0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ca4:	7b7a      	ldrb	r2, [r7, #13]
 8009ca6:	4908      	ldr	r1, [pc, #32]	@ (8009cc8 <UARTEx_SetNbDataToProcess+0x98>)
 8009ca8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009caa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009cb6:	bf00      	nop
 8009cb8:	3714      	adds	r7, #20
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	0800a150 	.word	0x0800a150
 8009cc8:	0800a158 	.word	0x0800a158

08009ccc <memset>:
 8009ccc:	4402      	add	r2, r0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d100      	bne.n	8009cd6 <memset+0xa>
 8009cd4:	4770      	bx	lr
 8009cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cda:	e7f9      	b.n	8009cd0 <memset+0x4>

08009cdc <__errno>:
 8009cdc:	4b01      	ldr	r3, [pc, #4]	@ (8009ce4 <__errno+0x8>)
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	24000014 	.word	0x24000014

08009ce8 <__libc_init_array>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	4d0d      	ldr	r5, [pc, #52]	@ (8009d20 <__libc_init_array+0x38>)
 8009cec:	4c0d      	ldr	r4, [pc, #52]	@ (8009d24 <__libc_init_array+0x3c>)
 8009cee:	1b64      	subs	r4, r4, r5
 8009cf0:	10a4      	asrs	r4, r4, #2
 8009cf2:	2600      	movs	r6, #0
 8009cf4:	42a6      	cmp	r6, r4
 8009cf6:	d109      	bne.n	8009d0c <__libc_init_array+0x24>
 8009cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8009d28 <__libc_init_array+0x40>)
 8009cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8009d2c <__libc_init_array+0x44>)
 8009cfc:	f000 fa06 	bl	800a10c <_init>
 8009d00:	1b64      	subs	r4, r4, r5
 8009d02:	10a4      	asrs	r4, r4, #2
 8009d04:	2600      	movs	r6, #0
 8009d06:	42a6      	cmp	r6, r4
 8009d08:	d105      	bne.n	8009d16 <__libc_init_array+0x2e>
 8009d0a:	bd70      	pop	{r4, r5, r6, pc}
 8009d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d10:	4798      	blx	r3
 8009d12:	3601      	adds	r6, #1
 8009d14:	e7ee      	b.n	8009cf4 <__libc_init_array+0xc>
 8009d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1a:	4798      	blx	r3
 8009d1c:	3601      	adds	r6, #1
 8009d1e:	e7f2      	b.n	8009d06 <__libc_init_array+0x1e>
 8009d20:	0800a1d8 	.word	0x0800a1d8
 8009d24:	0800a1d8 	.word	0x0800a1d8
 8009d28:	0800a1d8 	.word	0x0800a1d8
 8009d2c:	0800a1dc 	.word	0x0800a1dc

08009d30 <atan2>:
 8009d30:	f000 b82e 	b.w	8009d90 <__ieee754_atan2>
 8009d34:	0000      	movs	r0, r0
	...

08009d38 <sqrt>:
 8009d38:	b508      	push	{r3, lr}
 8009d3a:	ed2d 8b04 	vpush	{d8-d9}
 8009d3e:	eeb0 8b40 	vmov.f64	d8, d0
 8009d42:	f000 f821 	bl	8009d88 <__ieee754_sqrt>
 8009d46:	eeb4 8b48 	vcmp.f64	d8, d8
 8009d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4e:	d60c      	bvs.n	8009d6a <sqrt+0x32>
 8009d50:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 8009d70 <sqrt+0x38>
 8009d54:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d5c:	d505      	bpl.n	8009d6a <sqrt+0x32>
 8009d5e:	f7ff ffbd 	bl	8009cdc <__errno>
 8009d62:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8009d66:	2321      	movs	r3, #33	@ 0x21
 8009d68:	6003      	str	r3, [r0, #0]
 8009d6a:	ecbd 8b04 	vpop	{d8-d9}
 8009d6e:	bd08      	pop	{r3, pc}
	...

08009d78 <fabs>:
 8009d78:	ec51 0b10 	vmov	r0, r1, d0
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009d82:	ec43 2b10 	vmov	d0, r2, r3
 8009d86:	4770      	bx	lr

08009d88 <__ieee754_sqrt>:
 8009d88:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8009d8c:	4770      	bx	lr
	...

08009d90 <__ieee754_atan2>:
 8009d90:	ee11 1a10 	vmov	r1, s2
 8009d94:	eeb0 7b40 	vmov.f64	d7, d0
 8009d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d9a:	ee11 5a90 	vmov	r5, s3
 8009d9e:	424b      	negs	r3, r1
 8009da0:	4f59      	ldr	r7, [pc, #356]	@ (8009f08 <__ieee754_atan2+0x178>)
 8009da2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009da6:	430b      	orrs	r3, r1
 8009da8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009dac:	42bb      	cmp	r3, r7
 8009dae:	d80d      	bhi.n	8009dcc <__ieee754_atan2+0x3c>
 8009db0:	ee10 ca10 	vmov	ip, s0
 8009db4:	ee17 6a90 	vmov	r6, s15
 8009db8:	f1cc 0000 	rsb	r0, ip, #0
 8009dbc:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009dc0:	ea40 000c 	orr.w	r0, r0, ip
 8009dc4:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 8009dc8:	42b8      	cmp	r0, r7
 8009dca:	d904      	bls.n	8009dd6 <__ieee754_atan2+0x46>
 8009dcc:	ee37 7b01 	vadd.f64	d7, d7, d1
 8009dd0:	eeb0 0b47 	vmov.f64	d0, d7
 8009dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd6:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 8009dda:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009dde:	4308      	orrs	r0, r1
 8009de0:	d103      	bne.n	8009dea <__ieee754_atan2+0x5a>
 8009de2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009de6:	f000 b897 	b.w	8009f18 <atan>
 8009dea:	17ac      	asrs	r4, r5, #30
 8009dec:	f004 0402 	and.w	r4, r4, #2
 8009df0:	ea53 0c0c 	orrs.w	ip, r3, ip
 8009df4:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 8009df8:	d107      	bne.n	8009e0a <__ieee754_atan2+0x7a>
 8009dfa:	2c02      	cmp	r4, #2
 8009dfc:	d05c      	beq.n	8009eb8 <__ieee754_atan2+0x128>
 8009dfe:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8009ed0 <__ieee754_atan2+0x140>
 8009e02:	2c03      	cmp	r4, #3
 8009e04:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8009e08:	e7e2      	b.n	8009dd0 <__ieee754_atan2+0x40>
 8009e0a:	4311      	orrs	r1, r2
 8009e0c:	d107      	bne.n	8009e1e <__ieee754_atan2+0x8e>
 8009e0e:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 8009ed8 <__ieee754_atan2+0x148>
 8009e12:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8009ee0 <__ieee754_atan2+0x150>
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	fe27 7b06 	vselge.f64	d7, d7, d6
 8009e1c:	e7d8      	b.n	8009dd0 <__ieee754_atan2+0x40>
 8009e1e:	42ba      	cmp	r2, r7
 8009e20:	d10f      	bne.n	8009e42 <__ieee754_atan2+0xb2>
 8009e22:	4293      	cmp	r3, r2
 8009e24:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8009e28:	d107      	bne.n	8009e3a <__ieee754_atan2+0xaa>
 8009e2a:	2c02      	cmp	r4, #2
 8009e2c:	d847      	bhi.n	8009ebe <__ieee754_atan2+0x12e>
 8009e2e:	4b37      	ldr	r3, [pc, #220]	@ (8009f0c <__ieee754_atan2+0x17c>)
 8009e30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e34:	ed93 7b00 	vldr	d7, [r3]
 8009e38:	e7ca      	b.n	8009dd0 <__ieee754_atan2+0x40>
 8009e3a:	2c02      	cmp	r4, #2
 8009e3c:	d842      	bhi.n	8009ec4 <__ieee754_atan2+0x134>
 8009e3e:	4b34      	ldr	r3, [pc, #208]	@ (8009f10 <__ieee754_atan2+0x180>)
 8009e40:	e7f6      	b.n	8009e30 <__ieee754_atan2+0xa0>
 8009e42:	42bb      	cmp	r3, r7
 8009e44:	d0e3      	beq.n	8009e0e <__ieee754_atan2+0x7e>
 8009e46:	1a9b      	subs	r3, r3, r2
 8009e48:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009e4c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e50:	da1a      	bge.n	8009e88 <__ieee754_atan2+0xf8>
 8009e52:	2d00      	cmp	r5, #0
 8009e54:	da01      	bge.n	8009e5a <__ieee754_atan2+0xca>
 8009e56:	323c      	adds	r2, #60	@ 0x3c
 8009e58:	db19      	blt.n	8009e8e <__ieee754_atan2+0xfe>
 8009e5a:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8009e5e:	f7ff ff8b 	bl	8009d78 <fabs>
 8009e62:	f000 f859 	bl	8009f18 <atan>
 8009e66:	eeb0 7b40 	vmov.f64	d7, d0
 8009e6a:	2c01      	cmp	r4, #1
 8009e6c:	d012      	beq.n	8009e94 <__ieee754_atan2+0x104>
 8009e6e:	2c02      	cmp	r4, #2
 8009e70:	d019      	beq.n	8009ea6 <__ieee754_atan2+0x116>
 8009e72:	2c00      	cmp	r4, #0
 8009e74:	d0ac      	beq.n	8009dd0 <__ieee754_atan2+0x40>
 8009e76:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8009ee8 <__ieee754_atan2+0x158>
 8009e7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009e7e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8009ef0 <__ieee754_atan2+0x160>
 8009e82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009e86:	e7a3      	b.n	8009dd0 <__ieee754_atan2+0x40>
 8009e88:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 8009ed8 <__ieee754_atan2+0x148>
 8009e8c:	e7ed      	b.n	8009e6a <__ieee754_atan2+0xda>
 8009e8e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8009ef8 <__ieee754_atan2+0x168>
 8009e92:	e7ea      	b.n	8009e6a <__ieee754_atan2+0xda>
 8009e94:	ee17 1a90 	vmov	r1, s15
 8009e98:	ec53 2b17 	vmov	r2, r3, d7
 8009e9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ea0:	ec43 2b17 	vmov	d7, r2, r3
 8009ea4:	e794      	b.n	8009dd0 <__ieee754_atan2+0x40>
 8009ea6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8009ee8 <__ieee754_atan2+0x158>
 8009eaa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009eae:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 8009ef0 <__ieee754_atan2+0x160>
 8009eb2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009eb6:	e78b      	b.n	8009dd0 <__ieee754_atan2+0x40>
 8009eb8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8009ef0 <__ieee754_atan2+0x160>
 8009ebc:	e788      	b.n	8009dd0 <__ieee754_atan2+0x40>
 8009ebe:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8009f00 <__ieee754_atan2+0x170>
 8009ec2:	e785      	b.n	8009dd0 <__ieee754_atan2+0x40>
 8009ec4:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8009ef8 <__ieee754_atan2+0x168>
 8009ec8:	e782      	b.n	8009dd0 <__ieee754_atan2+0x40>
 8009eca:	bf00      	nop
 8009ecc:	f3af 8000 	nop.w
 8009ed0:	54442d18 	.word	0x54442d18
 8009ed4:	c00921fb 	.word	0xc00921fb
 8009ed8:	54442d18 	.word	0x54442d18
 8009edc:	3ff921fb 	.word	0x3ff921fb
 8009ee0:	54442d18 	.word	0x54442d18
 8009ee4:	bff921fb 	.word	0xbff921fb
 8009ee8:	33145c07 	.word	0x33145c07
 8009eec:	3ca1a626 	.word	0x3ca1a626
 8009ef0:	54442d18 	.word	0x54442d18
 8009ef4:	400921fb 	.word	0x400921fb
	...
 8009f00:	54442d18 	.word	0x54442d18
 8009f04:	3fe921fb 	.word	0x3fe921fb
 8009f08:	7ff00000 	.word	0x7ff00000
 8009f0c:	0800a178 	.word	0x0800a178
 8009f10:	0800a160 	.word	0x0800a160
 8009f14:	00000000 	.word	0x00000000

08009f18 <atan>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	eeb0 7b40 	vmov.f64	d7, d0
 8009f1e:	ee17 5a90 	vmov	r5, s15
 8009f22:	4b73      	ldr	r3, [pc, #460]	@ (800a0f0 <atan+0x1d8>)
 8009f24:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009f28:	429c      	cmp	r4, r3
 8009f2a:	d913      	bls.n	8009f54 <atan+0x3c>
 8009f2c:	4b71      	ldr	r3, [pc, #452]	@ (800a0f4 <atan+0x1dc>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d803      	bhi.n	8009f3a <atan+0x22>
 8009f32:	d107      	bne.n	8009f44 <atan+0x2c>
 8009f34:	ee10 3a10 	vmov	r3, s0
 8009f38:	b123      	cbz	r3, 8009f44 <atan+0x2c>
 8009f3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009f3e:	eeb0 0b47 	vmov.f64	d0, d7
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800a080 <atan+0x168>
 8009f48:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800a088 <atan+0x170>
 8009f4c:	2d00      	cmp	r5, #0
 8009f4e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8009f52:	e7f4      	b.n	8009f3e <atan+0x26>
 8009f54:	4b68      	ldr	r3, [pc, #416]	@ (800a0f8 <atan+0x1e0>)
 8009f56:	429c      	cmp	r4, r3
 8009f58:	d811      	bhi.n	8009f7e <atan+0x66>
 8009f5a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009f5e:	429c      	cmp	r4, r3
 8009f60:	d80a      	bhi.n	8009f78 <atan+0x60>
 8009f62:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8009f66:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800a090 <atan+0x178>
 8009f6a:	ee30 6b06 	vadd.f64	d6, d0, d6
 8009f6e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f76:	dce2      	bgt.n	8009f3e <atan+0x26>
 8009f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f7c:	e013      	b.n	8009fa6 <atan+0x8e>
 8009f7e:	f7ff fefb 	bl	8009d78 <fabs>
 8009f82:	4b5e      	ldr	r3, [pc, #376]	@ (800a0fc <atan+0x1e4>)
 8009f84:	429c      	cmp	r4, r3
 8009f86:	d84f      	bhi.n	800a028 <atan+0x110>
 8009f88:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	d841      	bhi.n	800a014 <atan+0xfc>
 8009f90:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8009f94:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8009f98:	2300      	movs	r3, #0
 8009f9a:	eea0 5b07 	vfma.f64	d5, d0, d7
 8009f9e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009fa2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 8009fa6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a098 <atan+0x180>
 8009faa:	ee27 4b07 	vmul.f64	d4, d7, d7
 8009fae:	ee24 5b04 	vmul.f64	d5, d4, d4
 8009fb2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a0a0 <atan+0x188>
 8009fb6:	eea5 3b06 	vfma.f64	d3, d5, d6
 8009fba:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800a0a8 <atan+0x190>
 8009fbe:	eea3 6b05 	vfma.f64	d6, d3, d5
 8009fc2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a0b0 <atan+0x198>
 8009fc6:	eea6 3b05 	vfma.f64	d3, d6, d5
 8009fca:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800a0b8 <atan+0x1a0>
 8009fce:	eea3 6b05 	vfma.f64	d6, d3, d5
 8009fd2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800a0c0 <atan+0x1a8>
 8009fd6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800a0c8 <atan+0x1b0>
 8009fda:	eea6 3b05 	vfma.f64	d3, d6, d5
 8009fde:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a0d0 <atan+0x1b8>
 8009fe2:	eea5 2b06 	vfma.f64	d2, d5, d6
 8009fe6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a0d8 <atan+0x1c0>
 8009fea:	eea2 6b05 	vfma.f64	d6, d2, d5
 8009fee:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800a0e0 <atan+0x1c8>
 8009ff2:	eea6 2b05 	vfma.f64	d2, d6, d5
 8009ff6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800a0e8 <atan+0x1d0>
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	eea2 6b05 	vfma.f64	d6, d2, d5
 800a000:	ee26 6b05 	vmul.f64	d6, d6, d5
 800a004:	eea3 6b04 	vfma.f64	d6, d3, d4
 800a008:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a00c:	d121      	bne.n	800a052 <atan+0x13a>
 800a00e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a012:	e794      	b.n	8009f3e <atan+0x26>
 800a014:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800a018:	2301      	movs	r3, #1
 800a01a:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a01e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a022:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800a026:	e7be      	b.n	8009fa6 <atan+0x8e>
 800a028:	4b35      	ldr	r3, [pc, #212]	@ (800a100 <atan+0x1e8>)
 800a02a:	429c      	cmp	r4, r3
 800a02c:	d20b      	bcs.n	800a046 <atan+0x12e>
 800a02e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800a032:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a036:	ee30 5b47 	vsub.f64	d5, d0, d7
 800a03a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800a03e:	2302      	movs	r3, #2
 800a040:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a044:	e7af      	b.n	8009fa6 <atan+0x8e>
 800a046:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800a04a:	2303      	movs	r3, #3
 800a04c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a050:	e7a9      	b.n	8009fa6 <atan+0x8e>
 800a052:	4a2c      	ldr	r2, [pc, #176]	@ (800a104 <atan+0x1ec>)
 800a054:	492c      	ldr	r1, [pc, #176]	@ (800a108 <atan+0x1f0>)
 800a056:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a05a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800a05e:	ed93 5b00 	vldr	d5, [r3]
 800a062:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a066:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a06a:	ed92 7b00 	vldr	d7, [r2]
 800a06e:	2d00      	cmp	r5, #0
 800a070:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a074:	bfb8      	it	lt
 800a076:	eeb1 7b47 	vneglt.f64	d7, d7
 800a07a:	e760      	b.n	8009f3e <atan+0x26>
 800a07c:	f3af 8000 	nop.w
 800a080:	54442d18 	.word	0x54442d18
 800a084:	bff921fb 	.word	0xbff921fb
 800a088:	54442d18 	.word	0x54442d18
 800a08c:	3ff921fb 	.word	0x3ff921fb
 800a090:	8800759c 	.word	0x8800759c
 800a094:	7e37e43c 	.word	0x7e37e43c
 800a098:	e322da11 	.word	0xe322da11
 800a09c:	3f90ad3a 	.word	0x3f90ad3a
 800a0a0:	24760deb 	.word	0x24760deb
 800a0a4:	3fa97b4b 	.word	0x3fa97b4b
 800a0a8:	a0d03d51 	.word	0xa0d03d51
 800a0ac:	3fb10d66 	.word	0x3fb10d66
 800a0b0:	c54c206e 	.word	0xc54c206e
 800a0b4:	3fb745cd 	.word	0x3fb745cd
 800a0b8:	920083ff 	.word	0x920083ff
 800a0bc:	3fc24924 	.word	0x3fc24924
 800a0c0:	5555550d 	.word	0x5555550d
 800a0c4:	3fd55555 	.word	0x3fd55555
 800a0c8:	52defd9a 	.word	0x52defd9a
 800a0cc:	bfadde2d 	.word	0xbfadde2d
 800a0d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a0d4:	bfa2b444 	.word	0xbfa2b444
 800a0d8:	af749a6d 	.word	0xaf749a6d
 800a0dc:	bfb3b0f2 	.word	0xbfb3b0f2
 800a0e0:	fe231671 	.word	0xfe231671
 800a0e4:	bfbc71c6 	.word	0xbfbc71c6
 800a0e8:	9998ebc4 	.word	0x9998ebc4
 800a0ec:	bfc99999 	.word	0xbfc99999
 800a0f0:	440fffff 	.word	0x440fffff
 800a0f4:	7ff00000 	.word	0x7ff00000
 800a0f8:	3fdbffff 	.word	0x3fdbffff
 800a0fc:	3ff2ffff 	.word	0x3ff2ffff
 800a100:	40038000 	.word	0x40038000
 800a104:	0800a1b0 	.word	0x0800a1b0
 800a108:	0800a190 	.word	0x0800a190

0800a10c <_init>:
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	bf00      	nop
 800a110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a112:	bc08      	pop	{r3}
 800a114:	469e      	mov	lr, r3
 800a116:	4770      	bx	lr

0800a118 <_fini>:
 800a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11a:	bf00      	nop
 800a11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11e:	bc08      	pop	{r3}
 800a120:	469e      	mov	lr, r3
 800a122:	4770      	bx	lr
