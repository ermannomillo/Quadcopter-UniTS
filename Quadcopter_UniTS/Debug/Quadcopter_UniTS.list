
Quadcopter_UniTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087fc  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008aac  08008aac  00009aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008ae4  08008ae4  00009ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008aec  08008aec  00009aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008af0  08008af0  00009af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08008af4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002e4  24000010  08008b04  0000a010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002f4  08008b04  0000a2f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018b4b  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a5c  00000000  00000000  00022b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001378  00000000  00000000  000255e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f5c  00000000  00000000  00026960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000308e8  00000000  00000000  000278bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000190e4  00000000  00000000  000581a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ffa2  00000000  00000000  00071288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b122a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005378  00000000  00000000  001b1270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001b65e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008a94 	.word	0x08008a94

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	08008a94 	.word	0x08008a94

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	rc_ref_euler[0] =  0;
 80005e4:	4b36      	ldr	r3, [pc, #216]	@ (80006c0 <main+0xe0>)
 80005e6:	f04f 0200 	mov.w	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
	rc_ref_euler[1] =  0;
 80005ec:	4b34      	ldr	r3, [pc, #208]	@ (80006c0 <main+0xe0>)
 80005ee:	f04f 0200 	mov.w	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
	rc_ref_euler[2] =  0;
 80005f4:	4b32      	ldr	r3, [pc, #200]	@ (80006c0 <main+0xe0>)
 80005f6:	f04f 0200 	mov.w	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]

	rc_comm_temp[0] = 0;
 80005fc:	4b31      	ldr	r3, [pc, #196]	@ (80006c4 <main+0xe4>)
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
	rc_comm_temp[1] = 0;
 8000604:	4b2f      	ldr	r3, [pc, #188]	@ (80006c4 <main+0xe4>)
 8000606:	f04f 0200 	mov.w	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
	rc_comm_temp[2] = 0;
 800060c:	4b2d      	ldr	r3, [pc, #180]	@ (80006c4 <main+0xe4>)
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	rc_comm_temp[3] = 0;
 8000614:	4b2b      	ldr	r3, [pc, #172]	@ (80006c4 <main+0xe4>)
 8000616:	f04f 0200 	mov.w	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f001 fc00 	bl	8001e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f85e 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 fcbc 	bl	8000fa0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000628:	f000 fc66 	bl	8000ef8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800062c:	f000 fcb0 	bl	8000f90 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000630:	f000 f90e 	bl	8000850 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000634:	f000 f9de 	bl	80009f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000638:	f000 fa7c 	bl	8000b34 <MX_TIM4_Init>
  MX_TIM5_Init();
 800063c:	f000 fb1a 	bl	8000c74 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000640:	f000 fbb8 	bl	8000db4 <MX_TIM15_Init>
  MX_I2C1_Init();
 8000644:	f000 f8c4 	bl	80007d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000648:	2100      	movs	r1, #0
 800064a:	481f      	ldr	r0, [pc, #124]	@ (80006c8 <main+0xe8>)
 800064c:	f004 ff38 	bl	80054c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000650:	2104      	movs	r1, #4
 8000652:	481d      	ldr	r0, [pc, #116]	@ (80006c8 <main+0xe8>)
 8000654:	f004 ff34 	bl	80054c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000658:	2108      	movs	r1, #8
 800065a:	481b      	ldr	r0, [pc, #108]	@ (80006c8 <main+0xe8>)
 800065c:	f004 ff30 	bl	80054c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000660:	210c      	movs	r1, #12
 8000662:	4819      	ldr	r0, [pc, #100]	@ (80006c8 <main+0xe8>)
 8000664:	f004 ff2c 	bl	80054c0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  set_motor_pwm_zero(motor_pwm);
 8000668:	4818      	ldr	r0, [pc, #96]	@ (80006cc <main+0xec>)
 800066a:	f000 ffc5 	bl	80015f8 <set_motor_pwm_zero>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 800066e:	2104      	movs	r1, #4
 8000670:	4817      	ldr	r0, [pc, #92]	@ (80006d0 <main+0xf0>)
 8000672:	f005 f895 	bl	80057a0 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000676:	2100      	movs	r1, #0
 8000678:	4815      	ldr	r0, [pc, #84]	@ (80006d0 <main+0xf0>)
 800067a:	f005 fa07 	bl	8005a8c <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 800067e:	2104      	movs	r1, #4
 8000680:	4814      	ldr	r0, [pc, #80]	@ (80006d4 <main+0xf4>)
 8000682:	f005 f88d 	bl	80057a0 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000686:	2100      	movs	r1, #0
 8000688:	4812      	ldr	r0, [pc, #72]	@ (80006d4 <main+0xf4>)
 800068a:	f005 f9ff 	bl	8005a8c <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 800068e:	2104      	movs	r1, #4
 8000690:	4811      	ldr	r0, [pc, #68]	@ (80006d8 <main+0xf8>)
 8000692:	f005 f885 	bl	80057a0 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000696:	2100      	movs	r1, #0
 8000698:	480f      	ldr	r0, [pc, #60]	@ (80006d8 <main+0xf8>)
 800069a:	f005 f9f7 	bl	8005a8c <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 800069e:	2104      	movs	r1, #4
 80006a0:	480e      	ldr	r0, [pc, #56]	@ (80006dc <main+0xfc>)
 80006a2:	f005 f87d 	bl	80057a0 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80006a6:	2100      	movs	r1, #0
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <main+0xfc>)
 80006aa:	f005 f9ef 	bl	8005a8c <HAL_TIM_IC_Start_IT>

		  get_target_euler(rc_ref_euler, rc_comm_temp);
 80006ae:	4905      	ldr	r1, [pc, #20]	@ (80006c4 <main+0xe4>)
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <main+0xe0>)
 80006b2:	f000 ffbb 	bl	800162c <get_target_euler>
		   * ---------------
		   * PID
		   * ---------------
		   */

		  set_motor_pwm(motor_pwm);
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <main+0xec>)
 80006b8:	f000 ff28 	bl	800150c <set_motor_pwm>
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 80006bc:	bf00      	nop
 80006be:	e7d6      	b.n	800066e <main+0x8e>
 80006c0:	240002a0 	.word	0x240002a0
 80006c4:	24000290 	.word	0x24000290
 80006c8:	24000080 	.word	0x24000080
 80006cc:	240002ac 	.word	0x240002ac
 80006d0:	240000cc 	.word	0x240000cc
 80006d4:	24000118 	.word	0x24000118
 80006d8:	24000164 	.word	0x24000164
 80006dc:	240001b0 	.word	0x240001b0

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09c      	sub	sp, #112	@ 0x70
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ea:	224c      	movs	r2, #76	@ 0x4c
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f008 f9a4 	bl	8008a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2220      	movs	r2, #32
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f008 f99e 	bl	8008a3c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000700:	4b31      	ldr	r3, [pc, #196]	@ (80007c8 <SystemClock_Config+0xe8>)
 8000702:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000706:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800070a:	2004      	movs	r0, #4
 800070c:	f002 f828 	bl	8002760 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	4b2d      	ldr	r3, [pc, #180]	@ (80007cc <SystemClock_Config+0xec>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a2c      	ldr	r2, [pc, #176]	@ (80007cc <SystemClock_Config+0xec>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b2a      	ldr	r3, [pc, #168]	@ (80007cc <SystemClock_Config+0xec>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800072c:	bf00      	nop
 800072e:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <SystemClock_Config+0xec>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800073a:	d1f8      	bne.n	800072e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800073c:	2321      	movs	r3, #33	@ 0x21
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000746:	2301      	movs	r3, #1
 8000748:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074a:	2302      	movs	r3, #2
 800074c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074e:	2302      	movs	r3, #2
 8000750:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000756:	2325      	movs	r3, #37	@ 0x25
 8000758:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800075a:	2302      	movs	r3, #2
 800075c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075e:	2304      	movs	r3, #4
 8000760:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000766:	230c      	movs	r3, #12
 8000768:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800076a:	2300      	movs	r3, #0
 800076c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000778:	4618      	mov	r0, r3
 800077a:	f002 f84b 	bl	8002814 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000784:	f000 febc 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	233f      	movs	r3, #63	@ 0x3f
 800078a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2303      	movs	r3, #3
 800078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000798:	2340      	movs	r3, #64	@ 0x40
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800079c:	2340      	movs	r3, #64	@ 0x40
 800079e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a6:	2340      	movs	r3, #64	@ 0x40
 80007a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2103      	movs	r1, #3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 fc62 	bl	8003078 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xde>
  {
    Error_Handler();
 80007ba:	f000 fea1 	bl	8001500 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3770      	adds	r7, #112	@ 0x70
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58024400 	.word	0x58024400
 80007cc:	58024800 	.word	0x58024800

080007d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <MX_I2C1_Init+0x78>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702787;
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007dc:	4a1b      	ldr	r2, [pc, #108]	@ (800084c <MX_I2C1_Init+0x7c>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e0:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e6:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007f2:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080a:	480e      	ldr	r0, [pc, #56]	@ (8000844 <MX_I2C1_Init+0x74>)
 800080c:	f001 fe74 	bl	80024f8 <HAL_I2C_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000816:	f000 fe73 	bl	8001500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081a:	2100      	movs	r1, #0
 800081c:	4809      	ldr	r0, [pc, #36]	@ (8000844 <MX_I2C1_Init+0x74>)
 800081e:	f001 ff07 	bl	8002630 <HAL_I2CEx_ConfigAnalogFilter>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000828:	f000 fe6a 	bl	8001500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800082c:	2100      	movs	r1, #0
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_I2C1_Init+0x74>)
 8000830:	f001 ff49 	bl	80026c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 fe61 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2400002c 	.word	0x2400002c
 8000848:	40005400 	.word	0x40005400
 800084c:	00702787 	.word	0x00702787

08000850 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b09c      	sub	sp, #112	@ 0x70
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000870:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2234      	movs	r2, #52	@ 0x34
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f008 f8d6 	bl	8008a3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000890:	4b56      	ldr	r3, [pc, #344]	@ (80009ec <MX_TIM1_Init+0x19c>)
 8000892:	4a57      	ldr	r2, [pc, #348]	@ (80009f0 <MX_TIM1_Init+0x1a0>)
 8000894:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 8000896:	4b55      	ldr	r3, [pc, #340]	@ (80009ec <MX_TIM1_Init+0x19c>)
 8000898:	f240 227f 	movw	r2, #639	@ 0x27f
 800089c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b53      	ldr	r3, [pc, #332]	@ (80009ec <MX_TIM1_Init+0x19c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80008a4:	4b51      	ldr	r3, [pc, #324]	@ (80009ec <MX_TIM1_Init+0x19c>)
 80008a6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80008aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b4f      	ldr	r3, [pc, #316]	@ (80009ec <MX_TIM1_Init+0x19c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b2:	4b4e      	ldr	r3, [pc, #312]	@ (80009ec <MX_TIM1_Init+0x19c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b8:	4b4c      	ldr	r3, [pc, #304]	@ (80009ec <MX_TIM1_Init+0x19c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008be:	484b      	ldr	r0, [pc, #300]	@ (80009ec <MX_TIM1_Init+0x19c>)
 80008c0:	f004 fd46 	bl	8005350 <HAL_TIM_Base_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80008ca:	f000 fe19 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008d8:	4619      	mov	r1, r3
 80008da:	4844      	ldr	r0, [pc, #272]	@ (80009ec <MX_TIM1_Init+0x19c>)
 80008dc:	f005 fd9c 	bl	8006418 <HAL_TIM_ConfigClockSource>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80008e6:	f000 fe0b 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ea:	4840      	ldr	r0, [pc, #256]	@ (80009ec <MX_TIM1_Init+0x19c>)
 80008ec:	f004 fd87 	bl	80053fe <HAL_TIM_PWM_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80008f6:	f000 fe03 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000906:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800090a:	4619      	mov	r1, r3
 800090c:	4837      	ldr	r0, [pc, #220]	@ (80009ec <MX_TIM1_Init+0x19c>)
 800090e:	f006 fd7d 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000918:	f000 fdf2 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091c:	2360      	movs	r3, #96	@ 0x60
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000924:	2300      	movs	r3, #0
 8000926:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000938:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800093c:	2200      	movs	r2, #0
 800093e:	4619      	mov	r1, r3
 8000940:	482a      	ldr	r0, [pc, #168]	@ (80009ec <MX_TIM1_Init+0x19c>)
 8000942:	f005 fc55 	bl	80061f0 <HAL_TIM_PWM_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800094c:	f000 fdd8 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000950:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000954:	2204      	movs	r2, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4824      	ldr	r0, [pc, #144]	@ (80009ec <MX_TIM1_Init+0x19c>)
 800095a:	f005 fc49 	bl	80061f0 <HAL_TIM_PWM_ConfigChannel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000964:	f000 fdcc 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000968:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800096c:	2208      	movs	r2, #8
 800096e:	4619      	mov	r1, r3
 8000970:	481e      	ldr	r0, [pc, #120]	@ (80009ec <MX_TIM1_Init+0x19c>)
 8000972:	f005 fc3d 	bl	80061f0 <HAL_TIM_PWM_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800097c:	f000 fdc0 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000980:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000984:	220c      	movs	r2, #12
 8000986:	4619      	mov	r1, r3
 8000988:	4818      	ldr	r0, [pc, #96]	@ (80009ec <MX_TIM1_Init+0x19c>)
 800098a:	f005 fc31 	bl	80061f0 <HAL_TIM_PWM_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000994:	f000 fdb4 	bl	8001500 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	4807      	ldr	r0, [pc, #28]	@ (80009ec <MX_TIM1_Init+0x19c>)
 80009ce:	f006 fdab 	bl	8007528 <HAL_TIMEx_ConfigBreakDeadTime>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 80009d8:	f000 fd92 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <MX_TIM1_Init+0x19c>)
 80009de:	f001 f87f 	bl	8001ae0 <HAL_TIM_MspPostInit>

}
 80009e2:	bf00      	nop
 80009e4:	3770      	adds	r7, #112	@ 0x70
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	24000080 	.word	0x24000080
 80009f0:	40010000 	.word	0x40010000

080009f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b090      	sub	sp, #64	@ 0x40
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	463b      	mov	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a30:	4b3e      	ldr	r3, [pc, #248]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000a32:	4a3f      	ldr	r2, [pc, #252]	@ (8000b30 <MX_TIM3_Init+0x13c>)
 8000a34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 8000a36:	4b3d      	ldr	r3, [pc, #244]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000a38:	f240 227f 	movw	r2, #639	@ 0x27f
 8000a3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a44:	4b39      	ldr	r3, [pc, #228]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000a46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b37      	ldr	r3, [pc, #220]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b36      	ldr	r3, [pc, #216]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a58:	4834      	ldr	r0, [pc, #208]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000a5a:	f004 fc79 	bl	8005350 <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000a64:	f000 fd4c 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a72:	4619      	mov	r1, r3
 8000a74:	482d      	ldr	r0, [pc, #180]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000a76:	f005 fccf 	bl	8006418 <HAL_TIM_ConfigClockSource>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000a80:	f000 fd3e 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000a84:	4829      	ldr	r0, [pc, #164]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000a86:	f004 fe29 	bl	80056dc <HAL_TIM_IC_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000a90:	f000 fd36 	bl	8001500 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000a94:	2304      	movs	r3, #4
 8000a96:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a98:	2350      	movs	r3, #80	@ 0x50
 8000a9a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4619      	mov	r1, r3
 8000aae:	481f      	ldr	r0, [pc, #124]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000ab0:	f005 fdaa 	bl	8006608 <HAL_TIM_SlaveConfigSynchro>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8000aba:	f000 fd21 	bl	8001500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4815      	ldr	r0, [pc, #84]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000ad8:	f005 faed 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8000ae2:	f000 fd0d 	bl	8001500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000aea:	2302      	movs	r3, #2
 8000aec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	2204      	movs	r2, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000af8:	f005 fadd 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8000b02:	f000 fcfd 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	@ (8000b2c <MX_TIM3_Init+0x138>)
 8000b14:	f006 fc7a 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 8000b1e:	f000 fcef 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	3740      	adds	r7, #64	@ 0x40
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	240000cc 	.word	0x240000cc
 8000b30:	40000400 	.word	0x40000400

08000b34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b090      	sub	sp, #64	@ 0x40
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b70:	4b3e      	ldr	r3, [pc, #248]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000b72:	4a3f      	ldr	r2, [pc, #252]	@ (8000c70 <MX_TIM4_Init+0x13c>)
 8000b74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8000b76:	4b3d      	ldr	r3, [pc, #244]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000b78:	f240 227f 	movw	r2, #639	@ 0x27f
 8000b7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b84:	4b39      	ldr	r3, [pc, #228]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8c:	4b37      	ldr	r3, [pc, #220]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b36      	ldr	r3, [pc, #216]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b98:	4834      	ldr	r0, [pc, #208]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000b9a:	f004 fbd9 	bl	8005350 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000ba4:	f000 fcac 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	482d      	ldr	r0, [pc, #180]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000bb6:	f005 fc2f 	bl	8006418 <HAL_TIM_ConfigClockSource>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000bc0:	f000 fc9e 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000bc4:	4829      	ldr	r0, [pc, #164]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000bc6:	f004 fd89 	bl	80056dc <HAL_TIM_IC_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000bd0:	f000 fc96 	bl	8001500 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000bd8:	2350      	movs	r3, #80	@ 0x50
 8000bda:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	481f      	ldr	r0, [pc, #124]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000bf0:	f005 fd0a 	bl	8006608 <HAL_TIM_SlaveConfigSynchro>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000bfa:	f000 fc81 	bl	8001500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c02:	2301      	movs	r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	4815      	ldr	r0, [pc, #84]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000c18:	f005 fa4d 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8000c22:	f000 fc6d 	bl	8001500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c26:	2302      	movs	r3, #2
 8000c28:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2204      	movs	r2, #4
 8000c34:	4619      	mov	r1, r3
 8000c36:	480d      	ldr	r0, [pc, #52]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000c38:	f005 fa3d 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8000c42:	f000 fc5d 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	@ (8000c6c <MX_TIM4_Init+0x138>)
 8000c54:	f006 fbda 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 8000c5e:	f000 fc4f 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	3740      	adds	r7, #64	@ 0x40
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	24000118 	.word	0x24000118
 8000c70:	40000800 	.word	0x40000800

08000c74 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b090      	sub	sp, #64	@ 0x40
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8000db0 <MX_TIM5_Init+0x13c>)
 8000cb4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 639;
 8000cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000cb8:	f240 227f 	movw	r2, #639	@ 0x27f
 8000cbc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000cc4:	4b39      	ldr	r3, [pc, #228]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000cc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b37      	ldr	r3, [pc, #220]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b36      	ldr	r3, [pc, #216]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cd8:	4834      	ldr	r0, [pc, #208]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000cda:	f004 fb39 	bl	8005350 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000ce4:	f000 fc0c 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	482d      	ldr	r0, [pc, #180]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000cf6:	f005 fb8f 	bl	8006418 <HAL_TIM_ConfigClockSource>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000d00:	f000 fbfe 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000d04:	4829      	ldr	r0, [pc, #164]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000d06:	f004 fce9 	bl	80056dc <HAL_TIM_IC_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000d10:	f000 fbf6 	bl	8001500 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d14:	2304      	movs	r3, #4
 8000d16:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d18:	2350      	movs	r3, #80	@ 0x50
 8000d1a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	481f      	ldr	r0, [pc, #124]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000d30:	f005 fc6a 	bl	8006608 <HAL_TIM_SlaveConfigSynchro>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8000d3a:	f000 fbe1 	bl	8001500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d42:	2301      	movs	r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	4815      	ldr	r0, [pc, #84]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000d58:	f005 f9ad 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8000d62:	f000 fbcd 	bl	8001500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d66:	2302      	movs	r3, #2
 8000d68:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	2204      	movs	r2, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	480d      	ldr	r0, [pc, #52]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000d78:	f005 f99d 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 8000d82:	f000 fbbd 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	@ (8000dac <MX_TIM5_Init+0x138>)
 8000d94:	f006 fb3a 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM5_Init+0x12e>
  {
    Error_Handler();
 8000d9e:	f000 fbaf 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	3740      	adds	r7, #64	@ 0x40
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000164 	.word	0x24000164
 8000db0:	40000c00 	.word	0x40000c00

08000db4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b090      	sub	sp, #64	@ 0x40
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000df0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000df2:	4a40      	ldr	r2, [pc, #256]	@ (8000ef4 <MX_TIM15_Init+0x140>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 8000df6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000df8:	f240 227f 	movw	r2, #639	@ 0x27f
 8000dfc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e04:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000e06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e0a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0c:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e12:	4b37      	ldr	r3, [pc, #220]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e18:	4b35      	ldr	r3, [pc, #212]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000e1e:	4834      	ldr	r0, [pc, #208]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000e20:	f004 fa96 	bl	8005350 <HAL_TIM_Base_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8000e2a:	f000 fb69 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e32:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e38:	4619      	mov	r1, r3
 8000e3a:	482d      	ldr	r0, [pc, #180]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000e3c:	f005 faec 	bl	8006418 <HAL_TIM_ConfigClockSource>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 8000e46:	f000 fb5b 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000e4a:	4829      	ldr	r0, [pc, #164]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000e4c:	f004 fc46 	bl	80056dc <HAL_TIM_IC_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8000e56:	f000 fb53 	bl	8001500 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000e5e:	2350      	movs	r3, #80	@ 0x50
 8000e60:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	481e      	ldr	r0, [pc, #120]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000e76:	f005 fbc7 	bl	8006608 <HAL_TIM_SlaveConfigSynchro>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000e80:	f000 fb3e 	bl	8001500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4814      	ldr	r0, [pc, #80]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000e9e:	f005 f90a 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8000ea8:	f000 fb2a 	bl	8001500 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000eac:	2302      	movs	r3, #2
 8000eae:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2204      	movs	r2, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000ebe:	f005 f8fa 	bl	80060b6 <HAL_TIM_IC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 8000ec8:	f000 fb1a 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_TIM15_Init+0x13c>)
 8000eda:	f006 fa97 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 8000ee4:	f000 fb0c 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	3740      	adds	r7, #64	@ 0x40
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	240001b0 	.word	0x240001b0
 8000ef4:	40014000 	.word	0x40014000

08000ef8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000efe:	4a23      	ldr	r2, [pc, #140]	@ (8000f8c <MX_USART3_UART_Init+0x94>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2e:	4b16      	ldr	r3, [pc, #88]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f34:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f40:	4811      	ldr	r0, [pc, #68]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f42:	f006 fb9b 	bl	800767c <HAL_UART_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f4c:	f000 fad8 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f50:	2100      	movs	r1, #0
 8000f52:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f54:	f007 fca7 	bl	80088a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f5e:	f000 facf 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f66:	f007 fcdc 	bl	8008922 <HAL_UARTEx_SetRxFifoThreshold>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f70:	f000 fac6 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	@ (8000f88 <MX_USART3_UART_Init+0x90>)
 8000f76:	f007 fc5d 	bl	8008834 <HAL_UARTEx_DisableFifoMode>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f80:	f000 fabe 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	240001fc 	.word	0x240001fc
 8000f8c:	40004800 	.word	0x40004800

08000f90 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08e      	sub	sp, #56	@ 0x38
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	4b80      	ldr	r3, [pc, #512]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8000fb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fbc:	4a7e      	ldr	r2, [pc, #504]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8000fc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	623b      	str	r3, [r7, #32]
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd4:	4b78      	ldr	r3, [pc, #480]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8000fd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fda:	4a77      	ldr	r2, [pc, #476]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fe4:	4b74      	ldr	r3, [pc, #464]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8000fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff2:	4b71      	ldr	r3, [pc, #452]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8000ff4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ff8:	4a6f      	ldr	r2, [pc, #444]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8000ffa:	f043 0320 	orr.w	r3, r3, #32
 8000ffe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001002:	4b6d      	ldr	r3, [pc, #436]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8001004:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001008:	f003 0320 	and.w	r3, r3, #32
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001010:	4b69      	ldr	r3, [pc, #420]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8001012:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001016:	4a68      	ldr	r2, [pc, #416]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001020:	4b65      	ldr	r3, [pc, #404]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8001022:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b62      	ldr	r3, [pc, #392]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8001030:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001034:	4a60      	ldr	r2, [pc, #384]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800103e:	4b5e      	ldr	r3, [pc, #376]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8001040:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b5a      	ldr	r3, [pc, #360]	@ (80011b8 <MX_GPIO_Init+0x218>)
 800104e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001052:	4a59      	ldr	r2, [pc, #356]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800105c:	4b56      	ldr	r3, [pc, #344]	@ (80011b8 <MX_GPIO_Init+0x218>)
 800105e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b53      	ldr	r3, [pc, #332]	@ (80011b8 <MX_GPIO_Init+0x218>)
 800106c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001070:	4a51      	ldr	r2, [pc, #324]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8001072:	f043 0308 	orr.w	r3, r3, #8
 8001076:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800107a:	4b4f      	ldr	r3, [pc, #316]	@ (80011b8 <MX_GPIO_Init+0x218>)
 800107c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001088:	4b4b      	ldr	r3, [pc, #300]	@ (80011b8 <MX_GPIO_Init+0x218>)
 800108a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800108e:	4a4a      	ldr	r2, [pc, #296]	@ (80011b8 <MX_GPIO_Init+0x218>)
 8001090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001094:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001098:	4b47      	ldr	r3, [pc, #284]	@ (80011b8 <MX_GPIO_Init+0x218>)
 800109a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800109e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ac:	4843      	ldr	r0, [pc, #268]	@ (80011bc <MX_GPIO_Init+0x21c>)
 80010ae:	f001 fa09 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f244 0101 	movw	r1, #16385	@ 0x4001
 80010b8:	4841      	ldr	r0, [pc, #260]	@ (80011c0 <MX_GPIO_Init+0x220>)
 80010ba:	f001 fa03 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2102      	movs	r1, #2
 80010c2:	4840      	ldr	r0, [pc, #256]	@ (80011c4 <MX_GPIO_Init+0x224>)
 80010c4:	f001 f9fe 	bl	80024c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	483a      	ldr	r0, [pc, #232]	@ (80011c8 <MX_GPIO_Init+0x228>)
 80010de:	f001 f841 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80010e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4830      	ldr	r0, [pc, #192]	@ (80011bc <MX_GPIO_Init+0x21c>)
 80010fc:	f001 f832 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001100:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	4829      	ldr	r0, [pc, #164]	@ (80011c0 <MX_GPIO_Init+0x220>)
 800111a:	f001 f823 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800111e:	2380      	movs	r3, #128	@ 0x80
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001122:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001130:	4619      	mov	r1, r3
 8001132:	4826      	ldr	r0, [pc, #152]	@ (80011cc <MX_GPIO_Init+0x22c>)
 8001134:	f001 f816 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	4820      	ldr	r0, [pc, #128]	@ (80011d0 <MX_GPIO_Init+0x230>)
 800114e:	f001 f809 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001164:	230a      	movs	r3, #10
 8001166:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116c:	4619      	mov	r1, r3
 800116e:	4818      	ldr	r0, [pc, #96]	@ (80011d0 <MX_GPIO_Init+0x230>)
 8001170:	f000 fff8 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001174:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <MX_GPIO_Init+0x230>)
 800118e:	f000 ffe9 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001192:	2302      	movs	r3, #2
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	4806      	ldr	r0, [pc, #24]	@ (80011c4 <MX_GPIO_Init+0x224>)
 80011aa:	f000 ffdb 	bl	8002164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ae:	bf00      	nop
 80011b0:	3738      	adds	r7, #56	@ 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	58024400 	.word	0x58024400
 80011bc:	58021400 	.word	0x58021400
 80011c0:	58020400 	.word	0x58020400
 80011c4:	58021000 	.word	0x58021000
 80011c8:	58020800 	.word	0x58020800
 80011cc:	58021800 	.word	0x58021800
 80011d0:	58020000 	.word	0x58020000
 80011d4:	00000000 	.word	0x00000000

080011d8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4ab2      	ldr	r2, [pc, #712]	@ (80014b0 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d155      	bne.n	8001296 <HAL_TIM_IC_CaptureCallback+0xbe>
    {

        cycle_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80011ea:	2100      	movs	r1, #0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f005 fa4d 	bl	800668c <HAL_TIM_ReadCapturedValue>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4aaf      	ldr	r2, [pc, #700]	@ (80014b4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 80011f6:	6013      	str	r3, [r2, #0]
        period_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80011f8:	2104      	movs	r1, #4
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f005 fa46 	bl	800668c <HAL_TIM_ReadCapturedValue>
 8001200:	4602      	mov	r2, r0
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	461a      	mov	r2, r3
 800120c:	4baa      	ldr	r3, [pc, #680]	@ (80014b8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800120e:	601a      	str	r2, [r3, #0]
    	if (cycle_rc_0 > 1990 && cycle_rc_0 < 2010 && period_rc_0 > 0 && cycle_rc_0 > period_rc_0 ) {
 8001210:	4ba8      	ldr	r3, [pc, #672]	@ (80014b4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001218:	4293      	cmp	r3, r2
 800121a:	d93c      	bls.n	8001296 <HAL_TIM_IC_CaptureCallback+0xbe>
 800121c:	4ba5      	ldr	r3, [pc, #660]	@ (80014b4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001224:	4293      	cmp	r3, r2
 8001226:	d836      	bhi.n	8001296 <HAL_TIM_IC_CaptureCallback+0xbe>
 8001228:	4ba3      	ldr	r3, [pc, #652]	@ (80014b8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d032      	beq.n	8001296 <HAL_TIM_IC_CaptureCallback+0xbe>
 8001230:	4ba0      	ldr	r3, [pc, #640]	@ (80014b4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4ba0      	ldr	r3, [pc, #640]	@ (80014b8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d92c      	bls.n	8001296 <HAL_TIM_IC_CaptureCallback+0xbe>
    		channel_mag_0 = (float) period_rc_0 / (float) cycle_rc_0;
 800123c:	4b9e      	ldr	r3, [pc, #632]	@ (80014b8 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001248:	4b9a      	ldr	r3, [pc, #616]	@ (80014b4 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001258:	4b98      	ldr	r3, [pc, #608]	@ (80014bc <HAL_TIM_IC_CaptureCallback+0x2e4>)
 800125a:	edc3 7a00 	vstr	s15, [r3]
    		rc_comm_temp[0] = (channel_mag_0 - 0.5) * 2 * RC_FULLSCALE;
 800125e:	4b97      	ldr	r3, [pc, #604]	@ (80014bc <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001268:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800126c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001270:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001274:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 80014a8 <HAL_TIM_IC_CaptureCallback+0x2d0>
 8001278:	ee27 7b06 	vmul.f64	d7, d7, d6
 800127c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001280:	4b8f      	ldr	r3, [pc, #572]	@ (80014c0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8001282:	edc3 7a00 	vstr	s15, [r3]
    		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001286:	2100      	movs	r1, #0
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f004 fd4f 	bl	8005d2c <HAL_TIM_IC_Stop_IT>
    		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 800128e:	2104      	movs	r1, #4
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f004 fb89 	bl	80059a8 <HAL_TIM_IC_Stop>

    	}
    }

    if (htim->Instance == TIM4)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a8a      	ldr	r2, [pc, #552]	@ (80014c4 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d155      	bne.n	800134c <HAL_TIM_IC_CaptureCallback+0x174>
    {

            cycle_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80012a0:	2100      	movs	r1, #0
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f005 f9f2 	bl	800668c <HAL_TIM_ReadCapturedValue>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a87      	ldr	r2, [pc, #540]	@ (80014c8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80012ac:	6013      	str	r3, [r2, #0]
            period_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80012ae:	2104      	movs	r1, #4
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f005 f9eb 	bl	800668c <HAL_TIM_ReadCapturedValue>
 80012b6:	4602      	mov	r2, r0
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b82      	ldr	r3, [pc, #520]	@ (80014cc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80012c4:	601a      	str	r2, [r3, #0]
        	if (cycle_rc_1 > 1990 && cycle_rc_1 < 2010 && period_rc_1 > 0 && cycle_rc_1 > period_rc_1) {
 80012c6:	4b80      	ldr	r3, [pc, #512]	@ (80014c8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d93c      	bls.n	800134c <HAL_TIM_IC_CaptureCallback+0x174>
 80012d2:	4b7d      	ldr	r3, [pc, #500]	@ (80014c8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 80012da:	4293      	cmp	r3, r2
 80012dc:	d836      	bhi.n	800134c <HAL_TIM_IC_CaptureCallback+0x174>
 80012de:	4b7b      	ldr	r3, [pc, #492]	@ (80014cc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d032      	beq.n	800134c <HAL_TIM_IC_CaptureCallback+0x174>
 80012e6:	4b78      	ldr	r3, [pc, #480]	@ (80014c8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b78      	ldr	r3, [pc, #480]	@ (80014cc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d92c      	bls.n	800134c <HAL_TIM_IC_CaptureCallback+0x174>
        		channel_mag_1 = (float) period_rc_1 / (float) cycle_rc_1;
 80012f2:	4b76      	ldr	r3, [pc, #472]	@ (80014cc <HAL_TIM_IC_CaptureCallback+0x2f4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012fe:	4b72      	ldr	r3, [pc, #456]	@ (80014c8 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	4b70      	ldr	r3, [pc, #448]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001310:	edc3 7a00 	vstr	s15, [r3]
        		rc_comm_temp[1] = (channel_mag_1 - 0.5) * 2 * RC_FULLSCALE;
 8001314:	4b6e      	ldr	r3, [pc, #440]	@ (80014d0 <HAL_TIM_IC_CaptureCallback+0x2f8>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800131e:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001322:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001326:	ee37 7b07 	vadd.f64	d7, d7, d7
 800132a:	ed9f 6b5f 	vldr	d6, [pc, #380]	@ 80014a8 <HAL_TIM_IC_CaptureCallback+0x2d0>
 800132e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001332:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001336:	4b62      	ldr	r3, [pc, #392]	@ (80014c0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8001338:	edc3 7a01 	vstr	s15, [r3, #4]
        		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800133c:	2100      	movs	r1, #0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f004 fcf4 	bl	8005d2c <HAL_TIM_IC_Stop_IT>
        		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001344:	2104      	movs	r1, #4
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f004 fb2e 	bl	80059a8 <HAL_TIM_IC_Stop>

        	}
    }

    if (htim->Instance == TIM5)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a60      	ldr	r2, [pc, #384]	@ (80014d4 <HAL_TIM_IC_CaptureCallback+0x2fc>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d155      	bne.n	8001402 <HAL_TIM_IC_CaptureCallback+0x22a>
            {

                cycle_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001356:	2100      	movs	r1, #0
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f005 f997 	bl	800668c <HAL_TIM_ReadCapturedValue>
 800135e:	4603      	mov	r3, r0
 8001360:	4a5d      	ldr	r2, [pc, #372]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 8001362:	6013      	str	r3, [r2, #0]
                period_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001364:	2104      	movs	r1, #4
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f005 f990 	bl	800668c <HAL_TIM_ReadCapturedValue>
 800136c:	4602      	mov	r2, r0
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	461a      	mov	r2, r3
 8001378:	4b58      	ldr	r3, [pc, #352]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x304>)
 800137a:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_2 > 1990 && cycle_rc_2 < 2010 && period_rc_2 > 0 && cycle_rc_2 > period_rc_2) {
 800137c:	4b56      	ldr	r3, [pc, #344]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001384:	4293      	cmp	r3, r2
 8001386:	d93c      	bls.n	8001402 <HAL_TIM_IC_CaptureCallback+0x22a>
 8001388:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001390:	4293      	cmp	r3, r2
 8001392:	d836      	bhi.n	8001402 <HAL_TIM_IC_CaptureCallback+0x22a>
 8001394:	4b51      	ldr	r3, [pc, #324]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x304>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d032      	beq.n	8001402 <HAL_TIM_IC_CaptureCallback+0x22a>
 800139c:	4b4e      	ldr	r3, [pc, #312]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b4e      	ldr	r3, [pc, #312]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x304>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d92c      	bls.n	8001402 <HAL_TIM_IC_CaptureCallback+0x22a>
            		channel_mag_2 = (float) period_rc_2 / (float) cycle_rc_2;
 80013a8:	4b4c      	ldr	r3, [pc, #304]	@ (80014dc <HAL_TIM_IC_CaptureCallback+0x304>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013b4:	4b48      	ldr	r3, [pc, #288]	@ (80014d8 <HAL_TIM_IC_CaptureCallback+0x300>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c4:	4b46      	ldr	r3, [pc, #280]	@ (80014e0 <HAL_TIM_IC_CaptureCallback+0x308>)
 80013c6:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp[2] = (channel_mag_2 - 0.5) * 2 * RC_FULLSCALE;
 80013ca:	4b45      	ldr	r3, [pc, #276]	@ (80014e0 <HAL_TIM_IC_CaptureCallback+0x308>)
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80013d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80013dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013e0:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 80014a8 <HAL_TIM_IC_CaptureCallback+0x2d0>
 80013e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013ec:	4b34      	ldr	r3, [pc, #208]	@ (80014c0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 80013ee:	edc3 7a02 	vstr	s15, [r3, #8]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80013f2:	2100      	movs	r1, #0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f004 fc99 	bl	8005d2c <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80013fa:	2104      	movs	r1, #4
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f004 fad3 	bl	80059a8 <HAL_TIM_IC_Stop>

            	}
            }
    if (htim->Instance == TIM15)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a37      	ldr	r2, [pc, #220]	@ (80014e4 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d175      	bne.n	80014f8 <HAL_TIM_IC_CaptureCallback+0x320>
            {

                cycle_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800140c:	2100      	movs	r1, #0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f005 f93c 	bl	800668c <HAL_TIM_ReadCapturedValue>
 8001414:	4603      	mov	r3, r0
 8001416:	4a34      	ldr	r2, [pc, #208]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001418:	6013      	str	r3, [r2, #0]
                period_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 800141a:	2104      	movs	r1, #4
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f005 f935 	bl	800668c <HAL_TIM_ReadCapturedValue>
 8001422:	4602      	mov	r2, r0
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	461a      	mov	r2, r3
 800142e:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x314>)
 8001430:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_3 > 1990 && cycle_rc_3 < 2010 && period_rc_3 > 0 && cycle_rc_3 > period_rc_3) {
 8001432:	4b2d      	ldr	r3, [pc, #180]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800143a:	4293      	cmp	r3, r2
 800143c:	d95c      	bls.n	80014f8 <HAL_TIM_IC_CaptureCallback+0x320>
 800143e:	4b2a      	ldr	r3, [pc, #168]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001446:	4293      	cmp	r3, r2
 8001448:	d856      	bhi.n	80014f8 <HAL_TIM_IC_CaptureCallback+0x320>
 800144a:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x314>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d052      	beq.n	80014f8 <HAL_TIM_IC_CaptureCallback+0x320>
 8001452:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x310>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x314>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d94c      	bls.n	80014f8 <HAL_TIM_IC_CaptureCallback+0x320>
            		channel_mag_3 = (float) period_rc_3 / (float) cycle_rc_3;
 800145e:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <HAL_TIM_IC_CaptureCallback+0x314>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800146a:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <HAL_TIM_IC_CaptureCallback+0x310>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147a:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <HAL_TIM_IC_CaptureCallback+0x318>)
 800147c:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp[3] =  channel_mag_3 * RC_FULLSCALE;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <HAL_TIM_IC_CaptureCallback+0x318>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80014f4 <HAL_TIM_IC_CaptureCallback+0x31c>
 800148a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8001490:	edc3 7a03 	vstr	s15, [r3, #12]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001494:	2100      	movs	r1, #0
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f004 fc48 	bl	8005d2c <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 800149c:	2104      	movs	r1, #4
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f004 fa82 	bl	80059a8 <HAL_TIM_IC_Stop>
 80014a4:	e028      	b.n	80014f8 <HAL_TIM_IC_CaptureCallback+0x320>
 80014a6:	bf00      	nop
 80014a8:	00000000 	.word	0x00000000
 80014ac:	408f4000 	.word	0x408f4000
 80014b0:	40000400 	.word	0x40000400
 80014b4:	240002bc 	.word	0x240002bc
 80014b8:	240002cc 	.word	0x240002cc
 80014bc:	240002dc 	.word	0x240002dc
 80014c0:	24000290 	.word	0x24000290
 80014c4:	40000800 	.word	0x40000800
 80014c8:	240002c0 	.word	0x240002c0
 80014cc:	240002d0 	.word	0x240002d0
 80014d0:	240002e0 	.word	0x240002e0
 80014d4:	40000c00 	.word	0x40000c00
 80014d8:	240002c4 	.word	0x240002c4
 80014dc:	240002d4 	.word	0x240002d4
 80014e0:	240002e4 	.word	0x240002e4
 80014e4:	40014000 	.word	0x40014000
 80014e8:	240002c8 	.word	0x240002c8
 80014ec:	240002d8 	.word	0x240002d8
 80014f0:	240002e8 	.word	0x240002e8
 80014f4:	447a0000 	.word	0x447a0000

            	}
            }


}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <Error_Handler+0x8>

0800150c <set_motor_pwm>:


extern TIM_HandleTypeDef htim1;

void set_motor_pwm(uint32_t motor_pwm[])
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if (motor_pwm[0] >= MOTOR_MAX_PWM)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800151c:	d305      	bcc.n	800152a <set_motor_pwm+0x1e>
	  htim1.Instance->CCR1 = MOTOR_MAX_PWM;
 800151e:	4b35      	ldr	r3, [pc, #212]	@ (80015f4 <set_motor_pwm+0xe8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001526:	635a      	str	r2, [r3, #52]	@ 0x34
 8001528:	e00d      	b.n	8001546 <set_motor_pwm+0x3a>
  else if (motor_pwm[0] <= MOTOR_MIN_PWM)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d104      	bne.n	800153c <set_motor_pwm+0x30>
	  htim1.Instance->CCR1 = MOTOR_MIN_PWM;
 8001532:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <set_motor_pwm+0xe8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	635a      	str	r2, [r3, #52]	@ 0x34
 800153a:	e004      	b.n	8001546 <set_motor_pwm+0x3a>
  else
	  htim1.Instance->CCR1 = motor_pwm[0] ;
 800153c:	4b2d      	ldr	r3, [pc, #180]	@ (80015f4 <set_motor_pwm+0xe8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6812      	ldr	r2, [r2, #0]
 8001544:	635a      	str	r2, [r3, #52]	@ 0x34
  
  if (motor_pwm[1] >= MOTOR_MAX_PWM)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3304      	adds	r3, #4
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001550:	d305      	bcc.n	800155e <set_motor_pwm+0x52>
	  htim1.Instance->CCR2 = MOTOR_MAX_PWM;
 8001552:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <set_motor_pwm+0xe8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800155a:	639a      	str	r2, [r3, #56]	@ 0x38
 800155c:	e00e      	b.n	800157c <set_motor_pwm+0x70>
  else if (motor_pwm[1] <= MOTOR_MIN_PWM)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3304      	adds	r3, #4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d104      	bne.n	8001572 <set_motor_pwm+0x66>
	  htim1.Instance->CCR2 = MOTOR_MIN_PWM;
 8001568:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <set_motor_pwm+0xe8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2200      	movs	r2, #0
 800156e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001570:	e004      	b.n	800157c <set_motor_pwm+0x70>
  else
	  htim1.Instance->CCR2 =  motor_pwm[1] ;
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <set_motor_pwm+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6852      	ldr	r2, [r2, #4]
 800157a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  if (motor_pwm[2] >= MOTOR_MAX_PWM)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3308      	adds	r3, #8
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001586:	d305      	bcc.n	8001594 <set_motor_pwm+0x88>
	  htim1.Instance->CCR3 = MOTOR_MAX_PWM;
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <set_motor_pwm+0xe8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001592:	e00e      	b.n	80015b2 <set_motor_pwm+0xa6>
  else if (motor_pwm[2] <= MOTOR_MIN_PWM)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3308      	adds	r3, #8
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d104      	bne.n	80015a8 <set_motor_pwm+0x9c>
	  htim1.Instance->CCR3 = MOTOR_MIN_PWM;
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <set_motor_pwm+0xe8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015a6:	e004      	b.n	80015b2 <set_motor_pwm+0xa6>
  else
	  htim1.Instance->CCR3 =  motor_pwm[2] ;
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <set_motor_pwm+0xe8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6892      	ldr	r2, [r2, #8]
 80015b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  if (motor_pwm[3] >= MOTOR_MAX_PWM)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	330c      	adds	r3, #12
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80015bc:	d305      	bcc.n	80015ca <set_motor_pwm+0xbe>
	  htim1.Instance->CCR4 = MOTOR_MAX_PWM;
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <set_motor_pwm+0xe8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80015c6:	641a      	str	r2, [r3, #64]	@ 0x40
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM)
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM;
  else
	  htim1.Instance->CCR4 = motor_pwm[3] ;
}
 80015c8:	e00e      	b.n	80015e8 <set_motor_pwm+0xdc>
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	330c      	adds	r3, #12
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d104      	bne.n	80015de <set_motor_pwm+0xd2>
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <set_motor_pwm+0xe8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015dc:	e004      	b.n	80015e8 <set_motor_pwm+0xdc>
	  htim1.Instance->CCR4 = motor_pwm[3] ;
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <set_motor_pwm+0xe8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68d2      	ldr	r2, [r2, #12]
 80015e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	24000080 	.word	0x24000080

080015f8 <set_motor_pwm_zero>:


void set_motor_pwm_zero(uint32_t motor_pwm[])
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  motor_pwm[0] = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
  motor_pwm[1] = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
  motor_pwm[2] = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3308      	adds	r3, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
  motor_pwm[3] = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	330c      	adds	r3, #12
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <get_target_euler>:
const float max_yaw_rad = PI*YAW_MAX_DEG/180.0f;
int t1;


void get_target_euler(float euler_rc[], float rc_comm[])
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
    t1 = rc_comm[0];
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001640:	ee17 2a90 	vmov	r2, s15
 8001644:	4b4c      	ldr	r3, [pc, #304]	@ (8001778 <get_target_euler+0x14c>)
 8001646:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8001648:	4b4b      	ldr	r3, [pc, #300]	@ (8001778 <get_target_euler+0x14c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001650:	dd04      	ble.n	800165c <get_target_euler+0x30>
        t1 = RC_FULLSCALE;
 8001652:	4b49      	ldr	r3, [pc, #292]	@ (8001778 <get_target_euler+0x14c>)
 8001654:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e007      	b.n	800166c <get_target_euler+0x40>
    else if (t1 < -RC_FULLSCALE)
 800165c:	4b46      	ldr	r3, [pc, #280]	@ (8001778 <get_target_euler+0x14c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001664:	da02      	bge.n	800166c <get_target_euler+0x40>
        t1 = - RC_FULLSCALE;
 8001666:	4b44      	ldr	r3, [pc, #272]	@ (8001778 <get_target_euler+0x14c>)
 8001668:	4a44      	ldr	r2, [pc, #272]	@ (800177c <get_target_euler+0x150>)
 800166a:	601a      	str	r2, [r3, #0]
    euler_rc[0] = -t1 * max_pitch_rad / RC_FULLSCALE;
 800166c:	4b42      	ldr	r3, [pc, #264]	@ (8001778 <get_target_euler+0x14c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	425b      	negs	r3, r3
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001780 <get_target_euler+0x154>
 800167e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001682:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001784 <get_target_euler+0x158>
 8001686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm[1];
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	3304      	adds	r3, #4
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169c:	ee17 2a90 	vmov	r2, s15
 80016a0:	4b35      	ldr	r3, [pc, #212]	@ (8001778 <get_target_euler+0x14c>)
 80016a2:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 80016a4:	4b34      	ldr	r3, [pc, #208]	@ (8001778 <get_target_euler+0x14c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016ac:	dd04      	ble.n	80016b8 <get_target_euler+0x8c>
        t1 = RC_FULLSCALE;
 80016ae:	4b32      	ldr	r3, [pc, #200]	@ (8001778 <get_target_euler+0x14c>)
 80016b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e007      	b.n	80016c8 <get_target_euler+0x9c>
    else if (t1 < -RC_FULLSCALE)
 80016b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <get_target_euler+0x14c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80016c0:	da02      	bge.n	80016c8 <get_target_euler+0x9c>
        t1 = - RC_FULLSCALE;
 80016c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001778 <get_target_euler+0x14c>)
 80016c4:	4a2d      	ldr	r2, [pc, #180]	@ (800177c <get_target_euler+0x150>)
 80016c6:	601a      	str	r2, [r3, #0]
    euler_rc[1] = -t1 * max_roll_rad / RC_FULLSCALE;
 80016c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001778 <get_target_euler+0x14c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	425b      	negs	r3, r3
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001780 <get_target_euler+0x154>
 80016da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3304      	adds	r3, #4
 80016e2:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001784 <get_target_euler+0x158>
 80016e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ea:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm[2];
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	3308      	adds	r3, #8
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016fa:	ee17 2a90 	vmov	r2, s15
 80016fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001778 <get_target_euler+0x14c>)
 8001700:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8001702:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <get_target_euler+0x14c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800170a:	dd04      	ble.n	8001716 <get_target_euler+0xea>
        t1 = RC_FULLSCALE;
 800170c:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <get_target_euler+0x14c>)
 800170e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e007      	b.n	8001726 <get_target_euler+0xfa>
    else if (t1 < -RC_FULLSCALE)
 8001716:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <get_target_euler+0x14c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800171e:	da02      	bge.n	8001726 <get_target_euler+0xfa>
        t1 = - RC_FULLSCALE;
 8001720:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <get_target_euler+0x14c>)
 8001722:	4a16      	ldr	r2, [pc, #88]	@ (800177c <get_target_euler+0x150>)
 8001724:	601a      	str	r2, [r3, #0]

    if(t1 > YAW_DEAD_THR)
 8001726:	4b14      	ldr	r3, [pc, #80]	@ (8001778 <get_target_euler+0x14c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800172e:	dd0c      	ble.n	800174a <get_target_euler+0x11e>
    {
        euler_rc[3] = euler_rc[3] + max_yaw_rad;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	330c      	adds	r3, #12
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001788 <get_target_euler+0x15c>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	330c      	adds	r3, #12
 8001740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001744:	edc3 7a00 	vstr	s15, [r3]
    }
    else if(t1 < -YAW_DEAD_THR)
    {
        euler_rc[3] = euler_rc[3] - max_yaw_rad;
    }
}
 8001748:	e010      	b.n	800176c <get_target_euler+0x140>
    else if(t1 < -YAW_DEAD_THR)
 800174a:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <get_target_euler+0x14c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8001752:	da0b      	bge.n	800176c <get_target_euler+0x140>
        euler_rc[3] = euler_rc[3] - max_yaw_rad;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	330c      	adds	r3, #12
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001788 <get_target_euler+0x15c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	330c      	adds	r3, #12
 8001764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001768:	edc3 7a00 	vstr	s15, [r3]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	240002ec 	.word	0x240002ec
 800177c:	fffffc18 	.word	0xfffffc18
 8001780:	3f060a92 	.word	0x3f060a92
 8001784:	447a0000 	.word	0x447a0000
 8001788:	3cab92a6 	.word	0x3cab92a6

0800178c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_MspInit+0x30>)
 8001794:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001798:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <HAL_MspInit+0x30>)
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_MspInit+0x30>)
 80017a4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	58024400 	.word	0x58024400

080017c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0ba      	sub	sp, #232	@ 0xe8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	22c0      	movs	r2, #192	@ 0xc0
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f007 f92b 	bl	8008a3c <memset>
  if(hi2c->Instance==I2C1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a27      	ldr	r2, [pc, #156]	@ (8001888 <HAL_I2C_MspInit+0xc8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d146      	bne.n	800187e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017f0:	f04f 0208 	mov.w	r2, #8
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	4618      	mov	r0, r3
 8001808:	f001 ffc2 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001812:	f7ff fe75 	bl	8001500 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <HAL_I2C_MspInit+0xcc>)
 8001818:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800181c:	4a1b      	ldr	r2, [pc, #108]	@ (800188c <HAL_I2C_MspInit+0xcc>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001826:	4b19      	ldr	r3, [pc, #100]	@ (800188c <HAL_I2C_MspInit+0xcc>)
 8001828:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001834:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001838:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800184e:	2304      	movs	r3, #4
 8001850:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	@ (8001890 <HAL_I2C_MspInit+0xd0>)
 800185c:	f000 fc82 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <HAL_I2C_MspInit+0xcc>)
 8001862:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001866:	4a09      	ldr	r2, [pc, #36]	@ (800188c <HAL_I2C_MspInit+0xcc>)
 8001868:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800186c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_I2C_MspInit+0xcc>)
 8001872:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001876:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	37e8      	adds	r7, #232	@ 0xe8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40005400 	.word	0x40005400
 800188c:	58024400 	.word	0x58024400
 8001890:	58020400 	.word	0x58020400

08001894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b090      	sub	sp, #64	@ 0x40
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a82      	ldr	r2, [pc, #520]	@ (8001abc <HAL_TIM_Base_MspInit+0x228>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d10f      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b6:	4b82      	ldr	r3, [pc, #520]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80018b8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80018bc:	4a80      	ldr	r2, [pc, #512]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80018c6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80018c8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80018d4:	e0ee      	b.n	8001ab4 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM3)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a7a      	ldr	r2, [pc, #488]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x230>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d136      	bne.n	800194e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e0:	4b77      	ldr	r3, [pc, #476]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80018e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018e6:	4a76      	ldr	r2, [pc, #472]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80018f0:	4b73      	ldr	r3, [pc, #460]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80018f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	4b70      	ldr	r3, [pc, #448]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001900:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001904:	4a6e      	ldr	r2, [pc, #440]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800190e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001910:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800191c:	2310      	movs	r3, #16
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800192c:	2302      	movs	r3, #2
 800192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001934:	4619      	mov	r1, r3
 8001936:	4864      	ldr	r0, [pc, #400]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x234>)
 8001938:	f000 fc14 	bl	8002164 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	201d      	movs	r0, #29
 8001942:	f000 fbda 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001946:	201d      	movs	r0, #29
 8001948:	f000 fbf1 	bl	800212e <HAL_NVIC_EnableIRQ>
}
 800194c:	e0b2      	b.n	8001ab4 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM4)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a5e      	ldr	r2, [pc, #376]	@ (8001acc <HAL_TIM_Base_MspInit+0x238>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d136      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001958:	4b59      	ldr	r3, [pc, #356]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 800195a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800195e:	4a58      	ldr	r2, [pc, #352]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001968:	4b55      	ldr	r3, [pc, #340]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 800196a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	4b52      	ldr	r3, [pc, #328]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001978:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800197c:	4a50      	ldr	r2, [pc, #320]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 800197e:	f043 0302 	orr.w	r3, r3, #2
 8001982:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001986:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001988:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001994:	2340      	movs	r3, #64	@ 0x40
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019a4:	2302      	movs	r3, #2
 80019a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ac:	4619      	mov	r1, r3
 80019ae:	4846      	ldr	r0, [pc, #280]	@ (8001ac8 <HAL_TIM_Base_MspInit+0x234>)
 80019b0:	f000 fbd8 	bl	8002164 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	201e      	movs	r0, #30
 80019ba:	f000 fb9e 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019be:	201e      	movs	r0, #30
 80019c0:	f000 fbb5 	bl	800212e <HAL_NVIC_EnableIRQ>
}
 80019c4:	e076      	b.n	8001ab4 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM5)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a41      	ldr	r2, [pc, #260]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x23c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d136      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x1aa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019d0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80019d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80019d6:	4a3a      	ldr	r2, [pc, #232]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80019e0:	4b37      	ldr	r3, [pc, #220]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80019e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80019f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019f4:	4a32      	ldr	r2, [pc, #200]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019fe:	4b30      	ldr	r3, [pc, #192]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001a00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a24:	4619      	mov	r1, r3
 8001a26:	482b      	ldr	r0, [pc, #172]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x240>)
 8001a28:	f000 fb9c 	bl	8002164 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2032      	movs	r0, #50	@ 0x32
 8001a32:	f000 fb62 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a36:	2032      	movs	r0, #50	@ 0x32
 8001a38:	f000 fb79 	bl	800212e <HAL_NVIC_EnableIRQ>
}
 8001a3c:	e03a      	b.n	8001ab4 <HAL_TIM_Base_MspInit+0x220>
  else if(htim_base->Instance==TIM15)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a25      	ldr	r2, [pc, #148]	@ (8001ad8 <HAL_TIM_Base_MspInit+0x244>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d135      	bne.n	8001ab4 <HAL_TIM_Base_MspInit+0x220>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a48:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001a4a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a54:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001a5a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a66:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001a68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a6c:	4a14      	ldr	r2, [pc, #80]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x22c>)
 8001a78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a84:	2320      	movs	r3, #32
 8001a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001a94:	2304      	movs	r3, #4
 8001a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480f      	ldr	r0, [pc, #60]	@ (8001adc <HAL_TIM_Base_MspInit+0x248>)
 8001aa0:	f000 fb60 	bl	8002164 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2074      	movs	r0, #116	@ 0x74
 8001aaa:	f000 fb26 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001aae:	2074      	movs	r0, #116	@ 0x74
 8001ab0:	f000 fb3d 	bl	800212e <HAL_NVIC_EnableIRQ>
}
 8001ab4:	bf00      	nop
 8001ab6:	3740      	adds	r7, #64	@ 0x40
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	58024400 	.word	0x58024400
 8001ac4:	40000400 	.word	0x40000400
 8001ac8:	58020400 	.word	0x58020400
 8001acc:	40000800 	.word	0x40000800
 8001ad0:	40000c00 	.word	0x40000c00
 8001ad4:	58020000 	.word	0x58020000
 8001ad8:	40014000 	.word	0x40014000
 8001adc:	58021000 	.word	0x58021000

08001ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <HAL_TIM_MspPostInit+0x6c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d11f      	bne.n	8001b42 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b02:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <HAL_TIM_MspPostInit+0x70>)
 8001b04:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b08:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <HAL_TIM_MspPostInit+0x70>)
 8001b0a:	f043 0310 	orr.w	r3, r3, #16
 8001b0e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_TIM_MspPostInit+0x70>)
 8001b14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001b20:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001b24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	@ (8001b54 <HAL_TIM_MspPostInit+0x74>)
 8001b3e:	f000 fb11 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	58024400 	.word	0x58024400
 8001b54:	58021000 	.word	0x58021000

08001b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0ba      	sub	sp, #232	@ 0xe8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	22c0      	movs	r2, #192	@ 0xc0
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f006 ff5f 	bl	8008a3c <memset>
  if(huart->Instance==USART3)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a27      	ldr	r2, [pc, #156]	@ (8001c20 <HAL_UART_MspInit+0xc8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d146      	bne.n	8001c16 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b88:	f04f 0202 	mov.w	r2, #2
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 fdf6 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001baa:	f7ff fca9 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bae:	4b1d      	ldr	r3, [pc, #116]	@ (8001c24 <HAL_UART_MspInit+0xcc>)
 8001bb0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c24 <HAL_UART_MspInit+0xcc>)
 8001bb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bba:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001bbe:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <HAL_UART_MspInit+0xcc>)
 8001bc0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bcc:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <HAL_UART_MspInit+0xcc>)
 8001bce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bd2:	4a14      	ldr	r2, [pc, #80]	@ (8001c24 <HAL_UART_MspInit+0xcc>)
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001bdc:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <HAL_UART_MspInit+0xcc>)
 8001bde:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001bea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c04:	2307      	movs	r3, #7
 8001c06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c0a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <HAL_UART_MspInit+0xd0>)
 8001c12:	f000 faa7 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c16:	bf00      	nop
 8001c18:	37e8      	adds	r7, #232	@ 0xe8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40004800 	.word	0x40004800
 8001c24:	58024400 	.word	0x58024400
 8001c28:	58020c00 	.word	0x58020c00

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <NMI_Handler+0x4>

08001c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <MemManage_Handler+0x4>

08001c44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <BusFault_Handler+0x4>

08001c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <UsageFault_Handler+0x4>

08001c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c82:	f000 f93f 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c90:	4802      	ldr	r0, [pc, #8]	@ (8001c9c <TIM3_IRQHandler+0x10>)
 8001c92:	f004 f909 	bl	8005ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	240000cc 	.word	0x240000cc

08001ca0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ca4:	4802      	ldr	r0, [pc, #8]	@ (8001cb0 <TIM4_IRQHandler+0x10>)
 8001ca6:	f004 f8ff 	bl	8005ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	24000118 	.word	0x24000118

08001cb4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001cb8:	4802      	ldr	r0, [pc, #8]	@ (8001cc4 <TIM5_IRQHandler+0x10>)
 8001cba:	f004 f8f5 	bl	8005ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	24000164 	.word	0x24000164

08001cc8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001ccc:	4802      	ldr	r0, [pc, #8]	@ (8001cd8 <TIM15_IRQHandler+0x10>)
 8001cce:	f004 f8eb 	bl	8005ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	240001b0 	.word	0x240001b0

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b32      	ldr	r3, [pc, #200]	@ (8001dac <SystemInit+0xd0>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ce6:	4a31      	ldr	r2, [pc, #196]	@ (8001dac <SystemInit+0xd0>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8001db0 <SystemInit+0xd4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d807      	bhi.n	8001d0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8001db0 <SystemInit+0xd4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 030f 	bic.w	r3, r3, #15
 8001d04:	4a2a      	ldr	r2, [pc, #168]	@ (8001db0 <SystemInit+0xd4>)
 8001d06:	f043 0303 	orr.w	r3, r3, #3
 8001d0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d0c:	4b29      	ldr	r3, [pc, #164]	@ (8001db4 <SystemInit+0xd8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a28      	ldr	r2, [pc, #160]	@ (8001db4 <SystemInit+0xd8>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d18:	4b26      	ldr	r3, [pc, #152]	@ (8001db4 <SystemInit+0xd8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d1e:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <SystemInit+0xd8>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4924      	ldr	r1, [pc, #144]	@ (8001db4 <SystemInit+0xd8>)
 8001d24:	4b24      	ldr	r3, [pc, #144]	@ (8001db8 <SystemInit+0xdc>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <SystemInit+0xd4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d36:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <SystemInit+0xd4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 030f 	bic.w	r3, r3, #15
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001db0 <SystemInit+0xd4>)
 8001d40:	f043 0303 	orr.w	r3, r3, #3
 8001d44:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001d46:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <SystemInit+0xd8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <SystemInit+0xd8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001d52:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <SystemInit+0xd8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d58:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <SystemInit+0xd8>)
 8001d5a:	4a18      	ldr	r2, [pc, #96]	@ (8001dbc <SystemInit+0xe0>)
 8001d5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <SystemInit+0xd8>)
 8001d60:	4a17      	ldr	r2, [pc, #92]	@ (8001dc0 <SystemInit+0xe4>)
 8001d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d64:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <SystemInit+0xd8>)
 8001d66:	4a17      	ldr	r2, [pc, #92]	@ (8001dc4 <SystemInit+0xe8>)
 8001d68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <SystemInit+0xd8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d70:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <SystemInit+0xd8>)
 8001d72:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <SystemInit+0xe8>)
 8001d74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d76:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <SystemInit+0xd8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <SystemInit+0xd8>)
 8001d7e:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <SystemInit+0xe8>)
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <SystemInit+0xd8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <SystemInit+0xd8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <SystemInit+0xd8>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d94:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <SystemInit+0xd8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <SystemInit+0xec>)
 8001d9c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001da0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00
 8001db0:	52002000 	.word	0x52002000
 8001db4:	58024400 	.word	0x58024400
 8001db8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001dbc:	02020200 	.word	0x02020200
 8001dc0:	01ff0000 	.word	0x01ff0000
 8001dc4:	01010280 	.word	0x01010280
 8001dc8:	52004000 	.word	0x52004000

08001dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dd0:	f7ff ff84 	bl	8001cdc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd4:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dd6:	490d      	ldr	r1, [pc, #52]	@ (8001e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ddc:	e002      	b.n	8001de4 <LoopCopyDataInit>

08001dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de2:	3304      	adds	r3, #4

08001de4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de8:	d3f9      	bcc.n	8001dde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dec:	4c0a      	ldr	r4, [pc, #40]	@ (8001e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df0:	e001      	b.n	8001df6 <LoopFillZerobss>

08001df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df4:	3204      	adds	r2, #4

08001df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df8:	d3fb      	bcc.n	8001df2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f006 fe27 	bl	8008a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dfe:	f7fe fbef 	bl	80005e0 <main>
  bx  lr
 8001e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e04:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001e08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e0c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001e10:	08008af4 	.word	0x08008af4
  ldr r2, =_sbss
 8001e14:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001e18:	240002f4 	.word	0x240002f4

08001e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <ADC_IRQHandler>
	...

08001e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e26:	2003      	movs	r0, #3
 8001e28:	f000 f95c 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e2c:	f001 fada 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_Init+0x68>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	4913      	ldr	r1, [pc, #76]	@ (8001e8c <HAL_Init+0x6c>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <HAL_Init+0x68>)
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	4a0e      	ldr	r2, [pc, #56]	@ (8001e8c <HAL_Init+0x6c>)
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <HAL_Init+0x70>)
 8001e62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e64:	4a0b      	ldr	r2, [pc, #44]	@ (8001e94 <HAL_Init+0x74>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 f814 	bl	8001e98 <HAL_InitTick>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e002      	b.n	8001e80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7a:	f7ff fc87 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	08008aac 	.word	0x08008aac
 8001e90:	24000004 	.word	0x24000004
 8001e94:	24000000 	.word	0x24000000

08001e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <HAL_InitTick+0x60>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e021      	b.n	8001ef0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001eac:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <HAL_InitTick+0x64>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <HAL_InitTick+0x60>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f941 	bl	800214a <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00e      	b.n	8001ef0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d80a      	bhi.n	8001eee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ee0:	f000 f90b 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee4:	4a06      	ldr	r2, [pc, #24]	@ (8001f00 <HAL_InitTick+0x68>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	2400000c 	.word	0x2400000c
 8001efc:	24000000 	.word	0x24000000
 8001f00:	24000008 	.word	0x24000008

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	2400000c 	.word	0x2400000c
 8001f28:	240002f0 	.word	0x240002f0

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	@ (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	240002f0 	.word	0x240002f0

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <__NVIC_SetPriorityGrouping+0x40>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <__NVIC_SetPriorityGrouping+0x40>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00
 8001f88:	05fa0000 	.word	0x05fa0000

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	@ (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	@ (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	@ (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
         );
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	@ 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020c4:	f7ff ff8e 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff29 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff40 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff90 	bl	8002038 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5f 	bl	8001fe4 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff33 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa4 	bl	80020a0 <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002172:	4b89      	ldr	r3, [pc, #548]	@ (8002398 <HAL_GPIO_Init+0x234>)
 8002174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002176:	e194      	b.n	80024a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 8186 	beq.w	800249c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d005      	beq.n	80021a8 <HAL_GPIO_Init+0x44>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d130      	bne.n	800220a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021de:	2201      	movs	r2, #1
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	091b      	lsrs	r3, r3, #4
 80021f4:	f003 0201 	and.w	r2, r3, #1
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b03      	cmp	r3, #3
 8002214:	d017      	beq.n	8002246 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	2203      	movs	r2, #3
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d123      	bne.n	800229a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	08da      	lsrs	r2, r3, #3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3208      	adds	r2, #8
 800225a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	69b9      	ldr	r1, [r7, #24]
 8002296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0203 	and.w	r2, r3, #3
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80e0 	beq.w	800249c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022dc:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <HAL_GPIO_Init+0x238>)
 80022de:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80022e2:	4a2e      	ldr	r2, [pc, #184]	@ (800239c <HAL_GPIO_Init+0x238>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80022ec:	4b2b      	ldr	r3, [pc, #172]	@ (800239c <HAL_GPIO_Init+0x238>)
 80022ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fa:	4a29      	ldr	r2, [pc, #164]	@ (80023a0 <HAL_GPIO_Init+0x23c>)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a20      	ldr	r2, [pc, #128]	@ (80023a4 <HAL_GPIO_Init+0x240>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d052      	beq.n	80023cc <HAL_GPIO_Init+0x268>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1f      	ldr	r2, [pc, #124]	@ (80023a8 <HAL_GPIO_Init+0x244>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d031      	beq.n	8002392 <HAL_GPIO_Init+0x22e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1e      	ldr	r2, [pc, #120]	@ (80023ac <HAL_GPIO_Init+0x248>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d02b      	beq.n	800238e <HAL_GPIO_Init+0x22a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a1d      	ldr	r2, [pc, #116]	@ (80023b0 <HAL_GPIO_Init+0x24c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d025      	beq.n	800238a <HAL_GPIO_Init+0x226>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <HAL_GPIO_Init+0x250>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01f      	beq.n	8002386 <HAL_GPIO_Init+0x222>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a1b      	ldr	r2, [pc, #108]	@ (80023b8 <HAL_GPIO_Init+0x254>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d019      	beq.n	8002382 <HAL_GPIO_Init+0x21e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a1a      	ldr	r2, [pc, #104]	@ (80023bc <HAL_GPIO_Init+0x258>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_GPIO_Init+0x21a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a19      	ldr	r2, [pc, #100]	@ (80023c0 <HAL_GPIO_Init+0x25c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00d      	beq.n	800237a <HAL_GPIO_Init+0x216>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a18      	ldr	r2, [pc, #96]	@ (80023c4 <HAL_GPIO_Init+0x260>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <HAL_GPIO_Init+0x212>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a17      	ldr	r2, [pc, #92]	@ (80023c8 <HAL_GPIO_Init+0x264>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d101      	bne.n	8002372 <HAL_GPIO_Init+0x20e>
 800236e:	2309      	movs	r3, #9
 8002370:	e02d      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002372:	230a      	movs	r3, #10
 8002374:	e02b      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002376:	2308      	movs	r3, #8
 8002378:	e029      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 800237a:	2307      	movs	r3, #7
 800237c:	e027      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 800237e:	2306      	movs	r3, #6
 8002380:	e025      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002382:	2305      	movs	r3, #5
 8002384:	e023      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002386:	2304      	movs	r3, #4
 8002388:	e021      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 800238a:	2303      	movs	r3, #3
 800238c:	e01f      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 800238e:	2302      	movs	r3, #2
 8002390:	e01d      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002392:	2301      	movs	r3, #1
 8002394:	e01b      	b.n	80023ce <HAL_GPIO_Init+0x26a>
 8002396:	bf00      	nop
 8002398:	58000080 	.word	0x58000080
 800239c:	58024400 	.word	0x58024400
 80023a0:	58000400 	.word	0x58000400
 80023a4:	58020000 	.word	0x58020000
 80023a8:	58020400 	.word	0x58020400
 80023ac:	58020800 	.word	0x58020800
 80023b0:	58020c00 	.word	0x58020c00
 80023b4:	58021000 	.word	0x58021000
 80023b8:	58021400 	.word	0x58021400
 80023bc:	58021800 	.word	0x58021800
 80023c0:	58021c00 	.word	0x58021c00
 80023c4:	58022000 	.word	0x58022000
 80023c8:	58022400 	.word	0x58022400
 80023cc:	2300      	movs	r3, #0
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023de:	4938      	ldr	r1, [pc, #224]	@ (80024c0 <HAL_GPIO_Init+0x35c>)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002412:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002440:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	3301      	adds	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f47f ae63 	bne.w	8002178 <HAL_GPIO_Init+0x14>
  }
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	3724      	adds	r7, #36	@ 0x24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	58000400 	.word	0x58000400

080024c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
 80024d0:	4613      	mov	r3, r2
 80024d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024e0:	e003      	b.n	80024ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	041a      	lsls	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	619a      	str	r2, [r3, #24]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e08b      	b.n	8002622 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff f94e 	bl	80017c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	@ 0x24
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002548:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002558:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	e006      	b.n	8002580 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800257e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d108      	bne.n	800259a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	e007      	b.n	80025aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <HAL_I2C_Init+0x134>)
 80025b6:	430b      	orrs	r3, r1
 80025b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69d9      	ldr	r1, [r3, #28]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1a      	ldr	r2, [r3, #32]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	02008000 	.word	0x02008000

08002630 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	d138      	bne.n	80026b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002650:	2302      	movs	r3, #2
 8002652:	e032      	b.n	80026ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	@ 0x24
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002682:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
  }
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d139      	bne.n	8002750 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e033      	b.n	8002752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2224      	movs	r2, #36	@ 0x24
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002718:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	e000      	b.n	8002752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002750:	2302      	movs	r3, #2
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002768:	4b29      	ldr	r3, [pc, #164]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	2b06      	cmp	r3, #6
 8002772:	d00a      	beq.n	800278a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002774:	4b26      	ldr	r3, [pc, #152]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e040      	b.n	8002808 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e03e      	b.n	8002808 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800278a:	4b21      	ldr	r3, [pc, #132]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002792:	491f      	ldr	r1, [pc, #124]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4313      	orrs	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800279a:	f7ff fbc7 	bl	8001f2c <HAL_GetTick>
 800279e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027a0:	e009      	b.n	80027b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027a2:	f7ff fbc3 	bl	8001f2c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027b0:	d901      	bls.n	80027b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e028      	b.n	8002808 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027b6:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027c2:	d1ee      	bne.n	80027a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b1e      	cmp	r3, #30
 80027c8:	d008      	beq.n	80027dc <HAL_PWREx_ConfigSupply+0x7c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80027ce:	d005      	beq.n	80027dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b1d      	cmp	r3, #29
 80027d4:	d002      	beq.n	80027dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b2d      	cmp	r3, #45	@ 0x2d
 80027da:	d114      	bne.n	8002806 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80027dc:	f7ff fba6 	bl	8001f2c <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027e2:	e009      	b.n	80027f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027e4:	f7ff fba2 	bl	8001f2c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027f2:	d901      	bls.n	80027f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e007      	b.n	8002808 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_PWREx_ConfigSupply+0xb0>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002804:	d1ee      	bne.n	80027e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	58024800 	.word	0x58024800

08002814 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	@ 0x30
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f000 bc1f 	b.w	8003066 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80b3 	beq.w	800299c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002836:	4b95      	ldr	r3, [pc, #596]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002840:	4b92      	ldr	r3, [pc, #584]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002848:	2b10      	cmp	r3, #16
 800284a:	d007      	beq.n	800285c <HAL_RCC_OscConfig+0x48>
 800284c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284e:	2b18      	cmp	r3, #24
 8002850:	d112      	bne.n	8002878 <HAL_RCC_OscConfig+0x64>
 8002852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d10d      	bne.n	8002878 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	4b8b      	ldr	r3, [pc, #556]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8098 	beq.w	800299a <HAL_RCC_OscConfig+0x186>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 8093 	bne.w	800299a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e3f6      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002880:	d106      	bne.n	8002890 <HAL_RCC_OscConfig+0x7c>
 8002882:	4b82      	ldr	r3, [pc, #520]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a81      	ldr	r2, [pc, #516]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e058      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d112      	bne.n	80028be <HAL_RCC_OscConfig+0xaa>
 8002898:	4b7c      	ldr	r3, [pc, #496]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a7b      	ldr	r2, [pc, #492]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b79      	ldr	r3, [pc, #484]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a78      	ldr	r2, [pc, #480]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028aa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b76      	ldr	r3, [pc, #472]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a75      	ldr	r2, [pc, #468]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	e041      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c6:	d112      	bne.n	80028ee <HAL_RCC_OscConfig+0xda>
 80028c8:	4b70      	ldr	r3, [pc, #448]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6f      	ldr	r2, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b6d      	ldr	r3, [pc, #436]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6c      	ldr	r2, [pc, #432]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a69      	ldr	r2, [pc, #420]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	e029      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80028f6:	d112      	bne.n	800291e <HAL_RCC_OscConfig+0x10a>
 80028f8:	4b64      	ldr	r3, [pc, #400]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a63      	ldr	r2, [pc, #396]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80028fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b61      	ldr	r3, [pc, #388]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a60      	ldr	r2, [pc, #384]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 800290a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b5e      	ldr	r3, [pc, #376]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5d      	ldr	r2, [pc, #372]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e011      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
 800291e:	4b5b      	ldr	r3, [pc, #364]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5a      	ldr	r2, [pc, #360]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b58      	ldr	r3, [pc, #352]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a57      	ldr	r2, [pc, #348]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002930:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b55      	ldr	r3, [pc, #340]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a54      	ldr	r2, [pc, #336]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 800293c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002940:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d013      	beq.n	8002972 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7ff faef 	bl	8001f2c <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002952:	f7ff faeb 	bl	8001f2c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b64      	cmp	r3, #100	@ 0x64
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e380      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002964:	4b49      	ldr	r3, [pc, #292]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x13e>
 8002970:	e014      	b.n	800299c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7ff fadb 	bl	8001f2c <HAL_GetTick>
 8002976:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297a:	f7ff fad7 	bl	8001f2c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b64      	cmp	r3, #100	@ 0x64
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e36c      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800298c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <HAL_RCC_OscConfig+0x166>
 8002998:	e000      	b.n	800299c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 808c 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029aa:	4b38      	ldr	r3, [pc, #224]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029b4:	4b35      	ldr	r3, [pc, #212]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80029b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_RCC_OscConfig+0x1bc>
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	2b18      	cmp	r3, #24
 80029c4:	d137      	bne.n	8002a36 <HAL_RCC_OscConfig+0x222>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f003 0303 	and.w	r3, r3, #3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d132      	bne.n	8002a36 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x1d4>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e33e      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029e8:	4b28      	ldr	r3, [pc, #160]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 0219 	bic.w	r2, r3, #25
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4925      	ldr	r1, [pc, #148]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7ff fa97 	bl	8001f2c <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a02:	f7ff fa93 	bl	8001f2c <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e328      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a14:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	4917      	ldr	r1, [pc, #92]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a34:	e045      	b.n	8002ac2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d028      	beq.n	8002a90 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a3e:	4b13      	ldr	r3, [pc, #76]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0219 	bic.w	r2, r3, #25
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	4910      	ldr	r1, [pc, #64]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7ff fa6c 	bl	8001f2c <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a58:	f7ff fa68 	bl	8001f2c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e2fd      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a6a:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	061b      	lsls	r3, r3, #24
 8002a84:	4901      	ldr	r1, [pc, #4]	@ (8002a8c <HAL_RCC_OscConfig+0x278>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
 8002a8a:	e01a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x2ae>
 8002a8c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a90:	4b97      	ldr	r3, [pc, #604]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a96      	ldr	r2, [pc, #600]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002a96:	f023 0301 	bic.w	r3, r3, #1
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fa46 	bl	8001f2c <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7ff fa42 	bl	8001f2c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e2d7      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ab6:	4b8e      	ldr	r3, [pc, #568]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d06a      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ace:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ad6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ad8:	4b85      	ldr	r3, [pc, #532]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d007      	beq.n	8002af4 <HAL_RCC_OscConfig+0x2e0>
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b18      	cmp	r3, #24
 8002ae8:	d11b      	bne.n	8002b22 <HAL_RCC_OscConfig+0x30e>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d116      	bne.n	8002b22 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002af4:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2f8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b80      	cmp	r3, #128	@ 0x80
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e2ac      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b0c:	4b78      	ldr	r3, [pc, #480]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	061b      	lsls	r3, r3, #24
 8002b1a:	4975      	ldr	r1, [pc, #468]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b20:	e040      	b.n	8002ba4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d023      	beq.n	8002b72 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b2a:	4b71      	ldr	r3, [pc, #452]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a70      	ldr	r2, [pc, #448]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7ff f9f9 	bl	8001f2c <HAL_GetTick>
 8002b3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b3e:	f7ff f9f5 	bl	8001f2c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e28a      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b50:	4b67      	ldr	r3, [pc, #412]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b5c:	4b64      	ldr	r3, [pc, #400]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	4961      	ldr	r1, [pc, #388]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
 8002b70:	e018      	b.n	8002ba4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b72:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a5e      	ldr	r2, [pc, #376]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7ff f9d5 	bl	8001f2c <HAL_GetTick>
 8002b82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b86:	f7ff f9d1 	bl	8001f2c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e266      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b98:	4b55      	ldr	r3, [pc, #340]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d036      	beq.n	8002c1e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d019      	beq.n	8002bec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7ff f9b2 	bl	8001f2c <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7ff f9ae 	bl	8001f2c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e243      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bde:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x3b8>
 8002bea:	e018      	b.n	8002c1e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bec:	4b40      	ldr	r3, [pc, #256]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7ff f998 	bl	8001f2c <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7ff f994 	bl	8001f2c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e229      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c12:	4b37      	ldr	r3, [pc, #220]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d036      	beq.n	8002c98 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d019      	beq.n	8002c66 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c32:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2e      	ldr	r2, [pc, #184]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002c38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c3e:	f7ff f975 	bl	8001f2c <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c46:	f7ff f971 	bl	8001f2c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e206      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c58:	4b25      	ldr	r3, [pc, #148]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x432>
 8002c64:	e018      	b.n	8002c98 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c66:	4b22      	ldr	r3, [pc, #136]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a21      	ldr	r2, [pc, #132]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002c6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c72:	f7ff f95b 	bl	8001f2c <HAL_GetTick>
 8002c76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c7a:	f7ff f957 	bl	8001f2c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1ec      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c8c:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f0      	bne.n	8002c7a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80af 	beq.w	8002e04 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ca6:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <HAL_RCC_OscConfig+0x4e0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a12      	ldr	r2, [pc, #72]	@ (8002cf4 <HAL_RCC_OscConfig+0x4e0>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cb2:	f7ff f93b 	bl	8001f2c <HAL_GetTick>
 8002cb6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7ff f937 	bl	8001f2c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b64      	cmp	r3, #100	@ 0x64
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1cc      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_RCC_OscConfig+0x4e0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10b      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4e4>
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce4:	4a02      	ldr	r2, [pc, #8]	@ (8002cf0 <HAL_RCC_OscConfig+0x4dc>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cec:	e05b      	b.n	8002da6 <HAL_RCC_OscConfig+0x592>
 8002cee:	bf00      	nop
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	58024800 	.word	0x58024800
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d112      	bne.n	8002d26 <HAL_RCC_OscConfig+0x512>
 8002d00:	4b9d      	ldr	r3, [pc, #628]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d04:	4a9c      	ldr	r2, [pc, #624]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0c:	4b9a      	ldr	r3, [pc, #616]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d10:	4a99      	ldr	r2, [pc, #612]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d18:	4b97      	ldr	r3, [pc, #604]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1c:	4a96      	ldr	r2, [pc, #600]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d1e:	f023 0304 	bic.w	r3, r3, #4
 8002d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d24:	e03f      	b.n	8002da6 <HAL_RCC_OscConfig+0x592>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	d112      	bne.n	8002d54 <HAL_RCC_OscConfig+0x540>
 8002d2e:	4b92      	ldr	r3, [pc, #584]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d32:	4a91      	ldr	r2, [pc, #580]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d3a:	4b8f      	ldr	r3, [pc, #572]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3e:	4a8e      	ldr	r2, [pc, #568]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d46:	4b8c      	ldr	r3, [pc, #560]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4a:	4a8b      	ldr	r2, [pc, #556]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d52:	e028      	b.n	8002da6 <HAL_RCC_OscConfig+0x592>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b85      	cmp	r3, #133	@ 0x85
 8002d5a:	d112      	bne.n	8002d82 <HAL_RCC_OscConfig+0x56e>
 8002d5c:	4b86      	ldr	r3, [pc, #536]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a85      	ldr	r2, [pc, #532]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d62:	f043 0304 	orr.w	r3, r3, #4
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d68:	4b83      	ldr	r3, [pc, #524]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	4a82      	ldr	r2, [pc, #520]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d74:	4b80      	ldr	r3, [pc, #512]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d78:	4a7f      	ldr	r2, [pc, #508]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d80:	e011      	b.n	8002da6 <HAL_RCC_OscConfig+0x592>
 8002d82:	4b7d      	ldr	r3, [pc, #500]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a7c      	ldr	r2, [pc, #496]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	4a79      	ldr	r2, [pc, #484]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9a:	4b77      	ldr	r3, [pc, #476]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	4a76      	ldr	r2, [pc, #472]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002da4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d015      	beq.n	8002dda <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7ff f8bd 	bl	8001f2c <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7ff f8b9 	bl	8001f2c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e14c      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ee      	beq.n	8002db6 <HAL_RCC_OscConfig+0x5a2>
 8002dd8:	e014      	b.n	8002e04 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7ff f8a7 	bl	8001f2c <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002de0:	e00a      	b.n	8002df8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7ff f8a3 	bl	8001f2c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e136      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002df8:	4b5f      	ldr	r3, [pc, #380]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ee      	bne.n	8002de2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 812b 	beq.w	8003064 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e16:	2b18      	cmp	r3, #24
 8002e18:	f000 80bb 	beq.w	8002f92 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	f040 8095 	bne.w	8002f50 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e26:	4b54      	ldr	r3, [pc, #336]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a53      	ldr	r2, [pc, #332]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002e2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7ff f87b 	bl	8001f2c <HAL_GetTick>
 8002e36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7ff f877 	bl	8001f2c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e10c      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e58:	4b47      	ldr	r3, [pc, #284]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002e5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e5c:	4b47      	ldr	r3, [pc, #284]	@ (8002f7c <HAL_RCC_OscConfig+0x768>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	4942      	ldr	r1, [pc, #264]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	3b01      	subs	r3, #1
 8002e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e80:	3b01      	subs	r3, #1
 8002e82:	025b      	lsls	r3, r3, #9
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	041b      	lsls	r3, r3, #16
 8002e90:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ea2:	4935      	ldr	r1, [pc, #212]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ea8:	4b33      	ldr	r3, [pc, #204]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	4a32      	ldr	r2, [pc, #200]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002eae:	f023 0301 	bic.w	r3, r3, #1
 8002eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002eb4:	4b30      	ldr	r3, [pc, #192]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002eb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eb8:	4b31      	ldr	r3, [pc, #196]	@ (8002f80 <HAL_RCC_OscConfig+0x76c>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ec0:	00d2      	lsls	r2, r2, #3
 8002ec2:	492d      	ldr	r1, [pc, #180]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	f023 020c 	bic.w	r2, r3, #12
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	4928      	ldr	r1, [pc, #160]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002eda:	4b27      	ldr	r3, [pc, #156]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	f023 0202 	bic.w	r2, r3, #2
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	4924      	ldr	r1, [pc, #144]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002eec:	4b22      	ldr	r3, [pc, #136]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	4a21      	ldr	r2, [pc, #132]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f04:	4b1c      	ldr	r3, [pc, #112]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f08:	4a1b      	ldr	r2, [pc, #108]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002f0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f10:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	4a18      	ldr	r2, [pc, #96]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f1c:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a15      	ldr	r2, [pc, #84]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7ff f800 	bl	8001f2c <HAL_GetTick>
 8002f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe fffc 	bl	8001f2c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e091      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f42:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x71c>
 8002f4e:	e089      	b.n	8003064 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a08      	ldr	r2, [pc, #32]	@ (8002f78 <HAL_RCC_OscConfig+0x764>)
 8002f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe ffe6 	bl	8001f2c <HAL_GetTick>
 8002f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f62:	e00f      	b.n	8002f84 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe ffe2 	bl	8001f2c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d908      	bls.n	8002f84 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e077      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
 8002f76:	bf00      	nop
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	fffffc0c 	.word	0xfffffc0c
 8002f80:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f84:	4b3a      	ldr	r3, [pc, #232]	@ (8003070 <HAL_RCC_OscConfig+0x85c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e9      	bne.n	8002f64 <HAL_RCC_OscConfig+0x750>
 8002f90:	e068      	b.n	8003064 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f92:	4b37      	ldr	r3, [pc, #220]	@ (8003070 <HAL_RCC_OscConfig+0x85c>)
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f98:	4b35      	ldr	r3, [pc, #212]	@ (8003070 <HAL_RCC_OscConfig+0x85c>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d031      	beq.n	800300a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0203 	and.w	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d12a      	bne.n	800300a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d122      	bne.n	800300a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d11a      	bne.n	800300a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	0a5b      	lsrs	r3, r3, #9
 8002fd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d111      	bne.n	800300a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	0c1b      	lsrs	r3, r3, #16
 8002fea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d108      	bne.n	800300a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	0e1b      	lsrs	r3, r3, #24
 8002ffc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e02b      	b.n	8003066 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800300e:	4b18      	ldr	r3, [pc, #96]	@ (8003070 <HAL_RCC_OscConfig+0x85c>)
 8003010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003012:	08db      	lsrs	r3, r3, #3
 8003014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003018:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	429a      	cmp	r2, r3
 8003022:	d01f      	beq.n	8003064 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003024:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <HAL_RCC_OscConfig+0x85c>)
 8003026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003028:	4a11      	ldr	r2, [pc, #68]	@ (8003070 <HAL_RCC_OscConfig+0x85c>)
 800302a:	f023 0301 	bic.w	r3, r3, #1
 800302e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003030:	f7fe ff7c 	bl	8001f2c <HAL_GetTick>
 8003034:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003036:	bf00      	nop
 8003038:	f7fe ff78 	bl	8001f2c <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	4293      	cmp	r3, r2
 8003042:	d0f9      	beq.n	8003038 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003044:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <HAL_RCC_OscConfig+0x85c>)
 8003046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003048:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <HAL_RCC_OscConfig+0x860>)
 800304a:	4013      	ands	r3, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003050:	00d2      	lsls	r2, r2, #3
 8003052:	4907      	ldr	r1, [pc, #28]	@ (8003070 <HAL_RCC_OscConfig+0x85c>)
 8003054:	4313      	orrs	r3, r2
 8003056:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_RCC_OscConfig+0x85c>)
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	4a04      	ldr	r2, [pc, #16]	@ (8003070 <HAL_RCC_OscConfig+0x85c>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3730      	adds	r7, #48	@ 0x30
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	58024400 	.word	0x58024400
 8003074:	ffff0007 	.word	0xffff0007

08003078 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e19c      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b8a      	ldr	r3, [pc, #552]	@ (80032b8 <HAL_RCC_ClockConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d910      	bls.n	80030bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b87      	ldr	r3, [pc, #540]	@ (80032b8 <HAL_RCC_ClockConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 020f 	bic.w	r2, r3, #15
 80030a2:	4985      	ldr	r1, [pc, #532]	@ (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b83      	ldr	r3, [pc, #524]	@ (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e184      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	4b7b      	ldr	r3, [pc, #492]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d908      	bls.n	80030ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030d8:	4b78      	ldr	r3, [pc, #480]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	4975      	ldr	r1, [pc, #468]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	4b70      	ldr	r3, [pc, #448]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003102:	429a      	cmp	r2, r3
 8003104:	d908      	bls.n	8003118 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003106:	4b6d      	ldr	r3, [pc, #436]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	496a      	ldr	r1, [pc, #424]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003114:	4313      	orrs	r3, r2
 8003116:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	4b64      	ldr	r3, [pc, #400]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003130:	429a      	cmp	r2, r3
 8003132:	d908      	bls.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003134:	4b61      	ldr	r3, [pc, #388]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	495e      	ldr	r1, [pc, #376]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003142:	4313      	orrs	r3, r2
 8003144:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d010      	beq.n	8003174 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	4b59      	ldr	r3, [pc, #356]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800315e:	429a      	cmp	r2, r3
 8003160:	d908      	bls.n	8003174 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003162:	4b56      	ldr	r3, [pc, #344]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4953      	ldr	r1, [pc, #332]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003170:	4313      	orrs	r3, r2
 8003172:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d010      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	4b4d      	ldr	r3, [pc, #308]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	429a      	cmp	r2, r3
 800318e:	d908      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b4a      	ldr	r3, [pc, #296]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f023 020f 	bic.w	r2, r3, #15
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4947      	ldr	r1, [pc, #284]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d055      	beq.n	800325a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031ae:	4b43      	ldr	r3, [pc, #268]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4940      	ldr	r1, [pc, #256]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031c8:	4b3c      	ldr	r3, [pc, #240]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d121      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0f6      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031e0:	4b36      	ldr	r3, [pc, #216]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d115      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0ea      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031f8:	4b30      	ldr	r3, [pc, #192]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0de      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003208:	4b2c      	ldr	r3, [pc, #176]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0d6      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003218:	4b28      	ldr	r3, [pc, #160]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f023 0207 	bic.w	r2, r3, #7
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4925      	ldr	r1, [pc, #148]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003226:	4313      	orrs	r3, r2
 8003228:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322a:	f7fe fe7f 	bl	8001f2c <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003230:	e00a      	b.n	8003248 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003232:	f7fe fe7b 	bl	8001f2c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0be      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003248:	4b1c      	ldr	r3, [pc, #112]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	429a      	cmp	r2, r3
 8003258:	d1eb      	bne.n	8003232 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d010      	beq.n	8003288 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	429a      	cmp	r2, r3
 8003274:	d208      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003276:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f023 020f 	bic.w	r2, r3, #15
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	490e      	ldr	r1, [pc, #56]	@ (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003284:	4313      	orrs	r3, r2
 8003286:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003288:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <HAL_RCC_ClockConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d214      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <HAL_RCC_ClockConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 020f 	bic.w	r2, r3, #15
 800329e:	4906      	ldr	r1, [pc, #24]	@ (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e086      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
 80032b8:	52002000 	.word	0x52002000
 80032bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	4b3f      	ldr	r3, [pc, #252]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032d8:	429a      	cmp	r2, r3
 80032da:	d208      	bcs.n	80032ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032dc:	4b3c      	ldr	r3, [pc, #240]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	4939      	ldr	r1, [pc, #228]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d010      	beq.n	800331c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	4b34      	ldr	r3, [pc, #208]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003306:	429a      	cmp	r2, r3
 8003308:	d208      	bcs.n	800331c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800330a:	4b31      	ldr	r3, [pc, #196]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	492e      	ldr	r1, [pc, #184]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003318:	4313      	orrs	r3, r2
 800331a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d010      	beq.n	800334a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	4b28      	ldr	r3, [pc, #160]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003334:	429a      	cmp	r2, r3
 8003336:	d208      	bcs.n	800334a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003338:	4b25      	ldr	r3, [pc, #148]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4922      	ldr	r1, [pc, #136]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003346:	4313      	orrs	r3, r2
 8003348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d010      	beq.n	8003378 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69da      	ldr	r2, [r3, #28]
 800335a:	4b1d      	ldr	r3, [pc, #116]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003362:	429a      	cmp	r2, r3
 8003364:	d208      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003366:	4b1a      	ldr	r3, [pc, #104]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4917      	ldr	r1, [pc, #92]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003374:	4313      	orrs	r3, r2
 8003376:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003378:	f000 f834 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b14      	ldr	r3, [pc, #80]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	4912      	ldr	r1, [pc, #72]	@ (80033d4 <HAL_RCC_ClockConfig+0x35c>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
 8003394:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003396:	4b0e      	ldr	r3, [pc, #56]	@ (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	4a0d      	ldr	r2, [pc, #52]	@ (80033d4 <HAL_RCC_ClockConfig+0x35c>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ac:	4a0a      	ldr	r2, [pc, #40]	@ (80033d8 <HAL_RCC_ClockConfig+0x360>)
 80033ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b0:	4a0a      	ldr	r2, [pc, #40]	@ (80033dc <HAL_RCC_ClockConfig+0x364>)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80033b6:	4b0a      	ldr	r3, [pc, #40]	@ (80033e0 <HAL_RCC_ClockConfig+0x368>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fd6c 	bl	8001e98 <HAL_InitTick>
 80033c0:	4603      	mov	r3, r0
 80033c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	58024400 	.word	0x58024400
 80033d4:	08008aac 	.word	0x08008aac
 80033d8:	24000004 	.word	0x24000004
 80033dc:	24000000 	.word	0x24000000
 80033e0:	24000008 	.word	0x24000008

080033e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	@ 0x24
 80033e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ea:	4bb3      	ldr	r3, [pc, #716]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033f2:	2b18      	cmp	r3, #24
 80033f4:	f200 8155 	bhi.w	80036a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80033f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <HAL_RCC_GetSysClockFreq+0x1c>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003465 	.word	0x08003465
 8003404:	080036a3 	.word	0x080036a3
 8003408:	080036a3 	.word	0x080036a3
 800340c:	080036a3 	.word	0x080036a3
 8003410:	080036a3 	.word	0x080036a3
 8003414:	080036a3 	.word	0x080036a3
 8003418:	080036a3 	.word	0x080036a3
 800341c:	080036a3 	.word	0x080036a3
 8003420:	0800348b 	.word	0x0800348b
 8003424:	080036a3 	.word	0x080036a3
 8003428:	080036a3 	.word	0x080036a3
 800342c:	080036a3 	.word	0x080036a3
 8003430:	080036a3 	.word	0x080036a3
 8003434:	080036a3 	.word	0x080036a3
 8003438:	080036a3 	.word	0x080036a3
 800343c:	080036a3 	.word	0x080036a3
 8003440:	08003491 	.word	0x08003491
 8003444:	080036a3 	.word	0x080036a3
 8003448:	080036a3 	.word	0x080036a3
 800344c:	080036a3 	.word	0x080036a3
 8003450:	080036a3 	.word	0x080036a3
 8003454:	080036a3 	.word	0x080036a3
 8003458:	080036a3 	.word	0x080036a3
 800345c:	080036a3 	.word	0x080036a3
 8003460:	08003497 	.word	0x08003497
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003464:	4b94      	ldr	r3, [pc, #592]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003470:	4b91      	ldr	r3, [pc, #580]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	08db      	lsrs	r3, r3, #3
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	4a90      	ldr	r2, [pc, #576]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003482:	e111      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003484:	4b8d      	ldr	r3, [pc, #564]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003486:	61bb      	str	r3, [r7, #24]
      break;
 8003488:	e10e      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800348a:	4b8d      	ldr	r3, [pc, #564]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800348c:	61bb      	str	r3, [r7, #24]
      break;
 800348e:	e10b      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003490:	4b8c      	ldr	r3, [pc, #560]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003492:	61bb      	str	r3, [r7, #24]
      break;
 8003494:	e108      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003496:	4b88      	ldr	r3, [pc, #544]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80034a0:	4b85      	ldr	r3, [pc, #532]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034ac:	4b82      	ldr	r3, [pc, #520]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80034b6:	4b80      	ldr	r3, [pc, #512]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ba:	08db      	lsrs	r3, r3, #3
 80034bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80e1 	beq.w	800369c <HAL_RCC_GetSysClockFreq+0x2b8>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	f000 8083 	beq.w	80035e8 <HAL_RCC_GetSysClockFreq+0x204>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	f200 80a1 	bhi.w	800362c <HAL_RCC_GetSysClockFreq+0x248>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x114>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d056      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80034f6:	e099      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034f8:	4b6f      	ldr	r3, [pc, #444]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b00      	cmp	r3, #0
 8003502:	d02d      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003504:	4b6c      	ldr	r3, [pc, #432]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	08db      	lsrs	r3, r3, #3
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	4a6b      	ldr	r2, [pc, #428]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
 8003514:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	ee07 3a90 	vmov	s15, r3
 800351c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800352e:	4b62      	ldr	r3, [pc, #392]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800353e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003542:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80036c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800354a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800354e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800355e:	e087      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80036cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800356e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003572:	4b51      	ldr	r3, [pc, #324]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003582:	ed97 6a02 	vldr	s12, [r7, #8]
 8003586:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80036c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800358a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800358e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800359a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035a2:	e065      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80036d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b6:	4b40      	ldr	r3, [pc, #256]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80036c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035e6:	e043      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80036d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80035f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035fa:	4b2f      	ldr	r3, [pc, #188]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800360a:	ed97 6a02 	vldr	s12, [r7, #8]
 800360e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80036c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800361a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800361e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800362a:	e021      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003636:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80036d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800363a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800363e:	4b1e      	ldr	r3, [pc, #120]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003652:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80036c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800365a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800365e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800366e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003670:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	0a5b      	lsrs	r3, r3, #9
 8003676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800367a:	3301      	adds	r3, #1
 800367c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003688:	edd7 6a07 	vldr	s13, [r7, #28]
 800368c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003694:	ee17 3a90 	vmov	r3, s15
 8003698:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800369a:	e005      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
      break;
 80036a0:	e002      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80036a2:	4b07      	ldr	r3, [pc, #28]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036a4:	61bb      	str	r3, [r7, #24]
      break;
 80036a6:	bf00      	nop
  }

  return sysclockfreq;
 80036a8:	69bb      	ldr	r3, [r7, #24]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	@ 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	58024400 	.word	0x58024400
 80036bc:	03d09000 	.word	0x03d09000
 80036c0:	003d0900 	.word	0x003d0900
 80036c4:	007a1200 	.word	0x007a1200
 80036c8:	46000000 	.word	0x46000000
 80036cc:	4c742400 	.word	0x4c742400
 80036d0:	4a742400 	.word	0x4a742400
 80036d4:	4af42400 	.word	0x4af42400

080036d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80036de:	f7ff fe81 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b10      	ldr	r3, [pc, #64]	@ (8003728 <HAL_RCC_GetHCLKFreq+0x50>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	490f      	ldr	r1, [pc, #60]	@ (800372c <HAL_RCC_GetHCLKFreq+0x54>)
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	fa22 f303 	lsr.w	r3, r2, r3
 80036fa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80036fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <HAL_RCC_GetHCLKFreq+0x50>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	4a09      	ldr	r2, [pc, #36]	@ (800372c <HAL_RCC_GetHCLKFreq+0x54>)
 8003706:	5cd3      	ldrb	r3, [r2, r3]
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	fa22 f303 	lsr.w	r3, r2, r3
 8003712:	4a07      	ldr	r2, [pc, #28]	@ (8003730 <HAL_RCC_GetHCLKFreq+0x58>)
 8003714:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003716:	4a07      	ldr	r2, [pc, #28]	@ (8003734 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800371c:	4b04      	ldr	r3, [pc, #16]	@ (8003730 <HAL_RCC_GetHCLKFreq+0x58>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	58024400 	.word	0x58024400
 800372c:	08008aac 	.word	0x08008aac
 8003730:	24000004 	.word	0x24000004
 8003734:	24000000 	.word	0x24000000

08003738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800373c:	f7ff ffcc 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 8003740:	4602      	mov	r2, r0
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	091b      	lsrs	r3, r3, #4
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	4904      	ldr	r1, [pc, #16]	@ (8003760 <HAL_RCC_GetPCLK1Freq+0x28>)
 800374e:	5ccb      	ldrb	r3, [r1, r3]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	58024400 	.word	0x58024400
 8003760:	08008aac 	.word	0x08008aac

08003764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003768:	f7ff ffb6 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4904      	ldr	r1, [pc, #16]	@ (800378c <HAL_RCC_GetPCLK2Freq+0x28>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	58024400 	.word	0x58024400
 800378c:	08008aac 	.word	0x08008aac

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	b0c8      	sub	sp, #288	@ 0x120
 8003796:	af00      	add	r7, sp, #0
 8003798:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800379c:	2300      	movs	r3, #0
 800379e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80037b4:	2500      	movs	r5, #0
 80037b6:	ea54 0305 	orrs.w	r3, r4, r5
 80037ba:	d049      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037c6:	d02f      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80037c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037cc:	d828      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037d2:	d01a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037d8:	d822      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80037de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037e2:	d007      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037e4:	e01c      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e6:	4ba7      	ldr	r3, [pc, #668]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ea:	4aa6      	ldr	r2, [pc, #664]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037f2:	e01a      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037f8:	3308      	adds	r3, #8
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 fc43 	bl	8005088 <RCCEx_PLL2_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003808:	e00f      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800380a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800380e:	3328      	adds	r3, #40	@ 0x28
 8003810:	2102      	movs	r1, #2
 8003812:	4618      	mov	r0, r3
 8003814:	f001 fcea 	bl	80051ec <RCCEx_PLL3_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800381e:	e004      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003826:	e000      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003832:	4b94      	ldr	r3, [pc, #592]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003836:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800383a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800383e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003840:	4a90      	ldr	r2, [pc, #576]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003842:	430b      	orrs	r3, r1
 8003844:	6513      	str	r3, [r2, #80]	@ 0x50
 8003846:	e003      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800384c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800385c:	f04f 0900 	mov.w	r9, #0
 8003860:	ea58 0309 	orrs.w	r3, r8, r9
 8003864:	d047      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003866:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800386a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386c:	2b04      	cmp	r3, #4
 800386e:	d82a      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003870:	a201      	add	r2, pc, #4	@ (adr r2, 8003878 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	0800388d 	.word	0x0800388d
 800387c:	0800389b 	.word	0x0800389b
 8003880:	080038b1 	.word	0x080038b1
 8003884:	080038cf 	.word	0x080038cf
 8003888:	080038cf 	.word	0x080038cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003890:	4a7c      	ldr	r2, [pc, #496]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003898:	e01a      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800389a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800389e:	3308      	adds	r3, #8
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fbf0 	bl	8005088 <RCCEx_PLL2_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038ae:	e00f      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038b4:	3328      	adds	r3, #40	@ 0x28
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f001 fc97 	bl	80051ec <RCCEx_PLL3_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038c4:	e004      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038cc:	e000      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80038ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038dc:	f023 0107 	bic.w	r1, r3, #7
 80038e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e6:	4a67      	ldr	r2, [pc, #412]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80038ec:	e003      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80038f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003902:	f04f 0b00 	mov.w	fp, #0
 8003906:	ea5a 030b 	orrs.w	r3, sl, fp
 800390a:	d054      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800390c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003916:	d036      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003918:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800391c:	d82f      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800391e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003922:	d032      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003928:	d829      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800392a:	2bc0      	cmp	r3, #192	@ 0xc0
 800392c:	d02f      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800392e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003930:	d825      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003932:	2b80      	cmp	r3, #128	@ 0x80
 8003934:	d018      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003936:	2b80      	cmp	r3, #128	@ 0x80
 8003938:	d821      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800393e:	2b40      	cmp	r3, #64	@ 0x40
 8003940:	d007      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003942:	e01c      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003944:	4b4f      	ldr	r3, [pc, #316]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	4a4e      	ldr	r2, [pc, #312]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800394a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003950:	e01e      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003956:	3308      	adds	r3, #8
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f001 fb94 	bl	8005088 <RCCEx_PLL2_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003966:	e013      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800396c:	3328      	adds	r3, #40	@ 0x28
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f001 fc3b 	bl	80051ec <RCCEx_PLL3_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800397c:	e008      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003984:	e004      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003986:	bf00      	nop
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800398e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003990:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003998:	4b3a      	ldr	r3, [pc, #232]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800399a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80039a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	4a37      	ldr	r2, [pc, #220]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ac:	e003      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80039b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80039cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80039d0:	460b      	mov	r3, r1
 80039d2:	4313      	orrs	r3, r2
 80039d4:	d05c      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80039d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80039e0:	d03b      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039e2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80039e6:	d834      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80039e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ec:	d037      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80039ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f2:	d82e      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80039f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039f8:	d033      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80039fa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039fe:	d828      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a04:	d01a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a0a:	d822      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a14:	d007      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003a16:	e01c      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a18:	4b1a      	ldr	r3, [pc, #104]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	4a19      	ldr	r2, [pc, #100]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003a24:	e01e      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 fb2a 	bl	8005088 <RCCEx_PLL2_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003a3a:	e013      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a40:	3328      	adds	r3, #40	@ 0x28
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fbd1 	bl	80051ec <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003a50:	e008      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a58:	e004      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10d      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a70:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7a:	4a02      	ldr	r2, [pc, #8]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a80:	e006      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003a82:	bf00      	nop
 8003a84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003aa6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	d03a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab6:	2b30      	cmp	r3, #48	@ 0x30
 8003ab8:	d01f      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003aba:	2b30      	cmp	r3, #48	@ 0x30
 8003abc:	d819      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d00c      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d815      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003aca:	2b10      	cmp	r3, #16
 8003acc:	d111      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ace:	4bae      	ldr	r3, [pc, #696]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad2:	4aad      	ldr	r2, [pc, #692]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003ada:	e011      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 facf 	bl	8005088 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003af8:	e002      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10a      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b08:	4b9f      	ldr	r3, [pc, #636]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b16:	4a9c      	ldr	r2, [pc, #624]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b1c:	e003      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003b32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4313      	orrs	r3, r2
 8003b44:	d051      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b50:	d035      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b56:	d82e      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003b58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b5c:	d031      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003b5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b62:	d828      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b68:	d01a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b6e:	d822      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b78:	d007      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003b7a:	e01c      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b7c:	4b82      	ldr	r3, [pc, #520]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	4a81      	ldr	r2, [pc, #516]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b88:	e01c      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b8e:	3308      	adds	r3, #8
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fa78 	bl	8005088 <RCCEx_PLL2_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b9e:	e011      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ba4:	3328      	adds	r3, #40	@ 0x28
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f001 fb1f 	bl	80051ec <RCCEx_PLL3_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bb4:	e006      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003bbc:	e002      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bcc:	4b6e      	ldr	r3, [pc, #440]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bda:	4a6b      	ldr	r2, [pc, #428]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6513      	str	r3, [r2, #80]	@ 0x50
 8003be0:	e003      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003be6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003c04:	460b      	mov	r3, r1
 8003c06:	4313      	orrs	r3, r2
 8003c08:	d053      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c14:	d033      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003c16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c1a:	d82c      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c20:	d02f      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003c22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c26:	d826      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c2c:	d02b      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003c2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c32:	d820      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c38:	d012      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003c3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c3e:	d81a      	bhi.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d022      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c48:	d115      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c4e:	3308      	adds	r3, #8
 8003c50:	2101      	movs	r1, #1
 8003c52:	4618      	mov	r0, r3
 8003c54:	f001 fa18 	bl	8005088 <RCCEx_PLL2_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c5e:	e015      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c64:	3328      	adds	r3, #40	@ 0x28
 8003c66:	2101      	movs	r1, #1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 fabf 	bl	80051ec <RCCEx_PLL3_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c74:	e00a      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003c7c:	e006      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003c7e:	bf00      	nop
 8003c80:	e004      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003c82:	bf00      	nop
 8003c84:	e002      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003c86:	bf00      	nop
 8003c88:	e000      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c94:	4b3c      	ldr	r3, [pc, #240]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ca2:	4a39      	ldr	r2, [pc, #228]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ca8:	e003      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003caa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003cae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cc8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d060      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cda:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003cde:	d039      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003ce0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003ce4:	d832      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cea:	d035      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cf0:	d82c      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf6:	d031      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfc:	d826      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003cfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d02:	d02d      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003d04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d08:	d820      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d0e:	d012      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d14:	d81a      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d024      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d1e:	d115      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d24:	3308      	adds	r3, #8
 8003d26:	2101      	movs	r1, #1
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 f9ad 	bl	8005088 <RCCEx_PLL2_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d34:	e017      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d3a:	3328      	adds	r3, #40	@ 0x28
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fa54 	bl	80051ec <RCCEx_PLL3_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d4a:	e00c      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d52:	e008      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003d54:	bf00      	nop
 8003d56:	e006      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003d58:	bf00      	nop
 8003d5a:	e004      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003d5c:	bf00      	nop
 8003d5e:	e002      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10e      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d72:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d7e:	4a02      	ldr	r2, [pc, #8]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d84:	e006      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003d86:	bf00      	nop
 8003d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003da0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003daa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d037      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dbe:	d00e      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dc4:	d816      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003dca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dce:	d111      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd0:	4bc4      	ldr	r3, [pc, #784]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	4ac3      	ldr	r2, [pc, #780]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ddc:	e00f      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de2:	3308      	adds	r3, #8
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 f94e 	bl	8005088 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003df2:	e004      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003dfa:	e000      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e06:	4bb7      	ldr	r3, [pc, #732]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e14:	4ab3      	ldr	r2, [pc, #716]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e16:	430b      	orrs	r3, r1
 8003e18:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e1a:	e003      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	d039      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d81c      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e91 	.word	0x08003e91
 8003e58:	08003e65 	.word	0x08003e65
 8003e5c:	08003e73 	.word	0x08003e73
 8003e60:	08003e91 	.word	0x08003e91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e64:	4b9f      	ldr	r3, [pc, #636]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	4a9e      	ldr	r2, [pc, #632]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e70:	e00f      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e76:	3308      	adds	r3, #8
 8003e78:	2102      	movs	r1, #2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 f904 	bl	8005088 <RCCEx_PLL2_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e86:	e004      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e8e:	e000      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e9a:	4b92      	ldr	r3, [pc, #584]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9e:	f023 0103 	bic.w	r1, r3, #3
 8003ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea8:	4a8e      	ldr	r2, [pc, #568]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eae:	e003      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003eb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ece:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f000 8099 	beq.w	800400c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eda:	4b83      	ldr	r3, [pc, #524]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a82      	ldr	r2, [pc, #520]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ee6:	f7fe f821 	bl	8001f2c <HAL_GetTick>
 8003eea:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eee:	e00b      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef0:	f7fe f81c 	bl	8001f2c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b64      	cmp	r3, #100	@ 0x64
 8003efe:	d903      	bls.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f06:	e005      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f08:	4b77      	ldr	r3, [pc, #476]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ed      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003f14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d173      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f1c:	4b71      	ldr	r3, [pc, #452]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f28:	4053      	eors	r3, r2
 8003f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d015      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f32:	4b6c      	ldr	r3, [pc, #432]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f3a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f3e:	4b69      	ldr	r3, [pc, #420]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	4a68      	ldr	r2, [pc, #416]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f48:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f4a:	4b66      	ldr	r3, [pc, #408]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4e:	4a65      	ldr	r2, [pc, #404]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f54:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f56:	4a63      	ldr	r2, [pc, #396]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f6a:	d118      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fd ffde 	bl	8001f2c <HAL_GetTick>
 8003f70:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f74:	e00d      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fd ffd9 	bl	8001f2c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003f80:	1ad2      	subs	r2, r2, r3
 8003f82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d903      	bls.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003f90:	e005      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f92:	4b54      	ldr	r3, [pc, #336]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0eb      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d129      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003faa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fb6:	d10e      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fc8:	091a      	lsrs	r2, r3, #4
 8003fca:	4b48      	ldr	r3, [pc, #288]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	4a45      	ldr	r2, [pc, #276]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6113      	str	r3, [r2, #16]
 8003fd4:	e005      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003fd6:	4b43      	ldr	r3, [pc, #268]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	4a42      	ldr	r2, [pc, #264]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fdc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003fe0:	6113      	str	r3, [r2, #16]
 8003fe2:	4b40      	ldr	r3, [pc, #256]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fe4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff8:	e008      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ffa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ffe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8004002:	e003      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004008:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800400c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f002 0301 	and.w	r3, r2, #1
 8004018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800401c:	2300      	movs	r3, #0
 800401e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004022:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004026:	460b      	mov	r3, r1
 8004028:	4313      	orrs	r3, r2
 800402a:	f000 8090 	beq.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800402e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004036:	2b28      	cmp	r3, #40	@ 0x28
 8004038:	d870      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800403a:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004125 	.word	0x08004125
 8004044:	0800411d 	.word	0x0800411d
 8004048:	0800411d 	.word	0x0800411d
 800404c:	0800411d 	.word	0x0800411d
 8004050:	0800411d 	.word	0x0800411d
 8004054:	0800411d 	.word	0x0800411d
 8004058:	0800411d 	.word	0x0800411d
 800405c:	0800411d 	.word	0x0800411d
 8004060:	080040f1 	.word	0x080040f1
 8004064:	0800411d 	.word	0x0800411d
 8004068:	0800411d 	.word	0x0800411d
 800406c:	0800411d 	.word	0x0800411d
 8004070:	0800411d 	.word	0x0800411d
 8004074:	0800411d 	.word	0x0800411d
 8004078:	0800411d 	.word	0x0800411d
 800407c:	0800411d 	.word	0x0800411d
 8004080:	08004107 	.word	0x08004107
 8004084:	0800411d 	.word	0x0800411d
 8004088:	0800411d 	.word	0x0800411d
 800408c:	0800411d 	.word	0x0800411d
 8004090:	0800411d 	.word	0x0800411d
 8004094:	0800411d 	.word	0x0800411d
 8004098:	0800411d 	.word	0x0800411d
 800409c:	0800411d 	.word	0x0800411d
 80040a0:	08004125 	.word	0x08004125
 80040a4:	0800411d 	.word	0x0800411d
 80040a8:	0800411d 	.word	0x0800411d
 80040ac:	0800411d 	.word	0x0800411d
 80040b0:	0800411d 	.word	0x0800411d
 80040b4:	0800411d 	.word	0x0800411d
 80040b8:	0800411d 	.word	0x0800411d
 80040bc:	0800411d 	.word	0x0800411d
 80040c0:	08004125 	.word	0x08004125
 80040c4:	0800411d 	.word	0x0800411d
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	0800411d 	.word	0x0800411d
 80040d0:	0800411d 	.word	0x0800411d
 80040d4:	0800411d 	.word	0x0800411d
 80040d8:	0800411d 	.word	0x0800411d
 80040dc:	0800411d 	.word	0x0800411d
 80040e0:	08004125 	.word	0x08004125
 80040e4:	58024400 	.word	0x58024400
 80040e8:	58024800 	.word	0x58024800
 80040ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040f4:	3308      	adds	r3, #8
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 ffc5 	bl	8005088 <RCCEx_PLL2_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004104:	e00f      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800410a:	3328      	adds	r3, #40	@ 0x28
 800410c:	2101      	movs	r1, #1
 800410e:	4618      	mov	r0, r3
 8004110:	f001 f86c 	bl	80051ec <RCCEx_PLL3_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800411a:	e004      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004126:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800412e:	4bc0      	ldr	r3, [pc, #768]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004132:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800413a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800413e:	4abc      	ldr	r2, [pc, #752]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004140:	430b      	orrs	r3, r1
 8004142:	6553      	str	r3, [r2, #84]	@ 0x54
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004146:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800414a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800414e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f002 0302 	and.w	r3, r2, #2
 800415a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800415e:	2300      	movs	r3, #0
 8004160:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004164:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004168:	460b      	mov	r3, r1
 800416a:	4313      	orrs	r3, r2
 800416c:	d043      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800416e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004176:	2b05      	cmp	r3, #5
 8004178:	d824      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800417a:	a201      	add	r2, pc, #4	@ (adr r2, 8004180 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	080041cd 	.word	0x080041cd
 8004184:	08004199 	.word	0x08004199
 8004188:	080041af 	.word	0x080041af
 800418c:	080041cd 	.word	0x080041cd
 8004190:	080041cd 	.word	0x080041cd
 8004194:	080041cd 	.word	0x080041cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800419c:	3308      	adds	r3, #8
 800419e:	2101      	movs	r1, #1
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 ff71 	bl	8005088 <RCCEx_PLL2_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041ac:	e00f      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041b2:	3328      	adds	r3, #40	@ 0x28
 80041b4:	2101      	movs	r1, #1
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 f818 	bl	80051ec <RCCEx_PLL3_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041c2:	e004      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80041ca:	e000      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80041cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10b      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041d6:	4b96      	ldr	r3, [pc, #600]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041da:	f023 0107 	bic.w	r1, r3, #7
 80041de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e6:	4a92      	ldr	r2, [pc, #584]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80041ec:	e003      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80041f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f002 0304 	and.w	r3, r2, #4
 8004202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004206:	2300      	movs	r3, #0
 8004208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800420c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004210:	460b      	mov	r3, r1
 8004212:	4313      	orrs	r3, r2
 8004214:	d043      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800421a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800421e:	2b05      	cmp	r3, #5
 8004220:	d824      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004222:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004275 	.word	0x08004275
 800422c:	08004241 	.word	0x08004241
 8004230:	08004257 	.word	0x08004257
 8004234:	08004275 	.word	0x08004275
 8004238:	08004275 	.word	0x08004275
 800423c:	08004275 	.word	0x08004275
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004244:	3308      	adds	r3, #8
 8004246:	2101      	movs	r1, #1
 8004248:	4618      	mov	r0, r3
 800424a:	f000 ff1d 	bl	8005088 <RCCEx_PLL2_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004254:	e00f      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800425a:	3328      	adds	r3, #40	@ 0x28
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f000 ffc4 	bl	80051ec <RCCEx_PLL3_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800427e:	4b6c      	ldr	r3, [pc, #432]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	f023 0107 	bic.w	r1, r3, #7
 8004286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800428a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800428e:	4a68      	ldr	r2, [pc, #416]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004290:	430b      	orrs	r3, r1
 8004292:	6593      	str	r3, [r2, #88]	@ 0x58
 8004294:	e003      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004296:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800429a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800429e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f002 0320 	and.w	r3, r2, #32
 80042aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042b8:	460b      	mov	r3, r1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	d055      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80042be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ca:	d033      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80042cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042d0:	d82c      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80042d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d6:	d02f      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042dc:	d826      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80042de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042e2:	d02b      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80042e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042e8:	d820      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80042ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042ee:	d012      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80042f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f4:	d81a      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d022      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80042fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042fe:	d115      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004304:	3308      	adds	r3, #8
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 febd 	bl	8005088 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004314:	e015      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800431a:	3328      	adds	r3, #40	@ 0x28
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 ff64 	bl	80051ec <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800432a:	e00a      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004332:	e006      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004334:	bf00      	nop
 8004336:	e004      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004338:	bf00      	nop
 800433a:	e002      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800433c:	bf00      	nop
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004342:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800434a:	4b39      	ldr	r3, [pc, #228]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800434c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800435a:	4a35      	ldr	r2, [pc, #212]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800435c:	430b      	orrs	r3, r1
 800435e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004360:	e003      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004362:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004366:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800436a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004376:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800437a:	2300      	movs	r3, #0
 800437c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004380:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004384:	460b      	mov	r3, r1
 8004386:	4313      	orrs	r3, r2
 8004388:	d058      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800438a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800438e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004392:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004396:	d033      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004398:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800439c:	d82c      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800439e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a2:	d02f      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a8:	d826      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80043aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043ae:	d02b      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80043b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043b4:	d820      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80043b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ba:	d012      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80043bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043c0:	d81a      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d022      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ca:	d115      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d0:	3308      	adds	r3, #8
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fe57 	bl	8005088 <RCCEx_PLL2_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043e0:	e015      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e6:	3328      	adds	r3, #40	@ 0x28
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fefe 	bl	80051ec <RCCEx_PLL3_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043f6:	e00a      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043fe:	e006      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004400:	bf00      	nop
 8004402:	e004      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004404:	bf00      	nop
 8004406:	e002      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004408:	bf00      	nop
 800440a:	e000      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800440c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10e      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004416:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800441e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004422:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004426:	4a02      	ldr	r2, [pc, #8]	@ (8004430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004428:	430b      	orrs	r3, r1
 800442a:	6593      	str	r3, [r2, #88]	@ 0x58
 800442c:	e006      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800442e:	bf00      	nop
 8004430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004438:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800443c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004452:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d055      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004460:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004464:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004468:	d033      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800446a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800446e:	d82c      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004474:	d02f      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800447a:	d826      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800447c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004480:	d02b      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004482:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004486:	d820      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004488:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800448c:	d012      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800448e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004492:	d81a      	bhi.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d022      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800449c:	d115      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800449e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a2:	3308      	adds	r3, #8
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fdee 	bl	8005088 <RCCEx_PLL2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044b2:	e015      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044b8:	3328      	adds	r3, #40	@ 0x28
 80044ba:	2102      	movs	r1, #2
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fe95 	bl	80051ec <RCCEx_PLL3_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044c8:	e00a      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80044d0:	e006      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80044d2:	bf00      	nop
 80044d4:	e004      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80044de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10b      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80044e8:	4ba1      	ldr	r3, [pc, #644]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80044f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044f8:	4a9d      	ldr	r2, [pc, #628]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044fa:	430b      	orrs	r3, r1
 80044fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80044fe:	e003      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004504:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f002 0308 	and.w	r3, r2, #8
 8004514:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004518:	2300      	movs	r3, #0
 800451a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800451e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d01e      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800452c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004534:	d10c      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800453a:	3328      	adds	r3, #40	@ 0x28
 800453c:	2102      	movs	r1, #2
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fe54 	bl	80051ec <RCCEx_PLL3_Config>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004550:	4b87      	ldr	r3, [pc, #540]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004554:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800455c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004560:	4a83      	ldr	r2, [pc, #524]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004562:	430b      	orrs	r3, r1
 8004564:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f002 0310 	and.w	r3, r2, #16
 8004572:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004576:	2300      	movs	r3, #0
 8004578:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800457c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004580:	460b      	mov	r3, r1
 8004582:	4313      	orrs	r3, r2
 8004584:	d01e      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800458a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800458e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004592:	d10c      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004598:	3328      	adds	r3, #40	@ 0x28
 800459a:	2102      	movs	r1, #2
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fe25 	bl	80051ec <RCCEx_PLL3_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045ae:	4b70      	ldr	r3, [pc, #448]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045be:	4a6c      	ldr	r2, [pc, #432]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80045d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80045de:	460b      	mov	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d03e      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80045e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80045ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045f0:	d022      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80045f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045f6:	d81b      	bhi.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80045fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004600:	d00b      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004602:	e015      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004608:	3308      	adds	r3, #8
 800460a:	2100      	movs	r1, #0
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fd3b 	bl	8005088 <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004618:	e00f      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800461a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800461e:	3328      	adds	r3, #40	@ 0x28
 8004620:	2102      	movs	r1, #2
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fde2 	bl	80051ec <RCCEx_PLL3_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800462e:	e004      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004636:	e000      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800463a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004642:	4b4b      	ldr	r3, [pc, #300]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004646:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800464a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800464e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004652:	4a47      	ldr	r2, [pc, #284]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004654:	430b      	orrs	r3, r1
 8004656:	6593      	str	r3, [r2, #88]	@ 0x58
 8004658:	e003      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800465e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800466e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004670:	2300      	movs	r3, #0
 8004672:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004674:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004678:	460b      	mov	r3, r1
 800467a:	4313      	orrs	r3, r2
 800467c:	d03b      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800467e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800468a:	d01f      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800468c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004690:	d818      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004698:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800469c:	d007      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800469e:	e011      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a0:	4b33      	ldr	r3, [pc, #204]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	4a32      	ldr	r2, [pc, #200]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80046ac:	e00f      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046b2:	3328      	adds	r3, #40	@ 0x28
 80046b4:	2101      	movs	r1, #1
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fd98 	bl	80051ec <RCCEx_PLL3_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80046c2:	e004      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80046ca:	e000      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80046cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046d6:	4b26      	ldr	r3, [pc, #152]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e6:	4a22      	ldr	r2, [pc, #136]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80046f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004702:	673b      	str	r3, [r7, #112]	@ 0x70
 8004704:	2300      	movs	r3, #0
 8004706:	677b      	str	r3, [r7, #116]	@ 0x74
 8004708:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800470c:	460b      	mov	r3, r1
 800470e:	4313      	orrs	r3, r2
 8004710:	d034      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004720:	d007      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004722:	e011      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004724:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	4a11      	ldr	r2, [pc, #68]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800472a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800472e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004730:	e00e      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004736:	3308      	adds	r3, #8
 8004738:	2102      	movs	r1, #2
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fca4 	bl	8005088 <RCCEx_PLL2_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004746:	e003      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800474e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004750:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10d      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004758:	4b05      	ldr	r3, [pc, #20]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800475a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800475c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004766:	4a02      	ldr	r2, [pc, #8]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004768:	430b      	orrs	r3, r1
 800476a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800476c:	e006      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800476e:	bf00      	nop
 8004770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004778:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800477c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004788:	66bb      	str	r3, [r7, #104]	@ 0x68
 800478a:	2300      	movs	r3, #0
 800478c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800478e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004792:	460b      	mov	r3, r1
 8004794:	4313      	orrs	r3, r2
 8004796:	d00c      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800479c:	3328      	adds	r3, #40	@ 0x28
 800479e:	2102      	movs	r1, #2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fd23 	bl	80051ec <RCCEx_PLL3_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80047be:	663b      	str	r3, [r7, #96]	@ 0x60
 80047c0:	2300      	movs	r3, #0
 80047c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80047c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80047c8:	460b      	mov	r3, r1
 80047ca:	4313      	orrs	r3, r2
 80047cc:	d038      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80047ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047da:	d018      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80047dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047e0:	d811      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80047e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047e6:	d014      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80047e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047ec:	d80b      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047f6:	d106      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f8:	4bc3      	ldr	r3, [pc, #780]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	4ac2      	ldr	r2, [pc, #776]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80047fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004804:	e008      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800480c:	e004      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800480e:	bf00      	nop
 8004810:	e002      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10b      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004820:	4bb9      	ldr	r3, [pc, #740]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004824:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004830:	4ab5      	ldr	r2, [pc, #724]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004832:	430b      	orrs	r3, r1
 8004834:	6553      	str	r3, [r2, #84]	@ 0x54
 8004836:	e003      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004838:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800483c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800484c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800484e:	2300      	movs	r3, #0
 8004850:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004852:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004856:	460b      	mov	r3, r1
 8004858:	4313      	orrs	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800485c:	4baa      	ldr	r3, [pc, #680]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800485e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004860:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800486a:	4aa7      	ldr	r2, [pc, #668]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800486c:	430b      	orrs	r3, r1
 800486e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800487c:	653b      	str	r3, [r7, #80]	@ 0x50
 800487e:	2300      	movs	r3, #0
 8004880:	657b      	str	r3, [r7, #84]	@ 0x54
 8004882:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004886:	460b      	mov	r3, r1
 8004888:	4313      	orrs	r3, r2
 800488a:	d009      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800488c:	4b9e      	ldr	r3, [pc, #632]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800488e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004890:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	4a9b      	ldr	r2, [pc, #620]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800489c:	430b      	orrs	r3, r1
 800489e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80048a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80048ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ae:	2300      	movs	r3, #0
 80048b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80048b6:	460b      	mov	r3, r1
 80048b8:	4313      	orrs	r3, r2
 80048ba:	d009      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80048bc:	4b92      	ldr	r3, [pc, #584]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80048c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ca:	4a8f      	ldr	r2, [pc, #572]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048cc:	430b      	orrs	r3, r1
 80048ce:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80048dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80048de:	2300      	movs	r3, #0
 80048e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80048e6:	460b      	mov	r3, r1
 80048e8:	4313      	orrs	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048ec:	4b86      	ldr	r3, [pc, #536]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	4a85      	ldr	r2, [pc, #532]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80048f6:	6113      	str	r3, [r2, #16]
 80048f8:	4b83      	ldr	r3, [pc, #524]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80048fa:	6919      	ldr	r1, [r3, #16]
 80048fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004900:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004904:	4a80      	ldr	r2, [pc, #512]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004906:	430b      	orrs	r3, r1
 8004908:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800490a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004916:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004918:	2300      	movs	r3, #0
 800491a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800491c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004920:	460b      	mov	r3, r1
 8004922:	4313      	orrs	r3, r2
 8004924:	d009      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004926:	4b78      	ldr	r3, [pc, #480]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800492e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004934:	4a74      	ldr	r2, [pc, #464]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004936:	430b      	orrs	r3, r1
 8004938:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800493a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004946:	633b      	str	r3, [r7, #48]	@ 0x30
 8004948:	2300      	movs	r3, #0
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
 800494c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004950:	460b      	mov	r3, r1
 8004952:	4313      	orrs	r3, r2
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004956:	4b6c      	ldr	r3, [pc, #432]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800495e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004966:	4a68      	ldr	r2, [pc, #416]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004968:	430b      	orrs	r3, r1
 800496a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800496c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	2100      	movs	r1, #0
 8004976:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800497e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004982:	460b      	mov	r3, r1
 8004984:	4313      	orrs	r3, r2
 8004986:	d011      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800498c:	3308      	adds	r3, #8
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fb79 	bl	8005088 <RCCEx_PLL2_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800499c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80049ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	2100      	movs	r1, #0
 80049b6:	6239      	str	r1, [r7, #32]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80049be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d011      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049cc:	3308      	adds	r3, #8
 80049ce:	2101      	movs	r1, #1
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fb59 	bl	8005088 <RCCEx_PLL2_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80049dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80049ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	2100      	movs	r1, #0
 80049f6:	61b9      	str	r1, [r7, #24]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	61fb      	str	r3, [r7, #28]
 80049fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a02:	460b      	mov	r3, r1
 8004a04:	4313      	orrs	r3, r2
 8004a06:	d011      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	2102      	movs	r1, #2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fb39 	bl	8005088 <RCCEx_PLL2_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004a1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	2100      	movs	r1, #0
 8004a36:	6139      	str	r1, [r7, #16]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a42:	460b      	mov	r3, r1
 8004a44:	4313      	orrs	r3, r2
 8004a46:	d011      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a4c:	3328      	adds	r3, #40	@ 0x28
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fbcb 	bl	80051ec <RCCEx_PLL3_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8004a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	2100      	movs	r1, #0
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a82:	460b      	mov	r3, r1
 8004a84:	4313      	orrs	r3, r2
 8004a86:	d011      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a8c:	3328      	adds	r3, #40	@ 0x28
 8004a8e:	2101      	movs	r1, #1
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fbab 	bl	80051ec <RCCEx_PLL3_Config>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004a9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004aa8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	6039      	str	r1, [r7, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	d011      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004acc:	3328      	adds	r3, #40	@ 0x28
 8004ace:	2102      	movs	r1, #2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fb8b 	bl	80051ec <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004adc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ae8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004aec:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b06:	bf00      	nop
 8004b08:	58024400 	.word	0x58024400

08004b0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004b10:	f7fe fde2 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 8004b14:	4602      	mov	r2, r0
 8004b16:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	4904      	ldr	r1, [pc, #16]	@ (8004b34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b22:	5ccb      	ldrb	r3, [r1, r3]
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	58024400 	.word	0x58024400
 8004b34:	08008aac 	.word	0x08008aac

08004b38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b089      	sub	sp, #36	@ 0x24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b40:	4ba1      	ldr	r3, [pc, #644]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b4a:	4b9f      	ldr	r3, [pc, #636]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4e:	0b1b      	lsrs	r3, r3, #12
 8004b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b56:	4b9c      	ldr	r3, [pc, #624]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b62:	4b99      	ldr	r3, [pc, #612]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b66:	08db      	lsrs	r3, r3, #3
 8004b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8111 	beq.w	8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	f000 8083 	beq.w	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	f200 80a1 	bhi.w	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d056      	beq.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ba2:	e099      	b.n	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ba4:	4b88      	ldr	r3, [pc, #544]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02d      	beq.n	8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bb0:	4b85      	ldr	r3, [pc, #532]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	08db      	lsrs	r3, r3, #3
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	4a84      	ldr	r2, [pc, #528]	@ (8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bda:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c0a:	e087      	b.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4e:	e065      	b.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c62:	4b59      	ldr	r3, [pc, #356]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c92:	e043      	b.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ddc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca6:	4b48      	ldr	r3, [pc, #288]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cd6:	e021      	b.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cea:	4b37      	ldr	r3, [pc, #220]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cfe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d20:	0a5b      	lsrs	r3, r3, #9
 8004d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d42:	ee17 2a90 	vmov	r2, s15
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4e:	0c1b      	lsrs	r3, r3, #16
 8004d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d54:	ee07 3a90 	vmov	s15, r3
 8004d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d70:	ee17 2a90 	vmov	r2, s15
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d78:	4b13      	ldr	r3, [pc, #76]	@ (8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7c:	0e1b      	lsrs	r3, r3, #24
 8004d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9e:	ee17 2a90 	vmov	r2, s15
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004da6:	e008      	b.n	8004dba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	609a      	str	r2, [r3, #8]
}
 8004dba:	bf00      	nop
 8004dbc:	3724      	adds	r7, #36	@ 0x24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	03d09000 	.word	0x03d09000
 8004dd0:	46000000 	.word	0x46000000
 8004dd4:	4c742400 	.word	0x4c742400
 8004dd8:	4a742400 	.word	0x4a742400
 8004ddc:	4af42400 	.word	0x4af42400

08004de0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	@ 0x24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004de8:	4ba1      	ldr	r3, [pc, #644]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004df2:	4b9f      	ldr	r3, [pc, #636]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	0d1b      	lsrs	r3, r3, #20
 8004df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dfc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004e0a:	4b99      	ldr	r3, [pc, #612]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0e:	08db      	lsrs	r3, r3, #3
 8004e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 8111 	beq.w	8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f000 8083 	beq.w	8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	f200 80a1 	bhi.w	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d056      	beq.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e4a:	e099      	b.n	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e4c:	4b88      	ldr	r3, [pc, #544]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02d      	beq.n	8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e58:	4b85      	ldr	r3, [pc, #532]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	08db      	lsrs	r3, r3, #3
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	4a84      	ldr	r2, [pc, #528]	@ (8005074 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
 8004e68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e82:	4b7b      	ldr	r3, [pc, #492]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004eb2:	e087      	b.n	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800507c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef6:	e065      	b.n	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	4b59      	ldr	r3, [pc, #356]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f3a:	e043      	b.n	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b48      	ldr	r3, [pc, #288]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f7e:	e021      	b.n	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b37      	ldr	r3, [pc, #220]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	0a5b      	lsrs	r3, r3, #9
 8004fca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fea:	ee17 2a90 	vmov	r2, s15
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	0c1b      	lsrs	r3, r3, #16
 8004ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005008:	ee37 7a87 	vadd.f32	s14, s15, s14
 800500c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005018:	ee17 2a90 	vmov	r2, s15
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005020:	4b13      	ldr	r3, [pc, #76]	@ (8005070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005024:	0e1b      	lsrs	r3, r3, #24
 8005026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800503a:	edd7 6a07 	vldr	s13, [r7, #28]
 800503e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005046:	ee17 2a90 	vmov	r2, s15
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800504e:	e008      	b.n	8005062 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
}
 8005062:	bf00      	nop
 8005064:	3724      	adds	r7, #36	@ 0x24
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	58024400 	.word	0x58024400
 8005074:	03d09000 	.word	0x03d09000
 8005078:	46000000 	.word	0x46000000
 800507c:	4c742400 	.word	0x4c742400
 8005080:	4a742400 	.word	0x4a742400
 8005084:	4af42400 	.word	0x4af42400

08005088 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005096:	4b53      	ldr	r3, [pc, #332]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d101      	bne.n	80050a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e099      	b.n	80051da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050a6:	4b4f      	ldr	r3, [pc, #316]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a4e      	ldr	r2, [pc, #312]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 80050ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b2:	f7fc ff3b 	bl	8001f2c <HAL_GetTick>
 80050b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050b8:	e008      	b.n	80050cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050ba:	f7fc ff37 	bl	8001f2c <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e086      	b.n	80051da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050cc:	4b45      	ldr	r3, [pc, #276]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1f0      	bne.n	80050ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050d8:	4b42      	ldr	r3, [pc, #264]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	493f      	ldr	r1, [pc, #252]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	025b      	lsls	r3, r3, #9
 80050fe:	b29b      	uxth	r3, r3
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	3b01      	subs	r3, #1
 8005108:	041b      	lsls	r3, r3, #16
 800510a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	3b01      	subs	r3, #1
 8005116:	061b      	lsls	r3, r3, #24
 8005118:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800511c:	4931      	ldr	r1, [pc, #196]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 800511e:	4313      	orrs	r3, r2
 8005120:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005122:	4b30      	ldr	r3, [pc, #192]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 8005124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005126:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	492d      	ldr	r1, [pc, #180]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 8005130:	4313      	orrs	r3, r2
 8005132:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005134:	4b2b      	ldr	r3, [pc, #172]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	f023 0220 	bic.w	r2, r3, #32
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	4928      	ldr	r1, [pc, #160]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 8005142:	4313      	orrs	r3, r2
 8005144:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005146:	4b27      	ldr	r3, [pc, #156]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	4a26      	ldr	r2, [pc, #152]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 800514c:	f023 0310 	bic.w	r3, r3, #16
 8005150:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005152:	4b24      	ldr	r3, [pc, #144]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 8005154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005156:	4b24      	ldr	r3, [pc, #144]	@ (80051e8 <RCCEx_PLL2_Config+0x160>)
 8005158:	4013      	ands	r3, r2
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	69d2      	ldr	r2, [r2, #28]
 800515e:	00d2      	lsls	r2, r2, #3
 8005160:	4920      	ldr	r1, [pc, #128]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 8005162:	4313      	orrs	r3, r2
 8005164:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005166:	4b1f      	ldr	r3, [pc, #124]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 8005168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516a:	4a1e      	ldr	r2, [pc, #120]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 800516c:	f043 0310 	orr.w	r3, r3, #16
 8005170:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005178:	4b1a      	ldr	r3, [pc, #104]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	4a19      	ldr	r2, [pc, #100]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 800517e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005182:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005184:	e00f      	b.n	80051a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d106      	bne.n	800519a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800518c:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 800518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005190:	4a14      	ldr	r2, [pc, #80]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 8005192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005196:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005198:	e005      	b.n	80051a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800519a:	4b12      	ldr	r3, [pc, #72]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 800519c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519e:	4a11      	ldr	r2, [pc, #68]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 80051a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051a6:	4b0f      	ldr	r3, [pc, #60]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a0e      	ldr	r2, [pc, #56]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 80051ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b2:	f7fc febb 	bl	8001f2c <HAL_GetTick>
 80051b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051b8:	e008      	b.n	80051cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051ba:	f7fc feb7 	bl	8001f2c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e006      	b.n	80051da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <RCCEx_PLL2_Config+0x15c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f0      	beq.n	80051ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	58024400 	.word	0x58024400
 80051e8:	ffff0007 	.word	0xffff0007

080051ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051fa:	4b53      	ldr	r3, [pc, #332]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80051fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	2b03      	cmp	r3, #3
 8005204:	d101      	bne.n	800520a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e099      	b.n	800533e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800520a:	4b4f      	ldr	r3, [pc, #316]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a4e      	ldr	r2, [pc, #312]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 8005210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005216:	f7fc fe89 	bl	8001f2c <HAL_GetTick>
 800521a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800521c:	e008      	b.n	8005230 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800521e:	f7fc fe85 	bl	8001f2c <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e086      	b.n	800533e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005230:	4b45      	ldr	r3, [pc, #276]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f0      	bne.n	800521e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800523c:	4b42      	ldr	r3, [pc, #264]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	051b      	lsls	r3, r3, #20
 800524a:	493f      	ldr	r1, [pc, #252]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 800524c:	4313      	orrs	r3, r2
 800524e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	3b01      	subs	r3, #1
 8005256:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	3b01      	subs	r3, #1
 8005260:	025b      	lsls	r3, r3, #9
 8005262:	b29b      	uxth	r3, r3
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	3b01      	subs	r3, #1
 800526c:	041b      	lsls	r3, r3, #16
 800526e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	3b01      	subs	r3, #1
 800527a:	061b      	lsls	r3, r3, #24
 800527c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005280:	4931      	ldr	r1, [pc, #196]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 8005282:	4313      	orrs	r3, r2
 8005284:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005286:	4b30      	ldr	r3, [pc, #192]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	492d      	ldr	r1, [pc, #180]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 8005294:	4313      	orrs	r3, r2
 8005296:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005298:	4b2b      	ldr	r3, [pc, #172]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 800529a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	4928      	ldr	r1, [pc, #160]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052aa:	4b27      	ldr	r3, [pc, #156]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	4a26      	ldr	r2, [pc, #152]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052b6:	4b24      	ldr	r3, [pc, #144]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ba:	4b24      	ldr	r3, [pc, #144]	@ (800534c <RCCEx_PLL3_Config+0x160>)
 80052bc:	4013      	ands	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	69d2      	ldr	r2, [r2, #28]
 80052c2:	00d2      	lsls	r2, r2, #3
 80052c4:	4920      	ldr	r1, [pc, #128]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	4a19      	ldr	r2, [pc, #100]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052e8:	e00f      	b.n	800530a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d106      	bne.n	80052fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052f0:	4b15      	ldr	r3, [pc, #84]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	4a14      	ldr	r2, [pc, #80]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 80052f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052fc:	e005      	b.n	800530a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052fe:	4b12      	ldr	r3, [pc, #72]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 8005300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005302:	4a11      	ldr	r2, [pc, #68]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 8005304:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005308:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800530a:	4b0f      	ldr	r3, [pc, #60]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a0e      	ldr	r2, [pc, #56]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 8005310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005316:	f7fc fe09 	bl	8001f2c <HAL_GetTick>
 800531a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800531c:	e008      	b.n	8005330 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800531e:	f7fc fe05 	bl	8001f2c <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e006      	b.n	800533e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005330:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <RCCEx_PLL3_Config+0x15c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f0      	beq.n	800531e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	58024400 	.word	0x58024400
 800534c:	ffff0007 	.word	0xffff0007

08005350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e049      	b.n	80053f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc fa8c 	bl	8001894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f001 f9e8 	bl	8006764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e049      	b.n	80054a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f841 	bl	80054ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2202      	movs	r2, #2
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f001 f991 	bl	8006764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d109      	bne.n	80054e4 <HAL_TIM_PWM_Start+0x24>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	e03c      	b.n	800555e <HAL_TIM_PWM_Start+0x9e>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d109      	bne.n	80054fe <HAL_TIM_PWM_Start+0x3e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	bf14      	ite	ne
 80054f6:	2301      	movne	r3, #1
 80054f8:	2300      	moveq	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	e02f      	b.n	800555e <HAL_TIM_PWM_Start+0x9e>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d109      	bne.n	8005518 <HAL_TIM_PWM_Start+0x58>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b01      	cmp	r3, #1
 800550e:	bf14      	ite	ne
 8005510:	2301      	movne	r3, #1
 8005512:	2300      	moveq	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	e022      	b.n	800555e <HAL_TIM_PWM_Start+0x9e>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d109      	bne.n	8005532 <HAL_TIM_PWM_Start+0x72>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b01      	cmp	r3, #1
 8005528:	bf14      	ite	ne
 800552a:	2301      	movne	r3, #1
 800552c:	2300      	moveq	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	e015      	b.n	800555e <HAL_TIM_PWM_Start+0x9e>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b10      	cmp	r3, #16
 8005536:	d109      	bne.n	800554c <HAL_TIM_PWM_Start+0x8c>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	bf14      	ite	ne
 8005544:	2301      	movne	r3, #1
 8005546:	2300      	moveq	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	e008      	b.n	800555e <HAL_TIM_PWM_Start+0x9e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	bf14      	ite	ne
 8005558:	2301      	movne	r3, #1
 800555a:	2300      	moveq	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e0a1      	b.n	80056aa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d104      	bne.n	8005576 <HAL_TIM_PWM_Start+0xb6>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005574:	e023      	b.n	80055be <HAL_TIM_PWM_Start+0xfe>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b04      	cmp	r3, #4
 800557a:	d104      	bne.n	8005586 <HAL_TIM_PWM_Start+0xc6>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005584:	e01b      	b.n	80055be <HAL_TIM_PWM_Start+0xfe>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d104      	bne.n	8005596 <HAL_TIM_PWM_Start+0xd6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005594:	e013      	b.n	80055be <HAL_TIM_PWM_Start+0xfe>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b0c      	cmp	r3, #12
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_PWM_Start+0xe6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055a4:	e00b      	b.n	80055be <HAL_TIM_PWM_Start+0xfe>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_PWM_Start+0xf6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b4:	e003      	b.n	80055be <HAL_TIM_PWM_Start+0xfe>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2201      	movs	r2, #1
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 fefa 	bl	80073c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a38      	ldr	r2, [pc, #224]	@ (80056b4 <HAL_TIM_PWM_Start+0x1f4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <HAL_TIM_PWM_Start+0x13e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a37      	ldr	r2, [pc, #220]	@ (80056b8 <HAL_TIM_PWM_Start+0x1f8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00e      	beq.n	80055fe <HAL_TIM_PWM_Start+0x13e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a35      	ldr	r2, [pc, #212]	@ (80056bc <HAL_TIM_PWM_Start+0x1fc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d009      	beq.n	80055fe <HAL_TIM_PWM_Start+0x13e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a34      	ldr	r2, [pc, #208]	@ (80056c0 <HAL_TIM_PWM_Start+0x200>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d004      	beq.n	80055fe <HAL_TIM_PWM_Start+0x13e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a32      	ldr	r2, [pc, #200]	@ (80056c4 <HAL_TIM_PWM_Start+0x204>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d101      	bne.n	8005602 <HAL_TIM_PWM_Start+0x142>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <HAL_TIM_PWM_Start+0x144>
 8005602:	2300      	movs	r3, #0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005616:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a25      	ldr	r2, [pc, #148]	@ (80056b4 <HAL_TIM_PWM_Start+0x1f4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d022      	beq.n	8005668 <HAL_TIM_PWM_Start+0x1a8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562a:	d01d      	beq.n	8005668 <HAL_TIM_PWM_Start+0x1a8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a25      	ldr	r2, [pc, #148]	@ (80056c8 <HAL_TIM_PWM_Start+0x208>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d018      	beq.n	8005668 <HAL_TIM_PWM_Start+0x1a8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a24      	ldr	r2, [pc, #144]	@ (80056cc <HAL_TIM_PWM_Start+0x20c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d013      	beq.n	8005668 <HAL_TIM_PWM_Start+0x1a8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a22      	ldr	r2, [pc, #136]	@ (80056d0 <HAL_TIM_PWM_Start+0x210>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00e      	beq.n	8005668 <HAL_TIM_PWM_Start+0x1a8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1a      	ldr	r2, [pc, #104]	@ (80056b8 <HAL_TIM_PWM_Start+0x1f8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d009      	beq.n	8005668 <HAL_TIM_PWM_Start+0x1a8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1e      	ldr	r2, [pc, #120]	@ (80056d4 <HAL_TIM_PWM_Start+0x214>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <HAL_TIM_PWM_Start+0x1a8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a16      	ldr	r2, [pc, #88]	@ (80056bc <HAL_TIM_PWM_Start+0x1fc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d115      	bne.n	8005694 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	4b1a      	ldr	r3, [pc, #104]	@ (80056d8 <HAL_TIM_PWM_Start+0x218>)
 8005670:	4013      	ands	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b06      	cmp	r3, #6
 8005678:	d015      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x1e6>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005680:	d011      	beq.n	80056a6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005692:	e008      	b.n	80056a6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	e000      	b.n	80056a8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40010400 	.word	0x40010400
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40014400 	.word	0x40014400
 80056c4:	40014800 	.word	0x40014800
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40001800 	.word	0x40001800
 80056d8:	00010007 	.word	0x00010007

080056dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e049      	b.n	8005782 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f841 	bl	800578a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3304      	adds	r3, #4
 8005718:	4619      	mov	r1, r3
 800571a:	4610      	mov	r0, r2
 800571c:	f001 f822 	bl	8006764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_IC_Start+0x1a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	e023      	b.n	8005802 <HAL_TIM_IC_Start+0x62>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d104      	bne.n	80057ca <HAL_TIM_IC_Start+0x2a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	e01b      	b.n	8005802 <HAL_TIM_IC_Start+0x62>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d104      	bne.n	80057da <HAL_TIM_IC_Start+0x3a>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	e013      	b.n	8005802 <HAL_TIM_IC_Start+0x62>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	d104      	bne.n	80057ea <HAL_TIM_IC_Start+0x4a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e00b      	b.n	8005802 <HAL_TIM_IC_Start+0x62>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d104      	bne.n	80057fa <HAL_TIM_IC_Start+0x5a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	e003      	b.n	8005802 <HAL_TIM_IC_Start+0x62>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005800:	b2db      	uxtb	r3, r3
 8005802:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d104      	bne.n	8005814 <HAL_TIM_IC_Start+0x74>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005810:	b2db      	uxtb	r3, r3
 8005812:	e013      	b.n	800583c <HAL_TIM_IC_Start+0x9c>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b04      	cmp	r3, #4
 8005818:	d104      	bne.n	8005824 <HAL_TIM_IC_Start+0x84>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005820:	b2db      	uxtb	r3, r3
 8005822:	e00b      	b.n	800583c <HAL_TIM_IC_Start+0x9c>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b08      	cmp	r3, #8
 8005828:	d104      	bne.n	8005834 <HAL_TIM_IC_Start+0x94>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005830:	b2db      	uxtb	r3, r3
 8005832:	e003      	b.n	800583c <HAL_TIM_IC_Start+0x9c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800583a:	b2db      	uxtb	r3, r3
 800583c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	2b01      	cmp	r3, #1
 8005842:	d102      	bne.n	800584a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005844:	7bbb      	ldrb	r3, [r7, #14]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d001      	beq.n	800584e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e097      	b.n	800597e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <HAL_TIM_IC_Start+0xbe>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800585c:	e023      	b.n	80058a6 <HAL_TIM_IC_Start+0x106>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b04      	cmp	r3, #4
 8005862:	d104      	bne.n	800586e <HAL_TIM_IC_Start+0xce>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800586c:	e01b      	b.n	80058a6 <HAL_TIM_IC_Start+0x106>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b08      	cmp	r3, #8
 8005872:	d104      	bne.n	800587e <HAL_TIM_IC_Start+0xde>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800587c:	e013      	b.n	80058a6 <HAL_TIM_IC_Start+0x106>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b0c      	cmp	r3, #12
 8005882:	d104      	bne.n	800588e <HAL_TIM_IC_Start+0xee>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800588c:	e00b      	b.n	80058a6 <HAL_TIM_IC_Start+0x106>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b10      	cmp	r3, #16
 8005892:	d104      	bne.n	800589e <HAL_TIM_IC_Start+0xfe>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800589c:	e003      	b.n	80058a6 <HAL_TIM_IC_Start+0x106>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2202      	movs	r2, #2
 80058a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_IC_Start+0x116>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b4:	e013      	b.n	80058de <HAL_TIM_IC_Start+0x13e>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_IC_Start+0x126>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058c4:	e00b      	b.n	80058de <HAL_TIM_IC_Start+0x13e>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_IC_Start+0x136>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058d4:	e003      	b.n	80058de <HAL_TIM_IC_Start+0x13e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2201      	movs	r2, #1
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fd6a 	bl	80073c0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a25      	ldr	r2, [pc, #148]	@ (8005988 <HAL_TIM_IC_Start+0x1e8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d022      	beq.n	800593c <HAL_TIM_IC_Start+0x19c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058fe:	d01d      	beq.n	800593c <HAL_TIM_IC_Start+0x19c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a21      	ldr	r2, [pc, #132]	@ (800598c <HAL_TIM_IC_Start+0x1ec>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d018      	beq.n	800593c <HAL_TIM_IC_Start+0x19c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a20      	ldr	r2, [pc, #128]	@ (8005990 <HAL_TIM_IC_Start+0x1f0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <HAL_TIM_IC_Start+0x19c>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1e      	ldr	r2, [pc, #120]	@ (8005994 <HAL_TIM_IC_Start+0x1f4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00e      	beq.n	800593c <HAL_TIM_IC_Start+0x19c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1d      	ldr	r2, [pc, #116]	@ (8005998 <HAL_TIM_IC_Start+0x1f8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d009      	beq.n	800593c <HAL_TIM_IC_Start+0x19c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1b      	ldr	r2, [pc, #108]	@ (800599c <HAL_TIM_IC_Start+0x1fc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_TIM_IC_Start+0x19c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1a      	ldr	r2, [pc, #104]	@ (80059a0 <HAL_TIM_IC_Start+0x200>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d115      	bne.n	8005968 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	4b18      	ldr	r3, [pc, #96]	@ (80059a4 <HAL_TIM_IC_Start+0x204>)
 8005944:	4013      	ands	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b06      	cmp	r3, #6
 800594c:	d015      	beq.n	800597a <HAL_TIM_IC_Start+0x1da>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005954:	d011      	beq.n	800597a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	e008      	b.n	800597a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e000      	b.n	800597c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40010000 	.word	0x40010000
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40010400 	.word	0x40010400
 800599c:	40001800 	.word	0x40001800
 80059a0:	40014000 	.word	0x40014000
 80059a4:	00010007 	.word	0x00010007

080059a8 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2200      	movs	r2, #0
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 fd00 	bl	80073c0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6a1a      	ldr	r2, [r3, #32]
 80059c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10f      	bne.n	80059f0 <HAL_TIM_IC_Stop+0x48>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6a1a      	ldr	r2, [r3, #32]
 80059d6:	f240 4344 	movw	r3, #1092	@ 0x444
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d107      	bne.n	80059f0 <HAL_TIM_IC_Stop+0x48>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <HAL_TIM_IC_Stop+0x58>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059fe:	e023      	b.n	8005a48 <HAL_TIM_IC_Stop+0xa0>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d104      	bne.n	8005a10 <HAL_TIM_IC_Stop+0x68>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a0e:	e01b      	b.n	8005a48 <HAL_TIM_IC_Stop+0xa0>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d104      	bne.n	8005a20 <HAL_TIM_IC_Stop+0x78>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a1e:	e013      	b.n	8005a48 <HAL_TIM_IC_Stop+0xa0>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b0c      	cmp	r3, #12
 8005a24:	d104      	bne.n	8005a30 <HAL_TIM_IC_Stop+0x88>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a2e:	e00b      	b.n	8005a48 <HAL_TIM_IC_Stop+0xa0>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b10      	cmp	r3, #16
 8005a34:	d104      	bne.n	8005a40 <HAL_TIM_IC_Stop+0x98>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a3e:	e003      	b.n	8005a48 <HAL_TIM_IC_Stop+0xa0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <HAL_TIM_IC_Stop+0xb0>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a56:	e013      	b.n	8005a80 <HAL_TIM_IC_Stop+0xd8>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d104      	bne.n	8005a68 <HAL_TIM_IC_Stop+0xc0>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a66:	e00b      	b.n	8005a80 <HAL_TIM_IC_Stop+0xd8>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d104      	bne.n	8005a78 <HAL_TIM_IC_Stop+0xd0>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a76:	e003      	b.n	8005a80 <HAL_TIM_IC_Stop+0xd8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIM_IC_Start_IT+0x1e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	e023      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x66>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d104      	bne.n	8005aba <HAL_TIM_IC_Start_IT+0x2e>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	e01b      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x66>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_IC_Start_IT+0x3e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	e013      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x66>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_IC_Start_IT+0x4e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	e00b      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x66>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_IC_Start_IT+0x5e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e003      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x66>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d104      	bne.n	8005b04 <HAL_TIM_IC_Start_IT+0x78>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	e013      	b.n	8005b2c <HAL_TIM_IC_Start_IT+0xa0>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d104      	bne.n	8005b14 <HAL_TIM_IC_Start_IT+0x88>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	e00b      	b.n	8005b2c <HAL_TIM_IC_Start_IT+0xa0>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d104      	bne.n	8005b24 <HAL_TIM_IC_Start_IT+0x98>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	e003      	b.n	8005b2c <HAL_TIM_IC_Start_IT+0xa0>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b2e:	7bbb      	ldrb	r3, [r7, #14]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d102      	bne.n	8005b3a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b34:	7b7b      	ldrb	r3, [r7, #13]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d001      	beq.n	8005b3e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e0e2      	b.n	8005d04 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_IC_Start_IT+0xc2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b4c:	e023      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x10a>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d104      	bne.n	8005b5e <HAL_TIM_IC_Start_IT+0xd2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b5c:	e01b      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x10a>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d104      	bne.n	8005b6e <HAL_TIM_IC_Start_IT+0xe2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b6c:	e013      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x10a>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b0c      	cmp	r3, #12
 8005b72:	d104      	bne.n	8005b7e <HAL_TIM_IC_Start_IT+0xf2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b7c:	e00b      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x10a>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d104      	bne.n	8005b8e <HAL_TIM_IC_Start_IT+0x102>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b8c:	e003      	b.n	8005b96 <HAL_TIM_IC_Start_IT+0x10a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d104      	bne.n	8005ba6 <HAL_TIM_IC_Start_IT+0x11a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ba4:	e013      	b.n	8005bce <HAL_TIM_IC_Start_IT+0x142>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d104      	bne.n	8005bb6 <HAL_TIM_IC_Start_IT+0x12a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bb4:	e00b      	b.n	8005bce <HAL_TIM_IC_Start_IT+0x142>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d104      	bne.n	8005bc6 <HAL_TIM_IC_Start_IT+0x13a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005bc4:	e003      	b.n	8005bce <HAL_TIM_IC_Start_IT+0x142>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b0c      	cmp	r3, #12
 8005bd2:	d841      	bhi.n	8005c58 <HAL_TIM_IC_Start_IT+0x1cc>
 8005bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <HAL_TIM_IC_Start_IT+0x150>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005c11 	.word	0x08005c11
 8005be0:	08005c59 	.word	0x08005c59
 8005be4:	08005c59 	.word	0x08005c59
 8005be8:	08005c59 	.word	0x08005c59
 8005bec:	08005c23 	.word	0x08005c23
 8005bf0:	08005c59 	.word	0x08005c59
 8005bf4:	08005c59 	.word	0x08005c59
 8005bf8:	08005c59 	.word	0x08005c59
 8005bfc:	08005c35 	.word	0x08005c35
 8005c00:	08005c59 	.word	0x08005c59
 8005c04:	08005c59 	.word	0x08005c59
 8005c08:	08005c59 	.word	0x08005c59
 8005c0c:	08005c47 	.word	0x08005c47
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68da      	ldr	r2, [r3, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0202 	orr.w	r2, r2, #2
 8005c1e:	60da      	str	r2, [r3, #12]
      break;
 8005c20:	e01d      	b.n	8005c5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0204 	orr.w	r2, r2, #4
 8005c30:	60da      	str	r2, [r3, #12]
      break;
 8005c32:	e014      	b.n	8005c5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0208 	orr.w	r2, r2, #8
 8005c42:	60da      	str	r2, [r3, #12]
      break;
 8005c44:	e00b      	b.n	8005c5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0210 	orr.w	r2, r2, #16
 8005c54:	60da      	str	r2, [r3, #12]
      break;
 8005c56:	e002      	b.n	8005c5e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d14e      	bne.n	8005d02 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 fba7 	bl	80073c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a25      	ldr	r2, [pc, #148]	@ (8005d0c <HAL_TIM_IC_Start_IT+0x280>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_TIM_IC_Start_IT+0x236>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c84:	d01d      	beq.n	8005cc2 <HAL_TIM_IC_Start_IT+0x236>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a21      	ldr	r2, [pc, #132]	@ (8005d10 <HAL_TIM_IC_Start_IT+0x284>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_TIM_IC_Start_IT+0x236>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1f      	ldr	r2, [pc, #124]	@ (8005d14 <HAL_TIM_IC_Start_IT+0x288>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_TIM_IC_Start_IT+0x236>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d18 <HAL_TIM_IC_Start_IT+0x28c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_TIM_IC_Start_IT+0x236>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d1c <HAL_TIM_IC_Start_IT+0x290>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIM_IC_Start_IT+0x236>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d20 <HAL_TIM_IC_Start_IT+0x294>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIM_IC_Start_IT+0x236>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a19      	ldr	r2, [pc, #100]	@ (8005d24 <HAL_TIM_IC_Start_IT+0x298>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d115      	bne.n	8005cee <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	4b17      	ldr	r3, [pc, #92]	@ (8005d28 <HAL_TIM_IC_Start_IT+0x29c>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b06      	cmp	r3, #6
 8005cd2:	d015      	beq.n	8005d00 <HAL_TIM_IC_Start_IT+0x274>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cda:	d011      	beq.n	8005d00 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	e008      	b.n	8005d00 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	e000      	b.n	8005d02 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d00:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40010000 	.word	0x40010000
 8005d10:	40000400 	.word	0x40000400
 8005d14:	40000800 	.word	0x40000800
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	40010400 	.word	0x40010400
 8005d20:	40001800 	.word	0x40001800
 8005d24:	40014000 	.word	0x40014000
 8005d28:	00010007 	.word	0x00010007

08005d2c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b0c      	cmp	r3, #12
 8005d3e:	d841      	bhi.n	8005dc4 <HAL_TIM_IC_Stop_IT+0x98>
 8005d40:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <HAL_TIM_IC_Stop_IT+0x1c>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d7d 	.word	0x08005d7d
 8005d4c:	08005dc5 	.word	0x08005dc5
 8005d50:	08005dc5 	.word	0x08005dc5
 8005d54:	08005dc5 	.word	0x08005dc5
 8005d58:	08005d8f 	.word	0x08005d8f
 8005d5c:	08005dc5 	.word	0x08005dc5
 8005d60:	08005dc5 	.word	0x08005dc5
 8005d64:	08005dc5 	.word	0x08005dc5
 8005d68:	08005da1 	.word	0x08005da1
 8005d6c:	08005dc5 	.word	0x08005dc5
 8005d70:	08005dc5 	.word	0x08005dc5
 8005d74:	08005dc5 	.word	0x08005dc5
 8005d78:	08005db3 	.word	0x08005db3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0202 	bic.w	r2, r2, #2
 8005d8a:	60da      	str	r2, [r3, #12]
      break;
 8005d8c:	e01d      	b.n	8005dca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0204 	bic.w	r2, r2, #4
 8005d9c:	60da      	str	r2, [r3, #12]
      break;
 8005d9e:	e014      	b.n	8005dca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0208 	bic.w	r2, r2, #8
 8005dae:	60da      	str	r2, [r3, #12]
      break;
 8005db0:	e00b      	b.n	8005dca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0210 	bic.w	r2, r2, #16
 8005dc0:	60da      	str	r2, [r3, #12]
      break;
 8005dc2:	e002      	b.n	8005dca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d166      	bne.n	8005e9e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 faf1 	bl	80073c0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <HAL_TIM_IC_Stop_IT+0xe2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	f240 4344 	movw	r3, #1092	@ 0x444
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d107      	bne.n	8005e0e <HAL_TIM_IC_Stop_IT+0xe2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_IC_Stop_IT+0xf2>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e1c:	e023      	b.n	8005e66 <HAL_TIM_IC_Stop_IT+0x13a>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_IC_Stop_IT+0x102>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e2c:	e01b      	b.n	8005e66 <HAL_TIM_IC_Stop_IT+0x13a>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_IC_Stop_IT+0x112>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e3c:	e013      	b.n	8005e66 <HAL_TIM_IC_Stop_IT+0x13a>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d104      	bne.n	8005e4e <HAL_TIM_IC_Stop_IT+0x122>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e4c:	e00b      	b.n	8005e66 <HAL_TIM_IC_Stop_IT+0x13a>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d104      	bne.n	8005e5e <HAL_TIM_IC_Stop_IT+0x132>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e5c:	e003      	b.n	8005e66 <HAL_TIM_IC_Stop_IT+0x13a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_IC_Stop_IT+0x14a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e74:	e013      	b.n	8005e9e <HAL_TIM_IC_Stop_IT+0x172>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d104      	bne.n	8005e86 <HAL_TIM_IC_Stop_IT+0x15a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e84:	e00b      	b.n	8005e9e <HAL_TIM_IC_Stop_IT+0x172>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_IC_Stop_IT+0x16a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e94:	e003      	b.n	8005e9e <HAL_TIM_IC_Stop_IT+0x172>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0202 	mvn.w	r2, #2
 8005edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fb f970 	bl	80011d8 <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fc14 	bl	8006728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fc1b 	bl	800673c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0204 	mvn.w	r2, #4
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb f94a 	bl	80011d8 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fbee 	bl	8006728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fbf5 	bl	800673c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d020      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0208 	mvn.w	r2, #8
 8005f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fb f924 	bl	80011d8 <HAL_TIM_IC_CaptureCallback>
 8005f90:	e005      	b.n	8005f9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fbc8 	bl	8006728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fbcf 	bl	800673c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f003 0310 	and.w	r3, r3, #16
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d020      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01b      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0210 	mvn.w	r2, #16
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fb f8fe 	bl	80011d8 <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fba2 	bl	8006728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fba9 	bl	800673c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0201 	mvn.w	r2, #1
 800600c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fb80 	bl	8006714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00c      	beq.n	8006042 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800602e:	2b00      	cmp	r3, #0
 8006030:	d007      	beq.n	8006042 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800603a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 fb09 	bl	8007654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00c      	beq.n	8006066 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006052:	2b00      	cmp	r3, #0
 8006054:	d007      	beq.n	8006066 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800605e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f001 fb01 	bl	8007668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fb63 	bl	8006750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00c      	beq.n	80060ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d007      	beq.n	80060ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f06f 0220 	mvn.w	r2, #32
 80060a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 fac9 	bl	8007640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b086      	sub	sp, #24
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e088      	b.n	80061e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d11b      	bne.n	800611a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80060f2:	f000 ff9d 	bl	8007030 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 020c 	bic.w	r2, r2, #12
 8006104:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6999      	ldr	r1, [r3, #24]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	619a      	str	r2, [r3, #24]
 8006118:	e060      	b.n	80061dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b04      	cmp	r3, #4
 800611e:	d11c      	bne.n	800615a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006130:	f001 f821 	bl	8007176 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006142:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6999      	ldr	r1, [r3, #24]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	021a      	lsls	r2, r3, #8
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	619a      	str	r2, [r3, #24]
 8006158:	e040      	b.n	80061dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b08      	cmp	r3, #8
 800615e:	d11b      	bne.n	8006198 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006170:	f001 f86e 	bl	8007250 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69da      	ldr	r2, [r3, #28]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 020c 	bic.w	r2, r2, #12
 8006182:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	69d9      	ldr	r1, [r3, #28]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	430a      	orrs	r2, r1
 8006194:	61da      	str	r2, [r3, #28]
 8006196:	e021      	b.n	80061dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d11c      	bne.n	80061d8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80061ae:	f001 f88b 	bl	80072c8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80061c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69d9      	ldr	r1, [r3, #28]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	021a      	lsls	r2, r3, #8
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	61da      	str	r2, [r3, #28]
 80061d6:	e001      	b.n	80061dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800620a:	2302      	movs	r3, #2
 800620c:	e0ff      	b.n	800640e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b14      	cmp	r3, #20
 800621a:	f200 80f0 	bhi.w	80063fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006279 	.word	0x08006279
 8006228:	080063ff 	.word	0x080063ff
 800622c:	080063ff 	.word	0x080063ff
 8006230:	080063ff 	.word	0x080063ff
 8006234:	080062b9 	.word	0x080062b9
 8006238:	080063ff 	.word	0x080063ff
 800623c:	080063ff 	.word	0x080063ff
 8006240:	080063ff 	.word	0x080063ff
 8006244:	080062fb 	.word	0x080062fb
 8006248:	080063ff 	.word	0x080063ff
 800624c:	080063ff 	.word	0x080063ff
 8006250:	080063ff 	.word	0x080063ff
 8006254:	0800633b 	.word	0x0800633b
 8006258:	080063ff 	.word	0x080063ff
 800625c:	080063ff 	.word	0x080063ff
 8006260:	080063ff 	.word	0x080063ff
 8006264:	0800637d 	.word	0x0800637d
 8006268:	080063ff 	.word	0x080063ff
 800626c:	080063ff 	.word	0x080063ff
 8006270:	080063ff 	.word	0x080063ff
 8006274:	080063bd 	.word	0x080063bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fb16 	bl	80068b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699a      	ldr	r2, [r3, #24]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0204 	bic.w	r2, r2, #4
 80062a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6999      	ldr	r1, [r3, #24]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	619a      	str	r2, [r3, #24]
      break;
 80062b6:	e0a5      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fb86 	bl	80069d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6999      	ldr	r1, [r3, #24]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	021a      	lsls	r2, r3, #8
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	619a      	str	r2, [r3, #24]
      break;
 80062f8:	e084      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fbef 	bl	8006ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0208 	orr.w	r2, r2, #8
 8006314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69da      	ldr	r2, [r3, #28]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0204 	bic.w	r2, r2, #4
 8006324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69d9      	ldr	r1, [r3, #28]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	61da      	str	r2, [r3, #28]
      break;
 8006338:	e064      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fc57 	bl	8006bf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69d9      	ldr	r1, [r3, #28]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	021a      	lsls	r2, r3, #8
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	61da      	str	r2, [r3, #28]
      break;
 800637a:	e043      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fca0 	bl	8006cc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0208 	orr.w	r2, r2, #8
 8006396:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0204 	bic.w	r2, r2, #4
 80063a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063ba:	e023      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fce4 	bl	8006d90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	021a      	lsls	r2, r3, #8
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063fc:	e002      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	75fb      	strb	r3, [r7, #23]
      break;
 8006402:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop

08006418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_TIM_ConfigClockSource+0x1c>
 8006430:	2302      	movs	r3, #2
 8006432:	e0dc      	b.n	80065ee <HAL_TIM_ConfigClockSource+0x1d6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	4b6a      	ldr	r3, [pc, #424]	@ (80065f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006450:	4013      	ands	r3, r2
 8006452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800645a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a64      	ldr	r2, [pc, #400]	@ (80065fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	f000 80a9 	beq.w	80065c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006470:	4a62      	ldr	r2, [pc, #392]	@ (80065fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	f200 80ae 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006478:	4a61      	ldr	r2, [pc, #388]	@ (8006600 <HAL_TIM_ConfigClockSource+0x1e8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	f000 80a1 	beq.w	80065c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006480:	4a5f      	ldr	r2, [pc, #380]	@ (8006600 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	f200 80a6 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006488:	4a5e      	ldr	r2, [pc, #376]	@ (8006604 <HAL_TIM_ConfigClockSource+0x1ec>)
 800648a:	4293      	cmp	r3, r2
 800648c:	f000 8099 	beq.w	80065c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006490:	4a5c      	ldr	r2, [pc, #368]	@ (8006604 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006492:	4293      	cmp	r3, r2
 8006494:	f200 809e 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006498:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800649c:	f000 8091 	beq.w	80065c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80064a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80064a4:	f200 8096 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80064a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ac:	f000 8089 	beq.w	80065c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80064b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064b4:	f200 808e 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064bc:	d03e      	beq.n	800653c <HAL_TIM_ConfigClockSource+0x124>
 80064be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064c2:	f200 8087 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ca:	f000 8086 	beq.w	80065da <HAL_TIM_ConfigClockSource+0x1c2>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d2:	d87f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80064d4:	2b70      	cmp	r3, #112	@ 0x70
 80064d6:	d01a      	beq.n	800650e <HAL_TIM_ConfigClockSource+0xf6>
 80064d8:	2b70      	cmp	r3, #112	@ 0x70
 80064da:	d87b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80064dc:	2b60      	cmp	r3, #96	@ 0x60
 80064de:	d050      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x16a>
 80064e0:	2b60      	cmp	r3, #96	@ 0x60
 80064e2:	d877      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80064e4:	2b50      	cmp	r3, #80	@ 0x50
 80064e6:	d03c      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x14a>
 80064e8:	2b50      	cmp	r3, #80	@ 0x50
 80064ea:	d873      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80064ec:	2b40      	cmp	r3, #64	@ 0x40
 80064ee:	d058      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x18a>
 80064f0:	2b40      	cmp	r3, #64	@ 0x40
 80064f2:	d86f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80064f4:	2b30      	cmp	r3, #48	@ 0x30
 80064f6:	d064      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80064f8:	2b30      	cmp	r3, #48	@ 0x30
 80064fa:	d86b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d060      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d867      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d05c      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006508:	2b10      	cmp	r3, #16
 800650a:	d05a      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800650c:	e062      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800651e:	f000 ff2f 	bl	8007380 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	609a      	str	r2, [r3, #8]
      break;
 800653a:	e04f      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800654c:	f000 ff18 	bl	8007380 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800655e:	609a      	str	r2, [r3, #8]
      break;
 8006560:	e03c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800656e:	461a      	mov	r2, r3
 8006570:	f000 fdd2 	bl	8007118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2150      	movs	r1, #80	@ 0x50
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fee2 	bl	8007344 <TIM_ITRx_SetConfig>
      break;
 8006580:	e02c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800658e:	461a      	mov	r2, r3
 8006590:	f000 fe2e 	bl	80071f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2160      	movs	r1, #96	@ 0x60
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fed2 	bl	8007344 <TIM_ITRx_SetConfig>
      break;
 80065a0:	e01c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ae:	461a      	mov	r2, r3
 80065b0:	f000 fdb2 	bl	8007118 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2140      	movs	r1, #64	@ 0x40
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fec2 	bl	8007344 <TIM_ITRx_SetConfig>
      break;
 80065c0:	e00c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f000 feb9 	bl	8007344 <TIM_ITRx_SetConfig>
      break;
 80065d2:	e003      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
      break;
 80065d8:	e000      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80065da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	ffceff88 	.word	0xffceff88
 80065fc:	00100040 	.word	0x00100040
 8006600:	00100030 	.word	0x00100030
 8006604:	00100020 	.word	0x00100020

08006608 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_TIM_SlaveConfigSynchro+0x18>
 800661c:	2302      	movs	r3, #2
 800661e:	e031      	b.n	8006684 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fc12 	bl	8006e5c <TIM_SlaveTimer_SetConfig>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e018      	b.n	8006684 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006660:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006670:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b0c      	cmp	r3, #12
 800669e:	d831      	bhi.n	8006704 <HAL_TIM_ReadCapturedValue+0x78>
 80066a0:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066dd 	.word	0x080066dd
 80066ac:	08006705 	.word	0x08006705
 80066b0:	08006705 	.word	0x08006705
 80066b4:	08006705 	.word	0x08006705
 80066b8:	080066e7 	.word	0x080066e7
 80066bc:	08006705 	.word	0x08006705
 80066c0:	08006705 	.word	0x08006705
 80066c4:	08006705 	.word	0x08006705
 80066c8:	080066f1 	.word	0x080066f1
 80066cc:	08006705 	.word	0x08006705
 80066d0:	08006705 	.word	0x08006705
 80066d4:	08006705 	.word	0x08006705
 80066d8:	080066fb 	.word	0x080066fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e2:	60fb      	str	r3, [r7, #12]

      break;
 80066e4:	e00f      	b.n	8006706 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ec:	60fb      	str	r3, [r7, #12]

      break;
 80066ee:	e00a      	b.n	8006706 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f6:	60fb      	str	r3, [r7, #12]

      break;
 80066f8:	e005      	b.n	8006706 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006700:	60fb      	str	r3, [r7, #12]

      break;
 8006702:	e000      	b.n	8006706 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006704:	bf00      	nop
  }

  return tmpreg;
 8006706:	68fb      	ldr	r3, [r7, #12]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a46      	ldr	r2, [pc, #280]	@ (8006890 <TIM_Base_SetConfig+0x12c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d013      	beq.n	80067a4 <TIM_Base_SetConfig+0x40>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006782:	d00f      	beq.n	80067a4 <TIM_Base_SetConfig+0x40>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a43      	ldr	r2, [pc, #268]	@ (8006894 <TIM_Base_SetConfig+0x130>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00b      	beq.n	80067a4 <TIM_Base_SetConfig+0x40>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a42      	ldr	r2, [pc, #264]	@ (8006898 <TIM_Base_SetConfig+0x134>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d007      	beq.n	80067a4 <TIM_Base_SetConfig+0x40>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a41      	ldr	r2, [pc, #260]	@ (800689c <TIM_Base_SetConfig+0x138>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d003      	beq.n	80067a4 <TIM_Base_SetConfig+0x40>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a40      	ldr	r2, [pc, #256]	@ (80068a0 <TIM_Base_SetConfig+0x13c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d108      	bne.n	80067b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a35      	ldr	r2, [pc, #212]	@ (8006890 <TIM_Base_SetConfig+0x12c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01f      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c4:	d01b      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a32      	ldr	r2, [pc, #200]	@ (8006894 <TIM_Base_SetConfig+0x130>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d017      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a31      	ldr	r2, [pc, #196]	@ (8006898 <TIM_Base_SetConfig+0x134>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d013      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a30      	ldr	r2, [pc, #192]	@ (800689c <TIM_Base_SetConfig+0x138>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00f      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a2f      	ldr	r2, [pc, #188]	@ (80068a0 <TIM_Base_SetConfig+0x13c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00b      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a2e      	ldr	r2, [pc, #184]	@ (80068a4 <TIM_Base_SetConfig+0x140>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2d      	ldr	r2, [pc, #180]	@ (80068a8 <TIM_Base_SetConfig+0x144>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_Base_SetConfig+0x9a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2c      	ldr	r2, [pc, #176]	@ (80068ac <TIM_Base_SetConfig+0x148>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d108      	bne.n	8006810 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a16      	ldr	r2, [pc, #88]	@ (8006890 <TIM_Base_SetConfig+0x12c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00f      	beq.n	800685c <TIM_Base_SetConfig+0xf8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a18      	ldr	r2, [pc, #96]	@ (80068a0 <TIM_Base_SetConfig+0x13c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00b      	beq.n	800685c <TIM_Base_SetConfig+0xf8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a17      	ldr	r2, [pc, #92]	@ (80068a4 <TIM_Base_SetConfig+0x140>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d007      	beq.n	800685c <TIM_Base_SetConfig+0xf8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a16      	ldr	r2, [pc, #88]	@ (80068a8 <TIM_Base_SetConfig+0x144>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_Base_SetConfig+0xf8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a15      	ldr	r2, [pc, #84]	@ (80068ac <TIM_Base_SetConfig+0x148>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d103      	bne.n	8006864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b01      	cmp	r3, #1
 8006874:	d105      	bne.n	8006882 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f023 0201 	bic.w	r2, r3, #1
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	611a      	str	r2, [r3, #16]
  }
}
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40010000 	.word	0x40010000
 8006894:	40000400 	.word	0x40000400
 8006898:	40000800 	.word	0x40000800
 800689c:	40000c00 	.word	0x40000c00
 80068a0:	40010400 	.word	0x40010400
 80068a4:	40014000 	.word	0x40014000
 80068a8:	40014400 	.word	0x40014400
 80068ac:	40014800 	.word	0x40014800

080068b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f023 0201 	bic.w	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4b37      	ldr	r3, [pc, #220]	@ (80069b8 <TIM_OC1_SetConfig+0x108>)
 80068dc:	4013      	ands	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0303 	bic.w	r3, r3, #3
 80068e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f023 0302 	bic.w	r3, r3, #2
 80068f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4313      	orrs	r3, r2
 8006902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a2d      	ldr	r2, [pc, #180]	@ (80069bc <TIM_OC1_SetConfig+0x10c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00f      	beq.n	800692c <TIM_OC1_SetConfig+0x7c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a2c      	ldr	r2, [pc, #176]	@ (80069c0 <TIM_OC1_SetConfig+0x110>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00b      	beq.n	800692c <TIM_OC1_SetConfig+0x7c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a2b      	ldr	r2, [pc, #172]	@ (80069c4 <TIM_OC1_SetConfig+0x114>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d007      	beq.n	800692c <TIM_OC1_SetConfig+0x7c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a2a      	ldr	r2, [pc, #168]	@ (80069c8 <TIM_OC1_SetConfig+0x118>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_OC1_SetConfig+0x7c>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a29      	ldr	r2, [pc, #164]	@ (80069cc <TIM_OC1_SetConfig+0x11c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d10c      	bne.n	8006946 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f023 0308 	bic.w	r3, r3, #8
 8006932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f023 0304 	bic.w	r3, r3, #4
 8006944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1c      	ldr	r2, [pc, #112]	@ (80069bc <TIM_OC1_SetConfig+0x10c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00f      	beq.n	800696e <TIM_OC1_SetConfig+0xbe>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <TIM_OC1_SetConfig+0x110>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00b      	beq.n	800696e <TIM_OC1_SetConfig+0xbe>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1a      	ldr	r2, [pc, #104]	@ (80069c4 <TIM_OC1_SetConfig+0x114>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d007      	beq.n	800696e <TIM_OC1_SetConfig+0xbe>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a19      	ldr	r2, [pc, #100]	@ (80069c8 <TIM_OC1_SetConfig+0x118>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_OC1_SetConfig+0xbe>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a18      	ldr	r2, [pc, #96]	@ (80069cc <TIM_OC1_SetConfig+0x11c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d111      	bne.n	8006992 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800697c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	621a      	str	r2, [r3, #32]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	fffeff8f 	.word	0xfffeff8f
 80069bc:	40010000 	.word	0x40010000
 80069c0:	40010400 	.word	0x40010400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800

080069d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	f023 0210 	bic.w	r2, r3, #16
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4b34      	ldr	r3, [pc, #208]	@ (8006acc <TIM_OC2_SetConfig+0xfc>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0320 	bic.w	r3, r3, #32
 8006a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a29      	ldr	r2, [pc, #164]	@ (8006ad0 <TIM_OC2_SetConfig+0x100>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_OC2_SetConfig+0x68>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a28      	ldr	r2, [pc, #160]	@ (8006ad4 <TIM_OC2_SetConfig+0x104>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d10d      	bne.n	8006a54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad0 <TIM_OC2_SetConfig+0x100>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00f      	beq.n	8006a7c <TIM_OC2_SetConfig+0xac>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad4 <TIM_OC2_SetConfig+0x104>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00b      	beq.n	8006a7c <TIM_OC2_SetConfig+0xac>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad8 <TIM_OC2_SetConfig+0x108>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d007      	beq.n	8006a7c <TIM_OC2_SetConfig+0xac>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8006adc <TIM_OC2_SetConfig+0x10c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d003      	beq.n	8006a7c <TIM_OC2_SetConfig+0xac>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a1a      	ldr	r2, [pc, #104]	@ (8006ae0 <TIM_OC2_SetConfig+0x110>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d113      	bne.n	8006aa4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	feff8fff 	.word	0xfeff8fff
 8006ad0:	40010000 	.word	0x40010000
 8006ad4:	40010400 	.word	0x40010400
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	40014400 	.word	0x40014400
 8006ae0:	40014800 	.word	0x40014800

08006ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4b33      	ldr	r3, [pc, #204]	@ (8006bdc <TIM_OC3_SetConfig+0xf8>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a28      	ldr	r2, [pc, #160]	@ (8006be0 <TIM_OC3_SetConfig+0xfc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_OC3_SetConfig+0x66>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a27      	ldr	r2, [pc, #156]	@ (8006be4 <TIM_OC3_SetConfig+0x100>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d10d      	bne.n	8006b66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1d      	ldr	r2, [pc, #116]	@ (8006be0 <TIM_OC3_SetConfig+0xfc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00f      	beq.n	8006b8e <TIM_OC3_SetConfig+0xaa>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a1c      	ldr	r2, [pc, #112]	@ (8006be4 <TIM_OC3_SetConfig+0x100>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00b      	beq.n	8006b8e <TIM_OC3_SetConfig+0xaa>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a1b      	ldr	r2, [pc, #108]	@ (8006be8 <TIM_OC3_SetConfig+0x104>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d007      	beq.n	8006b8e <TIM_OC3_SetConfig+0xaa>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a1a      	ldr	r2, [pc, #104]	@ (8006bec <TIM_OC3_SetConfig+0x108>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d003      	beq.n	8006b8e <TIM_OC3_SetConfig+0xaa>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a19      	ldr	r2, [pc, #100]	@ (8006bf0 <TIM_OC3_SetConfig+0x10c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d113      	bne.n	8006bb6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	621a      	str	r2, [r3, #32]
}
 8006bd0:	bf00      	nop
 8006bd2:	371c      	adds	r7, #28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	fffeff8f 	.word	0xfffeff8f
 8006be0:	40010000 	.word	0x40010000
 8006be4:	40010400 	.word	0x40010400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800

08006bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4b24      	ldr	r3, [pc, #144]	@ (8006cb0 <TIM_OC4_SetConfig+0xbc>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	031b      	lsls	r3, r3, #12
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a19      	ldr	r2, [pc, #100]	@ (8006cb4 <TIM_OC4_SetConfig+0xc0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00f      	beq.n	8006c74 <TIM_OC4_SetConfig+0x80>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a18      	ldr	r2, [pc, #96]	@ (8006cb8 <TIM_OC4_SetConfig+0xc4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00b      	beq.n	8006c74 <TIM_OC4_SetConfig+0x80>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a17      	ldr	r2, [pc, #92]	@ (8006cbc <TIM_OC4_SetConfig+0xc8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d007      	beq.n	8006c74 <TIM_OC4_SetConfig+0x80>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a16      	ldr	r2, [pc, #88]	@ (8006cc0 <TIM_OC4_SetConfig+0xcc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d003      	beq.n	8006c74 <TIM_OC4_SetConfig+0x80>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a15      	ldr	r2, [pc, #84]	@ (8006cc4 <TIM_OC4_SetConfig+0xd0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d109      	bne.n	8006c88 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	019b      	lsls	r3, r3, #6
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	feff8fff 	.word	0xfeff8fff
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40010400 	.word	0x40010400
 8006cbc:	40014000 	.word	0x40014000
 8006cc0:	40014400 	.word	0x40014400
 8006cc4:	40014800 	.word	0x40014800

08006cc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4b21      	ldr	r3, [pc, #132]	@ (8006d78 <TIM_OC5_SetConfig+0xb0>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006d08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	041b      	lsls	r3, r3, #16
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a18      	ldr	r2, [pc, #96]	@ (8006d7c <TIM_OC5_SetConfig+0xb4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00f      	beq.n	8006d3e <TIM_OC5_SetConfig+0x76>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a17      	ldr	r2, [pc, #92]	@ (8006d80 <TIM_OC5_SetConfig+0xb8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00b      	beq.n	8006d3e <TIM_OC5_SetConfig+0x76>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a16      	ldr	r2, [pc, #88]	@ (8006d84 <TIM_OC5_SetConfig+0xbc>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d007      	beq.n	8006d3e <TIM_OC5_SetConfig+0x76>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a15      	ldr	r2, [pc, #84]	@ (8006d88 <TIM_OC5_SetConfig+0xc0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d003      	beq.n	8006d3e <TIM_OC5_SetConfig+0x76>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a14      	ldr	r2, [pc, #80]	@ (8006d8c <TIM_OC5_SetConfig+0xc4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d109      	bne.n	8006d52 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	621a      	str	r2, [r3, #32]
}
 8006d6c:	bf00      	nop
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	fffeff8f 	.word	0xfffeff8f
 8006d7c:	40010000 	.word	0x40010000
 8006d80:	40010400 	.word	0x40010400
 8006d84:	40014000 	.word	0x40014000
 8006d88:	40014400 	.word	0x40014400
 8006d8c:	40014800 	.word	0x40014800

08006d90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4b22      	ldr	r3, [pc, #136]	@ (8006e44 <TIM_OC6_SetConfig+0xb4>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	051b      	lsls	r3, r3, #20
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a19      	ldr	r2, [pc, #100]	@ (8006e48 <TIM_OC6_SetConfig+0xb8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00f      	beq.n	8006e08 <TIM_OC6_SetConfig+0x78>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a18      	ldr	r2, [pc, #96]	@ (8006e4c <TIM_OC6_SetConfig+0xbc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00b      	beq.n	8006e08 <TIM_OC6_SetConfig+0x78>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a17      	ldr	r2, [pc, #92]	@ (8006e50 <TIM_OC6_SetConfig+0xc0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d007      	beq.n	8006e08 <TIM_OC6_SetConfig+0x78>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a16      	ldr	r2, [pc, #88]	@ (8006e54 <TIM_OC6_SetConfig+0xc4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d003      	beq.n	8006e08 <TIM_OC6_SetConfig+0x78>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a15      	ldr	r2, [pc, #84]	@ (8006e58 <TIM_OC6_SetConfig+0xc8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d109      	bne.n	8006e1c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	029b      	lsls	r3, r3, #10
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	feff8fff 	.word	0xfeff8fff
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40010400 	.word	0x40010400
 8006e50:	40014000 	.word	0x40014000
 8006e54:	40014400 	.word	0x40014400
 8006e58:	40014800 	.word	0x40014800

08006e5c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4b65      	ldr	r3, [pc, #404]	@ (800700c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006e76:	4013      	ands	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4b62      	ldr	r3, [pc, #392]	@ (8007010 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8007014 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	f000 80ab 	beq.w	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006eaa:	4a5a      	ldr	r2, [pc, #360]	@ (8007014 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	f200 80a4 	bhi.w	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006eb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eb6:	f000 80a3 	beq.w	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ebe:	f200 809c 	bhi.w	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006ec2:	4a55      	ldr	r2, [pc, #340]	@ (8007018 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	f000 809b 	beq.w	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006eca:	4a53      	ldr	r2, [pc, #332]	@ (8007018 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	f200 8094 	bhi.w	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006ed2:	4a52      	ldr	r2, [pc, #328]	@ (800701c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	f000 8093 	beq.w	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006eda:	4a50      	ldr	r2, [pc, #320]	@ (800701c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	f200 808c 	bhi.w	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006ee2:	4a4f      	ldr	r2, [pc, #316]	@ (8007020 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	f000 808b 	beq.w	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006eea:	4a4d      	ldr	r2, [pc, #308]	@ (8007020 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	f200 8084 	bhi.w	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006ef2:	4a4c      	ldr	r2, [pc, #304]	@ (8007024 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	f000 8083 	beq.w	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006efa:	4a4a      	ldr	r2, [pc, #296]	@ (8007024 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d87c      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f00:	4a49      	ldr	r2, [pc, #292]	@ (8007028 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d07c      	beq.n	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006f06:	4a48      	ldr	r2, [pc, #288]	@ (8007028 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d876      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f0c:	4a47      	ldr	r2, [pc, #284]	@ (800702c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d076      	beq.n	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006f12:	4a46      	ldr	r2, [pc, #280]	@ (800702c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d870      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f1c:	d070      	beq.n	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006f1e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f22:	d86a      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f28:	d06a      	beq.n	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f2e:	d864      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f30:	2b70      	cmp	r3, #112	@ 0x70
 8006f32:	d01a      	beq.n	8006f6a <TIM_SlaveTimer_SetConfig+0x10e>
 8006f34:	2b70      	cmp	r3, #112	@ 0x70
 8006f36:	d860      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f38:	2b60      	cmp	r3, #96	@ 0x60
 8006f3a:	d054      	beq.n	8006fe6 <TIM_SlaveTimer_SetConfig+0x18a>
 8006f3c:	2b60      	cmp	r3, #96	@ 0x60
 8006f3e:	d85c      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f40:	2b50      	cmp	r3, #80	@ 0x50
 8006f42:	d046      	beq.n	8006fd2 <TIM_SlaveTimer_SetConfig+0x176>
 8006f44:	2b50      	cmp	r3, #80	@ 0x50
 8006f46:	d858      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f48:	2b40      	cmp	r3, #64	@ 0x40
 8006f4a:	d019      	beq.n	8006f80 <TIM_SlaveTimer_SetConfig+0x124>
 8006f4c:	2b40      	cmp	r3, #64	@ 0x40
 8006f4e:	d854      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f50:	2b30      	cmp	r3, #48	@ 0x30
 8006f52:	d055      	beq.n	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006f54:	2b30      	cmp	r3, #48	@ 0x30
 8006f56:	d850      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f58:	2b20      	cmp	r3, #32
 8006f5a:	d051      	beq.n	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d84c      	bhi.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d04d      	beq.n	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006f64:	2b10      	cmp	r3, #16
 8006f66:	d04b      	beq.n	8007000 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006f68:	e047      	b.n	8006ffa <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006f7a:	f000 fa01 	bl	8007380 <TIM_ETR_SetConfig>
      break;
 8006f7e:	e040      	b.n	8007002 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b05      	cmp	r3, #5
 8006f86:	d101      	bne.n	8006f8c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e03b      	b.n	8007004 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a1a      	ldr	r2, [r3, #32]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0201 	bic.w	r2, r2, #1
 8006fa2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fb2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	621a      	str	r2, [r3, #32]
      break;
 8006fd0:	e017      	b.n	8007002 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f000 f89a 	bl	8007118 <TIM_TI1_ConfigInputStage>
      break;
 8006fe4:	e00d      	b.n	8007002 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f000 f8fc 	bl	80071f0 <TIM_TI2_ConfigInputStage>
      break;
 8006ff8:	e003      	b.n	8007002 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffe:	e000      	b.n	8007002 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8007000:	bf00      	nop
  }

  return status;
 8007002:	7dfb      	ldrb	r3, [r7, #23]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	ffcfff8f 	.word	0xffcfff8f
 8007010:	fffefff8 	.word	0xfffefff8
 8007014:	00200010 	.word	0x00200010
 8007018:	00100070 	.word	0x00100070
 800701c:	00100060 	.word	0x00100060
 8007020:	00100050 	.word	0x00100050
 8007024:	00100040 	.word	0x00100040
 8007028:	00100030 	.word	0x00100030
 800702c:	00100020 	.word	0x00100020

08007030 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	f023 0201 	bic.w	r2, r3, #1
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a28      	ldr	r2, [pc, #160]	@ (80070fc <TIM_TI1_SetConfig+0xcc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d01b      	beq.n	8007096 <TIM_TI1_SetConfig+0x66>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007064:	d017      	beq.n	8007096 <TIM_TI1_SetConfig+0x66>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4a25      	ldr	r2, [pc, #148]	@ (8007100 <TIM_TI1_SetConfig+0xd0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <TIM_TI1_SetConfig+0x66>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4a24      	ldr	r2, [pc, #144]	@ (8007104 <TIM_TI1_SetConfig+0xd4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00f      	beq.n	8007096 <TIM_TI1_SetConfig+0x66>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4a23      	ldr	r2, [pc, #140]	@ (8007108 <TIM_TI1_SetConfig+0xd8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00b      	beq.n	8007096 <TIM_TI1_SetConfig+0x66>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4a22      	ldr	r2, [pc, #136]	@ (800710c <TIM_TI1_SetConfig+0xdc>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d007      	beq.n	8007096 <TIM_TI1_SetConfig+0x66>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4a21      	ldr	r2, [pc, #132]	@ (8007110 <TIM_TI1_SetConfig+0xe0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d003      	beq.n	8007096 <TIM_TI1_SetConfig+0x66>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4a20      	ldr	r2, [pc, #128]	@ (8007114 <TIM_TI1_SetConfig+0xe4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d101      	bne.n	800709a <TIM_TI1_SetConfig+0x6a>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <TIM_TI1_SetConfig+0x6c>
 800709a:	2300      	movs	r3, #0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	e003      	b.n	80070ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f023 030a 	bic.w	r3, r3, #10
 80070d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f003 030a 	and.w	r3, r3, #10
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	4313      	orrs	r3, r2
 80070e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	621a      	str	r2, [r3, #32]
}
 80070ee:	bf00      	nop
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40010000 	.word	0x40010000
 8007100:	40000400 	.word	0x40000400
 8007104:	40000800 	.word	0x40000800
 8007108:	40000c00 	.word	0x40000c00
 800710c:	40010400 	.word	0x40010400
 8007110:	40001800 	.word	0x40001800
 8007114:	40014000 	.word	0x40014000

08007118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f023 0201 	bic.w	r2, r3, #1
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f023 030a 	bic.w	r3, r3, #10
 8007154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	621a      	str	r2, [r3, #32]
}
 800716a:	bf00      	nop
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007176:	b480      	push	{r7}
 8007178:	b087      	sub	sp, #28
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	f023 0210 	bic.w	r2, r3, #16
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	031b      	lsls	r3, r3, #12
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	011b      	lsls	r3, r3, #4
 80071ce:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	621a      	str	r2, [r3, #32]
}
 80071e4:	bf00      	nop
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f023 0210 	bic.w	r2, r3, #16
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800721a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	031b      	lsls	r3, r3, #12
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800722c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	621a      	str	r2, [r3, #32]
}
 8007244:	bf00      	nop
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f023 0303 	bic.w	r3, r3, #3
 800727c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800728c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	b2db      	uxtb	r3, r3
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	4313      	orrs	r3, r2
 8007298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80072a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	021b      	lsls	r3, r3, #8
 80072a6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	621a      	str	r2, [r3, #32]
}
 80072bc:	bf00      	nop
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007306:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	031b      	lsls	r3, r3, #12
 800730c:	b29b      	uxth	r3, r3
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800731a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	031b      	lsls	r3, r3, #12
 8007320:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	621a      	str	r2, [r3, #32]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	4b09      	ldr	r3, [pc, #36]	@ (800737c <TIM_ITRx_SetConfig+0x38>)
 8007358:	4013      	ands	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4313      	orrs	r3, r2
 8007362:	f043 0307 	orr.w	r3, r3, #7
 8007366:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	609a      	str	r2, [r3, #8]
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	ffcfff8f 	.word	0xffcfff8f

08007380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800739a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	021a      	lsls	r2, r3, #8
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	431a      	orrs	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	609a      	str	r2, [r3, #8]
}
 80073b4:	bf00      	nop
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f003 031f 	and.w	r3, r3, #31
 80073d2:	2201      	movs	r2, #1
 80073d4:	fa02 f303 	lsl.w	r3, r2, r3
 80073d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a1a      	ldr	r2, [r3, #32]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	43db      	mvns	r3, r3
 80073e2:	401a      	ands	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1a      	ldr	r2, [r3, #32]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	fa01 f303 	lsl.w	r3, r1, r3
 80073f8:	431a      	orrs	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
	...

0800740c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007420:	2302      	movs	r3, #2
 8007422:	e06d      	b.n	8007500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a30      	ldr	r2, [pc, #192]	@ (800750c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d004      	beq.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a2f      	ldr	r2, [pc, #188]	@ (8007510 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d108      	bne.n	800746a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800745e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007470:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a20      	ldr	r2, [pc, #128]	@ (800750c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d022      	beq.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007496:	d01d      	beq.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a1d      	ldr	r2, [pc, #116]	@ (8007514 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d018      	beq.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007518 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d013      	beq.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a1a      	ldr	r2, [pc, #104]	@ (800751c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00e      	beq.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a15      	ldr	r2, [pc, #84]	@ (8007510 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d009      	beq.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a16      	ldr	r2, [pc, #88]	@ (8007520 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d004      	beq.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a15      	ldr	r2, [pc, #84]	@ (8007524 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d10c      	bne.n	80074ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	40010000 	.word	0x40010000
 8007510:	40010400 	.word	0x40010400
 8007514:	40000400 	.word	0x40000400
 8007518:	40000800 	.word	0x40000800
 800751c:	40000c00 	.word	0x40000c00
 8007520:	40001800 	.word	0x40001800
 8007524:	40014000 	.word	0x40014000

08007528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007540:	2302      	movs	r3, #2
 8007542:	e073      	b.n	800762c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	4313      	orrs	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075aa:	4313      	orrs	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	041b      	lsls	r3, r3, #16
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a19      	ldr	r2, [pc, #100]	@ (8007638 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d004      	beq.n	80075e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a18      	ldr	r2, [pc, #96]	@ (800763c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d11c      	bne.n	800761a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	051b      	lsls	r3, r3, #20
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007608:	4313      	orrs	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007616:	4313      	orrs	r3, r2
 8007618:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	40010000 	.word	0x40010000
 800763c:	40010400 	.word	0x40010400

08007640 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e042      	b.n	8007714 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007694:	2b00      	cmp	r3, #0
 8007696:	d106      	bne.n	80076a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7fa fa59 	bl	8001b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2224      	movs	r2, #36	@ 0x24
 80076aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0201 	bic.w	r2, r2, #1
 80076bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fe94 	bl	80083f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f825 	bl	800771c <UART_SetConfig>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e01b      	b.n	8007714 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689a      	ldr	r2, [r3, #8]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0201 	orr.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 ff13 	bl	8008538 <UART_CheckIdleState>
 8007712:	4603      	mov	r3, r0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800771c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007720:	b092      	sub	sp, #72	@ 0x48
 8007722:	af00      	add	r7, sp, #0
 8007724:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	431a      	orrs	r2, r3
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	431a      	orrs	r2, r3
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	4313      	orrs	r3, r2
 8007742:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	4bbe      	ldr	r3, [pc, #760]	@ (8007a44 <UART_SetConfig+0x328>)
 800774c:	4013      	ands	r3, r2
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007754:	430b      	orrs	r3, r1
 8007756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4ab3      	ldr	r2, [pc, #716]	@ (8007a48 <UART_SetConfig+0x32c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007784:	4313      	orrs	r3, r2
 8007786:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	4baf      	ldr	r3, [pc, #700]	@ (8007a4c <UART_SetConfig+0x330>)
 8007790:	4013      	ands	r3, r2
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	6812      	ldr	r2, [r2, #0]
 8007796:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007798:	430b      	orrs	r3, r1
 800779a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a2:	f023 010f 	bic.w	r1, r3, #15
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4aa6      	ldr	r2, [pc, #664]	@ (8007a50 <UART_SetConfig+0x334>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d177      	bne.n	80078ac <UART_SetConfig+0x190>
 80077bc:	4ba5      	ldr	r3, [pc, #660]	@ (8007a54 <UART_SetConfig+0x338>)
 80077be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077c4:	2b28      	cmp	r3, #40	@ 0x28
 80077c6:	d86d      	bhi.n	80078a4 <UART_SetConfig+0x188>
 80077c8:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <UART_SetConfig+0xb4>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	08007875 	.word	0x08007875
 80077d4:	080078a5 	.word	0x080078a5
 80077d8:	080078a5 	.word	0x080078a5
 80077dc:	080078a5 	.word	0x080078a5
 80077e0:	080078a5 	.word	0x080078a5
 80077e4:	080078a5 	.word	0x080078a5
 80077e8:	080078a5 	.word	0x080078a5
 80077ec:	080078a5 	.word	0x080078a5
 80077f0:	0800787d 	.word	0x0800787d
 80077f4:	080078a5 	.word	0x080078a5
 80077f8:	080078a5 	.word	0x080078a5
 80077fc:	080078a5 	.word	0x080078a5
 8007800:	080078a5 	.word	0x080078a5
 8007804:	080078a5 	.word	0x080078a5
 8007808:	080078a5 	.word	0x080078a5
 800780c:	080078a5 	.word	0x080078a5
 8007810:	08007885 	.word	0x08007885
 8007814:	080078a5 	.word	0x080078a5
 8007818:	080078a5 	.word	0x080078a5
 800781c:	080078a5 	.word	0x080078a5
 8007820:	080078a5 	.word	0x080078a5
 8007824:	080078a5 	.word	0x080078a5
 8007828:	080078a5 	.word	0x080078a5
 800782c:	080078a5 	.word	0x080078a5
 8007830:	0800788d 	.word	0x0800788d
 8007834:	080078a5 	.word	0x080078a5
 8007838:	080078a5 	.word	0x080078a5
 800783c:	080078a5 	.word	0x080078a5
 8007840:	080078a5 	.word	0x080078a5
 8007844:	080078a5 	.word	0x080078a5
 8007848:	080078a5 	.word	0x080078a5
 800784c:	080078a5 	.word	0x080078a5
 8007850:	08007895 	.word	0x08007895
 8007854:	080078a5 	.word	0x080078a5
 8007858:	080078a5 	.word	0x080078a5
 800785c:	080078a5 	.word	0x080078a5
 8007860:	080078a5 	.word	0x080078a5
 8007864:	080078a5 	.word	0x080078a5
 8007868:	080078a5 	.word	0x080078a5
 800786c:	080078a5 	.word	0x080078a5
 8007870:	0800789d 	.word	0x0800789d
 8007874:	2301      	movs	r3, #1
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e326      	b.n	8007eca <UART_SetConfig+0x7ae>
 800787c:	2304      	movs	r3, #4
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e322      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007884:	2308      	movs	r3, #8
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e31e      	b.n	8007eca <UART_SetConfig+0x7ae>
 800788c:	2310      	movs	r3, #16
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e31a      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007894:	2320      	movs	r3, #32
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e316      	b.n	8007eca <UART_SetConfig+0x7ae>
 800789c:	2340      	movs	r3, #64	@ 0x40
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e312      	b.n	8007eca <UART_SetConfig+0x7ae>
 80078a4:	2380      	movs	r3, #128	@ 0x80
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e30e      	b.n	8007eca <UART_SetConfig+0x7ae>
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a69      	ldr	r2, [pc, #420]	@ (8007a58 <UART_SetConfig+0x33c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d130      	bne.n	8007918 <UART_SetConfig+0x1fc>
 80078b6:	4b67      	ldr	r3, [pc, #412]	@ (8007a54 <UART_SetConfig+0x338>)
 80078b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	2b05      	cmp	r3, #5
 80078c0:	d826      	bhi.n	8007910 <UART_SetConfig+0x1f4>
 80078c2:	a201      	add	r2, pc, #4	@ (adr r2, 80078c8 <UART_SetConfig+0x1ac>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	080078e1 	.word	0x080078e1
 80078cc:	080078e9 	.word	0x080078e9
 80078d0:	080078f1 	.word	0x080078f1
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007901 	.word	0x08007901
 80078dc:	08007909 	.word	0x08007909
 80078e0:	2300      	movs	r3, #0
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e2f0      	b.n	8007eca <UART_SetConfig+0x7ae>
 80078e8:	2304      	movs	r3, #4
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e2ec      	b.n	8007eca <UART_SetConfig+0x7ae>
 80078f0:	2308      	movs	r3, #8
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e2e8      	b.n	8007eca <UART_SetConfig+0x7ae>
 80078f8:	2310      	movs	r3, #16
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e2e4      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007900:	2320      	movs	r3, #32
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e2e0      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007908:	2340      	movs	r3, #64	@ 0x40
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e2dc      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007910:	2380      	movs	r3, #128	@ 0x80
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e2d8      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a4f      	ldr	r2, [pc, #316]	@ (8007a5c <UART_SetConfig+0x340>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d130      	bne.n	8007984 <UART_SetConfig+0x268>
 8007922:	4b4c      	ldr	r3, [pc, #304]	@ (8007a54 <UART_SetConfig+0x338>)
 8007924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	2b05      	cmp	r3, #5
 800792c:	d826      	bhi.n	800797c <UART_SetConfig+0x260>
 800792e:	a201      	add	r2, pc, #4	@ (adr r2, 8007934 <UART_SetConfig+0x218>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	0800794d 	.word	0x0800794d
 8007938:	08007955 	.word	0x08007955
 800793c:	0800795d 	.word	0x0800795d
 8007940:	08007965 	.word	0x08007965
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007975 	.word	0x08007975
 800794c:	2300      	movs	r3, #0
 800794e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007952:	e2ba      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007954:	2304      	movs	r3, #4
 8007956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795a:	e2b6      	b.n	8007eca <UART_SetConfig+0x7ae>
 800795c:	2308      	movs	r3, #8
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e2b2      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007964:	2310      	movs	r3, #16
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e2ae      	b.n	8007eca <UART_SetConfig+0x7ae>
 800796c:	2320      	movs	r3, #32
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e2aa      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007974:	2340      	movs	r3, #64	@ 0x40
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e2a6      	b.n	8007eca <UART_SetConfig+0x7ae>
 800797c:	2380      	movs	r3, #128	@ 0x80
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e2a2      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a35      	ldr	r2, [pc, #212]	@ (8007a60 <UART_SetConfig+0x344>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d130      	bne.n	80079f0 <UART_SetConfig+0x2d4>
 800798e:	4b31      	ldr	r3, [pc, #196]	@ (8007a54 <UART_SetConfig+0x338>)
 8007990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	2b05      	cmp	r3, #5
 8007998:	d826      	bhi.n	80079e8 <UART_SetConfig+0x2cc>
 800799a:	a201      	add	r2, pc, #4	@ (adr r2, 80079a0 <UART_SetConfig+0x284>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079b9 	.word	0x080079b9
 80079a4:	080079c1 	.word	0x080079c1
 80079a8:	080079c9 	.word	0x080079c9
 80079ac:	080079d1 	.word	0x080079d1
 80079b0:	080079d9 	.word	0x080079d9
 80079b4:	080079e1 	.word	0x080079e1
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079be:	e284      	b.n	8007eca <UART_SetConfig+0x7ae>
 80079c0:	2304      	movs	r3, #4
 80079c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c6:	e280      	b.n	8007eca <UART_SetConfig+0x7ae>
 80079c8:	2308      	movs	r3, #8
 80079ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ce:	e27c      	b.n	8007eca <UART_SetConfig+0x7ae>
 80079d0:	2310      	movs	r3, #16
 80079d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d6:	e278      	b.n	8007eca <UART_SetConfig+0x7ae>
 80079d8:	2320      	movs	r3, #32
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e274      	b.n	8007eca <UART_SetConfig+0x7ae>
 80079e0:	2340      	movs	r3, #64	@ 0x40
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e270      	b.n	8007eca <UART_SetConfig+0x7ae>
 80079e8:	2380      	movs	r3, #128	@ 0x80
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e26c      	b.n	8007eca <UART_SetConfig+0x7ae>
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007a64 <UART_SetConfig+0x348>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d142      	bne.n	8007a80 <UART_SetConfig+0x364>
 80079fa:	4b16      	ldr	r3, [pc, #88]	@ (8007a54 <UART_SetConfig+0x338>)
 80079fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	2b05      	cmp	r3, #5
 8007a04:	d838      	bhi.n	8007a78 <UART_SetConfig+0x35c>
 8007a06:	a201      	add	r2, pc, #4	@ (adr r2, 8007a0c <UART_SetConfig+0x2f0>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a25 	.word	0x08007a25
 8007a10:	08007a2d 	.word	0x08007a2d
 8007a14:	08007a35 	.word	0x08007a35
 8007a18:	08007a3d 	.word	0x08007a3d
 8007a1c:	08007a69 	.word	0x08007a69
 8007a20:	08007a71 	.word	0x08007a71
 8007a24:	2300      	movs	r3, #0
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2a:	e24e      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007a2c:	2304      	movs	r3, #4
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e24a      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007a34:	2308      	movs	r3, #8
 8007a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3a:	e246      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a42:	e242      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007a44:	cfff69f3 	.word	0xcfff69f3
 8007a48:	58000c00 	.word	0x58000c00
 8007a4c:	11fff4ff 	.word	0x11fff4ff
 8007a50:	40011000 	.word	0x40011000
 8007a54:	58024400 	.word	0x58024400
 8007a58:	40004400 	.word	0x40004400
 8007a5c:	40004800 	.word	0x40004800
 8007a60:	40004c00 	.word	0x40004c00
 8007a64:	40005000 	.word	0x40005000
 8007a68:	2320      	movs	r3, #32
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6e:	e22c      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007a70:	2340      	movs	r3, #64	@ 0x40
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a76:	e228      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007a78:	2380      	movs	r3, #128	@ 0x80
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7e:	e224      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4ab1      	ldr	r2, [pc, #708]	@ (8007d4c <UART_SetConfig+0x630>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d176      	bne.n	8007b78 <UART_SetConfig+0x45c>
 8007a8a:	4bb1      	ldr	r3, [pc, #708]	@ (8007d50 <UART_SetConfig+0x634>)
 8007a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a92:	2b28      	cmp	r3, #40	@ 0x28
 8007a94:	d86c      	bhi.n	8007b70 <UART_SetConfig+0x454>
 8007a96:	a201      	add	r2, pc, #4	@ (adr r2, 8007a9c <UART_SetConfig+0x380>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007b41 	.word	0x08007b41
 8007aa0:	08007b71 	.word	0x08007b71
 8007aa4:	08007b71 	.word	0x08007b71
 8007aa8:	08007b71 	.word	0x08007b71
 8007aac:	08007b71 	.word	0x08007b71
 8007ab0:	08007b71 	.word	0x08007b71
 8007ab4:	08007b71 	.word	0x08007b71
 8007ab8:	08007b71 	.word	0x08007b71
 8007abc:	08007b49 	.word	0x08007b49
 8007ac0:	08007b71 	.word	0x08007b71
 8007ac4:	08007b71 	.word	0x08007b71
 8007ac8:	08007b71 	.word	0x08007b71
 8007acc:	08007b71 	.word	0x08007b71
 8007ad0:	08007b71 	.word	0x08007b71
 8007ad4:	08007b71 	.word	0x08007b71
 8007ad8:	08007b71 	.word	0x08007b71
 8007adc:	08007b51 	.word	0x08007b51
 8007ae0:	08007b71 	.word	0x08007b71
 8007ae4:	08007b71 	.word	0x08007b71
 8007ae8:	08007b71 	.word	0x08007b71
 8007aec:	08007b71 	.word	0x08007b71
 8007af0:	08007b71 	.word	0x08007b71
 8007af4:	08007b71 	.word	0x08007b71
 8007af8:	08007b71 	.word	0x08007b71
 8007afc:	08007b59 	.word	0x08007b59
 8007b00:	08007b71 	.word	0x08007b71
 8007b04:	08007b71 	.word	0x08007b71
 8007b08:	08007b71 	.word	0x08007b71
 8007b0c:	08007b71 	.word	0x08007b71
 8007b10:	08007b71 	.word	0x08007b71
 8007b14:	08007b71 	.word	0x08007b71
 8007b18:	08007b71 	.word	0x08007b71
 8007b1c:	08007b61 	.word	0x08007b61
 8007b20:	08007b71 	.word	0x08007b71
 8007b24:	08007b71 	.word	0x08007b71
 8007b28:	08007b71 	.word	0x08007b71
 8007b2c:	08007b71 	.word	0x08007b71
 8007b30:	08007b71 	.word	0x08007b71
 8007b34:	08007b71 	.word	0x08007b71
 8007b38:	08007b71 	.word	0x08007b71
 8007b3c:	08007b69 	.word	0x08007b69
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b46:	e1c0      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4e:	e1bc      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b56:	e1b8      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5e:	e1b4      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007b60:	2320      	movs	r3, #32
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e1b0      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007b68:	2340      	movs	r3, #64	@ 0x40
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e1ac      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007b70:	2380      	movs	r3, #128	@ 0x80
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e1a8      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a75      	ldr	r2, [pc, #468]	@ (8007d54 <UART_SetConfig+0x638>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d130      	bne.n	8007be4 <UART_SetConfig+0x4c8>
 8007b82:	4b73      	ldr	r3, [pc, #460]	@ (8007d50 <UART_SetConfig+0x634>)
 8007b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	2b05      	cmp	r3, #5
 8007b8c:	d826      	bhi.n	8007bdc <UART_SetConfig+0x4c0>
 8007b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b94 <UART_SetConfig+0x478>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007bad 	.word	0x08007bad
 8007b98:	08007bb5 	.word	0x08007bb5
 8007b9c:	08007bbd 	.word	0x08007bbd
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bcd 	.word	0x08007bcd
 8007ba8:	08007bd5 	.word	0x08007bd5
 8007bac:	2300      	movs	r3, #0
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb2:	e18a      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007bb4:	2304      	movs	r3, #4
 8007bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bba:	e186      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc2:	e182      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007bc4:	2310      	movs	r3, #16
 8007bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bca:	e17e      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007bcc:	2320      	movs	r3, #32
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd2:	e17a      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007bd4:	2340      	movs	r3, #64	@ 0x40
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e176      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007bdc:	2380      	movs	r3, #128	@ 0x80
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e172      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a5b      	ldr	r2, [pc, #364]	@ (8007d58 <UART_SetConfig+0x63c>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d130      	bne.n	8007c50 <UART_SetConfig+0x534>
 8007bee:	4b58      	ldr	r3, [pc, #352]	@ (8007d50 <UART_SetConfig+0x634>)
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	2b05      	cmp	r3, #5
 8007bf8:	d826      	bhi.n	8007c48 <UART_SetConfig+0x52c>
 8007bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007c00 <UART_SetConfig+0x4e4>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c19 	.word	0x08007c19
 8007c04:	08007c21 	.word	0x08007c21
 8007c08:	08007c29 	.word	0x08007c29
 8007c0c:	08007c31 	.word	0x08007c31
 8007c10:	08007c39 	.word	0x08007c39
 8007c14:	08007c41 	.word	0x08007c41
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1e:	e154      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007c20:	2304      	movs	r3, #4
 8007c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c26:	e150      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007c28:	2308      	movs	r3, #8
 8007c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2e:	e14c      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007c30:	2310      	movs	r3, #16
 8007c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c36:	e148      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007c38:	2320      	movs	r3, #32
 8007c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3e:	e144      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007c40:	2340      	movs	r3, #64	@ 0x40
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c46:	e140      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007c48:	2380      	movs	r3, #128	@ 0x80
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e13c      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a41      	ldr	r2, [pc, #260]	@ (8007d5c <UART_SetConfig+0x640>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	f040 8082 	bne.w	8007d60 <UART_SetConfig+0x644>
 8007c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8007d50 <UART_SetConfig+0x634>)
 8007c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c64:	2b28      	cmp	r3, #40	@ 0x28
 8007c66:	d86d      	bhi.n	8007d44 <UART_SetConfig+0x628>
 8007c68:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <UART_SetConfig+0x554>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007d15 	.word	0x08007d15
 8007c74:	08007d45 	.word	0x08007d45
 8007c78:	08007d45 	.word	0x08007d45
 8007c7c:	08007d45 	.word	0x08007d45
 8007c80:	08007d45 	.word	0x08007d45
 8007c84:	08007d45 	.word	0x08007d45
 8007c88:	08007d45 	.word	0x08007d45
 8007c8c:	08007d45 	.word	0x08007d45
 8007c90:	08007d1d 	.word	0x08007d1d
 8007c94:	08007d45 	.word	0x08007d45
 8007c98:	08007d45 	.word	0x08007d45
 8007c9c:	08007d45 	.word	0x08007d45
 8007ca0:	08007d45 	.word	0x08007d45
 8007ca4:	08007d45 	.word	0x08007d45
 8007ca8:	08007d45 	.word	0x08007d45
 8007cac:	08007d45 	.word	0x08007d45
 8007cb0:	08007d25 	.word	0x08007d25
 8007cb4:	08007d45 	.word	0x08007d45
 8007cb8:	08007d45 	.word	0x08007d45
 8007cbc:	08007d45 	.word	0x08007d45
 8007cc0:	08007d45 	.word	0x08007d45
 8007cc4:	08007d45 	.word	0x08007d45
 8007cc8:	08007d45 	.word	0x08007d45
 8007ccc:	08007d45 	.word	0x08007d45
 8007cd0:	08007d2d 	.word	0x08007d2d
 8007cd4:	08007d45 	.word	0x08007d45
 8007cd8:	08007d45 	.word	0x08007d45
 8007cdc:	08007d45 	.word	0x08007d45
 8007ce0:	08007d45 	.word	0x08007d45
 8007ce4:	08007d45 	.word	0x08007d45
 8007ce8:	08007d45 	.word	0x08007d45
 8007cec:	08007d45 	.word	0x08007d45
 8007cf0:	08007d35 	.word	0x08007d35
 8007cf4:	08007d45 	.word	0x08007d45
 8007cf8:	08007d45 	.word	0x08007d45
 8007cfc:	08007d45 	.word	0x08007d45
 8007d00:	08007d45 	.word	0x08007d45
 8007d04:	08007d45 	.word	0x08007d45
 8007d08:	08007d45 	.word	0x08007d45
 8007d0c:	08007d45 	.word	0x08007d45
 8007d10:	08007d3d 	.word	0x08007d3d
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1a:	e0d6      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007d1c:	2304      	movs	r3, #4
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d22:	e0d2      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007d24:	2308      	movs	r3, #8
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2a:	e0ce      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007d2c:	2310      	movs	r3, #16
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d32:	e0ca      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007d34:	2320      	movs	r3, #32
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	e0c6      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007d3c:	2340      	movs	r3, #64	@ 0x40
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d42:	e0c2      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007d44:	2380      	movs	r3, #128	@ 0x80
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4a:	e0be      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007d4c:	40011400 	.word	0x40011400
 8007d50:	58024400 	.word	0x58024400
 8007d54:	40007800 	.word	0x40007800
 8007d58:	40007c00 	.word	0x40007c00
 8007d5c:	40011800 	.word	0x40011800
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4aad      	ldr	r2, [pc, #692]	@ (800801c <UART_SetConfig+0x900>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d176      	bne.n	8007e58 <UART_SetConfig+0x73c>
 8007d6a:	4bad      	ldr	r3, [pc, #692]	@ (8008020 <UART_SetConfig+0x904>)
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d72:	2b28      	cmp	r3, #40	@ 0x28
 8007d74:	d86c      	bhi.n	8007e50 <UART_SetConfig+0x734>
 8007d76:	a201      	add	r2, pc, #4	@ (adr r2, 8007d7c <UART_SetConfig+0x660>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007e21 	.word	0x08007e21
 8007d80:	08007e51 	.word	0x08007e51
 8007d84:	08007e51 	.word	0x08007e51
 8007d88:	08007e51 	.word	0x08007e51
 8007d8c:	08007e51 	.word	0x08007e51
 8007d90:	08007e51 	.word	0x08007e51
 8007d94:	08007e51 	.word	0x08007e51
 8007d98:	08007e51 	.word	0x08007e51
 8007d9c:	08007e29 	.word	0x08007e29
 8007da0:	08007e51 	.word	0x08007e51
 8007da4:	08007e51 	.word	0x08007e51
 8007da8:	08007e51 	.word	0x08007e51
 8007dac:	08007e51 	.word	0x08007e51
 8007db0:	08007e51 	.word	0x08007e51
 8007db4:	08007e51 	.word	0x08007e51
 8007db8:	08007e51 	.word	0x08007e51
 8007dbc:	08007e31 	.word	0x08007e31
 8007dc0:	08007e51 	.word	0x08007e51
 8007dc4:	08007e51 	.word	0x08007e51
 8007dc8:	08007e51 	.word	0x08007e51
 8007dcc:	08007e51 	.word	0x08007e51
 8007dd0:	08007e51 	.word	0x08007e51
 8007dd4:	08007e51 	.word	0x08007e51
 8007dd8:	08007e51 	.word	0x08007e51
 8007ddc:	08007e39 	.word	0x08007e39
 8007de0:	08007e51 	.word	0x08007e51
 8007de4:	08007e51 	.word	0x08007e51
 8007de8:	08007e51 	.word	0x08007e51
 8007dec:	08007e51 	.word	0x08007e51
 8007df0:	08007e51 	.word	0x08007e51
 8007df4:	08007e51 	.word	0x08007e51
 8007df8:	08007e51 	.word	0x08007e51
 8007dfc:	08007e41 	.word	0x08007e41
 8007e00:	08007e51 	.word	0x08007e51
 8007e04:	08007e51 	.word	0x08007e51
 8007e08:	08007e51 	.word	0x08007e51
 8007e0c:	08007e51 	.word	0x08007e51
 8007e10:	08007e51 	.word	0x08007e51
 8007e14:	08007e51 	.word	0x08007e51
 8007e18:	08007e51 	.word	0x08007e51
 8007e1c:	08007e49 	.word	0x08007e49
 8007e20:	2301      	movs	r3, #1
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e26:	e050      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007e28:	2304      	movs	r3, #4
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2e:	e04c      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007e30:	2308      	movs	r3, #8
 8007e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e36:	e048      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007e38:	2310      	movs	r3, #16
 8007e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3e:	e044      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007e40:	2320      	movs	r3, #32
 8007e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e46:	e040      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007e48:	2340      	movs	r3, #64	@ 0x40
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4e:	e03c      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007e50:	2380      	movs	r3, #128	@ 0x80
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e56:	e038      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a71      	ldr	r2, [pc, #452]	@ (8008024 <UART_SetConfig+0x908>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d130      	bne.n	8007ec4 <UART_SetConfig+0x7a8>
 8007e62:	4b6f      	ldr	r3, [pc, #444]	@ (8008020 <UART_SetConfig+0x904>)
 8007e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d826      	bhi.n	8007ebc <UART_SetConfig+0x7a0>
 8007e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e74 <UART_SetConfig+0x758>)
 8007e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e74:	08007e8d 	.word	0x08007e8d
 8007e78:	08007e95 	.word	0x08007e95
 8007e7c:	08007e9d 	.word	0x08007e9d
 8007e80:	08007ea5 	.word	0x08007ea5
 8007e84:	08007ead 	.word	0x08007ead
 8007e88:	08007eb5 	.word	0x08007eb5
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e92:	e01a      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007e94:	2304      	movs	r3, #4
 8007e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9a:	e016      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007e9c:	2308      	movs	r3, #8
 8007e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ea2:	e012      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007ea4:	2310      	movs	r3, #16
 8007ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eaa:	e00e      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007eac:	2320      	movs	r3, #32
 8007eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb2:	e00a      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007eb4:	2340      	movs	r3, #64	@ 0x40
 8007eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eba:	e006      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007ebc:	2380      	movs	r3, #128	@ 0x80
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec2:	e002      	b.n	8007eca <UART_SetConfig+0x7ae>
 8007ec4:	2380      	movs	r3, #128	@ 0x80
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a55      	ldr	r2, [pc, #340]	@ (8008024 <UART_SetConfig+0x908>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	f040 80f8 	bne.w	80080c6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ed6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	dc46      	bgt.n	8007f6c <UART_SetConfig+0x850>
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	db75      	blt.n	8007fce <UART_SetConfig+0x8b2>
 8007ee2:	3b02      	subs	r3, #2
 8007ee4:	2b1e      	cmp	r3, #30
 8007ee6:	d872      	bhi.n	8007fce <UART_SetConfig+0x8b2>
 8007ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef0 <UART_SetConfig+0x7d4>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f73 	.word	0x08007f73
 8007ef4:	08007fcf 	.word	0x08007fcf
 8007ef8:	08007f7b 	.word	0x08007f7b
 8007efc:	08007fcf 	.word	0x08007fcf
 8007f00:	08007fcf 	.word	0x08007fcf
 8007f04:	08007fcf 	.word	0x08007fcf
 8007f08:	08007f8b 	.word	0x08007f8b
 8007f0c:	08007fcf 	.word	0x08007fcf
 8007f10:	08007fcf 	.word	0x08007fcf
 8007f14:	08007fcf 	.word	0x08007fcf
 8007f18:	08007fcf 	.word	0x08007fcf
 8007f1c:	08007fcf 	.word	0x08007fcf
 8007f20:	08007fcf 	.word	0x08007fcf
 8007f24:	08007fcf 	.word	0x08007fcf
 8007f28:	08007f9b 	.word	0x08007f9b
 8007f2c:	08007fcf 	.word	0x08007fcf
 8007f30:	08007fcf 	.word	0x08007fcf
 8007f34:	08007fcf 	.word	0x08007fcf
 8007f38:	08007fcf 	.word	0x08007fcf
 8007f3c:	08007fcf 	.word	0x08007fcf
 8007f40:	08007fcf 	.word	0x08007fcf
 8007f44:	08007fcf 	.word	0x08007fcf
 8007f48:	08007fcf 	.word	0x08007fcf
 8007f4c:	08007fcf 	.word	0x08007fcf
 8007f50:	08007fcf 	.word	0x08007fcf
 8007f54:	08007fcf 	.word	0x08007fcf
 8007f58:	08007fcf 	.word	0x08007fcf
 8007f5c:	08007fcf 	.word	0x08007fcf
 8007f60:	08007fcf 	.word	0x08007fcf
 8007f64:	08007fcf 	.word	0x08007fcf
 8007f68:	08007fc1 	.word	0x08007fc1
 8007f6c:	2b40      	cmp	r3, #64	@ 0x40
 8007f6e:	d02a      	beq.n	8007fc6 <UART_SetConfig+0x8aa>
 8007f70:	e02d      	b.n	8007fce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f72:	f7fc fdcb 	bl	8004b0c <HAL_RCCEx_GetD3PCLK1Freq>
 8007f76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f78:	e02f      	b.n	8007fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fc fdda 	bl	8004b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f88:	e027      	b.n	8007fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f8a:	f107 0318 	add.w	r3, r7, #24
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fc ff26 	bl	8004de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f98:	e01f      	b.n	8007fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f9a:	4b21      	ldr	r3, [pc, #132]	@ (8008020 <UART_SetConfig+0x904>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d009      	beq.n	8007fba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8008020 <UART_SetConfig+0x904>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	08db      	lsrs	r3, r3, #3
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008028 <UART_SetConfig+0x90c>)
 8007fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fb8:	e00f      	b.n	8007fda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007fba:	4b1b      	ldr	r3, [pc, #108]	@ (8008028 <UART_SetConfig+0x90c>)
 8007fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fbe:	e00c      	b.n	8007fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800802c <UART_SetConfig+0x910>)
 8007fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc4:	e009      	b.n	8007fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fcc:	e005      	b.n	8007fda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007fd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 81ee 	beq.w	80083be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe6:	4a12      	ldr	r2, [pc, #72]	@ (8008030 <UART_SetConfig+0x914>)
 8007fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fec:	461a      	mov	r2, r3
 8007fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ff4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	4413      	add	r3, r2
 8008000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008002:	429a      	cmp	r2, r3
 8008004:	d305      	bcc.n	8008012 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800800c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800800e:	429a      	cmp	r2, r3
 8008010:	d910      	bls.n	8008034 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008018:	e1d1      	b.n	80083be <UART_SetConfig+0xca2>
 800801a:	bf00      	nop
 800801c:	40011c00 	.word	0x40011c00
 8008020:	58024400 	.word	0x58024400
 8008024:	58000c00 	.word	0x58000c00
 8008028:	03d09000 	.word	0x03d09000
 800802c:	003d0900 	.word	0x003d0900
 8008030:	08008abc 	.word	0x08008abc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008036:	2200      	movs	r2, #0
 8008038:	60bb      	str	r3, [r7, #8]
 800803a:	60fa      	str	r2, [r7, #12]
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008040:	4ac0      	ldr	r2, [pc, #768]	@ (8008344 <UART_SetConfig+0xc28>)
 8008042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008046:	b29b      	uxth	r3, r3
 8008048:	2200      	movs	r2, #0
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	607a      	str	r2, [r7, #4]
 800804e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008056:	f7f8 f94b 	bl	80002f0 <__aeabi_uldivmod>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4610      	mov	r0, r2
 8008060:	4619      	mov	r1, r3
 8008062:	f04f 0200 	mov.w	r2, #0
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	020b      	lsls	r3, r1, #8
 800806c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008070:	0202      	lsls	r2, r0, #8
 8008072:	6979      	ldr	r1, [r7, #20]
 8008074:	6849      	ldr	r1, [r1, #4]
 8008076:	0849      	lsrs	r1, r1, #1
 8008078:	2000      	movs	r0, #0
 800807a:	460c      	mov	r4, r1
 800807c:	4605      	mov	r5, r0
 800807e:	eb12 0804 	adds.w	r8, r2, r4
 8008082:	eb43 0905 	adc.w	r9, r3, r5
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	469a      	mov	sl, r3
 800808e:	4693      	mov	fp, r2
 8008090:	4652      	mov	r2, sl
 8008092:	465b      	mov	r3, fp
 8008094:	4640      	mov	r0, r8
 8008096:	4649      	mov	r1, r9
 8008098:	f7f8 f92a 	bl	80002f0 <__aeabi_uldivmod>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	4613      	mov	r3, r2
 80080a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080aa:	d308      	bcc.n	80080be <UART_SetConfig+0x9a2>
 80080ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080b2:	d204      	bcs.n	80080be <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080ba:	60da      	str	r2, [r3, #12]
 80080bc:	e17f      	b.n	80083be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80080c4:	e17b      	b.n	80083be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080ce:	f040 80bd 	bne.w	800824c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80080d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	dc48      	bgt.n	800816c <UART_SetConfig+0xa50>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	db7b      	blt.n	80081d6 <UART_SetConfig+0xaba>
 80080de:	2b20      	cmp	r3, #32
 80080e0:	d879      	bhi.n	80081d6 <UART_SetConfig+0xaba>
 80080e2:	a201      	add	r2, pc, #4	@ (adr r2, 80080e8 <UART_SetConfig+0x9cc>)
 80080e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e8:	08008173 	.word	0x08008173
 80080ec:	0800817b 	.word	0x0800817b
 80080f0:	080081d7 	.word	0x080081d7
 80080f4:	080081d7 	.word	0x080081d7
 80080f8:	08008183 	.word	0x08008183
 80080fc:	080081d7 	.word	0x080081d7
 8008100:	080081d7 	.word	0x080081d7
 8008104:	080081d7 	.word	0x080081d7
 8008108:	08008193 	.word	0x08008193
 800810c:	080081d7 	.word	0x080081d7
 8008110:	080081d7 	.word	0x080081d7
 8008114:	080081d7 	.word	0x080081d7
 8008118:	080081d7 	.word	0x080081d7
 800811c:	080081d7 	.word	0x080081d7
 8008120:	080081d7 	.word	0x080081d7
 8008124:	080081d7 	.word	0x080081d7
 8008128:	080081a3 	.word	0x080081a3
 800812c:	080081d7 	.word	0x080081d7
 8008130:	080081d7 	.word	0x080081d7
 8008134:	080081d7 	.word	0x080081d7
 8008138:	080081d7 	.word	0x080081d7
 800813c:	080081d7 	.word	0x080081d7
 8008140:	080081d7 	.word	0x080081d7
 8008144:	080081d7 	.word	0x080081d7
 8008148:	080081d7 	.word	0x080081d7
 800814c:	080081d7 	.word	0x080081d7
 8008150:	080081d7 	.word	0x080081d7
 8008154:	080081d7 	.word	0x080081d7
 8008158:	080081d7 	.word	0x080081d7
 800815c:	080081d7 	.word	0x080081d7
 8008160:	080081d7 	.word	0x080081d7
 8008164:	080081d7 	.word	0x080081d7
 8008168:	080081c9 	.word	0x080081c9
 800816c:	2b40      	cmp	r3, #64	@ 0x40
 800816e:	d02e      	beq.n	80081ce <UART_SetConfig+0xab2>
 8008170:	e031      	b.n	80081d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008172:	f7fb fae1 	bl	8003738 <HAL_RCC_GetPCLK1Freq>
 8008176:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008178:	e033      	b.n	80081e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800817a:	f7fb faf3 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 800817e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008180:	e02f      	b.n	80081e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008186:	4618      	mov	r0, r3
 8008188:	f7fc fcd6 	bl	8004b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800818c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008190:	e027      	b.n	80081e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008192:	f107 0318 	add.w	r3, r7, #24
 8008196:	4618      	mov	r0, r3
 8008198:	f7fc fe22 	bl	8004de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a0:	e01f      	b.n	80081e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081a2:	4b69      	ldr	r3, [pc, #420]	@ (8008348 <UART_SetConfig+0xc2c>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d009      	beq.n	80081c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081ae:	4b66      	ldr	r3, [pc, #408]	@ (8008348 <UART_SetConfig+0xc2c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	08db      	lsrs	r3, r3, #3
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	4a64      	ldr	r2, [pc, #400]	@ (800834c <UART_SetConfig+0xc30>)
 80081ba:	fa22 f303 	lsr.w	r3, r2, r3
 80081be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081c0:	e00f      	b.n	80081e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80081c2:	4b62      	ldr	r3, [pc, #392]	@ (800834c <UART_SetConfig+0xc30>)
 80081c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c6:	e00c      	b.n	80081e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081c8:	4b61      	ldr	r3, [pc, #388]	@ (8008350 <UART_SetConfig+0xc34>)
 80081ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081cc:	e009      	b.n	80081e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081d4:	e005      	b.n	80081e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80081e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80ea 	beq.w	80083be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ee:	4a55      	ldr	r2, [pc, #340]	@ (8008344 <UART_SetConfig+0xc28>)
 80081f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081f4:	461a      	mov	r2, r3
 80081f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081fc:	005a      	lsls	r2, r3, #1
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	085b      	lsrs	r3, r3, #1
 8008204:	441a      	add	r2, r3
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	fbb2 f3f3 	udiv	r3, r2, r3
 800820e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008212:	2b0f      	cmp	r3, #15
 8008214:	d916      	bls.n	8008244 <UART_SetConfig+0xb28>
 8008216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800821c:	d212      	bcs.n	8008244 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008220:	b29b      	uxth	r3, r3
 8008222:	f023 030f 	bic.w	r3, r3, #15
 8008226:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822a:	085b      	lsrs	r3, r3, #1
 800822c:	b29b      	uxth	r3, r3
 800822e:	f003 0307 	and.w	r3, r3, #7
 8008232:	b29a      	uxth	r2, r3
 8008234:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008236:	4313      	orrs	r3, r2
 8008238:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	e0bc      	b.n	80083be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800824a:	e0b8      	b.n	80083be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800824c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008250:	2b20      	cmp	r3, #32
 8008252:	dc4b      	bgt.n	80082ec <UART_SetConfig+0xbd0>
 8008254:	2b00      	cmp	r3, #0
 8008256:	f2c0 8087 	blt.w	8008368 <UART_SetConfig+0xc4c>
 800825a:	2b20      	cmp	r3, #32
 800825c:	f200 8084 	bhi.w	8008368 <UART_SetConfig+0xc4c>
 8008260:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <UART_SetConfig+0xb4c>)
 8008262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008266:	bf00      	nop
 8008268:	080082f3 	.word	0x080082f3
 800826c:	080082fb 	.word	0x080082fb
 8008270:	08008369 	.word	0x08008369
 8008274:	08008369 	.word	0x08008369
 8008278:	08008303 	.word	0x08008303
 800827c:	08008369 	.word	0x08008369
 8008280:	08008369 	.word	0x08008369
 8008284:	08008369 	.word	0x08008369
 8008288:	08008313 	.word	0x08008313
 800828c:	08008369 	.word	0x08008369
 8008290:	08008369 	.word	0x08008369
 8008294:	08008369 	.word	0x08008369
 8008298:	08008369 	.word	0x08008369
 800829c:	08008369 	.word	0x08008369
 80082a0:	08008369 	.word	0x08008369
 80082a4:	08008369 	.word	0x08008369
 80082a8:	08008323 	.word	0x08008323
 80082ac:	08008369 	.word	0x08008369
 80082b0:	08008369 	.word	0x08008369
 80082b4:	08008369 	.word	0x08008369
 80082b8:	08008369 	.word	0x08008369
 80082bc:	08008369 	.word	0x08008369
 80082c0:	08008369 	.word	0x08008369
 80082c4:	08008369 	.word	0x08008369
 80082c8:	08008369 	.word	0x08008369
 80082cc:	08008369 	.word	0x08008369
 80082d0:	08008369 	.word	0x08008369
 80082d4:	08008369 	.word	0x08008369
 80082d8:	08008369 	.word	0x08008369
 80082dc:	08008369 	.word	0x08008369
 80082e0:	08008369 	.word	0x08008369
 80082e4:	08008369 	.word	0x08008369
 80082e8:	0800835b 	.word	0x0800835b
 80082ec:	2b40      	cmp	r3, #64	@ 0x40
 80082ee:	d037      	beq.n	8008360 <UART_SetConfig+0xc44>
 80082f0:	e03a      	b.n	8008368 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082f2:	f7fb fa21 	bl	8003738 <HAL_RCC_GetPCLK1Freq>
 80082f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082f8:	e03c      	b.n	8008374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082fa:	f7fb fa33 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 80082fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008300:	e038      	b.n	8008374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008306:	4618      	mov	r0, r3
 8008308:	f7fc fc16 	bl	8004b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800830c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008310:	e030      	b.n	8008374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008312:	f107 0318 	add.w	r3, r7, #24
 8008316:	4618      	mov	r0, r3
 8008318:	f7fc fd62 	bl	8004de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008320:	e028      	b.n	8008374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008322:	4b09      	ldr	r3, [pc, #36]	@ (8008348 <UART_SetConfig+0xc2c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d012      	beq.n	8008354 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800832e:	4b06      	ldr	r3, [pc, #24]	@ (8008348 <UART_SetConfig+0xc2c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	08db      	lsrs	r3, r3, #3
 8008334:	f003 0303 	and.w	r3, r3, #3
 8008338:	4a04      	ldr	r2, [pc, #16]	@ (800834c <UART_SetConfig+0xc30>)
 800833a:	fa22 f303 	lsr.w	r3, r2, r3
 800833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008340:	e018      	b.n	8008374 <UART_SetConfig+0xc58>
 8008342:	bf00      	nop
 8008344:	08008abc 	.word	0x08008abc
 8008348:	58024400 	.word	0x58024400
 800834c:	03d09000 	.word	0x03d09000
 8008350:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008354:	4b24      	ldr	r3, [pc, #144]	@ (80083e8 <UART_SetConfig+0xccc>)
 8008356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008358:	e00c      	b.n	8008374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800835a:	4b24      	ldr	r3, [pc, #144]	@ (80083ec <UART_SetConfig+0xcd0>)
 800835c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800835e:	e009      	b.n	8008374 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008360:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008366:	e005      	b.n	8008374 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008372:	bf00      	nop
    }

    if (pclk != 0U)
 8008374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d021      	beq.n	80083be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837e:	4a1c      	ldr	r2, [pc, #112]	@ (80083f0 <UART_SetConfig+0xcd4>)
 8008380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008384:	461a      	mov	r2, r3
 8008386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008388:	fbb3 f2f2 	udiv	r2, r3, r2
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	085b      	lsrs	r3, r3, #1
 8008392:	441a      	add	r2, r3
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	fbb2 f3f3 	udiv	r3, r2, r3
 800839c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800839e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a0:	2b0f      	cmp	r3, #15
 80083a2:	d909      	bls.n	80083b8 <UART_SetConfig+0xc9c>
 80083a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083aa:	d205      	bcs.n	80083b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60da      	str	r2, [r3, #12]
 80083b6:	e002      	b.n	80083be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2200      	movs	r2, #0
 80083d2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2200      	movs	r2, #0
 80083d8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80083da:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3748      	adds	r7, #72	@ 0x48
 80083e2:	46bd      	mov	sp, r7
 80083e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083e8:	03d09000 	.word	0x03d09000
 80083ec:	003d0900 	.word	0x003d0900
 80083f0:	08008abc 	.word	0x08008abc

080083f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008400:	f003 0308 	and.w	r3, r3, #8
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00a      	beq.n	800841e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008466:	f003 0304 	and.w	r3, r3, #4
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00a      	beq.n	8008484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00a      	beq.n	80084a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d01a      	beq.n	800850a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084f2:	d10a      	bne.n	800850a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	605a      	str	r2, [r3, #4]
  }
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b098      	sub	sp, #96	@ 0x60
 800853c:	af02      	add	r7, sp, #8
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008548:	f7f9 fcf0 	bl	8001f2c <HAL_GetTick>
 800854c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0308 	and.w	r3, r3, #8
 8008558:	2b08      	cmp	r3, #8
 800855a:	d12f      	bne.n	80085bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800855c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008564:	2200      	movs	r2, #0
 8008566:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f88e 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d022      	beq.n	80085bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800858a:	653b      	str	r3, [r7, #80]	@ 0x50
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008594:	647b      	str	r3, [r7, #68]	@ 0x44
 8008596:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800859a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e6      	bne.n	8008576 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e063      	b.n	8008684 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d149      	bne.n	800865e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085d2:	2200      	movs	r2, #0
 80085d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f857 	bl	800868c <UART_WaitOnFlagUntilTimeout>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d03c      	beq.n	800865e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	623b      	str	r3, [r7, #32]
   return(result);
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008602:	633b      	str	r3, [r7, #48]	@ 0x30
 8008604:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e6      	bne.n	80085e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3308      	adds	r3, #8
 800861c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	60fb      	str	r3, [r7, #12]
   return(result);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f023 0301 	bic.w	r3, r3, #1
 800862c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3308      	adds	r3, #8
 8008634:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008636:	61fa      	str	r2, [r7, #28]
 8008638:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	69b9      	ldr	r1, [r7, #24]
 800863c:	69fa      	ldr	r2, [r7, #28]
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	617b      	str	r3, [r7, #20]
   return(result);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e5      	bne.n	8008616 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2220      	movs	r2, #32
 800864e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e012      	b.n	8008684 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2220      	movs	r2, #32
 800866a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3758      	adds	r7, #88	@ 0x58
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	4613      	mov	r3, r2
 800869a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800869c:	e04f      	b.n	800873e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086a4:	d04b      	beq.n	800873e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086a6:	f7f9 fc41 	bl	8001f2c <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d302      	bcc.n	80086bc <UART_WaitOnFlagUntilTimeout+0x30>
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e04e      	b.n	800875e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d037      	beq.n	800873e <UART_WaitOnFlagUntilTimeout+0xb2>
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b80      	cmp	r3, #128	@ 0x80
 80086d2:	d034      	beq.n	800873e <UART_WaitOnFlagUntilTimeout+0xb2>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b40      	cmp	r3, #64	@ 0x40
 80086d8:	d031      	beq.n	800873e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69db      	ldr	r3, [r3, #28]
 80086e0:	f003 0308 	and.w	r3, r3, #8
 80086e4:	2b08      	cmp	r3, #8
 80086e6:	d110      	bne.n	800870a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2208      	movs	r2, #8
 80086ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 f839 	bl	8008768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2208      	movs	r2, #8
 80086fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e029      	b.n	800875e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008718:	d111      	bne.n	800873e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 f81f 	bl	8008768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2220      	movs	r2, #32
 800872e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e00f      	b.n	800875e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	69da      	ldr	r2, [r3, #28]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	4013      	ands	r3, r2
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	429a      	cmp	r2, r3
 800874c:	bf0c      	ite	eq
 800874e:	2301      	moveq	r3, #1
 8008750:	2300      	movne	r3, #0
 8008752:	b2db      	uxtb	r3, r3
 8008754:	461a      	mov	r2, r3
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	429a      	cmp	r2, r3
 800875a:	d0a0      	beq.n	800869e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008768:	b480      	push	{r7}
 800876a:	b095      	sub	sp, #84	@ 0x54
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008784:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800878e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008790:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008794:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e6      	bne.n	8008770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3308      	adds	r3, #8
 80087a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	4b1e      	ldr	r3, [pc, #120]	@ (8008830 <UART_EndRxTransfer+0xc8>)
 80087b6:	4013      	ands	r3, r2
 80087b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3308      	adds	r3, #8
 80087c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e5      	bne.n	80087a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d118      	bne.n	8008810 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f023 0310 	bic.w	r3, r3, #16
 80087f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087fc:	61bb      	str	r3, [r7, #24]
 80087fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	613b      	str	r3, [r7, #16]
   return(result);
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e6      	bne.n	80087de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008824:	bf00      	nop
 8008826:	3754      	adds	r7, #84	@ 0x54
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	effffffe 	.word	0xeffffffe

08008834 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008842:	2b01      	cmp	r3, #1
 8008844:	d101      	bne.n	800884a <HAL_UARTEx_DisableFifoMode+0x16>
 8008846:	2302      	movs	r3, #2
 8008848:	e027      	b.n	800889a <HAL_UARTEx_DisableFifoMode+0x66>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2224      	movs	r2, #36	@ 0x24
 8008856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0201 	bic.w	r2, r2, #1
 8008870:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008878:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2220      	movs	r2, #32
 800888c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e02d      	b.n	800891a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2224      	movs	r2, #36	@ 0x24
 80088ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f022 0201 	bic.w	r2, r2, #1
 80088e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f850 	bl	80089a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2220      	movs	r2, #32
 800890c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008936:	2302      	movs	r3, #2
 8008938:	e02d      	b.n	8008996 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2224      	movs	r2, #36	@ 0x24
 8008946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0201 	bic.w	r2, r2, #1
 8008960:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f812 	bl	80089a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d108      	bne.n	80089c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089c0:	e031      	b.n	8008a26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089c2:	2310      	movs	r3, #16
 80089c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089c6:	2310      	movs	r3, #16
 80089c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	0e5b      	lsrs	r3, r3, #25
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	0f5b      	lsrs	r3, r3, #29
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 0307 	and.w	r3, r3, #7
 80089e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	7b3a      	ldrb	r2, [r7, #12]
 80089ee:	4911      	ldr	r1, [pc, #68]	@ (8008a34 <UARTEx_SetNbDataToProcess+0x94>)
 80089f0:	5c8a      	ldrb	r2, [r1, r2]
 80089f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089f6:	7b3a      	ldrb	r2, [r7, #12]
 80089f8:	490f      	ldr	r1, [pc, #60]	@ (8008a38 <UARTEx_SetNbDataToProcess+0x98>)
 80089fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	7b7a      	ldrb	r2, [r7, #13]
 8008a0c:	4909      	ldr	r1, [pc, #36]	@ (8008a34 <UARTEx_SetNbDataToProcess+0x94>)
 8008a0e:	5c8a      	ldrb	r2, [r1, r2]
 8008a10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a14:	7b7a      	ldrb	r2, [r7, #13]
 8008a16:	4908      	ldr	r1, [pc, #32]	@ (8008a38 <UARTEx_SetNbDataToProcess+0x98>)
 8008a18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a26:	bf00      	nop
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	08008ad4 	.word	0x08008ad4
 8008a38:	08008adc 	.word	0x08008adc

08008a3c <memset>:
 8008a3c:	4402      	add	r2, r0
 8008a3e:	4603      	mov	r3, r0
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d100      	bne.n	8008a46 <memset+0xa>
 8008a44:	4770      	bx	lr
 8008a46:	f803 1b01 	strb.w	r1, [r3], #1
 8008a4a:	e7f9      	b.n	8008a40 <memset+0x4>

08008a4c <__libc_init_array>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008a84 <__libc_init_array+0x38>)
 8008a50:	4c0d      	ldr	r4, [pc, #52]	@ (8008a88 <__libc_init_array+0x3c>)
 8008a52:	1b64      	subs	r4, r4, r5
 8008a54:	10a4      	asrs	r4, r4, #2
 8008a56:	2600      	movs	r6, #0
 8008a58:	42a6      	cmp	r6, r4
 8008a5a:	d109      	bne.n	8008a70 <__libc_init_array+0x24>
 8008a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008a8c <__libc_init_array+0x40>)
 8008a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008a90 <__libc_init_array+0x44>)
 8008a60:	f000 f818 	bl	8008a94 <_init>
 8008a64:	1b64      	subs	r4, r4, r5
 8008a66:	10a4      	asrs	r4, r4, #2
 8008a68:	2600      	movs	r6, #0
 8008a6a:	42a6      	cmp	r6, r4
 8008a6c:	d105      	bne.n	8008a7a <__libc_init_array+0x2e>
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a74:	4798      	blx	r3
 8008a76:	3601      	adds	r6, #1
 8008a78:	e7ee      	b.n	8008a58 <__libc_init_array+0xc>
 8008a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7e:	4798      	blx	r3
 8008a80:	3601      	adds	r6, #1
 8008a82:	e7f2      	b.n	8008a6a <__libc_init_array+0x1e>
 8008a84:	08008aec 	.word	0x08008aec
 8008a88:	08008aec 	.word	0x08008aec
 8008a8c:	08008aec 	.word	0x08008aec
 8008a90:	08008af0 	.word	0x08008af0

08008a94 <_init>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	bf00      	nop
 8008a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9a:	bc08      	pop	{r3}
 8008a9c:	469e      	mov	lr, r3
 8008a9e:	4770      	bx	lr

08008aa0 <_fini>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	bf00      	nop
 8008aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	469e      	mov	lr, r3
 8008aaa:	4770      	bx	lr
