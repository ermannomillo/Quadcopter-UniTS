
Quadcopter_UniTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008464  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008710  08008710  00009710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008748  08008748  00009748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008750  08008750  00009750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008754  08008754  00009754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08008758  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000280  24000010  08008768  0000a010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000290  08008768  0000a290  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001558f  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025f7  00000000  00000000  0001f5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001078  00000000  00000000  00021bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ce9  00000000  00000000  00022c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000302c6  00000000  00000000  00023929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000147ab  00000000  00000000  00053bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013ee9d  00000000  00000000  0006839a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a7237  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045d0  00000000  00000000  001a727c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001ab84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080086f8 	.word	0x080086f8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080086f8 	.word	0x080086f8

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	rc_ref_euler[0] =  0;
 80005e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <main+0xbc>)
 80005e2:	f04f 0200 	mov.w	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
	rc_ref_euler[1] =  0;
 80005e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <main+0xbc>)
 80005ea:	f04f 0200 	mov.w	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
	rc_ref_euler[3] =  0;
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <main+0xbc>)
 80005f2:	f04f 0200 	mov.w	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f001 fb78 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f85a 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 fc54 	bl	8000eac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000604:	f000 fbfe 	bl	8000e04 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000608:	f000 fc48 	bl	8000e9c <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 800060c:	f000 f8ca 	bl	80007a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000610:	f000 f976 	bl	8000900 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000614:	f000 fa14 	bl	8000a40 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000618:	f000 fab2 	bl	8000b80 <MX_TIM5_Init>
  MX_TIM15_Init();
 800061c:	f000 fb50 	bl	8000cc0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000620:	2100      	movs	r1, #0
 8000622:	481e      	ldr	r0, [pc, #120]	@ (800069c <main+0xc0>)
 8000624:	f004 fd7e 	bl	8005124 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000628:	2104      	movs	r1, #4
 800062a:	481c      	ldr	r0, [pc, #112]	@ (800069c <main+0xc0>)
 800062c:	f004 fd7a 	bl	8005124 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000630:	2108      	movs	r1, #8
 8000632:	481a      	ldr	r0, [pc, #104]	@ (800069c <main+0xc0>)
 8000634:	f004 fd76 	bl	8005124 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000638:	210c      	movs	r1, #12
 800063a:	4818      	ldr	r0, [pc, #96]	@ (800069c <main+0xc0>)
 800063c:	f004 fd72 	bl	8005124 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int count = 0;


  set_motor_pwm_zero( rc_comm_temp);
 8000640:	4817      	ldr	r0, [pc, #92]	@ (80006a0 <main+0xc4>)
 8000642:	f000 ff85 	bl	8001550 <set_motor_pwm_zero>
  set_motor_pwm(rc_comm_temp);
 8000646:	4816      	ldr	r0, [pc, #88]	@ (80006a0 <main+0xc4>)
 8000648:	f000 fec0 	bl	80013cc <set_motor_pwm>
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
		  }
	*/


		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 800064c:	2104      	movs	r1, #4
 800064e:	4815      	ldr	r0, [pc, #84]	@ (80006a4 <main+0xc8>)
 8000650:	f004 fed8 	bl	8005404 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000654:	2100      	movs	r1, #0
 8000656:	4813      	ldr	r0, [pc, #76]	@ (80006a4 <main+0xc8>)
 8000658:	f005 f84a 	bl	80056f0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 800065c:	2104      	movs	r1, #4
 800065e:	4812      	ldr	r0, [pc, #72]	@ (80006a8 <main+0xcc>)
 8000660:	f004 fed0 	bl	8005404 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000664:	2100      	movs	r1, #0
 8000666:	4810      	ldr	r0, [pc, #64]	@ (80006a8 <main+0xcc>)
 8000668:	f005 f842 	bl	80056f0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 800066c:	2104      	movs	r1, #4
 800066e:	480f      	ldr	r0, [pc, #60]	@ (80006ac <main+0xd0>)
 8000670:	f004 fec8 	bl	8005404 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000674:	2100      	movs	r1, #0
 8000676:	480d      	ldr	r0, [pc, #52]	@ (80006ac <main+0xd0>)
 8000678:	f005 f83a 	bl	80056f0 <HAL_TIM_IC_Start_IT>

		  HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 800067c:	2104      	movs	r1, #4
 800067e:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <main+0xd4>)
 8000680:	f004 fec0 	bl	8005404 <HAL_TIM_IC_Start>
		  HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8000684:	2100      	movs	r1, #0
 8000686:	480a      	ldr	r0, [pc, #40]	@ (80006b0 <main+0xd4>)
 8000688:	f005 f832 	bl	80056f0 <HAL_TIM_IC_Start_IT>

		  get_target_euler(rc_ref_euler, rc_comm_temp);
 800068c:	4904      	ldr	r1, [pc, #16]	@ (80006a0 <main+0xc4>)
 800068e:	4802      	ldr	r0, [pc, #8]	@ (8000698 <main+0xbc>)
 8000690:	f000 ff7c 	bl	800158c <get_target_euler>
		  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000694:	bf00      	nop
 8000696:	e7d9      	b.n	800064c <main+0x70>
 8000698:	2400024c 	.word	0x2400024c
 800069c:	2400002c 	.word	0x2400002c
 80006a0:	2400023c 	.word	0x2400023c
 80006a4:	24000078 	.word	0x24000078
 80006a8:	240000c4 	.word	0x240000c4
 80006ac:	24000110 	.word	0x24000110
 80006b0:	2400015c 	.word	0x2400015c

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09c      	sub	sp, #112	@ 0x70
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006be:	224c      	movs	r2, #76	@ 0x4c
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f007 ffec 	bl	80086a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2220      	movs	r2, #32
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f007 ffe6 	bl	80086a0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006d4:	4b31      	ldr	r3, [pc, #196]	@ (800079c <SystemClock_Config+0xe8>)
 80006d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006de:	2004      	movs	r0, #4
 80006e0:	f001 fe70 	bl	80023c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b2d      	ldr	r3, [pc, #180]	@ (80007a0 <SystemClock_Config+0xec>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a2c      	ldr	r2, [pc, #176]	@ (80007a0 <SystemClock_Config+0xec>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <SystemClock_Config+0xec>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000700:	bf00      	nop
 8000702:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <SystemClock_Config+0xec>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800070a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800070e:	d1f8      	bne.n	8000702 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000710:	2321      	movs	r3, #33	@ 0x21
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000718:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	2302      	movs	r3, #2
 8000724:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 800072a:	2325      	movs	r3, #37	@ 0x25
 800072c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000732:	2304      	movs	r3, #4
 8000734:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800073a:	230c      	movs	r3, #12
 800073c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800073e:	2300      	movs	r3, #0
 8000740:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fe93 	bl	8002478 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000758:	f000 fe32 	bl	80013c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	233f      	movs	r3, #63	@ 0x3f
 800075e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2303      	movs	r3, #3
 8000762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800076c:	2340      	movs	r3, #64	@ 0x40
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000770:	2340      	movs	r3, #64	@ 0x40
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000774:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000778:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800077a:	2340      	movs	r3, #64	@ 0x40
 800077c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2103      	movs	r1, #3
 8000782:	4618      	mov	r0, r3
 8000784:	f002 faaa 	bl	8002cdc <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800078e:	f000 fe17 	bl	80013c0 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3770      	adds	r7, #112	@ 0x70
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	58024400 	.word	0x58024400
 80007a0:	58024800 	.word	0x58024800

080007a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09c      	sub	sp, #112	@ 0x70
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2234      	movs	r2, #52	@ 0x34
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 ff5e 	bl	80086a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e4:	4b44      	ldr	r3, [pc, #272]	@ (80008f8 <MX_TIM1_Init+0x154>)
 80007e6:	4a45      	ldr	r2, [pc, #276]	@ (80008fc <MX_TIM1_Init+0x158>)
 80007e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 639;
 80007ea:	4b43      	ldr	r3, [pc, #268]	@ (80008f8 <MX_TIM1_Init+0x154>)
 80007ec:	f240 227f 	movw	r2, #639	@ 0x27f
 80007f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b41      	ldr	r3, [pc, #260]	@ (80008f8 <MX_TIM1_Init+0x154>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80007f8:	4b3f      	ldr	r3, [pc, #252]	@ (80008f8 <MX_TIM1_Init+0x154>)
 80007fa:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80007fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b3d      	ldr	r3, [pc, #244]	@ (80008f8 <MX_TIM1_Init+0x154>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000806:	4b3c      	ldr	r3, [pc, #240]	@ (80008f8 <MX_TIM1_Init+0x154>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b3a      	ldr	r3, [pc, #232]	@ (80008f8 <MX_TIM1_Init+0x154>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000812:	4839      	ldr	r0, [pc, #228]	@ (80008f8 <MX_TIM1_Init+0x154>)
 8000814:	f004 fbce 	bl	8004fb4 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800081e:	f000 fdcf 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000828:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800082c:	4619      	mov	r1, r3
 800082e:	4832      	ldr	r0, [pc, #200]	@ (80008f8 <MX_TIM1_Init+0x154>)
 8000830:	f005 fc24 	bl	800607c <HAL_TIM_ConfigClockSource>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800083a:	f000 fdc1 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800083e:	482e      	ldr	r0, [pc, #184]	@ (80008f8 <MX_TIM1_Init+0x154>)
 8000840:	f004 fc0f 	bl	8005062 <HAL_TIM_PWM_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800084a:	f000 fdb9 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800085e:	4619      	mov	r1, r3
 8000860:	4825      	ldr	r0, [pc, #148]	@ (80008f8 <MX_TIM1_Init+0x154>)
 8000862:	f006 fc05 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800086c:	f000 fda8 	bl	80013c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000870:	2360      	movs	r3, #96	@ 0x60
 8000872:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800087c:	2300      	movs	r3, #0
 800087e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	4818      	ldr	r0, [pc, #96]	@ (80008f8 <MX_TIM1_Init+0x154>)
 8000896:	f005 fadd 	bl	8005e54 <HAL_TIM_PWM_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80008a0:	f000 fd8e 	bl	80013c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	@ (80008f8 <MX_TIM1_Init+0x154>)
 80008da:	f006 fc57 	bl	800718c <HAL_TIMEx_ConfigBreakDeadTime>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008e4:	f000 fd6c 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008e8:	4803      	ldr	r0, [pc, #12]	@ (80008f8 <MX_TIM1_Init+0x154>)
 80008ea:	f001 f85f 	bl	80019ac <HAL_TIM_MspPostInit>

}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	@ 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2400002c 	.word	0x2400002c
 80008fc:	40010000 	.word	0x40010000

08000900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b090      	sub	sp, #64	@ 0x40
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800093c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a38 <MX_TIM3_Init+0x138>)
 800093e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a3c <MX_TIM3_Init+0x13c>)
 8000940:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 639;
 8000942:	4b3d      	ldr	r3, [pc, #244]	@ (8000a38 <MX_TIM3_Init+0x138>)
 8000944:	f240 227f 	movw	r2, #639	@ 0x27f
 8000948:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a38 <MX_TIM3_Init+0x138>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000950:	4b39      	ldr	r3, [pc, #228]	@ (8000a38 <MX_TIM3_Init+0x138>)
 8000952:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000956:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000958:	4b37      	ldr	r3, [pc, #220]	@ (8000a38 <MX_TIM3_Init+0x138>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b36      	ldr	r3, [pc, #216]	@ (8000a38 <MX_TIM3_Init+0x138>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000964:	4834      	ldr	r0, [pc, #208]	@ (8000a38 <MX_TIM3_Init+0x138>)
 8000966:	f004 fb25 	bl	8004fb4 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000970:	f000 fd26 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000974:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000978:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800097a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800097e:	4619      	mov	r1, r3
 8000980:	482d      	ldr	r0, [pc, #180]	@ (8000a38 <MX_TIM3_Init+0x138>)
 8000982:	f005 fb7b 	bl	800607c <HAL_TIM_ConfigClockSource>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800098c:	f000 fd18 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000990:	4829      	ldr	r0, [pc, #164]	@ (8000a38 <MX_TIM3_Init+0x138>)
 8000992:	f004 fcd5 	bl	8005340 <HAL_TIM_IC_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800099c:	f000 fd10 	bl	80013c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80009a0:	2304      	movs	r3, #4
 80009a2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80009a4:	2350      	movs	r3, #80	@ 0x50
 80009a6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	481f      	ldr	r0, [pc, #124]	@ (8000a38 <MX_TIM3_Init+0x138>)
 80009bc:	f005 fc56 	bl	800626c <HAL_TIM_SlaveConfigSynchro>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80009c6:	f000 fcfb 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	2200      	movs	r2, #0
 80009e0:	4619      	mov	r1, r3
 80009e2:	4815      	ldr	r0, [pc, #84]	@ (8000a38 <MX_TIM3_Init+0x138>)
 80009e4:	f005 f999 	bl	8005d1a <HAL_TIM_IC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80009ee:	f000 fce7 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009f2:	2302      	movs	r3, #2
 80009f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009f6:	2302      	movs	r3, #2
 80009f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	2204      	movs	r2, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <MX_TIM3_Init+0x138>)
 8000a04:	f005 f989 	bl	8005d1a <HAL_TIM_IC_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8000a0e:	f000 fcd7 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	@ (8000a38 <MX_TIM3_Init+0x138>)
 8000a20:	f006 fb26 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0x12e>
  {
    Error_Handler();
 8000a2a:	f000 fcc9 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3740      	adds	r7, #64	@ 0x40
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	24000078 	.word	0x24000078
 8000a3c:	40000400 	.word	0x40000400

08000a40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b090      	sub	sp, #64	@ 0x40
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b7c <MX_TIM4_Init+0x13c>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8000a82:	4b3d      	ldr	r3, [pc, #244]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000a84:	f240 227f 	movw	r2, #639	@ 0x27f
 8000a88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a90:	4b39      	ldr	r3, [pc, #228]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000a92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b37      	ldr	r3, [pc, #220]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b36      	ldr	r3, [pc, #216]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000aa4:	4834      	ldr	r0, [pc, #208]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000aa6:	f004 fa85 	bl	8004fb4 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000ab0:	f000 fc86 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482d      	ldr	r0, [pc, #180]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000ac2:	f005 fadb 	bl	800607c <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000acc:	f000 fc78 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000ad0:	4829      	ldr	r0, [pc, #164]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000ad2:	f004 fc35 	bl	8005340 <HAL_TIM_IC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000adc:	f000 fc70 	bl	80013c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ae4:	2350      	movs	r3, #80	@ 0x50
 8000ae6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	481f      	ldr	r0, [pc, #124]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000afc:	f005 fbb6 	bl	800626c <HAL_TIM_SlaveConfigSynchro>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000b06:	f000 fc5b 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4619      	mov	r1, r3
 8000b22:	4815      	ldr	r0, [pc, #84]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000b24:	f005 f8f9 	bl	8005d1a <HAL_TIM_IC_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM4_Init+0xf2>
  {
    Error_Handler();
 8000b2e:	f000 fc47 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b32:	2302      	movs	r3, #2
 8000b34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b36:	2302      	movs	r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2204      	movs	r2, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000b44:	f005 f8e9 	bl	8005d1a <HAL_TIM_IC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM4_Init+0x112>
  {
    Error_Handler();
 8000b4e:	f000 fc37 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <MX_TIM4_Init+0x138>)
 8000b60:	f006 fa86 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM4_Init+0x12e>
  {
    Error_Handler();
 8000b6a:	f000 fc29 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	3740      	adds	r7, #64	@ 0x40
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	240000c4 	.word	0x240000c4
 8000b7c:	40000800 	.word	0x40000800

08000b80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	@ 0x40
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8000cbc <MX_TIM5_Init+0x13c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 639;
 8000bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000bc4:	f240 227f 	movw	r2, #639	@ 0x27f
 8000bc8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b3b      	ldr	r3, [pc, #236]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000bd0:	4b39      	ldr	r3, [pc, #228]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000bd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b37      	ldr	r3, [pc, #220]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b36      	ldr	r3, [pc, #216]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000be4:	4834      	ldr	r0, [pc, #208]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000be6:	f004 f9e5 	bl	8004fb4 <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000bf0:	f000 fbe6 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bfe:	4619      	mov	r1, r3
 8000c00:	482d      	ldr	r0, [pc, #180]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000c02:	f005 fa3b 	bl	800607c <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000c0c:	f000 fbd8 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000c10:	4829      	ldr	r0, [pc, #164]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000c12:	f004 fb95 	bl	8005340 <HAL_TIM_IC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000c1c:	f000 fbd0 	bl	80013c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c20:	2304      	movs	r3, #4
 8000c22:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c24:	2350      	movs	r3, #80	@ 0x50
 8000c26:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481f      	ldr	r0, [pc, #124]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000c3c:	f005 fb16 	bl	800626c <HAL_TIM_SlaveConfigSynchro>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8000c46:	f000 fbbb 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4619      	mov	r1, r3
 8000c62:	4815      	ldr	r0, [pc, #84]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000c64:	f005 f859 	bl	8005d1a <HAL_TIM_IC_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8000c6e:	f000 fba7 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c72:	2302      	movs	r3, #2
 8000c74:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c76:	2302      	movs	r3, #2
 8000c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	2204      	movs	r2, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000c84:	f005 f849 	bl	8005d1a <HAL_TIM_IC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM5_Init+0x112>
  {
    Error_Handler();
 8000c8e:	f000 fb97 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <MX_TIM5_Init+0x138>)
 8000ca0:	f006 f9e6 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM5_Init+0x12e>
  {
    Error_Handler();
 8000caa:	f000 fb89 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	3740      	adds	r7, #64	@ 0x40
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	24000110 	.word	0x24000110
 8000cbc:	40000c00 	.word	0x40000c00

08000cc0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b090      	sub	sp, #64	@ 0x40
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000cfe:	4a40      	ldr	r2, [pc, #256]	@ (8000e00 <MX_TIM15_Init+0x140>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 639;
 8000d02:	4b3e      	ldr	r3, [pc, #248]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000d04:	f240 227f 	movw	r2, #639	@ 0x27f
 8000d08:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000d10:	4b3a      	ldr	r3, [pc, #232]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000d12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d16:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b38      	ldr	r3, [pc, #224]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d1e:	4b37      	ldr	r3, [pc, #220]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b35      	ldr	r3, [pc, #212]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d2a:	4834      	ldr	r0, [pc, #208]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000d2c:	f004 f942 	bl	8004fb4 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 8000d36:	f000 fb43 	bl	80013c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d44:	4619      	mov	r1, r3
 8000d46:	482d      	ldr	r0, [pc, #180]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000d48:	f005 f998 	bl	800607c <HAL_TIM_ConfigClockSource>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 8000d52:	f000 fb35 	bl	80013c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8000d56:	4829      	ldr	r0, [pc, #164]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000d58:	f004 faf2 	bl	8005340 <HAL_TIM_IC_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 8000d62:	f000 fb2d 	bl	80013c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d66:	2304      	movs	r3, #4
 8000d68:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d6a:	2350      	movs	r3, #80	@ 0x50
 8000d6c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	481e      	ldr	r0, [pc, #120]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000d82:	f005 fa73 	bl	800626c <HAL_TIM_SlaveConfigSynchro>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000d8c:	f000 fb18 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d94:	2301      	movs	r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	4619      	mov	r1, r3
 8000da8:	4814      	ldr	r0, [pc, #80]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000daa:	f004 ffb6 	bl	8005d1a <HAL_TIM_IC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8000db4:	f000 fb04 	bl	80013c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000db8:	2302      	movs	r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480c      	ldr	r0, [pc, #48]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000dca:	f004 ffa6 	bl	8005d1a <HAL_TIM_IC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM15_Init+0x118>
  {
    Error_Handler();
 8000dd4:	f000 faf4 	bl	80013c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_TIM15_Init+0x13c>)
 8000de6:	f006 f943 	bl	8007070 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM15_Init+0x134>
  {
    Error_Handler();
 8000df0:	f000 fae6 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3740      	adds	r7, #64	@ 0x40
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2400015c 	.word	0x2400015c
 8000e00:	40014000 	.word	0x40014000

08000e04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e0a:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <MX_USART3_UART_Init+0x94>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e4c:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e4e:	f006 fa47 	bl	80072e0 <HAL_UART_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e58:	f000 fab2 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e60:	f007 fb53 	bl	800850a <HAL_UARTEx_SetTxFifoThreshold>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e6a:	f000 faa9 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e72:	f007 fb88 	bl	8008586 <HAL_UARTEx_SetRxFifoThreshold>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e7c:	f000 faa0 	bl	80013c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <MX_USART3_UART_Init+0x90>)
 8000e82:	f007 fb09 	bl	8008498 <HAL_UARTEx_DisableFifoMode>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e8c:	f000 fa98 	bl	80013c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	240001a8 	.word	0x240001a8
 8000e98:	40004800 	.word	0x40004800

08000e9c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	@ 0x38
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	4b80      	ldr	r3, [pc, #512]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000ec4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ec8:	4a7e      	ldr	r2, [pc, #504]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000ed4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed8:	f003 0310 	and.w	r3, r3, #16
 8000edc:	623b      	str	r3, [r7, #32]
 8000ede:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee0:	4b78      	ldr	r3, [pc, #480]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000ee2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ee6:	4a77      	ldr	r2, [pc, #476]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ef0:	4b74      	ldr	r3, [pc, #464]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000ef2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	61fb      	str	r3, [r7, #28]
 8000efc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efe:	4b71      	ldr	r3, [pc, #452]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f04:	4a6f      	ldr	r2, [pc, #444]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f06:	f043 0320 	orr.w	r3, r3, #32
 8000f0a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f10:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f14:	f003 0320 	and.w	r3, r3, #32
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1c:	4b69      	ldr	r3, [pc, #420]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f22:	4a68      	ldr	r2, [pc, #416]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f28:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f2c:	4b65      	ldr	r3, [pc, #404]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b62      	ldr	r3, [pc, #392]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f40:	4a60      	ldr	r2, [pc, #384]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f4a:	4b5e      	ldr	r3, [pc, #376]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b5a      	ldr	r3, [pc, #360]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f5e:	4a59      	ldr	r2, [pc, #356]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f68:	4b56      	ldr	r3, [pc, #344]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b53      	ldr	r3, [pc, #332]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f7c:	4a51      	ldr	r2, [pc, #324]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f86:	4b4f      	ldr	r3, [pc, #316]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f94:	4b4b      	ldr	r3, [pc, #300]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fa0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fa4:	4b47      	ldr	r3, [pc, #284]	@ (80010c4 <MX_GPIO_Init+0x218>)
 8000fa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fb8:	4843      	ldr	r0, [pc, #268]	@ (80010c8 <MX_GPIO_Init+0x21c>)
 8000fba:	f001 f9e9 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000fc4:	4841      	ldr	r0, [pc, #260]	@ (80010cc <MX_GPIO_Init+0x220>)
 8000fc6:	f001 f9e3 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4840      	ldr	r0, [pc, #256]	@ (80010d0 <MX_GPIO_Init+0x224>)
 8000fd0:	f001 f9de 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	483a      	ldr	r0, [pc, #232]	@ (80010d4 <MX_GPIO_Init+0x228>)
 8000fea:	f001 f821 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	4830      	ldr	r0, [pc, #192]	@ (80010c8 <MX_GPIO_Init+0x21c>)
 8001008:	f001 f812 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800100c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001022:	4619      	mov	r1, r3
 8001024:	4829      	ldr	r0, [pc, #164]	@ (80010cc <MX_GPIO_Init+0x220>)
 8001026:	f001 f803 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800102a:	2380      	movs	r3, #128	@ 0x80
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800102e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001032:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4826      	ldr	r0, [pc, #152]	@ (80010d8 <MX_GPIO_Init+0x22c>)
 8001040:	f000 fff6 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	4820      	ldr	r0, [pc, #128]	@ (80010dc <MX_GPIO_Init+0x230>)
 800105a:	f000 ffe9 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800105e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001070:	230a      	movs	r3, #10
 8001072:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001078:	4619      	mov	r1, r3
 800107a:	4818      	ldr	r0, [pc, #96]	@ (80010dc <MX_GPIO_Init+0x230>)
 800107c:	f000 ffd8 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001080:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	4810      	ldr	r0, [pc, #64]	@ (80010dc <MX_GPIO_Init+0x230>)
 800109a:	f000 ffc9 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800109e:	2302      	movs	r3, #2
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <MX_GPIO_Init+0x224>)
 80010b6:	f000 ffbb 	bl	8002030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ba:	bf00      	nop
 80010bc:	3738      	adds	r7, #56	@ 0x38
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58021400 	.word	0x58021400
 80010cc:	58020400 	.word	0x58020400
 80010d0:	58021000 	.word	0x58021000
 80010d4:	58020800 	.word	0x58020800
 80010d8:	58021800 	.word	0x58021800
 80010dc:	58020000 	.word	0x58020000

080010e0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4aa2      	ldr	r2, [pc, #648]	@ (8001378 <HAL_TIM_IC_CaptureCallback+0x298>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d14b      	bne.n	800118a <HAL_TIM_IC_CaptureCallback+0xaa>
    {

        cycle_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80010f2:	2100      	movs	r1, #0
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f005 f8fb 	bl	80062f0 <HAL_TIM_ReadCapturedValue>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4a9f      	ldr	r2, [pc, #636]	@ (800137c <HAL_TIM_IC_CaptureCallback+0x29c>)
 80010fe:	6013      	str	r3, [r2, #0]
        period_rc_0 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001100:	2104      	movs	r1, #4
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f005 f8f4 	bl	80062f0 <HAL_TIM_ReadCapturedValue>
 8001108:	4602      	mov	r2, r0
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	461a      	mov	r2, r3
 8001114:	4b9a      	ldr	r3, [pc, #616]	@ (8001380 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001116:	601a      	str	r2, [r3, #0]
    	if (cycle_rc_0 > 1990 && cycle_rc_0 < 2010 && period_rc_0 > 0 && cycle_rc_0 > period_rc_0 ) {
 8001118:	4b98      	ldr	r3, [pc, #608]	@ (800137c <HAL_TIM_IC_CaptureCallback+0x29c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001120:	4293      	cmp	r3, r2
 8001122:	d932      	bls.n	800118a <HAL_TIM_IC_CaptureCallback+0xaa>
 8001124:	4b95      	ldr	r3, [pc, #596]	@ (800137c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 800112c:	4293      	cmp	r3, r2
 800112e:	d82c      	bhi.n	800118a <HAL_TIM_IC_CaptureCallback+0xaa>
 8001130:	4b93      	ldr	r3, [pc, #588]	@ (8001380 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d028      	beq.n	800118a <HAL_TIM_IC_CaptureCallback+0xaa>
 8001138:	4b90      	ldr	r3, [pc, #576]	@ (800137c <HAL_TIM_IC_CaptureCallback+0x29c>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b90      	ldr	r3, [pc, #576]	@ (8001380 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d922      	bls.n	800118a <HAL_TIM_IC_CaptureCallback+0xaa>
    		channel_mag_0 = (float) period_rc_0 / (float) cycle_rc_0;
 8001144:	4b8e      	ldr	r3, [pc, #568]	@ (8001380 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001150:	4b8a      	ldr	r3, [pc, #552]	@ (800137c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800115c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001160:	4b88      	ldr	r3, [pc, #544]	@ (8001384 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001162:	edc3 7a00 	vstr	s15, [r3]
    		rc_comm_temp[0] = channel_mag_0 *  RC_FULLSCALE;
 8001166:	4b87      	ldr	r3, [pc, #540]	@ (8001384 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001388 <HAL_TIM_IC_CaptureCallback+0x2a8>
 8001170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001174:	4b85      	ldr	r3, [pc, #532]	@ (800138c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8001176:	edc3 7a00 	vstr	s15, [r3]
    		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800117a:	2100      	movs	r1, #0
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f004 fc07 	bl	8005990 <HAL_TIM_IC_Stop_IT>
    		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001182:	2104      	movs	r1, #4
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f004 fa41 	bl	800560c <HAL_TIM_IC_Stop>

    	}
    }

    if (htim->Instance == TIM4)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a80      	ldr	r2, [pc, #512]	@ (8001390 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d14b      	bne.n	800122c <HAL_TIM_IC_CaptureCallback+0x14c>
    {

            cycle_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001194:	2100      	movs	r1, #0
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f005 f8aa 	bl	80062f0 <HAL_TIM_ReadCapturedValue>
 800119c:	4603      	mov	r3, r0
 800119e:	4a7d      	ldr	r2, [pc, #500]	@ (8001394 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80011a0:	6013      	str	r3, [r2, #0]
            period_rc_1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80011a2:	2104      	movs	r1, #4
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f005 f8a3 	bl	80062f0 <HAL_TIM_ReadCapturedValue>
 80011aa:	4602      	mov	r2, r0
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b78      	ldr	r3, [pc, #480]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80011b8:	601a      	str	r2, [r3, #0]
        	if (cycle_rc_1 > 1990 && cycle_rc_1 < 2010 && period_rc_1 > 0 && cycle_rc_1 > period_rc_1) {
 80011ba:	4b76      	ldr	r3, [pc, #472]	@ (8001394 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d932      	bls.n	800122c <HAL_TIM_IC_CaptureCallback+0x14c>
 80011c6:	4b73      	ldr	r3, [pc, #460]	@ (8001394 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d82c      	bhi.n	800122c <HAL_TIM_IC_CaptureCallback+0x14c>
 80011d2:	4b71      	ldr	r3, [pc, #452]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d028      	beq.n	800122c <HAL_TIM_IC_CaptureCallback+0x14c>
 80011da:	4b6e      	ldr	r3, [pc, #440]	@ (8001394 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b6e      	ldr	r3, [pc, #440]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d922      	bls.n	800122c <HAL_TIM_IC_CaptureCallback+0x14c>
        		channel_mag_1 = (float) period_rc_1 / (float) cycle_rc_1;
 80011e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001398 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011f2:	4b68      	ldr	r3, [pc, #416]	@ (8001394 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001202:	4b66      	ldr	r3, [pc, #408]	@ (800139c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
        		rc_comm_temp[1] = channel_mag_1  *  RC_FULLSCALE;
 8001208:	4b64      	ldr	r3, [pc, #400]	@ (800139c <HAL_TIM_IC_CaptureCallback+0x2bc>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001388 <HAL_TIM_IC_CaptureCallback+0x2a8>
 8001212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001216:	4b5d      	ldr	r3, [pc, #372]	@ (800138c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8001218:	edc3 7a01 	vstr	s15, [r3, #4]
        		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 800121c:	2100      	movs	r1, #0
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f004 fbb6 	bl	8005990 <HAL_TIM_IC_Stop_IT>
        		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001224:	2104      	movs	r1, #4
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f004 f9f0 	bl	800560c <HAL_TIM_IC_Stop>

        	}
    }

    if (htim->Instance == TIM5)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a5b      	ldr	r2, [pc, #364]	@ (80013a0 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d14b      	bne.n	80012ce <HAL_TIM_IC_CaptureCallback+0x1ee>
            {

                cycle_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001236:	2100      	movs	r1, #0
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f005 f859 	bl	80062f0 <HAL_TIM_ReadCapturedValue>
 800123e:	4603      	mov	r3, r0
 8001240:	4a58      	ldr	r2, [pc, #352]	@ (80013a4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8001242:	6013      	str	r3, [r2, #0]
                period_rc_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 8001244:	2104      	movs	r1, #4
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f005 f852 	bl	80062f0 <HAL_TIM_ReadCapturedValue>
 800124c:	4602      	mov	r2, r0
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	461a      	mov	r2, r3
 8001258:	4b53      	ldr	r3, [pc, #332]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800125a:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_2 > 1990 && cycle_rc_2 < 2010 && period_rc_2 > 0 && cycle_rc_2 > period_rc_2) {
 800125c:	4b51      	ldr	r3, [pc, #324]	@ (80013a4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001264:	4293      	cmp	r3, r2
 8001266:	d932      	bls.n	80012ce <HAL_TIM_IC_CaptureCallback+0x1ee>
 8001268:	4b4e      	ldr	r3, [pc, #312]	@ (80013a4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001270:	4293      	cmp	r3, r2
 8001272:	d82c      	bhi.n	80012ce <HAL_TIM_IC_CaptureCallback+0x1ee>
 8001274:	4b4c      	ldr	r3, [pc, #304]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d028      	beq.n	80012ce <HAL_TIM_IC_CaptureCallback+0x1ee>
 800127c:	4b49      	ldr	r3, [pc, #292]	@ (80013a4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b49      	ldr	r3, [pc, #292]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d922      	bls.n	80012ce <HAL_TIM_IC_CaptureCallback+0x1ee>
            		channel_mag_2 = (float) period_rc_2 / (float) cycle_rc_2;
 8001288:	4b47      	ldr	r3, [pc, #284]	@ (80013a8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001294:	4b43      	ldr	r3, [pc, #268]	@ (80013a4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a4:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x2cc>)
 80012a6:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp[2] =channel_mag_2 * RC_FULLSCALE;
 80012aa:	4b40      	ldr	r3, [pc, #256]	@ (80013ac <HAL_TIM_IC_CaptureCallback+0x2cc>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001388 <HAL_TIM_IC_CaptureCallback+0x2a8>
 80012b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b8:	4b34      	ldr	r3, [pc, #208]	@ (800138c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 80012ba:	edc3 7a02 	vstr	s15, [r3, #8]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80012be:	2100      	movs	r1, #0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f004 fb65 	bl	8005990 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 80012c6:	2104      	movs	r1, #4
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f004 f99f 	bl	800560c <HAL_TIM_IC_Stop>

            	}
            }
    if (htim->Instance == TIM15)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a37      	ldr	r2, [pc, #220]	@ (80013b0 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d14b      	bne.n	8001370 <HAL_TIM_IC_CaptureCallback+0x290>
            {

                cycle_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80012d8:	2100      	movs	r1, #0
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f005 f808 	bl	80062f0 <HAL_TIM_ReadCapturedValue>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a34      	ldr	r2, [pc, #208]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 80012e4:	6013      	str	r3, [r2, #0]
                period_rc_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2)*10;
 80012e6:	2104      	movs	r1, #4
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f005 f801 	bl	80062f0 <HAL_TIM_ReadCapturedValue>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b2f      	ldr	r3, [pc, #188]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 80012fc:	601a      	str	r2, [r3, #0]
            	if (cycle_rc_3 > 1990 && cycle_rc_3 < 2010 && period_rc_3 > 0 && cycle_rc_3 > period_rc_3) {
 80012fe:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001306:	4293      	cmp	r3, r2
 8001308:	d932      	bls.n	8001370 <HAL_TIM_IC_CaptureCallback+0x290>
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f240 72d9 	movw	r2, #2009	@ 0x7d9
 8001312:	4293      	cmp	r3, r2
 8001314:	d82c      	bhi.n	8001370 <HAL_TIM_IC_CaptureCallback+0x290>
 8001316:	4b28      	ldr	r3, [pc, #160]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d028      	beq.n	8001370 <HAL_TIM_IC_CaptureCallback+0x290>
 800131e:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d922      	bls.n	8001370 <HAL_TIM_IC_CaptureCallback+0x290>
            		channel_mag_3 = (float) period_rc_3 / (float) cycle_rc_3;
 800132a:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001336:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001346:	4b1d      	ldr	r3, [pc, #116]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8001348:	edc3 7a00 	vstr	s15, [r3]
            		rc_comm_temp[3] =  channel_mag_3 *  RC_FULLSCALE;
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <HAL_TIM_IC_CaptureCallback+0x2dc>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001388 <HAL_TIM_IC_CaptureCallback+0x2a8>
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <HAL_TIM_IC_CaptureCallback+0x2ac>)
 800135c:	edc3 7a03 	vstr	s15, [r3, #12]
            		HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001360:	2100      	movs	r1, #0
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f004 fb14 	bl	8005990 <HAL_TIM_IC_Stop_IT>
            		HAL_TIM_IC_Stop(htim, TIM_CHANNEL_2);
 8001368:	2104      	movs	r1, #4
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f004 f94e 	bl	800560c <HAL_TIM_IC_Stop>

            	}
            }


}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40000400 	.word	0x40000400
 800137c:	24000258 	.word	0x24000258
 8001380:	24000268 	.word	0x24000268
 8001384:	24000278 	.word	0x24000278
 8001388:	44e10000 	.word	0x44e10000
 800138c:	2400023c 	.word	0x2400023c
 8001390:	40000800 	.word	0x40000800
 8001394:	2400025c 	.word	0x2400025c
 8001398:	2400026c 	.word	0x2400026c
 800139c:	2400027c 	.word	0x2400027c
 80013a0:	40000c00 	.word	0x40000c00
 80013a4:	24000260 	.word	0x24000260
 80013a8:	24000270 	.word	0x24000270
 80013ac:	24000280 	.word	0x24000280
 80013b0:	40014000 	.word	0x40014000
 80013b4:	24000264 	.word	0x24000264
 80013b8:	24000274 	.word	0x24000274
 80013bc:	24000284 	.word	0x24000284

080013c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c4:	b672      	cpsid	i
}
 80013c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <Error_Handler+0x8>

080013cc <set_motor_pwm>:


extern TIM_HandleTypeDef htim1;

void set_motor_pwm(float motor_pwm[])
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if (motor_pwm[0] >= MOTOR_MAX_PWM_VALUE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001544 <set_motor_pwm+0x178>
 80013de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	db05      	blt.n	80013f4 <set_motor_pwm+0x28>
	  htim1.Instance->CCR1 = MOTOR_MAX_PWM_VALUE;
 80013e8:	4b57      	ldr	r3, [pc, #348]	@ (8001548 <set_motor_pwm+0x17c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013f2:	e019      	b.n	8001428 <set_motor_pwm+0x5c>
  else if (motor_pwm[0] <= MOTOR_MIN_PWM_VALUE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800154c <set_motor_pwm+0x180>
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d805      	bhi.n	8001414 <set_motor_pwm+0x48>
	  htim1.Instance->CCR1 = MOTOR_MIN_PWM_VALUE;
 8001408:	4b4f      	ldr	r3, [pc, #316]	@ (8001548 <set_motor_pwm+0x17c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f240 3252 	movw	r2, #850	@ 0x352
 8001410:	635a      	str	r2, [r3, #52]	@ 0x34
 8001412:	e009      	b.n	8001428 <set_motor_pwm+0x5c>
  else
	  htim1.Instance->CCR1 = motor_pwm[0] ;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	4b4b      	ldr	r3, [pc, #300]	@ (8001548 <set_motor_pwm+0x17c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001422:	ee17 2a90 	vmov	r2, s15
 8001426:	635a      	str	r2, [r3, #52]	@ 0x34
  
  if (motor_pwm[1] >= MOTOR_MAX_PWM_VALUE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3304      	adds	r3, #4
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001544 <set_motor_pwm+0x178>
 8001434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	db05      	blt.n	800144a <set_motor_pwm+0x7e>
	  htim1.Instance->CCR2 = MOTOR_MAX_PWM_VALUE;
 800143e:	4b42      	ldr	r3, [pc, #264]	@ (8001548 <set_motor_pwm+0x17c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 8001446:	639a      	str	r2, [r3, #56]	@ 0x38
 8001448:	e01b      	b.n	8001482 <set_motor_pwm+0xb6>
  else if (motor_pwm[1] <= MOTOR_MIN_PWM_VALUE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3304      	adds	r3, #4
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800154c <set_motor_pwm+0x180>
 8001456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145e:	d805      	bhi.n	800146c <set_motor_pwm+0xa0>
	  htim1.Instance->CCR2 = MOTOR_MIN_PWM_VALUE;
 8001460:	4b39      	ldr	r3, [pc, #228]	@ (8001548 <set_motor_pwm+0x17c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f240 3252 	movw	r2, #850	@ 0x352
 8001468:	639a      	str	r2, [r3, #56]	@ 0x38
 800146a:	e00a      	b.n	8001482 <set_motor_pwm+0xb6>
  else
	  htim1.Instance->CCR2 =  motor_pwm[1] ;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3304      	adds	r3, #4
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <set_motor_pwm+0x17c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800147c:	ee17 2a90 	vmov	r2, s15
 8001480:	639a      	str	r2, [r3, #56]	@ 0x38
  
  if (motor_pwm[2] >= MOTOR_MAX_PWM_VALUE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3308      	adds	r3, #8
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001544 <set_motor_pwm+0x178>
 800148e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	db05      	blt.n	80014a4 <set_motor_pwm+0xd8>
	  htim1.Instance->CCR3 = MOTOR_MAX_PWM_VALUE;
 8001498:	4b2b      	ldr	r3, [pc, #172]	@ (8001548 <set_motor_pwm+0x17c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80014a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014a2:	e01b      	b.n	80014dc <set_motor_pwm+0x110>
  else if (motor_pwm[2] <= MOTOR_MIN_PWM_VALUE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3308      	adds	r3, #8
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800154c <set_motor_pwm+0x180>
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d805      	bhi.n	80014c6 <set_motor_pwm+0xfa>
	  htim1.Instance->CCR3 = MOTOR_MIN_PWM_VALUE;
 80014ba:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <set_motor_pwm+0x17c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f240 3252 	movw	r2, #850	@ 0x352
 80014c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014c4:	e00a      	b.n	80014dc <set_motor_pwm+0x110>
  else
	  htim1.Instance->CCR3 =  motor_pwm[2] ;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3308      	adds	r3, #8
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <set_motor_pwm+0x17c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014d6:	ee17 2a90 	vmov	r2, s15
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  if (motor_pwm[3] >= MOTOR_MAX_PWM_VALUE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	330c      	adds	r3, #12
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001544 <set_motor_pwm+0x178>
 80014e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f0:	db05      	blt.n	80014fe <set_motor_pwm+0x132>
	  htim1.Instance->CCR4 = MOTOR_MAX_PWM_VALUE;
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <set_motor_pwm+0x17c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80014fa:	641a      	str	r2, [r3, #64]	@ 0x40
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM_VALUE)
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
  else
	  htim1.Instance->CCR4 = motor_pwm[3] ;
}
 80014fc:	e01b      	b.n	8001536 <set_motor_pwm+0x16a>
  else if (motor_pwm[3]  <= MOTOR_MIN_PWM_VALUE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	330c      	adds	r3, #12
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800154c <set_motor_pwm+0x180>
 800150a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	d805      	bhi.n	8001520 <set_motor_pwm+0x154>
	  htim1.Instance->CCR4 = MOTOR_MIN_PWM_VALUE;
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <set_motor_pwm+0x17c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f240 3252 	movw	r2, #850	@ 0x352
 800151c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800151e:	e00a      	b.n	8001536 <set_motor_pwm+0x16a>
	  htim1.Instance->CCR4 = motor_pwm[3] ;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	330c      	adds	r3, #12
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <set_motor_pwm+0x17c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001530:	ee17 2a90 	vmov	r2, s15
 8001534:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	44d48000 	.word	0x44d48000
 8001548:	2400002c 	.word	0x2400002c
 800154c:	44548000 	.word	0x44548000

08001550 <set_motor_pwm_zero>:


void set_motor_pwm_zero(float motor_pwm[])
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  motor_pwm[0] = 0;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
  motor_pwm[1] = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3304      	adds	r3, #4
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
  motor_pwm[2] = 0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3308      	adds	r3, #8
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
  motor_pwm[3] = 0;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	330c      	adds	r3, #12
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <get_target_euler>:
const float max_yaw_rad = PI*YAW_MAX_DEG/180.0f;
int t1;


void get_target_euler(float euler_rc[], float rc_comm[])
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
    t1 = rc_comm[0];
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a0:	ee17 2a90 	vmov	r2, s15
 80015a4:	4b4c      	ldr	r3, [pc, #304]	@ (80016d8 <get_target_euler+0x14c>)
 80015a6:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 80015a8:	4b4b      	ldr	r3, [pc, #300]	@ (80016d8 <get_target_euler+0x14c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80015b0:	dd04      	ble.n	80015bc <get_target_euler+0x30>
        t1 = RC_FULLSCALE;
 80015b2:	4b49      	ldr	r3, [pc, #292]	@ (80016d8 <get_target_euler+0x14c>)
 80015b4:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e007      	b.n	80015cc <get_target_euler+0x40>
    else if (t1 < -RC_FULLSCALE)
 80015bc:	4b46      	ldr	r3, [pc, #280]	@ (80016d8 <get_target_euler+0x14c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f513 6fe1 	cmn.w	r3, #1800	@ 0x708
 80015c4:	da02      	bge.n	80015cc <get_target_euler+0x40>
        t1 = - RC_FULLSCALE;
 80015c6:	4b44      	ldr	r3, [pc, #272]	@ (80016d8 <get_target_euler+0x14c>)
 80015c8:	4a44      	ldr	r2, [pc, #272]	@ (80016dc <get_target_euler+0x150>)
 80015ca:	601a      	str	r2, [r3, #0]
    euler_rc[0] = -t1 * max_pitch_rad / RC_FULLSCALE;
 80015cc:	4b42      	ldr	r3, [pc, #264]	@ (80016d8 <get_target_euler+0x14c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	425b      	negs	r3, r3
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015da:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80016e0 <get_target_euler+0x154>
 80015de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015e2:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80016e4 <get_target_euler+0x158>
 80015e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm[1];
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3304      	adds	r3, #4
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fc:	ee17 2a90 	vmov	r2, s15
 8001600:	4b35      	ldr	r3, [pc, #212]	@ (80016d8 <get_target_euler+0x14c>)
 8001602:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8001604:	4b34      	ldr	r3, [pc, #208]	@ (80016d8 <get_target_euler+0x14c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800160c:	dd04      	ble.n	8001618 <get_target_euler+0x8c>
        t1 = RC_FULLSCALE;
 800160e:	4b32      	ldr	r3, [pc, #200]	@ (80016d8 <get_target_euler+0x14c>)
 8001610:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	e007      	b.n	8001628 <get_target_euler+0x9c>
    else if (t1 < -RC_FULLSCALE)
 8001618:	4b2f      	ldr	r3, [pc, #188]	@ (80016d8 <get_target_euler+0x14c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f513 6fe1 	cmn.w	r3, #1800	@ 0x708
 8001620:	da02      	bge.n	8001628 <get_target_euler+0x9c>
        t1 = - RC_FULLSCALE;
 8001622:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <get_target_euler+0x14c>)
 8001624:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <get_target_euler+0x150>)
 8001626:	601a      	str	r2, [r3, #0]
    euler_rc[1] = -t1 * max_roll_rad / RC_FULLSCALE;
 8001628:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <get_target_euler+0x14c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	425b      	negs	r3, r3
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001636:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80016e0 <get_target_euler+0x154>
 800163a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3304      	adds	r3, #4
 8001642:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80016e4 <get_target_euler+0x158>
 8001646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800164a:	edc3 7a00 	vstr	s15, [r3]

    t1 = rc_comm[2];
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	3308      	adds	r3, #8
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165a:	ee17 2a90 	vmov	r2, s15
 800165e:	4b1e      	ldr	r3, [pc, #120]	@ (80016d8 <get_target_euler+0x14c>)
 8001660:	601a      	str	r2, [r3, #0]
    if (t1 > RC_FULLSCALE)
 8001662:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <get_target_euler+0x14c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800166a:	dd04      	ble.n	8001676 <get_target_euler+0xea>
        t1 = RC_FULLSCALE;
 800166c:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <get_target_euler+0x14c>)
 800166e:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e007      	b.n	8001686 <get_target_euler+0xfa>
    else if (t1 < -RC_FULLSCALE)
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <get_target_euler+0x14c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f513 6fe1 	cmn.w	r3, #1800	@ 0x708
 800167e:	da02      	bge.n	8001686 <get_target_euler+0xfa>
        t1 = - RC_FULLSCALE;
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <get_target_euler+0x14c>)
 8001682:	4a16      	ldr	r2, [pc, #88]	@ (80016dc <get_target_euler+0x150>)
 8001684:	601a      	str	r2, [r3, #0]

    if(t1 > EULER_Z_TH)
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <get_target_euler+0x14c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800168e:	dd0c      	ble.n	80016aa <get_target_euler+0x11e>
    {
        euler_rc[3] = euler_rc[3] + max_yaw_rad;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	330c      	adds	r3, #12
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80016e8 <get_target_euler+0x15c>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	330c      	adds	r3, #12
 80016a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a4:	edc3 7a00 	vstr	s15, [r3]
    }
    else if(t1 < -EULER_Z_TH)
    {
        euler_rc[3] = euler_rc[3] - max_yaw_rad;
    }
}
 80016a8:	e010      	b.n	80016cc <get_target_euler+0x140>
    else if(t1 < -EULER_Z_TH)
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <get_target_euler+0x14c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f513 7f16 	cmn.w	r3, #600	@ 0x258
 80016b2:	da0b      	bge.n	80016cc <get_target_euler+0x140>
        euler_rc[3] = euler_rc[3] - max_yaw_rad;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	330c      	adds	r3, #12
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80016e8 <get_target_euler+0x15c>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	330c      	adds	r3, #12
 80016c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016c8:	edc3 7a00 	vstr	s15, [r3]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	24000288 	.word	0x24000288
 80016dc:	fffff8f8 	.word	0xfffff8f8
 80016e0:	3f060a92 	.word	0x3f060a92
 80016e4:	44e10000 	.word	0x44e10000
 80016e8:	3d0efa35 	.word	0x3d0efa35

080016ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <HAL_MspInit+0x30>)
 80016f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80016f8:	4a08      	ldr	r2, [pc, #32]	@ (800171c <HAL_MspInit+0x30>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_MspInit+0x30>)
 8001704:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	58024400 	.word	0x58024400

08001720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b092      	sub	sp, #72	@ 0x48
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a92      	ldr	r2, [pc, #584]	@ (8001988 <HAL_TIM_Base_MspInit+0x268>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d12f      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001742:	4b92      	ldr	r3, [pc, #584]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001744:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001748:	4a90      	ldr	r2, [pc, #576]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001752:	4b8e      	ldr	r3, [pc, #568]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001754:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	633b      	str	r3, [r7, #48]	@ 0x30
 800175e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001760:	4b8a      	ldr	r3, [pc, #552]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001762:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001766:	4a89      	ldr	r2, [pc, #548]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001768:	f043 0310 	orr.w	r3, r3, #16
 800176c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001770:	4b86      	ldr	r3, [pc, #536]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001772:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800177c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800177e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001782:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001790:	2301      	movs	r3, #1
 8001792:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001794:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001798:	4619      	mov	r1, r3
 800179a:	487d      	ldr	r0, [pc, #500]	@ (8001990 <HAL_TIM_Base_MspInit+0x270>)
 800179c:	f000 fc48 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80017a0:	e0ee      	b.n	8001980 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM3)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7b      	ldr	r2, [pc, #492]	@ (8001994 <HAL_TIM_Base_MspInit+0x274>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d136      	bne.n	800181a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ac:	4b77      	ldr	r3, [pc, #476]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80017ae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80017b2:	4a76      	ldr	r2, [pc, #472]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80017bc:	4b73      	ldr	r3, [pc, #460]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80017be:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4b70      	ldr	r3, [pc, #448]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80017cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017d0:	4a6e      	ldr	r2, [pc, #440]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017da:	4b6c      	ldr	r3, [pc, #432]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80017dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017e8:	2310      	movs	r3, #16
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017f8:	2302      	movs	r3, #2
 80017fa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001800:	4619      	mov	r1, r3
 8001802:	4865      	ldr	r0, [pc, #404]	@ (8001998 <HAL_TIM_Base_MspInit+0x278>)
 8001804:	f000 fc14 	bl	8002030 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	201d      	movs	r0, #29
 800180e:	f000 fbda 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001812:	201d      	movs	r0, #29
 8001814:	f000 fbf1 	bl	8001ffa <HAL_NVIC_EnableIRQ>
}
 8001818:	e0b2      	b.n	8001980 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM4)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a5f      	ldr	r2, [pc, #380]	@ (800199c <HAL_TIM_Base_MspInit+0x27c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d136      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001824:	4b59      	ldr	r3, [pc, #356]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001826:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800182a:	4a58      	ldr	r2, [pc, #352]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001834:	4b55      	ldr	r3, [pc, #340]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001836:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	4b52      	ldr	r3, [pc, #328]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001844:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001848:	4a50      	ldr	r2, [pc, #320]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001852:	4b4e      	ldr	r3, [pc, #312]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001854:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001860:	2340      	movs	r3, #64	@ 0x40
 8001862:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001870:	2302      	movs	r3, #2
 8001872:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001878:	4619      	mov	r1, r3
 800187a:	4847      	ldr	r0, [pc, #284]	@ (8001998 <HAL_TIM_Base_MspInit+0x278>)
 800187c:	f000 fbd8 	bl	8002030 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	2100      	movs	r1, #0
 8001884:	201e      	movs	r0, #30
 8001886:	f000 fb9e 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800188a:	201e      	movs	r0, #30
 800188c:	f000 fbb5 	bl	8001ffa <HAL_NVIC_EnableIRQ>
}
 8001890:	e076      	b.n	8001980 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM5)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a42      	ldr	r2, [pc, #264]	@ (80019a0 <HAL_TIM_Base_MspInit+0x280>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d136      	bne.n	800190a <HAL_TIM_Base_MspInit+0x1ea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800189c:	4b3b      	ldr	r3, [pc, #236]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 800189e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018a2:	4a3a      	ldr	r2, [pc, #232]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80018ac:	4b37      	ldr	r3, [pc, #220]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80018ae:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	4b34      	ldr	r3, [pc, #208]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80018bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018c0:	4a32      	ldr	r2, [pc, #200]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80018ca:	4b30      	ldr	r3, [pc, #192]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 80018cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d8:	2301      	movs	r3, #1
 80018da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018e8:	2302      	movs	r3, #2
 80018ea:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018f0:	4619      	mov	r1, r3
 80018f2:	482c      	ldr	r0, [pc, #176]	@ (80019a4 <HAL_TIM_Base_MspInit+0x284>)
 80018f4:	f000 fb9c 	bl	8002030 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	2032      	movs	r0, #50	@ 0x32
 80018fe:	f000 fb62 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001902:	2032      	movs	r0, #50	@ 0x32
 8001904:	f000 fb79 	bl	8001ffa <HAL_NVIC_EnableIRQ>
}
 8001908:	e03a      	b.n	8001980 <HAL_TIM_Base_MspInit+0x260>
  else if(htim_base->Instance==TIM15)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a26      	ldr	r2, [pc, #152]	@ (80019a8 <HAL_TIM_Base_MspInit+0x288>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d135      	bne.n	8001980 <HAL_TIM_Base_MspInit+0x260>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001914:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001916:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800191a:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001920:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001924:	4b19      	ldr	r3, [pc, #100]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001926:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800192a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001932:	4b16      	ldr	r3, [pc, #88]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001934:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 800193a:	f043 0310 	orr.w	r3, r3, #16
 800193e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001942:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_TIM_Base_MspInit+0x26c>)
 8001944:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001950:	2320      	movs	r3, #32
 8001952:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001960:	2304      	movs	r3, #4
 8001962:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001964:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001968:	4619      	mov	r1, r3
 800196a:	4809      	ldr	r0, [pc, #36]	@ (8001990 <HAL_TIM_Base_MspInit+0x270>)
 800196c:	f000 fb60 	bl	8002030 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	2074      	movs	r0, #116	@ 0x74
 8001976:	f000 fb26 	bl	8001fc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800197a:	2074      	movs	r0, #116	@ 0x74
 800197c:	f000 fb3d 	bl	8001ffa <HAL_NVIC_EnableIRQ>
}
 8001980:	bf00      	nop
 8001982:	3748      	adds	r7, #72	@ 0x48
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40010000 	.word	0x40010000
 800198c:	58024400 	.word	0x58024400
 8001990:	58021000 	.word	0x58021000
 8001994:	40000400 	.word	0x40000400
 8001998:	58020400 	.word	0x58020400
 800199c:	40000800 	.word	0x40000800
 80019a0:	40000c00 	.word	0x40000c00
 80019a4:	58020000 	.word	0x58020000
 80019a8:	40014000 	.word	0x40014000

080019ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a13      	ldr	r2, [pc, #76]	@ (8001a18 <HAL_TIM_MspPostInit+0x6c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d11f      	bne.n	8001a0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ce:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <HAL_TIM_MspPostInit+0x70>)
 80019d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019d4:	4a11      	ldr	r2, [pc, #68]	@ (8001a1c <HAL_TIM_MspPostInit+0x70>)
 80019d6:	f043 0310 	orr.w	r3, r3, #16
 80019da:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <HAL_TIM_MspPostInit+0x70>)
 80019e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019e4:	f003 0310 	and.w	r3, r3, #16
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	@ (8001a20 <HAL_TIM_MspPostInit+0x74>)
 8001a0a:	f000 fb11 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a0e:	bf00      	nop
 8001a10:	3720      	adds	r7, #32
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	58024400 	.word	0x58024400
 8001a20:	58021000 	.word	0x58021000

08001a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0ba      	sub	sp, #232	@ 0xe8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	22c0      	movs	r2, #192	@ 0xc0
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 fe2b 	bl	80086a0 <memset>
  if(huart->Instance==USART3)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a27      	ldr	r2, [pc, #156]	@ (8001aec <HAL_UART_MspInit+0xc8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d146      	bne.n	8001ae2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a54:	f04f 0202 	mov.w	r2, #2
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 fcc2 	bl	80033f4 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a76:	f7ff fca3 	bl	80013c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <HAL_UART_MspInit+0xcc>)
 8001a7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a80:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_UART_MspInit+0xcc>)
 8001a82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a86:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001a8a:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <HAL_UART_MspInit+0xcc>)
 8001a8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_UART_MspInit+0xcc>)
 8001a9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a9e:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <HAL_UART_MspInit+0xcc>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <HAL_UART_MspInit+0xcc>)
 8001aaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ab6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001aba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <HAL_UART_MspInit+0xd0>)
 8001ade:	f000 faa7 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ae2:	bf00      	nop
 8001ae4:	37e8      	adds	r7, #232	@ 0xe8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40004800 	.word	0x40004800
 8001af0:	58024400 	.word	0x58024400
 8001af4:	58020c00 	.word	0x58020c00

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <NMI_Handler+0x4>

08001b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <MemManage_Handler+0x4>

08001b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4e:	f000 f93f 	bl	8001dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b5c:	4802      	ldr	r0, [pc, #8]	@ (8001b68 <TIM3_IRQHandler+0x10>)
 8001b5e:	f003 ffd5 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	24000078 	.word	0x24000078

08001b6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b70:	4802      	ldr	r0, [pc, #8]	@ (8001b7c <TIM4_IRQHandler+0x10>)
 8001b72:	f003 ffcb 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	240000c4 	.word	0x240000c4

08001b80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b84:	4802      	ldr	r0, [pc, #8]	@ (8001b90 <TIM5_IRQHandler+0x10>)
 8001b86:	f003 ffc1 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	24000110 	.word	0x24000110

08001b94 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <TIM15_IRQHandler+0x10>)
 8001b9a:	f003 ffb7 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2400015c 	.word	0x2400015c

08001ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bac:	4b32      	ldr	r3, [pc, #200]	@ (8001c78 <SystemInit+0xd0>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bb2:	4a31      	ldr	r2, [pc, #196]	@ (8001c78 <SystemInit+0xd0>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8001c7c <SystemInit+0xd4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d807      	bhi.n	8001bd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c7c <SystemInit+0xd4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 030f 	bic.w	r3, r3, #15
 8001bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8001c7c <SystemInit+0xd4>)
 8001bd2:	f043 0303 	orr.w	r3, r3, #3
 8001bd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bd8:	4b29      	ldr	r3, [pc, #164]	@ (8001c80 <SystemInit+0xd8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a28      	ldr	r2, [pc, #160]	@ (8001c80 <SystemInit+0xd8>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001be4:	4b26      	ldr	r3, [pc, #152]	@ (8001c80 <SystemInit+0xd8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bea:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <SystemInit+0xd8>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4924      	ldr	r1, [pc, #144]	@ (8001c80 <SystemInit+0xd8>)
 8001bf0:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <SystemInit+0xdc>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bf6:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <SystemInit+0xd4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d007      	beq.n	8001c12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c02:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <SystemInit+0xd4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 030f 	bic.w	r3, r3, #15
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c7c <SystemInit+0xd4>)
 8001c0c:	f043 0303 	orr.w	r3, r3, #3
 8001c10:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001c12:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <SystemInit+0xd8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001c18:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <SystemInit+0xd8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <SystemInit+0xd8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c24:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <SystemInit+0xd8>)
 8001c26:	4a18      	ldr	r2, [pc, #96]	@ (8001c88 <SystemInit+0xe0>)
 8001c28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c2a:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <SystemInit+0xd8>)
 8001c2c:	4a17      	ldr	r2, [pc, #92]	@ (8001c8c <SystemInit+0xe4>)
 8001c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <SystemInit+0xd8>)
 8001c32:	4a17      	ldr	r2, [pc, #92]	@ (8001c90 <SystemInit+0xe8>)
 8001c34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c36:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <SystemInit+0xd8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <SystemInit+0xd8>)
 8001c3e:	4a14      	ldr	r2, [pc, #80]	@ (8001c90 <SystemInit+0xe8>)
 8001c40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <SystemInit+0xd8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <SystemInit+0xd8>)
 8001c4a:	4a11      	ldr	r2, [pc, #68]	@ (8001c90 <SystemInit+0xe8>)
 8001c4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <SystemInit+0xd8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <SystemInit+0xd8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a09      	ldr	r2, [pc, #36]	@ (8001c80 <SystemInit+0xd8>)
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <SystemInit+0xd8>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <SystemInit+0xec>)
 8001c68:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	52002000 	.word	0x52002000
 8001c80:	58024400 	.word	0x58024400
 8001c84:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c88:	02020200 	.word	0x02020200
 8001c8c:	01ff0000 	.word	0x01ff0000
 8001c90:	01010280 	.word	0x01010280
 8001c94:	52004000 	.word	0x52004000

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c9c:	f7ff ff84 	bl	8001ba8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ca2:	490d      	ldr	r1, [pc, #52]	@ (8001cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f006 fcf3 	bl	80086b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7fe fc87 	bl	80005dc <main>
  bx  lr
 8001cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001cd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cd8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001cdc:	08008758 	.word	0x08008758
  ldr r2, =_sbss
 8001ce0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001ce4:	24000290 	.word	0x24000290

08001ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC_IRQHandler>
	...

08001cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f000 f95c 	bl	8001fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001cf8:	f001 f9a6 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_Init+0x68>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	4913      	ldr	r1, [pc, #76]	@ (8001d58 <HAL_Init+0x6c>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001d16:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <HAL_Init+0x68>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d58 <HAL_Init+0x6c>)
 8001d20:	5cd3      	ldrb	r3, [r2, r3]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d5c <HAL_Init+0x70>)
 8001d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d30:	4a0b      	ldr	r2, [pc, #44]	@ (8001d60 <HAL_Init+0x74>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 f814 	bl	8001d64 <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e002      	b.n	8001d4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d46:	f7ff fcd1 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	58024400 	.word	0x58024400
 8001d58:	08008710 	.word	0x08008710
 8001d5c:	24000004 	.word	0x24000004
 8001d60:	24000000 	.word	0x24000000

08001d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_InitTick+0x60>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e021      	b.n	8001dbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d78:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <HAL_InitTick+0x64>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <HAL_InitTick+0x60>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f941 	bl	8002016 <HAL_SYSTICK_Config>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00e      	b.n	8001dbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d80a      	bhi.n	8001dba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da4:	2200      	movs	r2, #0
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dac:	f000 f90b 	bl	8001fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db0:	4a06      	ldr	r2, [pc, #24]	@ (8001dcc <HAL_InitTick+0x68>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2400000c 	.word	0x2400000c
 8001dc8:	24000000 	.word	0x24000000
 8001dcc:	24000008 	.word	0x24000008

08001dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_IncTick+0x20>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_IncTick+0x24>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <HAL_IncTick+0x24>)
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	2400000c 	.word	0x2400000c
 8001df4:	2400028c 	.word	0x2400028c

08001df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <HAL_GetTick+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	2400028c 	.word	0x2400028c

08001e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <__NVIC_SetPriorityGrouping+0x40>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <__NVIC_SetPriorityGrouping+0x40>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00
 8001e54:	05fa0000 	.word	0x05fa0000

08001e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e5c:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <__NVIC_GetPriorityGrouping+0x18>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	f003 0307 	and.w	r3, r3, #7
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	db0b      	blt.n	8001e9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	f003 021f 	and.w	r2, r3, #31
 8001e8c:	4907      	ldr	r1, [pc, #28]	@ (8001eac <__NVIC_EnableIRQ+0x38>)
 8001e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e92:	095b      	lsrs	r3, r3, #5
 8001e94:	2001      	movs	r0, #1
 8001e96:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db0a      	blt.n	8001eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	490c      	ldr	r1, [pc, #48]	@ (8001efc <__NVIC_SetPriority+0x4c>)
 8001eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed8:	e00a      	b.n	8001ef0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4908      	ldr	r1, [pc, #32]	@ (8001f00 <__NVIC_SetPriority+0x50>)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	761a      	strb	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000e100 	.word	0xe000e100
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	@ 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f1c3 0307 	rsb	r3, r3, #7
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf28      	it	cs
 8001f22:	2304      	movcs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d902      	bls.n	8001f34 <NVIC_EncodePriority+0x30>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3b03      	subs	r3, #3
 8001f32:	e000      	b.n	8001f36 <NVIC_EncodePriority+0x32>
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	4313      	orrs	r3, r2
         );
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	@ 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f7c:	d301      	bcc.n	8001f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00f      	b.n	8001fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <SysTick_Config+0x40>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8a:	210f      	movs	r1, #15
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f90:	f7ff ff8e 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <SysTick_Config+0x40>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9a:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <SysTick_Config+0x40>)
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	e000e010 	.word	0xe000e010

08001fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ff29 	bl	8001e10 <__NVIC_SetPriorityGrouping>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff40 	bl	8001e58 <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ff90 	bl	8001f04 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff5f 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff33 	bl	8001e74 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffa4 	bl	8001f6c <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800203e:	4b89      	ldr	r3, [pc, #548]	@ (8002264 <HAL_GPIO_Init+0x234>)
 8002040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002042:	e194      	b.n	800236e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2101      	movs	r1, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8186 	beq.w	8002368 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b01      	cmp	r3, #1
 8002066:	d005      	beq.n	8002074 <HAL_GPIO_Init+0x44>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d130      	bne.n	80020d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020aa:	2201      	movs	r2, #1
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f003 0201 	and.w	r2, r3, #1
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d017      	beq.n	8002112 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d123      	bne.n	8002166 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691a      	ldr	r2, [r3, #16]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3208      	adds	r2, #8
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0203 	and.w	r2, r3, #3
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80e0 	beq.w	8002368 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002268 <HAL_GPIO_Init+0x238>)
 80021aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80021ae:	4a2e      	ldr	r2, [pc, #184]	@ (8002268 <HAL_GPIO_Init+0x238>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80021b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002268 <HAL_GPIO_Init+0x238>)
 80021ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c6:	4a29      	ldr	r2, [pc, #164]	@ (800226c <HAL_GPIO_Init+0x23c>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a20      	ldr	r2, [pc, #128]	@ (8002270 <HAL_GPIO_Init+0x240>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d052      	beq.n	8002298 <HAL_GPIO_Init+0x268>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002274 <HAL_GPIO_Init+0x244>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d031      	beq.n	800225e <HAL_GPIO_Init+0x22e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002278 <HAL_GPIO_Init+0x248>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02b      	beq.n	800225a <HAL_GPIO_Init+0x22a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1d      	ldr	r2, [pc, #116]	@ (800227c <HAL_GPIO_Init+0x24c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d025      	beq.n	8002256 <HAL_GPIO_Init+0x226>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a1c      	ldr	r2, [pc, #112]	@ (8002280 <HAL_GPIO_Init+0x250>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01f      	beq.n	8002252 <HAL_GPIO_Init+0x222>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a1b      	ldr	r2, [pc, #108]	@ (8002284 <HAL_GPIO_Init+0x254>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d019      	beq.n	800224e <HAL_GPIO_Init+0x21e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a1a      	ldr	r2, [pc, #104]	@ (8002288 <HAL_GPIO_Init+0x258>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_GPIO_Init+0x21a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a19      	ldr	r2, [pc, #100]	@ (800228c <HAL_GPIO_Init+0x25c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00d      	beq.n	8002246 <HAL_GPIO_Init+0x216>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a18      	ldr	r2, [pc, #96]	@ (8002290 <HAL_GPIO_Init+0x260>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <HAL_GPIO_Init+0x212>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a17      	ldr	r2, [pc, #92]	@ (8002294 <HAL_GPIO_Init+0x264>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_GPIO_Init+0x20e>
 800223a:	2309      	movs	r3, #9
 800223c:	e02d      	b.n	800229a <HAL_GPIO_Init+0x26a>
 800223e:	230a      	movs	r3, #10
 8002240:	e02b      	b.n	800229a <HAL_GPIO_Init+0x26a>
 8002242:	2308      	movs	r3, #8
 8002244:	e029      	b.n	800229a <HAL_GPIO_Init+0x26a>
 8002246:	2307      	movs	r3, #7
 8002248:	e027      	b.n	800229a <HAL_GPIO_Init+0x26a>
 800224a:	2306      	movs	r3, #6
 800224c:	e025      	b.n	800229a <HAL_GPIO_Init+0x26a>
 800224e:	2305      	movs	r3, #5
 8002250:	e023      	b.n	800229a <HAL_GPIO_Init+0x26a>
 8002252:	2304      	movs	r3, #4
 8002254:	e021      	b.n	800229a <HAL_GPIO_Init+0x26a>
 8002256:	2303      	movs	r3, #3
 8002258:	e01f      	b.n	800229a <HAL_GPIO_Init+0x26a>
 800225a:	2302      	movs	r3, #2
 800225c:	e01d      	b.n	800229a <HAL_GPIO_Init+0x26a>
 800225e:	2301      	movs	r3, #1
 8002260:	e01b      	b.n	800229a <HAL_GPIO_Init+0x26a>
 8002262:	bf00      	nop
 8002264:	58000080 	.word	0x58000080
 8002268:	58024400 	.word	0x58024400
 800226c:	58000400 	.word	0x58000400
 8002270:	58020000 	.word	0x58020000
 8002274:	58020400 	.word	0x58020400
 8002278:	58020800 	.word	0x58020800
 800227c:	58020c00 	.word	0x58020c00
 8002280:	58021000 	.word	0x58021000
 8002284:	58021400 	.word	0x58021400
 8002288:	58021800 	.word	0x58021800
 800228c:	58021c00 	.word	0x58021c00
 8002290:	58022000 	.word	0x58022000
 8002294:	58022400 	.word	0x58022400
 8002298:	2300      	movs	r3, #0
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	f002 0203 	and.w	r2, r2, #3
 80022a0:	0092      	lsls	r2, r2, #2
 80022a2:	4093      	lsls	r3, r2
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022aa:	4938      	ldr	r1, [pc, #224]	@ (800238c <HAL_GPIO_Init+0x35c>)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3302      	adds	r3, #2
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800230c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	3301      	adds	r3, #1
 800236c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	f47f ae63 	bne.w	8002044 <HAL_GPIO_Init+0x14>
  }
}
 800237e:	bf00      	nop
 8002380:	bf00      	nop
 8002382:	3724      	adds	r7, #36	@ 0x24
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	58000400 	.word	0x58000400

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023ac:	e003      	b.n	80023b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	041a      	lsls	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80023cc:	4b29      	ldr	r3, [pc, #164]	@ (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d00a      	beq.n	80023ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023d8:	4b26      	ldr	r3, [pc, #152]	@ (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d001      	beq.n	80023ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e040      	b.n	800246c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e03e      	b.n	800246c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023ee:	4b21      	ldr	r3, [pc, #132]	@ (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80023f6:	491f      	ldr	r1, [pc, #124]	@ (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023fe:	f7ff fcfb 	bl	8001df8 <HAL_GetTick>
 8002402:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002404:	e009      	b.n	800241a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002406:	f7ff fcf7 	bl	8001df8 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002414:	d901      	bls.n	800241a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e028      	b.n	800246c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800241a:	4b16      	ldr	r3, [pc, #88]	@ (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002426:	d1ee      	bne.n	8002406 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b1e      	cmp	r3, #30
 800242c:	d008      	beq.n	8002440 <HAL_PWREx_ConfigSupply+0x7c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b2e      	cmp	r3, #46	@ 0x2e
 8002432:	d005      	beq.n	8002440 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b1d      	cmp	r3, #29
 8002438:	d002      	beq.n	8002440 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b2d      	cmp	r3, #45	@ 0x2d
 800243e:	d114      	bne.n	800246a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002440:	f7ff fcda 	bl	8001df8 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002446:	e009      	b.n	800245c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002448:	f7ff fcd6 	bl	8001df8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002456:	d901      	bls.n	800245c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e007      	b.n	800246c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800245c:	4b05      	ldr	r3, [pc, #20]	@ (8002474 <HAL_PWREx_ConfigSupply+0xb0>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002468:	d1ee      	bne.n	8002448 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024800 	.word	0x58024800

08002478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	@ 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	f000 bc1f 	b.w	8002cca <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80b3 	beq.w	8002600 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249a:	4b95      	ldr	r3, [pc, #596]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024a4:	4b92      	ldr	r3, [pc, #584]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80024a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d007      	beq.n	80024c0 <HAL_RCC_OscConfig+0x48>
 80024b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b2:	2b18      	cmp	r3, #24
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x64>
 80024b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d10d      	bne.n	80024dc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4b8b      	ldr	r3, [pc, #556]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8098 	beq.w	80025fe <HAL_RCC_OscConfig+0x186>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 8093 	bne.w	80025fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e3f6      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x7c>
 80024e6:	4b82      	ldr	r3, [pc, #520]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a81      	ldr	r2, [pc, #516]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e058      	b.n	80025a6 <HAL_RCC_OscConfig+0x12e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d112      	bne.n	8002522 <HAL_RCC_OscConfig+0xaa>
 80024fc:	4b7c      	ldr	r3, [pc, #496]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a7b      	ldr	r2, [pc, #492]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b79      	ldr	r3, [pc, #484]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a78      	ldr	r2, [pc, #480]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800250e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b76      	ldr	r3, [pc, #472]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a75      	ldr	r2, [pc, #468]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800251a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e041      	b.n	80025a6 <HAL_RCC_OscConfig+0x12e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800252a:	d112      	bne.n	8002552 <HAL_RCC_OscConfig+0xda>
 800252c:	4b70      	ldr	r3, [pc, #448]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6f      	ldr	r2, [pc, #444]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002532:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b6d      	ldr	r3, [pc, #436]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6c      	ldr	r2, [pc, #432]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800253e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b6a      	ldr	r3, [pc, #424]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a69      	ldr	r2, [pc, #420]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e029      	b.n	80025a6 <HAL_RCC_OscConfig+0x12e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800255a:	d112      	bne.n	8002582 <HAL_RCC_OscConfig+0x10a>
 800255c:	4b64      	ldr	r3, [pc, #400]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a63      	ldr	r2, [pc, #396]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002562:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b61      	ldr	r3, [pc, #388]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a60      	ldr	r2, [pc, #384]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800256e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b5e      	ldr	r3, [pc, #376]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a5d      	ldr	r2, [pc, #372]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800257a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	e011      	b.n	80025a6 <HAL_RCC_OscConfig+0x12e>
 8002582:	4b5b      	ldr	r3, [pc, #364]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a5a      	ldr	r2, [pc, #360]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b58      	ldr	r3, [pc, #352]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a57      	ldr	r2, [pc, #348]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002594:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b55      	ldr	r3, [pc, #340]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a54      	ldr	r2, [pc, #336]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80025a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d013      	beq.n	80025d6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7ff fc23 	bl	8001df8 <HAL_GetTick>
 80025b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b6:	f7ff fc1f 	bl	8001df8 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	@ 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e380      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c8:	4b49      	ldr	r3, [pc, #292]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x13e>
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7ff fc0f 	bl	8001df8 <HAL_GetTick>
 80025da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025de:	f7ff fc0b 	bl	8001df8 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b64      	cmp	r3, #100	@ 0x64
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e36c      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025f0:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x166>
 80025fc:	e000      	b.n	8002600 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 808c 	beq.w	8002726 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b38      	ldr	r3, [pc, #224]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002616:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002618:	4b35      	ldr	r3, [pc, #212]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_RCC_OscConfig+0x1bc>
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	2b18      	cmp	r3, #24
 8002628:	d137      	bne.n	800269a <HAL_RCC_OscConfig+0x222>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d132      	bne.n	800269a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002634:	4b2e      	ldr	r3, [pc, #184]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_OscConfig+0x1d4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e33e      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800264c:	4b28      	ldr	r3, [pc, #160]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 0219 	bic.w	r2, r3, #25
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4925      	ldr	r1, [pc, #148]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7ff fbcb 	bl	8001df8 <HAL_GetTick>
 8002662:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7ff fbc7 	bl	8001df8 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e328      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002678:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b1a      	ldr	r3, [pc, #104]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	4917      	ldr	r1, [pc, #92]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002698:	e045      	b.n	8002726 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d028      	beq.n	80026f4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026a2:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0219 	bic.w	r2, r3, #25
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	4910      	ldr	r1, [pc, #64]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7ff fba0 	bl	8001df8 <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026bc:	f7ff fb9c 	bl	8001df8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e2fd      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ce:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	4901      	ldr	r1, [pc, #4]	@ (80026f0 <HAL_RCC_OscConfig+0x278>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
 80026ee:	e01a      	b.n	8002726 <HAL_RCC_OscConfig+0x2ae>
 80026f0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f4:	4b97      	ldr	r3, [pc, #604]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a96      	ldr	r2, [pc, #600]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80026fa:	f023 0301 	bic.w	r3, r3, #1
 80026fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7ff fb7a 	bl	8001df8 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002708:	f7ff fb76 	bl	8001df8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e2d7      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800271a:	4b8e      	ldr	r3, [pc, #568]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d06a      	beq.n	8002808 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002732:	4b88      	ldr	r3, [pc, #544]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800273a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800273c:	4b85      	ldr	r3, [pc, #532]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d007      	beq.n	8002758 <HAL_RCC_OscConfig+0x2e0>
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b18      	cmp	r3, #24
 800274c:	d11b      	bne.n	8002786 <HAL_RCC_OscConfig+0x30e>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b01      	cmp	r3, #1
 8002756:	d116      	bne.n	8002786 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002758:	4b7e      	ldr	r3, [pc, #504]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_OscConfig+0x2f8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	2b80      	cmp	r3, #128	@ 0x80
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e2ac      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002770:	4b78      	ldr	r3, [pc, #480]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	4975      	ldr	r1, [pc, #468]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002780:	4313      	orrs	r3, r2
 8002782:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002784:	e040      	b.n	8002808 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d023      	beq.n	80027d6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800278e:	4b71      	ldr	r3, [pc, #452]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a70      	ldr	r2, [pc, #448]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7ff fb2d 	bl	8001df8 <HAL_GetTick>
 800279e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027a2:	f7ff fb29 	bl	8001df8 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e28a      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027b4:	4b67      	ldr	r3, [pc, #412]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027c0:	4b64      	ldr	r3, [pc, #400]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	4961      	ldr	r1, [pc, #388]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60cb      	str	r3, [r1, #12]
 80027d4:	e018      	b.n	8002808 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5e      	ldr	r2, [pc, #376]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80027dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7ff fb09 	bl	8001df8 <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027ea:	f7ff fb05 	bl	8001df8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e266      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027fc:	4b55      	ldr	r3, [pc, #340]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d036      	beq.n	8002882 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d019      	beq.n	8002850 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281c:	4b4d      	ldr	r3, [pc, #308]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002820:	4a4c      	ldr	r2, [pc, #304]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7ff fae6 	bl	8001df8 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7ff fae2 	bl	8001df8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e243      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002842:	4b44      	ldr	r3, [pc, #272]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x3b8>
 800284e:	e018      	b.n	8002882 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002850:	4b40      	ldr	r3, [pc, #256]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002854:	4a3f      	ldr	r2, [pc, #252]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7ff facc 	bl	8001df8 <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002864:	f7ff fac8 	bl	8001df8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e229      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002876:	4b37      	ldr	r3, [pc, #220]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d036      	beq.n	80028fc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d019      	beq.n	80028ca <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002896:	4b2f      	ldr	r3, [pc, #188]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2e      	ldr	r2, [pc, #184]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 800289c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028a2:	f7ff faa9 	bl	8001df8 <HAL_GetTick>
 80028a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028aa:	f7ff faa5 	bl	8001df8 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e206      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028bc:	4b25      	ldr	r3, [pc, #148]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x432>
 80028c8:	e018      	b.n	80028fc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ca:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a21      	ldr	r2, [pc, #132]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80028d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028d6:	f7ff fa8f 	bl	8001df8 <HAL_GetTick>
 80028da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028de:	f7ff fa8b 	bl	8001df8 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e1ec      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028f0:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80af 	beq.w	8002a68 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800290a:	4b13      	ldr	r3, [pc, #76]	@ (8002958 <HAL_RCC_OscConfig+0x4e0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a12      	ldr	r2, [pc, #72]	@ (8002958 <HAL_RCC_OscConfig+0x4e0>)
 8002910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002916:	f7ff fa6f 	bl	8001df8 <HAL_GetTick>
 800291a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291e:	f7ff fa6b 	bl	8001df8 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b64      	cmp	r3, #100	@ 0x64
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1cc      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002930:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <HAL_RCC_OscConfig+0x4e0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d10b      	bne.n	800295c <HAL_RCC_OscConfig+0x4e4>
 8002944:	4b03      	ldr	r3, [pc, #12]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002948:	4a02      	ldr	r2, [pc, #8]	@ (8002954 <HAL_RCC_OscConfig+0x4dc>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002950:	e05b      	b.n	8002a0a <HAL_RCC_OscConfig+0x592>
 8002952:	bf00      	nop
 8002954:	58024400 	.word	0x58024400
 8002958:	58024800 	.word	0x58024800
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d112      	bne.n	800298a <HAL_RCC_OscConfig+0x512>
 8002964:	4b9d      	ldr	r3, [pc, #628]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002968:	4a9c      	ldr	r2, [pc, #624]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002970:	4b9a      	ldr	r3, [pc, #616]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002974:	4a99      	ldr	r2, [pc, #612]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800297a:	6713      	str	r3, [r2, #112]	@ 0x70
 800297c:	4b97      	ldr	r3, [pc, #604]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002980:	4a96      	ldr	r2, [pc, #600]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	6713      	str	r3, [r2, #112]	@ 0x70
 8002988:	e03f      	b.n	8002a0a <HAL_RCC_OscConfig+0x592>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b05      	cmp	r3, #5
 8002990:	d112      	bne.n	80029b8 <HAL_RCC_OscConfig+0x540>
 8002992:	4b92      	ldr	r3, [pc, #584]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002996:	4a91      	ldr	r2, [pc, #580]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6713      	str	r3, [r2, #112]	@ 0x70
 800299e:	4b8f      	ldr	r3, [pc, #572]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a2:	4a8e      	ldr	r2, [pc, #568]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029aa:	4b8c      	ldr	r3, [pc, #560]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	4a8b      	ldr	r2, [pc, #556]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b6:	e028      	b.n	8002a0a <HAL_RCC_OscConfig+0x592>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b85      	cmp	r3, #133	@ 0x85
 80029be:	d112      	bne.n	80029e6 <HAL_RCC_OscConfig+0x56e>
 80029c0:	4b86      	ldr	r3, [pc, #536]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	4a85      	ldr	r2, [pc, #532]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80029cc:	4b83      	ldr	r3, [pc, #524]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d0:	4a82      	ldr	r2, [pc, #520]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d8:	4b80      	ldr	r3, [pc, #512]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	4a7f      	ldr	r2, [pc, #508]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e4:	e011      	b.n	8002a0a <HAL_RCC_OscConfig+0x592>
 80029e6:	4b7d      	ldr	r3, [pc, #500]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ea:	4a7c      	ldr	r2, [pc, #496]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f2:	4b7a      	ldr	r3, [pc, #488]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f6:	4a79      	ldr	r2, [pc, #484]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 80029f8:	f023 0304 	bic.w	r3, r3, #4
 80029fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fe:	4b77      	ldr	r3, [pc, #476]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a02:	4a76      	ldr	r2, [pc, #472]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002a04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a08:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d015      	beq.n	8002a3e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a12:	f7ff f9f1 	bl	8001df8 <HAL_GetTick>
 8002a16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7ff f9ed 	bl	8001df8 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e14c      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a30:	4b6a      	ldr	r3, [pc, #424]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ee      	beq.n	8002a1a <HAL_RCC_OscConfig+0x5a2>
 8002a3c:	e014      	b.n	8002a68 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7ff f9db 	bl	8001df8 <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7ff f9d7 	bl	8001df8 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e136      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a5c:	4b5f      	ldr	r3, [pc, #380]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1ee      	bne.n	8002a46 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 812b 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a72:	4b5a      	ldr	r3, [pc, #360]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a7a:	2b18      	cmp	r3, #24
 8002a7c:	f000 80bb 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	f040 8095 	bne.w	8002bb4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8a:	4b54      	ldr	r3, [pc, #336]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a53      	ldr	r2, [pc, #332]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002a90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7ff f9af 	bl	8001df8 <HAL_GetTick>
 8002a9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9e:	f7ff f9ab 	bl	8001df8 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e10c      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002abc:	4b47      	ldr	r3, [pc, #284]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002abe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ac0:	4b47      	ldr	r3, [pc, #284]	@ (8002be0 <HAL_RCC_OscConfig+0x768>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002acc:	0112      	lsls	r2, r2, #4
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	4942      	ldr	r1, [pc, #264]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	3b01      	subs	r3, #1
 8002adc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	025b      	lsls	r3, r3, #9
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af0:	3b01      	subs	r3, #1
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002afe:	3b01      	subs	r3, #1
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b06:	4935      	ldr	r1, [pc, #212]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b0c:	4b33      	ldr	r3, [pc, #204]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	4a32      	ldr	r2, [pc, #200]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b18:	4b30      	ldr	r3, [pc, #192]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b1c:	4b31      	ldr	r3, [pc, #196]	@ (8002be4 <HAL_RCC_OscConfig+0x76c>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b24:	00d2      	lsls	r2, r2, #3
 8002b26:	492d      	ldr	r1, [pc, #180]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	f023 020c 	bic.w	r2, r3, #12
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	4928      	ldr	r1, [pc, #160]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b3e:	4b27      	ldr	r3, [pc, #156]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	f023 0202 	bic.w	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	4924      	ldr	r1, [pc, #144]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b50:	4b22      	ldr	r3, [pc, #136]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	4a21      	ldr	r2, [pc, #132]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	4a1e      	ldr	r2, [pc, #120]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b68:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b74:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	4a18      	ldr	r2, [pc, #96]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b80:	4b16      	ldr	r3, [pc, #88]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a15      	ldr	r2, [pc, #84]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f934 	bl	8001df8 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7ff f930 	bl	8001df8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e091      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x71c>
 8002bb2:	e089      	b.n	8002cc8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a08      	ldr	r2, [pc, #32]	@ (8002bdc <HAL_RCC_OscConfig+0x764>)
 8002bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7ff f91a 	bl	8001df8 <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc6:	e00f      	b.n	8002be8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7ff f916 	bl	8001df8 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d908      	bls.n	8002be8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e077      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
 8002bda:	bf00      	nop
 8002bdc:	58024400 	.word	0x58024400
 8002be0:	fffffc0c 	.word	0xfffffc0c
 8002be4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002be8:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd4 <HAL_RCC_OscConfig+0x85c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e9      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x750>
 8002bf4:	e068      	b.n	8002cc8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bf6:	4b37      	ldr	r3, [pc, #220]	@ (8002cd4 <HAL_RCC_OscConfig+0x85c>)
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bfc:	4b35      	ldr	r3, [pc, #212]	@ (8002cd4 <HAL_RCC_OscConfig+0x85c>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d031      	beq.n	8002c6e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d12a      	bne.n	8002c6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d122      	bne.n	8002c6e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d11a      	bne.n	8002c6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	0a5b      	lsrs	r3, r3, #9
 8002c3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c44:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d111      	bne.n	8002c6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0c1b      	lsrs	r3, r3, #16
 8002c4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d108      	bne.n	8002c6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	0e1b      	lsrs	r3, r3, #24
 8002c60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e02b      	b.n	8002cca <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c72:	4b18      	ldr	r3, [pc, #96]	@ (8002cd4 <HAL_RCC_OscConfig+0x85c>)
 8002c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c76:	08db      	lsrs	r3, r3, #3
 8002c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c7c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d01f      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c88:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <HAL_RCC_OscConfig+0x85c>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	4a11      	ldr	r2, [pc, #68]	@ (8002cd4 <HAL_RCC_OscConfig+0x85c>)
 8002c8e:	f023 0301 	bic.w	r3, r3, #1
 8002c92:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c94:	f7ff f8b0 	bl	8001df8 <HAL_GetTick>
 8002c98:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c9a:	bf00      	nop
 8002c9c:	f7ff f8ac 	bl	8001df8 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d0f9      	beq.n	8002c9c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd4 <HAL_RCC_OscConfig+0x85c>)
 8002caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <HAL_RCC_OscConfig+0x860>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cb4:	00d2      	lsls	r2, r2, #3
 8002cb6:	4907      	ldr	r1, [pc, #28]	@ (8002cd4 <HAL_RCC_OscConfig+0x85c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_RCC_OscConfig+0x85c>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	4a04      	ldr	r2, [pc, #16]	@ (8002cd4 <HAL_RCC_OscConfig+0x85c>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3730      	adds	r7, #48	@ 0x30
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	ffff0007 	.word	0xffff0007

08002cdc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e19c      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b8a      	ldr	r3, [pc, #552]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d910      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b87      	ldr	r3, [pc, #540]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 020f 	bic.w	r2, r3, #15
 8002d06:	4985      	ldr	r1, [pc, #532]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b83      	ldr	r3, [pc, #524]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e184      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	4b7b      	ldr	r3, [pc, #492]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d908      	bls.n	8002d4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d3c:	4b78      	ldr	r3, [pc, #480]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	4975      	ldr	r1, [pc, #468]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d010      	beq.n	8002d7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	4b70      	ldr	r3, [pc, #448]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d908      	bls.n	8002d7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	496a      	ldr	r1, [pc, #424]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	4b64      	ldr	r3, [pc, #400]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d908      	bls.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d98:	4b61      	ldr	r3, [pc, #388]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	495e      	ldr	r1, [pc, #376]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	4b59      	ldr	r3, [pc, #356]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d908      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dc6:	4b56      	ldr	r3, [pc, #344]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4953      	ldr	r1, [pc, #332]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d908      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f023 020f 	bic.w	r2, r3, #15
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4947      	ldr	r1, [pc, #284]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d055      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e12:	4b43      	ldr	r3, [pc, #268]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	4940      	ldr	r1, [pc, #256]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d121      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0f6      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e44:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d115      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0ea      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d107      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e5c:	4b30      	ldr	r3, [pc, #192]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0de      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0d6      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7c:	4b28      	ldr	r3, [pc, #160]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f023 0207 	bic.w	r2, r3, #7
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4925      	ldr	r1, [pc, #148]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e8e:	f7fe ffb3 	bl	8001df8 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e96:	f7fe ffaf 	bl	8001df8 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0be      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eac:	4b1c      	ldr	r3, [pc, #112]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d1eb      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d010      	beq.n	8002eec <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d208      	bcs.n	8002eec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eda:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f023 020f 	bic.w	r2, r3, #15
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	490e      	ldr	r1, [pc, #56]	@ (8002f20 <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d214      	bcs.n	8002f24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 020f 	bic.w	r2, r3, #15
 8002f02:	4906      	ldr	r1, [pc, #24]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <HAL_RCC_ClockConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e086      	b.n	800302a <HAL_RCC_ClockConfig+0x34e>
 8002f1c:	52002000 	.word	0x52002000
 8002f20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d010      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	4b3f      	ldr	r3, [pc, #252]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d208      	bcs.n	8002f52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f40:	4b3c      	ldr	r3, [pc, #240]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	4939      	ldr	r1, [pc, #228]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d010      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	4b34      	ldr	r3, [pc, #208]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d208      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f6e:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	492e      	ldr	r1, [pc, #184]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	4b28      	ldr	r3, [pc, #160]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d208      	bcs.n	8002fae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f9c:	4b25      	ldr	r3, [pc, #148]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4922      	ldr	r1, [pc, #136]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d010      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d208      	bcs.n	8002fdc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fca:	4b1a      	ldr	r3, [pc, #104]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4917      	ldr	r1, [pc, #92]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002fdc:	f000 f834 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	4912      	ldr	r1, [pc, #72]	@ (8003038 <HAL_RCC_ClockConfig+0x35c>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <HAL_RCC_ClockConfig+0x358>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	4a0d      	ldr	r2, [pc, #52]	@ (8003038 <HAL_RCC_ClockConfig+0x35c>)
 8003004:	5cd3      	ldrb	r3, [r2, r3]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <HAL_RCC_ClockConfig+0x360>)
 8003012:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003014:	4a0a      	ldr	r2, [pc, #40]	@ (8003040 <HAL_RCC_ClockConfig+0x364>)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800301a:	4b0a      	ldr	r3, [pc, #40]	@ (8003044 <HAL_RCC_ClockConfig+0x368>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe fea0 	bl	8001d64 <HAL_InitTick>
 8003024:	4603      	mov	r3, r0
 8003026:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	58024400 	.word	0x58024400
 8003038:	08008710 	.word	0x08008710
 800303c:	24000004 	.word	0x24000004
 8003040:	24000000 	.word	0x24000000
 8003044:	24000008 	.word	0x24000008

08003048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	@ 0x24
 800304c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304e:	4bb3      	ldr	r3, [pc, #716]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003056:	2b18      	cmp	r3, #24
 8003058:	f200 8155 	bhi.w	8003306 <HAL_RCC_GetSysClockFreq+0x2be>
 800305c:	a201      	add	r2, pc, #4	@ (adr r2, 8003064 <HAL_RCC_GetSysClockFreq+0x1c>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	080030c9 	.word	0x080030c9
 8003068:	08003307 	.word	0x08003307
 800306c:	08003307 	.word	0x08003307
 8003070:	08003307 	.word	0x08003307
 8003074:	08003307 	.word	0x08003307
 8003078:	08003307 	.word	0x08003307
 800307c:	08003307 	.word	0x08003307
 8003080:	08003307 	.word	0x08003307
 8003084:	080030ef 	.word	0x080030ef
 8003088:	08003307 	.word	0x08003307
 800308c:	08003307 	.word	0x08003307
 8003090:	08003307 	.word	0x08003307
 8003094:	08003307 	.word	0x08003307
 8003098:	08003307 	.word	0x08003307
 800309c:	08003307 	.word	0x08003307
 80030a0:	08003307 	.word	0x08003307
 80030a4:	080030f5 	.word	0x080030f5
 80030a8:	08003307 	.word	0x08003307
 80030ac:	08003307 	.word	0x08003307
 80030b0:	08003307 	.word	0x08003307
 80030b4:	08003307 	.word	0x08003307
 80030b8:	08003307 	.word	0x08003307
 80030bc:	08003307 	.word	0x08003307
 80030c0:	08003307 	.word	0x08003307
 80030c4:	080030fb 	.word	0x080030fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030c8:	4b94      	ldr	r3, [pc, #592]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030d4:	4b91      	ldr	r3, [pc, #580]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	08db      	lsrs	r3, r3, #3
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	4a90      	ldr	r2, [pc, #576]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
 80030e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030e6:	e111      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030ea:	61bb      	str	r3, [r7, #24]
      break;
 80030ec:	e10e      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030f0:	61bb      	str	r3, [r7, #24]
      break;
 80030f2:	e10b      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030f6:	61bb      	str	r3, [r7, #24]
      break;
 80030f8:	e108      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030fa:	4b88      	ldr	r3, [pc, #544]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003104:	4b85      	ldr	r3, [pc, #532]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800310e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003110:	4b82      	ldr	r3, [pc, #520]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800311a:	4b80      	ldr	r3, [pc, #512]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	08db      	lsrs	r3, r3, #3
 8003120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80e1 	beq.w	8003300 <HAL_RCC_GetSysClockFreq+0x2b8>
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b02      	cmp	r3, #2
 8003142:	f000 8083 	beq.w	800324c <HAL_RCC_GetSysClockFreq+0x204>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b02      	cmp	r3, #2
 800314a:	f200 80a1 	bhi.w	8003290 <HAL_RCC_GetSysClockFreq+0x248>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x114>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d056      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x1c0>
 800315a:	e099      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800315c:	4b6f      	ldr	r3, [pc, #444]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d02d      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003168:	4b6c      	ldr	r3, [pc, #432]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	08db      	lsrs	r3, r3, #3
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	4a6b      	ldr	r2, [pc, #428]	@ (8003320 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	ee07 3a90 	vmov	s15, r3
 8003180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003192:	4b62      	ldr	r3, [pc, #392]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031a6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800332c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80031c2:	e087      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003330 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d6:	4b51      	ldr	r3, [pc, #324]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800332c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003202:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003206:	e065      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003212:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003334 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321a:	4b40      	ldr	r3, [pc, #256]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322a:	ed97 6a02 	vldr	s12, [r7, #8]
 800322e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800332c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800323e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003246:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800324a:	e043      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003256:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003338 <HAL_RCC_GetSysClockFreq+0x2f0>
 800325a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325e:	4b2f      	ldr	r3, [pc, #188]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003272:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800332c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800328e:	e021      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003334 <HAL_RCC_GetSysClockFreq+0x2ec>
 800329e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a2:	4b1e      	ldr	r3, [pc, #120]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800332c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032d4:	4b11      	ldr	r3, [pc, #68]	@ (800331c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	0a5b      	lsrs	r3, r3, #9
 80032da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032de:	3301      	adds	r3, #1
 80032e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80032f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032f8:	ee17 3a90 	vmov	r3, s15
 80032fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032fe:	e005      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
      break;
 8003304:	e002      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003306:	4b07      	ldr	r3, [pc, #28]	@ (8003324 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003308:	61bb      	str	r3, [r7, #24]
      break;
 800330a:	bf00      	nop
  }

  return sysclockfreq;
 800330c:	69bb      	ldr	r3, [r7, #24]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3724      	adds	r7, #36	@ 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	58024400 	.word	0x58024400
 8003320:	03d09000 	.word	0x03d09000
 8003324:	003d0900 	.word	0x003d0900
 8003328:	007a1200 	.word	0x007a1200
 800332c:	46000000 	.word	0x46000000
 8003330:	4c742400 	.word	0x4c742400
 8003334:	4a742400 	.word	0x4a742400
 8003338:	4af42400 	.word	0x4af42400

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003342:	f7ff fe81 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003346:	4602      	mov	r2, r0
 8003348:	4b10      	ldr	r3, [pc, #64]	@ (800338c <HAL_RCC_GetHCLKFreq+0x50>)
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	490f      	ldr	r1, [pc, #60]	@ (8003390 <HAL_RCC_GetHCLKFreq+0x54>)
 8003354:	5ccb      	ldrb	r3, [r1, r3]
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003360:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <HAL_RCC_GetHCLKFreq+0x50>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	4a09      	ldr	r2, [pc, #36]	@ (8003390 <HAL_RCC_GetHCLKFreq+0x54>)
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	4a07      	ldr	r2, [pc, #28]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x58>)
 8003378:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800337a:	4a07      	ldr	r2, [pc, #28]	@ (8003398 <HAL_RCC_GetHCLKFreq+0x5c>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003380:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x58>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58024400 	.word	0x58024400
 8003390:	08008710 	.word	0x08008710
 8003394:	24000004 	.word	0x24000004
 8003398:	24000000 	.word	0x24000000

0800339c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80033a0:	f7ff ffcc 	bl	800333c <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4904      	ldr	r1, [pc, #16]	@ (80033c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033bc:	4618      	mov	r0, r3
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	58024400 	.word	0x58024400
 80033c4:	08008710 	.word	0x08008710

080033c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80033cc:	f7ff ffb6 	bl	800333c <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4904      	ldr	r1, [pc, #16]	@ (80033f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	58024400 	.word	0x58024400
 80033f0:	08008710 	.word	0x08008710

080033f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f8:	b0c8      	sub	sp, #288	@ 0x120
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003400:	2300      	movs	r3, #0
 8003402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003406:	2300      	movs	r3, #0
 8003408:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800340c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003418:	2500      	movs	r5, #0
 800341a:	ea54 0305 	orrs.w	r3, r4, r5
 800341e:	d049      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003426:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800342a:	d02f      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800342c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003430:	d828      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003432:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003436:	d01a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003438:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800343c:	d822      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003446:	d007      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003448:	e01c      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344a:	4ba7      	ldr	r3, [pc, #668]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	4aa6      	ldr	r2, [pc, #664]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003456:	e01a      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800345c:	3308      	adds	r3, #8
 800345e:	2102      	movs	r1, #2
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fc43 	bl	8004cec <RCCEx_PLL2_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800346c:	e00f      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800346e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003472:	3328      	adds	r3, #40	@ 0x28
 8003474:	2102      	movs	r1, #2
 8003476:	4618      	mov	r0, r3
 8003478:	f001 fcea 	bl	8004e50 <RCCEx_PLL3_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003482:	e004      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800348a:	e000      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800348c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003496:	4b94      	ldr	r3, [pc, #592]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800349e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034a4:	4a90      	ldr	r2, [pc, #576]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034a6:	430b      	orrs	r3, r1
 80034a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80034aa:	e003      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80034b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80034c0:	f04f 0900 	mov.w	r9, #0
 80034c4:	ea58 0309 	orrs.w	r3, r8, r9
 80034c8:	d047      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80034ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d82a      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034d4:	a201      	add	r2, pc, #4	@ (adr r2, 80034dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034f1 	.word	0x080034f1
 80034e0:	080034ff 	.word	0x080034ff
 80034e4:	08003515 	.word	0x08003515
 80034e8:	08003533 	.word	0x08003533
 80034ec:	08003533 	.word	0x08003533
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f0:	4b7d      	ldr	r3, [pc, #500]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f4:	4a7c      	ldr	r2, [pc, #496]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034fc:	e01a      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003502:	3308      	adds	r3, #8
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f001 fbf0 	bl	8004cec <RCCEx_PLL2_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003512:	e00f      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003514:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003518:	3328      	adds	r3, #40	@ 0x28
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f001 fc97 	bl	8004e50 <RCCEx_PLL3_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003528:	e004      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003530:	e000      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003534:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800353c:	4b6a      	ldr	r3, [pc, #424]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800353e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003540:	f023 0107 	bic.w	r1, r3, #7
 8003544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	4a67      	ldr	r2, [pc, #412]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800354c:	430b      	orrs	r3, r1
 800354e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003550:	e003      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003552:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003556:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800355a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003566:	f04f 0b00 	mov.w	fp, #0
 800356a:	ea5a 030b 	orrs.w	r3, sl, fp
 800356e:	d054      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003576:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800357a:	d036      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800357c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003580:	d82f      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003586:	d032      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800358c:	d829      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800358e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003590:	d02f      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003592:	2bc0      	cmp	r3, #192	@ 0xc0
 8003594:	d825      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003596:	2b80      	cmp	r3, #128	@ 0x80
 8003598:	d018      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800359a:	2b80      	cmp	r3, #128	@ 0x80
 800359c:	d821      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80035a2:	2b40      	cmp	r3, #64	@ 0x40
 80035a4:	d007      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80035a6:	e01c      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a8:	4b4f      	ldr	r3, [pc, #316]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ac:	4a4e      	ldr	r2, [pc, #312]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80035b4:	e01e      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ba:	3308      	adds	r3, #8
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 fb94 	bl	8004cec <RCCEx_PLL2_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80035ca:	e013      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035d0:	3328      	adds	r3, #40	@ 0x28
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 fc3b 	bl	8004e50 <RCCEx_PLL3_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80035e0:	e008      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80035e8:	e004      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035ea:	bf00      	nop
 80035ec:	e002      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035ee:	bf00      	nop
 80035f0:	e000      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80035f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80035fc:	4b3a      	ldr	r3, [pc, #232]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003600:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360a:	4a37      	ldr	r2, [pc, #220]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800360c:	430b      	orrs	r3, r1
 800360e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003610:	e003      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003612:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003616:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800361a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003626:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800362a:	2300      	movs	r3, #0
 800362c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003630:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003634:	460b      	mov	r3, r1
 8003636:	4313      	orrs	r3, r2
 8003638:	d05c      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800363e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003640:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003644:	d03b      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003646:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800364a:	d834      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800364c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003650:	d037      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003656:	d82e      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003658:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800365c:	d033      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800365e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003662:	d828      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003668:	d01a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366e:	d822      	bhi.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003678:	d007      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800367a:	e01c      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367c:	4b1a      	ldr	r3, [pc, #104]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	4a19      	ldr	r2, [pc, #100]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003688:	e01e      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800368a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800368e:	3308      	adds	r3, #8
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fb2a 	bl	8004cec <RCCEx_PLL2_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800369e:	e013      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036a4:	3328      	adds	r3, #40	@ 0x28
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 fbd1 	bl	8004e50 <RCCEx_PLL3_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80036b4:	e008      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80036bc:	e004      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80036c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10d      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80036d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036de:	4a02      	ldr	r2, [pc, #8]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036e0:	430b      	orrs	r3, r1
 80036e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80036e4:	e006      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80036e6:	bf00      	nop
 80036e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80036f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800370a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800370e:	460b      	mov	r3, r1
 8003710:	4313      	orrs	r3, r2
 8003712:	d03a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371a:	2b30      	cmp	r3, #48	@ 0x30
 800371c:	d01f      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800371e:	2b30      	cmp	r3, #48	@ 0x30
 8003720:	d819      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003722:	2b20      	cmp	r3, #32
 8003724:	d00c      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003726:	2b20      	cmp	r3, #32
 8003728:	d815      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d019      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800372e:	2b10      	cmp	r3, #16
 8003730:	d111      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003732:	4bae      	ldr	r3, [pc, #696]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003736:	4aad      	ldr	r2, [pc, #692]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800373c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800373e:	e011      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003744:	3308      	adds	r3, #8
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f001 facf 	bl	8004cec <RCCEx_PLL2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003754:	e006      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800375c:	e002      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800375e:	bf00      	nop
 8003760:	e000      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003764:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800376c:	4b9f      	ldr	r3, [pc, #636]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800376e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003770:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377a:	4a9c      	ldr	r2, [pc, #624]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800377c:	430b      	orrs	r3, r1
 800377e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003780:	e003      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003786:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800378a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003796:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800379a:	2300      	movs	r3, #0
 800379c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4313      	orrs	r3, r2
 80037a8:	d051      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b4:	d035      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80037b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ba:	d82e      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80037bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037c0:	d031      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80037c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037c6:	d828      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80037c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037cc:	d01a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d2:	d822      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80037d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037dc:	d007      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80037de:	e01c      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e0:	4b82      	ldr	r3, [pc, #520]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	4a81      	ldr	r2, [pc, #516]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037ec:	e01c      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80037f2:	3308      	adds	r3, #8
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 fa78 	bl	8004cec <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003802:	e011      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003808:	3328      	adds	r3, #40	@ 0x28
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f001 fb1f 	bl	8004e50 <RCCEx_PLL3_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003818:	e006      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003820:	e002      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003828:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003830:	4b6e      	ldr	r3, [pc, #440]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003834:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800383c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800383e:	4a6b      	ldr	r2, [pc, #428]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003840:	430b      	orrs	r3, r1
 8003842:	6513      	str	r3, [r2, #80]	@ 0x50
 8003844:	e003      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003846:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800384a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800384e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800385a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800385e:	2300      	movs	r3, #0
 8003860:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003864:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003868:	460b      	mov	r3, r1
 800386a:	4313      	orrs	r3, r2
 800386c:	d053      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800386e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003878:	d033      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800387a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800387e:	d82c      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003880:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003884:	d02f      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003886:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800388a:	d826      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800388c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003890:	d02b      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003892:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003896:	d820      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800389c:	d012      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800389e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038a2:	d81a      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d022      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ac:	d115      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038b2:	3308      	adds	r3, #8
 80038b4:	2101      	movs	r1, #1
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 fa18 	bl	8004cec <RCCEx_PLL2_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038c2:	e015      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038c8:	3328      	adds	r3, #40	@ 0x28
 80038ca:	2101      	movs	r1, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f001 fabf 	bl	8004e50 <RCCEx_PLL3_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038d8:	e00a      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80038e0:	e006      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038e2:	bf00      	nop
 80038e4:	e004      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038e6:	bf00      	nop
 80038e8:	e002      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80038ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038f8:	4b3c      	ldr	r3, [pc, #240]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003906:	4a39      	ldr	r2, [pc, #228]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003908:	430b      	orrs	r3, r1
 800390a:	6513      	str	r3, [r2, #80]	@ 0x50
 800390c:	e003      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003912:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003916:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003922:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003926:	2300      	movs	r3, #0
 8003928:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800392c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003930:	460b      	mov	r3, r1
 8003932:	4313      	orrs	r3, r2
 8003934:	d060      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800393a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800393e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003942:	d039      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003944:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8003948:	d832      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800394a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800394e:	d035      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003950:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003954:	d82c      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800395a:	d031      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003960:	d826      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003962:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003966:	d02d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003968:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800396c:	d820      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800396e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003972:	d012      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003974:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003978:	d81a      	bhi.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d024      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800397e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003982:	d115      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003988:	3308      	adds	r3, #8
 800398a:	2101      	movs	r1, #1
 800398c:	4618      	mov	r0, r3
 800398e:	f001 f9ad 	bl	8004cec <RCCEx_PLL2_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003998:	e017      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800399a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800399e:	3328      	adds	r3, #40	@ 0x28
 80039a0:	2101      	movs	r1, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	f001 fa54 	bl	8004e50 <RCCEx_PLL3_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039ae:	e00c      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80039b6:	e008      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039b8:	bf00      	nop
 80039ba:	e006      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039bc:	bf00      	nop
 80039be:	e004      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039c0:	bf00      	nop
 80039c2:	e002      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10e      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039e2:	4a02      	ldr	r2, [pc, #8]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e8:	e006      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80039ea:	bf00      	nop
 80039ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80039f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a00:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a12:	460b      	mov	r3, r1
 8003a14:	4313      	orrs	r3, r2
 8003a16:	d037      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a22:	d00e      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a28:	d816      	bhi.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d018      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a32:	d111      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a34:	4bc4      	ldr	r3, [pc, #784]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a38:	4ac3      	ldr	r2, [pc, #780]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a40:	e00f      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a46:	3308      	adds	r3, #8
 8003a48:	2101      	movs	r1, #1
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 f94e 	bl	8004cec <RCCEx_PLL2_Config>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a56:	e004      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003a5e:	e000      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a6a:	4bb7      	ldr	r3, [pc, #732]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a6e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a78:	4ab3      	ldr	r2, [pc, #716]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a7e:	e003      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003a84:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	d039      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d81c      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003af5 	.word	0x08003af5
 8003abc:	08003ac9 	.word	0x08003ac9
 8003ac0:	08003ad7 	.word	0x08003ad7
 8003ac4:	08003af5 	.word	0x08003af5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac8:	4b9f      	ldr	r3, [pc, #636]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003acc:	4a9e      	ldr	r2, [pc, #632]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ad4:	e00f      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ada:	3308      	adds	r3, #8
 8003adc:	2102      	movs	r1, #2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f001 f904 	bl	8004cec <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003aea:	e004      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003af2:	e000      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003afe:	4b92      	ldr	r3, [pc, #584]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b02:	f023 0103 	bic.w	r1, r3, #3
 8003b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b0c:	4a8e      	ldr	r2, [pc, #568]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b12:	e003      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b24:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f000 8099 	beq.w	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b3e:	4b83      	ldr	r3, [pc, #524]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a82      	ldr	r2, [pc, #520]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b4a:	f7fe f955 	bl	8001df8 <HAL_GetTick>
 8003b4e:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b52:	e00b      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b54:	f7fe f950 	bl	8001df8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b64      	cmp	r3, #100	@ 0x64
 8003b62:	d903      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003b6a:	e005      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b6c:	4b77      	ldr	r3, [pc, #476]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ed      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d173      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b80:	4b71      	ldr	r3, [pc, #452]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b8c:	4053      	eors	r3, r2
 8003b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d015      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b96:	4b6c      	ldr	r3, [pc, #432]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ba2:	4b69      	ldr	r3, [pc, #420]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	4a68      	ldr	r2, [pc, #416]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bae:	4b66      	ldr	r3, [pc, #408]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb2:	4a65      	ldr	r2, [pc, #404]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bba:	4a63      	ldr	r2, [pc, #396]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003bc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bce:	d118      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fe f912 	bl	8001df8 <HAL_GetTick>
 8003bd4:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd8:	e00d      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe f90d 	bl	8001df8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003be4:	1ad2      	subs	r2, r2, r3
 8003be6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d903      	bls.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8003bf4:	e005      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bf6:	4b54      	ldr	r3, [pc, #336]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0eb      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003c02:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d129      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c1a:	d10e      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c2c:	091a      	lsrs	r2, r3, #4
 8003c2e:	4b48      	ldr	r3, [pc, #288]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	4a45      	ldr	r2, [pc, #276]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6113      	str	r3, [r2, #16]
 8003c38:	e005      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003c3a:	4b43      	ldr	r3, [pc, #268]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	4a42      	ldr	r2, [pc, #264]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c44:	6113      	str	r3, [r2, #16]
 8003c46:	4b40      	ldr	r3, [pc, #256]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c48:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c56:	4a3c      	ldr	r2, [pc, #240]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5c:	e008      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8003c66:	e003      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003c6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f002 0301 	and.w	r3, r2, #1
 8003c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f000 8090 	beq.w	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c9a:	2b28      	cmp	r3, #40	@ 0x28
 8003c9c:	d870      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	08003d89 	.word	0x08003d89
 8003ca8:	08003d81 	.word	0x08003d81
 8003cac:	08003d81 	.word	0x08003d81
 8003cb0:	08003d81 	.word	0x08003d81
 8003cb4:	08003d81 	.word	0x08003d81
 8003cb8:	08003d81 	.word	0x08003d81
 8003cbc:	08003d81 	.word	0x08003d81
 8003cc0:	08003d81 	.word	0x08003d81
 8003cc4:	08003d55 	.word	0x08003d55
 8003cc8:	08003d81 	.word	0x08003d81
 8003ccc:	08003d81 	.word	0x08003d81
 8003cd0:	08003d81 	.word	0x08003d81
 8003cd4:	08003d81 	.word	0x08003d81
 8003cd8:	08003d81 	.word	0x08003d81
 8003cdc:	08003d81 	.word	0x08003d81
 8003ce0:	08003d81 	.word	0x08003d81
 8003ce4:	08003d6b 	.word	0x08003d6b
 8003ce8:	08003d81 	.word	0x08003d81
 8003cec:	08003d81 	.word	0x08003d81
 8003cf0:	08003d81 	.word	0x08003d81
 8003cf4:	08003d81 	.word	0x08003d81
 8003cf8:	08003d81 	.word	0x08003d81
 8003cfc:	08003d81 	.word	0x08003d81
 8003d00:	08003d81 	.word	0x08003d81
 8003d04:	08003d89 	.word	0x08003d89
 8003d08:	08003d81 	.word	0x08003d81
 8003d0c:	08003d81 	.word	0x08003d81
 8003d10:	08003d81 	.word	0x08003d81
 8003d14:	08003d81 	.word	0x08003d81
 8003d18:	08003d81 	.word	0x08003d81
 8003d1c:	08003d81 	.word	0x08003d81
 8003d20:	08003d81 	.word	0x08003d81
 8003d24:	08003d89 	.word	0x08003d89
 8003d28:	08003d81 	.word	0x08003d81
 8003d2c:	08003d81 	.word	0x08003d81
 8003d30:	08003d81 	.word	0x08003d81
 8003d34:	08003d81 	.word	0x08003d81
 8003d38:	08003d81 	.word	0x08003d81
 8003d3c:	08003d81 	.word	0x08003d81
 8003d40:	08003d81 	.word	0x08003d81
 8003d44:	08003d89 	.word	0x08003d89
 8003d48:	58024400 	.word	0x58024400
 8003d4c:	58024800 	.word	0x58024800
 8003d50:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d58:	3308      	adds	r3, #8
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ffc5 	bl	8004cec <RCCEx_PLL2_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d68:	e00f      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6e:	3328      	adds	r3, #40	@ 0x28
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 f86c 	bl	8004e50 <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d92:	4bc0      	ldr	r3, [pc, #768]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003da2:	4abc      	ldr	r2, [pc, #752]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003dae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	f002 0302 	and.w	r3, r2, #2
 8003dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003dc8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	d043      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dda:	2b05      	cmp	r3, #5
 8003ddc:	d824      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003dde:	a201      	add	r2, pc, #4	@ (adr r2, 8003de4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de4:	08003e31 	.word	0x08003e31
 8003de8:	08003dfd 	.word	0x08003dfd
 8003dec:	08003e13 	.word	0x08003e13
 8003df0:	08003e31 	.word	0x08003e31
 8003df4:	08003e31 	.word	0x08003e31
 8003df8:	08003e31 	.word	0x08003e31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e00:	3308      	adds	r3, #8
 8003e02:	2101      	movs	r1, #1
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 ff71 	bl	8004cec <RCCEx_PLL2_Config>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e10:	e00f      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e16:	3328      	adds	r3, #40	@ 0x28
 8003e18:	2101      	movs	r1, #1
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 f818 	bl	8004e50 <RCCEx_PLL3_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e26:	e004      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e32:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e3a:	4b96      	ldr	r3, [pc, #600]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3e:	f023 0107 	bic.w	r1, r3, #7
 8003e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e4a:	4a92      	ldr	r2, [pc, #584]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e50:	e003      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e52:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003e56:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f002 0304 	and.w	r3, r2, #4
 8003e66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e70:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4313      	orrs	r3, r2
 8003e78:	d043      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d824      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003e86:	a201      	add	r2, pc, #4	@ (adr r2, 8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003ed9 	.word	0x08003ed9
 8003e90:	08003ea5 	.word	0x08003ea5
 8003e94:	08003ebb 	.word	0x08003ebb
 8003e98:	08003ed9 	.word	0x08003ed9
 8003e9c:	08003ed9 	.word	0x08003ed9
 8003ea0:	08003ed9 	.word	0x08003ed9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 ff1d 	bl	8004cec <RCCEx_PLL2_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003eb8:	e00f      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ebe:	3328      	adds	r3, #40	@ 0x28
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 ffc4 	bl	8004e50 <RCCEx_PLL3_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ece:	e004      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003ed6:	e000      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10b      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee6:	f023 0107 	bic.w	r1, r3, #7
 8003eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ef2:	4a68      	ldr	r2, [pc, #416]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ef8:	e003      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003efe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f002 0320 	and.w	r3, r2, #32
 8003f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f12:	2300      	movs	r3, #0
 8003f14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	d055      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f2e:	d033      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f34:	d82c      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3a:	d02f      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f40:	d826      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f46:	d02b      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f4c:	d820      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f52:	d012      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003f54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f58:	d81a      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d022      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003f5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f62:	d115      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f68:	3308      	adds	r3, #8
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 febd 	bl	8004cec <RCCEx_PLL2_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f78:	e015      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f7e:	3328      	adds	r3, #40	@ 0x28
 8003f80:	2102      	movs	r1, #2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 ff64 	bl	8004e50 <RCCEx_PLL3_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8003f96:	e006      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f98:	bf00      	nop
 8003f9a:	e004      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003f9c:	bf00      	nop
 8003f9e:	e002      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fae:	4b39      	ldr	r3, [pc, #228]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fbe:	4a35      	ldr	r2, [pc, #212]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fc4:	e003      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003fca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003fda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003fe4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d058      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ff2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ff6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ffa:	d033      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003ffc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004000:	d82c      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004006:	d02f      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400c:	d826      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800400e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004012:	d02b      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004014:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004018:	d820      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800401a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800401e:	d012      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004024:	d81a      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d022      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800402a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402e:	d115      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004034:	3308      	adds	r3, #8
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f000 fe57 	bl	8004cec <RCCEx_PLL2_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004044:	e015      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800404a:	3328      	adds	r3, #40	@ 0x28
 800404c:	2102      	movs	r1, #2
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fefe 	bl	8004e50 <RCCEx_PLL3_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800405a:	e00a      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004062:	e006      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004064:	bf00      	nop
 8004066:	e004      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004068:	bf00      	nop
 800406a:	e002      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004072:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10e      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800407a:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004086:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800408a:	4a02      	ldr	r2, [pc, #8]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800408c:	430b      	orrs	r3, r1
 800408e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004092:	bf00      	nop
 8004094:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800409c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040ba:	460b      	mov	r3, r1
 80040bc:	4313      	orrs	r3, r2
 80040be:	d055      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040cc:	d033      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80040ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040d2:	d82c      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d8:	d02f      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80040da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040de:	d826      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040e4:	d02b      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80040e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040ea:	d820      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f0:	d012      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80040f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040f6:	d81a      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d022      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80040fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004100:	d115      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004106:	3308      	adds	r3, #8
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fdee 	bl	8004cec <RCCEx_PLL2_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004116:	e015      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800411c:	3328      	adds	r3, #40	@ 0x28
 800411e:	2102      	movs	r1, #2
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fe95 	bl	8004e50 <RCCEx_PLL3_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800412c:	e00a      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004134:	e006      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004136:	bf00      	nop
 8004138:	e004      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800413a:	bf00      	nop
 800413c:	e002      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004144:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800414c:	4ba1      	ldr	r3, [pc, #644]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800414e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004150:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004158:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800415c:	4a9d      	ldr	r2, [pc, #628]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800415e:	430b      	orrs	r3, r1
 8004160:	6593      	str	r3, [r2, #88]	@ 0x58
 8004162:	e003      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004168:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800416c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f002 0308 	and.w	r3, r2, #8
 8004178:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004182:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004186:	460b      	mov	r3, r1
 8004188:	4313      	orrs	r3, r2
 800418a:	d01e      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800418c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800419e:	3328      	adds	r3, #40	@ 0x28
 80041a0:	2102      	movs	r1, #2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fe54 	bl	8004e50 <RCCEx_PLL3_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041b4:	4b87      	ldr	r3, [pc, #540]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041c4:	4a83      	ldr	r2, [pc, #524]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80041c6:	430b      	orrs	r3, r1
 80041c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f002 0310 	and.w	r3, r2, #16
 80041d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80041e4:	460b      	mov	r3, r1
 80041e6:	4313      	orrs	r3, r2
 80041e8:	d01e      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f6:	d10c      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041fc:	3328      	adds	r3, #40	@ 0x28
 80041fe:	2102      	movs	r1, #2
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fe25 	bl	8004e50 <RCCEx_PLL3_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004212:	4b70      	ldr	r3, [pc, #448]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800421a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800421e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004222:	4a6c      	ldr	r2, [pc, #432]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004224:	430b      	orrs	r3, r1
 8004226:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004238:	2300      	movs	r3, #0
 800423a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800423e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004242:	460b      	mov	r3, r1
 8004244:	4313      	orrs	r3, r2
 8004246:	d03e      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004248:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800424c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004254:	d022      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004256:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800425a:	d81b      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004264:	d00b      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004266:	e015      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800426c:	3308      	adds	r3, #8
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fd3b 	bl	8004cec <RCCEx_PLL2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800427c:	e00f      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800427e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004282:	3328      	adds	r3, #40	@ 0x28
 8004284:	2102      	movs	r1, #2
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fde2 	bl	8004e50 <RCCEx_PLL3_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004292:	e004      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800429a:	e000      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800429c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042a6:	4b4b      	ldr	r3, [pc, #300]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80042b6:	4a47      	ldr	r2, [pc, #284]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80042bc:	e003      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80042c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042d4:	2300      	movs	r3, #0
 80042d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d03b      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042ee:	d01f      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80042f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042f4:	d818      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80042f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042fa:	d003      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80042fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004300:	d007      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004302:	e011      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004304:	4b33      	ldr	r3, [pc, #204]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	4a32      	ldr	r2, [pc, #200]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800430a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800430e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004310:	e00f      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004312:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004316:	3328      	adds	r3, #40	@ 0x28
 8004318:	2101      	movs	r1, #1
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fd98 	bl	8004e50 <RCCEx_PLL3_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004326:	e004      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004332:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800433a:	4b26      	ldr	r3, [pc, #152]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800433c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004342:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434a:	4a22      	ldr	r2, [pc, #136]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800434c:	430b      	orrs	r3, r1
 800434e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004350:	e003      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004352:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004356:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800435a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004366:	673b      	str	r3, [r7, #112]	@ 0x70
 8004368:	2300      	movs	r3, #0
 800436a:	677b      	str	r3, [r7, #116]	@ 0x74
 800436c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004370:	460b      	mov	r3, r1
 8004372:	4313      	orrs	r3, r2
 8004374:	d034      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800437a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004384:	d007      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004386:	e011      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004388:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	4a11      	ldr	r2, [pc, #68]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800438e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004392:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004394:	e00e      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004396:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800439a:	3308      	adds	r3, #8
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fca4 	bl	8004cec <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043aa:	e003      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80043b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10d      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043bc:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ca:	4a02      	ldr	r2, [pc, #8]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043d0:	e006      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80043d2:	bf00      	nop
 80043d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80043dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80043ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ee:	2300      	movs	r3, #0
 80043f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80043f6:	460b      	mov	r3, r1
 80043f8:	4313      	orrs	r3, r2
 80043fa:	d00c      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004400:	3328      	adds	r3, #40	@ 0x28
 8004402:	2102      	movs	r1, #2
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fd23 	bl	8004e50 <RCCEx_PLL3_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004422:	663b      	str	r3, [r7, #96]	@ 0x60
 8004424:	2300      	movs	r3, #0
 8004426:	667b      	str	r3, [r7, #100]	@ 0x64
 8004428:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800442c:	460b      	mov	r3, r1
 800442e:	4313      	orrs	r3, r2
 8004430:	d038      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800443e:	d018      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004444:	d811      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800444a:	d014      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800444c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004450:	d80b      	bhi.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d011      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800445a:	d106      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445c:	4bc3      	ldr	r3, [pc, #780]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	4ac2      	ldr	r2, [pc, #776]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004462:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004466:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004468:	e008      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004470:	e004      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800447a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004484:	4bb9      	ldr	r3, [pc, #740]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800448c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004494:	4ab5      	ldr	r2, [pc, #724]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004496:	430b      	orrs	r3, r1
 8004498:	6553      	str	r3, [r2, #84]	@ 0x54
 800449a:	e003      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80044a0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044b2:	2300      	movs	r3, #0
 80044b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044ba:	460b      	mov	r3, r1
 80044bc:	4313      	orrs	r3, r2
 80044be:	d009      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044c0:	4baa      	ldr	r3, [pc, #680]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ce:	4aa7      	ldr	r2, [pc, #668]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e2:	2300      	movs	r3, #0
 80044e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80044e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80044ea:	460b      	mov	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044f0:	4b9e      	ldr	r3, [pc, #632]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80044f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	4a9b      	ldr	r2, [pc, #620]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004500:	430b      	orrs	r3, r1
 8004502:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004504:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004510:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004512:	2300      	movs	r3, #0
 8004514:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004516:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800451a:	460b      	mov	r3, r1
 800451c:	4313      	orrs	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004520:	4b92      	ldr	r3, [pc, #584]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004524:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8004528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800452c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452e:	4a8f      	ldr	r2, [pc, #572]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004530:	430b      	orrs	r3, r1
 8004532:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004540:	643b      	str	r3, [r7, #64]	@ 0x40
 8004542:	2300      	movs	r3, #0
 8004544:	647b      	str	r3, [r7, #68]	@ 0x44
 8004546:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800454a:	460b      	mov	r3, r1
 800454c:	4313      	orrs	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004550:	4b86      	ldr	r3, [pc, #536]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	4a85      	ldr	r2, [pc, #532]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004556:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800455a:	6113      	str	r3, [r2, #16]
 800455c:	4b83      	ldr	r3, [pc, #524]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800455e:	6919      	ldr	r1, [r3, #16]
 8004560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004564:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004568:	4a80      	ldr	r2, [pc, #512]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800456a:	430b      	orrs	r3, r1
 800456c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800456e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004576:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800457a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800457c:	2300      	movs	r3, #0
 800457e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004580:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004584:	460b      	mov	r3, r1
 8004586:	4313      	orrs	r3, r2
 8004588:	d009      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800458a:	4b78      	ldr	r3, [pc, #480]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800458c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004592:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004598:	4a74      	ldr	r2, [pc, #464]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800459a:	430b      	orrs	r3, r1
 800459c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800459e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ac:	2300      	movs	r3, #0
 80045ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045b4:	460b      	mov	r3, r1
 80045b6:	4313      	orrs	r3, r2
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045ba:	4b6c      	ldr	r3, [pc, #432]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045be:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ca:	4a68      	ldr	r2, [pc, #416]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80045cc:	430b      	orrs	r3, r1
 80045ce:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	2100      	movs	r1, #0
 80045da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045e2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045e6:	460b      	mov	r3, r1
 80045e8:	4313      	orrs	r3, r2
 80045ea:	d011      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045f0:	3308      	adds	r3, #8
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fb79 	bl	8004cec <RCCEx_PLL2_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004600:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800460c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	2100      	movs	r1, #0
 800461a:	6239      	str	r1, [r7, #32]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
 8004622:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004626:	460b      	mov	r3, r1
 8004628:	4313      	orrs	r3, r2
 800462a:	d011      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800462c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004630:	3308      	adds	r3, #8
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fb59 	bl	8004cec <RCCEx_PLL2_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004640:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800464c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	2100      	movs	r1, #0
 800465a:	61b9      	str	r1, [r7, #24]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004666:	460b      	mov	r3, r1
 8004668:	4313      	orrs	r3, r2
 800466a:	d011      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800466c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004670:	3308      	adds	r3, #8
 8004672:	2102      	movs	r1, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f000 fb39 	bl	8004cec <RCCEx_PLL2_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004680:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800468c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004690:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	2100      	movs	r1, #0
 800469a:	6139      	str	r1, [r7, #16]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046a6:	460b      	mov	r3, r1
 80046a8:	4313      	orrs	r3, r2
 80046aa:	d011      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046b0:	3328      	adds	r3, #40	@ 0x28
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fbcb 	bl	8004e50 <RCCEx_PLL3_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80046c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80046cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	2100      	movs	r1, #0
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046e6:	460b      	mov	r3, r1
 80046e8:	4313      	orrs	r3, r2
 80046ea:	d011      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046f0:	3328      	adds	r3, #40	@ 0x28
 80046f2:	2101      	movs	r1, #1
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fbab 	bl	8004e50 <RCCEx_PLL3_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004700:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800470c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004710:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	2100      	movs	r1, #0
 800471a:	6039      	str	r1, [r7, #0]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004726:	460b      	mov	r3, r1
 8004728:	4313      	orrs	r3, r2
 800472a:	d011      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800472c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004730:	3328      	adds	r3, #40	@ 0x28
 8004732:	2102      	movs	r1, #2
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fb8b 	bl	8004e50 <RCCEx_PLL3_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8004740:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004748:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800474c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8004750:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e000      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
}
 800475e:	4618      	mov	r0, r3
 8004760:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004764:	46bd      	mov	sp, r7
 8004766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800476a:	bf00      	nop
 800476c:	58024400 	.word	0x58024400

08004770 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004774:	f7fe fde2 	bl	800333c <HAL_RCC_GetHCLKFreq>
 8004778:	4602      	mov	r2, r0
 800477a:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	4904      	ldr	r1, [pc, #16]	@ (8004798 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004786:	5ccb      	ldrb	r3, [r1, r3]
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004790:	4618      	mov	r0, r3
 8004792:	bd80      	pop	{r7, pc}
 8004794:	58024400 	.word	0x58024400
 8004798:	08008710 	.word	0x08008710

0800479c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800479c:	b480      	push	{r7}
 800479e:	b089      	sub	sp, #36	@ 0x24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047a4:	4ba1      	ldr	r3, [pc, #644]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047ae:	4b9f      	ldr	r3, [pc, #636]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	0b1b      	lsrs	r3, r3, #12
 80047b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047ba:	4b9c      	ldr	r3, [pc, #624]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047c6:	4b99      	ldr	r3, [pc, #612]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ca:	08db      	lsrs	r3, r3, #3
 80047cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8111 	beq.w	8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	f000 8083 	beq.w	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	f200 80a1 	bhi.w	800493c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d056      	beq.n	80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004806:	e099      	b.n	800493c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004808:	4b88      	ldr	r3, [pc, #544]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b00      	cmp	r3, #0
 8004812:	d02d      	beq.n	8004870 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004814:	4b85      	ldr	r3, [pc, #532]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	08db      	lsrs	r3, r3, #3
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	4a84      	ldr	r2, [pc, #528]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
 8004824:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004852:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800486e:	e087      	b.n	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800487e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004882:	4b6a      	ldr	r3, [pc, #424]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004892:	ed97 6a03 	vldr	s12, [r7, #12]
 8004896:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800489a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b2:	e065      	b.n	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c6:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f6:	e043      	b.n	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490a:	4b48      	ldr	r3, [pc, #288]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491a:	ed97 6a03 	vldr	s12, [r7, #12]
 800491e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800492e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800493a:	e021      	b.n	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800494a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494e:	4b37      	ldr	r3, [pc, #220]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004962:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004980:	4b2a      	ldr	r3, [pc, #168]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004984:	0a5b      	lsrs	r3, r3, #9
 8004986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800499a:	edd7 6a07 	vldr	s13, [r7, #28]
 800499e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a6:	ee17 2a90 	vmov	r2, s15
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049ae:	4b1f      	ldr	r3, [pc, #124]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d4:	ee17 2a90 	vmov	r2, s15
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049dc:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e0:	0e1b      	lsrs	r3, r3, #24
 80049e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80049fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a02:	ee17 2a90 	vmov	r2, s15
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a0a:	e008      	b.n	8004a1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	609a      	str	r2, [r3, #8]
}
 8004a1e:	bf00      	nop
 8004a20:	3724      	adds	r7, #36	@ 0x24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	03d09000 	.word	0x03d09000
 8004a34:	46000000 	.word	0x46000000
 8004a38:	4c742400 	.word	0x4c742400
 8004a3c:	4a742400 	.word	0x4a742400
 8004a40:	4af42400 	.word	0x4af42400

08004a44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b089      	sub	sp, #36	@ 0x24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a4c:	4ba1      	ldr	r3, [pc, #644]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a56:	4b9f      	ldr	r3, [pc, #636]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	0d1b      	lsrs	r3, r3, #20
 8004a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a62:	4b9c      	ldr	r3, [pc, #624]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a6e:	4b99      	ldr	r3, [pc, #612]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8111 	beq.w	8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	f000 8083 	beq.w	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	f200 80a1 	bhi.w	8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d056      	beq.n	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004aae:	e099      	b.n	8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ab0:	4b88      	ldr	r3, [pc, #544]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d02d      	beq.n	8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004abc:	4b85      	ldr	r3, [pc, #532]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	08db      	lsrs	r3, r3, #3
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	4a84      	ldr	r2, [pc, #528]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8004acc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	4b7b      	ldr	r3, [pc, #492]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b16:	e087      	b.n	8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b5a:	e065      	b.n	8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6e:	4b59      	ldr	r3, [pc, #356]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9e:	e043      	b.n	8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb2:	4b48      	ldr	r3, [pc, #288]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004be2:	e021      	b.n	8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b37      	ldr	r3, [pc, #220]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c28:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	0a5b      	lsrs	r3, r3, #9
 8004c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4e:	ee17 2a90 	vmov	r2, s15
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c56:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7c:	ee17 2a90 	vmov	r2, s15
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c84:	4b13      	ldr	r3, [pc, #76]	@ (8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c88:	0e1b      	lsrs	r3, r3, #24
 8004c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004caa:	ee17 2a90 	vmov	r2, s15
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
}
 8004cc6:	bf00      	nop
 8004cc8:	3724      	adds	r7, #36	@ 0x24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	58024400 	.word	0x58024400
 8004cd8:	03d09000 	.word	0x03d09000
 8004cdc:	46000000 	.word	0x46000000
 8004ce0:	4c742400 	.word	0x4c742400
 8004ce4:	4a742400 	.word	0x4a742400
 8004ce8:	4af42400 	.word	0x4af42400

08004cec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cfa:	4b53      	ldr	r3, [pc, #332]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d101      	bne.n	8004d0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e099      	b.n	8004e3e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d16:	f7fd f86f 	bl	8001df8 <HAL_GetTick>
 8004d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d1c:	e008      	b.n	8004d30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d1e:	f7fd f86b 	bl	8001df8 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e086      	b.n	8004e3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d30:	4b45      	ldr	r3, [pc, #276]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f0      	bne.n	8004d1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d3c:	4b42      	ldr	r3, [pc, #264]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	031b      	lsls	r3, r3, #12
 8004d4a:	493f      	ldr	r1, [pc, #252]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	025b      	lsls	r3, r3, #9
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	061b      	lsls	r3, r3, #24
 8004d7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d80:	4931      	ldr	r1, [pc, #196]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d86:	4b30      	ldr	r3, [pc, #192]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	492d      	ldr	r1, [pc, #180]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d98:	4b2b      	ldr	r3, [pc, #172]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9c:	f023 0220 	bic.w	r2, r3, #32
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	4928      	ldr	r1, [pc, #160]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004daa:	4b27      	ldr	r3, [pc, #156]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	4a26      	ldr	r2, [pc, #152]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004db0:	f023 0310 	bic.w	r3, r3, #16
 8004db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004db6:	4b24      	ldr	r3, [pc, #144]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dba:	4b24      	ldr	r3, [pc, #144]	@ (8004e4c <RCCEx_PLL2_Config+0x160>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	69d2      	ldr	r2, [r2, #28]
 8004dc2:	00d2      	lsls	r2, r2, #3
 8004dc4:	4920      	ldr	r1, [pc, #128]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dca:	4b1f      	ldr	r3, [pc, #124]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dce:	4a1e      	ldr	r2, [pc, #120]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004dd0:	f043 0310 	orr.w	r3, r3, #16
 8004dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	4a19      	ldr	r2, [pc, #100]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004de2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004de6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004de8:	e00f      	b.n	8004e0a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d106      	bne.n	8004dfe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004df0:	4b15      	ldr	r3, [pc, #84]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	4a14      	ldr	r2, [pc, #80]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dfc:	e005      	b.n	8004e0a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dfe:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	4a11      	ldr	r2, [pc, #68]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004e04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e08:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004e10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e16:	f7fc ffef 	bl	8001df8 <HAL_GetTick>
 8004e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e1c:	e008      	b.n	8004e30 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e1e:	f7fc ffeb 	bl	8001df8 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e006      	b.n	8004e3e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e30:	4b05      	ldr	r3, [pc, #20]	@ (8004e48 <RCCEx_PLL2_Config+0x15c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	ffff0007 	.word	0xffff0007

08004e50 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e5e:	4b53      	ldr	r3, [pc, #332]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d101      	bne.n	8004e6e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e099      	b.n	8004fa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a4e      	ldr	r2, [pc, #312]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004e74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7a:	f7fc ffbd 	bl	8001df8 <HAL_GetTick>
 8004e7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e80:	e008      	b.n	8004e94 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e82:	f7fc ffb9 	bl	8001df8 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e086      	b.n	8004fa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e94:	4b45      	ldr	r3, [pc, #276]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ea0:	4b42      	ldr	r3, [pc, #264]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	051b      	lsls	r3, r3, #20
 8004eae:	493f      	ldr	r1, [pc, #252]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	025b      	lsls	r3, r3, #9
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	061b      	lsls	r3, r3, #24
 8004ee0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ee4:	4931      	ldr	r1, [pc, #196]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004eea:	4b30      	ldr	r3, [pc, #192]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	492d      	ldr	r1, [pc, #180]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004efc:	4b2b      	ldr	r3, [pc, #172]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	4928      	ldr	r1, [pc, #160]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f0e:	4b27      	ldr	r3, [pc, #156]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f12:	4a26      	ldr	r2, [pc, #152]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f1a:	4b24      	ldr	r3, [pc, #144]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f1e:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <RCCEx_PLL3_Config+0x160>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	69d2      	ldr	r2, [r2, #28]
 8004f26:	00d2      	lsls	r2, r2, #3
 8004f28:	4920      	ldr	r1, [pc, #128]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	4a1e      	ldr	r2, [pc, #120]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f40:	4b1a      	ldr	r3, [pc, #104]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	4a19      	ldr	r2, [pc, #100]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f4c:	e00f      	b.n	8004f6e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f54:	4b15      	ldr	r3, [pc, #84]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f58:	4a14      	ldr	r2, [pc, #80]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f60:	e005      	b.n	8004f6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f62:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	4a11      	ldr	r2, [pc, #68]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a0e      	ldr	r2, [pc, #56]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7a:	f7fc ff3d 	bl	8001df8 <HAL_GetTick>
 8004f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f80:	e008      	b.n	8004f94 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f82:	f7fc ff39 	bl	8001df8 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e006      	b.n	8004fa2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f94:	4b05      	ldr	r3, [pc, #20]	@ (8004fac <RCCEx_PLL3_Config+0x15c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f0      	beq.n	8004f82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	ffff0007 	.word	0xffff0007

08004fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e049      	b.n	800505a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fc fba0 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f001 f9e8 	bl	80063c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e049      	b.n	8005108 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f841 	bl	8005110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f001 f991 	bl	80063c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d109      	bne.n	8005148 <HAL_TIM_PWM_Start+0x24>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	bf14      	ite	ne
 8005140:	2301      	movne	r3, #1
 8005142:	2300      	moveq	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	e03c      	b.n	80051c2 <HAL_TIM_PWM_Start+0x9e>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b04      	cmp	r3, #4
 800514c:	d109      	bne.n	8005162 <HAL_TIM_PWM_Start+0x3e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b01      	cmp	r3, #1
 8005158:	bf14      	ite	ne
 800515a:	2301      	movne	r3, #1
 800515c:	2300      	moveq	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	e02f      	b.n	80051c2 <HAL_TIM_PWM_Start+0x9e>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d109      	bne.n	800517c <HAL_TIM_PWM_Start+0x58>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	bf14      	ite	ne
 8005174:	2301      	movne	r3, #1
 8005176:	2300      	moveq	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	e022      	b.n	80051c2 <HAL_TIM_PWM_Start+0x9e>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b0c      	cmp	r3, #12
 8005180:	d109      	bne.n	8005196 <HAL_TIM_PWM_Start+0x72>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b01      	cmp	r3, #1
 800518c:	bf14      	ite	ne
 800518e:	2301      	movne	r3, #1
 8005190:	2300      	moveq	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	e015      	b.n	80051c2 <HAL_TIM_PWM_Start+0x9e>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b10      	cmp	r3, #16
 800519a:	d109      	bne.n	80051b0 <HAL_TIM_PWM_Start+0x8c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	bf14      	ite	ne
 80051a8:	2301      	movne	r3, #1
 80051aa:	2300      	moveq	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e008      	b.n	80051c2 <HAL_TIM_PWM_Start+0x9e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	bf14      	ite	ne
 80051bc:	2301      	movne	r3, #1
 80051be:	2300      	moveq	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e0a1      	b.n	800530e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <HAL_TIM_PWM_Start+0xb6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051d8:	e023      	b.n	8005222 <HAL_TIM_PWM_Start+0xfe>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0xc6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051e8:	e01b      	b.n	8005222 <HAL_TIM_PWM_Start+0xfe>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Start+0xd6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051f8:	e013      	b.n	8005222 <HAL_TIM_PWM_Start+0xfe>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	d104      	bne.n	800520a <HAL_TIM_PWM_Start+0xe6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005208:	e00b      	b.n	8005222 <HAL_TIM_PWM_Start+0xfe>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b10      	cmp	r3, #16
 800520e:	d104      	bne.n	800521a <HAL_TIM_PWM_Start+0xf6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005218:	e003      	b.n	8005222 <HAL_TIM_PWM_Start+0xfe>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2201      	movs	r2, #1
 8005228:	6839      	ldr	r1, [r7, #0]
 800522a:	4618      	mov	r0, r3
 800522c:	f001 fefa 	bl	8007024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a38      	ldr	r2, [pc, #224]	@ (8005318 <HAL_TIM_PWM_Start+0x1f4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <HAL_TIM_PWM_Start+0x13e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a37      	ldr	r2, [pc, #220]	@ (800531c <HAL_TIM_PWM_Start+0x1f8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00e      	beq.n	8005262 <HAL_TIM_PWM_Start+0x13e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a35      	ldr	r2, [pc, #212]	@ (8005320 <HAL_TIM_PWM_Start+0x1fc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d009      	beq.n	8005262 <HAL_TIM_PWM_Start+0x13e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a34      	ldr	r2, [pc, #208]	@ (8005324 <HAL_TIM_PWM_Start+0x200>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <HAL_TIM_PWM_Start+0x13e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a32      	ldr	r2, [pc, #200]	@ (8005328 <HAL_TIM_PWM_Start+0x204>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d101      	bne.n	8005266 <HAL_TIM_PWM_Start+0x142>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <HAL_TIM_PWM_Start+0x144>
 8005266:	2300      	movs	r3, #0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800527a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a25      	ldr	r2, [pc, #148]	@ (8005318 <HAL_TIM_PWM_Start+0x1f4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d022      	beq.n	80052cc <HAL_TIM_PWM_Start+0x1a8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528e:	d01d      	beq.n	80052cc <HAL_TIM_PWM_Start+0x1a8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a25      	ldr	r2, [pc, #148]	@ (800532c <HAL_TIM_PWM_Start+0x208>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d018      	beq.n	80052cc <HAL_TIM_PWM_Start+0x1a8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a24      	ldr	r2, [pc, #144]	@ (8005330 <HAL_TIM_PWM_Start+0x20c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d013      	beq.n	80052cc <HAL_TIM_PWM_Start+0x1a8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a22      	ldr	r2, [pc, #136]	@ (8005334 <HAL_TIM_PWM_Start+0x210>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00e      	beq.n	80052cc <HAL_TIM_PWM_Start+0x1a8>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1a      	ldr	r2, [pc, #104]	@ (800531c <HAL_TIM_PWM_Start+0x1f8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d009      	beq.n	80052cc <HAL_TIM_PWM_Start+0x1a8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005338 <HAL_TIM_PWM_Start+0x214>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_TIM_PWM_Start+0x1a8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a16      	ldr	r2, [pc, #88]	@ (8005320 <HAL_TIM_PWM_Start+0x1fc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d115      	bne.n	80052f8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	4b1a      	ldr	r3, [pc, #104]	@ (800533c <HAL_TIM_PWM_Start+0x218>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b06      	cmp	r3, #6
 80052dc:	d015      	beq.n	800530a <HAL_TIM_PWM_Start+0x1e6>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e4:	d011      	beq.n	800530a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	e008      	b.n	800530a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e000      	b.n	800530c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40001800 	.word	0x40001800
 800533c:	00010007 	.word	0x00010007

08005340 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e049      	b.n	80053e6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f841 	bl	80053ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f001 f822 	bl	80063c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <HAL_TIM_IC_Start+0x1a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e023      	b.n	8005466 <HAL_TIM_IC_Start+0x62>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d104      	bne.n	800542e <HAL_TIM_IC_Start+0x2a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800542a:	b2db      	uxtb	r3, r3
 800542c:	e01b      	b.n	8005466 <HAL_TIM_IC_Start+0x62>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d104      	bne.n	800543e <HAL_TIM_IC_Start+0x3a>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800543a:	b2db      	uxtb	r3, r3
 800543c:	e013      	b.n	8005466 <HAL_TIM_IC_Start+0x62>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	d104      	bne.n	800544e <HAL_TIM_IC_Start+0x4a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800544a:	b2db      	uxtb	r3, r3
 800544c:	e00b      	b.n	8005466 <HAL_TIM_IC_Start+0x62>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b10      	cmp	r3, #16
 8005452:	d104      	bne.n	800545e <HAL_TIM_IC_Start+0x5a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800545a:	b2db      	uxtb	r3, r3
 800545c:	e003      	b.n	8005466 <HAL_TIM_IC_Start+0x62>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005464:	b2db      	uxtb	r3, r3
 8005466:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d104      	bne.n	8005478 <HAL_TIM_IC_Start+0x74>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005474:	b2db      	uxtb	r3, r3
 8005476:	e013      	b.n	80054a0 <HAL_TIM_IC_Start+0x9c>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b04      	cmp	r3, #4
 800547c:	d104      	bne.n	8005488 <HAL_TIM_IC_Start+0x84>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005484:	b2db      	uxtb	r3, r3
 8005486:	e00b      	b.n	80054a0 <HAL_TIM_IC_Start+0x9c>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b08      	cmp	r3, #8
 800548c:	d104      	bne.n	8005498 <HAL_TIM_IC_Start+0x94>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005494:	b2db      	uxtb	r3, r3
 8005496:	e003      	b.n	80054a0 <HAL_TIM_IC_Start+0x9c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d102      	bne.n	80054ae <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80054a8:	7bbb      	ldrb	r3, [r7, #14]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d001      	beq.n	80054b2 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e097      	b.n	80055e2 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_IC_Start+0xbe>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054c0:	e023      	b.n	800550a <HAL_TIM_IC_Start+0x106>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_IC_Start+0xce>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054d0:	e01b      	b.n	800550a <HAL_TIM_IC_Start+0x106>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_IC_Start+0xde>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054e0:	e013      	b.n	800550a <HAL_TIM_IC_Start+0x106>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b0c      	cmp	r3, #12
 80054e6:	d104      	bne.n	80054f2 <HAL_TIM_IC_Start+0xee>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054f0:	e00b      	b.n	800550a <HAL_TIM_IC_Start+0x106>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d104      	bne.n	8005502 <HAL_TIM_IC_Start+0xfe>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005500:	e003      	b.n	800550a <HAL_TIM_IC_Start+0x106>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <HAL_TIM_IC_Start+0x116>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005518:	e013      	b.n	8005542 <HAL_TIM_IC_Start+0x13e>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b04      	cmp	r3, #4
 800551e:	d104      	bne.n	800552a <HAL_TIM_IC_Start+0x126>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005528:	e00b      	b.n	8005542 <HAL_TIM_IC_Start+0x13e>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b08      	cmp	r3, #8
 800552e:	d104      	bne.n	800553a <HAL_TIM_IC_Start+0x136>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005538:	e003      	b.n	8005542 <HAL_TIM_IC_Start+0x13e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2201      	movs	r2, #1
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f001 fd6a 	bl	8007024 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a25      	ldr	r2, [pc, #148]	@ (80055ec <HAL_TIM_IC_Start+0x1e8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <HAL_TIM_IC_Start+0x19c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005562:	d01d      	beq.n	80055a0 <HAL_TIM_IC_Start+0x19c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a21      	ldr	r2, [pc, #132]	@ (80055f0 <HAL_TIM_IC_Start+0x1ec>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <HAL_TIM_IC_Start+0x19c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a20      	ldr	r2, [pc, #128]	@ (80055f4 <HAL_TIM_IC_Start+0x1f0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_TIM_IC_Start+0x19c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1e      	ldr	r2, [pc, #120]	@ (80055f8 <HAL_TIM_IC_Start+0x1f4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <HAL_TIM_IC_Start+0x19c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1d      	ldr	r2, [pc, #116]	@ (80055fc <HAL_TIM_IC_Start+0x1f8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_TIM_IC_Start+0x19c>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1b      	ldr	r2, [pc, #108]	@ (8005600 <HAL_TIM_IC_Start+0x1fc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_TIM_IC_Start+0x19c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1a      	ldr	r2, [pc, #104]	@ (8005604 <HAL_TIM_IC_Start+0x200>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d115      	bne.n	80055cc <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	4b18      	ldr	r3, [pc, #96]	@ (8005608 <HAL_TIM_IC_Start+0x204>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b06      	cmp	r3, #6
 80055b0:	d015      	beq.n	80055de <HAL_TIM_IC_Start+0x1da>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055b8:	d011      	beq.n	80055de <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0201 	orr.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ca:	e008      	b.n	80055de <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e000      	b.n	80055e0 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40010000 	.word	0x40010000
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40000c00 	.word	0x40000c00
 80055fc:	40010400 	.word	0x40010400
 8005600:	40001800 	.word	0x40001800
 8005604:	40014000 	.word	0x40014000
 8005608:	00010007 	.word	0x00010007

0800560c <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f001 fd00 	bl	8007024 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6a1a      	ldr	r2, [r3, #32]
 800562a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10f      	bne.n	8005654 <HAL_TIM_IC_Stop+0x48>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6a1a      	ldr	r2, [r3, #32]
 800563a:	f240 4344 	movw	r3, #1092	@ 0x444
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d107      	bne.n	8005654 <HAL_TIM_IC_Stop+0x48>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <HAL_TIM_IC_Stop+0x58>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005662:	e023      	b.n	80056ac <HAL_TIM_IC_Stop+0xa0>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b04      	cmp	r3, #4
 8005668:	d104      	bne.n	8005674 <HAL_TIM_IC_Stop+0x68>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005672:	e01b      	b.n	80056ac <HAL_TIM_IC_Stop+0xa0>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b08      	cmp	r3, #8
 8005678:	d104      	bne.n	8005684 <HAL_TIM_IC_Stop+0x78>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005682:	e013      	b.n	80056ac <HAL_TIM_IC_Stop+0xa0>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b0c      	cmp	r3, #12
 8005688:	d104      	bne.n	8005694 <HAL_TIM_IC_Stop+0x88>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005692:	e00b      	b.n	80056ac <HAL_TIM_IC_Stop+0xa0>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b10      	cmp	r3, #16
 8005698:	d104      	bne.n	80056a4 <HAL_TIM_IC_Stop+0x98>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056a2:	e003      	b.n	80056ac <HAL_TIM_IC_Stop+0xa0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_TIM_IC_Stop+0xb0>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ba:	e013      	b.n	80056e4 <HAL_TIM_IC_Stop+0xd8>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d104      	bne.n	80056cc <HAL_TIM_IC_Stop+0xc0>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056ca:	e00b      	b.n	80056e4 <HAL_TIM_IC_Stop+0xd8>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d104      	bne.n	80056dc <HAL_TIM_IC_Stop+0xd0>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056da:	e003      	b.n	80056e4 <HAL_TIM_IC_Stop+0xd8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <HAL_TIM_IC_Start_IT+0x1e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800570a:	b2db      	uxtb	r3, r3
 800570c:	e023      	b.n	8005756 <HAL_TIM_IC_Start_IT+0x66>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b04      	cmp	r3, #4
 8005712:	d104      	bne.n	800571e <HAL_TIM_IC_Start_IT+0x2e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e01b      	b.n	8005756 <HAL_TIM_IC_Start_IT+0x66>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d104      	bne.n	800572e <HAL_TIM_IC_Start_IT+0x3e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e013      	b.n	8005756 <HAL_TIM_IC_Start_IT+0x66>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b0c      	cmp	r3, #12
 8005732:	d104      	bne.n	800573e <HAL_TIM_IC_Start_IT+0x4e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800573a:	b2db      	uxtb	r3, r3
 800573c:	e00b      	b.n	8005756 <HAL_TIM_IC_Start_IT+0x66>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b10      	cmp	r3, #16
 8005742:	d104      	bne.n	800574e <HAL_TIM_IC_Start_IT+0x5e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800574a:	b2db      	uxtb	r3, r3
 800574c:	e003      	b.n	8005756 <HAL_TIM_IC_Start_IT+0x66>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005754:	b2db      	uxtb	r3, r3
 8005756:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d104      	bne.n	8005768 <HAL_TIM_IC_Start_IT+0x78>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005764:	b2db      	uxtb	r3, r3
 8005766:	e013      	b.n	8005790 <HAL_TIM_IC_Start_IT+0xa0>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b04      	cmp	r3, #4
 800576c:	d104      	bne.n	8005778 <HAL_TIM_IC_Start_IT+0x88>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005774:	b2db      	uxtb	r3, r3
 8005776:	e00b      	b.n	8005790 <HAL_TIM_IC_Start_IT+0xa0>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b08      	cmp	r3, #8
 800577c:	d104      	bne.n	8005788 <HAL_TIM_IC_Start_IT+0x98>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e003      	b.n	8005790 <HAL_TIM_IC_Start_IT+0xa0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800578e:	b2db      	uxtb	r3, r3
 8005790:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005792:	7bbb      	ldrb	r3, [r7, #14]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d102      	bne.n	800579e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005798:	7b7b      	ldrb	r3, [r7, #13]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d001      	beq.n	80057a2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e0e2      	b.n	8005968 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_IC_Start_IT+0xc2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057b0:	e023      	b.n	80057fa <HAL_TIM_IC_Start_IT+0x10a>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_IC_Start_IT+0xd2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057c0:	e01b      	b.n	80057fa <HAL_TIM_IC_Start_IT+0x10a>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d104      	bne.n	80057d2 <HAL_TIM_IC_Start_IT+0xe2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d0:	e013      	b.n	80057fa <HAL_TIM_IC_Start_IT+0x10a>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_IC_Start_IT+0xf2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057e0:	e00b      	b.n	80057fa <HAL_TIM_IC_Start_IT+0x10a>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_IC_Start_IT+0x102>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057f0:	e003      	b.n	80057fa <HAL_TIM_IC_Start_IT+0x10a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <HAL_TIM_IC_Start_IT+0x11a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005808:	e013      	b.n	8005832 <HAL_TIM_IC_Start_IT+0x142>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b04      	cmp	r3, #4
 800580e:	d104      	bne.n	800581a <HAL_TIM_IC_Start_IT+0x12a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005818:	e00b      	b.n	8005832 <HAL_TIM_IC_Start_IT+0x142>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b08      	cmp	r3, #8
 800581e:	d104      	bne.n	800582a <HAL_TIM_IC_Start_IT+0x13a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005828:	e003      	b.n	8005832 <HAL_TIM_IC_Start_IT+0x142>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b0c      	cmp	r3, #12
 8005836:	d841      	bhi.n	80058bc <HAL_TIM_IC_Start_IT+0x1cc>
 8005838:	a201      	add	r2, pc, #4	@ (adr r2, 8005840 <HAL_TIM_IC_Start_IT+0x150>)
 800583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583e:	bf00      	nop
 8005840:	08005875 	.word	0x08005875
 8005844:	080058bd 	.word	0x080058bd
 8005848:	080058bd 	.word	0x080058bd
 800584c:	080058bd 	.word	0x080058bd
 8005850:	08005887 	.word	0x08005887
 8005854:	080058bd 	.word	0x080058bd
 8005858:	080058bd 	.word	0x080058bd
 800585c:	080058bd 	.word	0x080058bd
 8005860:	08005899 	.word	0x08005899
 8005864:	080058bd 	.word	0x080058bd
 8005868:	080058bd 	.word	0x080058bd
 800586c:	080058bd 	.word	0x080058bd
 8005870:	080058ab 	.word	0x080058ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0202 	orr.w	r2, r2, #2
 8005882:	60da      	str	r2, [r3, #12]
      break;
 8005884:	e01d      	b.n	80058c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0204 	orr.w	r2, r2, #4
 8005894:	60da      	str	r2, [r3, #12]
      break;
 8005896:	e014      	b.n	80058c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0208 	orr.w	r2, r2, #8
 80058a6:	60da      	str	r2, [r3, #12]
      break;
 80058a8:	e00b      	b.n	80058c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0210 	orr.w	r2, r2, #16
 80058b8:	60da      	str	r2, [r3, #12]
      break;
 80058ba:	e002      	b.n	80058c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
      break;
 80058c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d14e      	bne.n	8005966 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2201      	movs	r2, #1
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 fba7 	bl	8007024 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a25      	ldr	r2, [pc, #148]	@ (8005970 <HAL_TIM_IC_Start_IT+0x280>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d022      	beq.n	8005926 <HAL_TIM_IC_Start_IT+0x236>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e8:	d01d      	beq.n	8005926 <HAL_TIM_IC_Start_IT+0x236>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a21      	ldr	r2, [pc, #132]	@ (8005974 <HAL_TIM_IC_Start_IT+0x284>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_TIM_IC_Start_IT+0x236>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005978 <HAL_TIM_IC_Start_IT+0x288>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_TIM_IC_Start_IT+0x236>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1e      	ldr	r2, [pc, #120]	@ (800597c <HAL_TIM_IC_Start_IT+0x28c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_TIM_IC_Start_IT+0x236>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1c      	ldr	r2, [pc, #112]	@ (8005980 <HAL_TIM_IC_Start_IT+0x290>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_TIM_IC_Start_IT+0x236>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1b      	ldr	r2, [pc, #108]	@ (8005984 <HAL_TIM_IC_Start_IT+0x294>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIM_IC_Start_IT+0x236>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	@ (8005988 <HAL_TIM_IC_Start_IT+0x298>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d115      	bne.n	8005952 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	4b17      	ldr	r3, [pc, #92]	@ (800598c <HAL_TIM_IC_Start_IT+0x29c>)
 800592e:	4013      	ands	r3, r2
 8005930:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b06      	cmp	r3, #6
 8005936:	d015      	beq.n	8005964 <HAL_TIM_IC_Start_IT+0x274>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800593e:	d011      	beq.n	8005964 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005950:	e008      	b.n	8005964 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	e000      	b.n	8005966 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005964:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40010000 	.word	0x40010000
 8005974:	40000400 	.word	0x40000400
 8005978:	40000800 	.word	0x40000800
 800597c:	40000c00 	.word	0x40000c00
 8005980:	40010400 	.word	0x40010400
 8005984:	40001800 	.word	0x40001800
 8005988:	40014000 	.word	0x40014000
 800598c:	00010007 	.word	0x00010007

08005990 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b0c      	cmp	r3, #12
 80059a2:	d841      	bhi.n	8005a28 <HAL_TIM_IC_Stop_IT+0x98>
 80059a4:	a201      	add	r2, pc, #4	@ (adr r2, 80059ac <HAL_TIM_IC_Stop_IT+0x1c>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	080059e1 	.word	0x080059e1
 80059b0:	08005a29 	.word	0x08005a29
 80059b4:	08005a29 	.word	0x08005a29
 80059b8:	08005a29 	.word	0x08005a29
 80059bc:	080059f3 	.word	0x080059f3
 80059c0:	08005a29 	.word	0x08005a29
 80059c4:	08005a29 	.word	0x08005a29
 80059c8:	08005a29 	.word	0x08005a29
 80059cc:	08005a05 	.word	0x08005a05
 80059d0:	08005a29 	.word	0x08005a29
 80059d4:	08005a29 	.word	0x08005a29
 80059d8:	08005a29 	.word	0x08005a29
 80059dc:	08005a17 	.word	0x08005a17
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0202 	bic.w	r2, r2, #2
 80059ee:	60da      	str	r2, [r3, #12]
      break;
 80059f0:	e01d      	b.n	8005a2e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 0204 	bic.w	r2, r2, #4
 8005a00:	60da      	str	r2, [r3, #12]
      break;
 8005a02:	e014      	b.n	8005a2e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0208 	bic.w	r2, r2, #8
 8005a12:	60da      	str	r2, [r3, #12]
      break;
 8005a14:	e00b      	b.n	8005a2e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0210 	bic.w	r2, r2, #16
 8005a24:	60da      	str	r2, [r3, #12]
      break;
 8005a26:	e002      	b.n	8005a2e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d166      	bne.n	8005b02 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 faf1 	bl	8007024 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6a1a      	ldr	r2, [r3, #32]
 8005a48:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10f      	bne.n	8005a72 <HAL_TIM_IC_Stop_IT+0xe2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6a1a      	ldr	r2, [r3, #32]
 8005a58:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d107      	bne.n	8005a72 <HAL_TIM_IC_Stop_IT+0xe2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0201 	bic.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_IC_Stop_IT+0xf2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a80:	e023      	b.n	8005aca <HAL_TIM_IC_Stop_IT+0x13a>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d104      	bne.n	8005a92 <HAL_TIM_IC_Stop_IT+0x102>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a90:	e01b      	b.n	8005aca <HAL_TIM_IC_Stop_IT+0x13a>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d104      	bne.n	8005aa2 <HAL_TIM_IC_Stop_IT+0x112>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa0:	e013      	b.n	8005aca <HAL_TIM_IC_Stop_IT+0x13a>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b0c      	cmp	r3, #12
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_IC_Stop_IT+0x122>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ab0:	e00b      	b.n	8005aca <HAL_TIM_IC_Stop_IT+0x13a>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d104      	bne.n	8005ac2 <HAL_TIM_IC_Stop_IT+0x132>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ac0:	e003      	b.n	8005aca <HAL_TIM_IC_Stop_IT+0x13a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_IC_Stop_IT+0x14a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ad8:	e013      	b.n	8005b02 <HAL_TIM_IC_Stop_IT+0x172>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_IC_Stop_IT+0x15a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ae8:	e00b      	b.n	8005b02 <HAL_TIM_IC_Stop_IT+0x172>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_IC_Stop_IT+0x16a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005af8:	e003      	b.n	8005b02 <HAL_TIM_IC_Stop_IT+0x172>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d020      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01b      	beq.n	8005b70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0202 	mvn.w	r2, #2
 8005b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fb fac2 	bl	80010e0 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fc14 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fc1b 	bl	80063a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d020      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01b      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0204 	mvn.w	r2, #4
 8005b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fb fa9c 	bl	80010e0 <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fbee 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fbf5 	bl	80063a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d020      	beq.n	8005c08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01b      	beq.n	8005c08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0208 	mvn.w	r2, #8
 8005bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2204      	movs	r2, #4
 8005bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fb fa76 	bl	80010e0 <HAL_TIM_IC_CaptureCallback>
 8005bf4:	e005      	b.n	8005c02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fbc8 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fbcf 	bl	80063a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d020      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01b      	beq.n	8005c54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0210 	mvn.w	r2, #16
 8005c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fb fa50 	bl	80010e0 <HAL_TIM_IC_CaptureCallback>
 8005c40:	e005      	b.n	8005c4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fba2 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fba9 	bl	80063a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00c      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d007      	beq.n	8005c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0201 	mvn.w	r2, #1
 8005c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fb80 	bl	8006378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 fb09 	bl	80072b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fb01 	bl	80072cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00c      	beq.n	8005cee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fb63 	bl	80063b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00c      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f06f 0220 	mvn.w	r2, #32
 8005d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 fac9 	bl	80072a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e088      	b.n	8005e4a <HAL_TIM_IC_ConfigChannel+0x130>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d11b      	bne.n	8005d7e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d56:	f000 ff9d 	bl	8006c94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699a      	ldr	r2, [r3, #24]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 020c 	bic.w	r2, r2, #12
 8005d68:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6999      	ldr	r1, [r3, #24]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	619a      	str	r2, [r3, #24]
 8005d7c:	e060      	b.n	8005e40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d11c      	bne.n	8005dbe <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005d94:	f001 f821 	bl	8006dda <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005da6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6999      	ldr	r1, [r3, #24]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	619a      	str	r2, [r3, #24]
 8005dbc:	e040      	b.n	8005e40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005dd4:	f001 f86e 	bl	8006eb4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69da      	ldr	r2, [r3, #28]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 020c 	bic.w	r2, r2, #12
 8005de6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69d9      	ldr	r1, [r3, #28]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	61da      	str	r2, [r3, #28]
 8005dfa:	e021      	b.n	8005e40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b0c      	cmp	r3, #12
 8005e00:	d11c      	bne.n	8005e3c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005e12:	f001 f88b 	bl	8006f2c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e24:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69d9      	ldr	r1, [r3, #28]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	021a      	lsls	r2, r3, #8
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	61da      	str	r2, [r3, #28]
 8005e3a:	e001      	b.n	8005e40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e0ff      	b.n	8006072 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b14      	cmp	r3, #20
 8005e7e:	f200 80f0 	bhi.w	8006062 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e82:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005edd 	.word	0x08005edd
 8005e8c:	08006063 	.word	0x08006063
 8005e90:	08006063 	.word	0x08006063
 8005e94:	08006063 	.word	0x08006063
 8005e98:	08005f1d 	.word	0x08005f1d
 8005e9c:	08006063 	.word	0x08006063
 8005ea0:	08006063 	.word	0x08006063
 8005ea4:	08006063 	.word	0x08006063
 8005ea8:	08005f5f 	.word	0x08005f5f
 8005eac:	08006063 	.word	0x08006063
 8005eb0:	08006063 	.word	0x08006063
 8005eb4:	08006063 	.word	0x08006063
 8005eb8:	08005f9f 	.word	0x08005f9f
 8005ebc:	08006063 	.word	0x08006063
 8005ec0:	08006063 	.word	0x08006063
 8005ec4:	08006063 	.word	0x08006063
 8005ec8:	08005fe1 	.word	0x08005fe1
 8005ecc:	08006063 	.word	0x08006063
 8005ed0:	08006063 	.word	0x08006063
 8005ed4:	08006063 	.word	0x08006063
 8005ed8:	08006021 	.word	0x08006021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fb16 	bl	8006514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0208 	orr.w	r2, r2, #8
 8005ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0204 	bic.w	r2, r2, #4
 8005f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6999      	ldr	r1, [r3, #24]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	619a      	str	r2, [r3, #24]
      break;
 8005f1a:	e0a5      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fb86 	bl	8006634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6999      	ldr	r1, [r3, #24]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	619a      	str	r2, [r3, #24]
      break;
 8005f5c:	e084      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fbef 	bl	8006748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0208 	orr.w	r2, r2, #8
 8005f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69da      	ldr	r2, [r3, #28]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0204 	bic.w	r2, r2, #4
 8005f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69d9      	ldr	r1, [r3, #28]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	61da      	str	r2, [r3, #28]
      break;
 8005f9c:	e064      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fc57 	bl	8006858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69d9      	ldr	r1, [r3, #28]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	021a      	lsls	r2, r3, #8
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	61da      	str	r2, [r3, #28]
      break;
 8005fde:	e043      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fca0 	bl	800692c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0208 	orr.w	r2, r2, #8
 8005ffa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0204 	bic.w	r2, r2, #4
 800600a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800601e:	e023      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fce4 	bl	80069f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800603a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800604a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	021a      	lsls	r2, r3, #8
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006060:	e002      	b.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
      break;
 8006066:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop

0800607c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_TIM_ConfigClockSource+0x1c>
 8006094:	2302      	movs	r3, #2
 8006096:	e0dc      	b.n	8006252 <HAL_TIM_ConfigClockSource+0x1d6>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	4b6a      	ldr	r3, [pc, #424]	@ (800625c <HAL_TIM_ConfigClockSource+0x1e0>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a64      	ldr	r2, [pc, #400]	@ (8006260 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	f000 80a9 	beq.w	8006226 <HAL_TIM_ConfigClockSource+0x1aa>
 80060d4:	4a62      	ldr	r2, [pc, #392]	@ (8006260 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	f200 80ae 	bhi.w	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 80060dc:	4a61      	ldr	r2, [pc, #388]	@ (8006264 <HAL_TIM_ConfigClockSource+0x1e8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	f000 80a1 	beq.w	8006226 <HAL_TIM_ConfigClockSource+0x1aa>
 80060e4:	4a5f      	ldr	r2, [pc, #380]	@ (8006264 <HAL_TIM_ConfigClockSource+0x1e8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	f200 80a6 	bhi.w	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 80060ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006268 <HAL_TIM_ConfigClockSource+0x1ec>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	f000 8099 	beq.w	8006226 <HAL_TIM_ConfigClockSource+0x1aa>
 80060f4:	4a5c      	ldr	r2, [pc, #368]	@ (8006268 <HAL_TIM_ConfigClockSource+0x1ec>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	f200 809e 	bhi.w	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 80060fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006100:	f000 8091 	beq.w	8006226 <HAL_TIM_ConfigClockSource+0x1aa>
 8006104:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006108:	f200 8096 	bhi.w	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 800610c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006110:	f000 8089 	beq.w	8006226 <HAL_TIM_ConfigClockSource+0x1aa>
 8006114:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006118:	f200 808e 	bhi.w	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 800611c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006120:	d03e      	beq.n	80061a0 <HAL_TIM_ConfigClockSource+0x124>
 8006122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006126:	f200 8087 	bhi.w	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 800612a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800612e:	f000 8086 	beq.w	800623e <HAL_TIM_ConfigClockSource+0x1c2>
 8006132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006136:	d87f      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 8006138:	2b70      	cmp	r3, #112	@ 0x70
 800613a:	d01a      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0xf6>
 800613c:	2b70      	cmp	r3, #112	@ 0x70
 800613e:	d87b      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 8006140:	2b60      	cmp	r3, #96	@ 0x60
 8006142:	d050      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x16a>
 8006144:	2b60      	cmp	r3, #96	@ 0x60
 8006146:	d877      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 8006148:	2b50      	cmp	r3, #80	@ 0x50
 800614a:	d03c      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x14a>
 800614c:	2b50      	cmp	r3, #80	@ 0x50
 800614e:	d873      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 8006150:	2b40      	cmp	r3, #64	@ 0x40
 8006152:	d058      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x18a>
 8006154:	2b40      	cmp	r3, #64	@ 0x40
 8006156:	d86f      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 8006158:	2b30      	cmp	r3, #48	@ 0x30
 800615a:	d064      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0x1aa>
 800615c:	2b30      	cmp	r3, #48	@ 0x30
 800615e:	d86b      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 8006160:	2b20      	cmp	r3, #32
 8006162:	d060      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0x1aa>
 8006164:	2b20      	cmp	r3, #32
 8006166:	d867      	bhi.n	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d05c      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0x1aa>
 800616c:	2b10      	cmp	r3, #16
 800616e:	d05a      	beq.n	8006226 <HAL_TIM_ConfigClockSource+0x1aa>
 8006170:	e062      	b.n	8006238 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006182:	f000 ff2f 	bl	8006fe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	609a      	str	r2, [r3, #8]
      break;
 800619e:	e04f      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b0:	f000 ff18 	bl	8006fe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061c2:	609a      	str	r2, [r3, #8]
      break;
 80061c4:	e03c      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d2:	461a      	mov	r2, r3
 80061d4:	f000 fdd2 	bl	8006d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2150      	movs	r1, #80	@ 0x50
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fee2 	bl	8006fa8 <TIM_ITRx_SetConfig>
      break;
 80061e4:	e02c      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061f2:	461a      	mov	r2, r3
 80061f4:	f000 fe2e 	bl	8006e54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2160      	movs	r1, #96	@ 0x60
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fed2 	bl	8006fa8 <TIM_ITRx_SetConfig>
      break;
 8006204:	e01c      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006212:	461a      	mov	r2, r3
 8006214:	f000 fdb2 	bl	8006d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2140      	movs	r1, #64	@ 0x40
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fec2 	bl	8006fa8 <TIM_ITRx_SetConfig>
      break;
 8006224:	e00c      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f000 feb9 	bl	8006fa8 <TIM_ITRx_SetConfig>
      break;
 8006236:	e003      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	73fb      	strb	r3, [r7, #15]
      break;
 800623c:	e000      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800623e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006250:	7bfb      	ldrb	r3, [r7, #15]
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	ffceff88 	.word	0xffceff88
 8006260:	00100040 	.word	0x00100040
 8006264:	00100030 	.word	0x00100030
 8006268:	00100020 	.word	0x00100020

0800626c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006280:	2302      	movs	r3, #2
 8006282:	e031      	b.n	80062e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fc12 	bl	8006ac0 <TIM_SlaveTimer_SetConfig>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e018      	b.n	80062e8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062c4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062d4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b0c      	cmp	r3, #12
 8006302:	d831      	bhi.n	8006368 <HAL_TIM_ReadCapturedValue+0x78>
 8006304:	a201      	add	r2, pc, #4	@ (adr r2, 800630c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006341 	.word	0x08006341
 8006310:	08006369 	.word	0x08006369
 8006314:	08006369 	.word	0x08006369
 8006318:	08006369 	.word	0x08006369
 800631c:	0800634b 	.word	0x0800634b
 8006320:	08006369 	.word	0x08006369
 8006324:	08006369 	.word	0x08006369
 8006328:	08006369 	.word	0x08006369
 800632c:	08006355 	.word	0x08006355
 8006330:	08006369 	.word	0x08006369
 8006334:	08006369 	.word	0x08006369
 8006338:	08006369 	.word	0x08006369
 800633c:	0800635f 	.word	0x0800635f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006346:	60fb      	str	r3, [r7, #12]

      break;
 8006348:	e00f      	b.n	800636a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006350:	60fb      	str	r3, [r7, #12]

      break;
 8006352:	e00a      	b.n	800636a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635a:	60fb      	str	r3, [r7, #12]

      break;
 800635c:	e005      	b.n	800636a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006364:	60fb      	str	r3, [r7, #12]

      break;
 8006366:	e000      	b.n	800636a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006368:	bf00      	nop
  }

  return tmpreg;
 800636a:	68fb      	ldr	r3, [r7, #12]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a46      	ldr	r2, [pc, #280]	@ (80064f4 <TIM_Base_SetConfig+0x12c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d013      	beq.n	8006408 <TIM_Base_SetConfig+0x40>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e6:	d00f      	beq.n	8006408 <TIM_Base_SetConfig+0x40>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a43      	ldr	r2, [pc, #268]	@ (80064f8 <TIM_Base_SetConfig+0x130>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00b      	beq.n	8006408 <TIM_Base_SetConfig+0x40>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a42      	ldr	r2, [pc, #264]	@ (80064fc <TIM_Base_SetConfig+0x134>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d007      	beq.n	8006408 <TIM_Base_SetConfig+0x40>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a41      	ldr	r2, [pc, #260]	@ (8006500 <TIM_Base_SetConfig+0x138>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_Base_SetConfig+0x40>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a40      	ldr	r2, [pc, #256]	@ (8006504 <TIM_Base_SetConfig+0x13c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d108      	bne.n	800641a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a35      	ldr	r2, [pc, #212]	@ (80064f4 <TIM_Base_SetConfig+0x12c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01f      	beq.n	8006462 <TIM_Base_SetConfig+0x9a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006428:	d01b      	beq.n	8006462 <TIM_Base_SetConfig+0x9a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a32      	ldr	r2, [pc, #200]	@ (80064f8 <TIM_Base_SetConfig+0x130>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d017      	beq.n	8006462 <TIM_Base_SetConfig+0x9a>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a31      	ldr	r2, [pc, #196]	@ (80064fc <TIM_Base_SetConfig+0x134>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d013      	beq.n	8006462 <TIM_Base_SetConfig+0x9a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a30      	ldr	r2, [pc, #192]	@ (8006500 <TIM_Base_SetConfig+0x138>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00f      	beq.n	8006462 <TIM_Base_SetConfig+0x9a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a2f      	ldr	r2, [pc, #188]	@ (8006504 <TIM_Base_SetConfig+0x13c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00b      	beq.n	8006462 <TIM_Base_SetConfig+0x9a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a2e      	ldr	r2, [pc, #184]	@ (8006508 <TIM_Base_SetConfig+0x140>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d007      	beq.n	8006462 <TIM_Base_SetConfig+0x9a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a2d      	ldr	r2, [pc, #180]	@ (800650c <TIM_Base_SetConfig+0x144>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d003      	beq.n	8006462 <TIM_Base_SetConfig+0x9a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a2c      	ldr	r2, [pc, #176]	@ (8006510 <TIM_Base_SetConfig+0x148>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d108      	bne.n	8006474 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a16      	ldr	r2, [pc, #88]	@ (80064f4 <TIM_Base_SetConfig+0x12c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00f      	beq.n	80064c0 <TIM_Base_SetConfig+0xf8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a18      	ldr	r2, [pc, #96]	@ (8006504 <TIM_Base_SetConfig+0x13c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00b      	beq.n	80064c0 <TIM_Base_SetConfig+0xf8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a17      	ldr	r2, [pc, #92]	@ (8006508 <TIM_Base_SetConfig+0x140>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d007      	beq.n	80064c0 <TIM_Base_SetConfig+0xf8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a16      	ldr	r2, [pc, #88]	@ (800650c <TIM_Base_SetConfig+0x144>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_Base_SetConfig+0xf8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a15      	ldr	r2, [pc, #84]	@ (8006510 <TIM_Base_SetConfig+0x148>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d103      	bne.n	80064c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d105      	bne.n	80064e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f023 0201 	bic.w	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	611a      	str	r2, [r3, #16]
  }
}
 80064e6:	bf00      	nop
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800
 8006500:	40000c00 	.word	0x40000c00
 8006504:	40010400 	.word	0x40010400
 8006508:	40014000 	.word	0x40014000
 800650c:	40014400 	.word	0x40014400
 8006510:	40014800 	.word	0x40014800

08006514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	f023 0201 	bic.w	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4b37      	ldr	r3, [pc, #220]	@ (800661c <TIM_OC1_SetConfig+0x108>)
 8006540:	4013      	ands	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0303 	bic.w	r3, r3, #3
 800654a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f023 0302 	bic.w	r3, r3, #2
 800655c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a2d      	ldr	r2, [pc, #180]	@ (8006620 <TIM_OC1_SetConfig+0x10c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_OC1_SetConfig+0x7c>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a2c      	ldr	r2, [pc, #176]	@ (8006624 <TIM_OC1_SetConfig+0x110>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_OC1_SetConfig+0x7c>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a2b      	ldr	r2, [pc, #172]	@ (8006628 <TIM_OC1_SetConfig+0x114>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_OC1_SetConfig+0x7c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a2a      	ldr	r2, [pc, #168]	@ (800662c <TIM_OC1_SetConfig+0x118>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC1_SetConfig+0x7c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a29      	ldr	r2, [pc, #164]	@ (8006630 <TIM_OC1_SetConfig+0x11c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10c      	bne.n	80065aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0308 	bic.w	r3, r3, #8
 8006596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 0304 	bic.w	r3, r3, #4
 80065a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006620 <TIM_OC1_SetConfig+0x10c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00f      	beq.n	80065d2 <TIM_OC1_SetConfig+0xbe>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006624 <TIM_OC1_SetConfig+0x110>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00b      	beq.n	80065d2 <TIM_OC1_SetConfig+0xbe>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006628 <TIM_OC1_SetConfig+0x114>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d007      	beq.n	80065d2 <TIM_OC1_SetConfig+0xbe>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a19      	ldr	r2, [pc, #100]	@ (800662c <TIM_OC1_SetConfig+0x118>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_OC1_SetConfig+0xbe>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a18      	ldr	r2, [pc, #96]	@ (8006630 <TIM_OC1_SetConfig+0x11c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d111      	bne.n	80065f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	621a      	str	r2, [r3, #32]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	fffeff8f 	.word	0xfffeff8f
 8006620:	40010000 	.word	0x40010000
 8006624:	40010400 	.word	0x40010400
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800

08006634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f023 0210 	bic.w	r2, r3, #16
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4b34      	ldr	r3, [pc, #208]	@ (8006730 <TIM_OC2_SetConfig+0xfc>)
 8006660:	4013      	ands	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800666a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f023 0320 	bic.w	r3, r3, #32
 800667e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a29      	ldr	r2, [pc, #164]	@ (8006734 <TIM_OC2_SetConfig+0x100>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <TIM_OC2_SetConfig+0x68>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a28      	ldr	r2, [pc, #160]	@ (8006738 <TIM_OC2_SetConfig+0x104>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d10d      	bne.n	80066b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006734 <TIM_OC2_SetConfig+0x100>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00f      	beq.n	80066e0 <TIM_OC2_SetConfig+0xac>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006738 <TIM_OC2_SetConfig+0x104>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00b      	beq.n	80066e0 <TIM_OC2_SetConfig+0xac>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1c      	ldr	r2, [pc, #112]	@ (800673c <TIM_OC2_SetConfig+0x108>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d007      	beq.n	80066e0 <TIM_OC2_SetConfig+0xac>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006740 <TIM_OC2_SetConfig+0x10c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC2_SetConfig+0xac>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a1a      	ldr	r2, [pc, #104]	@ (8006744 <TIM_OC2_SetConfig+0x110>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d113      	bne.n	8006708 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	feff8fff 	.word	0xfeff8fff
 8006734:	40010000 	.word	0x40010000
 8006738:	40010400 	.word	0x40010400
 800673c:	40014000 	.word	0x40014000
 8006740:	40014400 	.word	0x40014400
 8006744:	40014800 	.word	0x40014800

08006748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4b33      	ldr	r3, [pc, #204]	@ (8006840 <TIM_OC3_SetConfig+0xf8>)
 8006774:	4013      	ands	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a28      	ldr	r2, [pc, #160]	@ (8006844 <TIM_OC3_SetConfig+0xfc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d003      	beq.n	80067ae <TIM_OC3_SetConfig+0x66>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a27      	ldr	r2, [pc, #156]	@ (8006848 <TIM_OC3_SetConfig+0x100>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10d      	bne.n	80067ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006844 <TIM_OC3_SetConfig+0xfc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00f      	beq.n	80067f2 <TIM_OC3_SetConfig+0xaa>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006848 <TIM_OC3_SetConfig+0x100>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00b      	beq.n	80067f2 <TIM_OC3_SetConfig+0xaa>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1b      	ldr	r2, [pc, #108]	@ (800684c <TIM_OC3_SetConfig+0x104>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d007      	beq.n	80067f2 <TIM_OC3_SetConfig+0xaa>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006850 <TIM_OC3_SetConfig+0x108>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC3_SetConfig+0xaa>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a19      	ldr	r2, [pc, #100]	@ (8006854 <TIM_OC3_SetConfig+0x10c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d113      	bne.n	800681a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	621a      	str	r2, [r3, #32]
}
 8006834:	bf00      	nop
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	fffeff8f 	.word	0xfffeff8f
 8006844:	40010000 	.word	0x40010000
 8006848:	40010400 	.word	0x40010400
 800684c:	40014000 	.word	0x40014000
 8006850:	40014400 	.word	0x40014400
 8006854:	40014800 	.word	0x40014800

08006858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4b24      	ldr	r3, [pc, #144]	@ (8006914 <TIM_OC4_SetConfig+0xbc>)
 8006884:	4013      	ands	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800688e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	031b      	lsls	r3, r3, #12
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a19      	ldr	r2, [pc, #100]	@ (8006918 <TIM_OC4_SetConfig+0xc0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00f      	beq.n	80068d8 <TIM_OC4_SetConfig+0x80>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a18      	ldr	r2, [pc, #96]	@ (800691c <TIM_OC4_SetConfig+0xc4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_OC4_SetConfig+0x80>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a17      	ldr	r2, [pc, #92]	@ (8006920 <TIM_OC4_SetConfig+0xc8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_OC4_SetConfig+0x80>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a16      	ldr	r2, [pc, #88]	@ (8006924 <TIM_OC4_SetConfig+0xcc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC4_SetConfig+0x80>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a15      	ldr	r2, [pc, #84]	@ (8006928 <TIM_OC4_SetConfig+0xd0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d109      	bne.n	80068ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	019b      	lsls	r3, r3, #6
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	feff8fff 	.word	0xfeff8fff
 8006918:	40010000 	.word	0x40010000
 800691c:	40010400 	.word	0x40010400
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800

0800692c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4b21      	ldr	r3, [pc, #132]	@ (80069dc <TIM_OC5_SetConfig+0xb0>)
 8006958:	4013      	ands	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800696c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a18      	ldr	r2, [pc, #96]	@ (80069e0 <TIM_OC5_SetConfig+0xb4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00f      	beq.n	80069a2 <TIM_OC5_SetConfig+0x76>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a17      	ldr	r2, [pc, #92]	@ (80069e4 <TIM_OC5_SetConfig+0xb8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00b      	beq.n	80069a2 <TIM_OC5_SetConfig+0x76>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a16      	ldr	r2, [pc, #88]	@ (80069e8 <TIM_OC5_SetConfig+0xbc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d007      	beq.n	80069a2 <TIM_OC5_SetConfig+0x76>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a15      	ldr	r2, [pc, #84]	@ (80069ec <TIM_OC5_SetConfig+0xc0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d003      	beq.n	80069a2 <TIM_OC5_SetConfig+0x76>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a14      	ldr	r2, [pc, #80]	@ (80069f0 <TIM_OC5_SetConfig+0xc4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d109      	bne.n	80069b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	021b      	lsls	r3, r3, #8
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	621a      	str	r2, [r3, #32]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	fffeff8f 	.word	0xfffeff8f
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40010400 	.word	0x40010400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40014400 	.word	0x40014400
 80069f0:	40014800 	.word	0x40014800

080069f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4b22      	ldr	r3, [pc, #136]	@ (8006aa8 <TIM_OC6_SetConfig+0xb4>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	021b      	lsls	r3, r3, #8
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	051b      	lsls	r3, r3, #20
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a19      	ldr	r2, [pc, #100]	@ (8006aac <TIM_OC6_SetConfig+0xb8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00f      	beq.n	8006a6c <TIM_OC6_SetConfig+0x78>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a18      	ldr	r2, [pc, #96]	@ (8006ab0 <TIM_OC6_SetConfig+0xbc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00b      	beq.n	8006a6c <TIM_OC6_SetConfig+0x78>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a17      	ldr	r2, [pc, #92]	@ (8006ab4 <TIM_OC6_SetConfig+0xc0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d007      	beq.n	8006a6c <TIM_OC6_SetConfig+0x78>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a16      	ldr	r2, [pc, #88]	@ (8006ab8 <TIM_OC6_SetConfig+0xc4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_OC6_SetConfig+0x78>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a15      	ldr	r2, [pc, #84]	@ (8006abc <TIM_OC6_SetConfig+0xc8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d109      	bne.n	8006a80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	029b      	lsls	r3, r3, #10
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	feff8fff 	.word	0xfeff8fff
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40010400 	.word	0x40010400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400
 8006abc:	40014800 	.word	0x40014800

08006ac0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4b65      	ldr	r3, [pc, #404]	@ (8006c70 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4b62      	ldr	r3, [pc, #392]	@ (8006c74 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	4a5c      	ldr	r2, [pc, #368]	@ (8006c78 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	f000 80ab 	beq.w	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b0e:	4a5a      	ldr	r2, [pc, #360]	@ (8006c78 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	f200 80a4 	bhi.w	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b1a:	f000 80a3 	beq.w	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b22:	f200 809c 	bhi.w	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b26:	4a55      	ldr	r2, [pc, #340]	@ (8006c7c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	f000 809b 	beq.w	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b2e:	4a53      	ldr	r2, [pc, #332]	@ (8006c7c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	f200 8094 	bhi.w	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b36:	4a52      	ldr	r2, [pc, #328]	@ (8006c80 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	f000 8093 	beq.w	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b3e:	4a50      	ldr	r2, [pc, #320]	@ (8006c80 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	f200 808c 	bhi.w	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b46:	4a4f      	ldr	r2, [pc, #316]	@ (8006c84 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	f000 808b 	beq.w	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b4e:	4a4d      	ldr	r2, [pc, #308]	@ (8006c84 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	f200 8084 	bhi.w	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b56:	4a4c      	ldr	r2, [pc, #304]	@ (8006c88 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	f000 8083 	beq.w	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c88 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d87c      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b64:	4a49      	ldr	r2, [pc, #292]	@ (8006c8c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d07c      	beq.n	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b6a:	4a48      	ldr	r2, [pc, #288]	@ (8006c8c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d876      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b70:	4a47      	ldr	r2, [pc, #284]	@ (8006c90 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d076      	beq.n	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b76:	4a46      	ldr	r2, [pc, #280]	@ (8006c90 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d870      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006b80:	d070      	beq.n	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b82:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006b86:	d86a      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b8c:	d06a      	beq.n	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006b8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b92:	d864      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b94:	2b70      	cmp	r3, #112	@ 0x70
 8006b96:	d01a      	beq.n	8006bce <TIM_SlaveTimer_SetConfig+0x10e>
 8006b98:	2b70      	cmp	r3, #112	@ 0x70
 8006b9a:	d860      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006b9c:	2b60      	cmp	r3, #96	@ 0x60
 8006b9e:	d054      	beq.n	8006c4a <TIM_SlaveTimer_SetConfig+0x18a>
 8006ba0:	2b60      	cmp	r3, #96	@ 0x60
 8006ba2:	d85c      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006ba4:	2b50      	cmp	r3, #80	@ 0x50
 8006ba6:	d046      	beq.n	8006c36 <TIM_SlaveTimer_SetConfig+0x176>
 8006ba8:	2b50      	cmp	r3, #80	@ 0x50
 8006baa:	d858      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006bac:	2b40      	cmp	r3, #64	@ 0x40
 8006bae:	d019      	beq.n	8006be4 <TIM_SlaveTimer_SetConfig+0x124>
 8006bb0:	2b40      	cmp	r3, #64	@ 0x40
 8006bb2:	d854      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006bb4:	2b30      	cmp	r3, #48	@ 0x30
 8006bb6:	d055      	beq.n	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006bb8:	2b30      	cmp	r3, #48	@ 0x30
 8006bba:	d850      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d051      	beq.n	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d84c      	bhi.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d04d      	beq.n	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d04b      	beq.n	8006c64 <TIM_SlaveTimer_SetConfig+0x1a4>
 8006bcc:	e047      	b.n	8006c5e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006bde:	f000 fa01 	bl	8006fe4 <TIM_ETR_SetConfig>
      break;
 8006be2:	e040      	b.n	8006c66 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	d101      	bne.n	8006bf0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e03b      	b.n	8006c68 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a1a      	ldr	r2, [r3, #32]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c16:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	621a      	str	r2, [r3, #32]
      break;
 8006c34:	e017      	b.n	8006c66 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c42:	461a      	mov	r2, r3
 8006c44:	f000 f89a 	bl	8006d7c <TIM_TI1_ConfigInputStage>
      break;
 8006c48:	e00d      	b.n	8006c66 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c56:	461a      	mov	r2, r3
 8006c58:	f000 f8fc 	bl	8006e54 <TIM_TI2_ConfigInputStage>
      break;
 8006c5c:	e003      	b.n	8006c66 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]
      break;
 8006c62:	e000      	b.n	8006c66 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8006c64:	bf00      	nop
  }

  return status;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	ffcfff8f 	.word	0xffcfff8f
 8006c74:	fffefff8 	.word	0xfffefff8
 8006c78:	00200010 	.word	0x00200010
 8006c7c:	00100070 	.word	0x00100070
 8006c80:	00100060 	.word	0x00100060
 8006c84:	00100050 	.word	0x00100050
 8006c88:	00100040 	.word	0x00100040
 8006c8c:	00100030 	.word	0x00100030
 8006c90:	00100020 	.word	0x00100020

08006c94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	f023 0201 	bic.w	r2, r3, #1
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a28      	ldr	r2, [pc, #160]	@ (8006d60 <TIM_TI1_SetConfig+0xcc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01b      	beq.n	8006cfa <TIM_TI1_SetConfig+0x66>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc8:	d017      	beq.n	8006cfa <TIM_TI1_SetConfig+0x66>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4a25      	ldr	r2, [pc, #148]	@ (8006d64 <TIM_TI1_SetConfig+0xd0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <TIM_TI1_SetConfig+0x66>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	4a24      	ldr	r2, [pc, #144]	@ (8006d68 <TIM_TI1_SetConfig+0xd4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d00f      	beq.n	8006cfa <TIM_TI1_SetConfig+0x66>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4a23      	ldr	r2, [pc, #140]	@ (8006d6c <TIM_TI1_SetConfig+0xd8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00b      	beq.n	8006cfa <TIM_TI1_SetConfig+0x66>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a22      	ldr	r2, [pc, #136]	@ (8006d70 <TIM_TI1_SetConfig+0xdc>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d007      	beq.n	8006cfa <TIM_TI1_SetConfig+0x66>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a21      	ldr	r2, [pc, #132]	@ (8006d74 <TIM_TI1_SetConfig+0xe0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d003      	beq.n	8006cfa <TIM_TI1_SetConfig+0x66>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a20      	ldr	r2, [pc, #128]	@ (8006d78 <TIM_TI1_SetConfig+0xe4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d101      	bne.n	8006cfe <TIM_TI1_SetConfig+0x6a>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <TIM_TI1_SetConfig+0x6c>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e003      	b.n	8006d1e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f023 030a 	bic.w	r3, r3, #10
 8006d38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f003 030a 	and.w	r3, r3, #10
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800
 8006d6c:	40000c00 	.word	0x40000c00
 8006d70:	40010400 	.word	0x40010400
 8006d74:	40001800 	.word	0x40001800
 8006d78:	40014000 	.word	0x40014000

08006d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f023 0201 	bic.w	r2, r3, #1
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f023 030a 	bic.w	r3, r3, #10
 8006db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	621a      	str	r2, [r3, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6a1b      	ldr	r3, [r3, #32]
 8006df2:	f023 0210 	bic.w	r2, r3, #16
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	031b      	lsls	r3, r3, #12
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	621a      	str	r2, [r3, #32]
}
 8006e48:	bf00      	nop
 8006e4a:	371c      	adds	r7, #28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f023 0210 	bic.w	r2, r3, #16
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	031b      	lsls	r3, r3, #12
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	011b      	lsls	r3, r3, #4
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	621a      	str	r2, [r3, #32]
}
 8006ea8:	bf00      	nop
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f023 0303 	bic.w	r3, r3, #3
 8006ee0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ef0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	011b      	lsls	r3, r3, #4
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006f04:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	621a      	str	r2, [r3, #32]
}
 8006f20:	bf00      	nop
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f58:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	021b      	lsls	r3, r3, #8
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f6a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	031b      	lsls	r3, r3, #12
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006f7e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	031b      	lsls	r3, r3, #12
 8006f84:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	621a      	str	r2, [r3, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
	...

08006fa8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	4b09      	ldr	r3, [pc, #36]	@ (8006fe0 <TIM_ITRx_SetConfig+0x38>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f043 0307 	orr.w	r3, r3, #7
 8006fca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	609a      	str	r2, [r3, #8]
}
 8006fd2:	bf00      	nop
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	ffcfff8f 	.word	0xffcfff8f

08006fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	021a      	lsls	r2, r3, #8
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	431a      	orrs	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4313      	orrs	r3, r2
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	609a      	str	r2, [r3, #8]
}
 8007018:	bf00      	nop
 800701a:	371c      	adds	r7, #28
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f003 031f 	and.w	r3, r3, #31
 8007036:	2201      	movs	r2, #1
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1a      	ldr	r2, [r3, #32]
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	43db      	mvns	r3, r3
 8007046:	401a      	ands	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6a1a      	ldr	r2, [r3, #32]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	fa01 f303 	lsl.w	r3, r1, r3
 800705c:	431a      	orrs	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
	...

08007070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007084:	2302      	movs	r3, #2
 8007086:	e06d      	b.n	8007164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2202      	movs	r2, #2
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a30      	ldr	r2, [pc, #192]	@ (8007170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d004      	beq.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d108      	bne.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80070c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a20      	ldr	r2, [pc, #128]	@ (8007170 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d022      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070fa:	d01d      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a1d      	ldr	r2, [pc, #116]	@ (8007178 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d018      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a1c      	ldr	r2, [pc, #112]	@ (800717c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1a      	ldr	r2, [pc, #104]	@ (8007180 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00e      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a15      	ldr	r2, [pc, #84]	@ (8007174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d009      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a16      	ldr	r2, [pc, #88]	@ (8007184 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a15      	ldr	r2, [pc, #84]	@ (8007188 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d10c      	bne.n	8007152 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800713e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	4313      	orrs	r3, r2
 8007148:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	40010000 	.word	0x40010000
 8007174:	40010400 	.word	0x40010400
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800
 8007180:	40000c00 	.word	0x40000c00
 8007184:	40001800 	.word	0x40001800
 8007188:	40014000 	.word	0x40014000

0800718c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e073      	b.n	8007290 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	041b      	lsls	r3, r3, #16
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a19      	ldr	r2, [pc, #100]	@ (800729c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d004      	beq.n	8007244 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a18      	ldr	r2, [pc, #96]	@ (80072a0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d11c      	bne.n	800727e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724e:	051b      	lsls	r3, r3, #20
 8007250:	4313      	orrs	r3, r2
 8007252:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	40010000 	.word	0x40010000
 80072a0:	40010400 	.word	0x40010400

080072a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e042      	b.n	8007378 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d106      	bne.n	800730a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7fa fb8d 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2224      	movs	r2, #36	@ 0x24
 800730e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0201 	bic.w	r2, r2, #1
 8007320:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fe94 	bl	8008058 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f825 	bl	8007380 <UART_SetConfig>
 8007336:	4603      	mov	r3, r0
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e01b      	b.n	8007378 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800734e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689a      	ldr	r2, [r3, #8]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800735e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0201 	orr.w	r2, r2, #1
 800736e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 ff13 	bl	800819c <UART_CheckIdleState>
 8007376:	4603      	mov	r3, r0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007384:	b092      	sub	sp, #72	@ 0x48
 8007386:	af00      	add	r7, sp, #0
 8007388:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	431a      	orrs	r2, r3
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	431a      	orrs	r2, r3
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4bbe      	ldr	r3, [pc, #760]	@ (80076a8 <UART_SetConfig+0x328>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073b8:	430b      	orrs	r3, r1
 80073ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4ab3      	ldr	r2, [pc, #716]	@ (80076ac <UART_SetConfig+0x32c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d004      	beq.n	80073ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073e8:	4313      	orrs	r3, r2
 80073ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	4baf      	ldr	r3, [pc, #700]	@ (80076b0 <UART_SetConfig+0x330>)
 80073f4:	4013      	ands	r3, r2
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	6812      	ldr	r2, [r2, #0]
 80073fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073fc:	430b      	orrs	r3, r1
 80073fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	f023 010f 	bic.w	r1, r3, #15
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4aa6      	ldr	r2, [pc, #664]	@ (80076b4 <UART_SetConfig+0x334>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d177      	bne.n	8007510 <UART_SetConfig+0x190>
 8007420:	4ba5      	ldr	r3, [pc, #660]	@ (80076b8 <UART_SetConfig+0x338>)
 8007422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007428:	2b28      	cmp	r3, #40	@ 0x28
 800742a:	d86d      	bhi.n	8007508 <UART_SetConfig+0x188>
 800742c:	a201      	add	r2, pc, #4	@ (adr r2, 8007434 <UART_SetConfig+0xb4>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	080074d9 	.word	0x080074d9
 8007438:	08007509 	.word	0x08007509
 800743c:	08007509 	.word	0x08007509
 8007440:	08007509 	.word	0x08007509
 8007444:	08007509 	.word	0x08007509
 8007448:	08007509 	.word	0x08007509
 800744c:	08007509 	.word	0x08007509
 8007450:	08007509 	.word	0x08007509
 8007454:	080074e1 	.word	0x080074e1
 8007458:	08007509 	.word	0x08007509
 800745c:	08007509 	.word	0x08007509
 8007460:	08007509 	.word	0x08007509
 8007464:	08007509 	.word	0x08007509
 8007468:	08007509 	.word	0x08007509
 800746c:	08007509 	.word	0x08007509
 8007470:	08007509 	.word	0x08007509
 8007474:	080074e9 	.word	0x080074e9
 8007478:	08007509 	.word	0x08007509
 800747c:	08007509 	.word	0x08007509
 8007480:	08007509 	.word	0x08007509
 8007484:	08007509 	.word	0x08007509
 8007488:	08007509 	.word	0x08007509
 800748c:	08007509 	.word	0x08007509
 8007490:	08007509 	.word	0x08007509
 8007494:	080074f1 	.word	0x080074f1
 8007498:	08007509 	.word	0x08007509
 800749c:	08007509 	.word	0x08007509
 80074a0:	08007509 	.word	0x08007509
 80074a4:	08007509 	.word	0x08007509
 80074a8:	08007509 	.word	0x08007509
 80074ac:	08007509 	.word	0x08007509
 80074b0:	08007509 	.word	0x08007509
 80074b4:	080074f9 	.word	0x080074f9
 80074b8:	08007509 	.word	0x08007509
 80074bc:	08007509 	.word	0x08007509
 80074c0:	08007509 	.word	0x08007509
 80074c4:	08007509 	.word	0x08007509
 80074c8:	08007509 	.word	0x08007509
 80074cc:	08007509 	.word	0x08007509
 80074d0:	08007509 	.word	0x08007509
 80074d4:	08007501 	.word	0x08007501
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e326      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80074e0:	2304      	movs	r3, #4
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e6:	e322      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80074e8:	2308      	movs	r3, #8
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ee:	e31e      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80074f0:	2310      	movs	r3, #16
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f6:	e31a      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80074f8:	2320      	movs	r3, #32
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fe:	e316      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007500:	2340      	movs	r3, #64	@ 0x40
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007506:	e312      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007508:	2380      	movs	r3, #128	@ 0x80
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750e:	e30e      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a69      	ldr	r2, [pc, #420]	@ (80076bc <UART_SetConfig+0x33c>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d130      	bne.n	800757c <UART_SetConfig+0x1fc>
 800751a:	4b67      	ldr	r3, [pc, #412]	@ (80076b8 <UART_SetConfig+0x338>)
 800751c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	2b05      	cmp	r3, #5
 8007524:	d826      	bhi.n	8007574 <UART_SetConfig+0x1f4>
 8007526:	a201      	add	r2, pc, #4	@ (adr r2, 800752c <UART_SetConfig+0x1ac>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007545 	.word	0x08007545
 8007530:	0800754d 	.word	0x0800754d
 8007534:	08007555 	.word	0x08007555
 8007538:	0800755d 	.word	0x0800755d
 800753c:	08007565 	.word	0x08007565
 8007540:	0800756d 	.word	0x0800756d
 8007544:	2300      	movs	r3, #0
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e2f0      	b.n	8007b2e <UART_SetConfig+0x7ae>
 800754c:	2304      	movs	r3, #4
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e2ec      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007554:	2308      	movs	r3, #8
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755a:	e2e8      	b.n	8007b2e <UART_SetConfig+0x7ae>
 800755c:	2310      	movs	r3, #16
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007562:	e2e4      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007564:	2320      	movs	r3, #32
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756a:	e2e0      	b.n	8007b2e <UART_SetConfig+0x7ae>
 800756c:	2340      	movs	r3, #64	@ 0x40
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007572:	e2dc      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007574:	2380      	movs	r3, #128	@ 0x80
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757a:	e2d8      	b.n	8007b2e <UART_SetConfig+0x7ae>
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a4f      	ldr	r2, [pc, #316]	@ (80076c0 <UART_SetConfig+0x340>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d130      	bne.n	80075e8 <UART_SetConfig+0x268>
 8007586:	4b4c      	ldr	r3, [pc, #304]	@ (80076b8 <UART_SetConfig+0x338>)
 8007588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800758a:	f003 0307 	and.w	r3, r3, #7
 800758e:	2b05      	cmp	r3, #5
 8007590:	d826      	bhi.n	80075e0 <UART_SetConfig+0x260>
 8007592:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <UART_SetConfig+0x218>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075b1 	.word	0x080075b1
 800759c:	080075b9 	.word	0x080075b9
 80075a0:	080075c1 	.word	0x080075c1
 80075a4:	080075c9 	.word	0x080075c9
 80075a8:	080075d1 	.word	0x080075d1
 80075ac:	080075d9 	.word	0x080075d9
 80075b0:	2300      	movs	r3, #0
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e2ba      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80075b8:	2304      	movs	r3, #4
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e2b6      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80075c0:	2308      	movs	r3, #8
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e2b2      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80075c8:	2310      	movs	r3, #16
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ce:	e2ae      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80075d0:	2320      	movs	r3, #32
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d6:	e2aa      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80075d8:	2340      	movs	r3, #64	@ 0x40
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075de:	e2a6      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80075e0:	2380      	movs	r3, #128	@ 0x80
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e6:	e2a2      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a35      	ldr	r2, [pc, #212]	@ (80076c4 <UART_SetConfig+0x344>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d130      	bne.n	8007654 <UART_SetConfig+0x2d4>
 80075f2:	4b31      	ldr	r3, [pc, #196]	@ (80076b8 <UART_SetConfig+0x338>)
 80075f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b05      	cmp	r3, #5
 80075fc:	d826      	bhi.n	800764c <UART_SetConfig+0x2cc>
 80075fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007604 <UART_SetConfig+0x284>)
 8007600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007604:	0800761d 	.word	0x0800761d
 8007608:	08007625 	.word	0x08007625
 800760c:	0800762d 	.word	0x0800762d
 8007610:	08007635 	.word	0x08007635
 8007614:	0800763d 	.word	0x0800763d
 8007618:	08007645 	.word	0x08007645
 800761c:	2300      	movs	r3, #0
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e284      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007624:	2304      	movs	r3, #4
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e280      	b.n	8007b2e <UART_SetConfig+0x7ae>
 800762c:	2308      	movs	r3, #8
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e27c      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007634:	2310      	movs	r3, #16
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763a:	e278      	b.n	8007b2e <UART_SetConfig+0x7ae>
 800763c:	2320      	movs	r3, #32
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e274      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007644:	2340      	movs	r3, #64	@ 0x40
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764a:	e270      	b.n	8007b2e <UART_SetConfig+0x7ae>
 800764c:	2380      	movs	r3, #128	@ 0x80
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007652:	e26c      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a1b      	ldr	r2, [pc, #108]	@ (80076c8 <UART_SetConfig+0x348>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d142      	bne.n	80076e4 <UART_SetConfig+0x364>
 800765e:	4b16      	ldr	r3, [pc, #88]	@ (80076b8 <UART_SetConfig+0x338>)
 8007660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b05      	cmp	r3, #5
 8007668:	d838      	bhi.n	80076dc <UART_SetConfig+0x35c>
 800766a:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <UART_SetConfig+0x2f0>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	08007689 	.word	0x08007689
 8007674:	08007691 	.word	0x08007691
 8007678:	08007699 	.word	0x08007699
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076cd 	.word	0x080076cd
 8007684:	080076d5 	.word	0x080076d5
 8007688:	2300      	movs	r3, #0
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e24e      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007690:	2304      	movs	r3, #4
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e24a      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007698:	2308      	movs	r3, #8
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769e:	e246      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80076a0:	2310      	movs	r3, #16
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a6:	e242      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80076a8:	cfff69f3 	.word	0xcfff69f3
 80076ac:	58000c00 	.word	0x58000c00
 80076b0:	11fff4ff 	.word	0x11fff4ff
 80076b4:	40011000 	.word	0x40011000
 80076b8:	58024400 	.word	0x58024400
 80076bc:	40004400 	.word	0x40004400
 80076c0:	40004800 	.word	0x40004800
 80076c4:	40004c00 	.word	0x40004c00
 80076c8:	40005000 	.word	0x40005000
 80076cc:	2320      	movs	r3, #32
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d2:	e22c      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80076d4:	2340      	movs	r3, #64	@ 0x40
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076da:	e228      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80076dc:	2380      	movs	r3, #128	@ 0x80
 80076de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e2:	e224      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4ab1      	ldr	r2, [pc, #708]	@ (80079b0 <UART_SetConfig+0x630>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d176      	bne.n	80077dc <UART_SetConfig+0x45c>
 80076ee:	4bb1      	ldr	r3, [pc, #708]	@ (80079b4 <UART_SetConfig+0x634>)
 80076f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076f6:	2b28      	cmp	r3, #40	@ 0x28
 80076f8:	d86c      	bhi.n	80077d4 <UART_SetConfig+0x454>
 80076fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007700 <UART_SetConfig+0x380>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	080077a5 	.word	0x080077a5
 8007704:	080077d5 	.word	0x080077d5
 8007708:	080077d5 	.word	0x080077d5
 800770c:	080077d5 	.word	0x080077d5
 8007710:	080077d5 	.word	0x080077d5
 8007714:	080077d5 	.word	0x080077d5
 8007718:	080077d5 	.word	0x080077d5
 800771c:	080077d5 	.word	0x080077d5
 8007720:	080077ad 	.word	0x080077ad
 8007724:	080077d5 	.word	0x080077d5
 8007728:	080077d5 	.word	0x080077d5
 800772c:	080077d5 	.word	0x080077d5
 8007730:	080077d5 	.word	0x080077d5
 8007734:	080077d5 	.word	0x080077d5
 8007738:	080077d5 	.word	0x080077d5
 800773c:	080077d5 	.word	0x080077d5
 8007740:	080077b5 	.word	0x080077b5
 8007744:	080077d5 	.word	0x080077d5
 8007748:	080077d5 	.word	0x080077d5
 800774c:	080077d5 	.word	0x080077d5
 8007750:	080077d5 	.word	0x080077d5
 8007754:	080077d5 	.word	0x080077d5
 8007758:	080077d5 	.word	0x080077d5
 800775c:	080077d5 	.word	0x080077d5
 8007760:	080077bd 	.word	0x080077bd
 8007764:	080077d5 	.word	0x080077d5
 8007768:	080077d5 	.word	0x080077d5
 800776c:	080077d5 	.word	0x080077d5
 8007770:	080077d5 	.word	0x080077d5
 8007774:	080077d5 	.word	0x080077d5
 8007778:	080077d5 	.word	0x080077d5
 800777c:	080077d5 	.word	0x080077d5
 8007780:	080077c5 	.word	0x080077c5
 8007784:	080077d5 	.word	0x080077d5
 8007788:	080077d5 	.word	0x080077d5
 800778c:	080077d5 	.word	0x080077d5
 8007790:	080077d5 	.word	0x080077d5
 8007794:	080077d5 	.word	0x080077d5
 8007798:	080077d5 	.word	0x080077d5
 800779c:	080077d5 	.word	0x080077d5
 80077a0:	080077cd 	.word	0x080077cd
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077aa:	e1c0      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80077ac:	2304      	movs	r3, #4
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b2:	e1bc      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80077b4:	2308      	movs	r3, #8
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ba:	e1b8      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80077bc:	2310      	movs	r3, #16
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c2:	e1b4      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80077c4:	2320      	movs	r3, #32
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ca:	e1b0      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80077cc:	2340      	movs	r3, #64	@ 0x40
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d2:	e1ac      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80077d4:	2380      	movs	r3, #128	@ 0x80
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077da:	e1a8      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a75      	ldr	r2, [pc, #468]	@ (80079b8 <UART_SetConfig+0x638>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d130      	bne.n	8007848 <UART_SetConfig+0x4c8>
 80077e6:	4b73      	ldr	r3, [pc, #460]	@ (80079b4 <UART_SetConfig+0x634>)
 80077e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b05      	cmp	r3, #5
 80077f0:	d826      	bhi.n	8007840 <UART_SetConfig+0x4c0>
 80077f2:	a201      	add	r2, pc, #4	@ (adr r2, 80077f8 <UART_SetConfig+0x478>)
 80077f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f8:	08007811 	.word	0x08007811
 80077fc:	08007819 	.word	0x08007819
 8007800:	08007821 	.word	0x08007821
 8007804:	08007829 	.word	0x08007829
 8007808:	08007831 	.word	0x08007831
 800780c:	08007839 	.word	0x08007839
 8007810:	2300      	movs	r3, #0
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e18a      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007818:	2304      	movs	r3, #4
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e186      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007820:	2308      	movs	r3, #8
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e182      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007828:	2310      	movs	r3, #16
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e17e      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007830:	2320      	movs	r3, #32
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e17a      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007838:	2340      	movs	r3, #64	@ 0x40
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e176      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007840:	2380      	movs	r3, #128	@ 0x80
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e172      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a5b      	ldr	r2, [pc, #364]	@ (80079bc <UART_SetConfig+0x63c>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d130      	bne.n	80078b4 <UART_SetConfig+0x534>
 8007852:	4b58      	ldr	r3, [pc, #352]	@ (80079b4 <UART_SetConfig+0x634>)
 8007854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b05      	cmp	r3, #5
 800785c:	d826      	bhi.n	80078ac <UART_SetConfig+0x52c>
 800785e:	a201      	add	r2, pc, #4	@ (adr r2, 8007864 <UART_SetConfig+0x4e4>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	0800787d 	.word	0x0800787d
 8007868:	08007885 	.word	0x08007885
 800786c:	0800788d 	.word	0x0800788d
 8007870:	08007895 	.word	0x08007895
 8007874:	0800789d 	.word	0x0800789d
 8007878:	080078a5 	.word	0x080078a5
 800787c:	2300      	movs	r3, #0
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e154      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007884:	2304      	movs	r3, #4
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e150      	b.n	8007b2e <UART_SetConfig+0x7ae>
 800788c:	2308      	movs	r3, #8
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e14c      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007894:	2310      	movs	r3, #16
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e148      	b.n	8007b2e <UART_SetConfig+0x7ae>
 800789c:	2320      	movs	r3, #32
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e144      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80078a4:	2340      	movs	r3, #64	@ 0x40
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e140      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80078ac:	2380      	movs	r3, #128	@ 0x80
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e13c      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a41      	ldr	r2, [pc, #260]	@ (80079c0 <UART_SetConfig+0x640>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	f040 8082 	bne.w	80079c4 <UART_SetConfig+0x644>
 80078c0:	4b3c      	ldr	r3, [pc, #240]	@ (80079b4 <UART_SetConfig+0x634>)
 80078c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078c8:	2b28      	cmp	r3, #40	@ 0x28
 80078ca:	d86d      	bhi.n	80079a8 <UART_SetConfig+0x628>
 80078cc:	a201      	add	r2, pc, #4	@ (adr r2, 80078d4 <UART_SetConfig+0x554>)
 80078ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d2:	bf00      	nop
 80078d4:	08007979 	.word	0x08007979
 80078d8:	080079a9 	.word	0x080079a9
 80078dc:	080079a9 	.word	0x080079a9
 80078e0:	080079a9 	.word	0x080079a9
 80078e4:	080079a9 	.word	0x080079a9
 80078e8:	080079a9 	.word	0x080079a9
 80078ec:	080079a9 	.word	0x080079a9
 80078f0:	080079a9 	.word	0x080079a9
 80078f4:	08007981 	.word	0x08007981
 80078f8:	080079a9 	.word	0x080079a9
 80078fc:	080079a9 	.word	0x080079a9
 8007900:	080079a9 	.word	0x080079a9
 8007904:	080079a9 	.word	0x080079a9
 8007908:	080079a9 	.word	0x080079a9
 800790c:	080079a9 	.word	0x080079a9
 8007910:	080079a9 	.word	0x080079a9
 8007914:	08007989 	.word	0x08007989
 8007918:	080079a9 	.word	0x080079a9
 800791c:	080079a9 	.word	0x080079a9
 8007920:	080079a9 	.word	0x080079a9
 8007924:	080079a9 	.word	0x080079a9
 8007928:	080079a9 	.word	0x080079a9
 800792c:	080079a9 	.word	0x080079a9
 8007930:	080079a9 	.word	0x080079a9
 8007934:	08007991 	.word	0x08007991
 8007938:	080079a9 	.word	0x080079a9
 800793c:	080079a9 	.word	0x080079a9
 8007940:	080079a9 	.word	0x080079a9
 8007944:	080079a9 	.word	0x080079a9
 8007948:	080079a9 	.word	0x080079a9
 800794c:	080079a9 	.word	0x080079a9
 8007950:	080079a9 	.word	0x080079a9
 8007954:	08007999 	.word	0x08007999
 8007958:	080079a9 	.word	0x080079a9
 800795c:	080079a9 	.word	0x080079a9
 8007960:	080079a9 	.word	0x080079a9
 8007964:	080079a9 	.word	0x080079a9
 8007968:	080079a9 	.word	0x080079a9
 800796c:	080079a9 	.word	0x080079a9
 8007970:	080079a9 	.word	0x080079a9
 8007974:	080079a1 	.word	0x080079a1
 8007978:	2301      	movs	r3, #1
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797e:	e0d6      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007980:	2304      	movs	r3, #4
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007986:	e0d2      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007988:	2308      	movs	r3, #8
 800798a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798e:	e0ce      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007990:	2310      	movs	r3, #16
 8007992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007996:	e0ca      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007998:	2320      	movs	r3, #32
 800799a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799e:	e0c6      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80079a0:	2340      	movs	r3, #64	@ 0x40
 80079a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a6:	e0c2      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80079a8:	2380      	movs	r3, #128	@ 0x80
 80079aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ae:	e0be      	b.n	8007b2e <UART_SetConfig+0x7ae>
 80079b0:	40011400 	.word	0x40011400
 80079b4:	58024400 	.word	0x58024400
 80079b8:	40007800 	.word	0x40007800
 80079bc:	40007c00 	.word	0x40007c00
 80079c0:	40011800 	.word	0x40011800
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4aad      	ldr	r2, [pc, #692]	@ (8007c80 <UART_SetConfig+0x900>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d176      	bne.n	8007abc <UART_SetConfig+0x73c>
 80079ce:	4bad      	ldr	r3, [pc, #692]	@ (8007c84 <UART_SetConfig+0x904>)
 80079d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079d6:	2b28      	cmp	r3, #40	@ 0x28
 80079d8:	d86c      	bhi.n	8007ab4 <UART_SetConfig+0x734>
 80079da:	a201      	add	r2, pc, #4	@ (adr r2, 80079e0 <UART_SetConfig+0x660>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	08007a85 	.word	0x08007a85
 80079e4:	08007ab5 	.word	0x08007ab5
 80079e8:	08007ab5 	.word	0x08007ab5
 80079ec:	08007ab5 	.word	0x08007ab5
 80079f0:	08007ab5 	.word	0x08007ab5
 80079f4:	08007ab5 	.word	0x08007ab5
 80079f8:	08007ab5 	.word	0x08007ab5
 80079fc:	08007ab5 	.word	0x08007ab5
 8007a00:	08007a8d 	.word	0x08007a8d
 8007a04:	08007ab5 	.word	0x08007ab5
 8007a08:	08007ab5 	.word	0x08007ab5
 8007a0c:	08007ab5 	.word	0x08007ab5
 8007a10:	08007ab5 	.word	0x08007ab5
 8007a14:	08007ab5 	.word	0x08007ab5
 8007a18:	08007ab5 	.word	0x08007ab5
 8007a1c:	08007ab5 	.word	0x08007ab5
 8007a20:	08007a95 	.word	0x08007a95
 8007a24:	08007ab5 	.word	0x08007ab5
 8007a28:	08007ab5 	.word	0x08007ab5
 8007a2c:	08007ab5 	.word	0x08007ab5
 8007a30:	08007ab5 	.word	0x08007ab5
 8007a34:	08007ab5 	.word	0x08007ab5
 8007a38:	08007ab5 	.word	0x08007ab5
 8007a3c:	08007ab5 	.word	0x08007ab5
 8007a40:	08007a9d 	.word	0x08007a9d
 8007a44:	08007ab5 	.word	0x08007ab5
 8007a48:	08007ab5 	.word	0x08007ab5
 8007a4c:	08007ab5 	.word	0x08007ab5
 8007a50:	08007ab5 	.word	0x08007ab5
 8007a54:	08007ab5 	.word	0x08007ab5
 8007a58:	08007ab5 	.word	0x08007ab5
 8007a5c:	08007ab5 	.word	0x08007ab5
 8007a60:	08007aa5 	.word	0x08007aa5
 8007a64:	08007ab5 	.word	0x08007ab5
 8007a68:	08007ab5 	.word	0x08007ab5
 8007a6c:	08007ab5 	.word	0x08007ab5
 8007a70:	08007ab5 	.word	0x08007ab5
 8007a74:	08007ab5 	.word	0x08007ab5
 8007a78:	08007ab5 	.word	0x08007ab5
 8007a7c:	08007ab5 	.word	0x08007ab5
 8007a80:	08007aad 	.word	0x08007aad
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e050      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a92:	e04c      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007a94:	2308      	movs	r3, #8
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9a:	e048      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa2:	e044      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007aa4:	2320      	movs	r3, #32
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aaa:	e040      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007aac:	2340      	movs	r3, #64	@ 0x40
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab2:	e03c      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007ab4:	2380      	movs	r3, #128	@ 0x80
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aba:	e038      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a71      	ldr	r2, [pc, #452]	@ (8007c88 <UART_SetConfig+0x908>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d130      	bne.n	8007b28 <UART_SetConfig+0x7a8>
 8007ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8007c84 <UART_SetConfig+0x904>)
 8007ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d826      	bhi.n	8007b20 <UART_SetConfig+0x7a0>
 8007ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad8 <UART_SetConfig+0x758>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007af1 	.word	0x08007af1
 8007adc:	08007af9 	.word	0x08007af9
 8007ae0:	08007b01 	.word	0x08007b01
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b19 	.word	0x08007b19
 8007af0:	2302      	movs	r3, #2
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e01a      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007af8:	2304      	movs	r3, #4
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e016      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007b00:	2308      	movs	r3, #8
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b06:	e012      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	e00e      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007b10:	2320      	movs	r3, #32
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b16:	e00a      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007b18:	2340      	movs	r3, #64	@ 0x40
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1e:	e006      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007b20:	2380      	movs	r3, #128	@ 0x80
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b26:	e002      	b.n	8007b2e <UART_SetConfig+0x7ae>
 8007b28:	2380      	movs	r3, #128	@ 0x80
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a55      	ldr	r2, [pc, #340]	@ (8007c88 <UART_SetConfig+0x908>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	f040 80f8 	bne.w	8007d2a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	dc46      	bgt.n	8007bd0 <UART_SetConfig+0x850>
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	db75      	blt.n	8007c32 <UART_SetConfig+0x8b2>
 8007b46:	3b02      	subs	r3, #2
 8007b48:	2b1e      	cmp	r3, #30
 8007b4a:	d872      	bhi.n	8007c32 <UART_SetConfig+0x8b2>
 8007b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <UART_SetConfig+0x7d4>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007bd7 	.word	0x08007bd7
 8007b58:	08007c33 	.word	0x08007c33
 8007b5c:	08007bdf 	.word	0x08007bdf
 8007b60:	08007c33 	.word	0x08007c33
 8007b64:	08007c33 	.word	0x08007c33
 8007b68:	08007c33 	.word	0x08007c33
 8007b6c:	08007bef 	.word	0x08007bef
 8007b70:	08007c33 	.word	0x08007c33
 8007b74:	08007c33 	.word	0x08007c33
 8007b78:	08007c33 	.word	0x08007c33
 8007b7c:	08007c33 	.word	0x08007c33
 8007b80:	08007c33 	.word	0x08007c33
 8007b84:	08007c33 	.word	0x08007c33
 8007b88:	08007c33 	.word	0x08007c33
 8007b8c:	08007bff 	.word	0x08007bff
 8007b90:	08007c33 	.word	0x08007c33
 8007b94:	08007c33 	.word	0x08007c33
 8007b98:	08007c33 	.word	0x08007c33
 8007b9c:	08007c33 	.word	0x08007c33
 8007ba0:	08007c33 	.word	0x08007c33
 8007ba4:	08007c33 	.word	0x08007c33
 8007ba8:	08007c33 	.word	0x08007c33
 8007bac:	08007c33 	.word	0x08007c33
 8007bb0:	08007c33 	.word	0x08007c33
 8007bb4:	08007c33 	.word	0x08007c33
 8007bb8:	08007c33 	.word	0x08007c33
 8007bbc:	08007c33 	.word	0x08007c33
 8007bc0:	08007c33 	.word	0x08007c33
 8007bc4:	08007c33 	.word	0x08007c33
 8007bc8:	08007c33 	.word	0x08007c33
 8007bcc:	08007c25 	.word	0x08007c25
 8007bd0:	2b40      	cmp	r3, #64	@ 0x40
 8007bd2:	d02a      	beq.n	8007c2a <UART_SetConfig+0x8aa>
 8007bd4:	e02d      	b.n	8007c32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007bd6:	f7fc fdcb 	bl	8004770 <HAL_RCCEx_GetD3PCLK1Freq>
 8007bda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007bdc:	e02f      	b.n	8007c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fc fdda 	bl	800479c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bec:	e027      	b.n	8007c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bee:	f107 0318 	add.w	r3, r7, #24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fc ff26 	bl	8004a44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bfc:	e01f      	b.n	8007c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bfe:	4b21      	ldr	r3, [pc, #132]	@ (8007c84 <UART_SetConfig+0x904>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8007c84 <UART_SetConfig+0x904>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	08db      	lsrs	r3, r3, #3
 8007c10:	f003 0303 	and.w	r3, r3, #3
 8007c14:	4a1d      	ldr	r2, [pc, #116]	@ (8007c8c <UART_SetConfig+0x90c>)
 8007c16:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c1c:	e00f      	b.n	8007c3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8007c8c <UART_SetConfig+0x90c>)
 8007c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c22:	e00c      	b.n	8007c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c24:	4b1a      	ldr	r3, [pc, #104]	@ (8007c90 <UART_SetConfig+0x910>)
 8007c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c28:	e009      	b.n	8007c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c30:	e005      	b.n	8007c3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 81ee 	beq.w	8008022 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4a:	4a12      	ldr	r2, [pc, #72]	@ (8007c94 <UART_SetConfig+0x914>)
 8007c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c50:	461a      	mov	r2, r3
 8007c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c58:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	4413      	add	r3, r2
 8007c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d305      	bcc.n	8007c76 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d910      	bls.n	8007c98 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c7c:	e1d1      	b.n	8008022 <UART_SetConfig+0xca2>
 8007c7e:	bf00      	nop
 8007c80:	40011c00 	.word	0x40011c00
 8007c84:	58024400 	.word	0x58024400
 8007c88:	58000c00 	.word	0x58000c00
 8007c8c:	03d09000 	.word	0x03d09000
 8007c90:	003d0900 	.word	0x003d0900
 8007c94:	08008720 	.word	0x08008720
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	60bb      	str	r3, [r7, #8]
 8007c9e:	60fa      	str	r2, [r7, #12]
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca4:	4ac0      	ldr	r2, [pc, #768]	@ (8007fa8 <UART_SetConfig+0xc28>)
 8007ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	2200      	movs	r2, #0
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	607a      	str	r2, [r7, #4]
 8007cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007cba:	f7f8 fb17 	bl	80002ec <__aeabi_uldivmod>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f04f 0200 	mov.w	r2, #0
 8007cca:	f04f 0300 	mov.w	r3, #0
 8007cce:	020b      	lsls	r3, r1, #8
 8007cd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007cd4:	0202      	lsls	r2, r0, #8
 8007cd6:	6979      	ldr	r1, [r7, #20]
 8007cd8:	6849      	ldr	r1, [r1, #4]
 8007cda:	0849      	lsrs	r1, r1, #1
 8007cdc:	2000      	movs	r0, #0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	eb12 0804 	adds.w	r8, r2, r4
 8007ce6:	eb43 0905 	adc.w	r9, r3, r5
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	469a      	mov	sl, r3
 8007cf2:	4693      	mov	fp, r2
 8007cf4:	4652      	mov	r2, sl
 8007cf6:	465b      	mov	r3, fp
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	4649      	mov	r1, r9
 8007cfc:	f7f8 faf6 	bl	80002ec <__aeabi_uldivmod>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4613      	mov	r3, r2
 8007d06:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d0e:	d308      	bcc.n	8007d22 <UART_SetConfig+0x9a2>
 8007d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d16:	d204      	bcs.n	8007d22 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d1e:	60da      	str	r2, [r3, #12]
 8007d20:	e17f      	b.n	8008022 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d28:	e17b      	b.n	8008022 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d32:	f040 80bd 	bne.w	8007eb0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007d36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	dc48      	bgt.n	8007dd0 <UART_SetConfig+0xa50>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	db7b      	blt.n	8007e3a <UART_SetConfig+0xaba>
 8007d42:	2b20      	cmp	r3, #32
 8007d44:	d879      	bhi.n	8007e3a <UART_SetConfig+0xaba>
 8007d46:	a201      	add	r2, pc, #4	@ (adr r2, 8007d4c <UART_SetConfig+0x9cc>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007dd7 	.word	0x08007dd7
 8007d50:	08007ddf 	.word	0x08007ddf
 8007d54:	08007e3b 	.word	0x08007e3b
 8007d58:	08007e3b 	.word	0x08007e3b
 8007d5c:	08007de7 	.word	0x08007de7
 8007d60:	08007e3b 	.word	0x08007e3b
 8007d64:	08007e3b 	.word	0x08007e3b
 8007d68:	08007e3b 	.word	0x08007e3b
 8007d6c:	08007df7 	.word	0x08007df7
 8007d70:	08007e3b 	.word	0x08007e3b
 8007d74:	08007e3b 	.word	0x08007e3b
 8007d78:	08007e3b 	.word	0x08007e3b
 8007d7c:	08007e3b 	.word	0x08007e3b
 8007d80:	08007e3b 	.word	0x08007e3b
 8007d84:	08007e3b 	.word	0x08007e3b
 8007d88:	08007e3b 	.word	0x08007e3b
 8007d8c:	08007e07 	.word	0x08007e07
 8007d90:	08007e3b 	.word	0x08007e3b
 8007d94:	08007e3b 	.word	0x08007e3b
 8007d98:	08007e3b 	.word	0x08007e3b
 8007d9c:	08007e3b 	.word	0x08007e3b
 8007da0:	08007e3b 	.word	0x08007e3b
 8007da4:	08007e3b 	.word	0x08007e3b
 8007da8:	08007e3b 	.word	0x08007e3b
 8007dac:	08007e3b 	.word	0x08007e3b
 8007db0:	08007e3b 	.word	0x08007e3b
 8007db4:	08007e3b 	.word	0x08007e3b
 8007db8:	08007e3b 	.word	0x08007e3b
 8007dbc:	08007e3b 	.word	0x08007e3b
 8007dc0:	08007e3b 	.word	0x08007e3b
 8007dc4:	08007e3b 	.word	0x08007e3b
 8007dc8:	08007e3b 	.word	0x08007e3b
 8007dcc:	08007e2d 	.word	0x08007e2d
 8007dd0:	2b40      	cmp	r3, #64	@ 0x40
 8007dd2:	d02e      	beq.n	8007e32 <UART_SetConfig+0xab2>
 8007dd4:	e031      	b.n	8007e3a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dd6:	f7fb fae1 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8007dda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ddc:	e033      	b.n	8007e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dde:	f7fb faf3 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 8007de2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007de4:	e02f      	b.n	8007e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fc fcd6 	bl	800479c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007df4:	e027      	b.n	8007e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007df6:	f107 0318 	add.w	r3, r7, #24
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fc fe22 	bl	8004a44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e04:	e01f      	b.n	8007e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e06:	4b69      	ldr	r3, [pc, #420]	@ (8007fac <UART_SetConfig+0xc2c>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e12:	4b66      	ldr	r3, [pc, #408]	@ (8007fac <UART_SetConfig+0xc2c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	08db      	lsrs	r3, r3, #3
 8007e18:	f003 0303 	and.w	r3, r3, #3
 8007e1c:	4a64      	ldr	r2, [pc, #400]	@ (8007fb0 <UART_SetConfig+0xc30>)
 8007e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e24:	e00f      	b.n	8007e46 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007e26:	4b62      	ldr	r3, [pc, #392]	@ (8007fb0 <UART_SetConfig+0xc30>)
 8007e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e2a:	e00c      	b.n	8007e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e2c:	4b61      	ldr	r3, [pc, #388]	@ (8007fb4 <UART_SetConfig+0xc34>)
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e30:	e009      	b.n	8007e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e38:	e005      	b.n	8007e46 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80ea 	beq.w	8008022 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e52:	4a55      	ldr	r2, [pc, #340]	@ (8007fa8 <UART_SetConfig+0xc28>)
 8007e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e60:	005a      	lsls	r2, r3, #1
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	441a      	add	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e76:	2b0f      	cmp	r3, #15
 8007e78:	d916      	bls.n	8007ea8 <UART_SetConfig+0xb28>
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e80:	d212      	bcs.n	8007ea8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	f023 030f 	bic.w	r3, r3, #15
 8007e8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8e:	085b      	lsrs	r3, r3, #1
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007ea4:	60da      	str	r2, [r3, #12]
 8007ea6:	e0bc      	b.n	8008022 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007eae:	e0b8      	b.n	8008022 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eb0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	dc4b      	bgt.n	8007f50 <UART_SetConfig+0xbd0>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f2c0 8087 	blt.w	8007fcc <UART_SetConfig+0xc4c>
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	f200 8084 	bhi.w	8007fcc <UART_SetConfig+0xc4c>
 8007ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8007ecc <UART_SetConfig+0xb4c>)
 8007ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eca:	bf00      	nop
 8007ecc:	08007f57 	.word	0x08007f57
 8007ed0:	08007f5f 	.word	0x08007f5f
 8007ed4:	08007fcd 	.word	0x08007fcd
 8007ed8:	08007fcd 	.word	0x08007fcd
 8007edc:	08007f67 	.word	0x08007f67
 8007ee0:	08007fcd 	.word	0x08007fcd
 8007ee4:	08007fcd 	.word	0x08007fcd
 8007ee8:	08007fcd 	.word	0x08007fcd
 8007eec:	08007f77 	.word	0x08007f77
 8007ef0:	08007fcd 	.word	0x08007fcd
 8007ef4:	08007fcd 	.word	0x08007fcd
 8007ef8:	08007fcd 	.word	0x08007fcd
 8007efc:	08007fcd 	.word	0x08007fcd
 8007f00:	08007fcd 	.word	0x08007fcd
 8007f04:	08007fcd 	.word	0x08007fcd
 8007f08:	08007fcd 	.word	0x08007fcd
 8007f0c:	08007f87 	.word	0x08007f87
 8007f10:	08007fcd 	.word	0x08007fcd
 8007f14:	08007fcd 	.word	0x08007fcd
 8007f18:	08007fcd 	.word	0x08007fcd
 8007f1c:	08007fcd 	.word	0x08007fcd
 8007f20:	08007fcd 	.word	0x08007fcd
 8007f24:	08007fcd 	.word	0x08007fcd
 8007f28:	08007fcd 	.word	0x08007fcd
 8007f2c:	08007fcd 	.word	0x08007fcd
 8007f30:	08007fcd 	.word	0x08007fcd
 8007f34:	08007fcd 	.word	0x08007fcd
 8007f38:	08007fcd 	.word	0x08007fcd
 8007f3c:	08007fcd 	.word	0x08007fcd
 8007f40:	08007fcd 	.word	0x08007fcd
 8007f44:	08007fcd 	.word	0x08007fcd
 8007f48:	08007fcd 	.word	0x08007fcd
 8007f4c:	08007fbf 	.word	0x08007fbf
 8007f50:	2b40      	cmp	r3, #64	@ 0x40
 8007f52:	d037      	beq.n	8007fc4 <UART_SetConfig+0xc44>
 8007f54:	e03a      	b.n	8007fcc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f56:	f7fb fa21 	bl	800339c <HAL_RCC_GetPCLK1Freq>
 8007f5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f5c:	e03c      	b.n	8007fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f5e:	f7fb fa33 	bl	80033c8 <HAL_RCC_GetPCLK2Freq>
 8007f62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f64:	e038      	b.n	8007fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fc fc16 	bl	800479c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f74:	e030      	b.n	8007fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f76:	f107 0318 	add.w	r3, r7, #24
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fc fd62 	bl	8004a44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f84:	e028      	b.n	8007fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f86:	4b09      	ldr	r3, [pc, #36]	@ (8007fac <UART_SetConfig+0xc2c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0320 	and.w	r3, r3, #32
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d012      	beq.n	8007fb8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f92:	4b06      	ldr	r3, [pc, #24]	@ (8007fac <UART_SetConfig+0xc2c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	08db      	lsrs	r3, r3, #3
 8007f98:	f003 0303 	and.w	r3, r3, #3
 8007f9c:	4a04      	ldr	r2, [pc, #16]	@ (8007fb0 <UART_SetConfig+0xc30>)
 8007f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007fa4:	e018      	b.n	8007fd8 <UART_SetConfig+0xc58>
 8007fa6:	bf00      	nop
 8007fa8:	08008720 	.word	0x08008720
 8007fac:	58024400 	.word	0x58024400
 8007fb0:	03d09000 	.word	0x03d09000
 8007fb4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007fb8:	4b24      	ldr	r3, [pc, #144]	@ (800804c <UART_SetConfig+0xccc>)
 8007fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fbc:	e00c      	b.n	8007fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007fbe:	4b24      	ldr	r3, [pc, #144]	@ (8008050 <UART_SetConfig+0xcd0>)
 8007fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc2:	e009      	b.n	8007fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fca:	e005      	b.n	8007fd8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007fd6:	bf00      	nop
    }

    if (pclk != 0U)
 8007fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d021      	beq.n	8008022 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8008054 <UART_SetConfig+0xcd4>)
 8007fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fec:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	085b      	lsrs	r3, r3, #1
 8007ff6:	441a      	add	r2, r3
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008000:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008004:	2b0f      	cmp	r3, #15
 8008006:	d909      	bls.n	800801c <UART_SetConfig+0xc9c>
 8008008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800800a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800800e:	d205      	bcs.n	800801c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008012:	b29a      	uxth	r2, r3
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60da      	str	r2, [r3, #12]
 800801a:	e002      	b.n	8008022 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2201      	movs	r2, #1
 8008026:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2201      	movs	r2, #1
 800802e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2200      	movs	r2, #0
 8008036:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2200      	movs	r2, #0
 800803c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800803e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008042:	4618      	mov	r0, r3
 8008044:	3748      	adds	r7, #72	@ 0x48
 8008046:	46bd      	mov	sp, r7
 8008048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800804c:	03d09000 	.word	0x03d09000
 8008050:	003d0900 	.word	0x003d0900
 8008054:	08008720 	.word	0x08008720

08008058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00a      	beq.n	8008082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	430a      	orrs	r2, r1
 80080a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00a      	beq.n	80080c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ec:	f003 0310 	and.w	r3, r3, #16
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01a      	beq.n	800816e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008156:	d10a      	bne.n	800816e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	605a      	str	r2, [r3, #4]
  }
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b098      	sub	sp, #96	@ 0x60
 80081a0:	af02      	add	r7, sp, #8
 80081a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081ac:	f7f9 fe24 	bl	8001df8 <HAL_GetTick>
 80081b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d12f      	bne.n	8008220 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081c8:	2200      	movs	r2, #0
 80081ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f88e 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d022      	beq.n	8008220 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80081fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008200:	e841 2300 	strex	r3, r2, [r1]
 8008204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e6      	bne.n	80081da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2220      	movs	r2, #32
 8008210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e063      	b.n	80082e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b04      	cmp	r3, #4
 800822c:	d149      	bne.n	80082c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800822e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008236:	2200      	movs	r2, #0
 8008238:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 f857 	bl	80082f0 <UART_WaitOnFlagUntilTimeout>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d03c      	beq.n	80082c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	623b      	str	r3, [r7, #32]
   return(result);
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800825c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008266:	633b      	str	r3, [r7, #48]	@ 0x30
 8008268:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800826c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e6      	bne.n	8008248 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	e853 3f00 	ldrex	r3, [r3]
 8008288:	60fb      	str	r3, [r7, #12]
   return(result);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f023 0301 	bic.w	r3, r3, #1
 8008290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800829a:	61fa      	str	r2, [r7, #28]
 800829c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829e:	69b9      	ldr	r1, [r7, #24]
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	617b      	str	r3, [r7, #20]
   return(result);
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e5      	bne.n	800827a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e012      	b.n	80082e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2220      	movs	r2, #32
 80082c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3758      	adds	r7, #88	@ 0x58
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	603b      	str	r3, [r7, #0]
 80082fc:	4613      	mov	r3, r2
 80082fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008300:	e04f      	b.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008308:	d04b      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800830a:	f7f9 fd75 	bl	8001df8 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <UART_WaitOnFlagUntilTimeout+0x30>
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e04e      	b.n	80083c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0304 	and.w	r3, r3, #4
 800832e:	2b00      	cmp	r3, #0
 8008330:	d037      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b80      	cmp	r3, #128	@ 0x80
 8008336:	d034      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b40      	cmp	r3, #64	@ 0x40
 800833c:	d031      	beq.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	f003 0308 	and.w	r3, r3, #8
 8008348:	2b08      	cmp	r3, #8
 800834a:	d110      	bne.n	800836e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2208      	movs	r2, #8
 8008352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f839 	bl	80083cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2208      	movs	r2, #8
 800835e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e029      	b.n	80083c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800837c:	d111      	bne.n	80083a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f81f 	bl	80083cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2220      	movs	r2, #32
 8008392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e00f      	b.n	80083c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	69da      	ldr	r2, [r3, #28]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	4013      	ands	r3, r2
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	bf0c      	ite	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	2300      	movne	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d0a0      	beq.n	8008302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b095      	sub	sp, #84	@ 0x54
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80083f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e6      	bne.n	80083d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	61fb      	str	r3, [r7, #28]
   return(result);
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	4b1e      	ldr	r3, [pc, #120]	@ (8008494 <UART_EndRxTransfer+0xc8>)
 800841a:	4013      	ands	r3, r2
 800841c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3308      	adds	r3, #8
 8008424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008428:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800842c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e5      	bne.n	8008406 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800843e:	2b01      	cmp	r3, #1
 8008440:	d118      	bne.n	8008474 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f023 0310 	bic.w	r3, r3, #16
 8008456:	647b      	str	r3, [r7, #68]	@ 0x44
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	461a      	mov	r2, r3
 800845e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	6979      	ldr	r1, [r7, #20]
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	e841 2300 	strex	r3, r2, [r1]
 800846c:	613b      	str	r3, [r7, #16]
   return(result);
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1e6      	bne.n	8008442 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008488:	bf00      	nop
 800848a:	3754      	adds	r7, #84	@ 0x54
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	effffffe 	.word	0xeffffffe

08008498 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d101      	bne.n	80084ae <HAL_UARTEx_DisableFifoMode+0x16>
 80084aa:	2302      	movs	r3, #2
 80084ac:	e027      	b.n	80084fe <HAL_UARTEx_DisableFifoMode+0x66>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2224      	movs	r2, #36	@ 0x24
 80084ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 0201 	bic.w	r2, r2, #1
 80084d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80084dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800851e:	2302      	movs	r3, #2
 8008520:	e02d      	b.n	800857e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2224      	movs	r2, #36	@ 0x24
 800852e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0201 	bic.w	r2, r2, #1
 8008548:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f850 	bl	8008604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008596:	2b01      	cmp	r3, #1
 8008598:	d101      	bne.n	800859e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800859a:	2302      	movs	r3, #2
 800859c:	e02d      	b.n	80085fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2224      	movs	r2, #36	@ 0x24
 80085aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 0201 	bic.w	r2, r2, #1
 80085c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f812 	bl	8008604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
	...

08008604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008610:	2b00      	cmp	r3, #0
 8008612:	d108      	bne.n	8008626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008624:	e031      	b.n	800868a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008626:	2310      	movs	r3, #16
 8008628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800862a:	2310      	movs	r3, #16
 800862c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	0e5b      	lsrs	r3, r3, #25
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f003 0307 	and.w	r3, r3, #7
 800863c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	0f5b      	lsrs	r3, r3, #29
 8008646:	b2db      	uxtb	r3, r3
 8008648:	f003 0307 	and.w	r3, r3, #7
 800864c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	7b3a      	ldrb	r2, [r7, #12]
 8008652:	4911      	ldr	r1, [pc, #68]	@ (8008698 <UARTEx_SetNbDataToProcess+0x94>)
 8008654:	5c8a      	ldrb	r2, [r1, r2]
 8008656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800865a:	7b3a      	ldrb	r2, [r7, #12]
 800865c:	490f      	ldr	r1, [pc, #60]	@ (800869c <UARTEx_SetNbDataToProcess+0x98>)
 800865e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008660:	fb93 f3f2 	sdiv	r3, r3, r2
 8008664:	b29a      	uxth	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	7b7a      	ldrb	r2, [r7, #13]
 8008670:	4909      	ldr	r1, [pc, #36]	@ (8008698 <UARTEx_SetNbDataToProcess+0x94>)
 8008672:	5c8a      	ldrb	r2, [r1, r2]
 8008674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008678:	7b7a      	ldrb	r2, [r7, #13]
 800867a:	4908      	ldr	r1, [pc, #32]	@ (800869c <UARTEx_SetNbDataToProcess+0x98>)
 800867c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800867e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008682:	b29a      	uxth	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800868a:	bf00      	nop
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	08008738 	.word	0x08008738
 800869c:	08008740 	.word	0x08008740

080086a0 <memset>:
 80086a0:	4402      	add	r2, r0
 80086a2:	4603      	mov	r3, r0
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d100      	bne.n	80086aa <memset+0xa>
 80086a8:	4770      	bx	lr
 80086aa:	f803 1b01 	strb.w	r1, [r3], #1
 80086ae:	e7f9      	b.n	80086a4 <memset+0x4>

080086b0 <__libc_init_array>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	4d0d      	ldr	r5, [pc, #52]	@ (80086e8 <__libc_init_array+0x38>)
 80086b4:	4c0d      	ldr	r4, [pc, #52]	@ (80086ec <__libc_init_array+0x3c>)
 80086b6:	1b64      	subs	r4, r4, r5
 80086b8:	10a4      	asrs	r4, r4, #2
 80086ba:	2600      	movs	r6, #0
 80086bc:	42a6      	cmp	r6, r4
 80086be:	d109      	bne.n	80086d4 <__libc_init_array+0x24>
 80086c0:	4d0b      	ldr	r5, [pc, #44]	@ (80086f0 <__libc_init_array+0x40>)
 80086c2:	4c0c      	ldr	r4, [pc, #48]	@ (80086f4 <__libc_init_array+0x44>)
 80086c4:	f000 f818 	bl	80086f8 <_init>
 80086c8:	1b64      	subs	r4, r4, r5
 80086ca:	10a4      	asrs	r4, r4, #2
 80086cc:	2600      	movs	r6, #0
 80086ce:	42a6      	cmp	r6, r4
 80086d0:	d105      	bne.n	80086de <__libc_init_array+0x2e>
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d8:	4798      	blx	r3
 80086da:	3601      	adds	r6, #1
 80086dc:	e7ee      	b.n	80086bc <__libc_init_array+0xc>
 80086de:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e2:	4798      	blx	r3
 80086e4:	3601      	adds	r6, #1
 80086e6:	e7f2      	b.n	80086ce <__libc_init_array+0x1e>
 80086e8:	08008750 	.word	0x08008750
 80086ec:	08008750 	.word	0x08008750
 80086f0:	08008750 	.word	0x08008750
 80086f4:	08008754 	.word	0x08008754

080086f8 <_init>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr

08008704 <_fini>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr
